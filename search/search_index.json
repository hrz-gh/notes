{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u4e2a\u4eba\u7b14\u8bb0","title":"\u4e2a\u4eba\u7b14\u8bb0"},{"location":"#_1","text":"","title":"\u4e2a\u4eba\u7b14\u8bb0"},{"location":"list/","text":"\u4e66\u5355 \u6570\u5b66(\u8fdb\u9636) \u300a\u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1\u300b\u9648\u5e0c\u5b7a \u8457 PDF \u300a\u77e9\u9635\u5206\u6790\u4e0e\u5e94\u7528\u300b\u5f20\u8d24\u8fbe PDF \u300a\u666e\u6797\u65af\u987f\u5fae\u79ef\u5206\u8bfb\u672c\u300b PDF \u300a\u5e94\u7528\u8fd1\u4e16\u4ee3\u6570 \u7b2c3\u7248\u300b\u80e1\u51a0\u7ae0 \u8457 PDF \u300aConvex Optimization\u300bby Stephen Boyd PDF \u7f16\u7a0b\u8bed\u8a00 C\u8bed\u8a00 \u300aC Primer Plus\u300b(\u5165\u95e8 ) PDF \u300aC\u548c\u6307\u9488\u300b\u7ecf\u5178 PDF C++ \u300aC++ Primer Plus\u300b(\u9002\u5408\u65e0C\u8bed\u8a00\u57fa\u7840\u5165\u95e8) PDF \u300aC++ Primer\u300b(\u63d0\u9ad8) PDF \u300aThe C++ Programming Language\u300b\u6743\u5a01 PDF \u300aEffective Modern C++\u300bC++11/14 PDF \u300aModern C++ Tutorial C++ 11/14/17/20 On the Fly\u300b\u9ad8\u901f\u4e0a\u624bC++11/14\u6559\u7a0b PDF \u300aExceptional C++\uff1a47\u4e2aC++\u5de5\u7a0b\u96be\u9898\u3001\u7f16\u7a0b\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6848\u300b PDF Java \u300aHead First Java\u300b(\u5165\u95e8) PDF \u300a\u75af\u72c2Java\u8bb2\u4e49\u300b PDF \u300aJava\u7f16\u7a0b\u601d\u60f3\u300b PDF \u300aJava\u6838\u5fc3\u6280\u672f\u300b PDF1 \u3001 PDF2 \u300aEffective Java\u300b\u7b2c3\u7248 PDF Python \u300aPython\u7f16\u7a0b\u5165\u95e8\u5230\u5b9e\u8df5[\u7f8e]\u300b(\u5165\u95e8) PDF \u300a\u6d41\u7545\u7684Python\u300b\u8fdb\u9636 PDF Android\u5f00\u53d1 \u300a\u7b2c\u4e00\u884c\u4ee3\u7801Android\u300b\u7b2c2\u7248(\u5165\u95e8) PDF \u300aAndroid\u7f16\u7a0b\u6743\u5a01\u6307\u5357\u300b(\u63d0\u5347) PDF \u300aAndroid\u5f00\u53d1\u827a\u672f\u63a2\u7d22\u300b(\u8fdb\u9636) PDF \u300aAndroid\u6e90\u7801\u8bbe\u8ba1\u6a21\u5f0f\u89e3\u6790\u4e0e\u5b9e\u6218\u300b PDF \u300aKotlin\u7f16\u7a0b\u6743\u5a01\u6307\u5357\u300b \u300aAndroid\u7fa4\u82f1\u4f20\u300b PDF \u7b97\u6cd5 \u300a\u7b97\u6cd5\u5bfc\u8bba\u300b\u7b2c3\u7248 PDF \u300a\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u5206\u6790\u300b\u7ecf\u5178 PDF \u300a\u591a\u7ef4\u4e0e\u5ea6\u91cf\u6570\u636e\u7ed3\u6784\u57fa\u7840[\u7f8e]\u300b PDF \u300a\u7b97\u6cd5\u300b\u7b2c4\u7248\uff08Java\u63cf\u8ff0\uff09 PDF \u300a\u7b97\u6cd5\u7b14\u8bb0\u300b(\u80e1\u51e1\uff0c\u66fe\u78ca \u7f16) PDF \u300a\u6311\u6218\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u300b PDF \u300a\u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u7ecf\u5178\u300b\u7b2c2\u7248 PDF \u8ba1\u7b97\u673a\u89c6\u89c9 \u300a\u6570\u5b57\u56fe\u50cf\u5904\u7406\u300b\u5188\u8428\u96f7\u65af \u8457 PDF \u300a\u8ba1\u7b97\u673a\u89c6\u89c9\u2014\u2014\u7b97\u6cd5\u4e0e\u5e94\u7528\u300b\u7ecf\u5178 PDF \u300a\u89c6\u89c9\u673a\u5668\u5b66\u4e6020\u8bb2\u300b PDF \u300a\u89c6\u89c9SLAM\u5341\u56db\u8bb2 \u4ece\u7406\u8bba\u5230\u5b9e\u8df5\u300b\u7b2c2\u7248 \u300a\u56fe\u50cf\u5904\u7406\u3001\u5206\u6790\u4e0e\u673a\u5668\u89c6\u89c9\u300b\u7b2c4\u7248 PDF \u300a\u8ba1\u7b97\u673a\u89c6\u89c9\u6a21\u578b\u3001\u5b66\u4e60\u548c\u63a8\u7406\u300b PDF \u300aMultiple view geometry in computer vision\u300b\u7b2c2\u7248 PDF \u7f16\u7a0b \u300aPython\u8ba1\u7b97\u673a\u89c6\u89c9\u7f16\u7a0b\u300b PDF \u300a\u5b66\u4e60OpenCV3\u300b\u7ecf\u5178 \u300aOpenCV3\u7f16\u7a0b\u5165\u95e8\u300b(\u6bdb\u661f\u4e91\u7f16) PDF \u300aOpenCV\u7b97\u6cd5\u7cbe\u89e3\uff1a\u57fa\u4e8ePython\u4e0eC++\u300b \u300aOpenGL \u8d85\u7ea7\u5b9d\u5178 \u7b2c\u4e94\u7248\u300b PDF-EN \u3001 PDF-CN \u300aOpenGL ES 3.0 \u7f16\u7a0b\u6307\u5357\u300b PDF \u300aOpenGL ES \u5e94\u7528\u5f00\u53d1\u5b9e\u8df5\u6307\u5357 Android \u5377\u300b PDF \u300aThe Book of Shaders\u300b PDF \u65af\u5766\u798f\u5927\u5b66\u516c\u5f00\u8bfe Stanford CS231N Stanford CS223B \u673a\u5668\u5b66\u4e60\u3001\u6df1\u5ea6\u5b66\u4e60 \u300a\u673a\u5668\u5b66\u4e60\u300b\u5468\u5fd7\u534e \u8457 PDF \u300a\u7edf\u8ba1\u5b66\u4e60\u65b9\u6cd5 \u7b2c\u4e8c\u7248\u300b\u674e\u822a \u8457 PDF \u300a\u7edf\u8ba1\u673a\u5668\u5b66\u4e60\u5bfc\u8bba[\u65e5]\u300b \u300aDeep Learning\u300b(\u82b1\u4e66) PDF \u300a\u56fe\u89e3\u673a\u5668\u5b66\u4e60[\u65e5]\u300b PDF \u7f16\u7a0b \u300aHands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow\u300b\u7b2c\u4e8c\u7248(\u5feb\u901f\u4e0a\u624b) PDF \u300a\u6df1\u5ea6\u6709\u8da3\u300b\u5728\u7ebf\u9879\u76ee PDF \u300a21\u4e2a\u9879\u76ee\u73a9\u8f6c\u6df1\u5ea6\u5b66\u4e60\uff1a\u57fa\u4e8eTensorFlow\u7684\u5b9e\u8df5\u8bb2\u89e3\u300b PDF \u300aTensorFlow\uff1a\u5b9e\u6218Google\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u300b \u5f3a\u5316\u5b66\u4e60 \u300a\u5f3a\u5316\u5b66\u4e60\u7cbe\u8981\uff1a\u6838\u5fc3\u7b97\u6cd5\u4e0eTensorFlow\u5b9e\u73b0\u300b PDF \u300aReinforcement Learning\uff1aAn Introduction\u300b\u7b2c2\u7248 PDF \u300aAlgorithm for Reinforcement Learning\u300bby Csaba Szepesvari PDF \u8ba1\u7b97\u673a\u79d1\u5b66\u5174\u8da3\u8bfb\u7269 \u300a\u6570\u5b66\u4e4b\u7f8e\u300b PDF \u300a\u79bb\u6563\u6570\u5b66\u53ca\u5176\u5e94\u7528\u300b PDF \u300a\u5177\u4f53\u6570\u5b66\u300b PDF \u300a\u7ec4\u5408\u6570\u5b66\u300b PDF \u300a\u6df1\u5165\u7406\u89e3\u8ba1\u7b97\u673a\u7cfb\u7edf\u300b PDF \u300a\u4e00\u4e2a64\u4f4d\u64cd\u4f5c\u7cfb\u7edf\u7684\u8bbe\u8ba1\u4e0e\u5b9e\u73b0\u300b \u300a\u8ba1\u7b97\u673a\u79d1\u5b66\u5bfc\u8bba\u300b \u5927\u6570\u636e \u300aSpark\u5feb\u901f\u5927\u6570\u636e\u5206\u6790[\u7f8e]\u300b PDF \u300aMongoDB\u6743\u5a01\u6307\u5357\u300b\u7b2c2\u7248 PDF \u300a\u6570\u636e\u7b97\u6cd5\uff1aHadoop/Spark\u5927\u6570\u636e\u5904\u7406\u6280\u5de7\u300b PDF \u300aHadoop\u6743\u5a01\u6307\u5357\uff1a\u5927\u6570\u636e\u7684\u5b58\u50a8\u4e0e\u5206\u6790\u300b PDF \u300a\u9ad8\u6027\u80fdMySQL\u300b\u7b2c3\u7248 PDF \u6570\u636e\u6316\u6398 \u300a\u6570\u636e\u6316\u6398\u5bfc\u8bba\u300b\u7b2c2\u7248 PDF \u300aPython\u6570\u636e\u5206\u6790\u4e0e\u6316\u6398\u5b9e\u6218\u300b PDF \u300a\u6570\u636e\u6316\u6398\u4e0e\u9884\u6d4b\u5206\u6790\u300b(R\u8bed\u8a00) PDF","title":"\u4e66\u5355"},{"location":"list/#_1","text":"","title":"\u4e66\u5355"},{"location":"list/#_2","text":"\u300a\u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1\u300b\u9648\u5e0c\u5b7a \u8457 PDF \u300a\u77e9\u9635\u5206\u6790\u4e0e\u5e94\u7528\u300b\u5f20\u8d24\u8fbe PDF \u300a\u666e\u6797\u65af\u987f\u5fae\u79ef\u5206\u8bfb\u672c\u300b PDF \u300a\u5e94\u7528\u8fd1\u4e16\u4ee3\u6570 \u7b2c3\u7248\u300b\u80e1\u51a0\u7ae0 \u8457 PDF \u300aConvex Optimization\u300bby Stephen Boyd PDF","title":"\u6570\u5b66(\u8fdb\u9636)"},{"location":"list/#_3","text":"C\u8bed\u8a00 \u300aC Primer Plus\u300b(\u5165\u95e8 ) PDF \u300aC\u548c\u6307\u9488\u300b\u7ecf\u5178 PDF C++ \u300aC++ Primer Plus\u300b(\u9002\u5408\u65e0C\u8bed\u8a00\u57fa\u7840\u5165\u95e8) PDF \u300aC++ Primer\u300b(\u63d0\u9ad8) PDF \u300aThe C++ Programming Language\u300b\u6743\u5a01 PDF \u300aEffective Modern C++\u300bC++11/14 PDF \u300aModern C++ Tutorial C++ 11/14/17/20 On the Fly\u300b\u9ad8\u901f\u4e0a\u624bC++11/14\u6559\u7a0b PDF \u300aExceptional C++\uff1a47\u4e2aC++\u5de5\u7a0b\u96be\u9898\u3001\u7f16\u7a0b\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6848\u300b PDF Java \u300aHead First Java\u300b(\u5165\u95e8) PDF \u300a\u75af\u72c2Java\u8bb2\u4e49\u300b PDF \u300aJava\u7f16\u7a0b\u601d\u60f3\u300b PDF \u300aJava\u6838\u5fc3\u6280\u672f\u300b PDF1 \u3001 PDF2 \u300aEffective Java\u300b\u7b2c3\u7248 PDF Python \u300aPython\u7f16\u7a0b\u5165\u95e8\u5230\u5b9e\u8df5[\u7f8e]\u300b(\u5165\u95e8) PDF \u300a\u6d41\u7545\u7684Python\u300b\u8fdb\u9636 PDF","title":"\u7f16\u7a0b\u8bed\u8a00"},{"location":"list/#android","text":"\u300a\u7b2c\u4e00\u884c\u4ee3\u7801Android\u300b\u7b2c2\u7248(\u5165\u95e8) PDF \u300aAndroid\u7f16\u7a0b\u6743\u5a01\u6307\u5357\u300b(\u63d0\u5347) PDF \u300aAndroid\u5f00\u53d1\u827a\u672f\u63a2\u7d22\u300b(\u8fdb\u9636) PDF \u300aAndroid\u6e90\u7801\u8bbe\u8ba1\u6a21\u5f0f\u89e3\u6790\u4e0e\u5b9e\u6218\u300b PDF \u300aKotlin\u7f16\u7a0b\u6743\u5a01\u6307\u5357\u300b \u300aAndroid\u7fa4\u82f1\u4f20\u300b PDF","title":"Android\u5f00\u53d1"},{"location":"list/#_4","text":"\u300a\u7b97\u6cd5\u5bfc\u8bba\u300b\u7b2c3\u7248 PDF \u300a\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u5206\u6790\u300b\u7ecf\u5178 PDF \u300a\u591a\u7ef4\u4e0e\u5ea6\u91cf\u6570\u636e\u7ed3\u6784\u57fa\u7840[\u7f8e]\u300b PDF \u300a\u7b97\u6cd5\u300b\u7b2c4\u7248\uff08Java\u63cf\u8ff0\uff09 PDF \u300a\u7b97\u6cd5\u7b14\u8bb0\u300b(\u80e1\u51e1\uff0c\u66fe\u78ca \u7f16) PDF \u300a\u6311\u6218\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u300b PDF \u300a\u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u7ecf\u5178\u300b\u7b2c2\u7248 PDF","title":"\u7b97\u6cd5"},{"location":"list/#_5","text":"\u300a\u6570\u5b57\u56fe\u50cf\u5904\u7406\u300b\u5188\u8428\u96f7\u65af \u8457 PDF \u300a\u8ba1\u7b97\u673a\u89c6\u89c9\u2014\u2014\u7b97\u6cd5\u4e0e\u5e94\u7528\u300b\u7ecf\u5178 PDF \u300a\u89c6\u89c9\u673a\u5668\u5b66\u4e6020\u8bb2\u300b PDF \u300a\u89c6\u89c9SLAM\u5341\u56db\u8bb2 \u4ece\u7406\u8bba\u5230\u5b9e\u8df5\u300b\u7b2c2\u7248 \u300a\u56fe\u50cf\u5904\u7406\u3001\u5206\u6790\u4e0e\u673a\u5668\u89c6\u89c9\u300b\u7b2c4\u7248 PDF \u300a\u8ba1\u7b97\u673a\u89c6\u89c9\u6a21\u578b\u3001\u5b66\u4e60\u548c\u63a8\u7406\u300b PDF \u300aMultiple view geometry in computer vision\u300b\u7b2c2\u7248 PDF \u7f16\u7a0b \u300aPython\u8ba1\u7b97\u673a\u89c6\u89c9\u7f16\u7a0b\u300b PDF \u300a\u5b66\u4e60OpenCV3\u300b\u7ecf\u5178 \u300aOpenCV3\u7f16\u7a0b\u5165\u95e8\u300b(\u6bdb\u661f\u4e91\u7f16) PDF \u300aOpenCV\u7b97\u6cd5\u7cbe\u89e3\uff1a\u57fa\u4e8ePython\u4e0eC++\u300b \u300aOpenGL \u8d85\u7ea7\u5b9d\u5178 \u7b2c\u4e94\u7248\u300b PDF-EN \u3001 PDF-CN \u300aOpenGL ES 3.0 \u7f16\u7a0b\u6307\u5357\u300b PDF \u300aOpenGL ES \u5e94\u7528\u5f00\u53d1\u5b9e\u8df5\u6307\u5357 Android \u5377\u300b PDF \u300aThe Book of Shaders\u300b PDF","title":"\u8ba1\u7b97\u673a\u89c6\u89c9"},{"location":"list/#_6","text":"Stanford CS231N Stanford CS223B","title":"\u65af\u5766\u798f\u5927\u5b66\u516c\u5f00\u8bfe"},{"location":"list/#_7","text":"\u300a\u673a\u5668\u5b66\u4e60\u300b\u5468\u5fd7\u534e \u8457 PDF \u300a\u7edf\u8ba1\u5b66\u4e60\u65b9\u6cd5 \u7b2c\u4e8c\u7248\u300b\u674e\u822a \u8457 PDF \u300a\u7edf\u8ba1\u673a\u5668\u5b66\u4e60\u5bfc\u8bba[\u65e5]\u300b \u300aDeep Learning\u300b(\u82b1\u4e66) PDF \u300a\u56fe\u89e3\u673a\u5668\u5b66\u4e60[\u65e5]\u300b PDF \u7f16\u7a0b \u300aHands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow\u300b\u7b2c\u4e8c\u7248(\u5feb\u901f\u4e0a\u624b) PDF \u300a\u6df1\u5ea6\u6709\u8da3\u300b\u5728\u7ebf\u9879\u76ee PDF \u300a21\u4e2a\u9879\u76ee\u73a9\u8f6c\u6df1\u5ea6\u5b66\u4e60\uff1a\u57fa\u4e8eTensorFlow\u7684\u5b9e\u8df5\u8bb2\u89e3\u300b PDF \u300aTensorFlow\uff1a\u5b9e\u6218Google\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u300b","title":"\u673a\u5668\u5b66\u4e60\u3001\u6df1\u5ea6\u5b66\u4e60"},{"location":"list/#_8","text":"\u300a\u5f3a\u5316\u5b66\u4e60\u7cbe\u8981\uff1a\u6838\u5fc3\u7b97\u6cd5\u4e0eTensorFlow\u5b9e\u73b0\u300b PDF \u300aReinforcement Learning\uff1aAn Introduction\u300b\u7b2c2\u7248 PDF \u300aAlgorithm for Reinforcement Learning\u300bby Csaba Szepesvari PDF","title":"\u5f3a\u5316\u5b66\u4e60"},{"location":"list/#_9","text":"\u300a\u6570\u5b66\u4e4b\u7f8e\u300b PDF \u300a\u79bb\u6563\u6570\u5b66\u53ca\u5176\u5e94\u7528\u300b PDF \u300a\u5177\u4f53\u6570\u5b66\u300b PDF \u300a\u7ec4\u5408\u6570\u5b66\u300b PDF \u300a\u6df1\u5165\u7406\u89e3\u8ba1\u7b97\u673a\u7cfb\u7edf\u300b PDF \u300a\u4e00\u4e2a64\u4f4d\u64cd\u4f5c\u7cfb\u7edf\u7684\u8bbe\u8ba1\u4e0e\u5b9e\u73b0\u300b \u300a\u8ba1\u7b97\u673a\u79d1\u5b66\u5bfc\u8bba\u300b","title":"\u8ba1\u7b97\u673a\u79d1\u5b66\u5174\u8da3\u8bfb\u7269"},{"location":"list/#_10","text":"\u300aSpark\u5feb\u901f\u5927\u6570\u636e\u5206\u6790[\u7f8e]\u300b PDF \u300aMongoDB\u6743\u5a01\u6307\u5357\u300b\u7b2c2\u7248 PDF \u300a\u6570\u636e\u7b97\u6cd5\uff1aHadoop/Spark\u5927\u6570\u636e\u5904\u7406\u6280\u5de7\u300b PDF \u300aHadoop\u6743\u5a01\u6307\u5357\uff1a\u5927\u6570\u636e\u7684\u5b58\u50a8\u4e0e\u5206\u6790\u300b PDF \u300a\u9ad8\u6027\u80fdMySQL\u300b\u7b2c3\u7248 PDF","title":"\u5927\u6570\u636e"},{"location":"list/#_11","text":"\u300a\u6570\u636e\u6316\u6398\u5bfc\u8bba\u300b\u7b2c2\u7248 PDF \u300aPython\u6570\u636e\u5206\u6790\u4e0e\u6316\u6398\u5b9e\u6218\u300b PDF \u300a\u6570\u636e\u6316\u6398\u4e0e\u9884\u6d4b\u5206\u6790\u300b(R\u8bed\u8a00) PDF","title":"\u6570\u636e\u6316\u6398"},{"location":"%E5%85%B6%E4%BB%96/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE/","text":"\u5f00\u6e90\u534f\u8bae flowchart TB a{\"\u4fee\u6539\u6e90\u7801\u540e\\n\u53ef\u4ee5\u95ed\u6e90?\"} b1{\"\u65b0\u589e\u4ee3\u7801\u91c7\u7528\\n\u540c\u6837\u8bb8\u53ef\u8bc1?\"} b2{\"\u4fee\u6539\u8fc7\u7684\u6587\u4ef6\u5fc5\\n\u987b\u6709\u7248\u6743\u8bf4\u660e?\"} c1{\"\u5bf9\u6e90\u7801\u7684\u4fee\u6539\u5904\\n\u63d0\u4f9b\u8bf4\u660e\u6587\u6863?\"} c2{\"\u884d\u751f\u8f6f\u4ef6\u7684\u5e7f\u544a\\n\u7528\u4f60\u7684\u540d\u5b57\u4fc3\u9500?\"} a --No--> b1 a --Yes--> b2 b1 --No--> c1 b1 --Yes--> GPL b2 --No--> c2 b2 --Yes--> Apache c1 --No--> LGPL c1 --Yes--> Mozilla c2 --No--> BSD c2 --Yes--> MIT","title":"\u5f00\u6e90\u534f\u8bae"},{"location":"%E5%85%B6%E4%BB%96/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE/#_1","text":"flowchart TB a{\"\u4fee\u6539\u6e90\u7801\u540e\\n\u53ef\u4ee5\u95ed\u6e90?\"} b1{\"\u65b0\u589e\u4ee3\u7801\u91c7\u7528\\n\u540c\u6837\u8bb8\u53ef\u8bc1?\"} b2{\"\u4fee\u6539\u8fc7\u7684\u6587\u4ef6\u5fc5\\n\u987b\u6709\u7248\u6743\u8bf4\u660e?\"} c1{\"\u5bf9\u6e90\u7801\u7684\u4fee\u6539\u5904\\n\u63d0\u4f9b\u8bf4\u660e\u6587\u6863?\"} c2{\"\u884d\u751f\u8f6f\u4ef6\u7684\u5e7f\u544a\\n\u7528\u4f60\u7684\u540d\u5b57\u4fc3\u9500?\"} a --No--> b1 a --Yes--> b2 b1 --No--> c1 b1 --Yes--> GPL b2 --No--> c2 b2 --Yes--> Apache c1 --No--> LGPL c1 --Yes--> Mozilla c2 --No--> BSD c2 --Yes--> MIT","title":"\u5f00\u6e90\u534f\u8bae"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/BasicMathProblem/","text":"\u516c\u7ea6\u6570\u4e0e\u516c\u500d\u6570 \u6700\u5927\u516c\u7ea6\u6570 //\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 int gcd(int a, int b) { return b ? gcd(b, a % b) : a; } \u6700\u5c0f\u516c\u500d\u6570 int lcm = a / gcd(a, b) * b; \u5206\u6570\u7684\u56db\u5219\u8fd0\u7b97 struct Fraction { int up, down; } // \u6838\u5fc3\u90e8\u5206\u662f\u5206\u6570\u7684\u5316\u7b80\uff0c\u5176\u6700\u7b80\u5f62\u5f0f\u6ee1\u8db3\u4ee5\u4e0b\u4e09\u70b9 // 1. down\u4e3a\u975e\u8d1f\u6570 // 2. \u503c\u4e3a0\u65f6\uff0cup = 0, down = 1 // 3. gcd(up, down) = 1 void reduction(Fraction &ans) { if (ans.down < 0) { ans.up = -ans.up; ans.down = -ans.down; } if (ans.up == 0) { ans.up = 0; ans.down = 1; } else { int g = gcd(ans.up, ans.down); ans.up /= g; ans.down /= g; } } // \u8fd0\u7b97\u90e8\u5206\u5f88\u5bb9\u6613\u5199\u51fa\u6765 \u7d20\u6570 \u6570\u7b5b\u6cd5\u5224\u65ad\u7d20\u6570 \u8868\u7684\u5927\u5c0f\u53c2\u8003\u7d20\u6570\u5b9a\u7406\uff1a \\pi(n) \\pi(n) \u4e3a\u503c\u4e0d\u8d85\u8fc7 n n \u7d20\u6570\u7684\u4e2a\u6570 \\lim_{n\\rightarrow \\infty} \\frac{ln(n)\\pi(n)}{n} = 1 \\lim_{n\\rightarrow \\infty} \\frac{ln(n)\\pi(n)}{n} = 1 // pi(n) > 1e5\u65f6\uff0c\u53d6MAX = 100 * n\u6bd4\u8f83\u5408\u9002 bool notPrime[MAX]; vector<int> prime(n); // \u67e5\u627en\u4e2a\u7d20\u6570 void findPrime(int n) { int cnt = 0; for (int i = 2; i < MAX; ++i) { if (!notPrime[i]) { prime[cnt++] = i; if (cnt == n) break; for (int j = 2 * i; j < MAX; j += i) { notPrime[j] = true; } } } } \u8d28\u56e0\u5b50\u5206\u89e3 // x\u4e3a\u8d28\u56e0\u5b50\u7684\u503c\uff0ccnt\u4e3a\u4e2a\u6570 struct factor { int x, cnt; factor(int _x, int _cnt) : x(_x), cnt(_cnt) {} }; vector<factor> factors; // \u6570n\u7684\u8d28\u56e0\u5b50\u6700\u591a\u6709\u4e00\u4e2a\u5927\u4e8esqrt(n)\u7684\u503c void getFactors(int n) { int m = sqrt(n); for (int i = 0; i < prime.size() && prime[i] <= m; ++i) { if (n % prime[i] == 0) { factors.emplace_back(prime[i], 0); while (n % prime[i] == 0) { ++factors.back().cnt; n /= prime[i]; } } } if (n != 1) { factors.emplace_back(n, 1); } } \u5feb\u901f\u5e42 \u6c42 a^b a^b mod p p using ll = long long; ll binaryPow(ll a, ll b, ll p) { ll ans = 1; while (b > 0) { if (b & 1) { ans = ans * a % p; } a = a * a % p; b >>= 1; } return ans; } \u7ec4\u5408\u6570 \u6c42n!\u7684\u8d28\u56e0\u5b50p\u7684\u4e2a\u6570 n! n! \u4e2d\u6709 (\\frac{n}{p} + \\frac{n}{p^2} + \\frac{n}{p^3} + \\cdots) (\\frac{n}{p} + \\frac{n}{p^2} + \\frac{n}{p^3} + \\cdots) \u4e2a p p \u3002 int cal(int n, int p) { int ans = 0; while (n) { ans += (n /= p); } return ans; } \u8ba1\u7b97 C_n^m C_n^m \u7531 C_n^m = C_{n - 1}^{m} + C_{n - 1}^{m - 1} C_n^m = C_{n - 1}^{m} + C_{n - 1}^{m - 1} \uff0c\u9012\u63a8 \u5b9a\u4e49\u5f0f\u53d8\u5f62\u8ba1\u7b97 ll calC(ll m, ll n) { int ans = 0; for (int i = 1; i <= m; ++i) { ans += ans * (n - i + 1) / i; //\u8981\u5148\u4e58\u518d\u9664\uff0c\u5426\u5219\u65e0\u6cd5\u6574\u9664 } return ans; } \u8ba1\u7b97 C_n^m C_n^m mod p \u5f53 m \\le n \\le 1000 m \\le n \\le 1000 \u65f6\uff0c\u7528\u9012\u63a8 \u5f53 m \\le n \\le 10^6 m \\le n \\le 10^6 \u65f6\uff0c\u4f7f\u7528\u5b9a\u4e49\u7b97 ll C(ll m, ll n, ll p) { ll ans = 1; for (int i = 0; prime[i] <= n; ++i) { int b = cal(n, p) - cal(m, p) - cal(n - m, p); ans = ans * binaryPow(prime[i], b, p) % p; } return ans; }","title":"\u516c\u7ea6\u6570\u4e0e\u516c\u500d\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/BasicMathProblem/#_1","text":"","title":"\u516c\u7ea6\u6570\u4e0e\u516c\u500d\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/BasicMathProblem/#_2","text":"//\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 int gcd(int a, int b) { return b ? gcd(b, a % b) : a; }","title":"\u6700\u5927\u516c\u7ea6\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/BasicMathProblem/#_3","text":"int lcm = a / gcd(a, b) * b;","title":"\u6700\u5c0f\u516c\u500d\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/BasicMathProblem/#_4","text":"struct Fraction { int up, down; } // \u6838\u5fc3\u90e8\u5206\u662f\u5206\u6570\u7684\u5316\u7b80\uff0c\u5176\u6700\u7b80\u5f62\u5f0f\u6ee1\u8db3\u4ee5\u4e0b\u4e09\u70b9 // 1. down\u4e3a\u975e\u8d1f\u6570 // 2. \u503c\u4e3a0\u65f6\uff0cup = 0, down = 1 // 3. gcd(up, down) = 1 void reduction(Fraction &ans) { if (ans.down < 0) { ans.up = -ans.up; ans.down = -ans.down; } if (ans.up == 0) { ans.up = 0; ans.down = 1; } else { int g = gcd(ans.up, ans.down); ans.up /= g; ans.down /= g; } } // \u8fd0\u7b97\u90e8\u5206\u5f88\u5bb9\u6613\u5199\u51fa\u6765","title":"\u5206\u6570\u7684\u56db\u5219\u8fd0\u7b97"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/BasicMathProblem/#_5","text":"","title":"\u7d20\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/BasicMathProblem/#_6","text":"\u8868\u7684\u5927\u5c0f\u53c2\u8003\u7d20\u6570\u5b9a\u7406\uff1a \\pi(n) \\pi(n) \u4e3a\u503c\u4e0d\u8d85\u8fc7 n n \u7d20\u6570\u7684\u4e2a\u6570 \\lim_{n\\rightarrow \\infty} \\frac{ln(n)\\pi(n)}{n} = 1 \\lim_{n\\rightarrow \\infty} \\frac{ln(n)\\pi(n)}{n} = 1 // pi(n) > 1e5\u65f6\uff0c\u53d6MAX = 100 * n\u6bd4\u8f83\u5408\u9002 bool notPrime[MAX]; vector<int> prime(n); // \u67e5\u627en\u4e2a\u7d20\u6570 void findPrime(int n) { int cnt = 0; for (int i = 2; i < MAX; ++i) { if (!notPrime[i]) { prime[cnt++] = i; if (cnt == n) break; for (int j = 2 * i; j < MAX; j += i) { notPrime[j] = true; } } } }","title":"\u6570\u7b5b\u6cd5\u5224\u65ad\u7d20\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/BasicMathProblem/#_7","text":"// x\u4e3a\u8d28\u56e0\u5b50\u7684\u503c\uff0ccnt\u4e3a\u4e2a\u6570 struct factor { int x, cnt; factor(int _x, int _cnt) : x(_x), cnt(_cnt) {} }; vector<factor> factors; // \u6570n\u7684\u8d28\u56e0\u5b50\u6700\u591a\u6709\u4e00\u4e2a\u5927\u4e8esqrt(n)\u7684\u503c void getFactors(int n) { int m = sqrt(n); for (int i = 0; i < prime.size() && prime[i] <= m; ++i) { if (n % prime[i] == 0) { factors.emplace_back(prime[i], 0); while (n % prime[i] == 0) { ++factors.back().cnt; n /= prime[i]; } } } if (n != 1) { factors.emplace_back(n, 1); } }","title":"\u8d28\u56e0\u5b50\u5206\u89e3"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/BasicMathProblem/#_8","text":"\u6c42 a^b a^b mod p p using ll = long long; ll binaryPow(ll a, ll b, ll p) { ll ans = 1; while (b > 0) { if (b & 1) { ans = ans * a % p; } a = a * a % p; b >>= 1; } return ans; }","title":"\u5feb\u901f\u5e42"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/BasicMathProblem/#_9","text":"","title":"\u7ec4\u5408\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/BasicMathProblem/#np","text":"n! n! \u4e2d\u6709 (\\frac{n}{p} + \\frac{n}{p^2} + \\frac{n}{p^3} + \\cdots) (\\frac{n}{p} + \\frac{n}{p^2} + \\frac{n}{p^3} + \\cdots) \u4e2a p p \u3002 int cal(int n, int p) { int ans = 0; while (n) { ans += (n /= p); } return ans; }","title":"\u6c42n!\u7684\u8d28\u56e0\u5b50p\u7684\u4e2a\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/BasicMathProblem/#c_nmc_nm","text":"\u7531 C_n^m = C_{n - 1}^{m} + C_{n - 1}^{m - 1} C_n^m = C_{n - 1}^{m} + C_{n - 1}^{m - 1} \uff0c\u9012\u63a8 \u5b9a\u4e49\u5f0f\u53d8\u5f62\u8ba1\u7b97 ll calC(ll m, ll n) { int ans = 0; for (int i = 1; i <= m; ++i) { ans += ans * (n - i + 1) / i; //\u8981\u5148\u4e58\u518d\u9664\uff0c\u5426\u5219\u65e0\u6cd5\u6574\u9664 } return ans; }","title":"\u8ba1\u7b97 C_n^mC_n^m"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/BasicMathProblem/#c_nmc_nm-mod-p","text":"\u5f53 m \\le n \\le 1000 m \\le n \\le 1000 \u65f6\uff0c\u7528\u9012\u63a8 \u5f53 m \\le n \\le 10^6 m \\le n \\le 10^6 \u65f6\uff0c\u4f7f\u7528\u5b9a\u4e49\u7b97 ll C(ll m, ll n, ll p) { ll ans = 1; for (int i = 0; prime[i] <= n; ++i) { int b = cal(n, p) - cal(m, p) - cal(n - m, p); ans = ans * binaryPow(prime[i], b, p) % p; } return ans; }","title":"\u8ba1\u7b97 C_n^mC_n^m mod p"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/SumOfXOR/","text":"\u5f02\u6216\u7684\u5e94\u7528 Properties commucative, associative, \u81ea\u53cd\u6027: a\\oplus b\\oplus b = a a\\oplus b\\oplus b = a Calculate f(n) = 1\\oplus2\\oplus\\cdots \\oplus n f(n) = 1\\oplus2\\oplus\\cdots \\oplus n . if n == 4*m, then f(n) = n else if n == 4*m + 1, then f(n) = 1 else if n == 4*m + 2, then f(n) = n+1 else n = 0 m is a integer. Application Exchange Two Number without Extra Space a ^= b; b ^= a; a ^= b; One Question 1-1000\u653e\u5728\u542b\u67091001\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u4e2d\uff0c\u53ea\u6709\u552f\u4e00\u7684\u4e00\u4e2a\u5143\u7d20\u503c\u91cd\u590d\uff0c\u5176\u5b83\u5747\u53ea\u51fa\u73b0\u4e00\u6b21\u3002\u6bcf\u4e2a\u6570\u7ec4\u5143\u7d20\u53ea\u80fd\u8bbf\u95ee\u4e00\u6b21\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff0c\u5c06\u5b83\u627e\u51fa\u6765\uff1b\u4e0d\u7528\u8f85\u52a9\u5b58\u50a8\u7a7a\u95f4\uff0c\u80fd\u5426\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u5b9e\u73b0\uff1f x = (\\text{1001\u4e2a\u6570\u7684\u5f02\u6216}\uff09\\oplus(1\\oplus2\\oplus3\\oplus\\cdots\\oplus1000) x = (\\text{1001\u4e2a\u6570\u7684\u5f02\u6216}\uff09\\oplus(1\\oplus2\\oplus3\\oplus\\cdots\\oplus1000)","title":"\u5f02\u6216\u7684\u5e94\u7528"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/SumOfXOR/#_1","text":"","title":"\u5f02\u6216\u7684\u5e94\u7528"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/SumOfXOR/#properties","text":"commucative, associative, \u81ea\u53cd\u6027: a\\oplus b\\oplus b = a a\\oplus b\\oplus b = a Calculate f(n) = 1\\oplus2\\oplus\\cdots \\oplus n f(n) = 1\\oplus2\\oplus\\cdots \\oplus n . if n == 4*m, then f(n) = n else if n == 4*m + 1, then f(n) = 1 else if n == 4*m + 2, then f(n) = n+1 else n = 0 m is a integer.","title":"Properties"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/SumOfXOR/#application","text":"","title":"Application"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/SumOfXOR/#exchange-two-number-without-extra-space","text":"a ^= b; b ^= a; a ^= b;","title":"Exchange Two Number without Extra Space"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/SumOfXOR/#one-question","text":"1-1000\u653e\u5728\u542b\u67091001\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u4e2d\uff0c\u53ea\u6709\u552f\u4e00\u7684\u4e00\u4e2a\u5143\u7d20\u503c\u91cd\u590d\uff0c\u5176\u5b83\u5747\u53ea\u51fa\u73b0\u4e00\u6b21\u3002\u6bcf\u4e2a\u6570\u7ec4\u5143\u7d20\u53ea\u80fd\u8bbf\u95ee\u4e00\u6b21\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff0c\u5c06\u5b83\u627e\u51fa\u6765\uff1b\u4e0d\u7528\u8f85\u52a9\u5b58\u50a8\u7a7a\u95f4\uff0c\u80fd\u5426\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u5b9e\u73b0\uff1f x = (\\text{1001\u4e2a\u6570\u7684\u5f02\u6216}\uff09\\oplus(1\\oplus2\\oplus3\\oplus\\cdots\\oplus1000) x = (\\text{1001\u4e2a\u6570\u7684\u5f02\u6216}\uff09\\oplus(1\\oplus2\\oplus3\\oplus\\cdots\\oplus1000)","title":"One Question"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/code/","text":"\u4ee3\u7801\u7247\u6bb5 FFT def recursive_dtf(a): n = len(a) if n == 1: return a a0 = a[0::2] a1 = a[1::2] w_n = np.exp(2*np.pi*1j/n) w = 1 y = n*[0] y0 = recursive_dtf(a0) y1 = recursive_dtf(a1) for k in range(0 ,int(n/2) ,1): y[k] = y0[k]+w*y1[k] y[int(n/2)+k] = y0[k]-w*y1[k] w = w*w_n return y \u6253\u5370\u4e8c\u53c9\u6811 \u53c2\u8003\uff1a \u6ce2\u5170\u8868\u793a\u6cd5\u4e0e\u8868\u8fbe\u5f0f\u6811 \u6253\u5370\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\u4e3a int \u7684\u4e8c\u53c9\u6811\uff0c\u65b9\u4fbf\u8c03\u8bd5\u7ea2\u9ed1\u6811 #ifndef PTREE_H #define PTREE_H #include <iostream> enum Colors {RED, BLACK}; class node { friend class Tree; public: int data = 0; Colors color = Colors::RED; node* p = nullptr; node* child[2] = {nullptr, nullptr}; node() = default; node(Colors _color, int _data, node* n) : color(_color), data(_data) { for (size_t i = 0; i < 2; ++i) { child[i] = n; } } explicit node(Colors _color) : node(_color, 0, nullptr) {} }; class Tree { public: node* const nil = new node(Colors::BLACK); node* root = nil; Tree() = default; Tree(node* n) : nil(n), root(n) {} void printTree(); private: int maxDepth(const node* n); void fillMap(node** map, node* n, int index); void putchars(char c, int n); void printLeftToParentBranchTop(int w); void printRightToParentBranchTop(int w); void printLeftToParentBranchBottom(int w); void printRightToParentBranchBottom(int w); int printNode(node* n, int w); }; int Tree::maxDepth(const node* n) { if (n == nil) return 0; else { int maximum = 0, i, d; for (i = 0; i < 2; i++) if (maximum < (d = maxDepth(n->child[i]))) maximum = d; return maximum + 1; } } void Tree::fillMap(node** map, node* n, int index) { if (n == nil) return; int i; map[index] = n; for (i = 0; i < 2; i++) fillMap(map, n->child[i], index * 2 + i + 1); } void Tree::putchars(char c, int n) { while (n--) putchar(c); } void Tree::printLeftToParentBranchTop(int w) { printf(\"%*c\", w + 1, ' '); putchars('_', w - 3); printf(\"/ \"); } void Tree::printRightToParentBranchTop(int w) { putchar('\\\\'); putchars('_', w - 3); printf(\"%*c\", w + 2, ' '); } void Tree::printLeftToParentBranchBottom(int w) { printf(\"%*c%*c\", w + 1, '/', w - 1, ' '); } void Tree::printRightToParentBranchBottom(int w) { printf(\"%*c%*c\", w - 1, '\\\\', w + 1, ' '); } int Tree::printNode(node* n, int w) { return printf(\"%*d %d\", w-1, n->data, n->color); } void Tree::printTree() { int depth = maxDepth(root), i, j, index; if (depth == 0) { printf(\"Null tree\\n\"); return; } node** map = (node**)calloc((1 << depth) - 1, sizeof(node*)); fillMap(map, root, 0); for (j = 0, index = 0; j < depth; j++) { int w = 1 << (depth - j + 1); if (j > 0) { // Top part of node to parent branch for (i = 0; i < 1 << j; i++) if (map[index + i]) if (i % 2 == 0) printLeftToParentBranchTop(w); else printRightToParentBranchTop(w); else putchars(' ', w * 2); putchar('\\n'); // Bottom part of node to parent branch for (i = 0; i < 1 << j; i++) if (map[index + i]) if (i % 2 == 0) printLeftToParentBranchBottom(w); else printRightToParentBranchBottom(w); else putchars(' ', w * 2); putchar('\\n'); } // Node content for (i = 0; i < 1 << j; i++, index++) if (map[index]) putchars(' ', w * 2 - printNode(map[index], w)); else putchars(' ', w * 2); putchar('\\n'); } printf(\"\\n\"); free(map); } #endif #endif","title":"\u4ee3\u7801\u7247\u6bb5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/code/#_1","text":"","title":"\u4ee3\u7801\u7247\u6bb5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/code/#fft","text":"def recursive_dtf(a): n = len(a) if n == 1: return a a0 = a[0::2] a1 = a[1::2] w_n = np.exp(2*np.pi*1j/n) w = 1 y = n*[0] y0 = recursive_dtf(a0) y1 = recursive_dtf(a1) for k in range(0 ,int(n/2) ,1): y[k] = y0[k]+w*y1[k] y[int(n/2)+k] = y0[k]-w*y1[k] w = w*w_n return y","title":"FFT"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/code/#_2","text":"\u53c2\u8003\uff1a \u6ce2\u5170\u8868\u793a\u6cd5\u4e0e\u8868\u8fbe\u5f0f\u6811 \u6253\u5370\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\u4e3a int \u7684\u4e8c\u53c9\u6811\uff0c\u65b9\u4fbf\u8c03\u8bd5\u7ea2\u9ed1\u6811 #ifndef PTREE_H #define PTREE_H #include <iostream> enum Colors {RED, BLACK}; class node { friend class Tree; public: int data = 0; Colors color = Colors::RED; node* p = nullptr; node* child[2] = {nullptr, nullptr}; node() = default; node(Colors _color, int _data, node* n) : color(_color), data(_data) { for (size_t i = 0; i < 2; ++i) { child[i] = n; } } explicit node(Colors _color) : node(_color, 0, nullptr) {} }; class Tree { public: node* const nil = new node(Colors::BLACK); node* root = nil; Tree() = default; Tree(node* n) : nil(n), root(n) {} void printTree(); private: int maxDepth(const node* n); void fillMap(node** map, node* n, int index); void putchars(char c, int n); void printLeftToParentBranchTop(int w); void printRightToParentBranchTop(int w); void printLeftToParentBranchBottom(int w); void printRightToParentBranchBottom(int w); int printNode(node* n, int w); }; int Tree::maxDepth(const node* n) { if (n == nil) return 0; else { int maximum = 0, i, d; for (i = 0; i < 2; i++) if (maximum < (d = maxDepth(n->child[i]))) maximum = d; return maximum + 1; } } void Tree::fillMap(node** map, node* n, int index) { if (n == nil) return; int i; map[index] = n; for (i = 0; i < 2; i++) fillMap(map, n->child[i], index * 2 + i + 1); } void Tree::putchars(char c, int n) { while (n--) putchar(c); } void Tree::printLeftToParentBranchTop(int w) { printf(\"%*c\", w + 1, ' '); putchars('_', w - 3); printf(\"/ \"); } void Tree::printRightToParentBranchTop(int w) { putchar('\\\\'); putchars('_', w - 3); printf(\"%*c\", w + 2, ' '); } void Tree::printLeftToParentBranchBottom(int w) { printf(\"%*c%*c\", w + 1, '/', w - 1, ' '); } void Tree::printRightToParentBranchBottom(int w) { printf(\"%*c%*c\", w - 1, '\\\\', w + 1, ' '); } int Tree::printNode(node* n, int w) { return printf(\"%*d %d\", w-1, n->data, n->color); } void Tree::printTree() { int depth = maxDepth(root), i, j, index; if (depth == 0) { printf(\"Null tree\\n\"); return; } node** map = (node**)calloc((1 << depth) - 1, sizeof(node*)); fillMap(map, root, 0); for (j = 0, index = 0; j < depth; j++) { int w = 1 << (depth - j + 1); if (j > 0) { // Top part of node to parent branch for (i = 0; i < 1 << j; i++) if (map[index + i]) if (i % 2 == 0) printLeftToParentBranchTop(w); else printRightToParentBranchTop(w); else putchars(' ', w * 2); putchar('\\n'); // Bottom part of node to parent branch for (i = 0; i < 1 << j; i++) if (map[index + i]) if (i % 2 == 0) printLeftToParentBranchBottom(w); else printRightToParentBranchBottom(w); else putchars(' ', w * 2); putchar('\\n'); } // Node content for (i = 0; i < 1 << j; i++, index++) if (map[index]) putchars(' ', w * 2 - printNode(map[index], w)); else putchars(' ', w * 2); putchar('\\n'); } printf(\"\\n\"); free(map); } #endif #endif","title":"\u6253\u5370\u4e8c\u53c9\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%9C%BA%E6%A2%B0%E5%8C%96%E9%80%92%E5%BD%92%E8%BD%AC%E9%9D%9E%E9%80%92%E5%BD%92/","text":"\u673a\u68b0\u5316\u9012\u5f52\u8f6c\u975e\u9012\u5f52 ```c++ bool knap(int s, int) { if (s == 0) return true; if ((s < 0) || (s > 0 && n < 1)) return false; if (knap(s - w[n - 1], n - 1) { cout << w[n - 1]; return true; } else return knap(s, n - 1); } \u8f6c\u6362\u6309\u4e0b\u9762\u65b9\u5f0f\u8fdb\u884c: - \u51e1\u8c03\u7528\u8bed\u53e5knap(s,n)\u5747\u4ee3\u6362\u6210 - `tmp.s = s; tmp. n=n; tmp.rd=\u8fd4\u56de\u5730\u5740\u7f16\u53f7` - `stack.push(tmp);` - \u8f6c\u5411\u9012\u5f52\u5165\u53e3 - \u5c06\u8c03\u7528\u51fa\u53e3\u7684\u8fd4\u56de\u5904\u7406\u7edf\u4e00\u6210: - `stack.pop(&tmp);` - \u5206\u4ee5\u4e0b\u60c5\u51b5\u6267\u884c: - i) `tmp.rd=0` \u65f6,\u7b97\u6cd5\u7ed3\u675f\u3002 - ii) `tmp.rd=1` \u65f6,\u8f6c\u89c4\u52191\u8fd4\u56de\u5904\u7406\u3002 - \u2172) `tmp.rd=2` \u65f6,\u8f6c\u89c4\u52192\u8fd4\u56de\u5904\u7406\u3002 ```c++ struct knapNode { int s, n; //\u80cc\u5305\u7684\u627f\u91cd\u91cf\u548c\u7269\u54c1\u7684\u6570\u76ee int rd; //\u8fd4\u56de\u5730\u5740 bool k; //\u7ed3\u679c\u5355\u5143 }; knapNode tmp, x; bool nonRecKnap(int s, int n) { tmp.s = s, tmp.n = n, tmp.rd = 0; //\u975e\u9012\u5f52\u8c03\u7528\u5165\u53e3 stack.push(tmp); label0://\u9012\u5f52\u8c03\u7528\u5165\u53e3 stack pop(&tmp); //\u67e5\u770b\u6808\u9876\u5143\u7d20\u5e76\u5206\u60c5\u51b5\u5904\u7406 \u2225\u82e5\u6ee1\u8db3\u9012\u5f52\u51fa\u53e3\u6761\u4ef6 \u2225\u4fee\u6539\u6808\u9876\u7684\u7ed3\u679c\u5355\u5143 stack, push(tmp) i } goto label \u2225\u8f6c\u5411\u9012\u5f52\u51fa\u53e3\u5904\u7406 if ( tmps <0) Il(tmp s>0&& tmp, n<1) I \u4fee\u6539\u6808\u9876\u7684\u7ed3\u679c\u5355\u5143 stack push(tmp); goto label stack push( tmp); \u5c1a\u672a\u6ee1\u8db3\u9012\u5f52\u51fa\u53e3 \u2225 \u6309\u7167\u89c4\u52191\u8fdb\u884c\u538b\u6808\u5904\u7406 x . n = trmp, n x rd = 1 : stack, push(x); labell \u89c4\u52191\u5bf9\u5e94\u7684\u8fd4\u56de\u5904\u7406 stack. pop(\u6539x); \u2225\u67fb\u770b\u6808\u9876,\u6839\u636e\u5176\u5185\u5bb9\u5206\u60c5\u51b5\u5904\u7406 \u2225\u82e5\u67d0\u5c42\u7684\u7ed3\u679c\u5355\u5143\u4e3atrue \u2225\u628atrue\u7ed3\u679c\u4e0a\u4f20\u7ed9\u8c03\u7528\u65b9 /\u5e76\u8f93\u51fa\u5bf9\u5e94\u7684\u7269\u54c1 goto labeL stack push (x) \u2225\u82e5\u67d0\u5c42\u7684\u7ed3\u679c\u5355\u5143\u4e3a false \u2225\u5f53\u524d\u7269\u54c1\u7684\u9009\u62e9\u4e0d\u5408\u9002,\u56de\u6eaf, \u8c03\u7528\u89c4\u5219 tmp n = x n-1 \u6309\u7167\u89c4\u52192\u8fdb\u884c\u538b\u6808\u5904\u7406 tmp rd = 2 goto label label2 \u2225 \u89c4\u52192\u5bf9\u5e94\u7684\u8fd4\u56de\u5904\u7406 stack pop(&x) x k = tmp k; \u2225\u7ed3\u679c\u5355\u5143k\u7684\u5185\u5bb9\u4e0a\u4f20\u7ed9\u8c03\u7528\u65b9 \u2225/ \u9012\u5f52\u51fa\u53e3\u5904\u7406 stack pop(&tmp); switch( tmp rd ) e 0: return tmp k \u2225\u7b97\u6cd5\u7ed3\u675f\u5e76\u8fd4\u56de\u7ed3\u679c \u2225\u8f6c\u5411\u89c4\u52191\u7684\u8fd4\u56de\u5904\u7406\u5904 case 2 goto label2; \u2225 \u8f6c\u5411\u89c4\u52192\u7684\u8fd4\u56de\u5904\u7406\u5904","title":"\u673a\u68b0\u5316\u9012\u5f52\u8f6c\u975e\u9012\u5f52"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%9C%BA%E6%A2%B0%E5%8C%96%E9%80%92%E5%BD%92%E8%BD%AC%E9%9D%9E%E9%80%92%E5%BD%92/#_1","text":"```c++ bool knap(int s, int) { if (s == 0) return true; if ((s < 0) || (s > 0 && n < 1)) return false; if (knap(s - w[n - 1], n - 1) { cout << w[n - 1]; return true; } else return knap(s, n - 1); } \u8f6c\u6362\u6309\u4e0b\u9762\u65b9\u5f0f\u8fdb\u884c: - \u51e1\u8c03\u7528\u8bed\u53e5knap(s,n)\u5747\u4ee3\u6362\u6210 - `tmp.s = s; tmp. n=n; tmp.rd=\u8fd4\u56de\u5730\u5740\u7f16\u53f7` - `stack.push(tmp);` - \u8f6c\u5411\u9012\u5f52\u5165\u53e3 - \u5c06\u8c03\u7528\u51fa\u53e3\u7684\u8fd4\u56de\u5904\u7406\u7edf\u4e00\u6210: - `stack.pop(&tmp);` - \u5206\u4ee5\u4e0b\u60c5\u51b5\u6267\u884c: - i) `tmp.rd=0` \u65f6,\u7b97\u6cd5\u7ed3\u675f\u3002 - ii) `tmp.rd=1` \u65f6,\u8f6c\u89c4\u52191\u8fd4\u56de\u5904\u7406\u3002 - \u2172) `tmp.rd=2` \u65f6,\u8f6c\u89c4\u52192\u8fd4\u56de\u5904\u7406\u3002 ```c++ struct knapNode { int s, n; //\u80cc\u5305\u7684\u627f\u91cd\u91cf\u548c\u7269\u54c1\u7684\u6570\u76ee int rd; //\u8fd4\u56de\u5730\u5740 bool k; //\u7ed3\u679c\u5355\u5143 }; knapNode tmp, x; bool nonRecKnap(int s, int n) { tmp.s = s, tmp.n = n, tmp.rd = 0; //\u975e\u9012\u5f52\u8c03\u7528\u5165\u53e3 stack.push(tmp); label0://\u9012\u5f52\u8c03\u7528\u5165\u53e3 stack pop(&tmp); //\u67e5\u770b\u6808\u9876\u5143\u7d20\u5e76\u5206\u60c5\u51b5\u5904\u7406 \u2225\u82e5\u6ee1\u8db3\u9012\u5f52\u51fa\u53e3\u6761\u4ef6 \u2225\u4fee\u6539\u6808\u9876\u7684\u7ed3\u679c\u5355\u5143 stack, push(tmp) i } goto label \u2225\u8f6c\u5411\u9012\u5f52\u51fa\u53e3\u5904\u7406 if ( tmps <0) Il(tmp s>0&& tmp, n<1) I \u4fee\u6539\u6808\u9876\u7684\u7ed3\u679c\u5355\u5143 stack push(tmp); goto label stack push( tmp); \u5c1a\u672a\u6ee1\u8db3\u9012\u5f52\u51fa\u53e3 \u2225 \u6309\u7167\u89c4\u52191\u8fdb\u884c\u538b\u6808\u5904\u7406 x . n = trmp, n x rd = 1 : stack, push(x); labell \u89c4\u52191\u5bf9\u5e94\u7684\u8fd4\u56de\u5904\u7406 stack. pop(\u6539x); \u2225\u67fb\u770b\u6808\u9876,\u6839\u636e\u5176\u5185\u5bb9\u5206\u60c5\u51b5\u5904\u7406 \u2225\u82e5\u67d0\u5c42\u7684\u7ed3\u679c\u5355\u5143\u4e3atrue \u2225\u628atrue\u7ed3\u679c\u4e0a\u4f20\u7ed9\u8c03\u7528\u65b9 /\u5e76\u8f93\u51fa\u5bf9\u5e94\u7684\u7269\u54c1 goto labeL stack push (x) \u2225\u82e5\u67d0\u5c42\u7684\u7ed3\u679c\u5355\u5143\u4e3a false \u2225\u5f53\u524d\u7269\u54c1\u7684\u9009\u62e9\u4e0d\u5408\u9002,\u56de\u6eaf, \u8c03\u7528\u89c4\u5219 tmp n = x n-1 \u6309\u7167\u89c4\u52192\u8fdb\u884c\u538b\u6808\u5904\u7406 tmp rd = 2 goto label label2 \u2225 \u89c4\u52192\u5bf9\u5e94\u7684\u8fd4\u56de\u5904\u7406 stack pop(&x) x k = tmp k; \u2225\u7ed3\u679c\u5355\u5143k\u7684\u5185\u5bb9\u4e0a\u4f20\u7ed9\u8c03\u7528\u65b9 \u2225/ \u9012\u5f52\u51fa\u53e3\u5904\u7406 stack pop(&tmp); switch( tmp rd ) e 0: return tmp k \u2225\u7b97\u6cd5\u7ed3\u675f\u5e76\u8fd4\u56de\u7ed3\u679c \u2225\u8f6c\u5411\u89c4\u52191\u7684\u8fd4\u56de\u5904\u7406\u5904 case 2 goto label2; \u2225 \u8f6c\u5411\u89c4\u52192\u7684\u8fd4\u56de\u5904\u7406\u5904","title":"\u673a\u68b0\u5316\u9012\u5f52\u8f6c\u975e\u9012\u5f52"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/Index/","text":"INDEX dfs poj 3134 Power Calculus \uff1aIDA*\uff0c N \u8f83\u5927\u65f6\uff0c\u526a\u679d\u53cd\u800c\u4e0d\u5982\u4e0d\u526a\u679d\u3002 \u6b27\u62c9\u8def poj 1780 \uff1a\u60f3\u4e86\u534a\u5929\u4e3a\u4ec0\u4e48\u662f\u6b27\u62c9\u8def\u3002","title":"INDEX"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/Index/#index","text":"","title":"INDEX"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/Index/#dfs","text":"poj 3134 Power Calculus \uff1aIDA*\uff0c N \u8f83\u5927\u65f6\uff0c\u526a\u679d\u53cd\u800c\u4e0d\u5982\u4e0d\u526a\u679d\u3002","title":"dfs"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/Index/#_1","text":"poj 1780 \uff1a\u60f3\u4e86\u534a\u5929\u4e3a\u4ec0\u4e48\u662f\u6b27\u62c9\u8def\u3002","title":"\u6b27\u62c9\u8def"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1123%20Is%20It%20a%20Complete%20AVL%20Tree/","text":"Is It a Complete AVL Tree An AVL tree is a self-balancing binary search tree. In an AVL tree, the heights of the two child subtrees of any node differ by at most one; if at any time they differ by more than one, rebalancing is done to restore this property. Figures 1-4 illustrate the rotation rules. Now given a sequence of insertions, you are supposed to output the level-order traversal sequence of the resulting AVL tree, and to tell if it is a complete binary tree. Input Specification: Each input file contains one test case. For each case, the first line contains a positive integer N (\u2264 20). Then N distinct integer keys are given in the next line. All the numbers in a line are separated by a space. Output Specification: For each test case, insert the keys one by one into an initially empty AVL tree. Then first print in a line the level-order traversal sequence of the resulting AVL tree. All the numbers in a line must be separated by a space, and there must be no extra space at the end of the line. Then in the next line, print YES if the tree is complete, or NO if not. Sample Input 1: 5 88 70 61 63 65 Sample Output 1: 70 63 88 61 65 YES Sample Input 2: 8 88 70 61 96 120 90 65 68 Sample Output 2: 88 65 96 61 70 90 120 68 NO Code //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <cassert> #include <set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; #define isL(x) ( x != _root && (x)->p->l == (x)) #define fromParent(x) ( \\ (x == _root) ? _root : ( \\ isL(x) ? x->p->l : x->p->r \\ ) \\ ) #define stature(x) ((x) ? (x)->h : -1) struct Node { int data, h = 0; Node *p = nullptr, *l = nullptr, *r = nullptr; Node(int _data, Node *_p) : data(_data), p(_p) {} }; struct AVL { Node *_root = nullptr, *_hot = nullptr; Node *tallerChild(Node *p) { if (stature(p->l) >= stature(p->r)) return p->l; else return p->r; } bool avlBlanced(Node *p) { int t = stature(p->l) - stature(p->r); return -2 < t && t < 2; } void updateH(Node *p) { p->h = max(stature(p->l), stature(p->r)) + 1; } Node *connect(Node *a, Node *b, Node *c, Node *t0, Node *t1, Node *t2, Node *t3) { a->l = t0, a->r = t1; if (t0) t0->p = a; if (t1) t1->p = a; updateH(a); c->l = t2, c->r = t3; if (t2) t2->p = c; if (t3) t3->p = c; updateH(c); b->l = a, b->r = c, a->p = b, c->p = b; updateH(b); return b; } Node *rotateAt(Node *v) { auto *p = v->p; auto *g = p->p; if (isL(p)) { if (isL(v)) { p->p = g->p; return connect(v, p, g, v->l, v->r, p->r, g->r); } else { v->p = g->p; return connect(p, v, g, p->l, v->l, v->r, g->r); } } else { if (isL(v)) { v->p = g->p; return connect(g, v, p, g->l, v->l, v->r, p->r); } else { p->p = g->p; return connect(g, p, v, g->l, p->l, v->l, v->r); } } } Node *&search(int e) { if (!_root || e == _root->data) { _hot = nullptr; return _root; } for (_hot = _root;;) { auto &t = (e < _hot->data) ? _hot->l : _hot->r; if (!t || t->data == e) return t; _hot = t; } } void insert(int e) { Node *&t = search(e); if (t) return; t = new Node(e, _hot); for (auto g = _hot; g; g = g->p) { if (!avlBlanced(g)) { auto &tt = fromParent(g); tt = rotateAt(tallerChild(tallerChild(g))); break; } else { updateH(g); } } } bool bfs(vector<int> &ans) { assert(_root != nullptr); queue<Node *> q; q.push(_root); int flag = false, cbt = true; while (!q.empty()) { auto t = q.front(); q.pop(); ans.push_back(t->data); if (t->l) { if (flag) cbt = false; q.push(t->l); } else flag = true; if (t->r) { q.push(t->r); if (flag) cbt = false; } else flag = true; } return cbt; } }; inline void tMain() { int N; vector<int> ans; cin >> N; AVL avl; while (N--) { int t; scanf(\"%d\", &t); avl.insert(t); } auto t = avl.bfs(ans); int l = ans.size(); for (int i = 0; i < l; ++i) { printf(\"%d\", ans[i]); if (i == l - 1) putchar(10); else putchar(' '); } if (t) puts(\"YES\"); else puts(\"NO\"); } int main() { #ifdef mytest test.run(); freopen(\"../main.out\", \"w\", stdout); freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Is It a Complete AVL Tree"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1123%20Is%20It%20a%20Complete%20AVL%20Tree/#is-it-a-complete-avl-tree","text":"An AVL tree is a self-balancing binary search tree. In an AVL tree, the heights of the two child subtrees of any node differ by at most one; if at any time they differ by more than one, rebalancing is done to restore this property. Figures 1-4 illustrate the rotation rules. Now given a sequence of insertions, you are supposed to output the level-order traversal sequence of the resulting AVL tree, and to tell if it is a complete binary tree.","title":"Is It a Complete AVL Tree"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1123%20Is%20It%20a%20Complete%20AVL%20Tree/#input-specification","text":"Each input file contains one test case. For each case, the first line contains a positive integer N (\u2264 20). Then N distinct integer keys are given in the next line. All the numbers in a line are separated by a space.","title":"Input Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1123%20Is%20It%20a%20Complete%20AVL%20Tree/#output-specification","text":"For each test case, insert the keys one by one into an initially empty AVL tree. Then first print in a line the level-order traversal sequence of the resulting AVL tree. All the numbers in a line must be separated by a space, and there must be no extra space at the end of the line. Then in the next line, print YES if the tree is complete, or NO if not.","title":"Output Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1123%20Is%20It%20a%20Complete%20AVL%20Tree/#sample-input-1","text":"5 88 70 61 63 65","title":"Sample Input 1:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1123%20Is%20It%20a%20Complete%20AVL%20Tree/#sample-output-1","text":"70 63 88 61 65 YES","title":"Sample Output 1:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1123%20Is%20It%20a%20Complete%20AVL%20Tree/#sample-input-2","text":"8 88 70 61 96 120 90 65 68","title":"Sample Input 2:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1123%20Is%20It%20a%20Complete%20AVL%20Tree/#sample-output-2","text":"88 65 96 61 70 90 120 68 NO","title":"Sample Output 2:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1123%20Is%20It%20a%20Complete%20AVL%20Tree/#code","text":"//#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <cassert> #include <set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; #define isL(x) ( x != _root && (x)->p->l == (x)) #define fromParent(x) ( \\ (x == _root) ? _root : ( \\ isL(x) ? x->p->l : x->p->r \\ ) \\ ) #define stature(x) ((x) ? (x)->h : -1) struct Node { int data, h = 0; Node *p = nullptr, *l = nullptr, *r = nullptr; Node(int _data, Node *_p) : data(_data), p(_p) {} }; struct AVL { Node *_root = nullptr, *_hot = nullptr; Node *tallerChild(Node *p) { if (stature(p->l) >= stature(p->r)) return p->l; else return p->r; } bool avlBlanced(Node *p) { int t = stature(p->l) - stature(p->r); return -2 < t && t < 2; } void updateH(Node *p) { p->h = max(stature(p->l), stature(p->r)) + 1; } Node *connect(Node *a, Node *b, Node *c, Node *t0, Node *t1, Node *t2, Node *t3) { a->l = t0, a->r = t1; if (t0) t0->p = a; if (t1) t1->p = a; updateH(a); c->l = t2, c->r = t3; if (t2) t2->p = c; if (t3) t3->p = c; updateH(c); b->l = a, b->r = c, a->p = b, c->p = b; updateH(b); return b; } Node *rotateAt(Node *v) { auto *p = v->p; auto *g = p->p; if (isL(p)) { if (isL(v)) { p->p = g->p; return connect(v, p, g, v->l, v->r, p->r, g->r); } else { v->p = g->p; return connect(p, v, g, p->l, v->l, v->r, g->r); } } else { if (isL(v)) { v->p = g->p; return connect(g, v, p, g->l, v->l, v->r, p->r); } else { p->p = g->p; return connect(g, p, v, g->l, p->l, v->l, v->r); } } } Node *&search(int e) { if (!_root || e == _root->data) { _hot = nullptr; return _root; } for (_hot = _root;;) { auto &t = (e < _hot->data) ? _hot->l : _hot->r; if (!t || t->data == e) return t; _hot = t; } } void insert(int e) { Node *&t = search(e); if (t) return; t = new Node(e, _hot); for (auto g = _hot; g; g = g->p) { if (!avlBlanced(g)) { auto &tt = fromParent(g); tt = rotateAt(tallerChild(tallerChild(g))); break; } else { updateH(g); } } } bool bfs(vector<int> &ans) { assert(_root != nullptr); queue<Node *> q; q.push(_root); int flag = false, cbt = true; while (!q.empty()) { auto t = q.front(); q.pop(); ans.push_back(t->data); if (t->l) { if (flag) cbt = false; q.push(t->l); } else flag = true; if (t->r) { q.push(t->r); if (flag) cbt = false; } else flag = true; } return cbt; } }; inline void tMain() { int N; vector<int> ans; cin >> N; AVL avl; while (N--) { int t; scanf(\"%d\", &t); avl.insert(t); } auto t = avl.bfs(ans); int l = ans.size(); for (int i = 0; i < l; ++i) { printf(\"%d\", ans[i]); if (i == l - 1) putchar(10); else putchar(' '); } if (t) puts(\"YES\"); else puts(\"NO\"); } int main() { #ifdef mytest test.run(); freopen(\"../main.out\", \"w\", stdout); freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1138%20Werewolf%20%E2%80%93%20Simple%20Version/","text":"Werewolf \u2013 Simple Version Werewolf\uff08\u72fc\u4eba\u6740\uff09 is a game in which the players are partitioned into two parties: the werewolves and the human beings. Suppose that in a game, player #1 said: \"Player #2 is a werewolf.\"; player #2 said: \"Player #3 is a human.\"; player #3 said: \"Player #4 is a werewolf.\"; player #4 said: \"Player #5 is a human.\"; and player #5 said: \"Player #4 is a human.\". Given that there were 2 werewolves among them, at least one but not all the werewolves were lying, and there were exactly 2 liars. Can you point out the werewolves? Now you are asked to solve a harder version of this problem: given that there were N players, with 2 werewolves among them, at least one but not all the werewolves were lying, and there were exactly 2 liars. You are supposed to point out the werewolves. Input Specification: Each input file contains one test case. For each case, the first line gives a positive integer N (5\u2264N\u2264100). Then N lines follow and the i-th line gives the statement of the i-th player (1\u2264i\u2264N), which is represented by the index of the player with a positive sign for a human and a negative sign for a werewolf. Output Specification: If a solution exists, print in a line in ascending order the indices of the two werewolves. The numbers must be separated by exactly one space with no extra spaces at the beginning or the end of the line. If there are more than one solution, you must output the smallest solution sequence -- that is, for two sequences A=a[1],...,a[M] and B=b[1],...,b[M], if there exists 0\u2264k<M such that a[i]=b[i] (i\u2264k) and a[k+1]<b[k+1], then A is said to be smaller than B. In case there is no solution, simply print No Solution . Sample Input 1: 5 -2 +3 -4 +5 +4 Sample Output 1: 1 4 Sample Input 2: 6 +6 +3 +1 -5 -2 +4 Sample Output 2 (the solution is not unique): 1 5 Sample Input 3: 5 -2 -3 -4 -5 -1 Sample Output 3: No Solution Code at least one but not all the werewolves were lying, and there were exactly 2 liars. \u8fd9\u53e5\u8bdd\u662f\u8bf4\u6b63\u597d\u4e00\u4e2a\u72fc\u4eba\u548c\u4e00\u4e2a\u597d\u4eba\u8bf4\u8c0e\uff0c\u5bb9\u6613\u7406\u89e3\u9519\u9898\u610f\u3002 \u4e0d\u4f1a\u8d2a\u5fc3\uff0c\u7ed3\u679c\u4e00\u770b\u6570\u636e\u91cf\u66b4\u529b\u5c31\u884c\uff0c\u8fd8\u5361\u534a\u5929\u3002 //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> inline int read() { int ra, fh; char rx; rx = getchar(), ra = 0, fh = 1; while ((rx < '0' || rx > '9') && rx != '-') rx = getchar(); if (rx == '-') fh = -1, rx = getchar(); while (rx >= '0' && rx <= '9') ra *= 10, ra += rx - 48, rx = getchar(); return ra * fh; } using namespace std; typedef long long ll; const int MAX_N = 110; int a[MAX_N], b[MAX_N]; int N; inline void tMain() { N = read(); for (int i = 1; i <= N; ++i) { a[i] = read(); } for (int i = 1; i <= N; ++i) { for (int j = i + 1; j <= N; ++j) { memset(b, 0xff, sizeof(b)); b[i] = b[j] = 1; int cnt = 0; vector<int> lie; for (int k = 1; k <= N; ++k) { if (a[k] * b[abs(a[k])] > 0) { ++cnt; lie.push_back(k); if (cnt > 2) { break; } } } if (cnt == 2 && (b[lie[0]] + b[lie[1]] == 0)) { printf(\"%d %d\\n\", i, j); return; } } } puts(\"No Solution\"); } int main() { #ifdef mytest test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Werewolf \u2013 Simple Version"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1138%20Werewolf%20%E2%80%93%20Simple%20Version/#werewolf-simple-version","text":"Werewolf\uff08\u72fc\u4eba\u6740\uff09 is a game in which the players are partitioned into two parties: the werewolves and the human beings. Suppose that in a game, player #1 said: \"Player #2 is a werewolf.\"; player #2 said: \"Player #3 is a human.\"; player #3 said: \"Player #4 is a werewolf.\"; player #4 said: \"Player #5 is a human.\"; and player #5 said: \"Player #4 is a human.\". Given that there were 2 werewolves among them, at least one but not all the werewolves were lying, and there were exactly 2 liars. Can you point out the werewolves? Now you are asked to solve a harder version of this problem: given that there were N players, with 2 werewolves among them, at least one but not all the werewolves were lying, and there were exactly 2 liars. You are supposed to point out the werewolves.","title":"Werewolf \u2013 Simple Version"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1138%20Werewolf%20%E2%80%93%20Simple%20Version/#input-specification","text":"Each input file contains one test case. For each case, the first line gives a positive integer N (5\u2264N\u2264100). Then N lines follow and the i-th line gives the statement of the i-th player (1\u2264i\u2264N), which is represented by the index of the player with a positive sign for a human and a negative sign for a werewolf.","title":"Input Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1138%20Werewolf%20%E2%80%93%20Simple%20Version/#output-specification","text":"If a solution exists, print in a line in ascending order the indices of the two werewolves. The numbers must be separated by exactly one space with no extra spaces at the beginning or the end of the line. If there are more than one solution, you must output the smallest solution sequence -- that is, for two sequences A=a[1],...,a[M] and B=b[1],...,b[M], if there exists 0\u2264k<M such that a[i]=b[i] (i\u2264k) and a[k+1]<b[k+1], then A is said to be smaller than B. In case there is no solution, simply print No Solution .","title":"Output Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1138%20Werewolf%20%E2%80%93%20Simple%20Version/#sample-input-1","text":"5 -2 +3 -4 +5 +4","title":"Sample Input 1:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1138%20Werewolf%20%E2%80%93%20Simple%20Version/#sample-output-1","text":"1 4","title":"Sample Output 1:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1138%20Werewolf%20%E2%80%93%20Simple%20Version/#sample-input-2","text":"6 +6 +3 +1 -5 -2 +4","title":"Sample Input 2:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1138%20Werewolf%20%E2%80%93%20Simple%20Version/#sample-output-2-the-solution-is-not-unique","text":"1 5","title":"Sample Output 2 (the solution is not unique):"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1138%20Werewolf%20%E2%80%93%20Simple%20Version/#sample-input-3","text":"5 -2 -3 -4 -5 -1","title":"Sample Input 3:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1138%20Werewolf%20%E2%80%93%20Simple%20Version/#sample-output-3","text":"No Solution","title":"Sample Output 3:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1138%20Werewolf%20%E2%80%93%20Simple%20Version/#code","text":"at least one but not all the werewolves were lying, and there were exactly 2 liars. \u8fd9\u53e5\u8bdd\u662f\u8bf4\u6b63\u597d\u4e00\u4e2a\u72fc\u4eba\u548c\u4e00\u4e2a\u597d\u4eba\u8bf4\u8c0e\uff0c\u5bb9\u6613\u7406\u89e3\u9519\u9898\u610f\u3002 \u4e0d\u4f1a\u8d2a\u5fc3\uff0c\u7ed3\u679c\u4e00\u770b\u6570\u636e\u91cf\u66b4\u529b\u5c31\u884c\uff0c\u8fd8\u5361\u534a\u5929\u3002 //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> inline int read() { int ra, fh; char rx; rx = getchar(), ra = 0, fh = 1; while ((rx < '0' || rx > '9') && rx != '-') rx = getchar(); if (rx == '-') fh = -1, rx = getchar(); while (rx >= '0' && rx <= '9') ra *= 10, ra += rx - 48, rx = getchar(); return ra * fh; } using namespace std; typedef long long ll; const int MAX_N = 110; int a[MAX_N], b[MAX_N]; int N; inline void tMain() { N = read(); for (int i = 1; i <= N; ++i) { a[i] = read(); } for (int i = 1; i <= N; ++i) { for (int j = i + 1; j <= N; ++j) { memset(b, 0xff, sizeof(b)); b[i] = b[j] = 1; int cnt = 0; vector<int> lie; for (int k = 1; k <= N; ++k) { if (a[k] * b[abs(a[k])] > 0) { ++cnt; lie.push_back(k); if (cnt > 2) { break; } } } if (cnt == 2 && (b[lie[0]] + b[lie[1]] == 0)) { printf(\"%d %d\\n\", i, j); return; } } } puts(\"No Solution\"); } int main() { #ifdef mytest test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1152%20Google%20Recruitment/","text":"Google Recruitment In July 2004, Google posted on a giant billboard along Highway 101 in Silicon Valley (shown in the picture below) for recruitment. The content is super-simple, a URL consisting of the first 10-digit prime found in consecutive digits of the natural constant e. The person who could find this prime number could go to the next step in Google's hiring process by visiting this website. The natural constant e is a well known transcendental number\uff08\u8d85\u8d8a\u6570\uff09. The first several digits are: e = 2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642 7427466391 932003059921... where the 10 digits in bold are the answer to Google's question. Now you are asked to solve a more general problem: find the first K-digit prime in consecutive digits of any given L-digit number. Input Specification: Each input file contains one test case. Each case first gives in a line two positive integers: L (\u2264 1,000) and K (< 10), which are the numbers of digits of the given number and the prime to be found, respectively. Then the L-digit number N is given in the next line. Output Specification: For each test case, print in a line the first K-digit prime in consecutive digits of N. If such a number does not exist, output 404 instead. Note: the leading zeroes must also be counted as part of the K digits. For example, to find the 4-digit prime in 200236, 0023 is a solution. However the first digit 2 must not be treated as a solution 0002 since the leading zeroes are not in the original number. Sample Input 1: 20 5 23654987725541023819 Sample Output 1: 49877 Sample Input 2: 10 3 2468024680 Sample Output 2: 404 Code \u8c8c\u4f3c PAT \u6570\u636e\u91cf\u90fd\u4e0d\u5927\uff0c\u9898\u5927\u591a BF \u5c31\u884c\u3002 #include <iostream> #include <string> using namespace std; bool isPrime(int n) { if (n == 0 || n == 1) return false; for (int i = 2; i * i <= n; i++) if (n % i == 0) return false; return true; } int main() { int l, k; string s; cin >> l >> k >> s; for (int i = 0; i <= l - k; i++) { string t = s.substr(i, k); int num = stoi(t); if (isPrime(num)) { cout << t; return 0; } } cout << \"404\\n\"; return 0; } \u89e32\uff1a\u5927\u6570\u53ea\u7528\u7d20\u6570\u7b5b\u9009\uff0c\u6570\u636e\u91cf\u5c0f\uff0c\u6ca1\u5fc5\u8981\u3002 //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> inline int read() { int ra, fh; char rx; rx = getchar(), ra = 0, fh = 1; while ((rx < '0' || rx > '9') && rx != '-') rx = getchar(); if (rx == '-') fh = -1, rx = getchar(); while (rx >= '0' && rx <= '9') ra *= 10, ra += rx - 48, rx = getchar(); return ra * fh; } using namespace std; typedef long long ll; const int MAX_N = 1010; const int MAX_P = 1e5; bool isPrime[MAX_P]; int prime[MAX_P], top; void sieve() { memset(isPrime, 1, sizeof(isPrime)); isPrime[1] = isPrime[0] = false; for (int i = 2; i * i < MAX_P; ++i) { if (isPrime[i]) { for (int j = i * i; j < MAX_P; j += i) { isPrime[j] = false; } } } for (int i = 2; i < MAX_P; ++i) { if (isPrime[i]) prime[top++] = i; } } bool test(ll n) { if (n < MAX_P) { return isPrime[n]; } else { int i = 0, t = prime[0]; while (t * t <= n) { if (n % prime[i] == 0) return false; t = prime[++i]; } return true; } } int L, K; char mstr[MAX_N]; char t[] = \"%0mlld\\n\"; inline void tMain() { L = read(), K = read(); cin.getline(mstr, MAX_N); t[2] = K + '0'; if (L < K) { puts(\"404\"); return; } sieve(); ll ans = 0, MOD = pow(10, K); for (int i = 0; i < K; ++i) { ans = 10 * ans + mstr[i] - '0'; } if (test(ans)) { printf(t, ans); return; } for (int i = K; i < L; ++i) { ans = (10 * ans) % MOD + mstr[i] - '0'; if (test(ans)) { printf(t, ans); return; } } puts(\"404\"); } int main() { #ifdef mytest test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Google Recruitment"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1152%20Google%20Recruitment/#google-recruitment","text":"In July 2004, Google posted on a giant billboard along Highway 101 in Silicon Valley (shown in the picture below) for recruitment. The content is super-simple, a URL consisting of the first 10-digit prime found in consecutive digits of the natural constant e. The person who could find this prime number could go to the next step in Google's hiring process by visiting this website. The natural constant e is a well known transcendental number\uff08\u8d85\u8d8a\u6570\uff09. The first several digits are: e = 2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642 7427466391 932003059921... where the 10 digits in bold are the answer to Google's question. Now you are asked to solve a more general problem: find the first K-digit prime in consecutive digits of any given L-digit number.","title":"Google Recruitment"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1152%20Google%20Recruitment/#input-specification","text":"Each input file contains one test case. Each case first gives in a line two positive integers: L (\u2264 1,000) and K (< 10), which are the numbers of digits of the given number and the prime to be found, respectively. Then the L-digit number N is given in the next line.","title":"Input Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1152%20Google%20Recruitment/#output-specification","text":"For each test case, print in a line the first K-digit prime in consecutive digits of N. If such a number does not exist, output 404 instead. Note: the leading zeroes must also be counted as part of the K digits. For example, to find the 4-digit prime in 200236, 0023 is a solution. However the first digit 2 must not be treated as a solution 0002 since the leading zeroes are not in the original number.","title":"Output Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1152%20Google%20Recruitment/#sample-input-1","text":"20 5 23654987725541023819","title":"Sample Input 1:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1152%20Google%20Recruitment/#sample-output-1","text":"49877","title":"Sample Output 1:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1152%20Google%20Recruitment/#sample-input-2","text":"10 3 2468024680","title":"Sample Input 2:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1152%20Google%20Recruitment/#sample-output-2","text":"404","title":"Sample Output 2:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1152%20Google%20Recruitment/#code","text":"\u8c8c\u4f3c PAT \u6570\u636e\u91cf\u90fd\u4e0d\u5927\uff0c\u9898\u5927\u591a BF \u5c31\u884c\u3002 #include <iostream> #include <string> using namespace std; bool isPrime(int n) { if (n == 0 || n == 1) return false; for (int i = 2; i * i <= n; i++) if (n % i == 0) return false; return true; } int main() { int l, k; string s; cin >> l >> k >> s; for (int i = 0; i <= l - k; i++) { string t = s.substr(i, k); int num = stoi(t); if (isPrime(num)) { cout << t; return 0; } } cout << \"404\\n\"; return 0; } \u89e32\uff1a\u5927\u6570\u53ea\u7528\u7d20\u6570\u7b5b\u9009\uff0c\u6570\u636e\u91cf\u5c0f\uff0c\u6ca1\u5fc5\u8981\u3002 //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> inline int read() { int ra, fh; char rx; rx = getchar(), ra = 0, fh = 1; while ((rx < '0' || rx > '9') && rx != '-') rx = getchar(); if (rx == '-') fh = -1, rx = getchar(); while (rx >= '0' && rx <= '9') ra *= 10, ra += rx - 48, rx = getchar(); return ra * fh; } using namespace std; typedef long long ll; const int MAX_N = 1010; const int MAX_P = 1e5; bool isPrime[MAX_P]; int prime[MAX_P], top; void sieve() { memset(isPrime, 1, sizeof(isPrime)); isPrime[1] = isPrime[0] = false; for (int i = 2; i * i < MAX_P; ++i) { if (isPrime[i]) { for (int j = i * i; j < MAX_P; j += i) { isPrime[j] = false; } } } for (int i = 2; i < MAX_P; ++i) { if (isPrime[i]) prime[top++] = i; } } bool test(ll n) { if (n < MAX_P) { return isPrime[n]; } else { int i = 0, t = prime[0]; while (t * t <= n) { if (n % prime[i] == 0) return false; t = prime[++i]; } return true; } } int L, K; char mstr[MAX_N]; char t[] = \"%0mlld\\n\"; inline void tMain() { L = read(), K = read(); cin.getline(mstr, MAX_N); t[2] = K + '0'; if (L < K) { puts(\"404\"); return; } sieve(); ll ans = 0, MOD = pow(10, K); for (int i = 0; i < K; ++i) { ans = 10 * ans + mstr[i] - '0'; } if (test(ans)) { printf(t, ans); return; } for (int i = K; i < L; ++i) { ans = (10 * ans) % MOD + mstr[i] - '0'; if (test(ans)) { printf(t, ans); return; } } puts(\"404\"); } int main() { #ifdef mytest test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1153%20Decode%20Registration%20Card%20of%20PAT/","text":"Decode Registration Card of PAT A registration card number of PAT consists of 4 parts: the 1st letter represents the test level, namely, T for the top level, A for advance and B for basic; the 2nd - 4th digits are the test site number, ranged from 101 to 999; the 5th - 10th digits give the test date, in the form of yymmdd ; finally the 11th - 13th digits are the testee's number, ranged from 000 to 999. Now given a set of registration card numbers and the scores of the card owners, you are supposed to output the various statistics according to the given queries. Input Specification: Each input file contains one test case. For each case, the first line gives two positive integers N (\u2264104) and M (\u2264100), the numbers of cards and the queries, respectively. Then N lines follow, each gives a card number and the owner's score (integer in [0,100]), separated by a space. After the info of testees, there are M lines, each gives a query in the format Type Term , where Type being 1 means to output all the testees on a given level, in non-increasing order of their scores. The corresponding Term will be the letter which specifies the level; Type being 2 means to output the total number of testees together with their total scores in a given site. The corresponding Term will then be the site number; Type being 3 means to output the total number of testees of every site for a given test date. The corresponding Term will then be the date, given in the same format as in the registration card. Output Specification: For each query, first print in a line Case #: input , where # is the index of the query case, starting from 1; and input is a copy of the corresponding input query. Then output as requested: for a type 1 query, the output format is the same as in input, that is, CardNumber Score . If there is a tie of the scores, output in increasing alphabetical order of their card numbers (uniqueness of the card numbers is guaranteed); for a type 2 query, output in the format Nt Ns where Nt is the total number of testees and Ns is their total score; for a type 3 query, output in the format Site Nt where Site is the site number and Nt is the total number of testees at Site . The output must be in non-increasing order of Nt 's, or in increasing order of site numbers if there is a tie of Nt . If the result of a query is empty, simply print NA . Sample Input: 8 4 B123180908127 99 B102180908003 86 A112180318002 98 T107150310127 62 A107180908108 100 T123180908010 78 B112160918035 88 A107180908021 98 1 A 2 107 3 180908 2 999 Sample Output: Case 1: 1 A A107180908108 100 A107180908021 98 A112180318002 98 Case 2: 2 107 3 260 Case 3: 3 180908 107 2 123 2 102 1 Case 4: 2 999 NA Code \u8fd9\u79cd\u6570\u636e\u91cf\u5c0f\u7684\u9898\u90fd BF \u6bd4\u8f83\u597d\uff0c\u4f18\u5316\u5fc5\u987b\u7ec6\u5fc3\uff0c\u4e0d\u7136\u5bb9\u6613 WA\u3002 #include <iostream> #include <vector> #include <unordered_map> #include <algorithm> using namespace std; struct node { string t; int value; }; bool cmp(const node &a, const node &b) { return a.value != b.value ? a.value > b.value : a.t < b.t; } int main() { int n, k, num; string s; cin >> n >> k; vector<node> v(n); for (int i = 0; i < n; i++) cin >> v[i].t >> v[i].value; for (int i = 1; i <= k; i++) { cin >> num >> s; printf(\"Case %d: %d %s\\n\", i, num, s.c_str()); vector<node> ans; int cnt = 0, sum = 0; if (num == 1) { for (int j = 0; j < n; j++) if (v[j].t[0] == s[0]) ans.push_back(v[j]); } else if (num == 2) { for (int j = 0; j < n; j++) { if (v[j].t.substr(1, 3) == s) { cnt++; sum += v[j].value; } } if (cnt != 0) printf(\"%d %d\\n\", cnt, sum); } else if (num == 3) { unordered_map<string, int> m; for (int j = 0; j < n; j++) if (v[j].t.substr(4, 6) == s) m[v[j].t.substr(1, 3)]++; for (auto it : m) ans.push_back({it.first, it.second}); } sort(ans.begin(), ans.end(),cmp); for (int j = 0; j < ans.size(); j++) printf(\"%s %d\\n\", ans[j].t.c_str(), ans[j].value); if (((num == 1 || num == 3) && ans.size() == 0) || (num == 2 && cnt == 0)) printf(\"NA\\n\"); } return 0; } \u7528 unordered_map \u4f18\u5316\u67e5\u8be2\u3002 //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <bits/stdc++.h> #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> inline int read() { int ra, fh; char rx; rx = getchar(), ra = 0, fh = 1; while ((rx < '0' || rx > '9') && rx != '-') rx = getchar(); if (rx == '-') fh = -1, rx = getchar(); while (rx >= '0' && rx <= '9') ra *= 10, ra += rx - 48, rx = getchar(); return ra * fh; } using namespace std; typedef long long ll; typedef pair<string, int> pp; const int MAX_N = 110, MAX_M = 110; int N, M; vector<pp> type1[3]; unordered_map<int, pair<int, int>> type2; unordered_map<int, map<int, int> > type3; inline void tMain() { N = read(), M = read(); string s; int score; while (N--) { cin >> s; score = read(); char level = s[0]; int site = stoi(s.substr(1, 3)), date = stoi(s.substr(4, 6)); if (level == 'A') { type1[0].emplace_back(s, score); } else if (level == 'B') type1[1].emplace_back(s, score); else type1[2].emplace_back(s, score); type2[site].first += 1; type2[site].second += score; type3[date][site] += 1; } for (int i = 0; i < 3; ++i) { sort(type1[i].begin(), type1[i].end(), [](const pp &a, const pp &b) { if (a.second != b.second) return a.second > b.second; else return a.first < b.first; }); } int type; string mstr; for (int i = 1; i <= M; ++i) { cin >> type >> mstr; printf(\"Case %d: %d %s\\n\", i, type, mstr.c_str()); if (type == 1) { switch (mstr[0]) { case 'A': if (!type1[0].empty()) { for_each(type1[0].begin(), type1[0].end(), [](const pp &a) { cout << a.first; printf(\" %d\\n\", a.second); }); } else puts(\"NA\"); break; case 'B': if (!type1[1].empty()) { for_each(type1[1].begin(), type1[1].end(), [](const pp &a) { cout << a.first; printf(\" %d\\n\", a.second); }); } else puts(\"NA\"); break; case 'T': if (!type1[2].empty()) { for_each(type1[2].begin(), type1[2].end(), [](const pp &a) { cout << a.first; printf(\" %d\\n\", a.second); }); } else puts(\"NA\"); break; default: puts(\"NA\"); } } else { int term = stoi(mstr); if (type == 2) { auto it = type2.find(term); if (it != type2.end()) { printf(\"%d %d\\n\", it->second.first, it->second.second); } else puts(\"NA\"); } else if (type == 3) { auto it = type3.find(term); if (it != type3.end()) { vector<pair<int, int> > t; for (auto &data : it->second) { t.emplace_back(data.first, data.second); } sort(t.begin(), t.end(), [](pair<int, int> &a, pair<int, int> &b) { if (a.second != b.second) return a.second > b.second; else return a.first < b.first; }); for_each(t.begin(), t.end(), [](const pair<int, int> &a) { printf(\"%d %d\\n\", a.first, a.second); }); } else puts(\"NA\"); } else puts(\"NA\"); } } } int main() { #ifdef mytest test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Decode Registration Card of PAT"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1153%20Decode%20Registration%20Card%20of%20PAT/#decode-registration-card-of-pat","text":"A registration card number of PAT consists of 4 parts: the 1st letter represents the test level, namely, T for the top level, A for advance and B for basic; the 2nd - 4th digits are the test site number, ranged from 101 to 999; the 5th - 10th digits give the test date, in the form of yymmdd ; finally the 11th - 13th digits are the testee's number, ranged from 000 to 999. Now given a set of registration card numbers and the scores of the card owners, you are supposed to output the various statistics according to the given queries.","title":"Decode Registration Card of PAT"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1153%20Decode%20Registration%20Card%20of%20PAT/#input-specification","text":"Each input file contains one test case. For each case, the first line gives two positive integers N (\u2264104) and M (\u2264100), the numbers of cards and the queries, respectively. Then N lines follow, each gives a card number and the owner's score (integer in [0,100]), separated by a space. After the info of testees, there are M lines, each gives a query in the format Type Term , where Type being 1 means to output all the testees on a given level, in non-increasing order of their scores. The corresponding Term will be the letter which specifies the level; Type being 2 means to output the total number of testees together with their total scores in a given site. The corresponding Term will then be the site number; Type being 3 means to output the total number of testees of every site for a given test date. The corresponding Term will then be the date, given in the same format as in the registration card.","title":"Input Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1153%20Decode%20Registration%20Card%20of%20PAT/#output-specification","text":"For each query, first print in a line Case #: input , where # is the index of the query case, starting from 1; and input is a copy of the corresponding input query. Then output as requested: for a type 1 query, the output format is the same as in input, that is, CardNumber Score . If there is a tie of the scores, output in increasing alphabetical order of their card numbers (uniqueness of the card numbers is guaranteed); for a type 2 query, output in the format Nt Ns where Nt is the total number of testees and Ns is their total score; for a type 3 query, output in the format Site Nt where Site is the site number and Nt is the total number of testees at Site . The output must be in non-increasing order of Nt 's, or in increasing order of site numbers if there is a tie of Nt . If the result of a query is empty, simply print NA .","title":"Output Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1153%20Decode%20Registration%20Card%20of%20PAT/#sample-input","text":"8 4 B123180908127 99 B102180908003 86 A112180318002 98 T107150310127 62 A107180908108 100 T123180908010 78 B112160918035 88 A107180908021 98 1 A 2 107 3 180908 2 999","title":"Sample Input:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1153%20Decode%20Registration%20Card%20of%20PAT/#sample-output","text":"Case 1: 1 A A107180908108 100 A107180908021 98 A112180318002 98 Case 2: 2 107 3 260 Case 3: 3 180908 107 2 123 2 102 1 Case 4: 2 999 NA","title":"Sample Output:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1153%20Decode%20Registration%20Card%20of%20PAT/#code","text":"\u8fd9\u79cd\u6570\u636e\u91cf\u5c0f\u7684\u9898\u90fd BF \u6bd4\u8f83\u597d\uff0c\u4f18\u5316\u5fc5\u987b\u7ec6\u5fc3\uff0c\u4e0d\u7136\u5bb9\u6613 WA\u3002 #include <iostream> #include <vector> #include <unordered_map> #include <algorithm> using namespace std; struct node { string t; int value; }; bool cmp(const node &a, const node &b) { return a.value != b.value ? a.value > b.value : a.t < b.t; } int main() { int n, k, num; string s; cin >> n >> k; vector<node> v(n); for (int i = 0; i < n; i++) cin >> v[i].t >> v[i].value; for (int i = 1; i <= k; i++) { cin >> num >> s; printf(\"Case %d: %d %s\\n\", i, num, s.c_str()); vector<node> ans; int cnt = 0, sum = 0; if (num == 1) { for (int j = 0; j < n; j++) if (v[j].t[0] == s[0]) ans.push_back(v[j]); } else if (num == 2) { for (int j = 0; j < n; j++) { if (v[j].t.substr(1, 3) == s) { cnt++; sum += v[j].value; } } if (cnt != 0) printf(\"%d %d\\n\", cnt, sum); } else if (num == 3) { unordered_map<string, int> m; for (int j = 0; j < n; j++) if (v[j].t.substr(4, 6) == s) m[v[j].t.substr(1, 3)]++; for (auto it : m) ans.push_back({it.first, it.second}); } sort(ans.begin(), ans.end(),cmp); for (int j = 0; j < ans.size(); j++) printf(\"%s %d\\n\", ans[j].t.c_str(), ans[j].value); if (((num == 1 || num == 3) && ans.size() == 0) || (num == 2 && cnt == 0)) printf(\"NA\\n\"); } return 0; } \u7528 unordered_map \u4f18\u5316\u67e5\u8be2\u3002 //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <bits/stdc++.h> #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> inline int read() { int ra, fh; char rx; rx = getchar(), ra = 0, fh = 1; while ((rx < '0' || rx > '9') && rx != '-') rx = getchar(); if (rx == '-') fh = -1, rx = getchar(); while (rx >= '0' && rx <= '9') ra *= 10, ra += rx - 48, rx = getchar(); return ra * fh; } using namespace std; typedef long long ll; typedef pair<string, int> pp; const int MAX_N = 110, MAX_M = 110; int N, M; vector<pp> type1[3]; unordered_map<int, pair<int, int>> type2; unordered_map<int, map<int, int> > type3; inline void tMain() { N = read(), M = read(); string s; int score; while (N--) { cin >> s; score = read(); char level = s[0]; int site = stoi(s.substr(1, 3)), date = stoi(s.substr(4, 6)); if (level == 'A') { type1[0].emplace_back(s, score); } else if (level == 'B') type1[1].emplace_back(s, score); else type1[2].emplace_back(s, score); type2[site].first += 1; type2[site].second += score; type3[date][site] += 1; } for (int i = 0; i < 3; ++i) { sort(type1[i].begin(), type1[i].end(), [](const pp &a, const pp &b) { if (a.second != b.second) return a.second > b.second; else return a.first < b.first; }); } int type; string mstr; for (int i = 1; i <= M; ++i) { cin >> type >> mstr; printf(\"Case %d: %d %s\\n\", i, type, mstr.c_str()); if (type == 1) { switch (mstr[0]) { case 'A': if (!type1[0].empty()) { for_each(type1[0].begin(), type1[0].end(), [](const pp &a) { cout << a.first; printf(\" %d\\n\", a.second); }); } else puts(\"NA\"); break; case 'B': if (!type1[1].empty()) { for_each(type1[1].begin(), type1[1].end(), [](const pp &a) { cout << a.first; printf(\" %d\\n\", a.second); }); } else puts(\"NA\"); break; case 'T': if (!type1[2].empty()) { for_each(type1[2].begin(), type1[2].end(), [](const pp &a) { cout << a.first; printf(\" %d\\n\", a.second); }); } else puts(\"NA\"); break; default: puts(\"NA\"); } } else { int term = stoi(mstr); if (type == 2) { auto it = type2.find(term); if (it != type2.end()) { printf(\"%d %d\\n\", it->second.first, it->second.second); } else puts(\"NA\"); } else if (type == 3) { auto it = type3.find(term); if (it != type3.end()) { vector<pair<int, int> > t; for (auto &data : it->second) { t.emplace_back(data.first, data.second); } sort(t.begin(), t.end(), [](pair<int, int> &a, pair<int, int> &b) { if (a.second != b.second) return a.second > b.second; else return a.first < b.first; }); for_each(t.begin(), t.end(), [](const pair<int, int> &a) { printf(\"%d %d\\n\", a.first, a.second); }); } else puts(\"NA\"); } else puts(\"NA\"); } } } int main() { #ifdef mytest test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1154%20Vertex%20Coloring/","text":"Vertex Coloring A proper vertex coloring is a labeling of the graph's vertices with colors such that no two vertices sharing the same edge have the same color. A coloring using at most k colors is called a (proper) k-coloring . Now you are supposed to tell if a given coloring is a proper k-coloring. Input Specification: Each input file contains one test case. For each case, the first line gives two positive integers N and M (both no more than 104), being the total numbers of vertices and edges, respectively. Then M lines follow, each describes an edge by giving the indices (from 0 to N\u22121) of the two ends of the edge. After the graph, a positive integer K (\u2264 100) is given, which is the number of colorings you are supposed to check. Then K lines follow, each contains N colors which are represented by non-negative integers in the range of int . The i-th color is the color of the i-th vertex. Output Specification: For each coloring, print in a line k-coloring if it is a proper k -coloring for some positive k , or No if not. Sample Input: 10 11 8 7 6 8 4 5 8 4 8 1 1 2 1 4 9 8 9 1 1 0 2 4 4 0 1 0 1 4 1 0 1 3 0 0 1 0 1 4 1 0 1 0 0 8 1 0 1 4 1 0 5 3 0 1 2 3 4 5 6 7 8 8 9 Sample Output: 4-coloring No 6-coloring No Code //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <bits/stdc++.h> #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; typedef long long ll; const int MAX_N = 1e4 + 10; vector<int> g[MAX_N]; ll color[MAX_N]; int N, M, K; inline void tMain() { scanf(\"%d%d\", &N, &M); while (M--) { int u, v; scanf(\"%d%d\", &u, &v); g[u].push_back(v), g[v].push_back(u); } scanf(\"%d\", &K); while (K--) { for (int i = 0; i < N; ++i) { scanf(\"%d\", &color[i]); } bool flag = true; set<ll> mset; for (int u = 0; u < N && flag; ++u) { ll colorU = color[u]; mset.insert(colorU); for (int v : g[u]) { if (color[v] == colorU) { flag = false; } } } if (!flag) puts(\"No\"); else printf(\"%d-coloring\\n\", mset.size()); } } int main() { #ifdef mytest test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Vertex Coloring"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1154%20Vertex%20Coloring/#vertex-coloring","text":"A proper vertex coloring is a labeling of the graph's vertices with colors such that no two vertices sharing the same edge have the same color. A coloring using at most k colors is called a (proper) k-coloring . Now you are supposed to tell if a given coloring is a proper k-coloring.","title":"Vertex Coloring"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1154%20Vertex%20Coloring/#input-specification","text":"Each input file contains one test case. For each case, the first line gives two positive integers N and M (both no more than 104), being the total numbers of vertices and edges, respectively. Then M lines follow, each describes an edge by giving the indices (from 0 to N\u22121) of the two ends of the edge. After the graph, a positive integer K (\u2264 100) is given, which is the number of colorings you are supposed to check. Then K lines follow, each contains N colors which are represented by non-negative integers in the range of int . The i-th color is the color of the i-th vertex.","title":"Input Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1154%20Vertex%20Coloring/#output-specification","text":"For each coloring, print in a line k-coloring if it is a proper k -coloring for some positive k , or No if not.","title":"Output Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1154%20Vertex%20Coloring/#sample-input","text":"10 11 8 7 6 8 4 5 8 4 8 1 1 2 1 4 9 8 9 1 1 0 2 4 4 0 1 0 1 4 1 0 1 3 0 0 1 0 1 4 1 0 1 0 0 8 1 0 1 4 1 0 5 3 0 1 2 3 4 5 6 7 8 8 9","title":"Sample Input:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1154%20Vertex%20Coloring/#sample-output","text":"4-coloring No 6-coloring No","title":"Sample Output:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1154%20Vertex%20Coloring/#code","text":"//#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <bits/stdc++.h> #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; typedef long long ll; const int MAX_N = 1e4 + 10; vector<int> g[MAX_N]; ll color[MAX_N]; int N, M, K; inline void tMain() { scanf(\"%d%d\", &N, &M); while (M--) { int u, v; scanf(\"%d%d\", &u, &v); g[u].push_back(v), g[v].push_back(u); } scanf(\"%d\", &K); while (K--) { for (int i = 0; i < N; ++i) { scanf(\"%d\", &color[i]); } bool flag = true; set<ll> mset; for (int u = 0; u < N && flag; ++u) { ll colorU = color[u]; mset.insert(colorU); for (int v : g[u]) { if (color[v] == colorU) { flag = false; } } } if (!flag) puts(\"No\"); else printf(\"%d-coloring\\n\", mset.size()); } } int main() { #ifdef mytest test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1155%20Heap%20Paths/","text":"Heap Paths In computer science, a heap is a specialized tree-based data structure that satisfies the heap property: if P is a parent node of C, then the key (the value) of P is either greater than or equal to (in a max heap) or less than or equal to (in a min heap) the key of C. A common implementation of a heap is the binary heap, in which the tree is a complete binary tree. (Quoted from Wikipedia at https://en.wikipedia.org/wiki/Heap_(data_structure)) One thing for sure is that all the keys along any path from the root to a leaf in a max/min heap must be in non-increasing/non-decreasing order. Your job is to check every path in a given complete binary tree, in order to tell if it is a heap or not. Input Specification: Each input file contains one test case. For each case, the first line gives a positive integer N (1<N\u22641,000), the number of keys in the tree. Then the next line contains N distinct integer keys (all in the range of int ), which gives the level order traversal sequence of a complete binary tree. Output Specification: For each given tree, first print all the paths from the root to the leaves. Each path occupies a line, with all the numbers separated by a space, and no extra space at the beginning or the end of the line. The paths must be printed in the following order: for each node in the tree, all the paths in its right subtree must be printed before those in its left subtree. Finally print in a line Max Heap if it is a max heap, or Min Heap for a min heap, or Not Heap if it is not a heap at all. Sample Input 1: 8 98 72 86 60 65 12 23 50 Sample Output 1: 98 86 23 98 86 12 98 72 65 98 72 60 50 Max Heap Sample Input 2: 8 8 38 25 58 52 82 70 60 Sample Output 2: 8 25 70 8 25 82 8 38 52 8 38 58 60 Min Heap Sample Input 3: 8 10 28 15 12 34 9 8 56 Sample Output 3: 10 15 8 10 15 9 10 28 34 10 28 12 56 Not Heap Code //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <bits/stdc++.h> #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; typedef long long ll; const int MAX_N = 1e3 + 10; int N, tree[MAX_N]; bool minHeap = true, maxHeap = true; vector<int> path; void print(int n) { path.push_back(tree[n]); int l = n * 2, r = n * 2 + 1; if (l > N) { int len = path.size(); printf(\"%d \", path[0]); for (int i = 1; i < len; ++i) { int u = path[i - 1], v = path[i]; printf(\"%d\", v); if (v < u) minHeap = false; else if (u < v) maxHeap = false; if (i == len - 1) putchar('\\n'); else putchar(' '); } path.pop_back(); return; } if (r <= N) print(r); print(l); path.pop_back(); } inline void tMain() { scanf(\"%d\", &N); for (int i = 1; i <= N; ++i) { scanf(\"%d\", &tree[i]); } print(1); if (minHeap) puts(\"Min Heap\"); else if(maxHeap) puts(\"Max Heap\"); else puts(\"Not Heap\"); } int main() { #ifdef mytest test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Heap Paths"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1155%20Heap%20Paths/#heap-paths","text":"In computer science, a heap is a specialized tree-based data structure that satisfies the heap property: if P is a parent node of C, then the key (the value) of P is either greater than or equal to (in a max heap) or less than or equal to (in a min heap) the key of C. A common implementation of a heap is the binary heap, in which the tree is a complete binary tree. (Quoted from Wikipedia at https://en.wikipedia.org/wiki/Heap_(data_structure)) One thing for sure is that all the keys along any path from the root to a leaf in a max/min heap must be in non-increasing/non-decreasing order. Your job is to check every path in a given complete binary tree, in order to tell if it is a heap or not.","title":"Heap Paths"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1155%20Heap%20Paths/#input-specification","text":"Each input file contains one test case. For each case, the first line gives a positive integer N (1<N\u22641,000), the number of keys in the tree. Then the next line contains N distinct integer keys (all in the range of int ), which gives the level order traversal sequence of a complete binary tree.","title":"Input Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1155%20Heap%20Paths/#output-specification","text":"For each given tree, first print all the paths from the root to the leaves. Each path occupies a line, with all the numbers separated by a space, and no extra space at the beginning or the end of the line. The paths must be printed in the following order: for each node in the tree, all the paths in its right subtree must be printed before those in its left subtree. Finally print in a line Max Heap if it is a max heap, or Min Heap for a min heap, or Not Heap if it is not a heap at all.","title":"Output Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1155%20Heap%20Paths/#sample-input-1","text":"8 98 72 86 60 65 12 23 50","title":"Sample Input 1:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1155%20Heap%20Paths/#sample-output-1","text":"98 86 23 98 86 12 98 72 65 98 72 60 50 Max Heap","title":"Sample Output 1:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1155%20Heap%20Paths/#sample-input-2","text":"8 8 38 25 58 52 82 70 60","title":"Sample Input 2:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1155%20Heap%20Paths/#sample-output-2","text":"8 25 70 8 25 82 8 38 52 8 38 58 60 Min Heap","title":"Sample Output 2:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1155%20Heap%20Paths/#sample-input-3","text":"8 10 28 15 12 34 9 8 56","title":"Sample Input 3:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1155%20Heap%20Paths/#sample-output-3","text":"10 15 8 10 15 9 10 28 34 10 28 12 56 Not Heap","title":"Sample Output 3:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1155%20Heap%20Paths/#code","text":"//#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <bits/stdc++.h> #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; typedef long long ll; const int MAX_N = 1e3 + 10; int N, tree[MAX_N]; bool minHeap = true, maxHeap = true; vector<int> path; void print(int n) { path.push_back(tree[n]); int l = n * 2, r = n * 2 + 1; if (l > N) { int len = path.size(); printf(\"%d \", path[0]); for (int i = 1; i < len; ++i) { int u = path[i - 1], v = path[i]; printf(\"%d\", v); if (v < u) minHeap = false; else if (u < v) maxHeap = false; if (i == len - 1) putchar('\\n'); else putchar(' '); } path.pop_back(); return; } if (r <= N) print(r); print(l); path.pop_back(); } inline void tMain() { scanf(\"%d\", &N); for (int i = 1; i <= N; ++i) { scanf(\"%d\", &tree[i]); } print(1); if (minHeap) puts(\"Min Heap\"); else if(maxHeap) puts(\"Max Heap\"); else puts(\"Not Heap\"); } int main() { #ifdef mytest test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1156%20Sexy%20Primes/","text":"Sexy Primes Sexy primes are pairs of primes of the form (p, p+6), so-named since \"sex\" is the Latin word for \"six\". (Quoted from http://mathworld.wolfram.com/SexyPrimes.html) Now given an integer, you are supposed to tell if it is a sexy prime. Input Specification: Each input file contains one test case. Each case gives a positive integer N (\u2264108). Output Specification: For each case, print in a line Yes if N is a sexy prime, then print in the next line the other sexy prime paired with N (if the answer is not unique, output the smaller number). Or if N is not a sexy prime, print No instead, then print in the next line the smallest sexy prime which is larger than N. Sample Input 1: 47 Sample Output 1: Yes 41 Sample Input 2: 21 Sample Output 2: No 23 Code //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <bits/stdc++.h> #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; typedef long long ll; int N; bool isPrime(int a) { if (a <= 1) return false; for (int i = 2; i * i <= a; ++i) { if (a % i == 0) return false; } return true; } bool test(int a) { return isPrime(a) && (isPrime(a + 6) || isPrime(a - 6)); } inline void tMain() { cin >> N; if (isPrime(N)) { if (isPrime(N - 6)) { printf(\"Yes\\n%d\\n\", N - 6); return; } else if (isPrime(N + 6)) { printf(\"Yes\\n%d\\n\", N + 6); return; } } while (!test(++N)); printf(\"No\\n%d\\n\", N); } int main() { #ifdef mytest test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Sexy Primes"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1156%20Sexy%20Primes/#sexy-primes","text":"Sexy primes are pairs of primes of the form (p, p+6), so-named since \"sex\" is the Latin word for \"six\". (Quoted from http://mathworld.wolfram.com/SexyPrimes.html) Now given an integer, you are supposed to tell if it is a sexy prime.","title":"Sexy Primes"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1156%20Sexy%20Primes/#input-specification","text":"Each input file contains one test case. Each case gives a positive integer N (\u2264108).","title":"Input Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1156%20Sexy%20Primes/#output-specification","text":"For each case, print in a line Yes if N is a sexy prime, then print in the next line the other sexy prime paired with N (if the answer is not unique, output the smaller number). Or if N is not a sexy prime, print No instead, then print in the next line the smallest sexy prime which is larger than N.","title":"Output Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1156%20Sexy%20Primes/#sample-input-1","text":"47","title":"Sample Input 1:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1156%20Sexy%20Primes/#sample-output-1","text":"Yes 41","title":"Sample Output 1:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1156%20Sexy%20Primes/#sample-input-2","text":"21","title":"Sample Input 2:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1156%20Sexy%20Primes/#sample-output-2","text":"No 23","title":"Sample Output 2:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1156%20Sexy%20Primes/#code","text":"//#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <bits/stdc++.h> #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; typedef long long ll; int N; bool isPrime(int a) { if (a <= 1) return false; for (int i = 2; i * i <= a; ++i) { if (a % i == 0) return false; } return true; } bool test(int a) { return isPrime(a) && (isPrime(a + 6) || isPrime(a - 6)); } inline void tMain() { cin >> N; if (isPrime(N)) { if (isPrime(N - 6)) { printf(\"Yes\\n%d\\n\", N - 6); return; } else if (isPrime(N + 6)) { printf(\"Yes\\n%d\\n\", N + 6); return; } } while (!test(++N)); printf(\"No\\n%d\\n\", N); } int main() { #ifdef mytest test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1157%20Anniversary/","text":"1157 Anniversary Zhejiang University is about to celebrate her 122th anniversary in 2019. To prepare for the celebration, the alumni association \uff08\u6821\u53cb\u4f1a\uff09 has gathered the ID's of all her alumni. Now your job is to write a program to count the number of alumni among all the people who come to the celebration. Input Specification: Each input file contains one test case. For each case, the first part is about the information of all the alumni. Given in the first line is a positive integer N (\u2264105). Then N lines follow, each contains an ID number of an alumnus. An ID number is a string of 18 digits or the letter X . It is guaranteed that all the ID's are distinct. The next part gives the information of all the people who come to the celebration. Again given in the first line is a positive integer M (\u2264105). Then M lines follow, each contains an ID number of a guest. It is guaranteed that all the ID's are distinct. Output Specification: First print in a line the number of alumni among all the people who come to the celebration. Then in the second line, print the ID of the oldest alumnus -- notice that the 7th - 14th digits of the ID gives one's birth date. If no alumnus comes, output the ID of the oldest guest instead. It is guaranteed that such an alumnus or guest is unique. Sample Input: 5 372928196906118710 610481197806202213 440684198612150417 13072819571002001X 150702193604190912 6 530125197901260019 150702193604190912 220221196701020034 610481197806202213 440684198612150417 370205198709275042 Sample Output: 3 150702193604190912 Code //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <unordered_set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; typedef long long ll; int N, M; unordered_set<string> alumus; inline void tMain() { cin >> N; for (int i = 0; i < N; ++i) { string t; cin >> t; alumus.insert(t); } cin >> M; string oldestGuest(18, '9'), oldestAlumus(18, '9'); int cnt = 0; while (M--) { string t; cin >> t; string birth = t.substr(6, 8); if (birth < oldestGuest.substr(6, 8)) { oldestGuest = t; } auto it = alumus.find(t); if (it != alumus.end()) { ++cnt; if (birth < oldestAlumus.substr(6, 8)) { oldestAlumus = t; } } } printf(\"%d\\n\", cnt); if (cnt > 0) { cout << oldestAlumus << endl; } else { cout << oldestGuest << endl; } } int main() { #ifdef mytest test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"1157 Anniversary"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1157%20Anniversary/#1157-anniversary","text":"Zhejiang University is about to celebrate her 122th anniversary in 2019. To prepare for the celebration, the alumni association \uff08\u6821\u53cb\u4f1a\uff09 has gathered the ID's of all her alumni. Now your job is to write a program to count the number of alumni among all the people who come to the celebration.","title":"1157 Anniversary"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1157%20Anniversary/#input-specification","text":"Each input file contains one test case. For each case, the first part is about the information of all the alumni. Given in the first line is a positive integer N (\u2264105). Then N lines follow, each contains an ID number of an alumnus. An ID number is a string of 18 digits or the letter X . It is guaranteed that all the ID's are distinct. The next part gives the information of all the people who come to the celebration. Again given in the first line is a positive integer M (\u2264105). Then M lines follow, each contains an ID number of a guest. It is guaranteed that all the ID's are distinct.","title":"Input Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1157%20Anniversary/#output-specification","text":"First print in a line the number of alumni among all the people who come to the celebration. Then in the second line, print the ID of the oldest alumnus -- notice that the 7th - 14th digits of the ID gives one's birth date. If no alumnus comes, output the ID of the oldest guest instead. It is guaranteed that such an alumnus or guest is unique.","title":"Output Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1157%20Anniversary/#sample-input","text":"5 372928196906118710 610481197806202213 440684198612150417 13072819571002001X 150702193604190912 6 530125197901260019 150702193604190912 220221196701020034 610481197806202213 440684198612150417 370205198709275042","title":"Sample Input:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1157%20Anniversary/#sample-output","text":"3 150702193604190912","title":"Sample Output:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1157%20Anniversary/#code","text":"//#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <unordered_set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; typedef long long ll; int N, M; unordered_set<string> alumus; inline void tMain() { cin >> N; for (int i = 0; i < N; ++i) { string t; cin >> t; alumus.insert(t); } cin >> M; string oldestGuest(18, '9'), oldestAlumus(18, '9'); int cnt = 0; while (M--) { string t; cin >> t; string birth = t.substr(6, 8); if (birth < oldestGuest.substr(6, 8)) { oldestGuest = t; } auto it = alumus.find(t); if (it != alumus.end()) { ++cnt; if (birth < oldestAlumus.substr(6, 8)) { oldestAlumus = t; } } } printf(\"%d\\n\", cnt); if (cnt > 0) { cout << oldestAlumus << endl; } else { cout << oldestGuest << endl; } } int main() { #ifdef mytest test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1158%20Telefraud%20Detection/","text":"1158 Telefraud Detection Telefraud\uff08\u7535\u4fe1\u8bc8\u9a97\uff09 remains a common and persistent problem in our society. In some cases, unsuspecting victims lose their entire life savings. To stop this crime, you are supposed to write a program to detect those suspects from a huge amount of phone call records. A person must be detected as a suspect if he/she makes more than K short phone calls to different people everyday, but no more than 20% of these people would call back. And more, if two suspects are calling each other, we say they might belong to the same gang. A makes a short phone call to B means that the total duration of the calls from A to B is no more than 5 minutes. Input Specification: Each input file contains one test case. For each case, the first line gives 3 positive integers K (\u2264500, the threshold\uff08\u9608\u503c\uff09 of the amount of short phone calls), N (\u2264103, the number of different phone numbers), and M (\u2264105, the number of phone call records). Then M lines of one day's records are given, each in the format: caller receiver duration where caller and receiver are numbered from 1 to N, and duration is no more than 1440 minutes in a day. Output Specification: Print in each line all the detected suspects in a gang, in ascending order of their numbers. The gangs are printed in ascending order of their first members. The numbers in a line must be separated by exactly 1 space, and there must be no extra space at the beginning or the end of the line. If no one is detected, output None instead. Sample Input 1: 5 15 31 1 4 2 1 5 2 1 5 4 1 7 5 1 8 3 1 9 1 1 6 5 1 15 2 1 15 5 3 2 2 3 5 15 3 13 1 3 12 1 3 14 1 3 10 2 3 11 5 5 2 1 5 3 10 5 1 1 5 7 2 5 6 1 5 13 4 5 15 1 11 10 5 12 14 1 6 1 1 6 9 2 6 10 5 6 11 2 6 12 1 6 13 1 Sample Output 1: 3 5 6 Note: In sample 1, although 1 had 9 records, but there were 7 distinct receivers, among which 5 and 15 both had conversations lasted more than 5 minutes in total. Hence 1 had made 5 short phone calls and didn't exceed the threshold 5, and therefore is not a suspect. Sample Input 2: 5 7 8 1 2 1 1 3 1 1 4 1 1 5 1 1 6 1 1 7 1 2 1 1 3 1 1 Sample Output 2: None Code //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <unordered_set> #include <set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; typedef long long ll; const int MAX_N = 1e3 + 10; bool gShort[MAX_N][MAX_N]; int g[MAX_N][MAX_N]; int inDegree[MAX_N], outDegree[MAX_N], shortOutDegree[MAX_N]; bool suspects[MAX_N]; int p[MAX_N]; bool visit[MAX_N]; int findP(int e) { if (e == p[e]) return e; p[e] = findP(p[e]); return p[e]; } void unionSet(int a, int b) { int r = findP(a), r1 = findP(b); if (r < r1) { p[r1] = r; } else if (r1 < r) { p[r] = r1; } } int K, N, M; inline void tMain() { cin >> K >> N >> M; for (int i = 0; i < M; ++i) { int u, v, d; scanf(\"%d%d%d\", &u, &v, &d); g[u][v] += d; } for (int u = 1; u <= N; ++u) { for (int v = 1; v <= N; ++v) { if (g[u][v] && g[u][v] <= 5) { gShort[u][v] = true; ++outDegree[u]; } } } for (int u = 1; u <= N; ++u) { for (int v = 1; v <= N; ++v) { if (g[u][v] && gShort[v][u]) { ++inDegree[v]; } } } int cnt = 0; for (int u = 1; u <= N; ++u) { if (outDegree[u] > K && inDegree[u] * 5 <= outDegree[u]) { suspects[u] = true; ++cnt; } p[u] = u; } if (cnt == 0) { puts(\"None\"); return; } for (int u = 1; u <= N; ++u) { for (int v = 1; v <= N; ++v) { if (g[u][v] && g[v][u] && suspects[u] && suspects[v]) unionSet(u, v); } } vector<int> ans[MAX_N]; for (int u = 1; u <= N; ++u) { if (suspects[u]) { int r = findP(u); ans[r].push_back(u); } } for (auto &i : ans) { if (!i.empty()) { int l = i.size(); for (int j = 0; j < l; ++j) { printf(\"%d\", i[j]); if (j == l - 1) putchar('\\n'); else putchar(' '); } } } } int main() { #ifdef mytest test.run(); freopen(\"../main.out\", \"w\", stdout); freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"1158 Telefraud Detection"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1158%20Telefraud%20Detection/#1158-telefraud-detection","text":"Telefraud\uff08\u7535\u4fe1\u8bc8\u9a97\uff09 remains a common and persistent problem in our society. In some cases, unsuspecting victims lose their entire life savings. To stop this crime, you are supposed to write a program to detect those suspects from a huge amount of phone call records. A person must be detected as a suspect if he/she makes more than K short phone calls to different people everyday, but no more than 20% of these people would call back. And more, if two suspects are calling each other, we say they might belong to the same gang. A makes a short phone call to B means that the total duration of the calls from A to B is no more than 5 minutes.","title":"1158 Telefraud Detection"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1158%20Telefraud%20Detection/#input-specification","text":"Each input file contains one test case. For each case, the first line gives 3 positive integers K (\u2264500, the threshold\uff08\u9608\u503c\uff09 of the amount of short phone calls), N (\u2264103, the number of different phone numbers), and M (\u2264105, the number of phone call records). Then M lines of one day's records are given, each in the format: caller receiver duration where caller and receiver are numbered from 1 to N, and duration is no more than 1440 minutes in a day.","title":"Input Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1158%20Telefraud%20Detection/#output-specification","text":"Print in each line all the detected suspects in a gang, in ascending order of their numbers. The gangs are printed in ascending order of their first members. The numbers in a line must be separated by exactly 1 space, and there must be no extra space at the beginning or the end of the line. If no one is detected, output None instead.","title":"Output Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1158%20Telefraud%20Detection/#sample-input-1","text":"5 15 31 1 4 2 1 5 2 1 5 4 1 7 5 1 8 3 1 9 1 1 6 5 1 15 2 1 15 5 3 2 2 3 5 15 3 13 1 3 12 1 3 14 1 3 10 2 3 11 5 5 2 1 5 3 10 5 1 1 5 7 2 5 6 1 5 13 4 5 15 1 11 10 5 12 14 1 6 1 1 6 9 2 6 10 5 6 11 2 6 12 1 6 13 1","title":"Sample Input 1:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1158%20Telefraud%20Detection/#sample-output-1","text":"3 5 6 Note: In sample 1, although 1 had 9 records, but there were 7 distinct receivers, among which 5 and 15 both had conversations lasted more than 5 minutes in total. Hence 1 had made 5 short phone calls and didn't exceed the threshold 5, and therefore is not a suspect.","title":"Sample Output 1:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1158%20Telefraud%20Detection/#sample-input-2","text":"5 7 8 1 2 1 1 3 1 1 4 1 1 5 1 1 6 1 1 7 1 2 1 1 3 1 1","title":"Sample Input 2:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1158%20Telefraud%20Detection/#sample-output-2","text":"None","title":"Sample Output 2:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1158%20Telefraud%20Detection/#code","text":"//#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <unordered_set> #include <set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; typedef long long ll; const int MAX_N = 1e3 + 10; bool gShort[MAX_N][MAX_N]; int g[MAX_N][MAX_N]; int inDegree[MAX_N], outDegree[MAX_N], shortOutDegree[MAX_N]; bool suspects[MAX_N]; int p[MAX_N]; bool visit[MAX_N]; int findP(int e) { if (e == p[e]) return e; p[e] = findP(p[e]); return p[e]; } void unionSet(int a, int b) { int r = findP(a), r1 = findP(b); if (r < r1) { p[r1] = r; } else if (r1 < r) { p[r] = r1; } } int K, N, M; inline void tMain() { cin >> K >> N >> M; for (int i = 0; i < M; ++i) { int u, v, d; scanf(\"%d%d%d\", &u, &v, &d); g[u][v] += d; } for (int u = 1; u <= N; ++u) { for (int v = 1; v <= N; ++v) { if (g[u][v] && g[u][v] <= 5) { gShort[u][v] = true; ++outDegree[u]; } } } for (int u = 1; u <= N; ++u) { for (int v = 1; v <= N; ++v) { if (g[u][v] && gShort[v][u]) { ++inDegree[v]; } } } int cnt = 0; for (int u = 1; u <= N; ++u) { if (outDegree[u] > K && inDegree[u] * 5 <= outDegree[u]) { suspects[u] = true; ++cnt; } p[u] = u; } if (cnt == 0) { puts(\"None\"); return; } for (int u = 1; u <= N; ++u) { for (int v = 1; v <= N; ++v) { if (g[u][v] && g[v][u] && suspects[u] && suspects[v]) unionSet(u, v); } } vector<int> ans[MAX_N]; for (int u = 1; u <= N; ++u) { if (suspects[u]) { int r = findP(u); ans[r].push_back(u); } } for (auto &i : ans) { if (!i.empty()) { int l = i.size(); for (int j = 0; j < l; ++j) { printf(\"%d\", i[j]); if (j == l - 1) putchar('\\n'); else putchar(' '); } } } } int main() { #ifdef mytest test.run(); freopen(\"../main.out\", \"w\", stdout); freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1159%20Structure%20of%20a%20Binary%20Tree/","text":"Structure of a Binary Tree Suppose that all the keys in a binary tree are distinct positive integers. Given the postorder and inorder traversal sequences, a binary tree can be uniquely determined. Now given a sequence of statements about the structure of the resulting tree, you are supposed to tell if they are correct or not. A statment is one of the following: A is the root A and B are siblings A is the parent of B A is the left child of B A is the right child of B A and B are on the same level It is a full tree Note: Two nodes are on the same level , means that they have the same depth. A full binary tree is a tree in which every node other than the leaves has two children. Input Specification: Each input file contains one test case. For each case, the first line gives a positive integer N (\u226430), the total number of nodes in the binary tree. The second line gives the postorder sequence and the third line gives the inorder sequence. All the numbers in a line are no more than 103 and are separated by a space. Then another positive integer M (\u226430) is given, followed by M lines of statements. It is guaranteed that both A and B in the statements are in the tree. Output Specification: For each statement, print in a line Yes if it is correct, or No if not. Sample Input: 9 16 7 11 32 28 2 23 8 15 16 23 7 32 11 2 28 15 8 7 15 is the root 8 and 2 are siblings 32 is the parent of 11 23 is the left child of 16 28 is the right child of 2 7 and 11 are on the same level It is a full tree Sample Output: Yes No Yes No Yes Yes Yes Code //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <cassert> #include <unordered_set> #include <set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; typedef long long ll; struct Node { int data, depth; Node *l = nullptr, *r = nullptr, *p = nullptr; Node(int _data = 0, int _depth = 0) : data(_data), depth(_depth) {} }; const int MAX_N = 40; int post[MAX_N], in[MAX_N]; const int DATA_MAX = 1e3 + 10; Node *info[DATA_MAX]; bool full = true; Node *buildTree(int inL, int inR, int postL, int postR, int depth, Node *p) { if (inL > inR) return nullptr; int t = post[postR], i; for (i = inL; i <= inR; ++i) { if (in[i] == t) break; } Node *node = new Node(t, depth); info[t] = node; node->p = p; node->l = buildTree(inL, i - 1, postL, postL + i - 1 - inL, depth + 1, node); node->r = buildTree(i + 1, inR, postL + i - inL, postR - 1, depth + 1, node); if ((node->l && !node->r) || (!node->l && node->r)) full = false; return node; } Node *root; inline bool check(string &mstr) { char t = mstr.back(); int a, b; if (isdigit(t)) { if (mstr.find(\"pa\") != mstr.npos) { sscanf(mstr.c_str(), \"%d is the parent of %d\", &a, &b); if (info[b]->p == info[a]) return true; return false; } else if (mstr.find(\"le\") != mstr.npos) { sscanf(mstr.c_str(), \"%d is the left child of %d\", &a, &b); if (info[b]->l == info[a]) return true; return false; } else if (mstr.find(\"ri\") != mstr.npos) { sscanf(mstr.c_str(), \"%d is the right child of %d\", &a, &b); if (info[b]->r == info[a]) return true; return false; } assert(false); } else { switch (t) { case 't': sscanf(mstr.c_str(), \"%d\", &a); if (root->data != a) return false; return true; case 's': sscanf(mstr.c_str(), \"%d and %d\", &a, &b); if (info[a]->p == info[b]->p) return true; return false; case 'l': sscanf(mstr.c_str(), \"%d and %d\", &a, &b); if (info[a]->depth == info[b]->depth) return true; return false; case 'e': if (full) return true; return false; default: assert(false); } } return 0; } int N, M; inline void tMain() { // ios::sync_with_stdio(false); // cin.tie(nullptr); cin >> N; for (int i = 0; i < N; ++i) { cin >> post[i]; } for (int i = 0; i < N; ++i) { cin >> in[i]; } root = buildTree(0, N - 1, 0, N - 1, 0, root); cin >> M; getchar(); string mstr; while (M--) { getline(cin, mstr); if (check(mstr)) cout << \"Yes\\n\"; else cout << \"No\\n\"; } } int main() { #ifdef mytest test.run(); freopen(\"../main.out\", \"w\", stdout); freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Structure of a Binary Tree"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1159%20Structure%20of%20a%20Binary%20Tree/#structure-of-a-binary-tree","text":"Suppose that all the keys in a binary tree are distinct positive integers. Given the postorder and inorder traversal sequences, a binary tree can be uniquely determined. Now given a sequence of statements about the structure of the resulting tree, you are supposed to tell if they are correct or not. A statment is one of the following: A is the root A and B are siblings A is the parent of B A is the left child of B A is the right child of B A and B are on the same level It is a full tree Note: Two nodes are on the same level , means that they have the same depth. A full binary tree is a tree in which every node other than the leaves has two children.","title":"Structure of a Binary Tree"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1159%20Structure%20of%20a%20Binary%20Tree/#input-specification","text":"Each input file contains one test case. For each case, the first line gives a positive integer N (\u226430), the total number of nodes in the binary tree. The second line gives the postorder sequence and the third line gives the inorder sequence. All the numbers in a line are no more than 103 and are separated by a space. Then another positive integer M (\u226430) is given, followed by M lines of statements. It is guaranteed that both A and B in the statements are in the tree.","title":"Input Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1159%20Structure%20of%20a%20Binary%20Tree/#output-specification","text":"For each statement, print in a line Yes if it is correct, or No if not.","title":"Output Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1159%20Structure%20of%20a%20Binary%20Tree/#sample-input","text":"9 16 7 11 32 28 2 23 8 15 16 23 7 32 11 2 28 15 8 7 15 is the root 8 and 2 are siblings 32 is the parent of 11 23 is the left child of 16 28 is the right child of 2 7 and 11 are on the same level It is a full tree","title":"Sample Input:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1159%20Structure%20of%20a%20Binary%20Tree/#sample-output","text":"Yes No Yes No Yes Yes Yes","title":"Sample Output:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1159%20Structure%20of%20a%20Binary%20Tree/#code","text":"//#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <cassert> #include <unordered_set> #include <set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; typedef long long ll; struct Node { int data, depth; Node *l = nullptr, *r = nullptr, *p = nullptr; Node(int _data = 0, int _depth = 0) : data(_data), depth(_depth) {} }; const int MAX_N = 40; int post[MAX_N], in[MAX_N]; const int DATA_MAX = 1e3 + 10; Node *info[DATA_MAX]; bool full = true; Node *buildTree(int inL, int inR, int postL, int postR, int depth, Node *p) { if (inL > inR) return nullptr; int t = post[postR], i; for (i = inL; i <= inR; ++i) { if (in[i] == t) break; } Node *node = new Node(t, depth); info[t] = node; node->p = p; node->l = buildTree(inL, i - 1, postL, postL + i - 1 - inL, depth + 1, node); node->r = buildTree(i + 1, inR, postL + i - inL, postR - 1, depth + 1, node); if ((node->l && !node->r) || (!node->l && node->r)) full = false; return node; } Node *root; inline bool check(string &mstr) { char t = mstr.back(); int a, b; if (isdigit(t)) { if (mstr.find(\"pa\") != mstr.npos) { sscanf(mstr.c_str(), \"%d is the parent of %d\", &a, &b); if (info[b]->p == info[a]) return true; return false; } else if (mstr.find(\"le\") != mstr.npos) { sscanf(mstr.c_str(), \"%d is the left child of %d\", &a, &b); if (info[b]->l == info[a]) return true; return false; } else if (mstr.find(\"ri\") != mstr.npos) { sscanf(mstr.c_str(), \"%d is the right child of %d\", &a, &b); if (info[b]->r == info[a]) return true; return false; } assert(false); } else { switch (t) { case 't': sscanf(mstr.c_str(), \"%d\", &a); if (root->data != a) return false; return true; case 's': sscanf(mstr.c_str(), \"%d and %d\", &a, &b); if (info[a]->p == info[b]->p) return true; return false; case 'l': sscanf(mstr.c_str(), \"%d and %d\", &a, &b); if (info[a]->depth == info[b]->depth) return true; return false; case 'e': if (full) return true; return false; default: assert(false); } } return 0; } int N, M; inline void tMain() { // ios::sync_with_stdio(false); // cin.tie(nullptr); cin >> N; for (int i = 0; i < N; ++i) { cin >> post[i]; } for (int i = 0; i < N; ++i) { cin >> in[i]; } root = buildTree(0, N - 1, 0, N - 1, 0, root); cin >> M; getchar(); string mstr; while (M--) { getline(cin, mstr); if (check(mstr)) cout << \"Yes\\n\"; else cout << \"No\\n\"; } } int main() { #ifdef mytest test.run(); freopen(\"../main.out\", \"w\", stdout); freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1160%20Forever/","text":"1160 Forever \"Forever number\" is a positive integer A with K digits, satisfying the following constrains: the sum of all the digits of A is m; the sum of all the digits of A+1 is n; and the greatest common divisor of m and n is a prime number which is greater than 2. Now you are supposed to find these forever numbers. Input Specification: Each input file contains one test case. For each test case, the first line contains a positive integer N (\u22645). Then N lines follow, each gives a pair of K (3<K<10) and m (1<m<90), of which the meanings are given in the problem description. Output Specification: For each pair of K and m, first print in a line Case X , where X is the case index (starts from 1). Then print n and A in the following line. The numbers must be separated by a space. If the solution is not unique, output in the ascending order of n. If still not unique, output in the ascending order of A. If there is no solution, output No Solution . Sample Input: 2 6 45 7 80 Sample Output: Case 1 10 189999 10 279999 10 369999 10 459999 10 549999 10 639999 10 729999 10 819999 10 909999 Case 2 No Solution Code //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <cassert> #include <unordered_set> #include <set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; typedef long long ll; typedef pair<int, int> pp; int T, K, M; inline int sum(int e) { int sum = 0; while (e != 0) { sum += e % 10; e /= 10; } return sum; } inline bool isPrime(int a) { if (a <= 2) return false; for (int i = 2; i * i <= a; ++i) { if (a % i == 0) return false; } return true; } int gcd(int a, int b) { if (b == 0) return a; else return gcd(b, a % b); } string mstr; vector<pp> ans; void dfs(int rest, int n) { mstr.push_back(n + '0'); int l = mstr.size(); if (l < K) { for (int i = 0; i <= 9; ++i) { if ((K - l) * 9 >= rest) { dfs(rest - i, i); } } } else if (rest == 0){ int m = stoi(mstr); int N = sum(m + 1); if (isPrime(gcd(N, M))) { ans.emplace_back(N, m); } } mstr.pop_back(); } inline void tMain() { cin >> T; for (int t = 1; t <= T; ++t) { scanf(\"%d%d\", &K, &M); printf(\"Case %d\\n\", t); ans.clear(); for (int i = 1; i <= 9; ++i) { dfs(M - i, i); } if (ans.empty()) puts(\"No Solution\"); else { sort(ans.begin(), ans.end(), [](pp &a, pp &b) { if (a.first != b.first) return a.first < b.first; else return a.second < b.second; }); for (auto &j : ans) { printf(\"%d %d\\n\", j.first, j.second); } } } } int main() { #ifdef mytest test.run(); freopen(\"../main.out\", \"w\", stdout); freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"1160 Forever"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1160%20Forever/#1160-forever","text":"\"Forever number\" is a positive integer A with K digits, satisfying the following constrains: the sum of all the digits of A is m; the sum of all the digits of A+1 is n; and the greatest common divisor of m and n is a prime number which is greater than 2. Now you are supposed to find these forever numbers.","title":"1160 Forever"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1160%20Forever/#input-specification","text":"Each input file contains one test case. For each test case, the first line contains a positive integer N (\u22645). Then N lines follow, each gives a pair of K (3<K<10) and m (1<m<90), of which the meanings are given in the problem description.","title":"Input Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1160%20Forever/#output-specification","text":"For each pair of K and m, first print in a line Case X , where X is the case index (starts from 1). Then print n and A in the following line. The numbers must be separated by a space. If the solution is not unique, output in the ascending order of n. If still not unique, output in the ascending order of A. If there is no solution, output No Solution .","title":"Output Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1160%20Forever/#sample-input","text":"2 6 45 7 80","title":"Sample Input:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1160%20Forever/#sample-output","text":"Case 1 10 189999 10 279999 10 369999 10 459999 10 549999 10 639999 10 729999 10 819999 10 909999 Case 2 No Solution","title":"Sample Output:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1160%20Forever/#code","text":"//#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <cassert> #include <unordered_set> #include <set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; typedef long long ll; typedef pair<int, int> pp; int T, K, M; inline int sum(int e) { int sum = 0; while (e != 0) { sum += e % 10; e /= 10; } return sum; } inline bool isPrime(int a) { if (a <= 2) return false; for (int i = 2; i * i <= a; ++i) { if (a % i == 0) return false; } return true; } int gcd(int a, int b) { if (b == 0) return a; else return gcd(b, a % b); } string mstr; vector<pp> ans; void dfs(int rest, int n) { mstr.push_back(n + '0'); int l = mstr.size(); if (l < K) { for (int i = 0; i <= 9; ++i) { if ((K - l) * 9 >= rest) { dfs(rest - i, i); } } } else if (rest == 0){ int m = stoi(mstr); int N = sum(m + 1); if (isPrime(gcd(N, M))) { ans.emplace_back(N, m); } } mstr.pop_back(); } inline void tMain() { cin >> T; for (int t = 1; t <= T; ++t) { scanf(\"%d%d\", &K, &M); printf(\"Case %d\\n\", t); ans.clear(); for (int i = 1; i <= 9; ++i) { dfs(M - i, i); } if (ans.empty()) puts(\"No Solution\"); else { sort(ans.begin(), ans.end(), [](pp &a, pp &b) { if (a.first != b.first) return a.first < b.first; else return a.second < b.second; }); for (auto &j : ans) { printf(\"%d %d\\n\", j.first, j.second); } } } } int main() { #ifdef mytest test.run(); freopen(\"../main.out\", \"w\", stdout); freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1161%20Merging%20Linked%20Lists/","text":"Merging Linked Lists Given two singly linked lists L1\u200b=a1\u200b\u2192a2\u200b\u2192\u22ef\u2192an\u22121\u200b\u2192an\u200b and L2\u200b=b1\u200b\u2192b2\u200b\u2192\u22ef\u2192bm\u22121\u200b\u2192bm\u200b. If n\u22652m, you are supposed to reverse and merge the shorter one into the longer one to obtain a list like a1\u200b\u2192a2\u200b\u2192bm\u200b\u2192a3\u200b\u2192a4\u200b\u2192bm\u22121\u200b\u22ef. For example, given one list being 6\u21927 and the other one 1\u21922\u21923\u21924\u21925, you must output 1\u21922\u21927\u21923\u21924\u21926\u21925. Input Specification: Each input file contains one test case. For each case, the first line contains the two addresses of the first nodes of L1\u200b and L2\u200b, plus a positive N (\u2264105) which is the total number of nodes given. The address of a node is a 5-digit nonnegative integer, and NULL is represented by -1 . Then N lines follow, each describes a node in the format: Address Data Next where Address is the position of the node, Data is a positive integer no more than 105, and Next is the position of the next node. It is guaranteed that no list is empty, and the longer list is at least twice as long as the shorter one. Output Specification: For each case, output in order the resulting linked list. Each node occupies a line, and is printed in the same format as in the input. Sample Input: 00100 01000 7 02233 2 34891 00100 6 00001 34891 3 10086 01000 1 02233 00033 5 -1 10086 4 00033 00001 7 -1 Sample Output: 01000 1 02233 02233 2 00001 00001 7 34891 34891 3 10086 10086 4 00100 00100 6 00033 00033 5 -1 Code //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <cassert> #include <unordered_set> #include <set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; const int MAX_N = 1e6 + 10; struct Node { int address, data, next = -1; }; Node mem[MAX_N]; inline void merge(int root, stack<int> &st) { int p = mem[root].next; while (!st.empty()) { int next = mem[p].next; mem[p].next = st.top(); mem[st.top()].next = next; if (next != -1) p = mem[next].next; st.pop(); } } inline void printLst(int root) { for (int p = root; p != -1; ) { printf(\"%05d %d \", p, mem[p].data, mem[p].next); p = mem[p].next; if (p != -1) printf(\"%05d\\n\", p); else puts(\"-1\"); } } inline void tMain() { int root, root1, M; scanf(\"%d%d%d\", &root, &root1, &M); int address, data, next; stack<int> st, st1; while (M--) { scanf(\"%d\", &address); scanf(\"%d%d\", &mem[address].data, &mem[address].next); } for (int p = root; p != -1; p = mem[p].next) { st.push(p); } for (int p = root1; p != -1; p = mem[p].next) { st1.push(p); } if (st.size() > st1.size()) { merge(root, st1); printLst(root); } else { merge(root1, st); printLst(root1); } } int main() { #ifdef mytest test.run(); freopen(\"../main.out\", \"w\", stdout); freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Merging Linked Lists"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1161%20Merging%20Linked%20Lists/#merging-linked-lists","text":"Given two singly linked lists L1\u200b=a1\u200b\u2192a2\u200b\u2192\u22ef\u2192an\u22121\u200b\u2192an\u200b and L2\u200b=b1\u200b\u2192b2\u200b\u2192\u22ef\u2192bm\u22121\u200b\u2192bm\u200b. If n\u22652m, you are supposed to reverse and merge the shorter one into the longer one to obtain a list like a1\u200b\u2192a2\u200b\u2192bm\u200b\u2192a3\u200b\u2192a4\u200b\u2192bm\u22121\u200b\u22ef. For example, given one list being 6\u21927 and the other one 1\u21922\u21923\u21924\u21925, you must output 1\u21922\u21927\u21923\u21924\u21926\u21925.","title":"Merging Linked Lists"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1161%20Merging%20Linked%20Lists/#input-specification","text":"Each input file contains one test case. For each case, the first line contains the two addresses of the first nodes of L1\u200b and L2\u200b, plus a positive N (\u2264105) which is the total number of nodes given. The address of a node is a 5-digit nonnegative integer, and NULL is represented by -1 . Then N lines follow, each describes a node in the format: Address Data Next where Address is the position of the node, Data is a positive integer no more than 105, and Next is the position of the next node. It is guaranteed that no list is empty, and the longer list is at least twice as long as the shorter one.","title":"Input Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1161%20Merging%20Linked%20Lists/#output-specification","text":"For each case, output in order the resulting linked list. Each node occupies a line, and is printed in the same format as in the input.","title":"Output Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1161%20Merging%20Linked%20Lists/#sample-input","text":"00100 01000 7 02233 2 34891 00100 6 00001 34891 3 10086 01000 1 02233 00033 5 -1 10086 4 00033 00001 7 -1","title":"Sample Input:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1161%20Merging%20Linked%20Lists/#sample-output","text":"01000 1 02233 02233 2 00001 00001 7 34891 34891 3 10086 10086 4 00100 00100 6 00033 00033 5 -1","title":"Sample Output:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1161%20Merging%20Linked%20Lists/#code","text":"//#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <cassert> #include <unordered_set> #include <set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; const int MAX_N = 1e6 + 10; struct Node { int address, data, next = -1; }; Node mem[MAX_N]; inline void merge(int root, stack<int> &st) { int p = mem[root].next; while (!st.empty()) { int next = mem[p].next; mem[p].next = st.top(); mem[st.top()].next = next; if (next != -1) p = mem[next].next; st.pop(); } } inline void printLst(int root) { for (int p = root; p != -1; ) { printf(\"%05d %d \", p, mem[p].data, mem[p].next); p = mem[p].next; if (p != -1) printf(\"%05d\\n\", p); else puts(\"-1\"); } } inline void tMain() { int root, root1, M; scanf(\"%d%d%d\", &root, &root1, &M); int address, data, next; stack<int> st, st1; while (M--) { scanf(\"%d\", &address); scanf(\"%d%d\", &mem[address].data, &mem[address].next); } for (int p = root; p != -1; p = mem[p].next) { st.push(p); } for (int p = root1; p != -1; p = mem[p].next) { st1.push(p); } if (st.size() > st1.size()) { merge(root, st1); printLst(root); } else { merge(root1, st); printLst(root1); } } int main() { #ifdef mytest test.run(); freopen(\"../main.out\", \"w\", stdout); freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1162%20Postfix%20Expression/","text":"Postfix Expression Given a syntax tree (binary), you are supposed to output the corresponding postfix expression, with parentheses reflecting the precedences of the operators. Input Specification: Each input file contains one test case. For each case, the first line gives a positive integer N (\u2264 20) which is the total number of nodes in the syntax tree. Then N lines follow, each gives the information of a node (the i-th line corresponds to the i-th node) in the format: data left_child right_child where data is a string of no more than 10 characters, left_child and right_child are the indices of this node's left and right children, respectively. The nodes are indexed from 1 to N. The NULL link is represented by \u22121. The figures 1 and 2 correspond to the samples 1 and 2, respectively. Figure 1 Figure 2 Output Specification: For each case, print in a line the postfix expression, with parentheses reflecting the precedences of the operators.There must be no space between any symbols. Sample Input 1: 8 * 8 7 a -1 -1 * 4 1 + 2 5 b -1 -1 d -1 -1 - -1 6 c -1 -1 Sample Output 1: (((a)(b)+)((c)(-(d))*)*) Sample Input 2: 8 2.35 -1 -1 * 6 1 - -1 4 % 7 8 + 2 3 a -1 -1 str -1 -1 871 -1 -1 Sample Output 2: (((a)(2.35)*)(-((str)(871)%))+) Code //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <cassert> #include <unordered_set> #include <set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; const int MAX_N = 30; struct Node { string data; int l, r; }; Node tree[MAX_N]; bool visit[MAX_N]; int N; void dfs(int cur) { int l = tree[cur].l, r = tree[cur].r; if (l == -1 && r != -1) { putchar('('); cout << tree[cur].data; dfs(r); putchar(')'); } else { putchar('('); if (l != -1) dfs(l); if (r != -1) dfs(r); cout << tree[cur].data; putchar(')'); } } inline void tMain() { cin >> N; string mstr; int l, r; for (int i = 1; i <= N; ++i) { cin >> tree[i].data >> tree[i].l >> tree[i].r; int k = tree[i].l; if (k != -1) visit[k] = true; k = tree[i].r; if (k != -1) visit[k] = true; } int root = 1; for (int i = 1; i <= N; ++i) { if (!visit[i]) { root = i; break; } } dfs(root); putchar(10); } int main() { #ifdef mytest test.run(); freopen(\"../main.out\", \"w\", stdout); freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Postfix Expression"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1162%20Postfix%20Expression/#postfix-expression","text":"Given a syntax tree (binary), you are supposed to output the corresponding postfix expression, with parentheses reflecting the precedences of the operators.","title":"Postfix Expression"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1162%20Postfix%20Expression/#input-specification","text":"Each input file contains one test case. For each case, the first line gives a positive integer N (\u2264 20) which is the total number of nodes in the syntax tree. Then N lines follow, each gives the information of a node (the i-th line corresponds to the i-th node) in the format: data left_child right_child where data is a string of no more than 10 characters, left_child and right_child are the indices of this node's left and right children, respectively. The nodes are indexed from 1 to N. The NULL link is represented by \u22121. The figures 1 and 2 correspond to the samples 1 and 2, respectively. Figure 1 Figure 2","title":"Input Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1162%20Postfix%20Expression/#output-specification","text":"For each case, print in a line the postfix expression, with parentheses reflecting the precedences of the operators.There must be no space between any symbols.","title":"Output Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1162%20Postfix%20Expression/#sample-input-1","text":"8 * 8 7 a -1 -1 * 4 1 + 2 5 b -1 -1 d -1 -1 - -1 6 c -1 -1","title":"Sample Input 1:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1162%20Postfix%20Expression/#sample-output-1","text":"(((a)(b)+)((c)(-(d))*)*)","title":"Sample Output 1:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1162%20Postfix%20Expression/#sample-input-2","text":"8 2.35 -1 -1 * 6 1 - -1 4 % 7 8 + 2 3 a -1 -1 str -1 -1 871 -1 -1","title":"Sample Input 2:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1162%20Postfix%20Expression/#sample-output-2","text":"(((a)(2.35)*)(-((str)(871)%))+)","title":"Sample Output 2:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1162%20Postfix%20Expression/#code","text":"//#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <cassert> #include <unordered_set> #include <set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; const int MAX_N = 30; struct Node { string data; int l, r; }; Node tree[MAX_N]; bool visit[MAX_N]; int N; void dfs(int cur) { int l = tree[cur].l, r = tree[cur].r; if (l == -1 && r != -1) { putchar('('); cout << tree[cur].data; dfs(r); putchar(')'); } else { putchar('('); if (l != -1) dfs(l); if (r != -1) dfs(r); cout << tree[cur].data; putchar(')'); } } inline void tMain() { cin >> N; string mstr; int l, r; for (int i = 1; i <= N; ++i) { cin >> tree[i].data >> tree[i].l >> tree[i].r; int k = tree[i].l; if (k != -1) visit[k] = true; k = tree[i].r; if (k != -1) visit[k] = true; } int root = 1; for (int i = 1; i <= N; ++i) { if (!visit[i]) { root = i; break; } } dfs(root); putchar(10); } int main() { #ifdef mytest test.run(); freopen(\"../main.out\", \"w\", stdout); freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1163%20Dijkstra%20Sequence/","text":"Dijkstra Sequence Dijkstra's algorithm is one of the very famous greedy algorithms. It is used for solving the single source shortest path problem which gives the shortest paths from one particular source vertex to all the other vertices of the given graph. It was conceived by computer scientist Edsger W. Dijkstra in 1956 and published three years later. In this algorithm, a set contains vertices included in shortest path tree is maintained. During each step, we find one vertex which is not yet included and has a minimum distance from the source, and collect it into the set. Hence step by step an ordered sequence of vertices, let's call it Dijkstra sequence , is generated by Dijkstra's algorithm. On the other hand, for a given graph, there could be more than one Dijkstra sequence. For example, both { 5, 1, 3, 4, 2 } and { 5, 3, 1, 2, 4 } are Dijkstra sequences for the graph, where 5 is the source. Your job is to check whether a given sequence is Dijkstra sequence or not. Input Specification: Each input file contains one test case. For each case, the first line contains two positive integers Nv\u200b (\u2264103) and Ne\u200b (\u2264105), which are the total numbers of vertices and edges, respectively. Hence the vertices are numbered from 1 to Nv\u200b. Then Ne\u200b lines follow, each describes an edge by giving the indices of the vertices at the two ends, followed by a positive integer weight (\u2264100) of the edge. It is guaranteed that the given graph is connected. Finally the number of queries, K, is given as a positive integer no larger than 100, followed by K lines of sequences, each contains a permutationof the Nv\u200b vertices. It is assumed that the first vertex is the source for each sequence. All the inputs in a line are separated by a space. Output Specification: For each of the K sequences, print in a line Yes if it is a Dijkstra sequence, or No if not. Sample Input: 5 7 1 2 2 1 5 1 2 3 1 2 4 1 2 5 2 3 5 1 3 4 1 4 5 1 3 4 2 5 3 1 2 4 2 3 4 5 1 3 2 1 5 4 Sample Output: Yes Yes Yes No Code //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <cassert> #include <unordered_set> #include <set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; const int MAX_N = 1e3 + 10; const int INF = 0x3f3f3f3f; bool done[MAX_N]; int d[MAX_N], N, M; int seq[MAX_N]; int g[MAX_N][MAX_N]; bool dijkstra(int s) { memset(d, 0x3f, sizeof(d)); memset(done, 0, sizeof(done)); d[s] = 0; for (int i = 1; i <= N; ++i) { int min = INF; for (int j = 1; j <= N; ++j) { if (!done[j] && d[j] < min) { min = d[j]; } } if (d[seq[i]] != min) return false; int u = seq[i]; // printf(\"%d \", u); done[u] = true; for (int v = 1; v <= N; ++v) { if (g[u][v] && d[u] + g[u][v] < d[v]) { d[v] = d[u] + g[u][v]; } } } return true; } inline void tMain() { cin >> N >> M; int a, b, w; while (M--) { scanf(\"%d%d%d\", &a, &b, &w); g[a][b] = g[b][a] = w; } int K; cin >> K; while (K--) { for (int i = 1; i <= N; ++i) { scanf(\"%d\", &seq[i]); } if (dijkstra(seq[1])) puts(\"Yes\"); else puts(\"No\"); } } int main() { #ifdef mytest test.run(); freopen(\"../main.out\", \"w\", stdout); freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Dijkstra Sequence"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1163%20Dijkstra%20Sequence/#dijkstra-sequence","text":"Dijkstra's algorithm is one of the very famous greedy algorithms. It is used for solving the single source shortest path problem which gives the shortest paths from one particular source vertex to all the other vertices of the given graph. It was conceived by computer scientist Edsger W. Dijkstra in 1956 and published three years later. In this algorithm, a set contains vertices included in shortest path tree is maintained. During each step, we find one vertex which is not yet included and has a minimum distance from the source, and collect it into the set. Hence step by step an ordered sequence of vertices, let's call it Dijkstra sequence , is generated by Dijkstra's algorithm. On the other hand, for a given graph, there could be more than one Dijkstra sequence. For example, both { 5, 1, 3, 4, 2 } and { 5, 3, 1, 2, 4 } are Dijkstra sequences for the graph, where 5 is the source. Your job is to check whether a given sequence is Dijkstra sequence or not.","title":"Dijkstra Sequence"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1163%20Dijkstra%20Sequence/#input-specification","text":"Each input file contains one test case. For each case, the first line contains two positive integers Nv\u200b (\u2264103) and Ne\u200b (\u2264105), which are the total numbers of vertices and edges, respectively. Hence the vertices are numbered from 1 to Nv\u200b. Then Ne\u200b lines follow, each describes an edge by giving the indices of the vertices at the two ends, followed by a positive integer weight (\u2264100) of the edge. It is guaranteed that the given graph is connected. Finally the number of queries, K, is given as a positive integer no larger than 100, followed by K lines of sequences, each contains a permutationof the Nv\u200b vertices. It is assumed that the first vertex is the source for each sequence. All the inputs in a line are separated by a space.","title":"Input Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1163%20Dijkstra%20Sequence/#output-specification","text":"For each of the K sequences, print in a line Yes if it is a Dijkstra sequence, or No if not.","title":"Output Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1163%20Dijkstra%20Sequence/#sample-input","text":"5 7 1 2 2 1 5 1 2 3 1 2 4 1 2 5 2 3 5 1 3 4 1 4 5 1 3 4 2 5 3 1 2 4 2 3 4 5 1 3 2 1 5 4","title":"Sample Input:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1163%20Dijkstra%20Sequence/#sample-output","text":"Yes Yes Yes No","title":"Sample Output:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1163%20Dijkstra%20Sequence/#code","text":"//#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <cassert> #include <unordered_set> #include <set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; const int MAX_N = 1e3 + 10; const int INF = 0x3f3f3f3f; bool done[MAX_N]; int d[MAX_N], N, M; int seq[MAX_N]; int g[MAX_N][MAX_N]; bool dijkstra(int s) { memset(d, 0x3f, sizeof(d)); memset(done, 0, sizeof(done)); d[s] = 0; for (int i = 1; i <= N; ++i) { int min = INF; for (int j = 1; j <= N; ++j) { if (!done[j] && d[j] < min) { min = d[j]; } } if (d[seq[i]] != min) return false; int u = seq[i]; // printf(\"%d \", u); done[u] = true; for (int v = 1; v <= N; ++v) { if (g[u][v] && d[u] + g[u][v] < d[v]) { d[v] = d[u] + g[u][v]; } } } return true; } inline void tMain() { cin >> N >> M; int a, b, w; while (M--) { scanf(\"%d%d%d\", &a, &b, &w); g[a][b] = g[b][a] = w; } int K; cin >> K; while (K--) { for (int i = 1; i <= N; ++i) { scanf(\"%d\", &seq[i]); } if (dijkstra(seq[1])) puts(\"Yes\"); else puts(\"No\"); } } int main() { #ifdef mytest test.run(); freopen(\"../main.out\", \"w\", stdout); freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1164%20Good%20in%20C/","text":"1164 Good in C When your interviewer asks you to write \"Hello World\" using C, can you do as the following figure shows? Input Specification: Each input file contains one test case. For each case, the first part gives the 26 capital English letters A-Z, each in a 7\u00d75 matrix of C 's and . 's. Then a sentence is given in a line, ended by a return. The sentence is formed by several words (no more than 10 continuous capital English letters each), and the words are separated by any characters other than capital English letters. It is guaranteed that there is at least one word given. Output Specification: For each word, print the matrix form of each of its letters in a line, and the letters must be separated by exactly one column of space. There must be no extra space at the beginning or the end of the word. Between two adjacent words, there must be a single empty line to separate them. There must be no extra line at the beginning or the end of the output. Sample Input: ..C.. .C.C. C...C CCCCC C...C C...C C...C CCCC. C...C C...C CCCC. C...C C...C CCCC. .CCC. C...C C.... C.... C.... C...C .CCC. CCCC. C...C C...C C...C C...C C...C CCCC. CCCCC C.... C.... CCCC. C.... C.... CCCCC CCCCC C.... C.... CCCC. C.... C.... C.... CCCC. C...C C.... C.CCC C...C C...C CCCC. C...C C...C C...C CCCCC C...C C...C C...C CCCCC ..C.. ..C.. ..C.. ..C.. ..C.. CCCCC CCCCC ....C ....C ....C ....C C...C .CCC. C...C C..C. C.C.. CC... C.C.. C..C. C...C C.... C.... C.... C.... C.... C.... CCCCC C...C C...C CC.CC C.C.C C...C C...C C...C C...C C...C CC..C C.C.C C..CC C...C C...C .CCC. C...C C...C C...C C...C C...C .CCC. CCCC. C...C C...C CCCC. C.... C.... C.... .CCC. C...C C...C C...C C.C.C C..CC .CCC. CCCC. C...C CCCC. CC... C.C.. C..C. C...C .CCC. C...C C.... .CCC. ....C C...C .CCC. CCCCC ..C.. ..C.. ..C.. ..C.. ..C.. ..C.. C...C C...C C...C C...C C...C C...C .CCC. C...C C...C C...C C...C C...C .C.C. ..C.. C...C C...C C...C C.C.C CC.CC C...C C...C C...C C...C .C.C. ..C.. .C.C. C...C C...C C...C C...C .C.C. ..C.. ..C.. ..C.. ..C.. CCCCC ....C ...C. ..C.. .C... C.... CCCCC HELLO~WORLD! Sample Output: C...C CCCCC C.... C.... .CCC. C...C C.... C.... C.... C...C C...C C.... C.... C.... C...C CCCCC CCCC. C.... C.... C...C C...C C.... C.... C.... C...C C...C C.... C.... C.... C...C C...C CCCCC CCCCC CCCCC .CCC. C...C .CCC. CCCC. C.... CCCC. C...C C...C C...C C.... C...C C...C C...C CCCC. C.... C...C C.C.C C...C CC... C.... C...C CC.CC C...C C.C.. C.... C...C C...C C...C C..C. C.... C...C C...C .CCC. C...C CCCCC CCCC. Code //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <cassert> #include <unordered_set> #include <set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; char letter[26][7][5]; void printWord(string &mstr) { int l = mstr.size(); for (int k = 0; k < 7; ++k) { for (int i = 0; i < l; ++i) { int c = mstr[i] - 'A'; for (int j = 0; j < 5; ++j) { putchar(letter[c][k][j]); } if (i == l - 1) putchar('\\n'); else putchar(' '); } } } inline int findOther(int i, string &mstr) { int l = mstr.size(); while (i < l && 'A' <= mstr[i] && mstr[i] <= 'Z') ++i; if (i == l) return -1; else return i; } inline int findCap(int i, string &mstr) { int l = mstr.size(); while (i < l && ('Z' < mstr[i] || mstr[i] < 'A')) ++i; if (i == l) return -1; else return i; } inline void tMain() { for (int i = 0; i < 26; ++i) { for (int j = 0; j < 7; ++j) { for (int k = 0; k < 6; ++k) { if (k != 5) { letter[i][j][k] = getchar(); } else getchar(); } } } string mstr; getline(cin, mstr); int i = findCap(0, mstr), j = 0; while (i != -1) { j = findOther(i, mstr); string t; if (j != -1) { t = mstr.substr(i, j - i); } else { t = mstr.substr(i, mstr.size()); printWord(t); break; } printWord(t); i = findCap(j, mstr); if (i != -1) putchar(10); } } int main() { #ifdef mytest test.run(); freopen(\"../main.out\", \"w\", stdout); freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"1164 Good in C"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1164%20Good%20in%20C/#1164-good-in-c","text":"When your interviewer asks you to write \"Hello World\" using C, can you do as the following figure shows?","title":"1164 Good in C"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1164%20Good%20in%20C/#input-specification","text":"Each input file contains one test case. For each case, the first part gives the 26 capital English letters A-Z, each in a 7\u00d75 matrix of C 's and . 's. Then a sentence is given in a line, ended by a return. The sentence is formed by several words (no more than 10 continuous capital English letters each), and the words are separated by any characters other than capital English letters. It is guaranteed that there is at least one word given.","title":"Input Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1164%20Good%20in%20C/#output-specification","text":"For each word, print the matrix form of each of its letters in a line, and the letters must be separated by exactly one column of space. There must be no extra space at the beginning or the end of the word. Between two adjacent words, there must be a single empty line to separate them. There must be no extra line at the beginning or the end of the output.","title":"Output Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1164%20Good%20in%20C/#sample-input","text":"..C.. .C.C. C...C CCCCC C...C C...C C...C CCCC. C...C C...C CCCC. C...C C...C CCCC. .CCC. C...C C.... C.... C.... C...C .CCC. CCCC. C...C C...C C...C C...C C...C CCCC. CCCCC C.... C.... CCCC. C.... C.... CCCCC CCCCC C.... C.... CCCC. C.... C.... C.... CCCC. C...C C.... C.CCC C...C C...C CCCC. C...C C...C C...C CCCCC C...C C...C C...C CCCCC ..C.. ..C.. ..C.. ..C.. ..C.. CCCCC CCCCC ....C ....C ....C ....C C...C .CCC. C...C C..C. C.C.. CC... C.C.. C..C. C...C C.... C.... C.... C.... C.... C.... CCCCC C...C C...C CC.CC C.C.C C...C C...C C...C C...C C...C CC..C C.C.C C..CC C...C C...C .CCC. C...C C...C C...C C...C C...C .CCC. CCCC. C...C C...C CCCC. C.... C.... C.... .CCC. C...C C...C C...C C.C.C C..CC .CCC. CCCC. C...C CCCC. CC... C.C.. C..C. C...C .CCC. C...C C.... .CCC. ....C C...C .CCC. CCCCC ..C.. ..C.. ..C.. ..C.. ..C.. ..C.. C...C C...C C...C C...C C...C C...C .CCC. C...C C...C C...C C...C C...C .C.C. ..C.. C...C C...C C...C C.C.C CC.CC C...C C...C C...C C...C .C.C. ..C.. .C.C. C...C C...C C...C C...C .C.C. ..C.. ..C.. ..C.. ..C.. CCCCC ....C ...C. ..C.. .C... C.... CCCCC HELLO~WORLD!","title":"Sample Input:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1164%20Good%20in%20C/#sample-output","text":"C...C CCCCC C.... C.... .CCC. C...C C.... C.... C.... C...C C...C C.... C.... C.... C...C CCCCC CCCC. C.... C.... C...C C...C C.... C.... C.... C...C C...C C.... C.... C.... C...C C...C CCCCC CCCCC CCCCC .CCC. C...C .CCC. CCCC. C.... CCCC. C...C C...C C...C C.... C...C C...C C...C CCCC. C.... C...C C.C.C C...C CC... C.... C...C CC.CC C...C C.C.. C.... C...C C...C C...C C..C. C.... C...C C...C .CCC. C...C CCCCC CCCC.","title":"Sample Output:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1164%20Good%20in%20C/#code","text":"//#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <cassert> #include <unordered_set> #include <set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; char letter[26][7][5]; void printWord(string &mstr) { int l = mstr.size(); for (int k = 0; k < 7; ++k) { for (int i = 0; i < l; ++i) { int c = mstr[i] - 'A'; for (int j = 0; j < 5; ++j) { putchar(letter[c][k][j]); } if (i == l - 1) putchar('\\n'); else putchar(' '); } } } inline int findOther(int i, string &mstr) { int l = mstr.size(); while (i < l && 'A' <= mstr[i] && mstr[i] <= 'Z') ++i; if (i == l) return -1; else return i; } inline int findCap(int i, string &mstr) { int l = mstr.size(); while (i < l && ('Z' < mstr[i] || mstr[i] < 'A')) ++i; if (i == l) return -1; else return i; } inline void tMain() { for (int i = 0; i < 26; ++i) { for (int j = 0; j < 7; ++j) { for (int k = 0; k < 6; ++k) { if (k != 5) { letter[i][j][k] = getchar(); } else getchar(); } } } string mstr; getline(cin, mstr); int i = findCap(0, mstr), j = 0; while (i != -1) { j = findOther(i, mstr); string t; if (j != -1) { t = mstr.substr(i, j - i); } else { t = mstr.substr(i, mstr.size()); printWord(t); break; } printWord(t); i = findCap(j, mstr); if (i != -1) putchar(10); } } int main() { #ifdef mytest test.run(); freopen(\"../main.out\", \"w\", stdout); freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1165%20Block%20Reversing/","text":"Block Reversing Given a singly linked list L. Let us consider every K nodes as a block (if there are less than K nodes at the end of the list, the rest of the nodes are still considered as a block). Your job is to reverse all the blocks in L. For example, given L as 1\u21922\u21923\u21924\u21925\u21926\u21927\u21928 and K as 3, your output must be 7\u21928\u21924\u21925\u21926\u21921\u21922\u21923. Input Specification: Each input file contains one test case. For each case, the first line contains the address of the first node, a positive N (\u2264105) which is the total number of nodes, and a positive K (\u2264N) which is the size of a block. The address of a node is a 5-digit nonnegative integer, and NULL is represented by \u22121. Then N lines follow, each describes a node in the format: Address Data Next where Address is the position of the node, Data is an integer, and Next is the position of the next node. Output Specification: For each case, output the resulting ordered linked list. Each node occupies a line, and is printed in the same format as in the input. Sample Input: 00100 8 3 71120 7 88666 00000 4 99999 00100 1 12309 68237 6 71120 33218 3 00000 99999 5 68237 88666 8 -1 12309 2 33218 Sample Output: 71120 7 88666 88666 8 00000 00000 4 99999 99999 5 68237 68237 6 00100 00100 1 12309 12309 2 33218 33218 3 -1 Code //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <cassert> #include <unordered_set> #include <set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; const int MAX_N = 1e5 + 10; struct Node { int data, next = -1; }; Node mem[MAX_N]; int ROOT, N, K; typedef pair<int, int> pp; int blockReverse() { stack<pp> st; int i = ROOT, j = ROOT; while (i != -1) { for (int k = 0; mem[j].next != -1 && k < K - 1; ++k) { j = mem[j].next; } st.emplace(i, j); i = j = mem[j].next; } int root = st.top().first, cur = st.top().second; st.pop(); while (!st.empty()) { int next = st.top().first; mem[cur].next = next; cur = st.top().second; st.pop(); } mem[cur].next = -1; return root; } inline void tMain() { cin >> ROOT >> N >> K; int ad; for (int i = 0; i < N; ++i) { scanf(\"%d\", &ad); scanf(\"%d%d\", &mem[ad].data, &mem[ad].next); } int root = blockReverse(); for (int p = root; p != -1;) { printf(\"%05d %d \", p, mem[p].data); p = mem[p].next; if (p != -1) printf(\"%05d\\n\", p); else puts(\"-1\"); } } int main() { #ifdef mytest test.run(); freopen(\"../main.out\", \"w\", stdout); freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Block Reversing"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1165%20Block%20Reversing/#block-reversing","text":"Given a singly linked list L. Let us consider every K nodes as a block (if there are less than K nodes at the end of the list, the rest of the nodes are still considered as a block). Your job is to reverse all the blocks in L. For example, given L as 1\u21922\u21923\u21924\u21925\u21926\u21927\u21928 and K as 3, your output must be 7\u21928\u21924\u21925\u21926\u21921\u21922\u21923.","title":"Block Reversing"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1165%20Block%20Reversing/#input-specification","text":"Each input file contains one test case. For each case, the first line contains the address of the first node, a positive N (\u2264105) which is the total number of nodes, and a positive K (\u2264N) which is the size of a block. The address of a node is a 5-digit nonnegative integer, and NULL is represented by \u22121. Then N lines follow, each describes a node in the format: Address Data Next where Address is the position of the node, Data is an integer, and Next is the position of the next node.","title":"Input Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1165%20Block%20Reversing/#output-specification","text":"For each case, output the resulting ordered linked list. Each node occupies a line, and is printed in the same format as in the input.","title":"Output Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1165%20Block%20Reversing/#sample-input","text":"00100 8 3 71120 7 88666 00000 4 99999 00100 1 12309 68237 6 71120 33218 3 00000 99999 5 68237 88666 8 -1 12309 2 33218","title":"Sample Input:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1165%20Block%20Reversing/#sample-output","text":"71120 7 88666 88666 8 00000 00000 4 99999 99999 5 68237 68237 6 00100 00100 1 12309 12309 2 33218 33218 3 -1","title":"Sample Output:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1165%20Block%20Reversing/#code","text":"//#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <cassert> #include <unordered_set> #include <set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; const int MAX_N = 1e5 + 10; struct Node { int data, next = -1; }; Node mem[MAX_N]; int ROOT, N, K; typedef pair<int, int> pp; int blockReverse() { stack<pp> st; int i = ROOT, j = ROOT; while (i != -1) { for (int k = 0; mem[j].next != -1 && k < K - 1; ++k) { j = mem[j].next; } st.emplace(i, j); i = j = mem[j].next; } int root = st.top().first, cur = st.top().second; st.pop(); while (!st.empty()) { int next = st.top().first; mem[cur].next = next; cur = st.top().second; st.pop(); } mem[cur].next = -1; return root; } inline void tMain() { cin >> ROOT >> N >> K; int ad; for (int i = 0; i < N; ++i) { scanf(\"%d\", &ad); scanf(\"%d%d\", &mem[ad].data, &mem[ad].next); } int root = blockReverse(); for (int p = root; p != -1;) { printf(\"%05d %d \", p, mem[p].data); p = mem[p].next; if (p != -1) printf(\"%05d\\n\", p); else puts(\"-1\"); } } int main() { #ifdef mytest test.run(); freopen(\"../main.out\", \"w\", stdout); freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1166%20Summit/","text":"Summit A summit (\u5cf0\u4f1a) is a meeting of heads of state or government. Arranging the rest areas for the summit is not a simple job. The ideal arrangement of one area is to invite those heads so that everyone is a direct friend of everyone. Now given a set of tentative arrangements, your job is to tell the organizers whether or not each area is all set. Input Specification: Each input file contains one test case. For each case, the first line gives two positive integers N (\u2264 200), the number of heads in the summit, and M, the number of friendship relations. Then M lines follow, each gives a pair of indices of the heads who are friends to each other. The heads are indexed from 1 to N. Then there is another positive integer K (\u2264 100), and K lines of tentative arrangement of rest areas follow, each first gives a positive number L (\u2264 N), then followed by a sequence of L distinct indices of the heads. All the numbers in a line are separated by a space. Output Specification: For each of the K areas, print in a line your advice in the following format: if in this area everyone is a direct friend of everyone, and no friend is missing (that is, no one else is a direct friend of everyone in this area), print Area X is OK. . if in this area everyone is a direct friend of everyone, yet there are some other heads who may also be invited without breaking the ideal arrangement, print Area X may invite more people, such as H. where H is the smallest index of the head who may be invited. if in this area the arrangement is not an ideal one, then print Area X needs help. so the host can provide some special service to help the heads get to know each other. Here X is the index of an area, starting from 1 to K . Sample Input: 8 10 5 6 7 8 6 4 3 6 4 5 2 3 8 2 2 7 5 3 3 4 6 4 5 4 3 6 3 2 8 7 2 2 3 1 1 2 4 6 3 3 2 1 Sample Output: Area 1 is OK. Area 2 is OK. Area 3 is OK. Area 4 is OK. Area 5 may invite more people, such as 3. Area 6 needs help. Code //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <cassert> #include <unordered_set> #include <set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; const int MAX_N = 210; vector<int> g[MAX_N]; int N, M; bool check(set<int> &area) { int cnt = 0; for (auto i : area) { for (auto j : g[i]) { if (area.find(j) != area.end()){ ++cnt; } } } int n = area.size(); if (cnt == n * (n - 1)) return true; else return false; } inline void tMain() { cin >> N >> M; int u, v; while (M--) { scanf(\"%d%d\", &u, &v); g[u].push_back(v); g[v].push_back(u); } cin >> M; for (int i = 1; i <= M; ++i) { scanf(\"%d\", &u); set<int> areas; while (u--) { scanf(\"%d\", &v); areas.insert(v); } if (check(areas)) { int k = 1, l = areas.size(); bool flag = false; for (; k <= N; ++k) { if (areas.find(k) == areas.end()) { int cnt = 0; for (auto t : g[k]) { if (areas.find(t) != areas.end()) { ++cnt; } } if (cnt == l) { flag = true; break; } } } if (flag) { printf(\"Area %d may invite more people, such as %d.\\n\", i, k); } else printf(\"Area %d is OK.\\n\", i); } else printf(\"Area %d needs help.\\n\", i); } } int main() { #ifdef mytest test.run(); freopen(\"../main.out\", \"w\", stdout); freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Summit"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1166%20Summit/#summit","text":"A summit (\u5cf0\u4f1a) is a meeting of heads of state or government. Arranging the rest areas for the summit is not a simple job. The ideal arrangement of one area is to invite those heads so that everyone is a direct friend of everyone. Now given a set of tentative arrangements, your job is to tell the organizers whether or not each area is all set.","title":"Summit"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1166%20Summit/#input-specification","text":"Each input file contains one test case. For each case, the first line gives two positive integers N (\u2264 200), the number of heads in the summit, and M, the number of friendship relations. Then M lines follow, each gives a pair of indices of the heads who are friends to each other. The heads are indexed from 1 to N. Then there is another positive integer K (\u2264 100), and K lines of tentative arrangement of rest areas follow, each first gives a positive number L (\u2264 N), then followed by a sequence of L distinct indices of the heads. All the numbers in a line are separated by a space.","title":"Input Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1166%20Summit/#output-specification","text":"For each of the K areas, print in a line your advice in the following format: if in this area everyone is a direct friend of everyone, and no friend is missing (that is, no one else is a direct friend of everyone in this area), print Area X is OK. . if in this area everyone is a direct friend of everyone, yet there are some other heads who may also be invited without breaking the ideal arrangement, print Area X may invite more people, such as H. where H is the smallest index of the head who may be invited. if in this area the arrangement is not an ideal one, then print Area X needs help. so the host can provide some special service to help the heads get to know each other. Here X is the index of an area, starting from 1 to K .","title":"Output Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1166%20Summit/#sample-input","text":"8 10 5 6 7 8 6 4 3 6 4 5 2 3 8 2 2 7 5 3 3 4 6 4 5 4 3 6 3 2 8 7 2 2 3 1 1 2 4 6 3 3 2 1","title":"Sample Input:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1166%20Summit/#sample-output","text":"Area 1 is OK. Area 2 is OK. Area 3 is OK. Area 4 is OK. Area 5 may invite more people, such as 3. Area 6 needs help.","title":"Sample Output:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1166%20Summit/#code","text":"//#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <cassert> #include <unordered_set> #include <set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; const int MAX_N = 210; vector<int> g[MAX_N]; int N, M; bool check(set<int> &area) { int cnt = 0; for (auto i : area) { for (auto j : g[i]) { if (area.find(j) != area.end()){ ++cnt; } } } int n = area.size(); if (cnt == n * (n - 1)) return true; else return false; } inline void tMain() { cin >> N >> M; int u, v; while (M--) { scanf(\"%d%d\", &u, &v); g[u].push_back(v); g[v].push_back(u); } cin >> M; for (int i = 1; i <= M; ++i) { scanf(\"%d\", &u); set<int> areas; while (u--) { scanf(\"%d\", &v); areas.insert(v); } if (check(areas)) { int k = 1, l = areas.size(); bool flag = false; for (; k <= N; ++k) { if (areas.find(k) == areas.end()) { int cnt = 0; for (auto t : g[k]) { if (areas.find(t) != areas.end()) { ++cnt; } } if (cnt == l) { flag = true; break; } } } if (flag) { printf(\"Area %d may invite more people, such as %d.\\n\", i, k); } else printf(\"Area %d is OK.\\n\", i); } else printf(\"Area %d needs help.\\n\", i); } } int main() { #ifdef mytest test.run(); freopen(\"../main.out\", \"w\", stdout); freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1167%20Cartesian%20Tree/","text":"1167 Cartesian Tree A Cartesian tree is a binary tree constructed from a sequence of distinct numbers. The tree is heap-ordered, and an inorder traversal returns the original sequence. For example, given the sequence { 8, 15, 3, 4, 1, 5, 12, 10, 18, 6 }, the min-heap Cartesian tree is shown by the figure. Your job is to output the level-order traversal sequence of the min-heap Cartesian tree. Input Specification: Each input file contains one test case. Each case starts from giving a positive integer N (\u226430), and then N distinct numbers in the next line, separated by a space. All the numbers are in the range of int . Output Specification: For each test case, print in a line the level-order traversal sequence of the min-heap Cartesian tree. All the numbers in a line must be separated by exactly one space, and there must be no extra space at the beginning or the end of the line. Sample Input: 10 8 15 3 4 1 5 12 10 18 6 Sample Output: 1 3 5 8 4 6 15 10 12 18 Code //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <cassert> #include <unordered_set> #include <set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; const int MAX_N = 40; int in[MAX_N]; struct Node { int data; Node *l = nullptr, *r = nullptr; Node(int _data) : data(_data) {} }; int N; Node * buildTree(int inL, int inR) { if (inL > inR) return nullptr; int min = 0x3f3f3f3f, id = inL; for (int i = inL; i <= inR; ++i) { if (in[i] < min) { id = i; min = in[i]; } } Node * node = new Node(min); node->l = buildTree(inL, id - 1); node->r = buildTree(id + 1, inR); return node; } inline void tMain() { cin >> N; for (int i = 0; i < N; ++i) { scanf(\"%d\", &in[i]); } Node * root = buildTree(0, N - 1); queue<Node*> q; q.push(root); while (!q.empty()) { Node *t = q.front(); printf(\"%d\", t->data); q.pop(); if (t->l) q.push(t->l); if (t->r) q.push(t->r); if (!q.empty()) putchar(' '); } } int main() { #ifdef mytest test.run(); freopen(\"../main.out\", \"w\", stdout); freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"1167 Cartesian Tree"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1167%20Cartesian%20Tree/#1167-cartesian-tree","text":"A Cartesian tree is a binary tree constructed from a sequence of distinct numbers. The tree is heap-ordered, and an inorder traversal returns the original sequence. For example, given the sequence { 8, 15, 3, 4, 1, 5, 12, 10, 18, 6 }, the min-heap Cartesian tree is shown by the figure. Your job is to output the level-order traversal sequence of the min-heap Cartesian tree.","title":"1167 Cartesian Tree"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1167%20Cartesian%20Tree/#input-specification","text":"Each input file contains one test case. Each case starts from giving a positive integer N (\u226430), and then N distinct numbers in the next line, separated by a space. All the numbers are in the range of int .","title":"Input Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1167%20Cartesian%20Tree/#output-specification","text":"For each test case, print in a line the level-order traversal sequence of the min-heap Cartesian tree. All the numbers in a line must be separated by exactly one space, and there must be no extra space at the beginning or the end of the line.","title":"Output Specification:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1167%20Cartesian%20Tree/#sample-input","text":"10 8 15 3 4 1 5 12 10 18 6","title":"Sample Input:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1167%20Cartesian%20Tree/#sample-output","text":"1 3 5 8 4 6 15 10 12 18","title":"Sample Output:"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/PAT/PAT%20A1167%20Cartesian%20Tree/#code","text":"//#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <cassert> #include <unordered_set> #include <set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; const int MAX_N = 40; int in[MAX_N]; struct Node { int data; Node *l = nullptr, *r = nullptr; Node(int _data) : data(_data) {} }; int N; Node * buildTree(int inL, int inR) { if (inL > inR) return nullptr; int min = 0x3f3f3f3f, id = inL; for (int i = inL; i <= inR; ++i) { if (in[i] < min) { id = i; min = in[i]; } } Node * node = new Node(min); node->l = buildTree(inL, id - 1); node->r = buildTree(id + 1, inR); return node; } inline void tMain() { cin >> N; for (int i = 0; i < N; ++i) { scanf(\"%d\", &in[i]); } Node * root = buildTree(0, N - 1); queue<Node*> q; q.push(root); while (!q.empty()) { Node *t = q.front(); printf(\"%d\", t->data); q.pop(); if (t->l) q.push(t->l); if (t->r) q.push(t->r); if (!q.empty()) putchar(' '); } } int main() { #ifdef mytest test.run(); freopen(\"../main.out\", \"w\", stdout); freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/poj%201270/","text":"Following Orders Description Order is an important concept in mathematics and in computer science. For example, Zorn's Lemma states: ``a partially ordered set in which every chain has an upper bound contains a maximal element.'' Order is also important in reasoning about the fix-point semantics of programs. This problem involves neither Zorn's Lemma nor fix-point semantics, but does involve order. Given a list of variable constraints of the form x < y, you are to write a program that prints all orderings of the variables that are consistent with the constraints. For example, given the constraints x < y and x < z there are two orderings of the variables x, y, and z that are consistent with these constraints: x y z and x z y. Input The input consists of a sequence of constraint specifications. A specification consists of two lines: a list of variables on one line followed by a list of contraints on the next line. A constraint is given by a pair of variables, where x y indicates that x < y. All variables are single character, lower-case letters. There will be at least two variables, and no more than 20 variables in a specification. There will be at least one constraint, and no more than 50 constraints in a specification. There will be at least one, and no more than 300 orderings consistent with the contraints in a specification. Input is terminated by end-of-file. Output For each constraint specification, all orderings consistent with the constraints should be printed. Orderings are printed in lexicographical (alphabetical) order, one per line. Output for different constraint specifications is separated by a blank line. Sample Input a b f g a b b f v w x y z v y x v z v w v Sample Output abfg abgf agbf gabf wxzvy wzxvy xwzvy xzwvy zwxvy zxwvy Code #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 26; bool vis[MAX_N], m[MAX_N][MAX_N], visit[MAX_N]; int cnt, in[MAX_N]; char res[MAX_N]; void dfs(int n, int u) { res[n] = u + 'a'; if (n == cnt - 1) { res[cnt] = '\\0'; printf(\"%s\\n\", res); return; } visit[u] = true; for (int v = 0; v < MAX_N; ++v) { if (m[u][v]) { --in[v]; } } for (int v = 0; v < MAX_N; ++v) { if (vis[v] && in[v] == 0 && !visit[v]) { dfs(n + 1, v); } } for (int v = 0; v < MAX_N; ++v) { if (m[u][v]) { ++in[v]; } } visit[u] = false; } void tMain() { string s; while (getline(cin, s)) { cnt = 0; memset(in, 0, sizeof(in)); memset(m, 0, sizeof(m)); memset(vis, 0, sizeof(vis)); memset(visit, 0, sizeof(visit)); for (int i = 0; i < s.size(); ++i) { if (s[i] != ' ') { ++cnt; vis[s[i] - 'a'] = true; } } getline(cin, s); for (int i = 0; i < s.size(); i += 4) { int u = s[i] - 'a', v = s[i + 2] - 'a'; ++in[v]; m[u][v] = true; } for (int v = 0; v < MAX_N; ++v) { if (vis[v] && in[v] == 0) { dfs(0, v); } } printf(\"\\n\"); } } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Following Orders"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/poj%201270/#following-orders","text":"","title":"Following Orders"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/poj%201270/#description","text":"Order is an important concept in mathematics and in computer science. For example, Zorn's Lemma states: ``a partially ordered set in which every chain has an upper bound contains a maximal element.'' Order is also important in reasoning about the fix-point semantics of programs. This problem involves neither Zorn's Lemma nor fix-point semantics, but does involve order. Given a list of variable constraints of the form x < y, you are to write a program that prints all orderings of the variables that are consistent with the constraints. For example, given the constraints x < y and x < z there are two orderings of the variables x, y, and z that are consistent with these constraints: x y z and x z y.","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/poj%201270/#input","text":"The input consists of a sequence of constraint specifications. A specification consists of two lines: a list of variables on one line followed by a list of contraints on the next line. A constraint is given by a pair of variables, where x y indicates that x < y. All variables are single character, lower-case letters. There will be at least two variables, and no more than 20 variables in a specification. There will be at least one constraint, and no more than 50 constraints in a specification. There will be at least one, and no more than 300 orderings consistent with the contraints in a specification. Input is terminated by end-of-file.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/poj%201270/#output","text":"For each constraint specification, all orderings consistent with the constraints should be printed. Orderings are printed in lexicographical (alphabetical) order, one per line. Output for different constraint specifications is separated by a blank line.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/poj%201270/#sample-input","text":"a b f g a b b f v w x y z v y x v z v w v","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/poj%201270/#sample-output","text":"abfg abgf agbf gabf wxzvy wzxvy xwzvy xzwvy zwxvy zxwvy","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/poj%201270/#code","text":"#include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 26; bool vis[MAX_N], m[MAX_N][MAX_N], visit[MAX_N]; int cnt, in[MAX_N]; char res[MAX_N]; void dfs(int n, int u) { res[n] = u + 'a'; if (n == cnt - 1) { res[cnt] = '\\0'; printf(\"%s\\n\", res); return; } visit[u] = true; for (int v = 0; v < MAX_N; ++v) { if (m[u][v]) { --in[v]; } } for (int v = 0; v < MAX_N; ++v) { if (vis[v] && in[v] == 0 && !visit[v]) { dfs(n + 1, v); } } for (int v = 0; v < MAX_N; ++v) { if (m[u][v]) { ++in[v]; } } visit[u] = false; } void tMain() { string s; while (getline(cin, s)) { cnt = 0; memset(in, 0, sizeof(in)); memset(m, 0, sizeof(m)); memset(vis, 0, sizeof(vis)); memset(visit, 0, sizeof(visit)); for (int i = 0; i < s.size(); ++i) { if (s[i] != ' ') { ++cnt; vis[s[i] - 'a'] = true; } } getline(cin, s); for (int i = 0; i < s.size(); i += 4) { int u = s[i] - 'a', v = s[i + 2] - 'a'; ++in[v]; m[u][v] = true; } for (int v = 0; v < MAX_N; ++v) { if (vis[v] && in[v] == 0) { dfs(0, v); } } printf(\"\\n\"); } } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%97%A0%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7/poj%201144/","text":"Network Description A Telephone Line Company (TLC) is establishing a new telephone cable network. They are connecting several places numbered by integers from 1 to N . No two places have the same number. The lines are bidirectional and always connect together two places and in each place the lines end in a telephone exchange. There is one telephone exchange in each place. From each place it is possible to reach through lines every other place, however it need not be a direct connection, it can go through several exchanges. From time to time the power supply fails at a place and then the exchange does not operate. The officials from TLC realized that in such a case it can happen that besides the fact that the place with the failure is unreachable, this can also cause that some other places cannot connect to each other. In such a case we will say the place (where the failure occured) is critical. Now the officials are trying to write a program for finding the number of all such critical places. Help them. Input The input file consists of several blocks of lines. Each block describes one network. In the first line of each block there is the number of places N < 100. Each of the next at most N lines contains the number of a place followed by the numbers of some places to which there is a direct line from this place. These at most N lines completely describe the network, i.e., each direct connection of two places in the network is contained at least in one row. All numbers in one line are separated by one space. Each block ends with a line containing just 0. The last block has only one line with N = 0; Output The output contains for each block except the last in the input file one line containing the number of critical places. Sample Input 5 5 1 2 3 4 0 6 2 1 3 5 4 6 2 0 0 Sample Output 1 2 Code #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 110; int N, num[MAX_N], low[MAX_N], cutCnt[MAX_N], depth; bool m[MAX_N][MAX_N]; void init() { memset(num, 0, sizeof(num)); memset(low, 0, sizeof(low)); memset(cutCnt, 0, sizeof(cutCnt)); memset(m, 0, sizeof(m)); depth = 0; } void dfs(int u, int p) { num[u] = low[u] = ++depth; int child = 0; for (int v = 1; v <= N; ++v) { if (m[u][v]) { if (!num[v]) { ++child; dfs(v, u); low[u] = min(low[u], low[v]); if (num[u] <= low[v] && u != 1) { cutCnt[u] = true; } } else if (num[v] < num[u]) { low[u] = min(num[v], low[u]); } } } if (u == 1) { if (child > 1) cutCnt[1] = true; } } void tMain() { while (scanf(\"%d\", &N), N != 0) { int a, b; init(); while (scanf(\"%d\", &a), a != 0) { char c; while (getchar() != '\\n') { scanf(\"%d\", &b); m[a][b] = m[b][a] = true; } } dfs(1, 0); int ans = 0; for (int i = 1; i <= N; ++i) ans += cutCnt[i]; printf(\"%d\\n\", ans); } } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Network"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%97%A0%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7/poj%201144/#network","text":"","title":"Network"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%97%A0%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7/poj%201144/#description","text":"A Telephone Line Company (TLC) is establishing a new telephone cable network. They are connecting several places numbered by integers from 1 to N . No two places have the same number. The lines are bidirectional and always connect together two places and in each place the lines end in a telephone exchange. There is one telephone exchange in each place. From each place it is possible to reach through lines every other place, however it need not be a direct connection, it can go through several exchanges. From time to time the power supply fails at a place and then the exchange does not operate. The officials from TLC realized that in such a case it can happen that besides the fact that the place with the failure is unreachable, this can also cause that some other places cannot connect to each other. In such a case we will say the place (where the failure occured) is critical. Now the officials are trying to write a program for finding the number of all such critical places. Help them.","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%97%A0%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7/poj%201144/#input","text":"The input file consists of several blocks of lines. Each block describes one network. In the first line of each block there is the number of places N < 100. Each of the next at most N lines contains the number of a place followed by the numbers of some places to which there is a direct line from this place. These at most N lines completely describe the network, i.e., each direct connection of two places in the network is contained at least in one row. All numbers in one line are separated by one space. Each block ends with a line containing just 0. The last block has only one line with N = 0;","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%97%A0%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7/poj%201144/#output","text":"The output contains for each block except the last in the input file one line containing the number of critical places.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%97%A0%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7/poj%201144/#sample-input","text":"5 5 1 2 3 4 0 6 2 1 3 5 4 6 2 0 0","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%97%A0%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7/poj%201144/#sample-output","text":"1 2","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%97%A0%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7/poj%201144/#code","text":"#include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 110; int N, num[MAX_N], low[MAX_N], cutCnt[MAX_N], depth; bool m[MAX_N][MAX_N]; void init() { memset(num, 0, sizeof(num)); memset(low, 0, sizeof(low)); memset(cutCnt, 0, sizeof(cutCnt)); memset(m, 0, sizeof(m)); depth = 0; } void dfs(int u, int p) { num[u] = low[u] = ++depth; int child = 0; for (int v = 1; v <= N; ++v) { if (m[u][v]) { if (!num[v]) { ++child; dfs(v, u); low[u] = min(low[u], low[v]); if (num[u] <= low[v] && u != 1) { cutCnt[u] = true; } } else if (num[v] < num[u]) { low[u] = min(num[v], low[u]); } } } if (u == 1) { if (child > 1) cutCnt[1] = true; } } void tMain() { while (scanf(\"%d\", &N), N != 0) { int a, b; init(); while (scanf(\"%d\", &a), a != 0) { char c; while (getchar() != '\\n') { scanf(\"%d\", &b); m[a][b] = m[b][a] = true; } } dfs(1, 0); int ans = 0; for (int i = 1; i <= N; ++i) ans += cutCnt[i]; printf(\"%d\\n\", ans); } } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%97%A0%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7/poj%201523/","text":"SPF Description Consider the two networks shown below. Assuming that data moves around these networks only between directly connected nodes on a peer-to-peer basis, a failure of a single node, 3, in the network on the left would prevent some of the still available nodes from communicating with each other. Nodes 1 and 2 could still communicate with each other as could nodes 4 and 5, but communication between any other pairs of nodes would no longer be possible. Node 3 is therefore a Single Point of Failure (SPF) for this network. Strictly, an SPF will be defined as any node that, if unavailable, would prevent at least one pair of available nodes from being able to communicate on what was previously a fully connected network. Note that the network on the right has no such node; there is no SPF in the network. At least two machines must fail before there are any pairs of available nodes which cannot communicate. Input The input will contain the description of several networks. A network description will consist of pairs of integers, one pair per line, that identify connected nodes. Ordering of the pairs is irrelevant; 1 2 and 2 1 specify the same connection. All node numbers will range from 1 to 1000. A line containing a single zero ends the list of connected nodes. An empty network description flags the end of the input. Blank lines in the input file should be ignored. Output For each network in the input, you will output its number in the file, followed by a list of any SPF nodes that exist. The first network in the file should be identified as \"Network #1\", the second as \"Network #2\", etc. For each SPF node, output a line, formatted as shown in the examples below, that identifies the node and the number of fully connected subnets that remain when that node fails. If the network has no SPF nodes, simply output the text \"No SPF nodes\" instead of a list of SPF nodes. Sample Input 1 2 5 4 3 1 3 2 3 4 3 5 0 1 2 2 3 3 4 4 5 5 1 0 1 2 2 3 3 4 4 6 6 3 2 5 5 1 0 0 Sample Output Network #1 SPF node 3 leaves 2 subnets Network #2 No SPF nodes Network #3 SPF node 2 leaves 2 subnets SPF node 3 leaves 2 subnets Code #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 1010; int N, num[MAX_N], low[MAX_N], isCut[MAX_N], subSets[MAX_N], depth; bool m[MAX_N][MAX_N]; void init() { memset(num, 0, sizeof(num)); memset(low, 0, sizeof(low)); memset(isCut, 0, sizeof(isCut)); memset(subSets, 0, sizeof(subSets)); memset(m, 0, sizeof(m)); depth = 0; } void dfs(int u, int p) { num[u] = low[u] = ++depth; int child = 0; for (int v = 1; v <= MAX_N; ++v) { if (m[u][v]) { if (!num[v]) { ++child; dfs(v, u); low[u] = min(low[u], low[v]); if (num[u] <= low[v] && u != 1) { if (!subSets[u]) ++subSets[u]; ++subSets[u]; } } else if (num[v] < num[u] && v != p) { low[u] = min(num[v], low[u]); } } } if (u == 1) { if (child > 1) subSets[1] = child; } } void tMain() { int a, b, t, cnt = 0; while (scanf(\"%d\", &t), t != 0) { ++cnt; init(); a = t; goto label0; while (scanf(\"%d\", &a), a != 0) { label0: scanf(\"%d\", &b); m[a][b] = m[b][a] = true; } dfs(1, -1); printf(\"Network #%d\\n\", cnt); bool flag = false; for (int i = 1; i < MAX_N; ++i) { if (subSets[i]) { flag = true; printf(\" SPF node %d leaves %d subnets\\n\", i, subSets[i]); } } if (!flag) printf(\" No SPF nodes\\n\"); puts(\"\"); } } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"SPF"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%97%A0%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7/poj%201523/#spf","text":"","title":"SPF"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%97%A0%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7/poj%201523/#description","text":"Consider the two networks shown below. Assuming that data moves around these networks only between directly connected nodes on a peer-to-peer basis, a failure of a single node, 3, in the network on the left would prevent some of the still available nodes from communicating with each other. Nodes 1 and 2 could still communicate with each other as could nodes 4 and 5, but communication between any other pairs of nodes would no longer be possible. Node 3 is therefore a Single Point of Failure (SPF) for this network. Strictly, an SPF will be defined as any node that, if unavailable, would prevent at least one pair of available nodes from being able to communicate on what was previously a fully connected network. Note that the network on the right has no such node; there is no SPF in the network. At least two machines must fail before there are any pairs of available nodes which cannot communicate.","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%97%A0%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7/poj%201523/#input","text":"The input will contain the description of several networks. A network description will consist of pairs of integers, one pair per line, that identify connected nodes. Ordering of the pairs is irrelevant; 1 2 and 2 1 specify the same connection. All node numbers will range from 1 to 1000. A line containing a single zero ends the list of connected nodes. An empty network description flags the end of the input. Blank lines in the input file should be ignored.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%97%A0%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7/poj%201523/#output","text":"For each network in the input, you will output its number in the file, followed by a list of any SPF nodes that exist. The first network in the file should be identified as \"Network #1\", the second as \"Network #2\", etc. For each SPF node, output a line, formatted as shown in the examples below, that identifies the node and the number of fully connected subnets that remain when that node fails. If the network has no SPF nodes, simply output the text \"No SPF nodes\" instead of a list of SPF nodes.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%97%A0%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7/poj%201523/#sample-input","text":"1 2 5 4 3 1 3 2 3 4 3 5 0 1 2 2 3 3 4 4 5 5 1 0 1 2 2 3 3 4 4 6 6 3 2 5 5 1 0 0","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%97%A0%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7/poj%201523/#sample-output","text":"Network #1 SPF node 3 leaves 2 subnets Network #2 No SPF nodes Network #3 SPF node 2 leaves 2 subnets SPF node 3 leaves 2 subnets","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%97%A0%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7/poj%201523/#code","text":"#include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 1010; int N, num[MAX_N], low[MAX_N], isCut[MAX_N], subSets[MAX_N], depth; bool m[MAX_N][MAX_N]; void init() { memset(num, 0, sizeof(num)); memset(low, 0, sizeof(low)); memset(isCut, 0, sizeof(isCut)); memset(subSets, 0, sizeof(subSets)); memset(m, 0, sizeof(m)); depth = 0; } void dfs(int u, int p) { num[u] = low[u] = ++depth; int child = 0; for (int v = 1; v <= MAX_N; ++v) { if (m[u][v]) { if (!num[v]) { ++child; dfs(v, u); low[u] = min(low[u], low[v]); if (num[u] <= low[v] && u != 1) { if (!subSets[u]) ++subSets[u]; ++subSets[u]; } } else if (num[v] < num[u] && v != p) { low[u] = min(num[v], low[u]); } } } if (u == 1) { if (child > 1) subSets[1] = child; } } void tMain() { int a, b, t, cnt = 0; while (scanf(\"%d\", &t), t != 0) { ++cnt; init(); a = t; goto label0; while (scanf(\"%d\", &a), a != 0) { label0: scanf(\"%d\", &b); m[a][b] = m[b][a] = true; } dfs(1, -1); printf(\"Network #%d\\n\", cnt); bool flag = false; for (int i = 1; i < MAX_N; ++i) { if (subSets[i]) { flag = true; printf(\" SPF node %d leaves %d subnets\\n\", i, subSets[i]); } } if (!flag) printf(\" No SPF nodes\\n\"); puts(\"\"); } } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%97%A0%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7/poj%203352/","text":"Road Construction Description It's almost summer time, and that means that it's almost summer construction time! This year, the good people who are in charge of the roads on the tropical island paradise of Remote Island would like to repair and upgrade the various roads that lead between the various tourist attractions on the island. The roads themselves are also rather interesting. Due to the strange customs of the island, the roads are arranged so that they never meet at intersections, but rather pass over or under each other using bridges and tunnels. In this way, each road runs between two specific tourist attractions, so that the tourists do not become irreparably lost. Unfortunately, given the nature of the repairs and upgrades needed on each road, when the construction company works on a particular road, it is unusable in either direction. This could cause a problem if it becomes impossible to travel between two tourist attractions, even if the construction company works on only one road at any particular time. So, the Road Department of Remote Island has decided to call upon your consulting services to help remedy this problem. It has been decided that new roads will have to be built between the various attractions in such a way that in the final configuration, if any one road is undergoing construction, it would still be possible to travel between any two tourist attractions using the remaining roads. Your task is to find the minimum number of new roads necessary. Input The first line of input will consist of positive integers n and r , separated by a space, where 3 \u2264 n \u2264 1000 is the number of tourist attractions on the island, and 2 \u2264 r \u2264 1000 is the number of roads. The tourist attractions are conveniently labelled from 1 to n . Each of the following r lines will consist of two integers, v and w , separated by a space, indicating that a road exists between the attractions labelled v and w . Note that you may travel in either direction down each road, and any pair of tourist attractions will have at most one road directly between them. Also, you are assured that in the current configuration, it is possible to travel between any two tourist attractions. Output One line, consisting of an integer, which gives the minimum number of roads that we need to add. Sample Input Sample Input 1 10 12 1 2 1 3 1 4 2 5 2 6 5 6 3 7 3 8 7 8 4 9 4 10 9 10 Sample Input 2 3 3 1 2 2 3 1 3 Sample Output Output for Sample Input 1 2 Output for Sample Input 2 0 Code \u53ea\u6709\u4e00\u4e2a\u6d4b\u8bd5\uff0c Sample Input 1 \u548c Output for Sample Input 1 \u90fd\u662f\u6ca1\u6709\u7684\u3002 #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 1010; int N, low[MAX_N], depth, aset[MAX_N]; vector<int> m[MAX_N]; void init() { memset(low, 0, sizeof(low)); memset(aset, 0, sizeof(aset)); for (int v = 1; v <= N; ++v) m[v].clear(); depth = 0; } void dfs(int u, int p) { low[u] = ++depth; for (int i = 0; i < m[u].size(); ++i) { int v = m[u][i]; if (v == p) continue; if (!low[v]) { dfs(v, u); } low[u] = min(low[u], low[v]); } } int tarjan() { int ans = 0; for (int u = 1; u <= N; ++u) { for (int i = 0; i < m[u].size(); ++i) { if (low[u] != low[m[u][i]]) { ++aset[low[u]]; } } } for (int i = 1; i <= N; ++i) { if (aset[i] == 1) ans++; } return ans; } void tMain() { // char ts[20]; // while (cin.getline(ts, 20)) { // printf(\"Output for \"); // puts(ts); int r; scanf(\"%d%d\", &N, &r); // init(); while (r--) { int a, b; scanf(\"%d%d\", &a, &b); m[a].push_back(b), m[b].push_back(a); } dfs(1, -1); int ans = tarjan(); printf(\"%d\\n\", (ans + 1) / 2); // scanf(\"%*c%*c\"); // } } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Road Construction"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%97%A0%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7/poj%203352/#road-construction","text":"","title":"Road Construction"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%97%A0%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7/poj%203352/#description","text":"It's almost summer time, and that means that it's almost summer construction time! This year, the good people who are in charge of the roads on the tropical island paradise of Remote Island would like to repair and upgrade the various roads that lead between the various tourist attractions on the island. The roads themselves are also rather interesting. Due to the strange customs of the island, the roads are arranged so that they never meet at intersections, but rather pass over or under each other using bridges and tunnels. In this way, each road runs between two specific tourist attractions, so that the tourists do not become irreparably lost. Unfortunately, given the nature of the repairs and upgrades needed on each road, when the construction company works on a particular road, it is unusable in either direction. This could cause a problem if it becomes impossible to travel between two tourist attractions, even if the construction company works on only one road at any particular time. So, the Road Department of Remote Island has decided to call upon your consulting services to help remedy this problem. It has been decided that new roads will have to be built between the various attractions in such a way that in the final configuration, if any one road is undergoing construction, it would still be possible to travel between any two tourist attractions using the remaining roads. Your task is to find the minimum number of new roads necessary.","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%97%A0%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7/poj%203352/#input","text":"The first line of input will consist of positive integers n and r , separated by a space, where 3 \u2264 n \u2264 1000 is the number of tourist attractions on the island, and 2 \u2264 r \u2264 1000 is the number of roads. The tourist attractions are conveniently labelled from 1 to n . Each of the following r lines will consist of two integers, v and w , separated by a space, indicating that a road exists between the attractions labelled v and w . Note that you may travel in either direction down each road, and any pair of tourist attractions will have at most one road directly between them. Also, you are assured that in the current configuration, it is possible to travel between any two tourist attractions.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%97%A0%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7/poj%203352/#output","text":"One line, consisting of an integer, which gives the minimum number of roads that we need to add.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%97%A0%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7/poj%203352/#sample-input","text":"Sample Input 1 10 12 1 2 1 3 1 4 2 5 2 6 5 6 3 7 3 8 7 8 4 9 4 10 9 10 Sample Input 2 3 3 1 2 2 3 1 3","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%97%A0%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7/poj%203352/#sample-output","text":"Output for Sample Input 1 2 Output for Sample Input 2 0","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%97%A0%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7/poj%203352/#code","text":"\u53ea\u6709\u4e00\u4e2a\u6d4b\u8bd5\uff0c Sample Input 1 \u548c Output for Sample Input 1 \u90fd\u662f\u6ca1\u6709\u7684\u3002 #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 1010; int N, low[MAX_N], depth, aset[MAX_N]; vector<int> m[MAX_N]; void init() { memset(low, 0, sizeof(low)); memset(aset, 0, sizeof(aset)); for (int v = 1; v <= N; ++v) m[v].clear(); depth = 0; } void dfs(int u, int p) { low[u] = ++depth; for (int i = 0; i < m[u].size(); ++i) { int v = m[u][i]; if (v == p) continue; if (!low[v]) { dfs(v, u); } low[u] = min(low[u], low[v]); } } int tarjan() { int ans = 0; for (int u = 1; u <= N; ++u) { for (int i = 0; i < m[u].size(); ++i) { if (low[u] != low[m[u][i]]) { ++aset[low[u]]; } } } for (int i = 1; i <= N; ++i) { if (aset[i] == 1) ans++; } return ans; } void tMain() { // char ts[20]; // while (cin.getline(ts, 20)) { // printf(\"Output for \"); // puts(ts); int r; scanf(\"%d%d\", &N, &r); // init(); while (r--) { int a, b; scanf(\"%d%d\", &a, &b); m[a].push_back(b), m[b].push_back(a); } dfs(1, -1); int ans = tarjan(); printf(\"%d\\n\", (ans + 1) / 2); // scanf(\"%*c%*c\"); // } } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/poj%202377%20Bad%20Cowtractors/","text":"Bad Cowtractors Description Bessie has been hired to build a cheap internet network among Farmer John's N (2 <= N <= 1,000) barns that are conveniently numbered 1..N. FJ has already done some surveying, and found M (1 <= M <= 20,000) possible connection routes between pairs of barns. Each possible connection route has an associated cost C (1 <= C <= 100,000). Farmer John wants to spend the least amount on connecting the network; he doesn't even want to pay Bessie. Realizing Farmer John will not pay her, Bessie decides to do the worst job possible. She must decide on a set of connections to install so that (i) the total cost of these connections is as large as possible, (ii) all the barns are connected together (so that it is possible to reach any barn from any other barn via a path of installed connections), and (iii) so that there are no cycles among the connections (which Farmer John would easily be able to detect). Conditions (ii) and (iii) ensure that the final set of connections will look like a \"tree\". Input Line 1: Two space-separated integers: N and M Lines 2..M+1: Each line contains three space-separated integers A, B, and C that describe a connection route between barns A and B of cost C. Output Line 1: A single integer, containing the price of the most expensive tree connecting all the barns. If it is not possible to connect all the barns, output -1. Sample Input 5 8 1 2 3 1 3 7 2 3 10 2 4 4 2 5 8 3 4 6 3 5 2 4 5 17 Sample Output 42 Code #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif inline int read() { int ra, fh; char rx; rx = getchar(), ra = 0, fh = 1; while ((rx < '0' || rx > '9') && rx != '-') rx = getchar(); if (rx == '-') fh = -1, rx = getchar(); while (rx >= '0' && rx <= '9') ra *= 10, ra += rx - 48, rx = getchar(); return ra * fh; } using namespace std; typedef long long ll; const int MAX_N = 1010, MAX_M = 20010, INF = 0x3f3f3f3f; int N, M; struct Edge { ll u, v, w; }; Edge edge[MAX_M]; int p[MAX_N]; int findP(int e) { return p[e] = (p[e] == e ? e : findP(p[e])); } bool cmp(const Edge &a, const Edge &b) { return a.w > b.w; } ll kruskal() { ll ans = 0; for (int i = 1; i <= N; ++i) p[i] = i; sort(edge, edge + M, cmp); int cnt = 0; for (int i = 0; i < M; ++i) { int r = findP(edge[i].u), r1 = findP(edge[i].v); if (r == r1) continue; p[r1] = r; ans += edge[i].w; if (++cnt == N - 1) break; } if (cnt != N - 1) return -1; else return ans; } inline void tMain() { N = read(), M = read(); for (int i = 0; i < M; ++i) { edge[i].u = read(); edge[i].v = read(); edge[i].w = read(); } printf(\"%lld\\n\", kruskal()); } #ifdef mytest //Test test; #endif int main() { #ifdef mytest // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Bad Cowtractors"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/poj%202377%20Bad%20Cowtractors/#bad-cowtractors","text":"","title":"Bad Cowtractors"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/poj%202377%20Bad%20Cowtractors/#description","text":"Bessie has been hired to build a cheap internet network among Farmer John's N (2 <= N <= 1,000) barns that are conveniently numbered 1..N. FJ has already done some surveying, and found M (1 <= M <= 20,000) possible connection routes between pairs of barns. Each possible connection route has an associated cost C (1 <= C <= 100,000). Farmer John wants to spend the least amount on connecting the network; he doesn't even want to pay Bessie. Realizing Farmer John will not pay her, Bessie decides to do the worst job possible. She must decide on a set of connections to install so that (i) the total cost of these connections is as large as possible, (ii) all the barns are connected together (so that it is possible to reach any barn from any other barn via a path of installed connections), and (iii) so that there are no cycles among the connections (which Farmer John would easily be able to detect). Conditions (ii) and (iii) ensure that the final set of connections will look like a \"tree\".","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/poj%202377%20Bad%20Cowtractors/#input","text":"Line 1: Two space-separated integers: N and M Lines 2..M+1: Each line contains three space-separated integers A, B, and C that describe a connection route between barns A and B of cost C.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/poj%202377%20Bad%20Cowtractors/#output","text":"Line 1: A single integer, containing the price of the most expensive tree connecting all the barns. If it is not possible to connect all the barns, output -1.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/poj%202377%20Bad%20Cowtractors/#sample-input","text":"5 8 1 2 3 1 3 7 2 3 10 2 4 4 2 5 8 3 4 6 3 5 2 4 5 17","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/poj%202377%20Bad%20Cowtractors/#sample-output","text":"42","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/poj%202377%20Bad%20Cowtractors/#code","text":"#include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif inline int read() { int ra, fh; char rx; rx = getchar(), ra = 0, fh = 1; while ((rx < '0' || rx > '9') && rx != '-') rx = getchar(); if (rx == '-') fh = -1, rx = getchar(); while (rx >= '0' && rx <= '9') ra *= 10, ra += rx - 48, rx = getchar(); return ra * fh; } using namespace std; typedef long long ll; const int MAX_N = 1010, MAX_M = 20010, INF = 0x3f3f3f3f; int N, M; struct Edge { ll u, v, w; }; Edge edge[MAX_M]; int p[MAX_N]; int findP(int e) { return p[e] = (p[e] == e ? e : findP(p[e])); } bool cmp(const Edge &a, const Edge &b) { return a.w > b.w; } ll kruskal() { ll ans = 0; for (int i = 1; i <= N; ++i) p[i] = i; sort(edge, edge + M, cmp); int cnt = 0; for (int i = 0; i < M; ++i) { int r = findP(edge[i].u), r1 = findP(edge[i].v); if (r == r1) continue; p[r1] = r; ans += edge[i].w; if (++cnt == N - 1) break; } if (cnt != N - 1) return -1; else return ans; } inline void tMain() { N = read(), M = read(); for (int i = 0; i < M; ++i) { edge[i].u = read(); edge[i].v = read(); edge[i].w = read(); } printf(\"%lld\\n\", kruskal()); } #ifdef mytest //Test test; #endif int main() { #ifdef mytest // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%201062/","text":"\u6602\u8d35\u7684\u8058\u793c Description \u5e74\u8f7b\u7684\u63a2\u9669\u5bb6\u6765\u5230\u4e86\u4e00\u4e2a\u5370\u7b2c\u5b89\u90e8\u843d\u91cc\u3002\u5728\u90a3\u91cc\u4ed6\u548c\u914b\u957f\u7684\u5973\u513f\u76f8\u7231\u4e86\uff0c\u4e8e\u662f\u4fbf\u5411\u914b\u957f\u53bb\u6c42\u4eb2\u3002\u914b\u957f\u8981\u4ed6\u752810000\u4e2a\u91d1\u5e01\u4f5c\u4e3a\u8058\u793c\u624d\u7b54\u5e94\u628a\u5973\u513f\u5ac1\u7ed9\u4ed6\u3002\u63a2\u9669\u5bb6\u62ff\u4e0d\u51fa\u8fd9\u4e48\u591a\u91d1\u5e01\uff0c\u4fbf\u8bf7\u6c42\u914b\u957f\u964d\u4f4e\u8981\u6c42\u3002\u914b\u957f\u8bf4\uff1a\"\u55ef\uff0c\u5982\u679c\u4f60\u80fd\u591f\u66ff\u6211\u5f04\u5230\u5927\u796d\u53f8\u7684\u76ae\u8884\uff0c\u6211\u53ef\u4ee5\u53ea\u89818000\u91d1\u5e01\u3002\u5982\u679c\u4f60\u80fd\u591f\u5f04\u6765\u4ed6\u7684\u6c34\u6676\u7403\uff0c\u90a3\u4e48\u53ea\u89815000\u91d1\u5e01\u5c31\u884c\u4e86\u3002\"\u63a2\u9669\u5bb6\u5c31\u8dd1\u5230\u5927\u796d\u53f8\u90a3\u91cc\uff0c\u5411\u4ed6\u8981\u6c42\u76ae\u8884\u6216\u6c34\u6676\u7403\uff0c\u5927\u796d\u53f8\u8981\u4ed6\u7528\u91d1\u5e01\u6765\u6362\uff0c\u6216\u8005\u66ff\u4ed6\u5f04\u6765\u5176\u4ed6\u7684\u4e1c\u897f\uff0c\u4ed6\u53ef\u4ee5\u964d\u4f4e\u4ef7\u683c\u3002\u63a2\u9669\u5bb6\u4e8e\u662f\u53c8\u8dd1\u5230\u5176\u4ed6\u5730\u65b9\uff0c\u5176\u4ed6\u4eba\u4e5f\u63d0\u51fa\u4e86\u7c7b\u4f3c\u7684\u8981\u6c42\uff0c\u6216\u8005\u76f4\u63a5\u7528\u91d1\u5e01\u6362\uff0c\u6216\u8005\u627e\u5230\u5176\u4ed6\u4e1c\u897f\u5c31\u53ef\u4ee5\u964d\u4f4e\u4ef7\u683c\u3002\u4e0d\u8fc7\u63a2\u9669\u5bb6\u6ca1\u5fc5\u8981\u7528\u591a\u6837\u4e1c\u897f\u53bb\u6362\u4e00\u6837\u4e1c\u897f\uff0c\u56e0\u4e3a\u4e0d\u4f1a\u5f97\u5230\u66f4\u4f4e\u7684\u4ef7\u683c\u3002\u63a2\u9669\u5bb6\u73b0\u5728\u5f88\u9700\u8981\u4f60\u7684\u5e2e\u5fd9\uff0c\u8ba9\u4ed6\u7528\u6700\u5c11\u7684\u91d1\u5e01\u5a36\u5230\u81ea\u5df1\u7684\u5fc3\u4e0a\u4eba\u3002\u53e6\u5916\u4ed6\u8981\u544a\u8bc9\u4f60\u7684\u662f\uff0c\u5728\u8fd9\u4e2a\u90e8\u843d\u91cc\uff0c\u7b49\u7ea7\u89c2\u5ff5\u5341\u5206\u68ee\u4e25\u3002\u5730\u4f4d\u5dee\u8ddd\u8d85\u8fc7\u4e00\u5b9a\u9650\u5236\u7684\u4e24\u4e2a\u4eba\u4e4b\u95f4\u4e0d\u4f1a\u8fdb\u884c\u4efb\u4f55\u5f62\u5f0f\u7684\u76f4\u63a5\u63a5\u89e6\uff0c\u5305\u62ec\u4ea4\u6613\u3002\u4ed6\u662f\u4e00\u4e2a\u5916\u6765\u4eba\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e0d\u53d7\u8fd9\u4e9b\u9650\u5236\u3002\u4f46\u662f\u5982\u679c\u4ed6\u548c\u67d0\u4e2a\u5730\u4f4d\u8f83\u4f4e\u7684\u4eba\u8fdb\u884c\u4e86\u4ea4\u6613\uff0c\u5730\u4f4d\u8f83\u9ad8\u7684\u7684\u4eba\u4e0d\u4f1a\u518d\u548c\u4ed6\u4ea4\u6613\uff0c\u4ed6\u4eec\u8ba4\u4e3a\u8fd9\u6837\u7b49\u4e8e\u662f\u95f4\u63a5\u63a5\u89e6\uff0c\u53cd\u8fc7\u6765\u4e5f\u4e00\u6837\u3002\u56e0\u6b64\u4f60\u9700\u8981\u5728\u8003\u8651\u6240\u6709\u7684\u60c5\u51b5\u4ee5\u540e\u7ed9\u4ed6\u63d0\u4f9b\u4e00\u4e2a\u6700\u597d\u7684\u65b9\u6848\u3002 \u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u628a\u6240\u6709\u7684\u7269\u54c1\u4ece1\u5f00\u59cb\u8fdb\u884c\u7f16\u53f7\uff0c\u914b\u957f\u7684\u5141\u8bfa\u4e5f\u770b\u4f5c\u4e00\u4e2a\u7269\u54c1\uff0c\u5e76\u4e14\u7f16\u53f7\u603b\u662f1\u3002\u6bcf\u4e2a\u7269\u54c1\u90fd\u6709\u5bf9\u5e94\u7684\u4ef7\u683cP\uff0c\u4e3b\u4eba\u7684\u5730\u4f4d\u7b49\u7ea7L\uff0c\u4ee5\u53ca\u4e00\u7cfb\u5217\u7684\u66ff\u4ee3\u54c1Ti\u548c\u8be5\u66ff\u4ee3\u54c1\u6240\u5bf9\u5e94\u7684\"\u4f18\u60e0\"Vi\u3002\u5982\u679c\u4e24\u4eba\u5730\u4f4d\u7b49\u7ea7\u5dee\u8ddd\u8d85\u8fc7\u4e86M\uff0c\u5c31\u4e0d\u80fd\"\u95f4\u63a5\u4ea4\u6613\"\u3002\u4f60\u5fc5\u987b\u6839\u636e\u8fd9\u4e9b\u6570\u636e\u6765\u8ba1\u7b97\u51fa\u63a2\u9669\u5bb6\u6700\u5c11\u9700\u8981\u591a\u5c11\u91d1\u5e01\u624d\u80fd\u5a36\u5230\u914b\u957f\u7684\u5973\u513f\u3002 Input \u8f93\u5165\u7b2c\u4e00\u884c\u662f\u4e24\u4e2a\u6574\u6570M\uff0cN\uff081 <= N <= 100\uff09\uff0c\u4f9d\u6b21\u8868\u793a\u5730\u4f4d\u7b49\u7ea7\u5dee\u8ddd\u9650\u5236\u548c\u7269\u54c1\u7684\u603b\u6570\u3002\u63a5\u4e0b\u6765\u6309\u7167\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u7ed9\u51fa\u4e86N\u4e2a\u7269\u54c1\u7684\u63cf\u8ff0\u3002\u6bcf\u4e2a\u7269\u54c1\u7684\u63cf\u8ff0\u5f00\u5934\u662f\u4e09\u4e2a\u975e\u8d1f\u6574\u6570P\u3001L\u3001X\uff08X < N\uff09\uff0c\u4f9d\u6b21\u8868\u793a\u8be5\u7269\u54c1\u7684\u4ef7\u683c\u3001\u4e3b\u4eba\u7684\u5730\u4f4d\u7b49\u7ea7\u548c\u66ff\u4ee3\u54c1\u603b\u6570\u3002\u63a5\u4e0b\u6765X\u884c\u6bcf\u884c\u5305\u62ec\u4e24\u4e2a\u6574\u6570T\u548cV\uff0c\u5206\u522b\u8868\u793a\u66ff\u4ee3\u54c1\u7684\u7f16\u53f7\u548c\"\u4f18\u60e0\u4ef7\u683c\"\u3002 Output \u8f93\u51fa\u6700\u5c11\u9700\u8981\u7684\u91d1\u5e01\u6570\u3002 Sample Input 1 4 10000 3 2 2 8000 3 5000 1000 2 1 4 200 3000 2 1 4 200 50 2 0 Sample Output 5250 Code \u679a\u4e3e\u5408\u6cd5\u533a\u95f4\u8fdb\u884c\u6700\u77ed\u8def\u5bfb\u627e\u3002 #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 110, INF = 0x3f3f3f3f; int M, N, P, L, X, T, V, LEVEL; struct node { int v, w; node(int _v, int _w) : v(_v), w(_w) {} }; struct qNode { int id, d; qNode (int _id, int _d) : id(_id), d(_d) {} bool operator<(const qNode &a) const { return this->d > a.d; } }; vector<node> g[MAX_N]; int level[MAX_N]; inline bool inSection(int e, int a, int b) { return a <= e && e <= b; } int d[MAX_N]; bool isDone[MAX_N]; int dijkstra(int a, int b) { memset(d, 0x3f, sizeof(d)); memset(isDone, 0, sizeof(isDone)); priority_queue<qNode> q; d[0] = 0; q.push(qNode(0, 0)); while (!q.empty()) { qNode t = q.top(); q.pop(); if (isDone[t.id]) continue; int u = t.id, u_d = t.d; isDone[u] = true; for (vector<node>::iterator it = g[u].begin(); it != g[u].end(); ++it) { int v = it->v, w = it->w; if (isDone[v] || !inSection(level[v], a, b)) continue; if (d[u] + w < d[v]) { d[v] = d[u] + w; q.push(qNode(v, d[v])); } } } return d[1]; } void tMain() { scanf(\"%d%d\", &M, &N); for (int v = 1; v <= N; ++v) { scanf(\"%d%d%d\", &P, &L, &X); level[v] = L; g[0].push_back(node(v, P)); while (X--) { scanf(\"%d%d\", &T, &V); g[T].push_back(node(v, V)); } } LEVEL = level[1]; vector<int> ans; for (int a = LEVEL - M; a <= LEVEL; ++a) { int b = a + M; ans.push_back(dijkstra(a, b)); } printf(\"%d\\n\", *min_element(ans.begin(), ans.end())); } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"\u6602\u8d35\u7684\u8058\u793c"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%201062/#_1","text":"","title":"\u6602\u8d35\u7684\u8058\u793c"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%201062/#description","text":"\u5e74\u8f7b\u7684\u63a2\u9669\u5bb6\u6765\u5230\u4e86\u4e00\u4e2a\u5370\u7b2c\u5b89\u90e8\u843d\u91cc\u3002\u5728\u90a3\u91cc\u4ed6\u548c\u914b\u957f\u7684\u5973\u513f\u76f8\u7231\u4e86\uff0c\u4e8e\u662f\u4fbf\u5411\u914b\u957f\u53bb\u6c42\u4eb2\u3002\u914b\u957f\u8981\u4ed6\u752810000\u4e2a\u91d1\u5e01\u4f5c\u4e3a\u8058\u793c\u624d\u7b54\u5e94\u628a\u5973\u513f\u5ac1\u7ed9\u4ed6\u3002\u63a2\u9669\u5bb6\u62ff\u4e0d\u51fa\u8fd9\u4e48\u591a\u91d1\u5e01\uff0c\u4fbf\u8bf7\u6c42\u914b\u957f\u964d\u4f4e\u8981\u6c42\u3002\u914b\u957f\u8bf4\uff1a\"\u55ef\uff0c\u5982\u679c\u4f60\u80fd\u591f\u66ff\u6211\u5f04\u5230\u5927\u796d\u53f8\u7684\u76ae\u8884\uff0c\u6211\u53ef\u4ee5\u53ea\u89818000\u91d1\u5e01\u3002\u5982\u679c\u4f60\u80fd\u591f\u5f04\u6765\u4ed6\u7684\u6c34\u6676\u7403\uff0c\u90a3\u4e48\u53ea\u89815000\u91d1\u5e01\u5c31\u884c\u4e86\u3002\"\u63a2\u9669\u5bb6\u5c31\u8dd1\u5230\u5927\u796d\u53f8\u90a3\u91cc\uff0c\u5411\u4ed6\u8981\u6c42\u76ae\u8884\u6216\u6c34\u6676\u7403\uff0c\u5927\u796d\u53f8\u8981\u4ed6\u7528\u91d1\u5e01\u6765\u6362\uff0c\u6216\u8005\u66ff\u4ed6\u5f04\u6765\u5176\u4ed6\u7684\u4e1c\u897f\uff0c\u4ed6\u53ef\u4ee5\u964d\u4f4e\u4ef7\u683c\u3002\u63a2\u9669\u5bb6\u4e8e\u662f\u53c8\u8dd1\u5230\u5176\u4ed6\u5730\u65b9\uff0c\u5176\u4ed6\u4eba\u4e5f\u63d0\u51fa\u4e86\u7c7b\u4f3c\u7684\u8981\u6c42\uff0c\u6216\u8005\u76f4\u63a5\u7528\u91d1\u5e01\u6362\uff0c\u6216\u8005\u627e\u5230\u5176\u4ed6\u4e1c\u897f\u5c31\u53ef\u4ee5\u964d\u4f4e\u4ef7\u683c\u3002\u4e0d\u8fc7\u63a2\u9669\u5bb6\u6ca1\u5fc5\u8981\u7528\u591a\u6837\u4e1c\u897f\u53bb\u6362\u4e00\u6837\u4e1c\u897f\uff0c\u56e0\u4e3a\u4e0d\u4f1a\u5f97\u5230\u66f4\u4f4e\u7684\u4ef7\u683c\u3002\u63a2\u9669\u5bb6\u73b0\u5728\u5f88\u9700\u8981\u4f60\u7684\u5e2e\u5fd9\uff0c\u8ba9\u4ed6\u7528\u6700\u5c11\u7684\u91d1\u5e01\u5a36\u5230\u81ea\u5df1\u7684\u5fc3\u4e0a\u4eba\u3002\u53e6\u5916\u4ed6\u8981\u544a\u8bc9\u4f60\u7684\u662f\uff0c\u5728\u8fd9\u4e2a\u90e8\u843d\u91cc\uff0c\u7b49\u7ea7\u89c2\u5ff5\u5341\u5206\u68ee\u4e25\u3002\u5730\u4f4d\u5dee\u8ddd\u8d85\u8fc7\u4e00\u5b9a\u9650\u5236\u7684\u4e24\u4e2a\u4eba\u4e4b\u95f4\u4e0d\u4f1a\u8fdb\u884c\u4efb\u4f55\u5f62\u5f0f\u7684\u76f4\u63a5\u63a5\u89e6\uff0c\u5305\u62ec\u4ea4\u6613\u3002\u4ed6\u662f\u4e00\u4e2a\u5916\u6765\u4eba\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e0d\u53d7\u8fd9\u4e9b\u9650\u5236\u3002\u4f46\u662f\u5982\u679c\u4ed6\u548c\u67d0\u4e2a\u5730\u4f4d\u8f83\u4f4e\u7684\u4eba\u8fdb\u884c\u4e86\u4ea4\u6613\uff0c\u5730\u4f4d\u8f83\u9ad8\u7684\u7684\u4eba\u4e0d\u4f1a\u518d\u548c\u4ed6\u4ea4\u6613\uff0c\u4ed6\u4eec\u8ba4\u4e3a\u8fd9\u6837\u7b49\u4e8e\u662f\u95f4\u63a5\u63a5\u89e6\uff0c\u53cd\u8fc7\u6765\u4e5f\u4e00\u6837\u3002\u56e0\u6b64\u4f60\u9700\u8981\u5728\u8003\u8651\u6240\u6709\u7684\u60c5\u51b5\u4ee5\u540e\u7ed9\u4ed6\u63d0\u4f9b\u4e00\u4e2a\u6700\u597d\u7684\u65b9\u6848\u3002 \u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u628a\u6240\u6709\u7684\u7269\u54c1\u4ece1\u5f00\u59cb\u8fdb\u884c\u7f16\u53f7\uff0c\u914b\u957f\u7684\u5141\u8bfa\u4e5f\u770b\u4f5c\u4e00\u4e2a\u7269\u54c1\uff0c\u5e76\u4e14\u7f16\u53f7\u603b\u662f1\u3002\u6bcf\u4e2a\u7269\u54c1\u90fd\u6709\u5bf9\u5e94\u7684\u4ef7\u683cP\uff0c\u4e3b\u4eba\u7684\u5730\u4f4d\u7b49\u7ea7L\uff0c\u4ee5\u53ca\u4e00\u7cfb\u5217\u7684\u66ff\u4ee3\u54c1Ti\u548c\u8be5\u66ff\u4ee3\u54c1\u6240\u5bf9\u5e94\u7684\"\u4f18\u60e0\"Vi\u3002\u5982\u679c\u4e24\u4eba\u5730\u4f4d\u7b49\u7ea7\u5dee\u8ddd\u8d85\u8fc7\u4e86M\uff0c\u5c31\u4e0d\u80fd\"\u95f4\u63a5\u4ea4\u6613\"\u3002\u4f60\u5fc5\u987b\u6839\u636e\u8fd9\u4e9b\u6570\u636e\u6765\u8ba1\u7b97\u51fa\u63a2\u9669\u5bb6\u6700\u5c11\u9700\u8981\u591a\u5c11\u91d1\u5e01\u624d\u80fd\u5a36\u5230\u914b\u957f\u7684\u5973\u513f\u3002","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%201062/#input","text":"\u8f93\u5165\u7b2c\u4e00\u884c\u662f\u4e24\u4e2a\u6574\u6570M\uff0cN\uff081 <= N <= 100\uff09\uff0c\u4f9d\u6b21\u8868\u793a\u5730\u4f4d\u7b49\u7ea7\u5dee\u8ddd\u9650\u5236\u548c\u7269\u54c1\u7684\u603b\u6570\u3002\u63a5\u4e0b\u6765\u6309\u7167\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u7ed9\u51fa\u4e86N\u4e2a\u7269\u54c1\u7684\u63cf\u8ff0\u3002\u6bcf\u4e2a\u7269\u54c1\u7684\u63cf\u8ff0\u5f00\u5934\u662f\u4e09\u4e2a\u975e\u8d1f\u6574\u6570P\u3001L\u3001X\uff08X < N\uff09\uff0c\u4f9d\u6b21\u8868\u793a\u8be5\u7269\u54c1\u7684\u4ef7\u683c\u3001\u4e3b\u4eba\u7684\u5730\u4f4d\u7b49\u7ea7\u548c\u66ff\u4ee3\u54c1\u603b\u6570\u3002\u63a5\u4e0b\u6765X\u884c\u6bcf\u884c\u5305\u62ec\u4e24\u4e2a\u6574\u6570T\u548cV\uff0c\u5206\u522b\u8868\u793a\u66ff\u4ee3\u54c1\u7684\u7f16\u53f7\u548c\"\u4f18\u60e0\u4ef7\u683c\"\u3002","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%201062/#output","text":"\u8f93\u51fa\u6700\u5c11\u9700\u8981\u7684\u91d1\u5e01\u6570\u3002","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%201062/#sample-input","text":"1 4 10000 3 2 2 8000 3 5000 1000 2 1 4 200 3000 2 1 4 200 50 2 0","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%201062/#sample-output","text":"5250","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%201062/#code","text":"\u679a\u4e3e\u5408\u6cd5\u533a\u95f4\u8fdb\u884c\u6700\u77ed\u8def\u5bfb\u627e\u3002 #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 110, INF = 0x3f3f3f3f; int M, N, P, L, X, T, V, LEVEL; struct node { int v, w; node(int _v, int _w) : v(_v), w(_w) {} }; struct qNode { int id, d; qNode (int _id, int _d) : id(_id), d(_d) {} bool operator<(const qNode &a) const { return this->d > a.d; } }; vector<node> g[MAX_N]; int level[MAX_N]; inline bool inSection(int e, int a, int b) { return a <= e && e <= b; } int d[MAX_N]; bool isDone[MAX_N]; int dijkstra(int a, int b) { memset(d, 0x3f, sizeof(d)); memset(isDone, 0, sizeof(isDone)); priority_queue<qNode> q; d[0] = 0; q.push(qNode(0, 0)); while (!q.empty()) { qNode t = q.top(); q.pop(); if (isDone[t.id]) continue; int u = t.id, u_d = t.d; isDone[u] = true; for (vector<node>::iterator it = g[u].begin(); it != g[u].end(); ++it) { int v = it->v, w = it->w; if (isDone[v] || !inSection(level[v], a, b)) continue; if (d[u] + w < d[v]) { d[v] = d[u] + w; q.push(qNode(v, d[v])); } } } return d[1]; } void tMain() { scanf(\"%d%d\", &M, &N); for (int v = 1; v <= N; ++v) { scanf(\"%d%d%d\", &P, &L, &X); level[v] = L; g[0].push_back(node(v, P)); while (X--) { scanf(\"%d%d\", &T, &V); g[T].push_back(node(v, V)); } } LEVEL = level[1]; vector<int> ans; for (int a = LEVEL - M; a <= LEVEL; ++a) { int b = a + M; ans.push_back(dijkstra(a, b)); } printf(\"%d\\n\", *min_element(ans.begin(), ans.end())); } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%201511%20Invitation%20Cards/","text":"Invitation Cards Description In the age of television, not many people attend theater performances. Antique Comedians of Malidinesia are aware of this fact. They want to propagate theater and, most of all, Antique Comedies. They have printed invitation cards with all the necessary information and with the programme. A lot of students were hired to distribute these invitations among the people. Each student volunteer has assigned exactly one bus stop and he or she stays there the whole day and gives invitation to people travelling by bus. A special course was taken where students learned how to influence people and what is the difference between influencing and robbery. The transport system is very special: all lines are unidirectional and connect exactly two stops. Buses leave the originating stop with passangers each half an hour. After reaching the destination stop they return empty to the originating stop, where they wait until the next full half an hour, e.g. X:00 or X:30, where 'X' denotes the hour. The fee for transport between two stops is given by special tables and is payable on the spot. The lines are planned in such a way, that each round trip (i.e. a journey starting and finishing at the same stop) passes through a Central Checkpoint Stop (CCS) where each passenger has to pass a thorough check including body scan. All the ACM student members leave the CCS each morning. Each volunteer is to move to one predetermined stop to invite passengers. There are as many volunteers as stops. At the end of the day, all students travel back to CCS. You are to write a computer program that helps ACM to minimize the amount of money to pay every day for the transport of their employees. Input The input consists of N cases. The first line of the input contains only positive integer N. Then follow the cases. Each case begins with a line containing exactly two integers P and Q, 1 <= P,Q <= 1000000. P is the number of stops including CCS and Q the number of bus lines. Then there are Q lines, each describing one bus line. Each of the lines contains exactly three numbers - the originating stop, the destination stop and the price. The CCS is designated by number 1. Prices are positive integers the sum of which is smaller than 1000000000. You can also assume it is always possible to get from any stop to any other stop. Output For each case, print one line containing the minimum amount of money to be paid each day by ACM for the travel costs of its volunteers. Sample Input 2 2 2 1 2 13 2 1 33 4 6 1 2 10 2 1 60 1 3 20 3 4 10 2 4 5 4 1 50 Sample Output 46 210 Code spfa \u6216 \u5806\u4f18\u5316\u7684 dijkstra \u90fd\u884c\uff0c\u4f46\u6700\u597d\u7528\u94fe\u5f0f\u5411\u661f\u5b58\u50a8\u56fe\u3002 \u540c\u65f6\u4f7f\u7528 vector \u5b58\u6b63\u5411\u4e0e\u53cd\u5411\u56fe\u4f1a TLE\uff0c\u5176\u5b9e\u6211\u89c9\u5f97\u5e94\u8be5\u662f MLE\uff0c\u603b\u4e4b\u7528 vector \u7684\u8bdd\uff0c\u8981\u7701\u70b9\u7a7a\u95f4\u3002 \u94fe\u5f0f\u5411\u661f + spfa #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; typedef long long ll; const int MAX_N = 1000010, INF = 0x3f3f3f3f; int ra, fh; char rx; inline int read() { rx = getchar(), ra = 0, fh = 1; while ((rx < '0' || rx > '9') && rx != '-') rx = getchar(); if (rx == '-') fh = -1, rx = getchar(); while (rx >= '0' && rx <= '9') ra *= 10, ra += rx - 48, rx = getchar(); return ra * fh; } int T, N, M; struct node { int v, w, next; } edge[MAX_N], edgeR[MAX_N]; int head[MAX_N], headR[MAX_N]; int cnt, cntR; inline void init() { for (int i = 0; i < MAX_N; ++i) { head[i] = headR[i] = -1; edge[i].next = edgeR[i].next = -1; } cnt = cntR = 0; } inline void addEdge(int u, int v, int w) { edge[cnt].v = v; edgeR[cnt].v = u; edge[cnt].w = edgeR[cnt].w = w; edge[cnt].next = head[u]; edgeR[cnt].next = headR[v]; head[u] = headR[v] = cnt++; } int d[MAX_N]; bool inQ[MAX_N]; ll spfa(node *e, int *h) { queue<int> q; memset(d, 0x3f, sizeof(d)); memset(inQ, 0, sizeof(inQ)); d[1] = 0; q.push(1); inQ[1] = true; while (!q.empty()) { int u = q.front(); inQ[u] = false; q.pop(); for (int i = h[u]; ~i; i = e[i].next) { int v = e[i].v, w = e[i].w; if (d[u] + w < d[v]) { d[v] = d[u] + w; if (!inQ[v]) { q.push(v); inQ[v] = true; } } } } ll ans = 0; for (int v = 1; v <= N; ++v) ans += d[v]; return ans; } void tMain() { T = read(); while (T--) { N = read(), M = read(); init(); int u, v, w; while (M--) { u = read(), v = read(), w = read(); addEdge(u, v, w); } ll ans = spfa(edge, head); printf(\"%lld\\n\", ans + spfa(edgeR, headR)); } } int main() { #ifdef mytest FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; } dijkstra + vector #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; typedef long long ll; const int MAX_N = 1000010, INF = 0x3f3f3f3f; int ra, fh; char rx; inline int read() { rx = getchar(), ra = 0, fh = 1; while ((rx < '0' || rx > '9') && rx != '-') rx = getchar(); if (rx == '-') fh = -1, rx = getchar(); while (rx >= '0' && rx <= '9') ra *= 10, ra += rx - 48, rx = getchar(); return ra * fh; } int T, N, M; struct node { int v, w; node(int _v, int _w) : v(_v), w(_w) {} }; vector<node> g[MAX_N]; int d[MAX_N]; bool isDone[MAX_N]; struct cmp { bool operator() (int a, int b) { return d[a] > d[b]; } }; ll dijkstra() { memset(isDone, 0, sizeof(isDone)); memset(d, 0x3f, sizeof(d)); priority_queue<int, vector<int>, cmp> q; d[1] = 0; q.push(1); while (!q.empty()) { int u = q.top(); q.pop(); if (isDone[u]) continue; isDone[u] = true; for (int i = 0; i < g[u].size(); ++i) { int v = g[u][i].v, w = g[u][i].w; if (isDone[v]) continue; if (d[u] + w < d[v]) { d[v] = d[u] + w; q.push(v); } } } ll ans = 0; for (int v = 1; v <= N; ++v) ans += d[v]; return ans; } int u[MAX_N], v[MAX_N], w[MAX_N]; void tMain() { T = read(); while (T--) { N = read(), M = read(); for (int i = 1; i <= N; ++i) { g[i].clear(); } for (int i = 0; i < M; ++i) { u[i] = read(), v[i] = read(), w[i] = read(); g[u[i]].push_back(node(v[i], w[i])); } ll ans = dijkstra(); for (int i = 1; i <= N; ++i) { g[i].clear(); } for (int i = 0; i < M; ++i) { g[v[i]].push_back(node(u[i], w[i])); } printf(\"%lld\\n\", ans + dijkstra()); } } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Invitation Cards"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%201511%20Invitation%20Cards/#invitation-cards","text":"","title":"Invitation Cards"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%201511%20Invitation%20Cards/#description","text":"In the age of television, not many people attend theater performances. Antique Comedians of Malidinesia are aware of this fact. They want to propagate theater and, most of all, Antique Comedies. They have printed invitation cards with all the necessary information and with the programme. A lot of students were hired to distribute these invitations among the people. Each student volunteer has assigned exactly one bus stop and he or she stays there the whole day and gives invitation to people travelling by bus. A special course was taken where students learned how to influence people and what is the difference between influencing and robbery. The transport system is very special: all lines are unidirectional and connect exactly two stops. Buses leave the originating stop with passangers each half an hour. After reaching the destination stop they return empty to the originating stop, where they wait until the next full half an hour, e.g. X:00 or X:30, where 'X' denotes the hour. The fee for transport between two stops is given by special tables and is payable on the spot. The lines are planned in such a way, that each round trip (i.e. a journey starting and finishing at the same stop) passes through a Central Checkpoint Stop (CCS) where each passenger has to pass a thorough check including body scan. All the ACM student members leave the CCS each morning. Each volunteer is to move to one predetermined stop to invite passengers. There are as many volunteers as stops. At the end of the day, all students travel back to CCS. You are to write a computer program that helps ACM to minimize the amount of money to pay every day for the transport of their employees.","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%201511%20Invitation%20Cards/#input","text":"The input consists of N cases. The first line of the input contains only positive integer N. Then follow the cases. Each case begins with a line containing exactly two integers P and Q, 1 <= P,Q <= 1000000. P is the number of stops including CCS and Q the number of bus lines. Then there are Q lines, each describing one bus line. Each of the lines contains exactly three numbers - the originating stop, the destination stop and the price. The CCS is designated by number 1. Prices are positive integers the sum of which is smaller than 1000000000. You can also assume it is always possible to get from any stop to any other stop.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%201511%20Invitation%20Cards/#output","text":"For each case, print one line containing the minimum amount of money to be paid each day by ACM for the travel costs of its volunteers.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%201511%20Invitation%20Cards/#sample-input","text":"2 2 2 1 2 13 2 1 33 4 6 1 2 10 2 1 60 1 3 20 3 4 10 2 4 5 4 1 50","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%201511%20Invitation%20Cards/#sample-output","text":"46 210","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%201511%20Invitation%20Cards/#code","text":"spfa \u6216 \u5806\u4f18\u5316\u7684 dijkstra \u90fd\u884c\uff0c\u4f46\u6700\u597d\u7528\u94fe\u5f0f\u5411\u661f\u5b58\u50a8\u56fe\u3002 \u540c\u65f6\u4f7f\u7528 vector \u5b58\u6b63\u5411\u4e0e\u53cd\u5411\u56fe\u4f1a TLE\uff0c\u5176\u5b9e\u6211\u89c9\u5f97\u5e94\u8be5\u662f MLE\uff0c\u603b\u4e4b\u7528 vector \u7684\u8bdd\uff0c\u8981\u7701\u70b9\u7a7a\u95f4\u3002","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%201511%20Invitation%20Cards/#spfa","text":"#include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; typedef long long ll; const int MAX_N = 1000010, INF = 0x3f3f3f3f; int ra, fh; char rx; inline int read() { rx = getchar(), ra = 0, fh = 1; while ((rx < '0' || rx > '9') && rx != '-') rx = getchar(); if (rx == '-') fh = -1, rx = getchar(); while (rx >= '0' && rx <= '9') ra *= 10, ra += rx - 48, rx = getchar(); return ra * fh; } int T, N, M; struct node { int v, w, next; } edge[MAX_N], edgeR[MAX_N]; int head[MAX_N], headR[MAX_N]; int cnt, cntR; inline void init() { for (int i = 0; i < MAX_N; ++i) { head[i] = headR[i] = -1; edge[i].next = edgeR[i].next = -1; } cnt = cntR = 0; } inline void addEdge(int u, int v, int w) { edge[cnt].v = v; edgeR[cnt].v = u; edge[cnt].w = edgeR[cnt].w = w; edge[cnt].next = head[u]; edgeR[cnt].next = headR[v]; head[u] = headR[v] = cnt++; } int d[MAX_N]; bool inQ[MAX_N]; ll spfa(node *e, int *h) { queue<int> q; memset(d, 0x3f, sizeof(d)); memset(inQ, 0, sizeof(inQ)); d[1] = 0; q.push(1); inQ[1] = true; while (!q.empty()) { int u = q.front(); inQ[u] = false; q.pop(); for (int i = h[u]; ~i; i = e[i].next) { int v = e[i].v, w = e[i].w; if (d[u] + w < d[v]) { d[v] = d[u] + w; if (!inQ[v]) { q.push(v); inQ[v] = true; } } } } ll ans = 0; for (int v = 1; v <= N; ++v) ans += d[v]; return ans; } void tMain() { T = read(); while (T--) { N = read(), M = read(); init(); int u, v, w; while (M--) { u = read(), v = read(), w = read(); addEdge(u, v, w); } ll ans = spfa(edge, head); printf(\"%lld\\n\", ans + spfa(edgeR, headR)); } } int main() { #ifdef mytest FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"\u94fe\u5f0f\u5411\u661f + spfa"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%201511%20Invitation%20Cards/#dijkstra-vector","text":"#include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; typedef long long ll; const int MAX_N = 1000010, INF = 0x3f3f3f3f; int ra, fh; char rx; inline int read() { rx = getchar(), ra = 0, fh = 1; while ((rx < '0' || rx > '9') && rx != '-') rx = getchar(); if (rx == '-') fh = -1, rx = getchar(); while (rx >= '0' && rx <= '9') ra *= 10, ra += rx - 48, rx = getchar(); return ra * fh; } int T, N, M; struct node { int v, w; node(int _v, int _w) : v(_v), w(_w) {} }; vector<node> g[MAX_N]; int d[MAX_N]; bool isDone[MAX_N]; struct cmp { bool operator() (int a, int b) { return d[a] > d[b]; } }; ll dijkstra() { memset(isDone, 0, sizeof(isDone)); memset(d, 0x3f, sizeof(d)); priority_queue<int, vector<int>, cmp> q; d[1] = 0; q.push(1); while (!q.empty()) { int u = q.top(); q.pop(); if (isDone[u]) continue; isDone[u] = true; for (int i = 0; i < g[u].size(); ++i) { int v = g[u][i].v, w = g[u][i].w; if (isDone[v]) continue; if (d[u] + w < d[v]) { d[v] = d[u] + w; q.push(v); } } } ll ans = 0; for (int v = 1; v <= N; ++v) ans += d[v]; return ans; } int u[MAX_N], v[MAX_N], w[MAX_N]; void tMain() { T = read(); while (T--) { N = read(), M = read(); for (int i = 1; i <= N; ++i) { g[i].clear(); } for (int i = 0; i < M; ++i) { u[i] = read(), v[i] = read(), w[i] = read(); g[u[i]].push_back(node(v[i], w[i])); } ll ans = dijkstra(); for (int i = 1; i <= N; ++i) { g[i].clear(); } for (int i = 0; i < M; ++i) { g[v[i]].push_back(node(u[i], w[i])); } printf(\"%lld\\n\", ans + dijkstra()); } } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"dijkstra + vector"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%201860/","text":"Currency Exchange Description Several currency exchange points are working in our city. Let us suppose that each point specializes in two particular currencies and performs exchange operations only with these currencies. There can be several points specializing in the same pair of currencies. Each point has its own exchange rates, exchange rate of A to B is the quantity of B you get for 1A. Also each exchange point has some commission, the sum you have to pay for your exchange operation. Commission is always collected in source currency. For example, if you want to exchange 100 US Dollars into Russian Rubles at the exchange point, where the exchange rate is 29.75, and the commission is 0.39 you will get (100 - 0.39) * 29.75 = 2963.3975RUR. You surely know that there are N different currencies you can deal with in our city. Let us assign unique integer number from 1 to N to each currency. Then each exchange point can be described with 6 numbers: integer A and B - numbers of currencies it exchanges, and real RAB, CAB, RBA and CBA - exchange rates and commissions when exchanging A to B and B to A respectively. Nick has some money in currency S and wonders if he can somehow, after some exchange operations, increase his capital. Of course, he wants to have his money in currency S in the end. Help him to answer this difficult question. Nick must always have non-negative sum of money while making his operations. Input The first line of the input contains four numbers: N - the number of currencies, M - the number of exchange points, S - the number of currency Nick has and V - the quantity of currency units he has. The following M lines contain 6 numbers each - the description of the corresponding exchange point - in specified above order. Numbers are separated by one or more spaces. 1<=S<=N<=100, 1<=M<=100, V is real number, 0<=V<=103. For each point exchange rates and commissions are real, given with at most two digits after the decimal point, 10-2<=rate<=102, 0<=commission<=102. Let us call some sequence of the exchange operations simple if no exchange point is used more than once in this sequence. You may assume that ratio of the numeric values of the sums at the end and at the beginning of any simple sequence of the exchange operations will be less than 104. Output If Nick can increase his wealth, output YES, in other case output NO to the output file. Sample Input 3 2 1 20.0 1 2 1.00 1.00 1.00 1.00 2 3 1.10 1.00 1.10 1.00 Sample Output YES Code \u6700\u5927\u8def\u5f84\u5224\u65ad\u6b63\u73af\u548c\u6700\u5c0f\u8def\u5f84\u5224\u65ad\u8d1f\u73af\u4e00\u6837\u3002 \u8fb9\u7684\u6743\u503c\u4e0d\u597d\u5224\u65ad\uff0c\u4f46\u6743\u503c\u7684\u7d2f\u8ba1\u4e3a\u597d\u6c42\u3002 #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 110, INF = 0x3f3f3f3f; struct node { int v; double r, c; node(int _v, double _r, double _c) : v(_v), r(_r), c(_c) {} }; int N, M, S; double V; vector<node> g[MAX_N]; int cnt[MAX_N]; double d[MAX_N]; bool inQ[MAX_N]; void spfa() { queue<int> q; d[S] = V; q.push(S); inQ[S] = true; cnt[S] = 1; while (!q.empty()) { int u = q.front(); inQ[u] = false; q.pop(); for (vector<node>::iterator it = g[u].begin(); it != g[u].end(); ++it) { int v = it->v; double t = (d[u]- it->c) * it->r; if (d[v] < t) { d[v] = t; if (!inQ[v]) { q.push(v); inQ[v] = true; ++cnt[v]; if (cnt[v] > N) { puts(\"YES\"); return; } } } } } puts(\"NO\"); } void tMain() { scanf(\"%d%d%d%lf\", &N, &M, &S, &V); int u, v; double r, r1, c, c1; while (M--) { scanf(\"%d%d%lf%lf%lf%lf\", &u, &v, &r, &c, &r1, &c1); g[u].push_back(node(v, r, c)); g[v].push_back(node(u, r1, c1)); } spfa(); } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Currency Exchange"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%201860/#currency-exchange","text":"","title":"Currency Exchange"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%201860/#description","text":"Several currency exchange points are working in our city. Let us suppose that each point specializes in two particular currencies and performs exchange operations only with these currencies. There can be several points specializing in the same pair of currencies. Each point has its own exchange rates, exchange rate of A to B is the quantity of B you get for 1A. Also each exchange point has some commission, the sum you have to pay for your exchange operation. Commission is always collected in source currency. For example, if you want to exchange 100 US Dollars into Russian Rubles at the exchange point, where the exchange rate is 29.75, and the commission is 0.39 you will get (100 - 0.39) * 29.75 = 2963.3975RUR. You surely know that there are N different currencies you can deal with in our city. Let us assign unique integer number from 1 to N to each currency. Then each exchange point can be described with 6 numbers: integer A and B - numbers of currencies it exchanges, and real RAB, CAB, RBA and CBA - exchange rates and commissions when exchanging A to B and B to A respectively. Nick has some money in currency S and wonders if he can somehow, after some exchange operations, increase his capital. Of course, he wants to have his money in currency S in the end. Help him to answer this difficult question. Nick must always have non-negative sum of money while making his operations.","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%201860/#input","text":"The first line of the input contains four numbers: N - the number of currencies, M - the number of exchange points, S - the number of currency Nick has and V - the quantity of currency units he has. The following M lines contain 6 numbers each - the description of the corresponding exchange point - in specified above order. Numbers are separated by one or more spaces. 1<=S<=N<=100, 1<=M<=100, V is real number, 0<=V<=103. For each point exchange rates and commissions are real, given with at most two digits after the decimal point, 10-2<=rate<=102, 0<=commission<=102. Let us call some sequence of the exchange operations simple if no exchange point is used more than once in this sequence. You may assume that ratio of the numeric values of the sums at the end and at the beginning of any simple sequence of the exchange operations will be less than 104.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%201860/#output","text":"If Nick can increase his wealth, output YES, in other case output NO to the output file.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%201860/#sample-input","text":"3 2 1 20.0 1 2 1.00 1.00 1.00 1.00 2 3 1.10 1.00 1.10 1.00","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%201860/#sample-output","text":"YES","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%201860/#code","text":"\u6700\u5927\u8def\u5f84\u5224\u65ad\u6b63\u73af\u548c\u6700\u5c0f\u8def\u5f84\u5224\u65ad\u8d1f\u73af\u4e00\u6837\u3002 \u8fb9\u7684\u6743\u503c\u4e0d\u597d\u5224\u65ad\uff0c\u4f46\u6743\u503c\u7684\u7d2f\u8ba1\u4e3a\u597d\u6c42\u3002 #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 110, INF = 0x3f3f3f3f; struct node { int v; double r, c; node(int _v, double _r, double _c) : v(_v), r(_r), c(_c) {} }; int N, M, S; double V; vector<node> g[MAX_N]; int cnt[MAX_N]; double d[MAX_N]; bool inQ[MAX_N]; void spfa() { queue<int> q; d[S] = V; q.push(S); inQ[S] = true; cnt[S] = 1; while (!q.empty()) { int u = q.front(); inQ[u] = false; q.pop(); for (vector<node>::iterator it = g[u].begin(); it != g[u].end(); ++it) { int v = it->v; double t = (d[u]- it->c) * it->r; if (d[v] < t) { d[v] = t; if (!inQ[v]) { q.push(v); inQ[v] = true; ++cnt[v]; if (cnt[v] > N) { puts(\"YES\"); return; } } } } } puts(\"NO\"); } void tMain() { scanf(\"%d%d%d%lf\", &N, &M, &S, &V); int u, v; double r, r1, c, c1; while (M--) { scanf(\"%d%d%lf%lf%lf%lf\", &u, &v, &r, &c, &r1, &c1); g[u].push_back(node(v, r, c)); g[v].push_back(node(u, r1, c1)); } spfa(); } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203037%20Skiing/","text":"Skiing Description Bessie and the rest of Farmer John's cows are taking a trip this winter to go skiing. One day Bessie finds herself at the top left corner of an R (1 <= R <= 100) by C (1 <= C <= 100) grid of elevations E (-25 <= E <= 25). In order to join FJ and the other cows at a discow party, she must get down to the bottom right corner as quickly as she can by travelling only north, south, east, and west. Bessie starts out travelling at a initial speed V (1 <= V <= 1,000,000). She has discovered a remarkable relationship between her speed and her elevation change. When Bessie moves from a location of height A to an adjacent location of eight B, her speed is multiplied by the number 2^(A-B). The time it takes Bessie to travel from a location to an adjacent location is the reciprocal of her speed when she is at the first location. Find the both smallest amount of time it will take Bessie to join her cow friends. Input Line 1: Three space-separated integers: V, R, and C, which respectively represent Bessie's initial velocity and the number of rows and columns in the grid. Lines 2..R+1: C integers representing the elevation E of the corresponding location on the grid. Output A single number value, printed to two exactly decimal places: the minimum amount of time that Bessie can take to reach the bottom right corner of the grid. Sample Input 1 3 3 1 5 3 6 3 5 2 4 3 Sample Output 29.00 Code #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 110; const double INF = INFINITY; int V, R, C; struct qNode { int r, c; double d, v; qNode(int _r, int _c, double _d, double _v) : r(_r), c(_c), d(_d), v(_v) {} bool operator<(const qNode &a) const { return this->d > a.d; } }; double height[MAX_N][MAX_N]; inline bool inSection(int e, int a, int b) { return a <= e && e <= b; } double d[MAX_N][MAX_N]; bool isDone[MAX_N][MAX_N]; int direct[4][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}}; inline bool inRange(int e, int r) { return 0 <= e && e < r; } double dijkstra() { memset(isDone, 0, sizeof(isDone)); for (int i = 0; i < MAX_N; ++i) for (int j = 0; j < MAX_N; ++j) d[i][j] = INF; priority_queue<qNode> q; d[0][0] = 0; q.push(qNode(0, 0, 0, V)); while (!q.empty()) { qNode u = q.top(); q.pop(); if (isDone[u.r][u.c]) continue; isDone[u.r][u.c] = true; for (int i = 0; i < 4; ++i) { int vR = u.r + direct[i][0], vC = u.c + direct[i][1]; if (!inRange(vR, R) || !inRange(vC, C)) continue; if (isDone[vR][vC]) continue; if (1.0 / u.v + d[u.r][u.c] < d[vR][vC]) { d[vR][vC] = 1.0 / u.v + d[u.r][u.c]; double vV = pow(2, height[u.r][u.c] - height[vR][vC]) * u.v; q.push(qNode(vR, vC, d[vR][vC], vV)); } } } return d[R - 1][C - 1]; } void tMain() { scanf(\"%d%d%d\", &V, &R, &C); for (int i = 0; i < R; ++i) for (int j = 0; j < C; ++j) { scanf(\"%lf\", &height[i][j]); } printf(\"%0.2f\\n\", dijkstra()); } int main() { #ifdef mytest Test test; test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Skiing"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203037%20Skiing/#skiing","text":"","title":"Skiing"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203037%20Skiing/#description","text":"Bessie and the rest of Farmer John's cows are taking a trip this winter to go skiing. One day Bessie finds herself at the top left corner of an R (1 <= R <= 100) by C (1 <= C <= 100) grid of elevations E (-25 <= E <= 25). In order to join FJ and the other cows at a discow party, she must get down to the bottom right corner as quickly as she can by travelling only north, south, east, and west. Bessie starts out travelling at a initial speed V (1 <= V <= 1,000,000). She has discovered a remarkable relationship between her speed and her elevation change. When Bessie moves from a location of height A to an adjacent location of eight B, her speed is multiplied by the number 2^(A-B). The time it takes Bessie to travel from a location to an adjacent location is the reciprocal of her speed when she is at the first location. Find the both smallest amount of time it will take Bessie to join her cow friends.","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203037%20Skiing/#input","text":"Line 1: Three space-separated integers: V, R, and C, which respectively represent Bessie's initial velocity and the number of rows and columns in the grid. Lines 2..R+1: C integers representing the elevation E of the corresponding location on the grid.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203037%20Skiing/#output","text":"A single number value, printed to two exactly decimal places: the minimum amount of time that Bessie can take to reach the bottom right corner of the grid.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203037%20Skiing/#sample-input","text":"1 3 3 1 5 3 6 3 5 2 4 3","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203037%20Skiing/#sample-output","text":"29.00","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203037%20Skiing/#code","text":"#include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 110; const double INF = INFINITY; int V, R, C; struct qNode { int r, c; double d, v; qNode(int _r, int _c, double _d, double _v) : r(_r), c(_c), d(_d), v(_v) {} bool operator<(const qNode &a) const { return this->d > a.d; } }; double height[MAX_N][MAX_N]; inline bool inSection(int e, int a, int b) { return a <= e && e <= b; } double d[MAX_N][MAX_N]; bool isDone[MAX_N][MAX_N]; int direct[4][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}}; inline bool inRange(int e, int r) { return 0 <= e && e < r; } double dijkstra() { memset(isDone, 0, sizeof(isDone)); for (int i = 0; i < MAX_N; ++i) for (int j = 0; j < MAX_N; ++j) d[i][j] = INF; priority_queue<qNode> q; d[0][0] = 0; q.push(qNode(0, 0, 0, V)); while (!q.empty()) { qNode u = q.top(); q.pop(); if (isDone[u.r][u.c]) continue; isDone[u.r][u.c] = true; for (int i = 0; i < 4; ++i) { int vR = u.r + direct[i][0], vC = u.c + direct[i][1]; if (!inRange(vR, R) || !inRange(vC, C)) continue; if (isDone[vR][vC]) continue; if (1.0 / u.v + d[u.r][u.c] < d[vR][vC]) { d[vR][vC] = 1.0 / u.v + d[u.r][u.c]; double vV = pow(2, height[u.r][u.c] - height[vR][vC]) * u.v; q.push(qNode(vR, vC, d[vR][vC], vV)); } } } return d[R - 1][C - 1]; } void tMain() { scanf(\"%d%d%d\", &V, &R, &C); for (int i = 0; i < R; ++i) for (int j = 0; j < C; ++j) { scanf(\"%lf\", &height[i][j]); } printf(\"%0.2f\\n\", dijkstra()); } int main() { #ifdef mytest Test test; test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203159%20Candies/","text":"Candies Description During the kindergarten days, flymouse was the monitor of his class. Occasionally the head-teacher brought the kids of flymouse\u2019s class a large bag of candies and had flymouse distribute them. All the kids loved candies very much and often compared the numbers of candies they got with others. A kid A could had the idea that though it might be the case that another kid B was better than him in some aspect and therefore had a reason for deserving more candies than he did, he should never get a certain number of candies fewer than B did no matter how many candies he actually got, otherwise he would feel dissatisfied and go to the head-teacher to complain about flymouse\u2019s biased distribution. snoopy shared class with flymouse at that time. flymouse always compared the number of his candies with that of snoopy\u2019s. He wanted to make the difference between the numbers as large as possible while keeping every kid satisfied. Now he had just got another bag of candies from the head-teacher, what was the largest difference he could make out of it? Input The input contains a single test cases. The test cases starts with a line with two integers N and M not exceeding 30 000 and 150 000 respectively. N is the number of kids in the class and the kids were numbered 1 through N . snoopy and flymouse were always numbered 1 and N . Then follow M lines each holding three integers A , B and c in order, meaning that kid A believed that kid B should never get over c candies more than he did. Output Output one line with only the largest difference desired. The difference is guaranteed to be finite. Sample Input 2 2 1 2 5 2 1 4 Code \u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u53ca\u7ea6\u675f\u56fe\uff0c\u89c1\u7b97\u6cd5\u5bfc\u8bbap370-p372\uff0c\u6c42\u5176\u6700\u5927\u89e3\u5373\u6700\u77ed\u8def\u5f84\u3002 \u7528 dijkstra \u65f6\u5806\u4f18\u5316\u65f6\u4e0d\u8981\u7528 cmp \u5199\u6cd5\uff0c\u8fd9\u4e2a\u5199\u6cd5\u4f1a\u7834\u574f\u6700\u5c0f\u5806\u5185\u90e8\u7ed3\u6784\u3002 #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; typedef long long ll; const int MAX_N = 30010, MAX_M = 150010, INF = 0x3f3f3f3f; int N, M; int ra, fh; char rx; inline int read() { rx = getchar(), ra = 0, fh = 1; while ((rx < '0' || rx > '9') && rx != '-') rx = getchar(); if (rx == '-') fh = -1, rx = getchar(); while (rx >= '0' && rx <= '9') ra *= 10, ra += rx - 48, rx = getchar(); return ra * fh; } struct node { int v, w, next; } edge[MAX_M]; int head[MAX_N]; int cnt; inline void addEdge(int u, int v, int w) { edge[cnt].v = v; edge[cnt].w = w; edge[cnt].next = head[u]; head[u] = cnt++; } int d[MAX_N]; bool in[MAX_N]; int st[MAX_N], top; inline void push(int e) { st[top++] = e; } inline int pop() { return st[--top]; } void spfa() { memset(d, 0x3f, sizeof(d)); memset(in, 0, sizeof(in)); d[1] = 0; push(1); in[1] = true; while (top != 0) { int u = pop(); in[u] = false; for (int i = head[u]; ~i; i = edge[i].next) { int v = edge[i].v, w = edge[i].w; if (d[u] + w < d[v]) { d[v] = d[u] + w; if (!in[v]) { push(v); in[v] = true; } } } } } inline void tMain() { N = read(), M = read(); int u, v, w; memset(head, 0xff, sizeof(head)); while (M--) { u = read(), v = read(), w = read(); addEdge(u, v, w); } spfa(); printf(\"%d\\n\", d[N]); } #ifdef mytest //Test test; #endif int main() { #ifdef mytest // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Candies"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203159%20Candies/#candies","text":"","title":"Candies"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203159%20Candies/#description","text":"During the kindergarten days, flymouse was the monitor of his class. Occasionally the head-teacher brought the kids of flymouse\u2019s class a large bag of candies and had flymouse distribute them. All the kids loved candies very much and often compared the numbers of candies they got with others. A kid A could had the idea that though it might be the case that another kid B was better than him in some aspect and therefore had a reason for deserving more candies than he did, he should never get a certain number of candies fewer than B did no matter how many candies he actually got, otherwise he would feel dissatisfied and go to the head-teacher to complain about flymouse\u2019s biased distribution. snoopy shared class with flymouse at that time. flymouse always compared the number of his candies with that of snoopy\u2019s. He wanted to make the difference between the numbers as large as possible while keeping every kid satisfied. Now he had just got another bag of candies from the head-teacher, what was the largest difference he could make out of it?","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203159%20Candies/#input","text":"The input contains a single test cases. The test cases starts with a line with two integers N and M not exceeding 30 000 and 150 000 respectively. N is the number of kids in the class and the kids were numbered 1 through N . snoopy and flymouse were always numbered 1 and N . Then follow M lines each holding three integers A , B and c in order, meaning that kid A believed that kid B should never get over c candies more than he did.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203159%20Candies/#output","text":"Output one line with only the largest difference desired. The difference is guaranteed to be finite.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203159%20Candies/#sample-input","text":"2 2 1 2 5 2 1 4","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203159%20Candies/#code","text":"\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u53ca\u7ea6\u675f\u56fe\uff0c\u89c1\u7b97\u6cd5\u5bfc\u8bbap370-p372\uff0c\u6c42\u5176\u6700\u5927\u89e3\u5373\u6700\u77ed\u8def\u5f84\u3002 \u7528 dijkstra \u65f6\u5806\u4f18\u5316\u65f6\u4e0d\u8981\u7528 cmp \u5199\u6cd5\uff0c\u8fd9\u4e2a\u5199\u6cd5\u4f1a\u7834\u574f\u6700\u5c0f\u5806\u5185\u90e8\u7ed3\u6784\u3002 #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; typedef long long ll; const int MAX_N = 30010, MAX_M = 150010, INF = 0x3f3f3f3f; int N, M; int ra, fh; char rx; inline int read() { rx = getchar(), ra = 0, fh = 1; while ((rx < '0' || rx > '9') && rx != '-') rx = getchar(); if (rx == '-') fh = -1, rx = getchar(); while (rx >= '0' && rx <= '9') ra *= 10, ra += rx - 48, rx = getchar(); return ra * fh; } struct node { int v, w, next; } edge[MAX_M]; int head[MAX_N]; int cnt; inline void addEdge(int u, int v, int w) { edge[cnt].v = v; edge[cnt].w = w; edge[cnt].next = head[u]; head[u] = cnt++; } int d[MAX_N]; bool in[MAX_N]; int st[MAX_N], top; inline void push(int e) { st[top++] = e; } inline int pop() { return st[--top]; } void spfa() { memset(d, 0x3f, sizeof(d)); memset(in, 0, sizeof(in)); d[1] = 0; push(1); in[1] = true; while (top != 0) { int u = pop(); in[u] = false; for (int i = head[u]; ~i; i = edge[i].next) { int v = edge[i].v, w = edge[i].w; if (d[u] + w < d[v]) { d[v] = d[u] + w; if (!in[v]) { push(v); in[v] = true; } } } } } inline void tMain() { N = read(), M = read(); int u, v, w; memset(head, 0xff, sizeof(head)); while (M--) { u = read(), v = read(), w = read(); addEdge(u, v, w); } spfa(); printf(\"%d\\n\", d[N]); } #ifdef mytest //Test test; #endif int main() { #ifdef mytest // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203259/","text":"Wormholes Description While exploring his many farms, Farmer John has discovered a number of amazing wormholes. A wormhole is very peculiar because it is a one-way path that delivers you to its destination at a time that is BEFORE you entered the wormhole! Each of FJ's farms comprises N (1 \u2264 N \u2264 500) fields conveniently numbered 1.. N , M (1 \u2264 M \u2264 2500) paths, and W (1 \u2264 W \u2264 200) wormholes. As FJ is an avid time-traveling fan, he wants to do the following: start at some field, travel through some paths and wormholes, and return to the starting field a time before his initial departure. Perhaps he will be able to meet himself :) . To help FJ find out whether this is possible or not, he will supply you with complete maps to F (1 \u2264 F \u2264 5) of his farms. No paths will take longer than 10,000 seconds to travel and no wormhole can bring FJ back in time by more than 10,000 seconds. Input Line 1: A single integer, F . F farm descriptions follow. Line 1 of each farm: Three space-separated integers respectively: N , M , and W Lines 2.. M +1 of each farm: Three space-separated numbers ( S , E , T ) that describe, respectively: a bidirectional path between S and E that requires T seconds to traverse. Two fields might be connected by more than one path. Lines M +2.. M + W +1 of each farm: Three space-separated numbers ( S , E , T ) that describe, respectively: A one way path from S to E that also moves the traveler back T seconds. Output Lines 1.. F : For each farm, output \"YES\" if FJ can achieve his goal, otherwise output \"NO\" (do not include the quotes). Sample Input 2 3 3 1 1 2 2 1 3 4 2 3 1 3 1 3 3 2 1 1 2 3 2 3 4 3 1 8 Sample Output NO YES Code \u624d\u77e5\u9053 if-else \u6bd4 \u4e09\u76ee\u8fd0\u7b97\u7b26\u66f4\u5feb\u3002\u3002 #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 510, INF = 0x3f3f3f3f; int N, M, W, F, m[MAX_N][MAX_N]; void init() { memset(m, 0x3f, sizeof(m)); for (int i = 1; i <= N; ++i) m[i][i] = 0; } void floyd() { int t; for (int k = 1; k <= N; ++k) { for (int i = 1; i <= N; ++i) { if (m[i][k] == INF) continue; for (int j = 1; j <= N; ++j) { t = m[i][k] + m[k][j]; if (t < m[i][j]) { m[i][j] = t; } } if (m[i][i] < 0) { puts(\"YES\"); return; } } } puts(\"NO\"); } void tMain() { scanf(\"%d\", &F); while (F--) { scanf(\"%d%d%d\", &N, &M, &W); init(); int a, b, t; while (M--) { scanf(\"%d%d%d\", &a, &b, &t); if (t < m[a][b]) { m[a][b] = m[b][a] = t; } } while (W--) { scanf(\"%d%d%d\", &a, &b, &t); m[a][b] = -t; } floyd(); } } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Wormholes"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203259/#wormholes","text":"","title":"Wormholes"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203259/#description","text":"While exploring his many farms, Farmer John has discovered a number of amazing wormholes. A wormhole is very peculiar because it is a one-way path that delivers you to its destination at a time that is BEFORE you entered the wormhole! Each of FJ's farms comprises N (1 \u2264 N \u2264 500) fields conveniently numbered 1.. N , M (1 \u2264 M \u2264 2500) paths, and W (1 \u2264 W \u2264 200) wormholes. As FJ is an avid time-traveling fan, he wants to do the following: start at some field, travel through some paths and wormholes, and return to the starting field a time before his initial departure. Perhaps he will be able to meet himself :) . To help FJ find out whether this is possible or not, he will supply you with complete maps to F (1 \u2264 F \u2264 5) of his farms. No paths will take longer than 10,000 seconds to travel and no wormhole can bring FJ back in time by more than 10,000 seconds.","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203259/#input","text":"Line 1: A single integer, F . F farm descriptions follow. Line 1 of each farm: Three space-separated integers respectively: N , M , and W Lines 2.. M +1 of each farm: Three space-separated numbers ( S , E , T ) that describe, respectively: a bidirectional path between S and E that requires T seconds to traverse. Two fields might be connected by more than one path. Lines M +2.. M + W +1 of each farm: Three space-separated numbers ( S , E , T ) that describe, respectively: A one way path from S to E that also moves the traveler back T seconds.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203259/#output","text":"Lines 1.. F : For each farm, output \"YES\" if FJ can achieve his goal, otherwise output \"NO\" (do not include the quotes).","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203259/#sample-input","text":"2 3 3 1 1 2 2 1 3 4 2 3 1 3 1 3 3 2 1 1 2 3 2 3 4 3 1 8","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203259/#sample-output","text":"NO YES","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203259/#code","text":"\u624d\u77e5\u9053 if-else \u6bd4 \u4e09\u76ee\u8fd0\u7b97\u7b26\u66f4\u5feb\u3002\u3002 #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 510, INF = 0x3f3f3f3f; int N, M, W, F, m[MAX_N][MAX_N]; void init() { memset(m, 0x3f, sizeof(m)); for (int i = 1; i <= N; ++i) m[i][i] = 0; } void floyd() { int t; for (int k = 1; k <= N; ++k) { for (int i = 1; i <= N; ++i) { if (m[i][k] == INF) continue; for (int j = 1; j <= N; ++j) { t = m[i][k] + m[k][j]; if (t < m[i][j]) { m[i][j] = t; } } if (m[i][i] < 0) { puts(\"YES\"); return; } } } puts(\"NO\"); } void tMain() { scanf(\"%d\", &F); while (F--) { scanf(\"%d%d%d\", &N, &M, &W); init(); int a, b, t; while (M--) { scanf(\"%d%d%d\", &a, &b, &t); if (t < m[a][b]) { m[a][b] = m[b][a] = t; } } while (W--) { scanf(\"%d%d%d\", &a, &b, &t); m[a][b] = -t; } floyd(); } } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203615%20Cow%20Hurdles/","text":"Cow Hurdles Description Farmer John wants the cows to prepare for the county jumping competition, so Bessie and the gang are practicing jumping over hurdles. They are getting tired, though, so they want to be able to use as little energy as possible to jump over the hurdles. Obviously, it is not very difficult for a cow to jump over several very short hurdles, but one tall hurdle can be very stressful. Thus, the cows are only concerned about the height of the tallest hurdle they have to jump over. The cows' practice room has N (1 \u2264 N \u2264 300) stations, conveniently labeled 1.. N . A set of M (1 \u2264 M \u2264 25,000) one-way paths connects pairs of stations; the paths are also conveniently labeled 1.. M . Path i travels from station Si to station Ei and contains exactly one hurdle of height Hi (1 \u2264 Hi \u2264 1,000,000). Cows must jump hurdles in any path they traverse. The cows have T (1 \u2264 T \u2264 40,000) tasks to complete. Task i comprises two distinct numbers, Ai and Bi (1 \u2264 Ai \u2264 N ; 1 \u2264 Bi \u2264 N ), which connote that a cow has to travel from station Ai to station Bi (by traversing over one or more paths over some route). The cows want to take a path the minimizes the height of the tallest hurdle they jump over when traveling from Ai to Bi . Your job is to write a program that determines the path whose tallest hurdle is smallest and report that height. Input Line 1: Three space-separated integers: N , M , and T Lines 2.. M +1: Line i +1 contains three space-separated integers: Si , Ei , and Hi Lines M +2.. M + T +1: Line i + M +1 contains two space-separated integers that describe task i: Ai and Bi Output Lines 1.. T : Line i contains the result for task i and tells the smallest possible maximum height necessary to travel between the stations. Output -1 if it is impossible to travel between the two stations. Sample Input 5 6 3 1 2 12 3 2 8 1 3 5 2 5 3 3 4 4 2 4 8 3 4 1 2 5 1 Sample Output 4 8 -1 Code n \u6b21 dijkstra \u8d85\u65f6\uff0c\u7528 floyd\u3002 #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 310, INF = 0x3f3f3f3f; int g[MAX_N][MAX_N]; int d[MAX_N][MAX_N]; bool isDone[MAX_N]; int N, M, T; struct heapNode { int id, h; bool operator<(const heapNode &a) const { return h > a.h; } heapNode(int _id, int _h) : id(_id), h(_h) {} }; int dijkstra() { for (int a = 1; a <= N; ++a) { for (int i = 1; i <= N; ++i) d[a][i] = INF; memset(isDone, 0, sizeof(isDone)); priority_queue<heapNode> q; d[a][a] = 0; q.push(heapNode(a, d[a][a])); while (!q.empty()) { int u = q.top().id; q.pop(); if (isDone[u]) continue; isDone[u] = true; for (int v = 1; v <= N; ++v) { if (g[u][v] == INF || isDone[v]) { continue; } int t = max(d[a][u], g[u][v]); if (t < d[a][v]) { d[a][v] = t; q.push(heapNode(v, d[a][v])); } } } } } void floyd() { memcpy(d, g, sizeof(g)); for (int k = 1; k <= N; ++k) { for (int i = 1; i <= N; ++i) { if (d[i][k] == INF) continue; for (int j = 1; j <= N; ++j) { int t = d[i][k] > d[k][j] ? d[i][k] : d[k][j]; if (t < d[i][j]) { d[i][j] = t; } } } } } void tMain() { scanf(\"%d%d%d\", &N, &M, &T); int s, e, h; memset(g, 0x3f, sizeof(g)); while (M--) { scanf(\"%d%d%d\", &s, &e, &h); g[s][e] = h; } int a, b; // dijkstra(); floyd(); while (T--) { scanf(\"%d%d\", &a, &b); if (d[a][b] != INF) printf(\"%d\\n\", d[a][b]); else puts(\"-1\"); } } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Cow Hurdles"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203615%20Cow%20Hurdles/#cow-hurdles","text":"","title":"Cow Hurdles"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203615%20Cow%20Hurdles/#description","text":"Farmer John wants the cows to prepare for the county jumping competition, so Bessie and the gang are practicing jumping over hurdles. They are getting tired, though, so they want to be able to use as little energy as possible to jump over the hurdles. Obviously, it is not very difficult for a cow to jump over several very short hurdles, but one tall hurdle can be very stressful. Thus, the cows are only concerned about the height of the tallest hurdle they have to jump over. The cows' practice room has N (1 \u2264 N \u2264 300) stations, conveniently labeled 1.. N . A set of M (1 \u2264 M \u2264 25,000) one-way paths connects pairs of stations; the paths are also conveniently labeled 1.. M . Path i travels from station Si to station Ei and contains exactly one hurdle of height Hi (1 \u2264 Hi \u2264 1,000,000). Cows must jump hurdles in any path they traverse. The cows have T (1 \u2264 T \u2264 40,000) tasks to complete. Task i comprises two distinct numbers, Ai and Bi (1 \u2264 Ai \u2264 N ; 1 \u2264 Bi \u2264 N ), which connote that a cow has to travel from station Ai to station Bi (by traversing over one or more paths over some route). The cows want to take a path the minimizes the height of the tallest hurdle they jump over when traveling from Ai to Bi . Your job is to write a program that determines the path whose tallest hurdle is smallest and report that height.","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203615%20Cow%20Hurdles/#input","text":"Line 1: Three space-separated integers: N , M , and T Lines 2.. M +1: Line i +1 contains three space-separated integers: Si , Ei , and Hi Lines M +2.. M + T +1: Line i + M +1 contains two space-separated integers that describe task i: Ai and Bi","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203615%20Cow%20Hurdles/#output","text":"Lines 1.. T : Line i contains the result for task i and tells the smallest possible maximum height necessary to travel between the stations. Output -1 if it is impossible to travel between the two stations.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203615%20Cow%20Hurdles/#sample-input","text":"5 6 3 1 2 12 3 2 8 1 3 5 2 5 3 3 4 4 2 4 8 3 4 1 2 5 1","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203615%20Cow%20Hurdles/#sample-output","text":"4 8 -1","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/poj%203615%20Cow%20Hurdles/#code","text":"n \u6b21 dijkstra \u8d85\u65f6\uff0c\u7528 floyd\u3002 #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 310, INF = 0x3f3f3f3f; int g[MAX_N][MAX_N]; int d[MAX_N][MAX_N]; bool isDone[MAX_N]; int N, M, T; struct heapNode { int id, h; bool operator<(const heapNode &a) const { return h > a.h; } heapNode(int _id, int _h) : id(_id), h(_h) {} }; int dijkstra() { for (int a = 1; a <= N; ++a) { for (int i = 1; i <= N; ++i) d[a][i] = INF; memset(isDone, 0, sizeof(isDone)); priority_queue<heapNode> q; d[a][a] = 0; q.push(heapNode(a, d[a][a])); while (!q.empty()) { int u = q.top().id; q.pop(); if (isDone[u]) continue; isDone[u] = true; for (int v = 1; v <= N; ++v) { if (g[u][v] == INF || isDone[v]) { continue; } int t = max(d[a][u], g[u][v]); if (t < d[a][v]) { d[a][v] = t; q.push(heapNode(v, d[a][v])); } } } } } void floyd() { memcpy(d, g, sizeof(g)); for (int k = 1; k <= N; ++k) { for (int i = 1; i <= N; ++i) { if (d[i][k] == INF) continue; for (int j = 1; j <= N; ++j) { int t = d[i][k] > d[k][j] ? d[i][k] : d[k][j]; if (t < d[i][j]) { d[i][j] = t; } } } } } void tMain() { scanf(\"%d%d%d\", &N, &M, &T); int s, e, h; memset(g, 0x3f, sizeof(g)); while (M--) { scanf(\"%d%d%d\", &s, &e, &h); g[s][e] = h; } int a, b; // dijkstra(); floyd(); while (T--) { scanf(\"%d%d\", &a, &b); if (d[a][b] != INF) printf(\"%d\\n\", d[a][b]); else puts(\"-1\"); } } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%AC%A7%E6%8B%89%E8%B7%AF/poj%201780/","text":"Code Description KEY Inc., the leading company in security hardware, has developed a new kind of safe. To unlock it, you don't need a key but you are required to enter the correct n-digit code on a keypad (as if this were something new!). There are several models available, from toy safes for children (with a 2-digit code) to the military version (with a 6-digit code). The safe will open as soon as the last digit of the correct code is entered. There is no \"enter\" key. When you enter more than n digits, only the last n digits are significant. For example (in the 4-digit version), if the correct code is 4567, and you plan to enter the digit sequence 1234567890, the door will open as soon as you press the 7 key. The software to create this effect is rather simple. In the n-digit version the safe is always in one of 10n-1 internal states. The current state of the safe simply represents the last n-1 digits that have been entered. One of these states (in the example above, state 456) is marked as the unlocked state. If the safe is in the unlocked state and then the right key (in the example above, 7) is pressed, the door opens. Otherwise the safe shifts to the corresponding new state. For example, if the safe is in state 456 and then you press 8, the safe goes into state 568. A trivial strategy to open the safe is to enter all possible codes one after the other. In the worst case, however, this will require n * 10^n keystrokes. By choosing a good digit sequence it is possible to open the safe in at most 10^n + n - 1 keystrokes. All you have to do is to find a digit sequence that contains all n-digit sequences exactly once. KEY Inc. claims that for the military version (n=6) the fastest computers available today would need billions of years to find such a sequence - but apparently they don't know what some programmers are capable of... Input The input contains several test cases. Every test case is specified by an integer n. You may assume that 1<=n<=6. The last test case is followed by a zero. Output For each test case specified by n output a line containing a sequence of 10n + n - 1 digits that contains each n-digit sequence exactly once. Sample Input 1 2 0 Sample Output 0123456789 00102030405060708091121314151617181922324252627282933435363738394454647484955657585966768697787988990 Code \u7b2c\u4e00\u773c\u611f\u89c9\u662f\u6c42 10^n \u4e2a\u72b6\u6001\u7684\u54c8\u5bc6\u987f\u901a\u8def\uff0c\u4f46\u4e0d\u4f1a\u8bc1\u660e\u4e00\u5b9a\u5b58\u5728\u3002 \u5176\u5b9e\u8fd9\u9053\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6c42 10^(n-1) \u4e2a\u72b6\u6001\u56fe\u7684\u6b27\u62c9\u56de\u8def\uff0c\u8fd9\u6837\u6bcf\u4e2a\u8282\u70b9\u90fd\u548c\u5341\u4e2a\u8282\u70b9\u76f8\u8fde\uff0c\u8def\u5f84\u603b\u6570\u4e3a 10 * 10^(n-1) = 10^n \u521a\u597d\u4e3a\u603b\u72b6\u6001\u6570\u3002 poj \u8fd8\u662f\u5751\uff0c\u7528 stl \u7684\u6808\u4f1a\u8d85\u65f6\uff0c\u8981\u81ea\u5df1\u624b\u5de5\u5199\u6808\u3002 #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 1e6 + 10; int fc[7] = {1, 10, 100, 1000, 10000, 100000, 1000000}; int MOD, N; bool visit[MAX_N]; char res[MAX_N]; struct node { int u, v, rd; }; node mstack[MAX_N]; int res_p, top; inline void init() { memset(visit, 0, sizeof(visit)); memset(res, 0, sizeof(res)); memset(mstack, 0, sizeof(mstack)); MOD = fc[N]; top = -1; res_p = MOD + N - 2; } inline void res_add(char c) { res[res_p--] = c; } inline void stackPush(int _rd = 0, int _u = 0, int _v = 0) { ++top; mstack[top].rd = _rd; mstack[top].u = _u; mstack[top].v = _v; } void dfs() { node t; stackPush(-1, 0, 0); label0: t = mstack[top]; visit[t.u] = true; label1: while (t.v < 10) { int next = t.u * 10 % MOD + t.v; if (!visit[next]) { stackPush(0, next, 0); goto label0; } mstack[top].v = ++t.v; } res_add(t.u % 10 + '0'); switch (mstack[top].rd) { case -1: res_add('0' + t.u % 10); return; case 0: --top; ++mstack[top].v; t = mstack[top]; goto label1; } } void search() { dfs(); for (int i = 0; i < N - 1; ++i) res_add('0'); puts(res); } void tMain() { while (~scanf(\"%d\", &N) && N != 0) { if (N == 1) { puts(\"0123456789\"); continue; } init(); search(); } } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%AC%A7%E6%8B%89%E8%B7%AF/poj%201780/#code","text":"","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%AC%A7%E6%8B%89%E8%B7%AF/poj%201780/#description","text":"KEY Inc., the leading company in security hardware, has developed a new kind of safe. To unlock it, you don't need a key but you are required to enter the correct n-digit code on a keypad (as if this were something new!). There are several models available, from toy safes for children (with a 2-digit code) to the military version (with a 6-digit code). The safe will open as soon as the last digit of the correct code is entered. There is no \"enter\" key. When you enter more than n digits, only the last n digits are significant. For example (in the 4-digit version), if the correct code is 4567, and you plan to enter the digit sequence 1234567890, the door will open as soon as you press the 7 key. The software to create this effect is rather simple. In the n-digit version the safe is always in one of 10n-1 internal states. The current state of the safe simply represents the last n-1 digits that have been entered. One of these states (in the example above, state 456) is marked as the unlocked state. If the safe is in the unlocked state and then the right key (in the example above, 7) is pressed, the door opens. Otherwise the safe shifts to the corresponding new state. For example, if the safe is in state 456 and then you press 8, the safe goes into state 568. A trivial strategy to open the safe is to enter all possible codes one after the other. In the worst case, however, this will require n * 10^n keystrokes. By choosing a good digit sequence it is possible to open the safe in at most 10^n + n - 1 keystrokes. All you have to do is to find a digit sequence that contains all n-digit sequences exactly once. KEY Inc. claims that for the military version (n=6) the fastest computers available today would need billions of years to find such a sequence - but apparently they don't know what some programmers are capable of...","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%AC%A7%E6%8B%89%E8%B7%AF/poj%201780/#input","text":"The input contains several test cases. Every test case is specified by an integer n. You may assume that 1<=n<=6. The last test case is followed by a zero.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%AC%A7%E6%8B%89%E8%B7%AF/poj%201780/#output","text":"For each test case specified by n output a line containing a sequence of 10n + n - 1 digits that contains each n-digit sequence exactly once.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%AC%A7%E6%8B%89%E8%B7%AF/poj%201780/#sample-input","text":"1 2 0","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%AC%A7%E6%8B%89%E8%B7%AF/poj%201780/#sample-output","text":"0123456789 00102030405060708091121314151617181922324252627282933435363738394454647484955657585966768697787988990","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9B%BE%E8%AE%BA/%E6%AC%A7%E6%8B%89%E8%B7%AF/poj%201780/#code_1","text":"\u7b2c\u4e00\u773c\u611f\u89c9\u662f\u6c42 10^n \u4e2a\u72b6\u6001\u7684\u54c8\u5bc6\u987f\u901a\u8def\uff0c\u4f46\u4e0d\u4f1a\u8bc1\u660e\u4e00\u5b9a\u5b58\u5728\u3002 \u5176\u5b9e\u8fd9\u9053\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6c42 10^(n-1) \u4e2a\u72b6\u6001\u56fe\u7684\u6b27\u62c9\u56de\u8def\uff0c\u8fd9\u6837\u6bcf\u4e2a\u8282\u70b9\u90fd\u548c\u5341\u4e2a\u8282\u70b9\u76f8\u8fde\uff0c\u8def\u5f84\u603b\u6570\u4e3a 10 * 10^(n-1) = 10^n \u521a\u597d\u4e3a\u603b\u72b6\u6001\u6570\u3002 poj \u8fd8\u662f\u5751\uff0c\u7528 stl \u7684\u6808\u4f1a\u8d85\u65f6\uff0c\u8981\u81ea\u5df1\u624b\u5de5\u5199\u6808\u3002 #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 1e6 + 10; int fc[7] = {1, 10, 100, 1000, 10000, 100000, 1000000}; int MOD, N; bool visit[MAX_N]; char res[MAX_N]; struct node { int u, v, rd; }; node mstack[MAX_N]; int res_p, top; inline void init() { memset(visit, 0, sizeof(visit)); memset(res, 0, sizeof(res)); memset(mstack, 0, sizeof(mstack)); MOD = fc[N]; top = -1; res_p = MOD + N - 2; } inline void res_add(char c) { res[res_p--] = c; } inline void stackPush(int _rd = 0, int _u = 0, int _v = 0) { ++top; mstack[top].rd = _rd; mstack[top].u = _u; mstack[top].v = _v; } void dfs() { node t; stackPush(-1, 0, 0); label0: t = mstack[top]; visit[t.u] = true; label1: while (t.v < 10) { int next = t.u * 10 % MOD + t.v; if (!visit[next]) { stackPush(0, next, 0); goto label0; } mstack[top].v = ++t.v; } res_add(t.u % 10 + '0'); switch (mstack[top].rd) { case -1: res_add('0' + t.u % 10); return; case 0: --top; ++mstack[top].v; t = mstack[top]; goto label1; } } void search() { dfs(); for (int i = 0; i < N - 1; ++i) res_add('0'); puts(res); } void tMain() { while (~scanf(\"%d\", &N) && N != 0) { if (N == 1) { puts(\"0123456789\"); continue; } init(); search(); } } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/%E5%88%86%E6%B2%BB%E6%B3%95/poj%202388/","text":"Who's in the Middle Description FJ is surveying his herd to find the most average cow. He wants to know how much milk this 'median' cow gives: half of the cows give as much or more than the median; half give as much or less. Given an odd number of cows N (1 <= N < 10,000) and their milk output (1..1,000,000), find the median amount of milk given such that at least half the cows give the same amount of milk or more and at least half give the same or less. Input Line 1: A single integer N Lines 2..N+1: Each line contains a single integer that is the milk output of one cow. Output Line 1: A single integer that is the median milk output. Sample Input 5 2 4 1 3 5 Sample Output 3 Code #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 10010; int milk[MAX_N]; int N; void tMain() { scanf(\"%d\", &N); for (int i = 0; i < N; ++i) { scanf(\"%d\", &milk[i]); } nth_element(milk, milk + N / 2, milk+N); printf(\"%d\\n\", milk[N/2]); } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Who's in the Middle"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/%E5%88%86%E6%B2%BB%E6%B3%95/poj%202388/#whos-in-the-middle","text":"","title":"Who's in the Middle"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/%E5%88%86%E6%B2%BB%E6%B3%95/poj%202388/#description","text":"FJ is surveying his herd to find the most average cow. He wants to know how much milk this 'median' cow gives: half of the cows give as much or more than the median; half give as much or less. Given an odd number of cows N (1 <= N < 10,000) and their milk output (1..1,000,000), find the median amount of milk given such that at least half the cows give the same amount of milk or more and at least half give the same or less.","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/%E5%88%86%E6%B2%BB%E6%B3%95/poj%202388/#input","text":"Line 1: A single integer N Lines 2..N+1: Each line contains a single integer that is the milk output of one cow.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/%E5%88%86%E6%B2%BB%E6%B3%95/poj%202388/#output","text":"Line 1: A single integer that is the median milk output.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/%E5%88%86%E6%B2%BB%E6%B3%95/poj%202388/#sample-input","text":"5 2 4 1 3 5","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/%E5%88%86%E6%B2%BB%E6%B3%95/poj%202388/#sample-output","text":"3","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/%E5%88%86%E6%B2%BB%E6%B3%95/poj%202388/#code","text":"#include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 10010; int milk[MAX_N]; int N; void tMain() { scanf(\"%d\", &N); for (int i = 0; i < N; ++i) { scanf(\"%d\", &milk[i]); } nth_element(milk, milk + N / 2, milk+N); printf(\"%d\\n\", milk[N/2]); } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/%E8%B4%AA%E5%BF%83%E6%B3%95/poj%201089/","text":"Intervals Description There is given the series of n closed intervals [ai; bi], where i=1,2,...,n. The sum of those intervals may be represented as a sum of closed pairwise non\u2212intersecting intervals. The task is to find such representation with the minimal number of intervals. The intervals of this representation should be written in the output file in acceding order. We say that the intervals [a; b] and [c; d] are in ascending order if, and only if a <= b < c <= d. Task Write a program which: reads from the std input the description of the series of intervals, computes pairwise non\u2212intersecting intervals satisfying the conditions given above, writes the computed intervals in ascending order into std output Input In the first line of input there is one integer n, 3 <= n <= 50000. This is the number of intervals. In the (i+1)\u2212st line, 1 <= i <= n, there is a description of the interval [ai; bi] in the form of two integers ai and bi separated by a single space, which are respectively the beginning and the end of the interval,1 <= ai <= bi <= 1000000. Output The output should contain descriptions of all computed pairwise non\u2212intersecting intervals. In each line should be written a description of one interval. It should be composed of two integers, separated by a single space, the beginning and the end of the interval respectively. The intervals should be written into the output in ascending order. Sample Input 5 5 6 1 4 10 10 6 9 8 10 Sample Output 1 4 5 10 Code #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 50010; int N; struct node { int s, e; node(int _s = 0, int _e = 0) : s(_s), e(_e) {} }; bool operator< (const node &a, const node &b) { return a.s < b.s; } node input[MAX_N]; vector<node> ans; void tMain() { scanf(\"%d\", &N); for (int i = 0; i < N; ++i) { scanf(\"%d%d\", &input[i].s, &input[i].e); } sort(input, input + N); int prevS = input[0].s, prevE = input[0].e; for (int i = 1; i < N; ++i) { if (input[i].s <= prevE) { if (input[i].e > prevE) prevE = input[i].e; } else { ans.push_back(node(prevS, prevE)); prevS = input[i].s; prevE = input[i].e; } } ans.push_back(node(prevS, prevE)); for (int i = 0; i < ans.size(); ++i) { printf(\"%d %d\\n\", ans[i].s, ans[i].e); } } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Intervals"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/%E8%B4%AA%E5%BF%83%E6%B3%95/poj%201089/#intervals","text":"","title":"Intervals"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/%E8%B4%AA%E5%BF%83%E6%B3%95/poj%201089/#description","text":"There is given the series of n closed intervals [ai; bi], where i=1,2,...,n. The sum of those intervals may be represented as a sum of closed pairwise non\u2212intersecting intervals. The task is to find such representation with the minimal number of intervals. The intervals of this representation should be written in the output file in acceding order. We say that the intervals [a; b] and [c; d] are in ascending order if, and only if a <= b < c <= d. Task Write a program which: reads from the std input the description of the series of intervals, computes pairwise non\u2212intersecting intervals satisfying the conditions given above, writes the computed intervals in ascending order into std output","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/%E8%B4%AA%E5%BF%83%E6%B3%95/poj%201089/#input","text":"In the first line of input there is one integer n, 3 <= n <= 50000. This is the number of intervals. In the (i+1)\u2212st line, 1 <= i <= n, there is a description of the interval [ai; bi] in the form of two integers ai and bi separated by a single space, which are respectively the beginning and the end of the interval,1 <= ai <= bi <= 1000000.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/%E8%B4%AA%E5%BF%83%E6%B3%95/poj%201089/#output","text":"The output should contain descriptions of all computed pairwise non\u2212intersecting intervals. In each line should be written a description of one interval. It should be composed of two integers, separated by a single space, the beginning and the end of the interval respectively. The intervals should be written into the output in ascending order.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/%E8%B4%AA%E5%BF%83%E6%B3%95/poj%201089/#sample-input","text":"5 5 6 1 4 10 10 6 9 8 10","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/%E8%B4%AA%E5%BF%83%E6%B3%95/poj%201089/#sample-output","text":"1 4 5 10","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/%E8%B4%AA%E5%BF%83%E6%B3%95/poj%201089/#code","text":"#include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 50010; int N; struct node { int s, e; node(int _s = 0, int _e = 0) : s(_s), e(_e) {} }; bool operator< (const node &a, const node &b) { return a.s < b.s; } node input[MAX_N]; vector<node> ans; void tMain() { scanf(\"%d\", &N); for (int i = 0; i < N; ++i) { scanf(\"%d%d\", &input[i].s, &input[i].e); } sort(input, input + N); int prevS = input[0].s, prevE = input[0].e; for (int i = 1; i < N; ++i) { if (input[i].s <= prevE) { if (input[i].e > prevE) prevE = input[i].e; } else { ans.push_back(node(prevS, prevE)); prevS = input[i].s; prevE = input[i].e; } } ans.push_back(node(prevS, prevE)); for (int i = 0; i < ans.size(); ++i) { printf(\"%d %d\\n\", ans[i].s, ans[i].e); } } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/%E8%B4%AA%E5%BF%83%E6%B3%95/poj%201328/","text":"Radar Installation Description Assume the coasting is an infinite straight line. Land is in one side of coasting, sea in the other. Each small island is a point locating in the sea side. And any radar installation, locating on the coasting, can only cover d distance, so an island in the sea can be covered by a radius installation, if the distance between them is at most d. We use Cartesian coordinate system, defining the coasting is the x-axis. The sea side is above x-axis, and the land side below. Given the position of each island in the sea, and given the distance of the coverage of the radar installation, your task is to write a program to find the minimal number of radar installations to cover all the islands. Note that the position of an island is represented by its x-y coordinates. Figure A Sample Input of Radar Installations Input The input consists of several test cases. The first line of each case contains two integers n (1<=n<=1000) and d, where n is the number of islands in the sea and d is the distance of coverage of the radar installation. This is followed by n lines each containing two integers representing the coordinate of the position of each island. Then a blank line follows to separate the cases. The input is terminated by a line containing pair of zeros Output For each test case output one line consisting of the test case number followed by the minimal number of radar installations needed. \"-1\" installation means no solution for that case. Sample Input 3 2 1 2 -3 1 2 1 1 2 0 2 0 0 Sample Output Case 1: 2 Case 2: 1 Code #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; struct node { double start, end; node(double _s, double _e) : start(_s), end(_e) {} }; bool operator<(const node& a, const node& b) { return a.end < b.end; } vector<node> mvec; int N, D; inline void getLine(int x, int y) { double delta = sqrt(D*D - y*y); double s = x - delta, e = x + delta; mvec.push_back(node(s, e)); } void tMain() { int cnt = 1; while(scanf(\"%d%d\", &N, &D), N != 0 || D != 0) { printf(\"Case %d: \", cnt); int x, y; bool flag = false; mvec.clear(); while (N--) { scanf(\"%d%d\", &x, &y); if (y > D) flag = true; if (!flag) { getLine(x, y); } } if(!flag) { sort(mvec.begin(), mvec.end()); int ans = 0;double prevEnd = -9999999; for (vector<node>::iterator it = mvec.begin(); it != mvec.end(); ++it) { if (it->start > prevEnd) { ++ans; prevEnd = it->end; } } printf(\"%d\\n\", ans); } else { printf(\"-1\\n\"); } ++cnt; } } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Radar Installation"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/%E8%B4%AA%E5%BF%83%E6%B3%95/poj%201328/#radar-installation","text":"","title":"Radar Installation"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/%E8%B4%AA%E5%BF%83%E6%B3%95/poj%201328/#description","text":"Assume the coasting is an infinite straight line. Land is in one side of coasting, sea in the other. Each small island is a point locating in the sea side. And any radar installation, locating on the coasting, can only cover d distance, so an island in the sea can be covered by a radius installation, if the distance between them is at most d. We use Cartesian coordinate system, defining the coasting is the x-axis. The sea side is above x-axis, and the land side below. Given the position of each island in the sea, and given the distance of the coverage of the radar installation, your task is to write a program to find the minimal number of radar installations to cover all the islands. Note that the position of an island is represented by its x-y coordinates. Figure A Sample Input of Radar Installations","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/%E8%B4%AA%E5%BF%83%E6%B3%95/poj%201328/#input","text":"The input consists of several test cases. The first line of each case contains two integers n (1<=n<=1000) and d, where n is the number of islands in the sea and d is the distance of coverage of the radar installation. This is followed by n lines each containing two integers representing the coordinate of the position of each island. Then a blank line follows to separate the cases. The input is terminated by a line containing pair of zeros","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/%E8%B4%AA%E5%BF%83%E6%B3%95/poj%201328/#output","text":"For each test case output one line consisting of the test case number followed by the minimal number of radar installations needed. \"-1\" installation means no solution for that case.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/%E8%B4%AA%E5%BF%83%E6%B3%95/poj%201328/#sample-input","text":"3 2 1 2 -3 1 2 1 1 2 0 2 0 0","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/%E8%B4%AA%E5%BF%83%E6%B3%95/poj%201328/#sample-output","text":"Case 1: 2 Case 2: 1","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/%E8%B4%AA%E5%BF%83%E6%B3%95/poj%201328/#code","text":"#include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; struct node { double start, end; node(double _s, double _e) : start(_s), end(_e) {} }; bool operator<(const node& a, const node& b) { return a.end < b.end; } vector<node> mvec; int N, D; inline void getLine(int x, int y) { double delta = sqrt(D*D - y*y); double s = x - delta, e = x + delta; mvec.push_back(node(s, e)); } void tMain() { int cnt = 1; while(scanf(\"%d%d\", &N, &D), N != 0 || D != 0) { printf(\"Case %d: \", cnt); int x, y; bool flag = false; mvec.clear(); while (N--) { scanf(\"%d%d\", &x, &y); if (y > D) flag = true; if (!flag) { getLine(x, y); } } if(!flag) { sort(mvec.begin(), mvec.end()); int ans = 0;double prevEnd = -9999999; for (vector<node>::iterator it = mvec.begin(); it != mvec.end(); ++it) { if (it->start > prevEnd) { ++ans; prevEnd = it->end; } } printf(\"%d\\n\", ans); } else { printf(\"-1\\n\"); } ++cnt; } } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP/poj%201961%20Period/","text":"Period Time Limit: 3000MS Memory Limit: 30000K Total Submissions: 25106 Accepted: 11994 Description For each prefix of a given string S with N characters (each character has an ASCII code between 97 and 126, inclusive), we want to know whether the prefix is a periodic string. That is, for each i (2 <= i <= N) we want to know the largest K > 1 (if there is one) such that the prefix of S with length i can be written as AK ,that is A concatenated K times, for some string A. Of course, we also want to know the period K. Input The input consists of several test cases. Each test case consists of two lines. The first one contains N (2 <= N <= 1 000 000) \u2013 the size of the string S.The second line contains the string S. The input file ends with a line, having the number zero on it. Output For each test case, output \"Test case #\" and the consecutive test case number on a single line; then, for each prefix with length i that has a period K > 1, output the prefix size i and the period K separated by a single space; the prefix sizes must be in increasing order. Print a blank line after each test case. Sample Input 3 aaa 12 aabaabaabaab 0 Sample Output Test case #1 2 2 3 3 Test case #2 2 2 6 2 9 3 12 4 Code //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <cassert> #include <set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; const int MAX_N = 1e6 + 10; char p[MAX_N]; int nt[MAX_N], l; void buildNext() { int i = 0, t; t = nt[0] = -1; while (i < l) { if (t < 0 || p[i] == p[t]) { ++t, ++i; nt[i] = t; } else t = nt[t]; } } inline void tMain() { int cnt = 0; while (scanf(\"%d%*c\", &l), l != 0) { scanf(\"%s\", p); printf(\"Test case #%d\\n\", ++cnt); buildNext(); for (int i = 2; i <= l; ++i) { int t = i - nt[i]; if (i % t == 0 && i / t != 1) { printf(\"%d %d\\n\", i, i / t); continue; } } putchar(10); } } int main() { #ifdef mytest test.run(); freopen(\"../main.out\", \"w\", stdout); freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Period"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP/poj%201961%20Period/#period","text":"Time Limit: 3000MS Memory Limit: 30000K Total Submissions: 25106 Accepted: 11994","title":"Period"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP/poj%201961%20Period/#description","text":"For each prefix of a given string S with N characters (each character has an ASCII code between 97 and 126, inclusive), we want to know whether the prefix is a periodic string. That is, for each i (2 <= i <= N) we want to know the largest K > 1 (if there is one) such that the prefix of S with length i can be written as AK ,that is A concatenated K times, for some string A. Of course, we also want to know the period K.","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP/poj%201961%20Period/#input","text":"The input consists of several test cases. Each test case consists of two lines. The first one contains N (2 <= N <= 1 000 000) \u2013 the size of the string S.The second line contains the string S. The input file ends with a line, having the number zero on it.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP/poj%201961%20Period/#output","text":"For each test case, output \"Test case #\" and the consecutive test case number on a single line; then, for each prefix with length i that has a period K > 1, output the prefix size i and the period K separated by a single space; the prefix sizes must be in increasing order. Print a blank line after each test case.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP/poj%201961%20Period/#sample-input","text":"3 aaa 12 aabaabaabaab 0","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP/poj%201961%20Period/#sample-output","text":"Test case #1 2 2 3 3 Test case #2 2 2 6 2 9 3 12 4","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP/poj%201961%20Period/#code","text":"//#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <cassert> #include <set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; const int MAX_N = 1e6 + 10; char p[MAX_N]; int nt[MAX_N], l; void buildNext() { int i = 0, t; t = nt[0] = -1; while (i < l) { if (t < 0 || p[i] == p[t]) { ++t, ++i; nt[i] = t; } else t = nt[t]; } } inline void tMain() { int cnt = 0; while (scanf(\"%d%*c\", &l), l != 0) { scanf(\"%s\", p); printf(\"Test case #%d\\n\", ++cnt); buildNext(); for (int i = 2; i <= l; ++i) { int t = i - nt[i]; if (i % t == 0 && i / t != 1) { printf(\"%d %d\\n\", i, i / t); continue; } } putchar(10); } } int main() { #ifdef mytest test.run(); freopen(\"../main.out\", \"w\", stdout); freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP/poj%202406%20Power%20Strings/","text":"Power Strings Time Limit: 3000MS Memory Limit: 65536K Total Submissions: 77371 Accepted: 31869 Description Given two strings a and b we define a b to be their concatenation. For example, if a = \"abc\" and b = \"def\" then a b = \"abcdef\". If we think of concatenation as multiplication, exponentiation by a non-negative integer is defined in the normal way: a^0 = \"\" (the empty string) and a^(n+1) = a*(a^n). Input Each test case is a line of input representing s, a string of printable characters. The length of s will be at least 1 and will not exceed 1 million characters. A line containing a period follows the last test case. Output For each s you should print the largest n such that s = a^n for some string a. Sample Input abcd aaaa ababab . Sample Output 1 4 3 Code //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <cassert> #include <set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; const int MAX_N = 1e6 + 10; char p[MAX_N]; int nt[MAX_N]; int l; void buildNext() { l = strlen(p); int t = nt[0] = -1, i = 0; while (i < l) { if (t < 0 || p[i] == p[t]) { ++i, ++t; nt[i] = t; } else t = nt[t]; } } inline void tMain() { while (scanf(\"%s\", p)) { if (p[0] == '.' && p[1] == '\\0') break; buildNext(); if (l % (l - nt[l]) == 0) printf(\"%d\\n\", l / (l - nt[l])); else puts(\"1\"); } } int main() { #ifdef mytest test.run(); freopen(\"../main.out\", \"w\", stdout); freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Power Strings"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP/poj%202406%20Power%20Strings/#power-strings","text":"Time Limit: 3000MS Memory Limit: 65536K Total Submissions: 77371 Accepted: 31869","title":"Power Strings"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP/poj%202406%20Power%20Strings/#description","text":"Given two strings a and b we define a b to be their concatenation. For example, if a = \"abc\" and b = \"def\" then a b = \"abcdef\". If we think of concatenation as multiplication, exponentiation by a non-negative integer is defined in the normal way: a^0 = \"\" (the empty string) and a^(n+1) = a*(a^n).","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP/poj%202406%20Power%20Strings/#input","text":"Each test case is a line of input representing s, a string of printable characters. The length of s will be at least 1 and will not exceed 1 million characters. A line containing a period follows the last test case.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP/poj%202406%20Power%20Strings/#output","text":"For each s you should print the largest n such that s = a^n for some string a.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP/poj%202406%20Power%20Strings/#sample-input","text":"abcd aaaa ababab .","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP/poj%202406%20Power%20Strings/#sample-output","text":"1 4 3","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP/poj%202406%20Power%20Strings/#code","text":"//#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <cassert> #include <set> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> using namespace std; const int MAX_N = 1e6 + 10; char p[MAX_N]; int nt[MAX_N]; int l; void buildNext() { l = strlen(p); int t = nt[0] = -1, i = 0; while (i < l) { if (t < 0 || p[i] == p[t]) { ++i, ++t; nt[i] = t; } else t = nt[t]; } } inline void tMain() { while (scanf(\"%s\", p)) { if (p[0] == '.' && p[1] == '\\0') break; buildNext(); if (l % (l - nt[l]) == 0) printf(\"%d\\n\", l / (l - nt[l])); else puts(\"1\"); } } int main() { #ifdef mytest test.run(); freopen(\"../main.out\", \"w\", stdout); freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%201077/","text":"Eight Description The 15-puzzle has been around for over 100 years; even if you don't know it by that name, you've seen it. It is constructed with 15 sliding tiles, each with a number from 1 to 15 on it, and all packed into a 4 by 4 frame with one tile missing. Let's call the missing tile 'x'; the object of the puzzle is to arrange the tiles so that they are ordered as: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 x where the only legal operation is to exchange 'x' with one of the tiles with which it shares an edge. As an example, the following sequence of moves solves a slightly scrambled puzzle: 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 5 6 7 8 5 6 7 8 5 6 7 8 5 6 7 8 9 x 10 12 9 10 x 12 9 10 11 12 9 10 11 12 13 14 11 15 13 14 11 15 13 14 x 15 13 14 15 x r-> d-> r-> The letters in the previous row indicate which neighbor of the 'x' tile is swapped with the 'x' tile at each step; legal values are 'r','l','u' and 'd', for right, left, up, and down, respectively. Not all puzzles can be solved; in 1870, a man named Sam Loyd was famous for distributing an unsolvable version of the puzzle, and frustrating many people. In fact, all you have to do to make a regular puzzle into an unsolvable one is to swap two tiles (not counting the missing 'x' tile, of course). In this problem, you will write a program for solving the less well-known 8-puzzle, composed of tiles on a three by three arrangement. Input You will receive a description of a configuration of the 8 puzzle. The description is just a list of the tiles in their initial positions, with the rows listed from top to bottom, and the tiles listed from left to right within a row, where the tiles are represented by numbers 1 to 8, plus 'x'. For example, this puzzle 1 2 3 x 4 6 7 5 8 is described by this list: 1 2 3 x 4 6 7 5 8 Output You will print to standard output either the word \"unsolvable\", if the puzzle has no solution, or a string consisting entirely of the letters 'r', 'l', 'u' and 'd' that describes a series of moves that produce a solution. The string should include no spaces and start at the beginning of the line. Sample Input 2 3 4 1 5 x 7 6 8 Sample Output ullddrurdllurdruldr Code \u5b58\u5728\u591a\u89e3\u7684\u60c5\u51b5\uff0c\u7ecf\u6d4b\u8bd5\uff0c\u8f93\u51fa\u5176\u4e2d\u4efb\u610f\u4e00\u89e3\u5373\u53ef\u3002 \u7eaf bfs \u5b58\u50a8\u72b6\u6001\u6700\u597d\u7528 char \u6570\u7ec4\uff0c\u7528 string \u5bb9\u6613\u8d85\u65f6\uff0c\u6700\u597d\u8fd8\u662f\u4f7f\u7528 A* \u7b97\u6cd5\u3002 #include <algorithm> #include <cstdio> #include <cstring> #include <iostream> #include <queue> using namespace std; //#define mytest #ifdef mytest auto fp = freopen(\"test.in\", \"r\", stdin); #endif const int fact[] = { 1, 1, 2, 6, 24, 120, 720, 5040, 40320, }; bool visit[362880] = {false}; int cantor(char *str) { int res = 0; for (int i = 0; i < 9; ++i) { int cnt = 0; for (int j = i + 1; j < 9; ++j) { if (str[j] < str[i]) { ++cnt; } } res += cnt * fact[8 - i]; } return res; } struct node { char oper; char mstr[9]; node *p; int hx; node(char _oper, node *_p, int _hx) : oper(_oper), p(_p), hx(_hx) {} }; int dir[4][2] = {{0, -1}, {-1, 0}, {0, 1}, {1, 0}}; char op[4] = {'u', 'l', 'd', 'r'}; inline int getX(int x) { return x % 3; } inline int getY(int x) { return x / 3; } node *root = new node('0', NULL, -1); node *bfs() { queue<node *> q; int id = cantor(root->mstr); if (id == 0) return root; visit[id] = true; q.push(root); while (!q.empty()) { node *f = q.front(); q.pop(); vector<node*> rank; for (int i = 0; i < 4; ++i) { char mstr[9]; memcpy(mstr, f->mstr, sizeof(f->mstr)); int j = 0; for (; j < 9; ++j) { if (mstr[j] == '9') { break; } } int y = getY(j), x = getX(j); x += dir[i][0]; y += dir[i][1]; if (0 <= x && x <= 2 && 0 <= y && y <= 2) { int t = x + 3 * y; swap(mstr[t], mstr[j]); int tid = cantor(mstr); if (!visit[tid]) { node *tn = new node(op[i], f, 0); memcpy(tn->mstr, mstr, sizeof(mstr)); if (tid == 0) return tn; visit[tid] = true; q.push(tn); } } } } return NULL; } void printPath(node *cur) { if (cur != root) { printPath(cur->p); cout << cur->oper; } } int main() { ios::sync_with_stdio(false); cin.tie(0); for (int i = 0; i < 9; ++i) { char j; cin >> j; if (j != 'x') { root->mstr[i] = j; } else { root->mstr[i] = '9'; } } #ifdef mytest auto start = clock(); node *e = bfs(); if (e) { printPath(e); } else { cout << \"unsolvable\"; } cout << endl; auto end = clock(); cout << (double)(end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest node *e = bfs(); if (e) { printPath(e); } else { cout << \"unsolvable\"; } cout << endl; #endif return 0; }","title":"Eight"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%201077/#eight","text":"","title":"Eight"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%201077/#description","text":"The 15-puzzle has been around for over 100 years; even if you don't know it by that name, you've seen it. It is constructed with 15 sliding tiles, each with a number from 1 to 15 on it, and all packed into a 4 by 4 frame with one tile missing. Let's call the missing tile 'x'; the object of the puzzle is to arrange the tiles so that they are ordered as: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 x where the only legal operation is to exchange 'x' with one of the tiles with which it shares an edge. As an example, the following sequence of moves solves a slightly scrambled puzzle: 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 5 6 7 8 5 6 7 8 5 6 7 8 5 6 7 8 9 x 10 12 9 10 x 12 9 10 11 12 9 10 11 12 13 14 11 15 13 14 11 15 13 14 x 15 13 14 15 x r-> d-> r-> The letters in the previous row indicate which neighbor of the 'x' tile is swapped with the 'x' tile at each step; legal values are 'r','l','u' and 'd', for right, left, up, and down, respectively. Not all puzzles can be solved; in 1870, a man named Sam Loyd was famous for distributing an unsolvable version of the puzzle, and frustrating many people. In fact, all you have to do to make a regular puzzle into an unsolvable one is to swap two tiles (not counting the missing 'x' tile, of course). In this problem, you will write a program for solving the less well-known 8-puzzle, composed of tiles on a three by three arrangement.","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%201077/#input","text":"You will receive a description of a configuration of the 8 puzzle. The description is just a list of the tiles in their initial positions, with the rows listed from top to bottom, and the tiles listed from left to right within a row, where the tiles are represented by numbers 1 to 8, plus 'x'. For example, this puzzle 1 2 3 x 4 6 7 5 8 is described by this list: 1 2 3 x 4 6 7 5 8","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%201077/#output","text":"You will print to standard output either the word \"unsolvable\", if the puzzle has no solution, or a string consisting entirely of the letters 'r', 'l', 'u' and 'd' that describes a series of moves that produce a solution. The string should include no spaces and start at the beginning of the line.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%201077/#sample-input","text":"2 3 4 1 5 x 7 6 8","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%201077/#sample-output","text":"ullddrurdllurdruldr","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%201077/#code","text":"\u5b58\u5728\u591a\u89e3\u7684\u60c5\u51b5\uff0c\u7ecf\u6d4b\u8bd5\uff0c\u8f93\u51fa\u5176\u4e2d\u4efb\u610f\u4e00\u89e3\u5373\u53ef\u3002 \u7eaf bfs \u5b58\u50a8\u72b6\u6001\u6700\u597d\u7528 char \u6570\u7ec4\uff0c\u7528 string \u5bb9\u6613\u8d85\u65f6\uff0c\u6700\u597d\u8fd8\u662f\u4f7f\u7528 A* \u7b97\u6cd5\u3002 #include <algorithm> #include <cstdio> #include <cstring> #include <iostream> #include <queue> using namespace std; //#define mytest #ifdef mytest auto fp = freopen(\"test.in\", \"r\", stdin); #endif const int fact[] = { 1, 1, 2, 6, 24, 120, 720, 5040, 40320, }; bool visit[362880] = {false}; int cantor(char *str) { int res = 0; for (int i = 0; i < 9; ++i) { int cnt = 0; for (int j = i + 1; j < 9; ++j) { if (str[j] < str[i]) { ++cnt; } } res += cnt * fact[8 - i]; } return res; } struct node { char oper; char mstr[9]; node *p; int hx; node(char _oper, node *_p, int _hx) : oper(_oper), p(_p), hx(_hx) {} }; int dir[4][2] = {{0, -1}, {-1, 0}, {0, 1}, {1, 0}}; char op[4] = {'u', 'l', 'd', 'r'}; inline int getX(int x) { return x % 3; } inline int getY(int x) { return x / 3; } node *root = new node('0', NULL, -1); node *bfs() { queue<node *> q; int id = cantor(root->mstr); if (id == 0) return root; visit[id] = true; q.push(root); while (!q.empty()) { node *f = q.front(); q.pop(); vector<node*> rank; for (int i = 0; i < 4; ++i) { char mstr[9]; memcpy(mstr, f->mstr, sizeof(f->mstr)); int j = 0; for (; j < 9; ++j) { if (mstr[j] == '9') { break; } } int y = getY(j), x = getX(j); x += dir[i][0]; y += dir[i][1]; if (0 <= x && x <= 2 && 0 <= y && y <= 2) { int t = x + 3 * y; swap(mstr[t], mstr[j]); int tid = cantor(mstr); if (!visit[tid]) { node *tn = new node(op[i], f, 0); memcpy(tn->mstr, mstr, sizeof(mstr)); if (tid == 0) return tn; visit[tid] = true; q.push(tn); } } } } return NULL; } void printPath(node *cur) { if (cur != root) { printPath(cur->p); cout << cur->oper; } } int main() { ios::sync_with_stdio(false); cin.tie(0); for (int i = 0; i < 9; ++i) { char j; cin >> j; if (j != 'x') { root->mstr[i] = j; } else { root->mstr[i] = '9'; } } #ifdef mytest auto start = clock(); node *e = bfs(); if (e) { printPath(e); } else { cout << \"unsolvable\"; } cout << endl; auto end = clock(); cout << (double)(end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest node *e = bfs(); if (e) { printPath(e); } else { cout << \"unsolvable\"; } cout << endl; #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%201426/","text":"Find The Multiple Description Given a positive integer n, write a program to find out a nonzero multiple m of n whose decimal representation contains only the digits 0 and 1. You may assume that n is not greater than 200 and there is a corresponding m containing no more than 100 decimal digits. Input The input file may contain multiple test cases. Each line contains a value of n (1 <= n <= 200). A line containing a zero terminates the input. Output For each value of n in the input print a line containing the corresponding value of m. The decimal representation of m must not contain more than 100 digits. If there are multiple solutions for a given value of n, any one of them is acceptable. Sample Input 2 6 19 0 Sample Output 10 100100100100100100 111111111111111111 Code \u4e24\u79cd\u641c\u7d22\u601d\u8def\uff1a \u641c\u7d22 n \u7684\u500d\u6570\uff0c\u9a8c\u8bc1\u662f\u5426\u5168\u662f1\u62160\uff0c\u5982python \u7248 \u4f7f\u7528 zoj \u6d4b\u8bd5\uff0c\u7ed3\u679c\u8d85\u65f6 \u641c\u7d22\u5168\u90e8\u76841\u62160\u7684\u6570\uff0c\u9a8c\u8bc1\u662f\u5426\u662f n \u7684\u500d\u6570\uff0c\u5982C++\u7248\uff0c\u6d4b\u8bd5\u6570\u636e\u957f\u5ea6\u592a\u77ed\uff0c\u5b9e\u9645\u4e0a\u4e0d\u8d85\u8fc720\u4f4d\uff0c\u80fd\u7528 long long \uff0c\u4e0d\u7528\u5199\u5927\u6570\u3002 #include <cstdio> #include <iostream> #include <queue> using namespace std; typedef long long LL; LL tmp; LL bfs(int n) { queue<LL> que; que.push(1); while (!que.empty()) { tmp = que.front(); que.pop(); if (tmp % n == 0) return tmp; que.push(tmp * 10); que.push(tmp * 10 + 1); } return 0; } int main() { int n; LL ans; while (scanf(\"%d\", &n) && n) { ans = bfs(n); printf(\"%lld\\n\", ans); } return 0; } \"\"\" # -*- coding: utf-8 -*- \"\"\" def check(n): s = str(n) if len(s) > 100: print(\"error\") return True for i in s: if i != '0' and i != '1': return False return True while True: m = n = int(input()) if n == 0: break while True: m += n if (check(m)): print(m) break","title":"Find The Multiple"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%201426/#find-the-multiple","text":"","title":"Find The Multiple"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%201426/#description","text":"Given a positive integer n, write a program to find out a nonzero multiple m of n whose decimal representation contains only the digits 0 and 1. You may assume that n is not greater than 200 and there is a corresponding m containing no more than 100 decimal digits.","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%201426/#input","text":"The input file may contain multiple test cases. Each line contains a value of n (1 <= n <= 200). A line containing a zero terminates the input.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%201426/#output","text":"For each value of n in the input print a line containing the corresponding value of m. The decimal representation of m must not contain more than 100 digits. If there are multiple solutions for a given value of n, any one of them is acceptable.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%201426/#sample-input","text":"2 6 19 0","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%201426/#sample-output","text":"10 100100100100100100 111111111111111111","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%201426/#code","text":"\u4e24\u79cd\u641c\u7d22\u601d\u8def\uff1a \u641c\u7d22 n \u7684\u500d\u6570\uff0c\u9a8c\u8bc1\u662f\u5426\u5168\u662f1\u62160\uff0c\u5982python \u7248 \u4f7f\u7528 zoj \u6d4b\u8bd5\uff0c\u7ed3\u679c\u8d85\u65f6 \u641c\u7d22\u5168\u90e8\u76841\u62160\u7684\u6570\uff0c\u9a8c\u8bc1\u662f\u5426\u662f n \u7684\u500d\u6570\uff0c\u5982C++\u7248\uff0c\u6d4b\u8bd5\u6570\u636e\u957f\u5ea6\u592a\u77ed\uff0c\u5b9e\u9645\u4e0a\u4e0d\u8d85\u8fc720\u4f4d\uff0c\u80fd\u7528 long long \uff0c\u4e0d\u7528\u5199\u5927\u6570\u3002 #include <cstdio> #include <iostream> #include <queue> using namespace std; typedef long long LL; LL tmp; LL bfs(int n) { queue<LL> que; que.push(1); while (!que.empty()) { tmp = que.front(); que.pop(); if (tmp % n == 0) return tmp; que.push(tmp * 10); que.push(tmp * 10 + 1); } return 0; } int main() { int n; LL ans; while (scanf(\"%d\", &n) && n) { ans = bfs(n); printf(\"%lld\\n\", ans); } return 0; } \"\"\" # -*- coding: utf-8 -*- \"\"\" def check(n): s = str(n) if len(s) > 100: print(\"error\") return True for i in s: if i != '0' and i != '1': return False return True while True: m = n = int(input()) if n == 0: break while True: m += n if (check(m)): print(m) break","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%202378/","text":"Catch That Cow Description Farmer John has been informed of the location of a fugitive cow and wants to catch her immediately. He starts at a point N (0 \u2264 N \u2264 100,000) on a number line and the cow is at a point K (0 \u2264 K \u2264 100,000) on the same number line. Farmer John has two modes of transportation: walking and teleporting. Walking: FJ can move from any point X to the points X - 1 or X + 1 in a single minute Teleporting: FJ can move from any point X to the point 2 \u00d7 X in a single minute. If the cow, unaware of its pursuit, does not move at all, how long does it take for Farmer John to retrieve it? Input Line 1: Two space-separated integers: N and K Output Line 1: The least amount of time, in minutes, it takes for Farmer John to catch the fugitive cow. Sample Input 5 17 Sample Output 4 Hint The fastest way for Farmer John to reach the fugitive cow is to move along the following path: 5-10-9-18-17, which takes 4 minutes. Code #include <iostream> #include <queue> using namespace std; //#define mytest #ifdef mytest auto fp = freopen(\"test.in\", \"r\", stdin); #endif const int MAX_N = 100000 + 1; struct node { int x; int t; node(int x, int t) : x(x), t(t) {} }; int table[MAX_N] = {0}; queue<node> q; bool check(int x) { return 0 <= x && x <= MAX_N && (table[x] == 0); } int add(int x) { return x + 1; } int sub(int x) { return x - 1; } int mul(int x) { return 2 * x; } int (*direction[3])(int) = {add, sub, mul}; void bfs(int N, int K) { q.push(node(N, 0)); while (!q.empty()) { node f = q.front(); q.pop(); if (f.x == K) { cout << f.t << endl; return; } else { table[f.x] = 1; } for (int i = 0; i < 3; ++i) { int xx = direction[i](f.x); if (check(xx)) { int tt = f.t + 1; q.push(node(xx, tt)); } } } } int main() { int N, K; #ifdef mytest while (~scanf(\"%d %d\", &N, &K)) { bfs(N, K); while (!q.empty()) q.pop(); } #endif #ifndef mytest cin >> N >> K; bfs(N, K); #endif return 0; }","title":"Catch That Cow"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%202378/#catch-that-cow","text":"","title":"Catch That Cow"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%202378/#description","text":"Farmer John has been informed of the location of a fugitive cow and wants to catch her immediately. He starts at a point N (0 \u2264 N \u2264 100,000) on a number line and the cow is at a point K (0 \u2264 K \u2264 100,000) on the same number line. Farmer John has two modes of transportation: walking and teleporting. Walking: FJ can move from any point X to the points X - 1 or X + 1 in a single minute Teleporting: FJ can move from any point X to the point 2 \u00d7 X in a single minute. If the cow, unaware of its pursuit, does not move at all, how long does it take for Farmer John to retrieve it?","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%202378/#input","text":"Line 1: Two space-separated integers: N and K","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%202378/#output","text":"Line 1: The least amount of time, in minutes, it takes for Farmer John to catch the fugitive cow.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%202378/#sample-input","text":"5 17","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%202378/#sample-output","text":"4","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%202378/#hint","text":"The fastest way for Farmer John to reach the fugitive cow is to move along the following path: 5-10-9-18-17, which takes 4 minutes.","title":"Hint"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%202378/#code","text":"#include <iostream> #include <queue> using namespace std; //#define mytest #ifdef mytest auto fp = freopen(\"test.in\", \"r\", stdin); #endif const int MAX_N = 100000 + 1; struct node { int x; int t; node(int x, int t) : x(x), t(t) {} }; int table[MAX_N] = {0}; queue<node> q; bool check(int x) { return 0 <= x && x <= MAX_N && (table[x] == 0); } int add(int x) { return x + 1; } int sub(int x) { return x - 1; } int mul(int x) { return 2 * x; } int (*direction[3])(int) = {add, sub, mul}; void bfs(int N, int K) { q.push(node(N, 0)); while (!q.empty()) { node f = q.front(); q.pop(); if (f.x == K) { cout << f.t << endl; return; } else { table[f.x] = 1; } for (int i = 0; i < 3; ++i) { int xx = direction[i](f.x); if (check(xx)) { int tt = f.t + 1; q.push(node(xx, tt)); } } } } int main() { int N, K; #ifdef mytest while (~scanf(\"%d %d\", &N, &K)) { bfs(N, K); while (!q.empty()) q.pop(); } #endif #ifndef mytest cin >> N >> K; bfs(N, K); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%203126/","text":"Prime Path Description The ministers of the cabinet were quite upset by the message from the Chief of Security stating that they would all have to change the four-digit room numbers on their offices. \u2014 It is a matter of security to change such things every now and then, to keep the enemy in the dark. \u2014 But look, I have chosen my number 1033 for good reasons. I am the Prime minister, you know! \u2014 I know, so therefore your new number 8179 is also a prime. You will just have to paste four new digits over the four old ones on your office door. \u2014 No, it\u2019s not that simple. Suppose that I change the first digit to an 8, then the number will read 8033 which is not a prime! \u2014 I see, being the prime minister you cannot stand having a non-prime number on your door even for a few seconds. \u2014 Correct! So I must invent a scheme for going from 1033 to 8179 by a path of prime numbers where only one digit is changed from one prime to the next prime. Now, the minister of finance, who had been eavesdropping, intervened. \u2014 No unnecessary expenditure, please! I happen to know that the price of a digit is one pound. \u2014 Hmm, in that case I need a computer program to minimize the cost. You don't know some very cheap software gurus, do you? \u2014 In fact, I do. You see, there is this programming contest going on... Help the prime minister to find the cheapest prime path between any two given four-digit primes! The first digit must be nonzero, of course. Here is a solution in the case above. 1033 1733 3733 3739 3779 8779 8179 The cost of this solution is 6 pounds. Note that the digit 1 which got pasted over in step 2 can not be reused in the last step \u2013 a new 1 must be purchased. Input One line with a positive number: the number of test cases (at most 100). Then for each test case, one line with two numbers separated by a blank. Both numbers are four-digit primes (without leading zeros). Output One line for each case, either with a number stating the minimal cost or containing the word Impossible. Sample Input 3 1033 8179 1373 8017 1033 1033 Sample Output 6 7 0 Code \u5c06 int --> string \u66f4\u6539\u76f8\u5e94\u4f4d\u6570\u7684\u503c --> int \u592a\u6162\uff0c\u76f4\u63a5\u5206\u89e3\u8ba1\u7b97\u624d\u80fd AC #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <queue> #include <sstream> using namespace std; //#define mytest #ifdef mytest auto fp = freopen(\"test.in\", \"r\", stdin); #endif const int MAX_N = 10000; bool notPrime[MAX_N] = {false}; bool visit[MAX_N] = {false}; void initPrime() { for (int i = 2; i <= MAX_N / 2; ++i) { if (!notPrime[i]) { for (int j = 2 * i; j < MAX_N; j += i) { notPrime[j] = true; } } } } bool check(int n) { return 1000 <= n && n < MAX_N && !notPrime[n] && !visit[n]; } struct node { int n; int t; node(int _n, int _t) : n(_n), t(_t) {} }; void bfs(int s, int e) { queue<node> q; q.push(node(s, 0)); fill(visit + 1000, visit + MAX_N, false); while (!q.empty()) { node f = q.front(); int tmp = f.n; visit[tmp] = true; q.pop(); if (tmp == e) { cout << f.t << endl; return; } int bits[4] = {tmp % 10, tmp / 10 % 10, tmp / 100 % 10, tmp / 1000 % 10}; for (int i = 0; i < 4; ++i) { int k = pow(10, i); for (int j = 0; j < 10; ++j) { int nn = tmp - bits[i] * k + j * k; if (check(nn)) { q.push(node(nn, f.t + 1)); } } } } cout << \"Impossible\" << endl; } int main() { // ios::sync_with_stdio(false); // cin.tie(0); int n_lines, s, e; initPrime(); cin >> n_lines; #ifdef mytest auto start = clock(); while (n_lines--) { cin >> s >> e; bfs(s, e); } auto end = clock(); cout << (double)(end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest while (n_lines--) { cin >> s >> e; bfs(s, e); } #endif return 0; }","title":"Prime Path"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%203126/#prime-path","text":"","title":"Prime Path"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%203126/#description","text":"The ministers of the cabinet were quite upset by the message from the Chief of Security stating that they would all have to change the four-digit room numbers on their offices. \u2014 It is a matter of security to change such things every now and then, to keep the enemy in the dark. \u2014 But look, I have chosen my number 1033 for good reasons. I am the Prime minister, you know! \u2014 I know, so therefore your new number 8179 is also a prime. You will just have to paste four new digits over the four old ones on your office door. \u2014 No, it\u2019s not that simple. Suppose that I change the first digit to an 8, then the number will read 8033 which is not a prime! \u2014 I see, being the prime minister you cannot stand having a non-prime number on your door even for a few seconds. \u2014 Correct! So I must invent a scheme for going from 1033 to 8179 by a path of prime numbers where only one digit is changed from one prime to the next prime. Now, the minister of finance, who had been eavesdropping, intervened. \u2014 No unnecessary expenditure, please! I happen to know that the price of a digit is one pound. \u2014 Hmm, in that case I need a computer program to minimize the cost. You don't know some very cheap software gurus, do you? \u2014 In fact, I do. You see, there is this programming contest going on... Help the prime minister to find the cheapest prime path between any two given four-digit primes! The first digit must be nonzero, of course. Here is a solution in the case above. 1033 1733 3733 3739 3779 8779 8179 The cost of this solution is 6 pounds. Note that the digit 1 which got pasted over in step 2 can not be reused in the last step \u2013 a new 1 must be purchased.","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%203126/#input","text":"One line with a positive number: the number of test cases (at most 100). Then for each test case, one line with two numbers separated by a blank. Both numbers are four-digit primes (without leading zeros).","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%203126/#output","text":"One line for each case, either with a number stating the minimal cost or containing the word Impossible.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%203126/#sample-input","text":"3 1033 8179 1373 8017 1033 1033","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%203126/#sample-output","text":"6 7 0","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%203126/#code","text":"\u5c06 int --> string \u66f4\u6539\u76f8\u5e94\u4f4d\u6570\u7684\u503c --> int \u592a\u6162\uff0c\u76f4\u63a5\u5206\u89e3\u8ba1\u7b97\u624d\u80fd AC #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <queue> #include <sstream> using namespace std; //#define mytest #ifdef mytest auto fp = freopen(\"test.in\", \"r\", stdin); #endif const int MAX_N = 10000; bool notPrime[MAX_N] = {false}; bool visit[MAX_N] = {false}; void initPrime() { for (int i = 2; i <= MAX_N / 2; ++i) { if (!notPrime[i]) { for (int j = 2 * i; j < MAX_N; j += i) { notPrime[j] = true; } } } } bool check(int n) { return 1000 <= n && n < MAX_N && !notPrime[n] && !visit[n]; } struct node { int n; int t; node(int _n, int _t) : n(_n), t(_t) {} }; void bfs(int s, int e) { queue<node> q; q.push(node(s, 0)); fill(visit + 1000, visit + MAX_N, false); while (!q.empty()) { node f = q.front(); int tmp = f.n; visit[tmp] = true; q.pop(); if (tmp == e) { cout << f.t << endl; return; } int bits[4] = {tmp % 10, tmp / 10 % 10, tmp / 100 % 10, tmp / 1000 % 10}; for (int i = 0; i < 4; ++i) { int k = pow(10, i); for (int j = 0; j < 10; ++j) { int nn = tmp - bits[i] * k + j * k; if (check(nn)) { q.push(node(nn, f.t + 1)); } } } } cout << \"Impossible\" << endl; } int main() { // ios::sync_with_stdio(false); // cin.tie(0); int n_lines, s, e; initPrime(); cin >> n_lines; #ifdef mytest auto start = clock(); while (n_lines--) { cin >> s >> e; bfs(s, e); } auto end = clock(); cout << (double)(end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest while (n_lines--) { cin >> s >> e; bfs(s, e); } #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%203414/","text":"Pots Description You are given two pots, having the volume of A and B liters respectively. The following operations can be performed: FILL(i) fill the pot i (1 \u2264 i \u2264 2) from the tap; DROP(i) empty the pot i to the drain; POUR(i,j) pour from pot i to pot j ; after this operation either the pot j is full (and there may be some water left in the pot i ), or the pot i is empty (and all its contents have been moved to the pot j ). Write a program to find the shortest possible sequence of these operations that will yield exactly C liters of water in one of the pots. Input On the first and only line are the numbers A , B , and C . These are all integers in the range from 1 to 100 and C \u2264max( A , B ). Output The first line of the output must contain the length of the sequence of operations K . The following K lines must each describe one operation. If there are several sequences of minimal length, output any one of them. If the desired result can\u2019t be achieved, the first and only line of the file must contain the word \u2018 impossible \u2019. Sample Input 3 5 4 Sample Output 6 FILL(2) POUR(2,1) DROP(1) POUR(2,1) FILL(2) POUR(2,1) Code #include <cstdio> #include <iostream> #include <queue> using namespace std; //#define mytest #ifdef mytest auto fp = freopen(\"test.in\", \"r\", stdin); #endif struct node { int oper; int a, b; node *p; node(int _oper, int _a, int _b, node *_p) : oper(_oper), a(_a), b(_b), p(_p) {} }; int A, B, C; void fillA(int &i, int &j) { i = A; } void fillB(int &i, int &j) { j = B; } void dropA(int &i, int &j) { i = 0; } void dropB(int &i, int &j) { j = 0; } void pourA2B(int &i, int &j) { int diff = B - j; if (diff < i) { i = i - diff; j = B; } else { j += i; i = 0; } } void pourB2A(int &i, int &j) { int diff = A - i; if (diff < j) { j = j - diff; i = A; } else { i += j; j = 0; } } void (*op[6])(int &, int &){ fillA, fillB, dropA, dropB, pourA2B, pourB2A, }; int visit[101][101] = {0}; node * root = new node(-1, 0, 0, NULL); inline bool check(int a, int b) { return visit[a][b] != 1; } node *bfs() { queue<node *> q; q.push(root); while (!q.empty()) { node *f = q.front(); int ta = f->a, tb = f->b; if (ta == C || tb == C) { return f; } visit[ta][tb] = 1; q.pop(); for (int i = 0; i < 6; ++i) { ta = f->a, tb = f->b; op[i](ta, tb); if (check(ta, tb)) { node *tn = new node(i, ta, tb, f); q.push(tn); } } } cout << \"impossible\" << endl; return NULL; } int cnt = 0; void printOper(node *cur) { if (cur != root) { cnt++; printOper(cur->p); switch (cur->oper) { case 0 /* constant-expression */: /* code */ cout << \"FILL(1)\" << endl; break; case 1 /* constant-expression */: /* code */ cout << \"FILL(2)\" << endl; break; case 2 /* constant-expression */: /* code */ cout << \"DROP(1)\" << endl; break; case 3 /* constant-expression */: /* code */ cout << \"DROP(2)\" << endl; break; case 4 /* constant-expression */: /* code */ cout << \"POUR(1,2)\" << endl; break; case 5 /* constant-expression */: /* code */ cout << \"POUR(2,1)\" << endl; break; default: break; } } else { cout << cnt << endl; } } int main() { ios::sync_with_stdio(false); cin.tie(0); cin >> A >> B >> C; #ifdef mytest auto start = clock(); node * tn = bfs(); if (tn) printOper(tn); auto end = clock(); cout << (double)(end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest node * tn = bfs(); if (tn) printOper(tn); #endif return 0; }","title":"Pots"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%203414/#pots","text":"","title":"Pots"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%203414/#description","text":"You are given two pots, having the volume of A and B liters respectively. The following operations can be performed: FILL(i) fill the pot i (1 \u2264 i \u2264 2) from the tap; DROP(i) empty the pot i to the drain; POUR(i,j) pour from pot i to pot j ; after this operation either the pot j is full (and there may be some water left in the pot i ), or the pot i is empty (and all its contents have been moved to the pot j ). Write a program to find the shortest possible sequence of these operations that will yield exactly C liters of water in one of the pots.","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%203414/#input","text":"On the first and only line are the numbers A , B , and C . These are all integers in the range from 1 to 100 and C \u2264max( A , B ).","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%203414/#output","text":"The first line of the output must contain the length of the sequence of operations K . The following K lines must each describe one operation. If there are several sequences of minimal length, output any one of them. If the desired result can\u2019t be achieved, the first and only line of the file must contain the word \u2018 impossible \u2019.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%203414/#sample-input","text":"3 5 4","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%203414/#sample-output","text":"6 FILL(2) POUR(2,1) DROP(1) POUR(2,1) FILL(2) POUR(2,1)","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/bfs/poj%203414/#code","text":"#include <cstdio> #include <iostream> #include <queue> using namespace std; //#define mytest #ifdef mytest auto fp = freopen(\"test.in\", \"r\", stdin); #endif struct node { int oper; int a, b; node *p; node(int _oper, int _a, int _b, node *_p) : oper(_oper), a(_a), b(_b), p(_p) {} }; int A, B, C; void fillA(int &i, int &j) { i = A; } void fillB(int &i, int &j) { j = B; } void dropA(int &i, int &j) { i = 0; } void dropB(int &i, int &j) { j = 0; } void pourA2B(int &i, int &j) { int diff = B - j; if (diff < i) { i = i - diff; j = B; } else { j += i; i = 0; } } void pourB2A(int &i, int &j) { int diff = A - i; if (diff < j) { j = j - diff; i = A; } else { i += j; j = 0; } } void (*op[6])(int &, int &){ fillA, fillB, dropA, dropB, pourA2B, pourB2A, }; int visit[101][101] = {0}; node * root = new node(-1, 0, 0, NULL); inline bool check(int a, int b) { return visit[a][b] != 1; } node *bfs() { queue<node *> q; q.push(root); while (!q.empty()) { node *f = q.front(); int ta = f->a, tb = f->b; if (ta == C || tb == C) { return f; } visit[ta][tb] = 1; q.pop(); for (int i = 0; i < 6; ++i) { ta = f->a, tb = f->b; op[i](ta, tb); if (check(ta, tb)) { node *tn = new node(i, ta, tb, f); q.push(tn); } } } cout << \"impossible\" << endl; return NULL; } int cnt = 0; void printOper(node *cur) { if (cur != root) { cnt++; printOper(cur->p); switch (cur->oper) { case 0 /* constant-expression */: /* code */ cout << \"FILL(1)\" << endl; break; case 1 /* constant-expression */: /* code */ cout << \"FILL(2)\" << endl; break; case 2 /* constant-expression */: /* code */ cout << \"DROP(1)\" << endl; break; case 3 /* constant-expression */: /* code */ cout << \"DROP(2)\" << endl; break; case 4 /* constant-expression */: /* code */ cout << \"POUR(1,2)\" << endl; break; case 5 /* constant-expression */: /* code */ cout << \"POUR(2,1)\" << endl; break; default: break; } } else { cout << cnt << endl; } } int main() { ios::sync_with_stdio(false); cin.tie(0); cin >> A >> B >> C; #ifdef mytest auto start = clock(); node * tn = bfs(); if (tn) printOper(tn); auto end = clock(); cout << (double)(end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest node * tn = bfs(); if (tn) printOper(tn); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%201129/","text":"Channel Allocation Description When a radio station is broadcasting over a very large area, repeaters are used to retransmit the signal so that every receiver has a strong signal. However, the channels used by each repeater must be carefully chosen so that nearby repeaters do not interfere with one another. This condition is satisfied if adjacent repeaters use different channels. Since the radio frequency spectrum is a precious resource, the number of channels required by a given network of repeaters should be minimised. You have to write a program that reads in a description of a repeater network and determines the minimum number of channels required. Input The input consists of a number of maps of repeater networks. Each map begins with a line containing the number of repeaters. This is between 1 and 26, and the repeaters are referred to by consecutive upper-case letters of the alphabet starting with A. For example, ten repeaters would have the names A,B,C,...,I and J. A network with zero repeaters indicates the end of input. Following the number of repeaters is a list of adjacency relationships. Each line has the form: A:BCDH which indicates that the repeaters B, C, D and H are adjacent to the repeater A. The first line describes those adjacent to repeater A, the second those adjacent to B, and so on for all of the repeaters. If a repeater is not adjacent to any other, its line has the form A: The repeaters are listed in alphabetical order. Note that the adjacency is a symmetric relationship; if A is adjacent to B, then B is necessarily adjacent to A. Also, since the repeaters lie in a plane, the graph formed by connecting adjacent repeaters does not have any line segments that cross. Output For each map (except the final one with no repeaters), print a line containing the minumum number of channels needed so that no adjacent channels interfere. The sample output shows the format of this line. Take care that channels is in the singular form when only one channel is required. Sample Input 2 A: B: 4 A:BC B:ACD C:ABD D:BC 4 A:BCD B:ACD C:ABD D:ABC 0 Sample Output 1 channel needed. 3 channels needed. 4 channels needed. Code \u968f\u673a\u6570\u636e\u751f\u6210\uff0c\u4e0d\u662f\u5e73\u9762\u56fe\uff0c\u4f46\u53ef\u4ee5\u9a8c\u8bc1\u6b63\u786e\u6027\u3002 #include <cstdio> #include <ctime> #include <cstdlib> using namespace std; const int MAX_N = 26; bool table[MAX_N][MAX_N]; auto fp = freopen(\"../pat/test.in\", \"w\", stdout); inline void printTable(int n) { for (int i = 0; i < n; ++i) { printf(\"%c:\", 'A' + i); for (int j = 0; j < n; ++j) { if (table[i][j]) printf(\"%c\", 'A' + j); } printf(\"\\n\"); } } inline int getRandom(int a, int b) { return (rand() % (b-a+1)) + a; } inline void initTable(int n) { for (int i = 0; i < n; ++i) { for (int j = i + 1; j < n; ++j) { table[i][j] = table[j][i] = getRandom(0, 2); } } } int main() { srand((int)time(NULL)); for (int n = getRandom(0, MAX_N); n != 0; n = getRandom(0, MAX_N)) { printf(\"%d\\n\", n); initTable(n); printTable(n); } printf(\"0\\n\"); return 0; } \u4e0d\u4f1a\u56db\u8272\u5b9a\u7406\u526a\u679d\uff0cN \u7a0d\u5fae\u5927\u4e00\u70b9\u5c31\u4f1a\u8d85\u65f6\uff0c\u7136\u800c\u6570\u636e\u6c34\uff0c\u76f4\u63a5 AC \u4e86\u3002\u3002\u3002 #include <iostream> #include <cstdio> #include <vector> #include <cstring> #include <ctime> //#define mytest #ifdef mytest auto fp = freopen(\"../test.in\", \"r\", stdin); #endif using namespace std; const int INF = 0x3f3f3f3f, MAX_N = 26; int minCnt, cnt, N, vertex[MAX_N]; bool visit[MAX_N], table[MAX_N][MAX_N]; bool tset[MAX_N]; inline void init() { cnt = 1; minCnt = INF; memset(vertex, 0, sizeof(vertex)); memset(visit, 0, sizeof(visit)); memset(table, 0, sizeof(table)); } void dfs(int v, int e) { vertex[v] = e; visit[v] = true; if (v == N - 1) { minCnt = minCnt < cnt ? minCnt : cnt; return; } memset(tset, 0, sizeof(tset)); for (int u = 0; u < N; ++u) { if (table[v+1][u] && visit[u]) tset[vertex[u]] = true; } for (int i = 0; i < cnt; ++i) { if (!tset[i]) { dfs(v + 1, i); } } dfs(v + 1, cnt++); visit[v] = false; vertex[v] = 0; --cnt; } void tMain() { while (scanf(\"%d\", &N), N != 0) { init(); for (int i = 0; i < N; ++i) { getchar(); getchar(); char c = 0; while (scanf(\"%c\", &c), c != '\\n') { table[i][c - 'A'] = true; } } dfs(0, 0); if (minCnt == 1) { printf(\"1 channel needed.\\n\"); } else { printf(\"%d channels needed.\\n\", minCnt); } } } int main() { #ifdef mytest clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Channel Allocation"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%201129/#channel-allocation","text":"","title":"Channel Allocation"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%201129/#description","text":"When a radio station is broadcasting over a very large area, repeaters are used to retransmit the signal so that every receiver has a strong signal. However, the channels used by each repeater must be carefully chosen so that nearby repeaters do not interfere with one another. This condition is satisfied if adjacent repeaters use different channels. Since the radio frequency spectrum is a precious resource, the number of channels required by a given network of repeaters should be minimised. You have to write a program that reads in a description of a repeater network and determines the minimum number of channels required.","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%201129/#input","text":"The input consists of a number of maps of repeater networks. Each map begins with a line containing the number of repeaters. This is between 1 and 26, and the repeaters are referred to by consecutive upper-case letters of the alphabet starting with A. For example, ten repeaters would have the names A,B,C,...,I and J. A network with zero repeaters indicates the end of input. Following the number of repeaters is a list of adjacency relationships. Each line has the form: A:BCDH which indicates that the repeaters B, C, D and H are adjacent to the repeater A. The first line describes those adjacent to repeater A, the second those adjacent to B, and so on for all of the repeaters. If a repeater is not adjacent to any other, its line has the form A: The repeaters are listed in alphabetical order. Note that the adjacency is a symmetric relationship; if A is adjacent to B, then B is necessarily adjacent to A. Also, since the repeaters lie in a plane, the graph formed by connecting adjacent repeaters does not have any line segments that cross.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%201129/#output","text":"For each map (except the final one with no repeaters), print a line containing the minumum number of channels needed so that no adjacent channels interfere. The sample output shows the format of this line. Take care that channels is in the singular form when only one channel is required.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%201129/#sample-input","text":"2 A: B: 4 A:BC B:ACD C:ABD D:BC 4 A:BCD B:ACD C:ABD D:ABC 0","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%201129/#sample-output","text":"1 channel needed. 3 channels needed. 4 channels needed.","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%201129/#code","text":"\u968f\u673a\u6570\u636e\u751f\u6210\uff0c\u4e0d\u662f\u5e73\u9762\u56fe\uff0c\u4f46\u53ef\u4ee5\u9a8c\u8bc1\u6b63\u786e\u6027\u3002 #include <cstdio> #include <ctime> #include <cstdlib> using namespace std; const int MAX_N = 26; bool table[MAX_N][MAX_N]; auto fp = freopen(\"../pat/test.in\", \"w\", stdout); inline void printTable(int n) { for (int i = 0; i < n; ++i) { printf(\"%c:\", 'A' + i); for (int j = 0; j < n; ++j) { if (table[i][j]) printf(\"%c\", 'A' + j); } printf(\"\\n\"); } } inline int getRandom(int a, int b) { return (rand() % (b-a+1)) + a; } inline void initTable(int n) { for (int i = 0; i < n; ++i) { for (int j = i + 1; j < n; ++j) { table[i][j] = table[j][i] = getRandom(0, 2); } } } int main() { srand((int)time(NULL)); for (int n = getRandom(0, MAX_N); n != 0; n = getRandom(0, MAX_N)) { printf(\"%d\\n\", n); initTable(n); printTable(n); } printf(\"0\\n\"); return 0; } \u4e0d\u4f1a\u56db\u8272\u5b9a\u7406\u526a\u679d\uff0cN \u7a0d\u5fae\u5927\u4e00\u70b9\u5c31\u4f1a\u8d85\u65f6\uff0c\u7136\u800c\u6570\u636e\u6c34\uff0c\u76f4\u63a5 AC \u4e86\u3002\u3002\u3002 #include <iostream> #include <cstdio> #include <vector> #include <cstring> #include <ctime> //#define mytest #ifdef mytest auto fp = freopen(\"../test.in\", \"r\", stdin); #endif using namespace std; const int INF = 0x3f3f3f3f, MAX_N = 26; int minCnt, cnt, N, vertex[MAX_N]; bool visit[MAX_N], table[MAX_N][MAX_N]; bool tset[MAX_N]; inline void init() { cnt = 1; minCnt = INF; memset(vertex, 0, sizeof(vertex)); memset(visit, 0, sizeof(visit)); memset(table, 0, sizeof(table)); } void dfs(int v, int e) { vertex[v] = e; visit[v] = true; if (v == N - 1) { minCnt = minCnt < cnt ? minCnt : cnt; return; } memset(tset, 0, sizeof(tset)); for (int u = 0; u < N; ++u) { if (table[v+1][u] && visit[u]) tset[vertex[u]] = true; } for (int i = 0; i < cnt; ++i) { if (!tset[i]) { dfs(v + 1, i); } } dfs(v + 1, cnt++); visit[v] = false; vertex[v] = 0; --cnt; } void tMain() { while (scanf(\"%d\", &N), N != 0) { init(); for (int i = 0; i < N; ++i) { getchar(); getchar(); char c = 0; while (scanf(\"%c\", &c), c != '\\n') { table[i][c - 'A'] = true; } } dfs(0, 0); if (minCnt == 1) { printf(\"1 channel needed.\\n\"); } else { printf(\"%d channels needed.\\n\", minCnt); } } } int main() { #ifdef mytest clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%201416/","text":"Shredding Company Description You have just been put in charge of developing a new shredder for the Shredding Company Although a \"normal\" shredder would just shred sheets of paper into little pieces so that the contents would become unreadable, this new shredder needs to have the following unusual basic characteristics. 1.The shredder takes as input a target number and a sheet of paper with a number written on it. 2.It shreds (or cuts) the sheet into pieces each of which has one or more digits on it. 3.The sum of the numbers written on each piece is the closest possible number to the target number, without going over it. For example, suppose that the target number is 50, and the sheet of paper has the number 12346. The shredder would cut the sheet into four pieces, where one piece has 1, another has 2, the third has 34, and the fourth has 6. This is because their sum 43 (= 1 + 2 + 34 + 6) is closest to the target number 50 of all possible combinations without going over 50. For example, a combination where the pieces are 1, 23, 4, and 6 is not valid, because the sum of this combination 34 (= 1 + 23 + 4 + 6) is less than the above combination's 43. The combination of 12, 34, and 6 is not valid either, because the sum 52 (= 12 + 34 + 6) is greater than the target number of 50. Figure 1. Shredding a sheet of paper having the number 12346 when the target number is 50 There are also three special rules : 1.If the target number is the same as the number on the sheet of paper, then the paper is not cut. For example, if the target number is 100 and the number on the sheet of paper is also 100, then the paper is not cut. 2.If it is not possible to make any combination whose sum is less than or equal to the target number, then error is printed on a display. For example, if the target number is 1 and the number on the sheet of paper is 123, it is not possible to make any valid combination, as the combination with the smallest possible sum is 1, 2, 3. The sum for this combination is 6, which is greater than the target number, and thus error is printed. 3.If there is more than one possible combination where the sum is closest to the target number without going over it, then rejected is printed on a display. For example, if the target number is 15, and the number on the sheet of paper is 111, then there are two possible combinations with the highest possible sum of 12: (a) 1 and 11 and (b) 11 and 1; thus rejected is printed. In order to develop such a shredder, you have decided to first make a simple program that would simulate the above characteristics and rules. Given two numbers, where the first is the target number and the second is the number on the sheet of paper to be shredded, you need to figure out how the shredder should \"cut up\" the second number. Input The input consists of several test cases, each on one line, as follows : tl num1 t2 num2 ... tn numn 0 0 Each test case consists of the following two positive integers, which are separated by one space : (1) the first integer (ti above) is the target number, (2) the second integer (numi above) is the number that is on the paper to be shredded. Neither integers may have a 0 as the first digit, e.g., 123 is allowed but 0123 is not. You may assume that both integers are at most 6 digits in length. A line consisting of two zeros signals the end of the input. Output For each test case in the input, the corresponding output takes one of the following three types : sum part1 part2 ... rejected error In the first type, partj and sum have the following meaning : 1.Each partj is a number on one piece of shredded paper. The order of partj corresponds to the order of the original digits on the sheet of paper. 2.sum is the sum of the numbers after being shredded, i.e., sum = part1 + part2 +... Each number should be separated by one space. The message error is printed if it is not possible to make any combination, and rejected if there is more than one possible combination. No extra characters including spaces are allowed at the beginning of each line, nor at the end of each line. Sample Input 50 12346 376 144139 927438 927438 18 3312 9 3142 25 1299 111 33333 103 862150 6 1104 0 0 Sample Output 43 1 2 34 6 283 144 139 927438 927438 18 3 3 12 error 21 1 2 9 9 rejected 103 86 2 15 0 rejected Code \u6ce8\u610f input \u4e3a 6 1104 \u65f6\uff0coutput \u4e3a rejected \uff0c\u5373\u8ba4\u4e3a 1 1 0 4 \u548c 1 1 04 \u662f\u7b49\u6548\u7684\uff0c\u9898\u76ee\u6ca1\u8bf4\u4f46\u5141\u8bb8\u5207\u5272\u540e\u7684\u7eb8\u6761\u4ee5 0 \u5f00\u5934\u3002 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <queue> using namespace std; //#define mytest #ifdef mytest auto fp = freopen(\"test.in\", \"r\", stdin); #endif const int LEN = 8; int TAR, STR_LEN; char MSTR[LEN]; vector<int> ans, tans; int maxAns, cnt; int minSum[LEN]; int maxSum[LEN]; void init() { STR_LEN = strlen(MSTR); ans.clear(); tans.clear(); maxAns = -1, cnt = 0; int i = STR_LEN - 1; maxSum[i] = minSum[i] = MSTR[i] - '0'; for (--i; i >= 0; --i) { minSum[i] = minSum[i + 1] + MSTR[i] - '0'; maxSum[i] = pow(10, STR_LEN - 1 - i) * (MSTR[i] - '0') + maxSum[i + 1]; } } void dfs(int pos, int sum) { int res = 0; int size = tans.size(); if (size > 0) { int oldPos = tans[size - 1]; for (int i = oldPos; i < pos; ++i) { res = 10 * res + (MSTR[i] - '0'); } if (sum + res + minSum[pos] > TAR) { return; } } tans.push_back(pos); for (int i = pos + 1; i < STR_LEN; ++i) { dfs(i, sum + res); } int t = sum + res + maxSum[pos]; if (t <= TAR) { if (t == maxAns) { ++cnt; } else if (t > maxAns) { cnt = 0; maxAns = t; ans = tans; } } tans.pop_back(); } int main() { // ios::sync_with_stdio(false); // cin.tie(0); while (scanf(\"%d %s\", &TAR, MSTR), TAR != 0 && MSTR[0] != '0') { init(); dfs(0, 0); if (cnt > 0) printf(\"rejected\\n\"); else if (maxAns == -1) printf(\"error\\n\"); else { printf(\"%d\", maxAns); for (int i = 0, j = 0; i < STR_LEN; ++i) { if (j < ans.size() && i == ans.at(j)) { printf(\" %c\", MSTR[i]); ++j; } else printf(\"%c\", MSTR[i]); } printf(\"\\n\"); } } #ifdef mytest auto start = clock(); auto end = clock(); cout << \"Times: \" << (double)(end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest #endif return 0; }","title":"Shredding Company"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%201416/#shredding-company","text":"","title":"Shredding Company"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%201416/#description","text":"You have just been put in charge of developing a new shredder for the Shredding Company Although a \"normal\" shredder would just shred sheets of paper into little pieces so that the contents would become unreadable, this new shredder needs to have the following unusual basic characteristics. 1.The shredder takes as input a target number and a sheet of paper with a number written on it. 2.It shreds (or cuts) the sheet into pieces each of which has one or more digits on it. 3.The sum of the numbers written on each piece is the closest possible number to the target number, without going over it. For example, suppose that the target number is 50, and the sheet of paper has the number 12346. The shredder would cut the sheet into four pieces, where one piece has 1, another has 2, the third has 34, and the fourth has 6. This is because their sum 43 (= 1 + 2 + 34 + 6) is closest to the target number 50 of all possible combinations without going over 50. For example, a combination where the pieces are 1, 23, 4, and 6 is not valid, because the sum of this combination 34 (= 1 + 23 + 4 + 6) is less than the above combination's 43. The combination of 12, 34, and 6 is not valid either, because the sum 52 (= 12 + 34 + 6) is greater than the target number of 50. Figure 1. Shredding a sheet of paper having the number 12346 when the target number is 50 There are also three special rules : 1.If the target number is the same as the number on the sheet of paper, then the paper is not cut. For example, if the target number is 100 and the number on the sheet of paper is also 100, then the paper is not cut. 2.If it is not possible to make any combination whose sum is less than or equal to the target number, then error is printed on a display. For example, if the target number is 1 and the number on the sheet of paper is 123, it is not possible to make any valid combination, as the combination with the smallest possible sum is 1, 2, 3. The sum for this combination is 6, which is greater than the target number, and thus error is printed. 3.If there is more than one possible combination where the sum is closest to the target number without going over it, then rejected is printed on a display. For example, if the target number is 15, and the number on the sheet of paper is 111, then there are two possible combinations with the highest possible sum of 12: (a) 1 and 11 and (b) 11 and 1; thus rejected is printed. In order to develop such a shredder, you have decided to first make a simple program that would simulate the above characteristics and rules. Given two numbers, where the first is the target number and the second is the number on the sheet of paper to be shredded, you need to figure out how the shredder should \"cut up\" the second number.","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%201416/#input","text":"The input consists of several test cases, each on one line, as follows : tl num1 t2 num2 ... tn numn 0 0 Each test case consists of the following two positive integers, which are separated by one space : (1) the first integer (ti above) is the target number, (2) the second integer (numi above) is the number that is on the paper to be shredded. Neither integers may have a 0 as the first digit, e.g., 123 is allowed but 0123 is not. You may assume that both integers are at most 6 digits in length. A line consisting of two zeros signals the end of the input.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%201416/#output","text":"For each test case in the input, the corresponding output takes one of the following three types : sum part1 part2 ... rejected error In the first type, partj and sum have the following meaning : 1.Each partj is a number on one piece of shredded paper. The order of partj corresponds to the order of the original digits on the sheet of paper. 2.sum is the sum of the numbers after being shredded, i.e., sum = part1 + part2 +... Each number should be separated by one space. The message error is printed if it is not possible to make any combination, and rejected if there is more than one possible combination. No extra characters including spaces are allowed at the beginning of each line, nor at the end of each line.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%201416/#sample-input","text":"50 12346 376 144139 927438 927438 18 3312 9 3142 25 1299 111 33333 103 862150 6 1104 0 0","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%201416/#sample-output","text":"43 1 2 34 6 283 144 139 927438 927438 18 3 3 12 error 21 1 2 9 9 rejected 103 86 2 15 0 rejected","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%201416/#code","text":"\u6ce8\u610f input \u4e3a 6 1104 \u65f6\uff0coutput \u4e3a rejected \uff0c\u5373\u8ba4\u4e3a 1 1 0 4 \u548c 1 1 04 \u662f\u7b49\u6548\u7684\uff0c\u9898\u76ee\u6ca1\u8bf4\u4f46\u5141\u8bb8\u5207\u5272\u540e\u7684\u7eb8\u6761\u4ee5 0 \u5f00\u5934\u3002 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <queue> using namespace std; //#define mytest #ifdef mytest auto fp = freopen(\"test.in\", \"r\", stdin); #endif const int LEN = 8; int TAR, STR_LEN; char MSTR[LEN]; vector<int> ans, tans; int maxAns, cnt; int minSum[LEN]; int maxSum[LEN]; void init() { STR_LEN = strlen(MSTR); ans.clear(); tans.clear(); maxAns = -1, cnt = 0; int i = STR_LEN - 1; maxSum[i] = minSum[i] = MSTR[i] - '0'; for (--i; i >= 0; --i) { minSum[i] = minSum[i + 1] + MSTR[i] - '0'; maxSum[i] = pow(10, STR_LEN - 1 - i) * (MSTR[i] - '0') + maxSum[i + 1]; } } void dfs(int pos, int sum) { int res = 0; int size = tans.size(); if (size > 0) { int oldPos = tans[size - 1]; for (int i = oldPos; i < pos; ++i) { res = 10 * res + (MSTR[i] - '0'); } if (sum + res + minSum[pos] > TAR) { return; } } tans.push_back(pos); for (int i = pos + 1; i < STR_LEN; ++i) { dfs(i, sum + res); } int t = sum + res + maxSum[pos]; if (t <= TAR) { if (t == maxAns) { ++cnt; } else if (t > maxAns) { cnt = 0; maxAns = t; ans = tans; } } tans.pop_back(); } int main() { // ios::sync_with_stdio(false); // cin.tie(0); while (scanf(\"%d %s\", &TAR, MSTR), TAR != 0 && MSTR[0] != '0') { init(); dfs(0, 0); if (cnt > 0) printf(\"rejected\\n\"); else if (maxAns == -1) printf(\"error\\n\"); else { printf(\"%d\", maxAns); for (int i = 0, j = 0; i < STR_LEN; ++i) { if (j < ans.size() && i == ans.at(j)) { printf(\" %c\", MSTR[i]); ++j; } else printf(\"%c\", MSTR[i]); } printf(\"\\n\"); } } #ifdef mytest auto start = clock(); auto end = clock(); cout << \"Times: \" << (double)(end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%202531/","text":"Network Saboteur Description A university network is composed of N computers. System administrators gathered information on the traffic between nodes, and carefully divided the network into two subnetworks in order to minimize traffic between parts. A disgruntled computer science student Vasya, after being expelled from the university, decided to have his revenge. He hacked into the university network and decided to reassign computers to maximize the traffic between two subnetworks. Unfortunately, he found that calculating such worst subdivision is one of those problems he, being a student, failed to solve. So he asks you, a more successful CS student, to help him. The traffic data are given in the form of matrix C, where Cij is the amount of data sent between ith and jth nodes (Cij = Cji, Cii = 0). The goal is to divide the network nodes into the two disjointed subsets A and B so as to maximize the sum \u2211Cij (i\u2208A,j\u2208B). Input The first line of input contains a number of nodes N (2 <= N <= 20). The following N lines, containing N space-separated integers each, represent the traffic matrix C (0 <= Cij <= 10000). Output file must contain a single integer -- the maximum traffic between the subnetworks. Output Output must contain a single integer -- the maximum traffic between the subnetworks. Sample Input 3 0 50 30 50 0 40 30 40 0 Sample Output 90 Code \u89e3 1 bf \u6c42\u89e3\uff0c\u89e3 2 dfs + \u526a\u679d 1 #include <algorithm> #include <cstdio> #include <cstring> #include <iostream> #include <queue> using namespace std; //#define mytest #ifdef mytest auto fp = freopen(\"test.in\", \"r\", stdin); #endif int N; const int MAX_N = 21; int table[MAX_N][MAX_N] = {0}; bool visit[MAX_N] = {false}; int bf() { int seti = 1, maxSet = ((1 << N) - 1 )/ 2; int ans = -1; for (;seti <= maxSet; ++seti) { fill(visit, visit + MAX_N, false); int v1[MAX_N] = {0}, cnt1 = 0; int v2[MAX_N] = {0}, cnt2 = 0; for (int i = 0; i < N; ++i) { if ((seti >> i) & 1) { visit[i] = true; v1[cnt1++] = i; } } int res = 0; for (int i = 0; i < MAX_N; ++i) { if (!visit[i]) v2[cnt2++] = i; } for (int i = 0; i < cnt1; ++i) { for (int j = 0; j < cnt2; ++j) { res += table[v1[i]][v2[j]]; } } ans = ans > res ? ans : res; } return ans; } int main() { ios::sync_with_stdio(false); cin.tie(0); cin >> N; for (int i = 0; i < N; ++i) { for (int j = 0; j < N; ++j) { cin >> table[i][j]; } } #ifdef mytest auto start = clock(); cout << bf() << endl; auto end = clock(); cout << (double)(end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest cout << bf() << endl; #endif return 0; } 2 #include <stdio.h> #include <string.h> #include <stdlib.h> #include <iostream> #include <algorithm> #include <set> #include <queue> #include <stack> using namespace std; const int inf=0x3f3f3f3f; int map[40][40]; int g[40]; int n,res; void dfs(int site,int sum) { int i; g[site]=1;//\u53d6\u51fa\u70b9 int num=sum; for(i=0;i<n;i++){ if(g[i]==1)//\u4e0esite\u5728\u4e00\u4e2a\u96c6\u5408\u91cc\u7684\u70b9 num-=map[site][i];//\u51cf\u53bb\u4ed6\u4eec\u4e4b\u95f4\u7684\u6743\u503c else//\u5426\u5219\u548csite\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\u91cc num+=map[site][i];//\u52a0\u4e0a\u4ed6\u4eec\u4e4b\u95f4\u7684\u6743\u503c } res=max(res,num);//\u4f9d\u6b21\u5faa\u73af\u7ed3\u675f\u627e\u5230\u7684\u6700\u5927\u503c for(i=site+1;i<n;i++){//\u7136\u540e\u904d\u5386\u5269\u4e0b\u7684\u70b9 if(num>sum){//\u5c0f\u526a\u679d\uff0c\u5982\u679c\u52a0\u5165\u4e86\u70b9site\u540e\u4e24\u4e2a\u96c6\u5408\u4e4b\u95f4\u7684\u6743\u503c\u5c0f\u4e86\uff0c\u5219\u5c31\u4e0d\u9700\u8981\u904d\u5386\u8fd9\u4e2a\u70b9\u3002 dfs(i,num); g[i]=0; } } } int main() { int i,j; while(~scanf(\"%d\",&n)){ memset(map,0,sizeof(map)); memset(g,0,sizeof(g)); for(i=0;i<n;i++) for(j=0;j<n;j++) scanf(\"%d\",&map[i][j]); res=-inf; dfs(0,0); printf(\"%d\\n\",res); } return 0; }","title":"Network Saboteur"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%202531/#network-saboteur","text":"","title":"Network Saboteur"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%202531/#description","text":"A university network is composed of N computers. System administrators gathered information on the traffic between nodes, and carefully divided the network into two subnetworks in order to minimize traffic between parts. A disgruntled computer science student Vasya, after being expelled from the university, decided to have his revenge. He hacked into the university network and decided to reassign computers to maximize the traffic between two subnetworks. Unfortunately, he found that calculating such worst subdivision is one of those problems he, being a student, failed to solve. So he asks you, a more successful CS student, to help him. The traffic data are given in the form of matrix C, where Cij is the amount of data sent between ith and jth nodes (Cij = Cji, Cii = 0). The goal is to divide the network nodes into the two disjointed subsets A and B so as to maximize the sum \u2211Cij (i\u2208A,j\u2208B).","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%202531/#input","text":"The first line of input contains a number of nodes N (2 <= N <= 20). The following N lines, containing N space-separated integers each, represent the traffic matrix C (0 <= Cij <= 10000). Output file must contain a single integer -- the maximum traffic between the subnetworks.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%202531/#output","text":"Output must contain a single integer -- the maximum traffic between the subnetworks.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%202531/#sample-input","text":"3 0 50 30 50 0 40 30 40 0","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%202531/#sample-output","text":"90","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%202531/#code","text":"\u89e3 1 bf \u6c42\u89e3\uff0c\u89e3 2 dfs + \u526a\u679d","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%202531/#1","text":"#include <algorithm> #include <cstdio> #include <cstring> #include <iostream> #include <queue> using namespace std; //#define mytest #ifdef mytest auto fp = freopen(\"test.in\", \"r\", stdin); #endif int N; const int MAX_N = 21; int table[MAX_N][MAX_N] = {0}; bool visit[MAX_N] = {false}; int bf() { int seti = 1, maxSet = ((1 << N) - 1 )/ 2; int ans = -1; for (;seti <= maxSet; ++seti) { fill(visit, visit + MAX_N, false); int v1[MAX_N] = {0}, cnt1 = 0; int v2[MAX_N] = {0}, cnt2 = 0; for (int i = 0; i < N; ++i) { if ((seti >> i) & 1) { visit[i] = true; v1[cnt1++] = i; } } int res = 0; for (int i = 0; i < MAX_N; ++i) { if (!visit[i]) v2[cnt2++] = i; } for (int i = 0; i < cnt1; ++i) { for (int j = 0; j < cnt2; ++j) { res += table[v1[i]][v2[j]]; } } ans = ans > res ? ans : res; } return ans; } int main() { ios::sync_with_stdio(false); cin.tie(0); cin >> N; for (int i = 0; i < N; ++i) { for (int j = 0; j < N; ++j) { cin >> table[i][j]; } } #ifdef mytest auto start = clock(); cout << bf() << endl; auto end = clock(); cout << (double)(end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest cout << bf() << endl; #endif return 0; }","title":"1"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%202531/#2","text":"#include <stdio.h> #include <string.h> #include <stdlib.h> #include <iostream> #include <algorithm> #include <set> #include <queue> #include <stack> using namespace std; const int inf=0x3f3f3f3f; int map[40][40]; int g[40]; int n,res; void dfs(int site,int sum) { int i; g[site]=1;//\u53d6\u51fa\u70b9 int num=sum; for(i=0;i<n;i++){ if(g[i]==1)//\u4e0esite\u5728\u4e00\u4e2a\u96c6\u5408\u91cc\u7684\u70b9 num-=map[site][i];//\u51cf\u53bb\u4ed6\u4eec\u4e4b\u95f4\u7684\u6743\u503c else//\u5426\u5219\u548csite\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\u91cc num+=map[site][i];//\u52a0\u4e0a\u4ed6\u4eec\u4e4b\u95f4\u7684\u6743\u503c } res=max(res,num);//\u4f9d\u6b21\u5faa\u73af\u7ed3\u675f\u627e\u5230\u7684\u6700\u5927\u503c for(i=site+1;i<n;i++){//\u7136\u540e\u904d\u5386\u5269\u4e0b\u7684\u70b9 if(num>sum){//\u5c0f\u526a\u679d\uff0c\u5982\u679c\u52a0\u5165\u4e86\u70b9site\u540e\u4e24\u4e2a\u96c6\u5408\u4e4b\u95f4\u7684\u6743\u503c\u5c0f\u4e86\uff0c\u5219\u5c31\u4e0d\u9700\u8981\u904d\u5386\u8fd9\u4e2a\u70b9\u3002 dfs(i,num); g[i]=0; } } } int main() { int i,j; while(~scanf(\"%d\",&n)){ memset(map,0,sizeof(map)); memset(g,0,sizeof(g)); for(i=0;i<n;i++) for(j=0;j<n;j++) scanf(\"%d\",&map[i][j]); res=-inf; dfs(0,0); printf(\"%d\\n\",res); } return 0; }","title":"2"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%202676/","text":"Sudoku Description Sudoku is a very simple task. A square table with 9 rows and 9 columns is divided to 9 smaller squares 3x3 as shown on the Figure. In some of the cells are written decimal digits from 1 to 9. The other cells are empty. The goal is to fill the empty cells with decimal digits from 1 to 9, one digit per cell, in such way that in each row, in each column and in each marked 3x3 subsquare, all the digits from 1 to 9 to appear. Write a program to solve a given Sudoku-task. Input The input data will start with the number of the test cases. For each test case, 9 lines follow, corresponding to the rows of the table. On each line a string of exactly 9 decimal digits is given, corresponding to the cells in this line. If a cell is empty it is represented by 0. Output For each test case your program should print the solution in the same format as the input data. The empty cells have to be filled according to the rules. If solutions is not unique, then the program may print any one of them. Sample Input 1 103000509 002109400 000704000 300502006 060000050 700803004 000401000 009205800 804000107 Sample Output 143628579 572139468 986754231 391542786 468917352 725863914 237481695 619275843 854396127 Code #include <iostream> #include <vector> #include <cstring> #include <ctime> //#define mytest #ifdef mytest auto fp = freopen(\"../test.in\", \"r\", stdin); #endif using namespace std; struct Pos { int r, c; Pos(int _r, int _c) : r(_r), c(_c) {} }; int table[9][9] = {0}; bool vrow[9][10]; bool vcol[9][10]; bool vcell[9][10]; int posIndex = -1; vector<Pos> posVector; bool flag = false; void init() { flag = false; posIndex = -1; posVector.clear(); memset(vrow, 0, sizeof(vrow)); memset(vcol, 0, sizeof(vrow)); memset(vcell, 0, sizeof(vrow)); } inline void printTable() { for (int i = 0; i < 9; ++i) { for (int j = 0; j < 9; ++j) { cout << table[i][j]; } cout << endl; } } inline bool nextPos(int &x, int &y) { if (posIndex + 1 < posVector.size()) { ++posIndex; x = posVector[posIndex].c; y = posVector[posIndex].r; return true; } return false; } inline int getCellN(int x, int y) { return y / 3 * 3 + x / 3; } inline void push(int r, int c, int e) { int cellN = getCellN(c, r); vrow[r][e] = vcell[cellN][e] = vcol[c][e] = true; } inline void pop(int r, int c, int e) { int cellN = getCellN(c, r); vrow[r][e] = vcell[cellN][e] = vcol[c][e] = false; } void dfs(int x, int y, int e) { if (flag) return; table[y][x] = e; push(y, x, e); // printTable(); int tx = x, ty = y; if (nextPos(tx, ty)) { int cellN = getCellN(tx, ty); for (int i = 1; i <= 9; ++i) { if (!vrow[ty][i] && !vcol[tx][i] && !vcell[cellN][i]) { dfs(tx, ty, i); } } } else flag = true; pop(y, x, e); --posIndex; } void tMain() { ios::sync_with_stdio(false); cin.tie(NULL); char C; int N; cin >> N; while (N--) { init(); for (int i = 0; i < 9; ++i) { for (int j = 0; j < 9; ++j) { cin >> C; int e = table[i][j] = C - '0'; if (e == 0) posVector.push_back(Pos(i, j)); int cellN = getCellN(j, i); push(i, j, e); } } int ty = 0, tx = 0; if (nextPos(tx, ty)) { int cellN = getCellN(tx, ty); for (int i = 1; i <= 9; ++i) { if (!vrow[ty][i] && !vcol[tx][i] && !vcell[cellN][i]) { dfs(tx, ty, i); } } } printTable(); } } int main() { #ifdef mytest clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Sudoku"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%202676/#sudoku","text":"","title":"Sudoku"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%202676/#description","text":"Sudoku is a very simple task. A square table with 9 rows and 9 columns is divided to 9 smaller squares 3x3 as shown on the Figure. In some of the cells are written decimal digits from 1 to 9. The other cells are empty. The goal is to fill the empty cells with decimal digits from 1 to 9, one digit per cell, in such way that in each row, in each column and in each marked 3x3 subsquare, all the digits from 1 to 9 to appear. Write a program to solve a given Sudoku-task.","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%202676/#input","text":"The input data will start with the number of the test cases. For each test case, 9 lines follow, corresponding to the rows of the table. On each line a string of exactly 9 decimal digits is given, corresponding to the cells in this line. If a cell is empty it is represented by 0.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%202676/#output","text":"For each test case your program should print the solution in the same format as the input data. The empty cells have to be filled according to the rules. If solutions is not unique, then the program may print any one of them.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%202676/#sample-input","text":"1 103000509 002109400 000704000 300502006 060000050 700803004 000401000 009205800 804000107","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%202676/#sample-output","text":"143628579 572139468 986754231 391542786 468917352 725863914 237481695 619275843 854396127","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%202676/#code","text":"#include <iostream> #include <vector> #include <cstring> #include <ctime> //#define mytest #ifdef mytest auto fp = freopen(\"../test.in\", \"r\", stdin); #endif using namespace std; struct Pos { int r, c; Pos(int _r, int _c) : r(_r), c(_c) {} }; int table[9][9] = {0}; bool vrow[9][10]; bool vcol[9][10]; bool vcell[9][10]; int posIndex = -1; vector<Pos> posVector; bool flag = false; void init() { flag = false; posIndex = -1; posVector.clear(); memset(vrow, 0, sizeof(vrow)); memset(vcol, 0, sizeof(vrow)); memset(vcell, 0, sizeof(vrow)); } inline void printTable() { for (int i = 0; i < 9; ++i) { for (int j = 0; j < 9; ++j) { cout << table[i][j]; } cout << endl; } } inline bool nextPos(int &x, int &y) { if (posIndex + 1 < posVector.size()) { ++posIndex; x = posVector[posIndex].c; y = posVector[posIndex].r; return true; } return false; } inline int getCellN(int x, int y) { return y / 3 * 3 + x / 3; } inline void push(int r, int c, int e) { int cellN = getCellN(c, r); vrow[r][e] = vcell[cellN][e] = vcol[c][e] = true; } inline void pop(int r, int c, int e) { int cellN = getCellN(c, r); vrow[r][e] = vcell[cellN][e] = vcol[c][e] = false; } void dfs(int x, int y, int e) { if (flag) return; table[y][x] = e; push(y, x, e); // printTable(); int tx = x, ty = y; if (nextPos(tx, ty)) { int cellN = getCellN(tx, ty); for (int i = 1; i <= 9; ++i) { if (!vrow[ty][i] && !vcol[tx][i] && !vcell[cellN][i]) { dfs(tx, ty, i); } } } else flag = true; pop(y, x, e); --posIndex; } void tMain() { ios::sync_with_stdio(false); cin.tie(NULL); char C; int N; cin >> N; while (N--) { init(); for (int i = 0; i < 9; ++i) { for (int j = 0; j < 9; ++j) { cin >> C; int e = table[i][j] = C - '0'; if (e == 0) posVector.push_back(Pos(i, j)); int cellN = getCellN(j, i); push(i, j, e); } } int ty = 0, tx = 0; if (nextPos(tx, ty)) { int cellN = getCellN(tx, ty); for (int i = 1; i <= 9; ++i) { if (!vrow[ty][i] && !vcol[tx][i] && !vcell[cellN][i]) { dfs(tx, ty, i); } } } printTable(); } } int main() { #ifdef mytest clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%203134/","text":"Power Calculus \u7f51\u7ad9 Sample Input 1 31 70 91 473 512 811 953 0 Sample Output 0 6 8 9 11 9 13 12 Code \u7b49\u4ef7\u4e8e\u4ece 1 \u5f00\u59cb\uff0c\u53ea\u4f7f\u7528\u52a0\u51cf\u6cd5\uff0c\u8ba1\u7b97\u6700\u5c11\u6709\u591a\u5c11\u6b21\u80fd\u591f\u8ba1\u7b97\u5230 n\u3002 \u4ece 1->k->n \u7684\u8def\u5f84\u6700\u77ed\uff0c\u5e76\u4e0d\u80fd\u4fdd\u8bc1 1->k \u662f\u6700\u77ed\u8def\u5f84\uff0c\u56e0\u4e3a 1->k \u7684\u8def\u5f84\u4e0d\u540c\uff0c\u53ef\u4ee5\u5f71\u54cd k->n \u8def\u5f84\uff0c\u6240\u4ee5 BFS \u6216 DFS \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(2^n)\uff0c\u4e14\u641c\u7d22\u6811\u6bcf\u5c42\u8282\u70b9\u591a\uff0c\u4e0d\u5bb9\u6613\u786e\u5b9a\u6df1\u5ea6\u9012\u5f52\u8fb9\u754c\uff0c\u4f46\u5b9e\u9645\u7b54\u6848\u6df1\u5ea6\u4e0d\u6df1\uff0c\u7528 IDA* \u5373\u53ef\u3002 \u6ce8\u91ca\u90e8\u5206\uff0c\u7528\u4e8e\u526a\u679d\uff0c\u4f46\u5947\u602a\u7684\u662f N \u8f83\u5927\u65f6\uff0c\u526a\u679d\u53cd\u800c\u4e0d\u5982\u4e0d\u526a\u679d\u3002 #include <iostream> #include <algorithm> #include <queue> #include <cstdio> #include <vector> #include <cstring> #include <set> #include <ctime> #define mytest #ifdef mytest auto fp = freopen(\"../test.in\", \"r\", stdin); #endif using namespace std; vector<int> tPath, path; const int MAX_N = 4000, INF = 0x7fffffff; int max_depth, minPath, N, cnt; bool mset[MAX_N], flag; void dfs(int e) { // ++cnt; if (tPath.size() >= max_depth) return; tPath.push_back(e); // mset[e] = true; int tsize = tPath.size(); if (e == N) { flag = true; if (minPath > tsize) { path = tPath; minPath = tsize; } return; } if (N <= e << (max_depth - tsize)) { for (int i = 0; i < tsize; ++i) { int n1 = tPath[i] + e, n2 = abs(e - tPath[i]); // if (!mset[n1]) dfs(n1); // if (!mset[n2]) dfs(n2); dfs(n1); dfs(n2); } } // mset[e] = false; tPath.pop_back(); } void tMain() { while (cin >> N, N != 0) { tPath.clear(); flag = false; // memset(mset, 0, sizeof(mset)); // mset[0] = true; minPath = INF; for (max_depth = 3; !flag; ++max_depth) { // cnt = 0; dfs(1); // cout << cnt << endl; } // for_each(path.begin(), path.end(), [](int a) { // cout << a << \" \"; // }); cout << minPath - 1<< endl; } } int main() { ios::sync_with_stdio(false); cin.tie(0); #ifdef mytest clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Power Calculus"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%203134/#power-calculus","text":"\u7f51\u7ad9","title":"Power Calculus"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%203134/#sample-input","text":"1 31 70 91 473 512 811 953 0","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%203134/#sample-output","text":"0 6 8 9 11 9 13 12","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%90%9C%E7%B4%A2/dfs/poj%203134/#code","text":"\u7b49\u4ef7\u4e8e\u4ece 1 \u5f00\u59cb\uff0c\u53ea\u4f7f\u7528\u52a0\u51cf\u6cd5\uff0c\u8ba1\u7b97\u6700\u5c11\u6709\u591a\u5c11\u6b21\u80fd\u591f\u8ba1\u7b97\u5230 n\u3002 \u4ece 1->k->n \u7684\u8def\u5f84\u6700\u77ed\uff0c\u5e76\u4e0d\u80fd\u4fdd\u8bc1 1->k \u662f\u6700\u77ed\u8def\u5f84\uff0c\u56e0\u4e3a 1->k \u7684\u8def\u5f84\u4e0d\u540c\uff0c\u53ef\u4ee5\u5f71\u54cd k->n \u8def\u5f84\uff0c\u6240\u4ee5 BFS \u6216 DFS \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(2^n)\uff0c\u4e14\u641c\u7d22\u6811\u6bcf\u5c42\u8282\u70b9\u591a\uff0c\u4e0d\u5bb9\u6613\u786e\u5b9a\u6df1\u5ea6\u9012\u5f52\u8fb9\u754c\uff0c\u4f46\u5b9e\u9645\u7b54\u6848\u6df1\u5ea6\u4e0d\u6df1\uff0c\u7528 IDA* \u5373\u53ef\u3002 \u6ce8\u91ca\u90e8\u5206\uff0c\u7528\u4e8e\u526a\u679d\uff0c\u4f46\u5947\u602a\u7684\u662f N \u8f83\u5927\u65f6\uff0c\u526a\u679d\u53cd\u800c\u4e0d\u5982\u4e0d\u526a\u679d\u3002 #include <iostream> #include <algorithm> #include <queue> #include <cstdio> #include <vector> #include <cstring> #include <set> #include <ctime> #define mytest #ifdef mytest auto fp = freopen(\"../test.in\", \"r\", stdin); #endif using namespace std; vector<int> tPath, path; const int MAX_N = 4000, INF = 0x7fffffff; int max_depth, minPath, N, cnt; bool mset[MAX_N], flag; void dfs(int e) { // ++cnt; if (tPath.size() >= max_depth) return; tPath.push_back(e); // mset[e] = true; int tsize = tPath.size(); if (e == N) { flag = true; if (minPath > tsize) { path = tPath; minPath = tsize; } return; } if (N <= e << (max_depth - tsize)) { for (int i = 0; i < tsize; ++i) { int n1 = tPath[i] + e, n2 = abs(e - tPath[i]); // if (!mset[n1]) dfs(n1); // if (!mset[n2]) dfs(n2); dfs(n1); dfs(n2); } } // mset[e] = false; tPath.pop_back(); } void tMain() { while (cin >> N, N != 0) { tPath.clear(); flag = false; // memset(mset, 0, sizeof(mset)); // mset[0] = true; minPath = INF; for (max_depth = 3; !flag; ++max_depth) { // cnt = 0; dfs(1); // cout << cnt << endl; } // for_each(path.begin(), path.end(), [](int a) { // cout << a << \" \"; // }); cout << minPath - 1<< endl; } } int main() { ios::sync_with_stdio(false); cin.tie(0); #ifdef mytest clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/poj%201061%20%E9%9D%92%E8%9B%99%E7%9A%84%E7%BA%A6%E4%BC%9A/","text":"\u9752\u86d9\u7684\u7ea6\u4f1a Description \u4e24\u53ea\u9752\u86d9\u5728\u7f51\u4e0a\u76f8\u8bc6\u4e86\uff0c\u5b83\u4eec\u804a\u5f97\u5f88\u5f00\u5fc3\uff0c\u4e8e\u662f\u89c9\u5f97\u5f88\u6709\u5fc5\u8981\u89c1\u4e00\u9762\u3002\u5b83\u4eec\u5f88\u9ad8\u5174\u5730\u53d1\u73b0\u5b83\u4eec\u4f4f\u5728\u540c\u4e00\u6761\u7eac\u5ea6\u7ebf\u4e0a\uff0c\u4e8e\u662f\u5b83\u4eec\u7ea6\u5b9a\u5404\u81ea\u671d\u897f\u8df3\uff0c\u76f4\u5230\u78b0\u9762\u4e3a\u6b62\u3002\u53ef\u662f\u5b83\u4eec\u51fa\u53d1\u4e4b\u524d\u5fd8\u8bb0\u4e86\u4e00\u4ef6\u5f88\u91cd\u8981\u7684\u4e8b\u60c5\uff0c\u65e2\u6ca1\u6709\u95ee\u6e05\u695a\u5bf9\u65b9\u7684\u7279\u5f81\uff0c\u4e5f\u6ca1\u6709\u7ea6\u5b9a\u89c1\u9762\u7684\u5177\u4f53\u4f4d\u7f6e\u3002\u4e0d\u8fc7\u9752\u86d9\u4eec\u90fd\u662f\u5f88\u4e50\u89c2\u7684\uff0c\u5b83\u4eec\u89c9\u5f97\u53ea\u8981\u4e00\u76f4\u671d\u7740\u67d0\u4e2a\u65b9\u5411\u8df3\u4e0b\u53bb\uff0c\u603b\u80fd\u78b0\u5230\u5bf9\u65b9\u7684\u3002\u4f46\u662f\u9664\u975e\u8fd9\u4e24\u53ea\u9752\u86d9\u5728\u540c\u4e00\u65f6\u95f4\u8df3\u5230\u540c\u4e00\u70b9\u4e0a\uff0c\u4e0d\u7136\u662f\u6c38\u8fdc\u90fd\u4e0d\u53ef\u80fd\u78b0\u9762\u7684\u3002\u4e3a\u4e86\u5e2e\u52a9\u8fd9\u4e24\u53ea\u4e50\u89c2\u7684\u9752\u86d9\uff0c\u4f60\u88ab\u8981\u6c42\u5199\u4e00\u4e2a\u7a0b\u5e8f\u6765\u5224\u65ad\u8fd9\u4e24\u53ea\u9752\u86d9\u662f\u5426\u80fd\u591f\u78b0\u9762\uff0c\u4f1a\u5728\u4ec0\u4e48\u65f6\u5019\u78b0\u9762\u3002 \u6211\u4eec\u628a\u8fd9\u4e24\u53ea\u9752\u86d9\u5206\u522b\u53eb\u505a\u9752\u86d9A\u548c\u9752\u86d9B\uff0c\u5e76\u4e14\u89c4\u5b9a\u7eac\u5ea6\u7ebf\u4e0a\u4e1c\u7ecf0\u5ea6\u5904\u4e3a\u539f\u70b9\uff0c\u7531\u4e1c\u5f80\u897f\u4e3a\u6b63\u65b9\u5411\uff0c\u5355\u4f4d\u957f\u5ea61\u7c73\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u6761\u9996\u5c3e\u76f8\u63a5\u7684\u6570\u8f74\u3002\u8bbe\u9752\u86d9A\u7684\u51fa\u53d1\u70b9\u5750\u6807\u662fx\uff0c\u9752\u86d9B\u7684\u51fa\u53d1\u70b9\u5750\u6807\u662fy\u3002\u9752\u86d9A\u4e00\u6b21\u80fd\u8df3m\u7c73\uff0c\u9752\u86d9B\u4e00\u6b21\u80fd\u8df3n\u7c73\uff0c\u4e24\u53ea\u9752\u86d9\u8df3\u4e00\u6b21\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u76f8\u540c\u3002\u7eac\u5ea6\u7ebf\u603b\u957fL\u7c73\u3002\u73b0\u5728\u8981\u4f60\u6c42\u51fa\u5b83\u4eec\u8df3\u4e86\u51e0\u6b21\u4ee5\u540e\u624d\u4f1a\u78b0\u9762\u3002 Input \u8f93\u5165\u53ea\u5305\u62ec\u4e00\u884c5\u4e2a\u6574\u6570x\uff0cy\uff0cm\uff0cn\uff0cL\uff0c\u5176\u4e2dx\u2260y < 2000000000\uff0c0 < m\u3001n < 2000000000\uff0c0 < L < 2100000000\u3002 Output \u8f93\u51fa\u78b0\u9762\u6240\u9700\u8981\u7684\u8df3\u8dc3\u6b21\u6570\uff0c\u5982\u679c\u6c38\u8fdc\u4e0d\u53ef\u80fd\u78b0\u9762\u5219\u8f93\u51fa\u4e00\u884c\"Impossible\" Sample Input 1 2 3 4 5 Sample Output 4 Code //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> inline int read() { int ra, fh; char rx; rx = getchar(), ra = 0, fh = 1; while ((rx < '0' || rx > '9') && rx != '-') rx = getchar(); if (rx == '-') fh = -1, rx = getchar(); while (rx >= '0' && rx <= '9') ra *= 10, ra += rx - 48, rx = getchar(); return ra * fh; } using namespace std; typedef long long ll; ll gcd(ll a, ll b, ll &x, ll &y) { if (b == 0) { x = 1, y = 0; return a; } ll d = gcd(b, a % b, x, y); ll t = x; x = y; y = t - (a / b) * y; return d; } ll X, Y, M, N, L; inline void tMain() { scanf(\"%lld%lld%lld%lld%lld\", &X, &Y, &M, &N, &L); ll a, b, n; if (M > N) { n = Y - X; a = M - N; } else { n = X - Y; a = N - M; } b = L; ll x, y; ll d = gcd(a, b, x, y); if (n % d != 0) { puts(\"Impossible\"); } else { ll t = n / d; x *= t; y *= t; if (x < 0) { t = -x / b; if (x % b != 0) t += 1; x += t * b; y -= t * b; } if (x - b >= 0) { t = x / b; x -= t * b; y += t * b; } printf(\"%lld\\n\", x); } } int main() { #ifdef mytest test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"\u9752\u86d9\u7684\u7ea6\u4f1a"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/poj%201061%20%E9%9D%92%E8%9B%99%E7%9A%84%E7%BA%A6%E4%BC%9A/#_1","text":"","title":"\u9752\u86d9\u7684\u7ea6\u4f1a"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/poj%201061%20%E9%9D%92%E8%9B%99%E7%9A%84%E7%BA%A6%E4%BC%9A/#description","text":"\u4e24\u53ea\u9752\u86d9\u5728\u7f51\u4e0a\u76f8\u8bc6\u4e86\uff0c\u5b83\u4eec\u804a\u5f97\u5f88\u5f00\u5fc3\uff0c\u4e8e\u662f\u89c9\u5f97\u5f88\u6709\u5fc5\u8981\u89c1\u4e00\u9762\u3002\u5b83\u4eec\u5f88\u9ad8\u5174\u5730\u53d1\u73b0\u5b83\u4eec\u4f4f\u5728\u540c\u4e00\u6761\u7eac\u5ea6\u7ebf\u4e0a\uff0c\u4e8e\u662f\u5b83\u4eec\u7ea6\u5b9a\u5404\u81ea\u671d\u897f\u8df3\uff0c\u76f4\u5230\u78b0\u9762\u4e3a\u6b62\u3002\u53ef\u662f\u5b83\u4eec\u51fa\u53d1\u4e4b\u524d\u5fd8\u8bb0\u4e86\u4e00\u4ef6\u5f88\u91cd\u8981\u7684\u4e8b\u60c5\uff0c\u65e2\u6ca1\u6709\u95ee\u6e05\u695a\u5bf9\u65b9\u7684\u7279\u5f81\uff0c\u4e5f\u6ca1\u6709\u7ea6\u5b9a\u89c1\u9762\u7684\u5177\u4f53\u4f4d\u7f6e\u3002\u4e0d\u8fc7\u9752\u86d9\u4eec\u90fd\u662f\u5f88\u4e50\u89c2\u7684\uff0c\u5b83\u4eec\u89c9\u5f97\u53ea\u8981\u4e00\u76f4\u671d\u7740\u67d0\u4e2a\u65b9\u5411\u8df3\u4e0b\u53bb\uff0c\u603b\u80fd\u78b0\u5230\u5bf9\u65b9\u7684\u3002\u4f46\u662f\u9664\u975e\u8fd9\u4e24\u53ea\u9752\u86d9\u5728\u540c\u4e00\u65f6\u95f4\u8df3\u5230\u540c\u4e00\u70b9\u4e0a\uff0c\u4e0d\u7136\u662f\u6c38\u8fdc\u90fd\u4e0d\u53ef\u80fd\u78b0\u9762\u7684\u3002\u4e3a\u4e86\u5e2e\u52a9\u8fd9\u4e24\u53ea\u4e50\u89c2\u7684\u9752\u86d9\uff0c\u4f60\u88ab\u8981\u6c42\u5199\u4e00\u4e2a\u7a0b\u5e8f\u6765\u5224\u65ad\u8fd9\u4e24\u53ea\u9752\u86d9\u662f\u5426\u80fd\u591f\u78b0\u9762\uff0c\u4f1a\u5728\u4ec0\u4e48\u65f6\u5019\u78b0\u9762\u3002 \u6211\u4eec\u628a\u8fd9\u4e24\u53ea\u9752\u86d9\u5206\u522b\u53eb\u505a\u9752\u86d9A\u548c\u9752\u86d9B\uff0c\u5e76\u4e14\u89c4\u5b9a\u7eac\u5ea6\u7ebf\u4e0a\u4e1c\u7ecf0\u5ea6\u5904\u4e3a\u539f\u70b9\uff0c\u7531\u4e1c\u5f80\u897f\u4e3a\u6b63\u65b9\u5411\uff0c\u5355\u4f4d\u957f\u5ea61\u7c73\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u6761\u9996\u5c3e\u76f8\u63a5\u7684\u6570\u8f74\u3002\u8bbe\u9752\u86d9A\u7684\u51fa\u53d1\u70b9\u5750\u6807\u662fx\uff0c\u9752\u86d9B\u7684\u51fa\u53d1\u70b9\u5750\u6807\u662fy\u3002\u9752\u86d9A\u4e00\u6b21\u80fd\u8df3m\u7c73\uff0c\u9752\u86d9B\u4e00\u6b21\u80fd\u8df3n\u7c73\uff0c\u4e24\u53ea\u9752\u86d9\u8df3\u4e00\u6b21\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u76f8\u540c\u3002\u7eac\u5ea6\u7ebf\u603b\u957fL\u7c73\u3002\u73b0\u5728\u8981\u4f60\u6c42\u51fa\u5b83\u4eec\u8df3\u4e86\u51e0\u6b21\u4ee5\u540e\u624d\u4f1a\u78b0\u9762\u3002","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/poj%201061%20%E9%9D%92%E8%9B%99%E7%9A%84%E7%BA%A6%E4%BC%9A/#input","text":"\u8f93\u5165\u53ea\u5305\u62ec\u4e00\u884c5\u4e2a\u6574\u6570x\uff0cy\uff0cm\uff0cn\uff0cL\uff0c\u5176\u4e2dx\u2260y < 2000000000\uff0c0 < m\u3001n < 2000000000\uff0c0 < L < 2100000000\u3002","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/poj%201061%20%E9%9D%92%E8%9B%99%E7%9A%84%E7%BA%A6%E4%BC%9A/#output","text":"\u8f93\u51fa\u78b0\u9762\u6240\u9700\u8981\u7684\u8df3\u8dc3\u6b21\u6570\uff0c\u5982\u679c\u6c38\u8fdc\u4e0d\u53ef\u80fd\u78b0\u9762\u5219\u8f93\u51fa\u4e00\u884c\"Impossible\"","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/poj%201061%20%E9%9D%92%E8%9B%99%E7%9A%84%E7%BA%A6%E4%BC%9A/#sample-input","text":"1 2 3 4 5","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/poj%201061%20%E9%9D%92%E8%9B%99%E7%9A%84%E7%BA%A6%E4%BC%9A/#sample-output","text":"4","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/poj%201061%20%E9%9D%92%E8%9B%99%E7%9A%84%E7%BA%A6%E4%BC%9A/#code","text":"//#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> inline int read() { int ra, fh; char rx; rx = getchar(), ra = 0, fh = 1; while ((rx < '0' || rx > '9') && rx != '-') rx = getchar(); if (rx == '-') fh = -1, rx = getchar(); while (rx >= '0' && rx <= '9') ra *= 10, ra += rx - 48, rx = getchar(); return ra * fh; } using namespace std; typedef long long ll; ll gcd(ll a, ll b, ll &x, ll &y) { if (b == 0) { x = 1, y = 0; return a; } ll d = gcd(b, a % b, x, y); ll t = x; x = y; y = t - (a / b) * y; return d; } ll X, Y, M, N, L; inline void tMain() { scanf(\"%lld%lld%lld%lld%lld\", &X, &Y, &M, &N, &L); ll a, b, n; if (M > N) { n = Y - X; a = M - N; } else { n = X - Y; a = N - M; } b = L; ll x, y; ll d = gcd(a, b, x, y); if (n % d != 0) { puts(\"Impossible\"); } else { ll t = n / d; x *= t; y *= t; if (x < 0) { t = -x / b; if (x % b != 0) t += 1; x += t * b; y -= t * b; } if (x - b >= 0) { t = x / b; x -= t * b; y += t * b; } printf(\"%lld\\n\", x); } } int main() { #ifdef mytest test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/poj%202689%20Prime%20Distance/","text":"Prime Distance Description The branch of mathematics called number theory is about properties of numbers. One of the areas that has captured the interest of number theoreticians for thousands of years is the question of primality. A prime number is a number that is has no proper factors (it is only evenly divisible by 1 and itself). The first prime numbers are 2,3,5,7 but they quickly become less frequent. One of the interesting questions is how dense they are in various ranges. Adjacent primes are two numbers that are both primes, but there are no other prime numbers between the adjacent primes. For example, 2,3 are the only adjacent primes that are also adjacent numbers. Your program is given 2 numbers: L and U (1<=L< U<=2,147,483,647), and you are to find the two adjacent primes C1 and C2 (L<=C1< C2<=U) that are closest (i.e. C2-C1 is the minimum). If there are other pairs that are the same distance apart, use the first pair. You are also to find the two adjacent primes D1 and D2 (L<=D1< D2<=U) where D1 and D2 are as distant from each other as possible (again choosing the first pair if there is a tie). Input Each line of input will contain two positive integers, L and U, with L < U. The difference between L and U will not exceed 1,000,000. Output For each L and U, the output will either be the statement that there are no adjacent primes (because there are less than two primes between the two given numbers) or a line giving the two pairs of adjacent primes. Sample Input 2 17 14 17 Sample Output 2,3 are closest, 7,11 are most distant. There are no adjacent primes. Code //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> inline int read() { int ra, fh; char rx; rx = getchar(), ra = 0, fh = 1; while ((rx < '0' || rx > '9') && rx != '-') rx = getchar(); if (rx == '-') fh = -1, rx = getchar(); while (rx >= '0' && rx <= '9') ra *= 10, ra += rx - 48, rx = getchar(); return ra * fh; } using namespace std; typedef long long ll; const int MAX_N = 1e6; bool visit[MAX_N]; int prime[MAX_N], top; bool isPrime[MAX_N]; void sieve() { for (ll i = 2; i * i < MAX_N; ++i) { if (!visit[i]) { for (ll j = i * i; j < MAX_N; j += i) { visit[j] = true; } } } for (int i = 2; i < MAX_N; ++i) { if (!visit[i]) prime[top++] = i; } } void segSieve(ll a, ll b) { memset(isPrime, 1, sizeof(isPrime)); for (int i = 0; i < top; ++i) { ll t = prime[i]; for (ll j = max((ll)2, (a + t - 1)/t)*t; j <= b; j += t) { isPrime[j - a] = false; } } if (a == 1) isPrime[0] = false; } int L, R; inline void tMain() { sieve(); while (~scanf(\"%d%d\", &L, &R)) { segSieve(L, R); int min = 0x7fffffff, max = -1, prev = -1, cur = -1; pair<int, int> closet, most; for (ll i = L; i <= R; ++i) { if (isPrime[i - L]) { prev = cur; cur = i; if (prev != -1) { if (cur - prev < min) { closet = make_pair(prev, cur); min = cur - prev; } if (max < cur - prev) { most = make_pair(prev, cur); max = cur - prev; } } } } if (prev == -1) { puts(\"There are no adjacent primes.\"); } else { printf(\"%d,%d are closest, %d,%d are most distant.\\n\", closet.first, closet.second, most.first, most.second); } } } int main() { #ifdef mytest test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Prime Distance"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/poj%202689%20Prime%20Distance/#prime-distance","text":"","title":"Prime Distance"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/poj%202689%20Prime%20Distance/#description","text":"The branch of mathematics called number theory is about properties of numbers. One of the areas that has captured the interest of number theoreticians for thousands of years is the question of primality. A prime number is a number that is has no proper factors (it is only evenly divisible by 1 and itself). The first prime numbers are 2,3,5,7 but they quickly become less frequent. One of the interesting questions is how dense they are in various ranges. Adjacent primes are two numbers that are both primes, but there are no other prime numbers between the adjacent primes. For example, 2,3 are the only adjacent primes that are also adjacent numbers. Your program is given 2 numbers: L and U (1<=L< U<=2,147,483,647), and you are to find the two adjacent primes C1 and C2 (L<=C1< C2<=U) that are closest (i.e. C2-C1 is the minimum). If there are other pairs that are the same distance apart, use the first pair. You are also to find the two adjacent primes D1 and D2 (L<=D1< D2<=U) where D1 and D2 are as distant from each other as possible (again choosing the first pair if there is a tie).","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/poj%202689%20Prime%20Distance/#input","text":"Each line of input will contain two positive integers, L and U, with L < U. The difference between L and U will not exceed 1,000,000.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/poj%202689%20Prime%20Distance/#output","text":"For each L and U, the output will either be the statement that there are no adjacent primes (because there are less than two primes between the two given numbers) or a line giving the two pairs of adjacent primes.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/poj%202689%20Prime%20Distance/#sample-input","text":"2 17 14 17","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/poj%202689%20Prime%20Distance/#sample-output","text":"2,3 are closest, 7,11 are most distant. There are no adjacent primes.","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/poj%202689%20Prime%20Distance/#code","text":"//#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> inline int read() { int ra, fh; char rx; rx = getchar(), ra = 0, fh = 1; while ((rx < '0' || rx > '9') && rx != '-') rx = getchar(); if (rx == '-') fh = -1, rx = getchar(); while (rx >= '0' && rx <= '9') ra *= 10, ra += rx - 48, rx = getchar(); return ra * fh; } using namespace std; typedef long long ll; const int MAX_N = 1e6; bool visit[MAX_N]; int prime[MAX_N], top; bool isPrime[MAX_N]; void sieve() { for (ll i = 2; i * i < MAX_N; ++i) { if (!visit[i]) { for (ll j = i * i; j < MAX_N; j += i) { visit[j] = true; } } } for (int i = 2; i < MAX_N; ++i) { if (!visit[i]) prime[top++] = i; } } void segSieve(ll a, ll b) { memset(isPrime, 1, sizeof(isPrime)); for (int i = 0; i < top; ++i) { ll t = prime[i]; for (ll j = max((ll)2, (a + t - 1)/t)*t; j <= b; j += t) { isPrime[j - a] = false; } } if (a == 1) isPrime[0] = false; } int L, R; inline void tMain() { sieve(); while (~scanf(\"%d%d\", &L, &R)) { segSieve(L, R); int min = 0x7fffffff, max = -1, prev = -1, cur = -1; pair<int, int> closet, most; for (ll i = L; i <= R; ++i) { if (isPrime[i - L]) { prev = cur; cur = i; if (prev != -1) { if (cur - prev < min) { closet = make_pair(prev, cur); min = cur - prev; } if (max < cur - prev) { most = make_pair(prev, cur); max = cur - prev; } } } } if (prev == -1) { puts(\"There are no adjacent primes.\"); } else { printf(\"%d,%d are closest, %d,%d are most distant.\\n\", closet.first, closet.second, most.first, most.second); } } } int main() { #ifdef mytest test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/poj%203070%20Fibonacci/","text":"Fibonacci Description In the Fibonacci integer sequence, F_0 = 0, _F_1 = 1, and _Fn = Fn \u2212 1 + Fn \u2212 2 for n \u2265 2. For example, the first ten terms of the Fibonacci sequence are: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, \u2026 An alternative formula for the Fibonacci sequence is . Given an integer n , your goal is to compute the last 4 digits of Fn . Input The input test file will contain multiple test cases. Each test case consists of a single line containing n (where 0 \u2264 n \u2264 1,000,000,000). The end-of-file is denoted by a single line containing the number \u22121. Output For each test case, print the last four digits of Fn . If the last four digits of Fn are all zeros, print \u20180\u2019; otherwise, omit any leading zeros (i.e., print Fn mod 10000). Sample Input 0 9 999999999 1000000000 -1 Sample Output 0 34 626 6875 Code //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> inline int read() { int ra, fh; char rx; rx = getchar(), ra = 0, fh = 1; while ((rx < '0' || rx > '9') && rx != '-') rx = getchar(); if (rx == '-') fh = -1, rx = getchar(); while (rx >= '0' && rx <= '9') ra *= 10, ra += rx - 48, rx = getchar(); return ra * fh; } using namespace std; typedef long long ll; const int MOD = 10000; struct Matrix { int data[2][2]; Matrix() { memset(data, 0, sizeof(data)); } }; Matrix multi(Matrix &a, Matrix &b) { Matrix ans; for (int i = 0; i < 2; ++i) { for (int j = 0; j < 2; ++j) { for (int k = 0; k < 2; ++k) { ans.data[i][j] = (ans.data[i][j] + a.data[i][k] * b.data[k][j]) % MOD; } } } return ans; } Matrix fastPower(ll n) { Matrix base, ans; ans.data[0][0] = ans.data[1][1] = 1; base.data[0][0] = base.data[0][1] = base.data[1][0] = 1; while (n) { if (n & 1) { ans = multi(ans, base); } base = multi(base, base); n >>= 1; } return ans; } int N; inline void tMain() { while (N = read(), N != -1) { Matrix ans = fastPower(N); printf(\"%d\\n\", ans.data[0][1]); } } int main() { #ifdef mytest test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Fibonacci"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/poj%203070%20Fibonacci/#fibonacci","text":"","title":"Fibonacci"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/poj%203070%20Fibonacci/#description","text":"In the Fibonacci integer sequence, F_0 = 0, _F_1 = 1, and _Fn = Fn \u2212 1 + Fn \u2212 2 for n \u2265 2. For example, the first ten terms of the Fibonacci sequence are: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, \u2026 An alternative formula for the Fibonacci sequence is . Given an integer n , your goal is to compute the last 4 digits of Fn .","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/poj%203070%20Fibonacci/#input","text":"The input test file will contain multiple test cases. Each test case consists of a single line containing n (where 0 \u2264 n \u2264 1,000,000,000). The end-of-file is denoted by a single line containing the number \u22121.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/poj%203070%20Fibonacci/#output","text":"For each test case, print the last four digits of Fn . If the last four digits of Fn are all zeros, print \u20180\u2019; otherwise, omit any leading zeros (i.e., print Fn mod 10000).","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/poj%203070%20Fibonacci/#sample-input","text":"0 9 999999999 1000000000 -1","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/poj%203070%20Fibonacci/#sample-output","text":"0 34 626 6875","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/poj%203070%20Fibonacci/#code","text":"//#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> inline int read() { int ra, fh; char rx; rx = getchar(), ra = 0, fh = 1; while ((rx < '0' || rx > '9') && rx != '-') rx = getchar(); if (rx == '-') fh = -1, rx = getchar(); while (rx >= '0' && rx <= '9') ra *= 10, ra += rx - 48, rx = getchar(); return ra * fh; } using namespace std; typedef long long ll; const int MOD = 10000; struct Matrix { int data[2][2]; Matrix() { memset(data, 0, sizeof(data)); } }; Matrix multi(Matrix &a, Matrix &b) { Matrix ans; for (int i = 0; i < 2; ++i) { for (int j = 0; j < 2; ++j) { for (int k = 0; k < 2; ++k) { ans.data[i][j] = (ans.data[i][j] + a.data[i][k] * b.data[k][j]) % MOD; } } } return ans; } Matrix fastPower(ll n) { Matrix base, ans; ans.data[0][0] = ans.data[1][1] = 1; base.data[0][0] = base.data[0][1] = base.data[1][0] = 1; while (n) { if (n & 1) { ans = multi(ans, base); } base = multi(base, base); n >>= 1; } return ans; } int N; inline void tMain() { while (N = read(), N != -1) { Matrix ans = fastPower(N); printf(\"%d\\n\", ans.data[0][1]); } } int main() { #ifdef mytest test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/poj%202356%20Find%20a%20multiple/","text":"Find a multiple Description The input contains N natural (i.e. positive integer) numbers ( N <= 10000 ). Each of that numbers is not greater than 15000. This numbers are not necessarily different (so it may happen that two or more of them will be equal). Your task is to choose a few of given numbers ( 1 <= few <= N ) so that the sum of chosen numbers is multiple for N (i.e. N * k = (sum of chosen numbers) for some natural number k). Input The first line of the input contains the single number N. Each of next N lines contains one number from the given set. Output In case your program decides that the target set of numbers can not be found it should print to the output the single number 0. Otherwise it should print the number of the chosen numbers in the first line followed by the chosen numbers themselves (on a separate line each) in arbitrary order. If there are more than one set of numbers with required properties you should print to the output only one (preferably your favorite) of them. Sample Input 5 1 2 3 4 1 Sample Output 2 2 3 Code //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> inline int read() { int ra, fh; char rx; rx = getchar(), ra = 0, fh = 1; while ((rx < '0' || rx > '9') && rx != '-') rx = getchar(); if (rx == '-') fh = -1, rx = getchar(); while (rx >= '0' && rx <= '9') ra *= 10, ra += rx - 48, rx = getchar(); return ra * fh; } using namespace std; typedef long long ll; const int MAX_N = 10010; int N, sum[MAX_N], visit[MAX_N]; void printSum(int a, int b) { printf(\"%d\\n\", b - a); for (int i = a + 1; i <= b; ++i) { printf(\"%d\\n\", sum[i] - sum[i - 1]); } } inline void tMain() { N = read(); int t; for (int i = 1; i <= N; ++i) { t = read(); sum[i] = sum[i - 1] + t; } for (int i = 1; i <= N; ++i) { t = sum[i] % N; if (t % N == 0) { printSum(0, i); return; } else { if (visit[t] == 0) visit[t] = i; else { printSum(visit[t], i); return; } } } } int main() { #ifdef mytest test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Find a multiple"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/poj%202356%20Find%20a%20multiple/#find-a-multiple","text":"","title":"Find a multiple"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/poj%202356%20Find%20a%20multiple/#description","text":"The input contains N natural (i.e. positive integer) numbers ( N <= 10000 ). Each of that numbers is not greater than 15000. This numbers are not necessarily different (so it may happen that two or more of them will be equal). Your task is to choose a few of given numbers ( 1 <= few <= N ) so that the sum of chosen numbers is multiple for N (i.e. N * k = (sum of chosen numbers) for some natural number k).","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/poj%202356%20Find%20a%20multiple/#input","text":"The first line of the input contains the single number N. Each of next N lines contains one number from the given set.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/poj%202356%20Find%20a%20multiple/#output","text":"In case your program decides that the target set of numbers can not be found it should print to the output the single number 0. Otherwise it should print the number of the chosen numbers in the first line followed by the chosen numbers themselves (on a separate line each) in arbitrary order. If there are more than one set of numbers with required properties you should print to the output only one (preferably your favorite) of them.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/poj%202356%20Find%20a%20multiple/#sample-input","text":"5 1 2 3 4 1","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/poj%202356%20Find%20a%20multiple/#sample-output","text":"2 2 3","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/poj%202356%20Find%20a%20multiple/#code","text":"//#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> inline int read() { int ra, fh; char rx; rx = getchar(), ra = 0, fh = 1; while ((rx < '0' || rx > '9') && rx != '-') rx = getchar(); if (rx == '-') fh = -1, rx = getchar(); while (rx >= '0' && rx <= '9') ra *= 10, ra += rx - 48, rx = getchar(); return ra * fh; } using namespace std; typedef long long ll; const int MAX_N = 10010; int N, sum[MAX_N], visit[MAX_N]; void printSum(int a, int b) { printf(\"%d\\n\", b - a); for (int i = a + 1; i <= b; ++i) { printf(\"%d\\n\", sum[i] - sum[i - 1]); } } inline void tMain() { N = read(); int t; for (int i = 1; i <= N; ++i) { t = read(); sum[i] = sum[i - 1] + t; } for (int i = 1; i <= N; ++i) { t = sum[i] % N; if (t % N == 0) { printSum(0, i); return; } else { if (visit[t] == 0) visit[t] = i; else { printSum(visit[t], i); return; } } } } int main() { #ifdef mytest test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/poj%203370%20Halloween%20treats/","text":"Halloween treats Description Every year there is the same problem at Halloween: Each neighbour is only willing to give a certain total number of sweets on that day, no matter how many children call on him, so it may happen that a child will get nothing if it is too late. To avoid conflicts, the children have decided they will put all sweets together and then divide them evenly among themselves. From last year's experience of Halloween they know how many sweets they get from each neighbour. Since they care more about justice than about the number of sweets they get, they want to select a subset of the neighbours to visit, so that in sharing every child receives the same number of sweets. They will not be satisfied if they have any sweets left which cannot be divided. Your job is to help the children and present a solution. Input The input contains several test cases. The first line of each test case contains two integers c and n ( 1 \u2264 c \u2264 n \u2264 100000 ), the number of children and the number of neighbours, respectively. The next line contains n space separated integers a_1 , ... , _a__n ( 1 \u2264 ai \u2264 100000 ), where a__i represents the number of sweets the children get if they visit neighbour i . The last test case is followed by two zeros. Output For each test case output one line with the indices of the neighbours the children should select (here, index i corresponds to neighbour i who gives a total number of _a_i sweets). If there is no solution where each child gets at least one sweet print \"no sweets\" instead. Note that if there are several solutions where each child gets at least one sweet, you may print any of them. Sample Input 4 5 1 2 3 7 5 3 6 7 11 2 5 13 17 0 0 Sample Output 3 5 2 3 4 Code c <= n \u5fc5\u6709\u89e3 //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> inline int read() { int ra, fh; char rx; rx = getchar(), ra = 0, fh = 1; while ((rx < '0' || rx > '9') && rx != '-') rx = getchar(); if (rx == '-') fh = -1, rx = getchar(); while (rx >= '0' && rx <= '9') ra *= 10, ra += rx - 48, rx = getchar(); return ra * fh; } using namespace std; typedef long long ll; const int MAX_N = 100010; ll C, N, sum[MAX_N], visit[MAX_N]; void printSum(int a, int b) { for (int i = a + 1; i <= b; ++i) { printf(\"%d\", i); if (i == b) putchar('\\n'); else putchar(' '); } } inline void tMain() { while (C = read(), N = read(), C != 0 || N != 0) { ll t; memset(visit, 0, sizeof(visit)); for (int i = 1; i <= N; ++i) { t = read(); sum[i] = sum[i - 1] + t; } int i; for (i = 1; i <= N; ++i) { t = sum[i] % C; if (t % C == 0) { printSum(0, i); break; } else { if (visit[t] == 0) visit[t] = i; else { printSum(visit[t], i); break; } } } } } int main() { #ifdef mytest test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Halloween treats"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/poj%203370%20Halloween%20treats/#halloween-treats","text":"","title":"Halloween treats"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/poj%203370%20Halloween%20treats/#description","text":"Every year there is the same problem at Halloween: Each neighbour is only willing to give a certain total number of sweets on that day, no matter how many children call on him, so it may happen that a child will get nothing if it is too late. To avoid conflicts, the children have decided they will put all sweets together and then divide them evenly among themselves. From last year's experience of Halloween they know how many sweets they get from each neighbour. Since they care more about justice than about the number of sweets they get, they want to select a subset of the neighbours to visit, so that in sharing every child receives the same number of sweets. They will not be satisfied if they have any sweets left which cannot be divided. Your job is to help the children and present a solution.","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/poj%203370%20Halloween%20treats/#input","text":"The input contains several test cases. The first line of each test case contains two integers c and n ( 1 \u2264 c \u2264 n \u2264 100000 ), the number of children and the number of neighbours, respectively. The next line contains n space separated integers a_1 , ... , _a__n ( 1 \u2264 ai \u2264 100000 ), where a__i represents the number of sweets the children get if they visit neighbour i . The last test case is followed by two zeros.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/poj%203370%20Halloween%20treats/#output","text":"For each test case output one line with the indices of the neighbours the children should select (here, index i corresponds to neighbour i who gives a total number of _a_i sweets). If there is no solution where each child gets at least one sweet print \"no sweets\" instead. Note that if there are several solutions where each child gets at least one sweet, you may print any of them.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/poj%203370%20Halloween%20treats/#sample-input","text":"4 5 1 2 3 7 5 3 6 7 11 2 5 13 17 0 0","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/poj%203370%20Halloween%20treats/#sample-output","text":"3 5 2 3 4","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/poj%203370%20Halloween%20treats/#code","text":"c <= n \u5fc5\u6709\u89e3 //#define mytest #ifdef mytest #include \"test.h\" Test test; #endif #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> #include <stack> inline int read() { int ra, fh; char rx; rx = getchar(), ra = 0, fh = 1; while ((rx < '0' || rx > '9') && rx != '-') rx = getchar(); if (rx == '-') fh = -1, rx = getchar(); while (rx >= '0' && rx <= '9') ra *= 10, ra += rx - 48, rx = getchar(); return ra * fh; } using namespace std; typedef long long ll; const int MAX_N = 100010; ll C, N, sum[MAX_N], visit[MAX_N]; void printSum(int a, int b) { for (int i = a + 1; i <= b; ++i) { printf(\"%d\", i); if (i == b) putchar('\\n'); else putchar(' '); } } inline void tMain() { while (C = read(), N = read(), C != 0 || N != 0) { ll t; memset(visit, 0, sizeof(visit)); for (int i = 1; i <= N; ++i) { t = read(); sum[i] = sum[i - 1] + t; } int i; for (i = 1; i <= N; ++i) { t = sum[i] % C; if (t % C == 0) { printSum(0, i); break; } else { if (visit[t] == 0) visit[t] = i; else { printSum(visit[t], i); break; } } } } } int main() { #ifdef mytest test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97/zoj%201292%20Integer%20Inquiry/","text":"Integer Inquiry One of the first users of BIT's new supercomputer was Chip Diller. He extended his exploration of powers of 3 to go from 0 to 333 and he explored taking various sums of those numbers. \"This supercomputer is great,'' remarked Chip.\"I only wish Timothy were here to see these results.\" (Chip moved to a new apartment, once one became available on the third floor of the Lemon Sky apartments on Third Street.) Input The input will consist of at most 100 lines of text, each of which contains a single VeryLongInteger. Each VeryLongInteger will be 100 or fewer characters in length, and will only contain digits (no VeryLongInteger will be negative). The final input line will contain a single zero on a line by itself. Output Your program should output the sum of the VeryLongIntegers given in the input. This problem contains multiple test cases! The first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks. The output format consists of N output blocks. There is a blank line between output blocks. Sample Input 1 123456789012345678901234567890 123456789012345678901234567890 123456789012345678901234567890 0 Sample Output 370370367037037036703703703670 Code import java.util.*; import java.math.BigInteger; public class Main { public static void main(String[] args) { Scanner in = new Scanner(System.in); int N; N = in.nextInt(); for (int i = 0; i < N; ++i) { BigInteger ans = BigInteger.ZERO, a; while (in.hasNextBigInteger()) { a = in.nextBigInteger(); if (a.equals(BigInteger.ZERO)) { System.out.println(ans); if (i != N - 1) System.out.println(); break; } ans = ans.add(a); } } } }","title":"Integer Inquiry"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97/zoj%201292%20Integer%20Inquiry/#integer-inquiry","text":"One of the first users of BIT's new supercomputer was Chip Diller. He extended his exploration of powers of 3 to go from 0 to 333 and he explored taking various sums of those numbers. \"This supercomputer is great,'' remarked Chip.\"I only wish Timothy were here to see these results.\" (Chip moved to a new apartment, once one became available on the third floor of the Lemon Sky apartments on Third Street.) Input The input will consist of at most 100 lines of text, each of which contains a single VeryLongInteger. Each VeryLongInteger will be 100 or fewer characters in length, and will only contain digits (no VeryLongInteger will be negative). The final input line will contain a single zero on a line by itself. Output Your program should output the sum of the VeryLongIntegers given in the input. This problem contains multiple test cases! The first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks. The output format consists of N output blocks. There is a blank line between output blocks. Sample Input 1 123456789012345678901234567890 123456789012345678901234567890 123456789012345678901234567890 0 Sample Output 370370367037037036703703703670","title":"Integer Inquiry"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97/zoj%201292%20Integer%20Inquiry/#code","text":"import java.util.*; import java.math.BigInteger; public class Main { public static void main(String[] args) { Scanner in = new Scanner(System.in); int N; N = in.nextInt(); for (int i = 0; i < N; ++i) { BigInteger ans = BigInteger.ZERO, a; while (in.hasNextBigInteger()) { a = in.nextBigInteger(); if (a.equals(BigInteger.ZERO)) { System.out.println(ans); if (i != N - 1) System.out.println(); break; } ans = ans.add(a); } } } }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97/zoj%202313%20Chinese%20Girls%27%20Amusement/","text":"Chinese Girls' Amusement You must have heard that the Chinese culture is quite different from that of Europe or Russia. So some Chinese habits seem quite unusual or even weird to us. So it is known that there is one popular game of Chinese girls. N girls stand forming a circle and throw a ball to each other. First girl holding a ball throws it to the K-th girl on her left (1 <= K <= N/2). That girl catches the ball and in turn throws it to the K-th girl on her left, and so on. So the ball is passed from one girl to another until it comes back to the first girl. If for example N = 7 and K = 3, the girls receive the ball in the following order: 1, 4, 7, 3, 6, 2, 5, 1. To make the game even more interesting the girls want to choose K as large as possible, but they want one condition to hold: each girl must own the ball during the game. This problem contains multiple test cases! The first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks. The output format consists of N output blocks. There is a blank line between output blocks. Input Input file contains one integer number N (3 <= N <= 10^2000) - the number of Chinese girls taking part in the game. Output Output the only number - K that they should choose. Sample Input 2 7 6 Sample Output 3 1 Code T = int(input()) while T != 0: T -= 1 input() N = int(input()) if N & 1 == 1: print(N // 2) else: t = N // 2 - 1 if t % 2 == 1: print(t) else: print(t - 1) if T != 0: print()","title":"Chinese Girls' Amusement"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97/zoj%202313%20Chinese%20Girls%27%20Amusement/#chinese-girls-amusement","text":"You must have heard that the Chinese culture is quite different from that of Europe or Russia. So some Chinese habits seem quite unusual or even weird to us. So it is known that there is one popular game of Chinese girls. N girls stand forming a circle and throw a ball to each other. First girl holding a ball throws it to the K-th girl on her left (1 <= K <= N/2). That girl catches the ball and in turn throws it to the K-th girl on her left, and so on. So the ball is passed from one girl to another until it comes back to the first girl. If for example N = 7 and K = 3, the girls receive the ball in the following order: 1, 4, 7, 3, 6, 2, 5, 1. To make the game even more interesting the girls want to choose K as large as possible, but they want one condition to hold: each girl must own the ball during the game. This problem contains multiple test cases! The first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks. The output format consists of N output blocks. There is a blank line between output blocks. Input Input file contains one integer number N (3 <= N <= 10^2000) - the number of Chinese girls taking part in the game. Output Output the only number - K that they should choose. Sample Input 2 7 6 Sample Output 3 1","title":"Chinese Girls' Amusement"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97/zoj%202313%20Chinese%20Girls%27%20Amusement/#code","text":"T = int(input()) while T != 0: T -= 1 input() N = int(input()) if N & 1 == 1: print(N // 2) else: t = N // 2 - 1 if t % 2 == 1: print(t) else: print(t - 1) if T != 0: print()","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97/zoj%202371%20Three%20powers/","text":"Three powers Consider the set of all non-negative integer powers of 3. S = { 1, 3, 9, 27, 81, ... } Consider the sequence of all subsets of S ordered by the value of the sum of their elements. The question is simple: find the set at the n-th position in the sequence and print it in increasing order of its elements. Input Each line of input contains a number n, which is a positive integer with no more than 19 digits. The last line of input contains 0 and it should not be processed. Output For each line of input, output a single line displaying the n-th set as described above, in the format used in the sample output. Sample Input 1 7 14 783 1125900981634049 0 Sample Output { } { 3, 9 } { 1, 9, 27 } { 3, 9, 27, 6561, 19683 } { 59049, 3486784401, 205891132094649, 717897987691852588770249 } Code lst = [] ans = 1 for i in range(0, 66): lst.append(ans) ans *= 3 while True: n = int(input()) if n == 0: break s = bin(n - 1)[2:] ans = [] i = 0 for t in s[::-1]: if t == '1': ans.append(lst[i]) i += 1 L = len(ans) print(\"{ \", end='') for i in range(0, L): if i != L - 1: print(f\"{ans[i]}, \", end='') else: print(f\"{ans[i]} \", end='') print(\"}\")","title":"Three powers"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97/zoj%202371%20Three%20powers/#three-powers","text":"Consider the set of all non-negative integer powers of 3. S = { 1, 3, 9, 27, 81, ... } Consider the sequence of all subsets of S ordered by the value of the sum of their elements. The question is simple: find the set at the n-th position in the sequence and print it in increasing order of its elements. Input Each line of input contains a number n, which is a positive integer with no more than 19 digits. The last line of input contains 0 and it should not be processed. Output For each line of input, output a single line displaying the n-th set as described above, in the format used in the sample output. Sample Input 1 7 14 783 1125900981634049 0 Sample Output { } { 3, 9 } { 1, 9, 27 } { 3, 9, 27, 6561, 19683 } { 59049, 3486784401, 205891132094649, 717897987691852588770249 }","title":"Three powers"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97/zoj%202371%20Three%20powers/#code","text":"lst = [] ans = 1 for i in range(0, 66): lst.append(ans) ans *= 3 while True: n = int(input()) if n == 0: break s = bin(n - 1)[2:] ans = [] i = 0 for t in s[::-1]: if t == '1': ans.append(lst[i]) i += 1 L = len(ans) print(\"{ \", end='') for i in range(0, L): if i != L - 1: print(f\"{ans[i]}, \", end='') else: print(f\"{ans[i]} \", end='') print(\"}\")","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97/zoj%203987%20Numbers/","text":"Numbers DreamGrid has a nonnegative integer (n). He would like to divide (n) into (m) nonnegative integers (a_1, a_2, \\dots, a_m) (a_1, a_2, \\dots, a_m) and minimizes their bitwise or (i.e. (n=a_1 + a_2 + \\dots + a_m) (n=a_1 + a_2 + \\dots + a_m) and (a_1 \\text{ OR } a_2 \\text{ OR } \\dots \\text{ OR } a_m) (a_1 \\text{ OR } a_2 \\text{ OR } \\dots \\text{ OR } a_m) should be as small as possible). Input There are multiple test cases. The first line of input contains an integer , indicating the number of test cases. For each test case: The first line contains two integers (n) and (m) ((0 \\le n < 10^{1000}, 1 \\le m < 10^{100})). It is guaranteed that the sum of the length of (n) does not exceed (20000). Output For each test case, output an integer denoting the minimum value of their bitwise or. Sample Input 5 3 1 3 2 3 3 10000 5 1244 10 Sample Output 3 3 1 2000 125 Code T = int(input()) while T != 0: T -= 1 n, m = map(int, input().split()) L = len(bin(n)[2::]) - 1 ans = \"\" while L != -1: t = 1 << L if (t - 1) * m >= n: ans += \"0\" else: ans += \"1\" if n >= t * m: n -= t * m else: n %= t L -= 1 print(int(ans, 2))","title":"Numbers"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97/zoj%203987%20Numbers/#numbers","text":"DreamGrid has a nonnegative integer (n). He would like to divide (n) into (m) nonnegative integers (a_1, a_2, \\dots, a_m) (a_1, a_2, \\dots, a_m) and minimizes their bitwise or (i.e. (n=a_1 + a_2 + \\dots + a_m) (n=a_1 + a_2 + \\dots + a_m) and (a_1 \\text{ OR } a_2 \\text{ OR } \\dots \\text{ OR } a_m) (a_1 \\text{ OR } a_2 \\text{ OR } \\dots \\text{ OR } a_m) should be as small as possible).","title":"Numbers"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97/zoj%203987%20Numbers/#input","text":"There are multiple test cases. The first line of input contains an integer , indicating the number of test cases. For each test case: The first line contains two integers (n) and (m) ((0 \\le n < 10^{1000}, 1 \\le m < 10^{100})). It is guaranteed that the sum of the length of (n) does not exceed (20000).","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97/zoj%203987%20Numbers/#output","text":"For each test case, output an integer denoting the minimum value of their bitwise or.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97/zoj%203987%20Numbers/#sample-input","text":"5 3 1 3 2 3 3 10000 5 1244 10","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97/zoj%203987%20Numbers/#sample-output","text":"3 3 1 2000 125","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E6%95%B0%E5%AD%A6/%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97/zoj%203987%20Numbers/#code","text":"T = int(input()) while T != 0: T -= 1 n, m = map(int, input().split()) L = len(bin(n)[2::]) - 1 ans = \"\" while L != -1: t = 1 << L if (t - 1) * m >= n: ans += \"0\" else: ans += \"1\" if n >= t * m: n -= t * m else: n %= t L -= 1 print(int(ans, 2))","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201182/","text":"\u98df\u7269\u94fe Description \u52a8\u7269\u738b\u56fd\u4e2d\u6709\u4e09\u7c7b\u52a8\u7269A,B,C\uff0c\u8fd9\u4e09\u7c7b\u52a8\u7269\u7684\u98df\u7269\u94fe\u6784\u6210\u4e86\u6709\u8da3\u7684\u73af\u5f62\u3002A\u5403B\uff0c B\u5403C\uff0cC\u5403A\u3002 \u73b0\u6709N\u4e2a\u52a8\u7269\uff0c\u4ee51\uff0dN\u7f16\u53f7\u3002\u6bcf\u4e2a\u52a8\u7269\u90fd\u662fA,B,C\u4e2d\u7684\u4e00\u79cd\uff0c\u4f46\u662f\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u5b83\u5230\u5e95\u662f\u54ea\u4e00\u79cd\u3002 \u6709\u4eba\u7528\u4e24\u79cd\u8bf4\u6cd5\u5bf9\u8fd9N\u4e2a\u52a8\u7269\u6240\u6784\u6210\u7684\u98df\u7269\u94fe\u5173\u7cfb\u8fdb\u884c\u63cf\u8ff0\uff1a \u7b2c\u4e00\u79cd\u8bf4\u6cd5\u662f\"1 X Y\"\uff0c\u8868\u793aX\u548cY\u662f\u540c\u7c7b\u3002 \u7b2c\u4e8c\u79cd\u8bf4\u6cd5\u662f\"2 X Y\"\uff0c\u8868\u793aX\u5403Y\u3002 \u6b64\u4eba\u5bf9N\u4e2a\u52a8\u7269\uff0c\u7528\u4e0a\u8ff0\u4e24\u79cd\u8bf4\u6cd5\uff0c\u4e00\u53e5\u63a5\u4e00\u53e5\u5730\u8bf4\u51faK\u53e5\u8bdd\uff0c\u8fd9K\u53e5\u8bdd\u6709\u7684\u662f\u771f\u7684\uff0c\u6709\u7684\u662f\u5047\u7684\u3002\u5f53\u4e00\u53e5\u8bdd\u6ee1\u8db3\u4e0b\u5217\u4e09\u6761\u4e4b\u4e00\u65f6\uff0c\u8fd9\u53e5\u8bdd\u5c31\u662f\u5047\u8bdd\uff0c\u5426\u5219\u5c31\u662f\u771f\u8bdd\u3002 1\uff09 \u5f53\u524d\u7684\u8bdd\u4e0e\u524d\u9762\u7684\u67d0\u4e9b\u771f\u7684\u8bdd\u51b2\u7a81\uff0c\u5c31\u662f\u5047\u8bdd\uff1b 2\uff09 \u5f53\u524d\u7684\u8bdd\u4e2dX\u6216Y\u6bd4N\u5927\uff0c\u5c31\u662f\u5047\u8bdd\uff1b 3\uff09 \u5f53\u524d\u7684\u8bdd\u8868\u793aX\u5403X\uff0c\u5c31\u662f\u5047\u8bdd\u3002 \u4f60\u7684\u4efb\u52a1\u662f\u6839\u636e\u7ed9\u5b9a\u7684N\uff081 <= N <= 50,000\uff09\u548cK\u53e5\u8bdd\uff080 <= K <= 100,000\uff09\uff0c\u8f93\u51fa\u5047\u8bdd\u7684\u603b\u6570\u3002 Input \u7b2c\u4e00\u884c\u662f\u4e24\u4e2a\u6574\u6570N\u548cK\uff0c\u4ee5\u4e00\u4e2a\u7a7a\u683c\u5206\u9694\u3002 \u4ee5\u4e0bK\u884c\u6bcf\u884c\u662f\u4e09\u4e2a\u6b63\u6574\u6570 D\uff0cX\uff0cY\uff0c\u4e24\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0c\u5176\u4e2dD\u8868\u793a\u8bf4\u6cd5\u7684\u79cd\u7c7b\u3002 \u82e5D=1\uff0c\u5219\u8868\u793aX\u548cY\u662f\u540c\u7c7b\u3002 \u82e5D=2\uff0c\u5219\u8868\u793aX\u5403Y\u3002 Output \u53ea\u6709\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5047\u8bdd\u7684\u6570\u76ee\u3002 Sample Input 100 7 1 101 1 2 1 2 2 2 3 2 3 3 1 1 3 2 3 1 1 5 5 Sample Output 3 Code #include <iostream> #include <algorithm> #include <queue> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 50010; int P; int p[MAX_N], relation[MAX_N]; inline int mod(int a, int b) { return a - b * floor((double)a/b); } int findP(int e) { if (e == p[e]) return e; int t = p[e]; p[e] = findP(t); relation[e] = mod(relation[t] + relation[e], 3); return p[e]; } int K, N; int cnt = 0; void setUnion(int op, int a, int b) { int r = findP(a), r1 = findP(b); if (r != r1) { p[r] = r1; relation[r] = mod(op - 1 + relation[b] - relation[a], 3); } else { if (mod(relation[a] - relation[b], 3) == op - 1) { return; } cnt++; } } void init() { for (int i = 0; i < MAX_N; ++i) { p[i] = i; relation[i] = 0; } } void tMain() { scanf(\"%d%d\", &N, &K); int op, a, b; init(); while (K--) { scanf(\"%d%d%d\", &op, &a, &b); if ((op == 2 && a == b) || (a > N || b > N || a < 1 || b < 1)) { ++cnt; } else setUnion(op, a, b); } printf(\"%d\\n\", cnt); } int main() { #ifdef mytest Test test; test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"\u98df\u7269\u94fe"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201182/#_1","text":"","title":"\u98df\u7269\u94fe"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201182/#description","text":"\u52a8\u7269\u738b\u56fd\u4e2d\u6709\u4e09\u7c7b\u52a8\u7269A,B,C\uff0c\u8fd9\u4e09\u7c7b\u52a8\u7269\u7684\u98df\u7269\u94fe\u6784\u6210\u4e86\u6709\u8da3\u7684\u73af\u5f62\u3002A\u5403B\uff0c B\u5403C\uff0cC\u5403A\u3002 \u73b0\u6709N\u4e2a\u52a8\u7269\uff0c\u4ee51\uff0dN\u7f16\u53f7\u3002\u6bcf\u4e2a\u52a8\u7269\u90fd\u662fA,B,C\u4e2d\u7684\u4e00\u79cd\uff0c\u4f46\u662f\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u5b83\u5230\u5e95\u662f\u54ea\u4e00\u79cd\u3002 \u6709\u4eba\u7528\u4e24\u79cd\u8bf4\u6cd5\u5bf9\u8fd9N\u4e2a\u52a8\u7269\u6240\u6784\u6210\u7684\u98df\u7269\u94fe\u5173\u7cfb\u8fdb\u884c\u63cf\u8ff0\uff1a \u7b2c\u4e00\u79cd\u8bf4\u6cd5\u662f\"1 X Y\"\uff0c\u8868\u793aX\u548cY\u662f\u540c\u7c7b\u3002 \u7b2c\u4e8c\u79cd\u8bf4\u6cd5\u662f\"2 X Y\"\uff0c\u8868\u793aX\u5403Y\u3002 \u6b64\u4eba\u5bf9N\u4e2a\u52a8\u7269\uff0c\u7528\u4e0a\u8ff0\u4e24\u79cd\u8bf4\u6cd5\uff0c\u4e00\u53e5\u63a5\u4e00\u53e5\u5730\u8bf4\u51faK\u53e5\u8bdd\uff0c\u8fd9K\u53e5\u8bdd\u6709\u7684\u662f\u771f\u7684\uff0c\u6709\u7684\u662f\u5047\u7684\u3002\u5f53\u4e00\u53e5\u8bdd\u6ee1\u8db3\u4e0b\u5217\u4e09\u6761\u4e4b\u4e00\u65f6\uff0c\u8fd9\u53e5\u8bdd\u5c31\u662f\u5047\u8bdd\uff0c\u5426\u5219\u5c31\u662f\u771f\u8bdd\u3002 1\uff09 \u5f53\u524d\u7684\u8bdd\u4e0e\u524d\u9762\u7684\u67d0\u4e9b\u771f\u7684\u8bdd\u51b2\u7a81\uff0c\u5c31\u662f\u5047\u8bdd\uff1b 2\uff09 \u5f53\u524d\u7684\u8bdd\u4e2dX\u6216Y\u6bd4N\u5927\uff0c\u5c31\u662f\u5047\u8bdd\uff1b 3\uff09 \u5f53\u524d\u7684\u8bdd\u8868\u793aX\u5403X\uff0c\u5c31\u662f\u5047\u8bdd\u3002 \u4f60\u7684\u4efb\u52a1\u662f\u6839\u636e\u7ed9\u5b9a\u7684N\uff081 <= N <= 50,000\uff09\u548cK\u53e5\u8bdd\uff080 <= K <= 100,000\uff09\uff0c\u8f93\u51fa\u5047\u8bdd\u7684\u603b\u6570\u3002","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201182/#input","text":"\u7b2c\u4e00\u884c\u662f\u4e24\u4e2a\u6574\u6570N\u548cK\uff0c\u4ee5\u4e00\u4e2a\u7a7a\u683c\u5206\u9694\u3002 \u4ee5\u4e0bK\u884c\u6bcf\u884c\u662f\u4e09\u4e2a\u6b63\u6574\u6570 D\uff0cX\uff0cY\uff0c\u4e24\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0c\u5176\u4e2dD\u8868\u793a\u8bf4\u6cd5\u7684\u79cd\u7c7b\u3002 \u82e5D=1\uff0c\u5219\u8868\u793aX\u548cY\u662f\u540c\u7c7b\u3002 \u82e5D=2\uff0c\u5219\u8868\u793aX\u5403Y\u3002","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201182/#output","text":"\u53ea\u6709\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5047\u8bdd\u7684\u6570\u76ee\u3002","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201182/#sample-input","text":"100 7 1 101 1 2 1 2 2 2 3 2 3 3 1 1 3 2 3 1 1 5 5","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201182/#sample-output","text":"3","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201182/#code","text":"#include <iostream> #include <algorithm> #include <queue> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 50010; int P; int p[MAX_N], relation[MAX_N]; inline int mod(int a, int b) { return a - b * floor((double)a/b); } int findP(int e) { if (e == p[e]) return e; int t = p[e]; p[e] = findP(t); relation[e] = mod(relation[t] + relation[e], 3); return p[e]; } int K, N; int cnt = 0; void setUnion(int op, int a, int b) { int r = findP(a), r1 = findP(b); if (r != r1) { p[r] = r1; relation[r] = mod(op - 1 + relation[b] - relation[a], 3); } else { if (mod(relation[a] - relation[b], 3) == op - 1) { return; } cnt++; } } void init() { for (int i = 0; i < MAX_N; ++i) { p[i] = i; relation[i] = 0; } } void tMain() { scanf(\"%d%d\", &N, &K); int op, a, b; init(); while (K--) { scanf(\"%d%d%d\", &op, &a, &b); if ((op == 2 && a == b) || (a > N || b > N || a < 1 || b < 1)) { ++cnt; } else setUnion(op, a, b); } printf(\"%d\\n\", cnt); } int main() { #ifdef mytest Test test; test.run(); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201611/","text":"The Suspects Description Severe acute respiratory syndrome (SARS), an atypical pneumonia of unknown aetiology, was recognized as a global threat in mid-March 2003. To minimize transmission to others, the best strategy is to separate the suspects from others. In the Not-Spreading-Your-Sickness University (NSYSU), there are many student groups. Students in the same group intercommunicate with each other frequently, and a student may join several groups. To prevent the possible transmissions of SARS, the NSYSU collects the member lists of all student groups, and makes the following rule in their standard operation procedure (SOP). Once a member in a group is a suspect, all members in the group are suspects. However, they find that it is not easy to identify all the suspects when a student is recognized as a suspect. Your job is to write a program which finds all the suspects. Input The input file contains several cases. Each test case begins with two integers n and m in a line, where n is the number of students, and m is the number of groups. You may assume that 0 < n <= 30000 and 0 <= m <= 500. Every student is numbered by a unique integer between 0 and n\u22121, and initially student 0 is recognized as a suspect in all the cases. This line is followed by m member lists of the groups, one line per group. Each line begins with an integer k by itself representing the number of members in the group. Following the number of members, there are k integers representing the students in this group. All the integers in a line are separated by at least one space. A case with n = 0 and m = 0 indicates the end of the input, and need not be processed. Output For each case, output the number of suspects in one line. Sample Input 100 4 2 1 2 5 10 13 11 12 14 2 0 1 2 99 2 200 2 1 5 5 1 2 3 4 5 1 0 0 0 Sample Output 4 1 1 Code #include <iostream> #include <algorithm> #include <queue> #include <cstdio> #include <vector> #include <cstring> #include <set> #include <numeric> //#define mytest #ifdef mytest #include <ctime> auto fp = freopen(\"../test.in\", \"r\", stdin); #endif using namespace std; const int MAX_N = 30010; int N, M; int mset[MAX_N]; int size[MAX_N]; inline void init() { for (int i = 0; i < N; ++i) { mset[i] = i; size[i] = 1; } } inline int findSet(int e) { int r = mset[e]; for (; mset[r] != r; r = mset[r]); for (int t = e; t != r;) { int k = mset[t]; mset[t] = r; t = k; } return r; } inline void unionSet(int a, int b) { int f = findSet(a), f1 = findSet(b); if (f1 != f) { mset[f1] = f; size[f] += size[f1]; } } void tMain() { while (cin >> N >> M, N != 0 || M != 0) { init(); for (int i = 0; i < M; ++i) { int k, a, b; cin >> k >> a; if (k > 1) { for (int j = 1; j < k; ++j) { cin >> b; unionSet(a, b); } } } int r = findSet(0); cout << size[r] << endl; } } int main() { ios::sync_with_stdio(false); cin.tie(0); #ifdef mytest clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"The Suspects"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201611/#the-suspects","text":"","title":"The Suspects"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201611/#description","text":"Severe acute respiratory syndrome (SARS), an atypical pneumonia of unknown aetiology, was recognized as a global threat in mid-March 2003. To minimize transmission to others, the best strategy is to separate the suspects from others. In the Not-Spreading-Your-Sickness University (NSYSU), there are many student groups. Students in the same group intercommunicate with each other frequently, and a student may join several groups. To prevent the possible transmissions of SARS, the NSYSU collects the member lists of all student groups, and makes the following rule in their standard operation procedure (SOP). Once a member in a group is a suspect, all members in the group are suspects. However, they find that it is not easy to identify all the suspects when a student is recognized as a suspect. Your job is to write a program which finds all the suspects.","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201611/#input","text":"The input file contains several cases. Each test case begins with two integers n and m in a line, where n is the number of students, and m is the number of groups. You may assume that 0 < n <= 30000 and 0 <= m <= 500. Every student is numbered by a unique integer between 0 and n\u22121, and initially student 0 is recognized as a suspect in all the cases. This line is followed by m member lists of the groups, one line per group. Each line begins with an integer k by itself representing the number of members in the group. Following the number of members, there are k integers representing the students in this group. All the integers in a line are separated by at least one space. A case with n = 0 and m = 0 indicates the end of the input, and need not be processed.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201611/#output","text":"For each case, output the number of suspects in one line.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201611/#sample-input","text":"100 4 2 1 2 5 10 13 11 12 14 2 0 1 2 99 2 200 2 1 5 5 1 2 3 4 5 1 0 0 0","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201611/#sample-output","text":"4 1 1","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201611/#code","text":"#include <iostream> #include <algorithm> #include <queue> #include <cstdio> #include <vector> #include <cstring> #include <set> #include <numeric> //#define mytest #ifdef mytest #include <ctime> auto fp = freopen(\"../test.in\", \"r\", stdin); #endif using namespace std; const int MAX_N = 30010; int N, M; int mset[MAX_N]; int size[MAX_N]; inline void init() { for (int i = 0; i < N; ++i) { mset[i] = i; size[i] = 1; } } inline int findSet(int e) { int r = mset[e]; for (; mset[r] != r; r = mset[r]); for (int t = e; t != r;) { int k = mset[t]; mset[t] = r; t = k; } return r; } inline void unionSet(int a, int b) { int f = findSet(a), f1 = findSet(b); if (f1 != f) { mset[f1] = f; size[f] += size[f1]; } } void tMain() { while (cin >> N >> M, N != 0 || M != 0) { init(); for (int i = 0; i < M; ++i) { int k, a, b; cin >> k >> a; if (k > 1) { for (int j = 1; j < k; ++j) { cin >> b; unionSet(a, b); } } } int r = findSet(0); cout << size[r] << endl; } } int main() { ios::sync_with_stdio(false); cin.tie(0); #ifdef mytest clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201703/","text":"Find them, Catch them Description The police office in Tadu City decides to say ends to the chaos, as launch actions to root up the TWO gangs in the city, Gang Dragon and Gang Snake. However, the police first needs to identify which gang a criminal belongs to. The present question is, given two criminals; do they belong to a same clan? You must give your judgment based on incomplete information. (Since the gangsters are always acting secretly.) Assume N (N <= 10^5) criminals are currently in Tadu City, numbered from 1 to N. And of course, at least one of them belongs to Gang Dragon, and the same for Gang Snake. You will be given M (M <= 10^5) messages in sequence, which are in the following two kinds: D [a] [b] where [a] and [b] are the numbers of two criminals, and they belong to different gangs. A [a] [b] where [a] and [b] are the numbers of two criminals. This requires you to decide whether a and b belong to a same gang. Input The first line of the input contains a single integer T (1 <= T <= 20), the number of test cases. Then T cases follow. Each test case begins with a line with two integers N and M, followed by M lines each containing one message as described above. Output For each message \" A [a] [b] \" in each case, your program should give the judgment based on the information got before. The answers might be one of \"In the same gang.\", \"In different gangs.\" and \"Not sure yet.\" Sample Input 1 5 5 A 1 2 D 1 2 A 1 2 D 2 4 A 1 4 Sample Output Not sure yet. In different gangs. In the same gang. Code \u5e76\u67e5\u96c6\uff0c\u5c06\u6709\u5173\u7cfb\u7684\u8282\u70b9\u52a0\u5165\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u989d\u5916\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4 relation[e] \u8868\u793a e \u548c\u5176\u7236\u8282\u70b9\u7684\u5173\u7cfb\uff0c0 \u4e3a\u76f8\u540c\uff0c1 \u4e3a\u4e0d\u540c\uff0c\u5728\u67e5\u627e\u6839\u8282\u70b9\u8fdb\u884c\u8def\u5f84\u538b\u7f29\u4e4b\u540e\uff0c relation[e] \u5c31\u662f\u548c\u5176\u6839\u8282\u70b9\u7684\u5173\u7cfb\u3002 \u5373\u4f7f\u53d6\u6d88\u540c\u6b65 cin \u4e5f\u4f1a\u8d85\u65f6\u3002 #include <iostream> #include <algorithm> #include <queue> #include <cstdio> #include <vector> #include <cstring> #include <set> #include <numeric> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 1e5 + 10; int T, N, M; int p[MAX_N], relation[MAX_N]; int findP(int e) { if (p[e] == e) return e; int t = p[e]; // \u9700\u8981\u5148\u627e\u6839\uff0c\u538b\u7f29\u8def\u5f84\uff0c\u4f7f relation[t] \u8868\u793a\u4e0e\u5176\u6839\u8282\u70b9\u7684\u5173\u7cfb p[e] = findP(t); relation[e] = (relation[e] + relation[t]) % 2; return p[e]; } inline void setUnion(int a, int b) { int r = findP(a), r1 = findP(b); if (r != r1) { p[r] = r1; relation[r] = (relation[a] + relation[b] + 1) % 2; } } void tMain() { scanf(\"%d\", &T); while (T--) { scanf(\"%d%d%*c\", &N, &M); memset(relation, 0, sizeof(relation)); for (int i = 1; i <= N; ++i) p[i] = i; while (M--) { char message; int a, b; scanf(\"%c%d%d%*c\", &message, &a, &b); if (message == 'A') { int r = findP(a), r1 = findP(b); if (r1 != r) printf(\"Not sure yet.\\n\"); else { if (relation[a] != relation[b]) printf(\"In different gangs.\\n\"); else printf(\"In the same gang.\\n\"); } } else { setUnion(a, b); } } } } int main() { #ifdef mytest Test test; test.run(); FILE *input = freopen(\"../input\", \"r\", stdin); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Find them, Catch them"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201703/#find-them-catch-them","text":"","title":"Find them, Catch them"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201703/#description","text":"The police office in Tadu City decides to say ends to the chaos, as launch actions to root up the TWO gangs in the city, Gang Dragon and Gang Snake. However, the police first needs to identify which gang a criminal belongs to. The present question is, given two criminals; do they belong to a same clan? You must give your judgment based on incomplete information. (Since the gangsters are always acting secretly.) Assume N (N <= 10^5) criminals are currently in Tadu City, numbered from 1 to N. And of course, at least one of them belongs to Gang Dragon, and the same for Gang Snake. You will be given M (M <= 10^5) messages in sequence, which are in the following two kinds: D [a] [b] where [a] and [b] are the numbers of two criminals, and they belong to different gangs. A [a] [b] where [a] and [b] are the numbers of two criminals. This requires you to decide whether a and b belong to a same gang.","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201703/#input","text":"The first line of the input contains a single integer T (1 <= T <= 20), the number of test cases. Then T cases follow. Each test case begins with a line with two integers N and M, followed by M lines each containing one message as described above.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201703/#output","text":"For each message \" A [a] [b] \" in each case, your program should give the judgment based on the information got before. The answers might be one of \"In the same gang.\", \"In different gangs.\" and \"Not sure yet.\"","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201703/#sample-input","text":"1 5 5 A 1 2 D 1 2 A 1 2 D 2 4 A 1 4","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201703/#sample-output","text":"Not sure yet. In different gangs. In the same gang.","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201703/#code","text":"\u5e76\u67e5\u96c6\uff0c\u5c06\u6709\u5173\u7cfb\u7684\u8282\u70b9\u52a0\u5165\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u989d\u5916\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4 relation[e] \u8868\u793a e \u548c\u5176\u7236\u8282\u70b9\u7684\u5173\u7cfb\uff0c0 \u4e3a\u76f8\u540c\uff0c1 \u4e3a\u4e0d\u540c\uff0c\u5728\u67e5\u627e\u6839\u8282\u70b9\u8fdb\u884c\u8def\u5f84\u538b\u7f29\u4e4b\u540e\uff0c relation[e] \u5c31\u662f\u548c\u5176\u6839\u8282\u70b9\u7684\u5173\u7cfb\u3002 \u5373\u4f7f\u53d6\u6d88\u540c\u6b65 cin \u4e5f\u4f1a\u8d85\u65f6\u3002 #include <iostream> #include <algorithm> #include <queue> #include <cstdio> #include <vector> #include <cstring> #include <set> #include <numeric> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 1e5 + 10; int T, N, M; int p[MAX_N], relation[MAX_N]; int findP(int e) { if (p[e] == e) return e; int t = p[e]; // \u9700\u8981\u5148\u627e\u6839\uff0c\u538b\u7f29\u8def\u5f84\uff0c\u4f7f relation[t] \u8868\u793a\u4e0e\u5176\u6839\u8282\u70b9\u7684\u5173\u7cfb p[e] = findP(t); relation[e] = (relation[e] + relation[t]) % 2; return p[e]; } inline void setUnion(int a, int b) { int r = findP(a), r1 = findP(b); if (r != r1) { p[r] = r1; relation[r] = (relation[a] + relation[b] + 1) % 2; } } void tMain() { scanf(\"%d\", &T); while (T--) { scanf(\"%d%d%*c\", &N, &M); memset(relation, 0, sizeof(relation)); for (int i = 1; i <= N; ++i) p[i] = i; while (M--) { char message; int a, b; scanf(\"%c%d%d%*c\", &message, &a, &b); if (message == 'A') { int r = findP(a), r1 = findP(b); if (r1 != r) printf(\"Not sure yet.\\n\"); else { if (relation[a] != relation[b]) printf(\"In different gangs.\\n\"); else printf(\"In the same gang.\\n\"); } } else { setUnion(a, b); } } } } int main() { #ifdef mytest Test test; test.run(); FILE *input = freopen(\"../input\", \"r\", stdin); FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201988/","text":"Cube Stacking Description Farmer John and Betsy are playing a game with N (1 <= N <= 30,000)identical cubes labeled 1 through N. They start with N stacks, each containing a single cube. Farmer John asks Betsy to perform P (1<= P <= 100,000) operation. There are two types of operations: moves and counts. In a move operation, Farmer John asks Bessie to move the stack containing cube X on top of the stack containing cube Y. In a count operation, Farmer John asks Bessie to count the number of cubes on the stack with cube X that are under the cube X and report that value. Write a program that can verify the results of the game. Input Line 1: A single integer, P Lines 2..P+1: Each of these lines describes a legal operation. Line 2 describes the first operation, etc. Each line begins with a 'M' for a move operation or a 'C' for a count operation. For move operations, the line also contains two integers: X and Y.For count operations, the line also contains a single integer: X. Note that the value for N does not appear in the input file. No move operation will request a move a stack onto itself. Output Print the output from each of the count operations in the same order as the input file. Sample Input 6 M 1 6 C 1 M 2 4 M 2 6 C 3 C 4 Sample Output 1 0 2 Code #include <iostream> #include <algorithm> #include <queue> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 30010; int P; int p[MAX_N], relation[MAX_N], size[MAX_N]; int findP(int e) { if (e == p[e]) return e; int t = p[e]; p[e] = findP(t); relation[e] = relation[t] + relation[e]; return p[e]; } void setUnion(int a, int b) { int r = findP(a), r1 = findP(b); if (r != r1) { p[r] = r1; relation[r] += size[r1]; size[r1] += size[r]; } } void init() { for (int i = 0; i < MAX_N; ++i) { p[i] = i; relation[i] = 0; size[i]= 1; } } void tMain() { scanf(\"%d%*c\", &P); init(); while (P--) { char op; int a, b; scanf(\"%c%d%*c\", &op, &a); if (op == 'M') { scanf(\"%d%*c\", &b); setUnion(a, b); } else { findP(a); printf(\"%d\\n\", relation[a]); } } } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Cube Stacking"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201988/#cube-stacking","text":"","title":"Cube Stacking"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201988/#description","text":"Farmer John and Betsy are playing a game with N (1 <= N <= 30,000)identical cubes labeled 1 through N. They start with N stacks, each containing a single cube. Farmer John asks Betsy to perform P (1<= P <= 100,000) operation. There are two types of operations: moves and counts. In a move operation, Farmer John asks Bessie to move the stack containing cube X on top of the stack containing cube Y. In a count operation, Farmer John asks Bessie to count the number of cubes on the stack with cube X that are under the cube X and report that value. Write a program that can verify the results of the game.","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201988/#input","text":"Line 1: A single integer, P Lines 2..P+1: Each of these lines describes a legal operation. Line 2 describes the first operation, etc. Each line begins with a 'M' for a move operation or a 'C' for a count operation. For move operations, the line also contains two integers: X and Y.For count operations, the line also contains a single integer: X. Note that the value for N does not appear in the input file. No move operation will request a move a stack onto itself.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201988/#output","text":"Print the output from each of the count operations in the same order as the input file.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201988/#sample-input","text":"6 M 1 6 C 1 M 2 4 M 2 6 C 3 C 4","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201988/#sample-output","text":"1 0 2","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%201988/#code","text":"#include <iostream> #include <algorithm> #include <queue> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 30010; int P; int p[MAX_N], relation[MAX_N], size[MAX_N]; int findP(int e) { if (e == p[e]) return e; int t = p[e]; p[e] = findP(t); relation[e] = relation[t] + relation[e]; return p[e]; } void setUnion(int a, int b) { int r = findP(a), r1 = findP(b); if (r != r1) { p[r] = r1; relation[r] += size[r1]; size[r1] += size[r]; } } void init() { for (int i = 0; i < MAX_N; ++i) { p[i] = i; relation[i] = 0; size[i]= 1; } } void tMain() { scanf(\"%d%*c\", &P); init(); while (P--) { char op; int a, b; scanf(\"%c%d%*c\", &op, &a); if (op == 'M') { scanf(\"%d%*c\", &b); setUnion(a, b); } else { findP(a); printf(\"%d\\n\", relation[a]); } } } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202236/","text":"Wireless Network Description An earthquake takes place in Southeast Asia. The ACM (Asia Cooperated Medical team) have set up a wireless network with the lap computers, but an unexpected aftershock attacked, all computers in the network were all broken. The computers are repaired one by one, and the network gradually began to work again. Because of the hardware restricts, each computer can only directly communicate with the computers that are not farther than d meters from it. But every computer can be regarded as the intermediary of the communication between two other computers, that is to say computer A and computer B can communicate if computer A and computer B can communicate directly or there is a computer C that can communicate with both A and B. In the process of repairing the network, workers can take two kinds of operations at every moment, repairing a computer, or testing if two computers can communicate. Your job is to answer all the testing operations. Input The first line contains two integers N and d (1 <= N <= 1001, 0 <= d <= 20000). Here N is the number of computers, which are numbered from 1 to N, and D is the maximum distance two computers can communicate directly. In the next N lines, each contains two integers xi, yi (0 <= xi, yi <= 10000), which is the coordinate of N computers. From the (N+1)-th line to the end of input, there are operations, which are carried out one by one. Each line contains an operation in one of following two formats: 1. \"O p\" (1 <= p <= N), which means repairing computer p. 2. \"S p q\" (1 <= p, q <= N), which means testing whether computer p and q can communicate. The input will not exceed 300000 lines. Output For each Testing operation, print \"SUCCESS\" if the two computers can communicate, or \"FAIL\" if not. Sample Input 4 1 0 1 0 2 0 3 0 4 O 1 O 2 O 4 S 1 4 O 3 S 1 4 Sample Output FAIL SUCCESS Code #include <iostream> #include <algorithm> #include <queue> #include <cstdio> #include <vector> #include <cstring> #include <cmath> #include <numeric> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 1010; int N, D; struct pos { int x, y; }; pos table[MAX_N]; bool isEnale[MAX_N]; vector<int> graph[MAX_N]; inline bool inDirect(int a, int b) { return sqrt(pow(table[a].x - table[b].x, 2) + pow(table[a].y - table[b].y, 2)) <= D; } int p[MAX_N]; int findP(int e) { if (e == p[e]) return e; return p[e] = findP(p[e]); } inline void setUnion(int a, int b) { int r = findP(a), r1 = findP(b); if (r != r1) { p[r1] = r; } } inline void init() { for (int i = 1; i <= N; ++i) { p[i] = i; } } void tMain() { scanf(\"%d%d\", &N, &D); for (int i = 1; i <= N; ++i) { scanf(\"%d%d%*c\", &table[i].x, &table[i].y); } for (int i = 1; i <= N; ++i) { for (int j = 1; j <= N; ++j) { if (i != j && inDirect(i, j)) { graph[i].push_back(j); } } } init(); char op; int a, b; while (~scanf(\"%c%d%*c\", &op, &a)) { if (op == 'S') { scanf(\"%d%*c\", &b); if (findP(a) == findP(b)) printf(\"SUCCESS\\n\"); else printf(\"FAIL\\n\"); } else { isEnale[a] = true; for (vector<int>::iterator it = graph[a].begin(); it != graph[a].end(); ++it) { if (isEnale[*it]) { setUnion(a, *it); } } } } } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Wireless Network"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202236/#wireless-network","text":"","title":"Wireless Network"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202236/#description","text":"An earthquake takes place in Southeast Asia. The ACM (Asia Cooperated Medical team) have set up a wireless network with the lap computers, but an unexpected aftershock attacked, all computers in the network were all broken. The computers are repaired one by one, and the network gradually began to work again. Because of the hardware restricts, each computer can only directly communicate with the computers that are not farther than d meters from it. But every computer can be regarded as the intermediary of the communication between two other computers, that is to say computer A and computer B can communicate if computer A and computer B can communicate directly or there is a computer C that can communicate with both A and B. In the process of repairing the network, workers can take two kinds of operations at every moment, repairing a computer, or testing if two computers can communicate. Your job is to answer all the testing operations.","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202236/#input","text":"The first line contains two integers N and d (1 <= N <= 1001, 0 <= d <= 20000). Here N is the number of computers, which are numbered from 1 to N, and D is the maximum distance two computers can communicate directly. In the next N lines, each contains two integers xi, yi (0 <= xi, yi <= 10000), which is the coordinate of N computers. From the (N+1)-th line to the end of input, there are operations, which are carried out one by one. Each line contains an operation in one of following two formats: 1. \"O p\" (1 <= p <= N), which means repairing computer p. 2. \"S p q\" (1 <= p, q <= N), which means testing whether computer p and q can communicate. The input will not exceed 300000 lines.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202236/#output","text":"For each Testing operation, print \"SUCCESS\" if the two computers can communicate, or \"FAIL\" if not.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202236/#sample-input","text":"4 1 0 1 0 2 0 3 0 4 O 1 O 2 O 4 S 1 4 O 3 S 1 4","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202236/#sample-output","text":"FAIL SUCCESS","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202236/#code","text":"#include <iostream> #include <algorithm> #include <queue> #include <cstdio> #include <vector> #include <cstring> #include <cmath> #include <numeric> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; const int MAX_N = 1010; int N, D; struct pos { int x, y; }; pos table[MAX_N]; bool isEnale[MAX_N]; vector<int> graph[MAX_N]; inline bool inDirect(int a, int b) { return sqrt(pow(table[a].x - table[b].x, 2) + pow(table[a].y - table[b].y, 2)) <= D; } int p[MAX_N]; int findP(int e) { if (e == p[e]) return e; return p[e] = findP(p[e]); } inline void setUnion(int a, int b) { int r = findP(a), r1 = findP(b); if (r != r1) { p[r1] = r; } } inline void init() { for (int i = 1; i <= N; ++i) { p[i] = i; } } void tMain() { scanf(\"%d%d\", &N, &D); for (int i = 1; i <= N; ++i) { scanf(\"%d%d%*c\", &table[i].x, &table[i].y); } for (int i = 1; i <= N; ++i) { for (int j = 1; j <= N; ++j) { if (i != j && inDirect(i, j)) { graph[i].push_back(j); } } } init(); char op; int a, b; while (~scanf(\"%c%d%*c\", &op, &a)) { if (op == 'S') { scanf(\"%d%*c\", &b); if (findP(a) == findP(b)) printf(\"SUCCESS\\n\"); else printf(\"FAIL\\n\"); } else { isEnale[a] = true; for (vector<int>::iterator it = graph[a].begin(); it != graph[a].end(); ++it) { if (isEnale[*it]) { setUnion(a, *it); } } } } } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202418/","text":"Hardwood Species Description Hardwoods are the botanical group of trees that have broad leaves, produce a fruit or nut, and generally go dormant in the winter. America's temperate climates produce forests with hundreds of hardwood species -- trees that share certain biological characteristics. Although oak, maple and cherry all are types of hardwood trees, for example, they are different species. Together, all the hardwood species represent 40 percent of the trees in the United States. On the other hand, softwoods, or conifers, from the Latin word meaning \"cone-bearing,\" have needles. Widely available US softwoods include cedar, fir, hemlock, pine, redwood, spruce and cypress. In a home, the softwoods are used primarily as structural lumber such as 2x4s and 2x6s, with some limited decorative applications. Using satellite imaging technology, the Department of Natural Resources has compiled an inventory of every tree standing on a particular day. You are to compute the total fraction of the tree population represented by each species. Input Input to your program consists of a list of the species of every tree observed by the satellite; one tree per line. No species name exceeds 30 characters. There are no more than 10,000 species and no more than 1,000,000 trees. Output Print the name of each species represented in the population, in alphabetical order, followed by the percentage of the population it represents, to 4 decimal places. Sample Input Red Alder Ash Aspen Basswood Ash Beech Yellow Birch Ash Cherry Cottonwood Ash Cypress Red Elm Gum Hackberry White Oak Hickory Pecan Hard Maple White Oak Soft Maple Red Oak Red Oak White Oak Poplan Sassafras Sycamore Black Walnut Willow Sample Output Ash 13.7931 Aspen 3.4483 Basswood 3.4483 Beech 3.4483 Black Walnut 3.4483 Cherry 3.4483 Cottonwood 3.4483 Cypress 3.4483 Gum 3.4483 Hackberry 3.4483 Hard Maple 3.4483 Hickory 3.4483 Pecan 3.4483 Poplan 3.4483 Red Alder 3.4483 Red Elm 3.4483 Red Oak 6.8966 Sassafras 3.4483 Soft Maple 3.4483 Sycamore 3.4483 White Oak 10.3448 Willow 3.4483 Yellow Birch 3.4483 Code #include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; map<string, int> table; void tMain() { ios::sync_with_stdio(false); cin.tie(NULL); cout << setprecision(4) << fixed; string name; int cnt = 0; map<string, int>::iterator it; while (getline(cin, name)) { it = table.find(name); if (it != table.end()) { it->second++; } else { table[name] = 1; } ++cnt; } for (it = table.begin(); it != table.end(); ++it) { cout << it->first << \" \" << (double) it->second * 100 / cnt << endl; } } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Hardwood Species"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202418/#hardwood-species","text":"","title":"Hardwood Species"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202418/#description","text":"Hardwoods are the botanical group of trees that have broad leaves, produce a fruit or nut, and generally go dormant in the winter. America's temperate climates produce forests with hundreds of hardwood species -- trees that share certain biological characteristics. Although oak, maple and cherry all are types of hardwood trees, for example, they are different species. Together, all the hardwood species represent 40 percent of the trees in the United States. On the other hand, softwoods, or conifers, from the Latin word meaning \"cone-bearing,\" have needles. Widely available US softwoods include cedar, fir, hemlock, pine, redwood, spruce and cypress. In a home, the softwoods are used primarily as structural lumber such as 2x4s and 2x6s, with some limited decorative applications. Using satellite imaging technology, the Department of Natural Resources has compiled an inventory of every tree standing on a particular day. You are to compute the total fraction of the tree population represented by each species.","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202418/#input","text":"Input to your program consists of a list of the species of every tree observed by the satellite; one tree per line. No species name exceeds 30 characters. There are no more than 10,000 species and no more than 1,000,000 trees.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202418/#output","text":"Print the name of each species represented in the population, in alphabetical order, followed by the percentage of the population it represents, to 4 decimal places.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202418/#sample-input","text":"Red Alder Ash Aspen Basswood Ash Beech Yellow Birch Ash Cherry Cottonwood Ash Cypress Red Elm Gum Hackberry White Oak Hickory Pecan Hard Maple White Oak Soft Maple Red Oak Red Oak White Oak Poplan Sassafras Sycamore Black Walnut Willow","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202418/#sample-output","text":"Ash 13.7931 Aspen 3.4483 Basswood 3.4483 Beech 3.4483 Black Walnut 3.4483 Cherry 3.4483 Cottonwood 3.4483 Cypress 3.4483 Gum 3.4483 Hackberry 3.4483 Hard Maple 3.4483 Hickory 3.4483 Pecan 3.4483 Poplan 3.4483 Red Alder 3.4483 Red Elm 3.4483 Red Oak 6.8966 Sassafras 3.4483 Soft Maple 3.4483 Sycamore 3.4483 White Oak 10.3448 Willow 3.4483 Yellow Birch 3.4483","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202418/#code","text":"#include <iostream> #include <algorithm> #include <queue> #include <map> #include <cstdio> #include <vector> #include <list> #include <cstring> #include <cmath> #include <numeric> #include <iomanip> //#define mytest #ifdef mytest #include \"cmake-build-debug/test.h\" #endif using namespace std; map<string, int> table; void tMain() { ios::sync_with_stdio(false); cin.tie(NULL); cout << setprecision(4) << fixed; string name; int cnt = 0; map<string, int>::iterator it; while (getline(cin, name)) { it = table.find(name); if (it != table.end()) { it->second++; } else { table[name] = 1; } ++cnt; } for (it = table.begin(); it != table.end(); ++it) { cout << it->first << \" \" << (double) it->second * 100 / cnt << endl; } } int main() { #ifdef mytest // Test test; // test.run(); // FILE *mainOut = freopen(\"../main.out\", \"w\", stdout); FILE *input = freopen(\"../input\", \"r\", stdin); clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202492/","text":"A Bug's Life Description Background Professor Hopper is researching the sexual behavior of a rare species of bugs. He assumes that they feature two different genders and that they only interact with bugs of the opposite gender. In his experiment, individual bugs and their interactions were easy to identify, because numbers were printed on their backs. Problem Given a list of bug interactions, decide whether the experiment supports his assumption of two genders with no homosexual bugs or if it contains some bug interactions that falsify it. Input The first line of the input contains the number of scenarios. Each scenario starts with one line giving the number of bugs (at least one, and up to 2000) and the number of interactions (up to 1000000) separated by a single space. In the following lines, each interaction is given in the form of two distinct bug numbers separated by a single space. Bugs are numbered consecutively starting from one. Output The output for every scenario is a line containing \"Scenario #i:\" , where i is the number of the scenario starting at 1, followed by one line saying either \"No suspicious bugs found!\" if the experiment is consistent with his assumption about the bugs' sexual behavior, or \"Suspicious bugs found!\" if Professor Hopper's assumption is definitely wrong. Sample Input 2 3 3 1 2 2 3 1 3 4 2 1 2 3 4 Sample Output Scenario #1: Suspicious bugs found! Scenario #2: No suspicious bugs found!","title":"A Bug's Life"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202492/#a-bugs-life","text":"","title":"A Bug's Life"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202492/#description","text":"Background Professor Hopper is researching the sexual behavior of a rare species of bugs. He assumes that they feature two different genders and that they only interact with bugs of the opposite gender. In his experiment, individual bugs and their interactions were easy to identify, because numbers were printed on their backs. Problem Given a list of bug interactions, decide whether the experiment supports his assumption of two genders with no homosexual bugs or if it contains some bug interactions that falsify it.","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202492/#input","text":"The first line of the input contains the number of scenarios. Each scenario starts with one line giving the number of bugs (at least one, and up to 2000) and the number of interactions (up to 1000000) separated by a single space. In the following lines, each interaction is given in the form of two distinct bug numbers separated by a single space. Bugs are numbered consecutively starting from one.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202492/#output","text":"The output for every scenario is a line containing \"Scenario #i:\" , where i is the number of the scenario starting at 1, followed by one line saying either \"No suspicious bugs found!\" if the experiment is consistent with his assumption about the bugs' sexual behavior, or \"Suspicious bugs found!\" if Professor Hopper's assumption is definitely wrong.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202492/#sample-input","text":"2 3 3 1 2 2 3 1 3 4 2 1 2 3 4","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202492/#sample-output","text":"Scenario #1: Suspicious bugs found! Scenario #2: No suspicious bugs found!","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202524/","text":"Ubiquitous Religions Description There are so many different religions in the world today that it is difficult to keep track of them all. You are interested in finding out how many different religions students in your university believe in. You know that there are n students in your university (0 < n <= 50000). It is infeasible for you to ask every student their religious beliefs. Furthermore, many students are not comfortable expressing their beliefs. One way to avoid these problems is to ask m (0 <= m <= n(n-1)/2) pairs of students and ask them whether they believe in the same religion (e.g. they may know if they both attend the same church). From this data, you may not know what each person believes in, but you can get an idea of the upper bound of how many different religions can be possibly represented on campus. You may assume that each student subscribes to at most one religion. Input The input consists of a number of cases. Each case starts with a line specifying the integers n and m. The next m lines each consists of two integers i and j, specifying that students i and j believe in the same religion. The students are numbered 1 to n. The end of input is specified by a line in which n = m = 0. Output For each test case, print on a single line the case number (starting with 1) followed by the maximum number of different religions that the students in the university believe in. Sample Input 10 9 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 10 10 4 2 3 4 5 4 8 5 8 0 0 Sample Output Case 1: 1 Case 2: 7 Code #include <iostream> #include <algorithm> #include <queue> #include <cstdio> #include <vector> #include <cstring> #include <set> #include <ctime> #include <numeric> //#define mytest #ifdef mytest auto fp = freopen(\"../test.in\", \"r\", stdin); #endif using namespace std; const int MAX_N = 50010; int N, M; int mset[MAX_N]; inline void init() { // iota(mset, mset + M + 1, 0); for (int i = 1; i < N + 1; ++i) { mset[i] = i; } } inline int findSet(int e) { int r = mset[e]; for (; mset[r] != r; r = mset[r]); for (int t = e; t != r; ) { int k = mset[t]; mset[t] = r; t = k; } return r; } inline void unionSet(int a, int b) { int f = findSet(a), f1 = findSet(b); if (f != f1) mset[f1] = f; } void tMain() { int cnt = 0; while (cin >> N >> M, N != 0 && M != 0) { ++cnt; init(); for (int i = 0; i < M; ++i) { int a, b; cin >> a >> b; unionSet(a, b); } set<int> mset1; for (int i = 1; i <= N; ++i) { mset1.insert(findSet(i)); } cout << \"Case \" << cnt << \": \" << mset1.size() << endl; } } int main() { ios::sync_with_stdio(false); cin.tie(0); #ifdef mytest clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Ubiquitous Religions"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202524/#ubiquitous-religions","text":"","title":"Ubiquitous Religions"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202524/#description","text":"There are so many different religions in the world today that it is difficult to keep track of them all. You are interested in finding out how many different religions students in your university believe in. You know that there are n students in your university (0 < n <= 50000). It is infeasible for you to ask every student their religious beliefs. Furthermore, many students are not comfortable expressing their beliefs. One way to avoid these problems is to ask m (0 <= m <= n(n-1)/2) pairs of students and ask them whether they believe in the same religion (e.g. they may know if they both attend the same church). From this data, you may not know what each person believes in, but you can get an idea of the upper bound of how many different religions can be possibly represented on campus. You may assume that each student subscribes to at most one religion.","title":"Description"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202524/#input","text":"The input consists of a number of cases. Each case starts with a line specifying the integers n and m. The next m lines each consists of two integers i and j, specifying that students i and j believe in the same religion. The students are numbered 1 to n. The end of input is specified by a line in which n = m = 0.","title":"Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202524/#output","text":"For each test case, print on a single line the case number (starting with 1) followed by the maximum number of different religions that the students in the university believe in.","title":"Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202524/#sample-input","text":"10 9 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 10 10 4 2 3 4 5 4 8 5 8 0 0","title":"Sample Input"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202524/#sample-output","text":"Case 1: 1 Case 2: 7","title":"Sample Output"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/ACM/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/poj%202524/#code","text":"#include <iostream> #include <algorithm> #include <queue> #include <cstdio> #include <vector> #include <cstring> #include <set> #include <ctime> #include <numeric> //#define mytest #ifdef mytest auto fp = freopen(\"../test.in\", \"r\", stdin); #endif using namespace std; const int MAX_N = 50010; int N, M; int mset[MAX_N]; inline void init() { // iota(mset, mset + M + 1, 0); for (int i = 1; i < N + 1; ++i) { mset[i] = i; } } inline int findSet(int e) { int r = mset[e]; for (; mset[r] != r; r = mset[r]); for (int t = e; t != r; ) { int k = mset[t]; mset[t] = r; t = k; } return r; } inline void unionSet(int a, int b) { int f = findSet(a), f1 = findSet(b); if (f != f1) mset[f1] = f; } void tMain() { int cnt = 0; while (cin >> N >> M, N != 0 && M != 0) { ++cnt; init(); for (int i = 0; i < M; ++i) { int a, b; cin >> a >> b; unionSet(a, b); } set<int> mset1; for (int i = 1; i <= N; ++i) { mset1.insert(findSet(i)); } cout << \"Case \" << cnt << \": \" << mset1.size() << endl; } } int main() { ios::sync_with_stdio(false); cin.tie(0); #ifdef mytest clock_t start = clock(); setbuf(stdout, 0); tMain(); clock_t end = clock(); cout << \"Times: \" << (double) (end - start) / CLOCKS_PER_SEC << endl; #endif #ifndef mytest tMain(); #endif return 0; }","title":"Code"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/","text":"C / C++ \u7ecf\u9a8c \u5feb\u901f\u8bfb\u5165int inline int read() { rx = getchar(), ra = 0, fh = 1; while ((rx < '0' || rx > '9') && rx != '-') rx = getchar(); if (rx == '-') fh = -1, rx = getchar(); while (rx >= '0' && rx <= '9') ra *= 10, ra += rx - 48, rx = getchar(); return ra * fh; } \u6574\u578b\u5b57\u7b26\u4e32\u4e92\u8f6c \u5b57\u7b26\u4e32\u6d41\uff1a // int \u8f6c string int a = 1234; stringstream msstr; msstr << a; string mstr = msstr.str(); // string \u8f6c int string mstr = \"1234\"; stringstream msstr; int a; msstr << mstr; msstr >> a; C++11\u4e2d\uff0c\u6807\u51c6\u5e93\u4e2d\u5b9a\u4e49\u4e86to_string(val);\u53ef\u4ee5\u5c06\u5176\u5b83\u7c7b\u578b\u8f6c\u6362\u4e3astring\u3002\u8fd8\u5b9a\u4e49\u4e86\u4e00\u7ec4stoi(s,p,b)\u3001stol(s,p,b)\u3001stod(s,p,b)\u7b49\u8f6c\u6362\u51fd\u6570\uff0c\u53ef\u4ee5\u51fd\u6570\uff0c\u53ef\u4ee5\u5206\u522b\u8f6c\u5316\u6210int\u3001long\u3001double\u7b49\u3002 C \u4e2d\uff0c\u5728 \u5934\u6587\u4ef6\u4e2d\u6709: //value: \u8981\u8f6c\u6362\u7684\u6574\u6570\uff0cstring: \u8f6c\u6362\u540e\u7684\u5b57\u7b26\u4e32,radix: \u8f6c\u6362\u8fdb\u5236\u6570\uff0c\u59822,8,10,16 \u8fdb\u5236\u7b49\u3002 char* itoa(int value,char*string,int radix); //\u5b57\u7b26\u4e32\u8f6c\u6574\u6570\u51fd\u6570\uff0cnptr: \u8981\u8f6c\u6362\u7684\u5b57\u7b26\u4e32 int atoi(const char *nptr); & can't use continuous. In 64 bits machine pointer is unsinged long , if want to use pointer calculate like integer, only need forced type transport. The parameters transfer of a two-dimensional array of unknown size: void display(int *arr,const int irows,const int icols) { for(int i=0; i<irows; ++i) { for(int j=0; j<icols; ++j) { cout << *(arr + i * icols + j) << \" \"; } cout << endl; } cout << endl; } \u5907\u5fd8 Input and Output Function scanf format symbol: Type Symbol int %d long long %lld float %f double %lf char %c string %s %c \u53ef\u4ee5\u8bfb\u5165\u7a7a\u683c\uff0c\u9664 %c \u5916\u4ee5\u7a7a\u767d\u7b26\u4f5c\u4e3a\u7ed3\u675f\u6807\u5fd7 double of printf is %f ,but scanf is %lf Try to use double ,because of accuracy Three general format of printf : right m bits add space align: %md right m bits add zero align: %0md \u201c\u56db\u820d\u516d\u5165\u4e94\u6210\u53cc\u201d\u89c4\u5219\u6d6e\u70b9\u6570\u4fdd\u7559 m \u4f4d\u5c0f\u6570\u70b9: %.mf typedef typedef set alias Function in <math.h> : fabs(double x) floor(double x), ceil(double x) pow(double r, double p) // $r^p$ sqrt(double x) log(double x) // e as root sin(double x), cos(double x), tan(double x) asin(double x), acos(double x), atan(double x) //unit is rad round(double x) Equivalent in condition: if(n), if(n != 0) if(!n), if(n == 0) similarly in while(condition) \u5192\u6ce1\u6392\u5e8f memset() and gets() and getchar() memset(array name, value, sizeof(array name)) Note: memset() assign value as char, advice only use 0 and -1. gets(char array) like scanf(\"%s, array\") use '\\n as end of input and need not add '\\0' , except that, other method input char like char = getchar() can recognize '\\n' add need add '\\0' in string. Function in <string.h> strlen(char array) //get number of bit before first '\\0' strcmp(char array1, char array2) //if array1 < array2, retrun negtive, if array1 == array2, return 0, if array1 > array2, return postive strcpy(char array1, char array2) //copy array2 to array1, include '\\0' strcat(char array1, char array2) //link array2 to array1 sscanf() and sprintf() int n; char str[50]; sscanf(str, \"%d\", &n); //str to int sprintf(str, %d\", n); //int to str //Similarly, float, long, and so on //sscanf also can use regular expresion Multidimensions Array When input array dimensions more than one to a function, synthesis need the size of dimensions more one, or just use a pointer as synthesis. Note: when one pointer will be built, and we will change it's value, we must make this pointer equal to one variables address, or just use new . Structure Structure can't define itself, but can define it self's pointer. Two method about structure initial function: //First struct StudentInfo { int id; char gender; StudentInfo(int _id, char _gender) : id(_id), gender(_gender) {} }; //Second struct StudentInfo { int id; char gender; StudentInfo(int _id, char _gender) { id = _id; gender = _gender; } }; We can construct many initial function to adapt different case with different number of parameter. Float Point Number Compare const double eps = 1e-8; const double pi = acos(-1); #define Equ(a, b) (fabs(a-b) < eps) #define More(a, b) ((a-b) > eps) #define Less(a, b) ((a-b) < -eps) #define MoreEqu(a, b) ((a-b) > -eps) #define LessEqu(a, b) ((a-b) < eps) Input unkonwn lines while(scanf(\"%s\", str) != EOF) {} //string in `scanf` don't need `&`. while(gets(str) != NULL) {} C++ STL Induction All need add std:: . vector As array, when number can't determine. Sore uncertain number output data. Represent diagram. set set used to remove duplicate, and sort acending order. If want to deal with data repetive, can use multiset . Only need remove duplicate, can use unordered_set . string map Map string to int. Determine big number or other data structure, can as bool array. Map string to string. multimap , unordered_map . queue BFS priority_queue For int , double and char , default greater number have higher priority. Set smaller is higher(For int): priority_queue<int, vector<int>, greater<int> > . Set class priority: //Only need overload `<`//Set smaller is higherstruct Fruit { string name; int price; friend bool operator < (Fruit f1, Fruit f2) { return f1.price > f2.price; }}; Some Function in algorithm Firstly, need add #include<algorithm> . using namespace std;// `x` and `y` can be float point numbermin(x, y);max(x, y);// `x` and `y` must be integerabs(x, y); swap(x, y) , x and y can be structrue. reverse(first address, next address of last element) . //`next_permutation(first address, next address of last element)`, give next order of permutation.int a[3] = {1, 2 ,3};next_permutation(a, a+3);// a[3] = {1, 3, 2} fill(first address, next address of last element, value) sort() sort(first element address, next address of last element, compare function) , the first two parameters is must, and if the third parameter is blank, sort will use increment processing array. Compare Function: //Form small to large, conversely, form large to smallbool cmp(T a, T b) { return a < b;}//Secondary orderbool cmp(node a, node b) { if(a.x != b.x) { return a.x < b.x; } else return a.y > b.y;} Sort in STL: only vector , string , deque can use sort() , like map , set used Red-Black Tree can't sort. For example: string str[3] = {\"a\", \"b\", \"c\"};sort(str, str+3);vector<int> v;v.push_back(1);v.push_back(2);sort(v.begin(), v.end());","title":"C / C++"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#c-c","text":"","title":"C / C++"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#_1","text":"\u5feb\u901f\u8bfb\u5165int inline int read() { rx = getchar(), ra = 0, fh = 1; while ((rx < '0' || rx > '9') && rx != '-') rx = getchar(); if (rx == '-') fh = -1, rx = getchar(); while (rx >= '0' && rx <= '9') ra *= 10, ra += rx - 48, rx = getchar(); return ra * fh; } \u6574\u578b\u5b57\u7b26\u4e32\u4e92\u8f6c \u5b57\u7b26\u4e32\u6d41\uff1a // int \u8f6c string int a = 1234; stringstream msstr; msstr << a; string mstr = msstr.str(); // string \u8f6c int string mstr = \"1234\"; stringstream msstr; int a; msstr << mstr; msstr >> a; C++11\u4e2d\uff0c\u6807\u51c6\u5e93\u4e2d\u5b9a\u4e49\u4e86to_string(val);\u53ef\u4ee5\u5c06\u5176\u5b83\u7c7b\u578b\u8f6c\u6362\u4e3astring\u3002\u8fd8\u5b9a\u4e49\u4e86\u4e00\u7ec4stoi(s,p,b)\u3001stol(s,p,b)\u3001stod(s,p,b)\u7b49\u8f6c\u6362\u51fd\u6570\uff0c\u53ef\u4ee5\u51fd\u6570\uff0c\u53ef\u4ee5\u5206\u522b\u8f6c\u5316\u6210int\u3001long\u3001double\u7b49\u3002 C \u4e2d\uff0c\u5728 \u5934\u6587\u4ef6\u4e2d\u6709: //value: \u8981\u8f6c\u6362\u7684\u6574\u6570\uff0cstring: \u8f6c\u6362\u540e\u7684\u5b57\u7b26\u4e32,radix: \u8f6c\u6362\u8fdb\u5236\u6570\uff0c\u59822,8,10,16 \u8fdb\u5236\u7b49\u3002 char* itoa(int value,char*string,int radix); //\u5b57\u7b26\u4e32\u8f6c\u6574\u6570\u51fd\u6570\uff0cnptr: \u8981\u8f6c\u6362\u7684\u5b57\u7b26\u4e32 int atoi(const char *nptr); & can't use continuous. In 64 bits machine pointer is unsinged long , if want to use pointer calculate like integer, only need forced type transport. The parameters transfer of a two-dimensional array of unknown size: void display(int *arr,const int irows,const int icols) { for(int i=0; i<irows; ++i) { for(int j=0; j<icols; ++j) { cout << *(arr + i * icols + j) << \" \"; } cout << endl; } cout << endl; }","title":"\u7ecf\u9a8c"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#_2","text":"","title":"\u5907\u5fd8"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#input-and-output-function","text":"scanf format symbol: Type Symbol int %d long long %lld float %f double %lf char %c string %s %c \u53ef\u4ee5\u8bfb\u5165\u7a7a\u683c\uff0c\u9664 %c \u5916\u4ee5\u7a7a\u767d\u7b26\u4f5c\u4e3a\u7ed3\u675f\u6807\u5fd7 double of printf is %f ,but scanf is %lf Try to use double ,because of accuracy Three general format of printf : right m bits add space align: %md right m bits add zero align: %0md \u201c\u56db\u820d\u516d\u5165\u4e94\u6210\u53cc\u201d\u89c4\u5219\u6d6e\u70b9\u6570\u4fdd\u7559 m \u4f4d\u5c0f\u6570\u70b9: %.mf","title":"Input and Output Function"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#typedef","text":"typedef set alias","title":"typedef"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#function-in-mathh","text":"fabs(double x) floor(double x), ceil(double x) pow(double r, double p) // $r^p$ sqrt(double x) log(double x) // e as root sin(double x), cos(double x), tan(double x) asin(double x), acos(double x), atan(double x) //unit is rad round(double x)","title":"Function in &lt;math.h&gt;:"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#equivalent-in-condition","text":"if(n), if(n != 0) if(!n), if(n == 0) similarly in while(condition) \u5192\u6ce1\u6392\u5e8f","title":"Equivalent in condition:"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#memset-and-gets-and-getchar","text":"memset(array name, value, sizeof(array name)) Note: memset() assign value as char, advice only use 0 and -1. gets(char array) like scanf(\"%s, array\") use '\\n as end of input and need not add '\\0' , except that, other method input char like char = getchar() can recognize '\\n' add need add '\\0' in string.","title":"memset() and gets() and getchar()"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#function-in-stringh","text":"strlen(char array) //get number of bit before first '\\0' strcmp(char array1, char array2) //if array1 < array2, retrun negtive, if array1 == array2, return 0, if array1 > array2, return postive strcpy(char array1, char array2) //copy array2 to array1, include '\\0' strcat(char array1, char array2) //link array2 to array1","title":"Function in &lt;string.h&gt;"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#sscanf-and-sprintf","text":"int n; char str[50]; sscanf(str, \"%d\", &n); //str to int sprintf(str, %d\", n); //int to str //Similarly, float, long, and so on //sscanf also can use regular expresion","title":"sscanf() and sprintf()"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#multidimensions-array","text":"When input array dimensions more than one to a function, synthesis need the size of dimensions more one, or just use a pointer as synthesis. Note: when one pointer will be built, and we will change it's value, we must make this pointer equal to one variables address, or just use new .","title":"Multidimensions Array"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#structure","text":"Structure can't define itself, but can define it self's pointer. Two method about structure initial function: //First struct StudentInfo { int id; char gender; StudentInfo(int _id, char _gender) : id(_id), gender(_gender) {} }; //Second struct StudentInfo { int id; char gender; StudentInfo(int _id, char _gender) { id = _id; gender = _gender; } }; We can construct many initial function to adapt different case with different number of parameter.","title":"Structure"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#float-point-number-compare","text":"const double eps = 1e-8; const double pi = acos(-1); #define Equ(a, b) (fabs(a-b) < eps) #define More(a, b) ((a-b) > eps) #define Less(a, b) ((a-b) < -eps) #define MoreEqu(a, b) ((a-b) > -eps) #define LessEqu(a, b) ((a-b) < eps)","title":"Float Point Number Compare"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#input-unkonwn-lines","text":"while(scanf(\"%s\", str) != EOF) {} //string in `scanf` don't need `&`. while(gets(str) != NULL) {}","title":"Input unkonwn lines"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#c-stl-induction","text":"All need add std:: .","title":"C++ STL Induction"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#vector","text":"As array, when number can't determine. Sore uncertain number output data. Represent diagram.","title":"vector"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#set","text":"set used to remove duplicate, and sort acending order. If want to deal with data repetive, can use multiset . Only need remove duplicate, can use unordered_set .","title":"set"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#string","text":"","title":"string"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#map","text":"Map string to int. Determine big number or other data structure, can as bool array. Map string to string. multimap , unordered_map .","title":"map"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#queue","text":"BFS","title":"queue"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#priority_queue","text":"For int , double and char , default greater number have higher priority. Set smaller is higher(For int): priority_queue<int, vector<int>, greater<int> > . Set class priority: //Only need overload `<`//Set smaller is higherstruct Fruit { string name; int price; friend bool operator < (Fruit f1, Fruit f2) { return f1.price > f2.price; }};","title":"priority_queue"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#some-function-in-algorithm","text":"Firstly, need add #include<algorithm> . using namespace std;// `x` and `y` can be float point numbermin(x, y);max(x, y);// `x` and `y` must be integerabs(x, y); swap(x, y) , x and y can be structrue. reverse(first address, next address of last element) . //`next_permutation(first address, next address of last element)`, give next order of permutation.int a[3] = {1, 2 ,3};next_permutation(a, a+3);// a[3] = {1, 3, 2} fill(first address, next address of last element, value)","title":"Some Function in algorithm"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#sort","text":"sort(first element address, next address of last element, compare function) , the first two parameters is must, and if the third parameter is blank, sort will use increment processing array. Compare Function: //Form small to large, conversely, form large to smallbool cmp(T a, T b) { return a < b;}//Secondary orderbool cmp(node a, node b) { if(a.x != b.x) { return a.x < b.x; } else return a.y > b.y;} Sort in STL: only vector , string , deque can use sort() , like map , set used Red-Black Tree can't sort. For example: string str[3] = {\"a\", \"b\", \"c\"};sort(str, str+3);vector<int> v;v.push_back(1);v.push_back(2);sort(v.begin(), v.end());","title":"sort()"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/LatexSymbol/","text":"Latex \u5e0c\u814a\u5b57\u6bcd \u6570\u5b66\u91cd\u97f3 \u7b26\u53f7 \u5411\u4e0a\u53bb\u6574\uff1a $\\lceil x \\rceil$ \u5411\u4e0b\u53bb\u6574\uff1a $\\lfloor x \\rfloor$","title":"Latex"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/LatexSymbol/#latex","text":"","title":"Latex"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/LatexSymbol/#_1","text":"","title":"\u5e0c\u814a\u5b57\u6bcd"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/LatexSymbol/#_2","text":"","title":"\u6570\u5b66\u91cd\u97f3"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/LatexSymbol/#_3","text":"\u5411\u4e0a\u53bb\u6574\uff1a $\\lceil x \\rceil$ \u5411\u4e0b\u53bb\u6574\uff1a $\\lfloor x \\rfloor$","title":"\u7b26\u53f7"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/","text":"Python \u8f93\u5165\u8f93\u51fa \u8bfb\u4e00\u884c n, m = [int(i) for i in input().split()] \u591a\u884c\u8f93\u5165 lines=[] while True: try: lines.append(input()) except: break print(lines)","title":"Python"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/#python","text":"","title":"Python"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/#_1","text":"\u8bfb\u4e00\u884c n, m = [int(i) for i in input().split()] \u591a\u884c\u8f93\u5165 lines=[] while True: try: lines.append(input()) except: break print(lines)","title":"\u8f93\u5165\u8f93\u51fa"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/TimerInCpp/","text":"\u65f6\u95f4\u51fd\u6570 Compare Function Type Accuracy Time time C system call low < 1s clock C system call low < 10 ms timeGetTime Windows API middle < 1 ms GetTickCount Windows API middle < 1 ms QueryPerformanceCounter Windows API high < 0.1ms gettimeofday C system call in linux high < 0.1ms RDTSC induction high < 0.1ms Example time() Prototype: time_t time(time_t * timer) in <time.h> , and typedef long time_t; Function: \u83b7\u53d6\u5f53\u524d\u7684\u7cfb\u7edf\u65f6\u95f4\uff0c\u8fd4\u56de\u7684\u7ed3\u679c\u662f\u4e00\u4e2atime_t\u7c7b\u578b\uff0c\u5176\u503c\u8868\u793a\u4eceCUT\uff08Coordinated Universal Time\uff09\u65f6\u95f41970\u5e741\u67081\u65e500:00:00\uff08\u79f0\u4e3aUNIX\u7cfb\u7edf\u7684Epoch\u65f6\u95f4\uff09\u5230\u5f53\u524d\u65f6\u523b\u7684\u79d2\u6570\u3002 Usage As timer: time_t start,stop; start = time(NULL); foo();//Dosomething stop = time(NULL); printf(\"Use Time:%ld\\n\",(stop-start)); As random seed: srand((unsigned) time(NULL)); printf(\"Ten random numbers from 0 to 99\\n\"); for(int i=0;i<10;i++) { printf(\"%d\\n\",rand()%100); } Combine with other function: Example: localtime, gmtime, asctime, ctime time_t timer; time(&timer); printf(\"Local time is: %s\\n\",asctime(localtime(&timer))); printf(\"Local time is: %s\\n\",ctime(&timer)); clock() Prototype: clock_t clock(void) in <time.h> , and typedef long clock_t; Function: \u8fd4\u56de\u4ece\u201c\u5f00\u542f\u8fd9\u4e2a\u7a0b\u5e8f\u8fdb\u7a0b\u201d\u5230\u201c\u7a0b\u5e8f\u4e2d\u8c03\u7528clock()\u51fd\u6570\u201d\u65f6\u4e4b\u95f4\u7684CPU\u65f6\u949f\u8ba1\u65f6\u5355\u5143\uff08clock tick\uff09\u6570\uff0c\u5728MSDN\u4e2d\u79f0\u4e4b\u4e3a\u6302\u949f\u65f6\u95f4\uff08wal-clock\uff09\u3002 In <time.h> , there is a const CLOCKS_PER_SEC \uff0cindicating how many clock units in a second, so we can use clock()/CLOCKS_PER_SEC to calculate. Usage clock_t start, stop; start = clock(); foo();//Dosomething stop = clock(); printf(\"%f\", (double)(stop-start)/CLOCKS_PER_SEC); gettimeofday Prototype: int gettimeofday(struct timeval* tv, struct timezone* tz) in <sys/time.h> , struct timeval and struct timezone are defined as follows: struct timeval{ long tv_sec; /*\u79d2*/ long tv_usec; /*\u5fae\u79d2*/ }; struct timezone{ int tz_minuteswest; /*\u548cGreenwich \u65f6\u95f4\u5dee\u4e86\u591a\u5c11\u5206\u949f*/ int tz_dsttime; /*\u65e5\u5149\u8282\u7ea6\u65f6\u95f4\u7684\u72b6\u6001*/ }; Function: gettimeofday() \u662flinux\u73af\u5883\u4e0b\u7684\u8ba1\u65f6\u51fd\u6570\uff0c\u628a\u5f53\u5730\u65f6\u533a\u7684\u4fe1\u606f\u653e\u5230tz\u6240\u6307\u7684\u7ed3\u6784\u4e2d\u3002 Usage struct timeval t1,t2; double timeuse; gettimeofday(&t1,NULL); foo(); gettimeofday(&t2,NULL); timeuse = t2.tv_sec-t1.tv_sec+(t2.tv_usec-t1.tv_usec)/1e6; printf(\"Use Time:%f\\n\",timeuse);","title":"\u65f6\u95f4\u51fd\u6570"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/TimerInCpp/#_1","text":"","title":"\u65f6\u95f4\u51fd\u6570"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/TimerInCpp/#compare","text":"Function Type Accuracy Time time C system call low < 1s clock C system call low < 10 ms timeGetTime Windows API middle < 1 ms GetTickCount Windows API middle < 1 ms QueryPerformanceCounter Windows API high < 0.1ms gettimeofday C system call in linux high < 0.1ms RDTSC induction high < 0.1ms","title":"Compare"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/TimerInCpp/#example","text":"","title":"Example"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/TimerInCpp/#time","text":"Prototype: time_t time(time_t * timer) in <time.h> , and typedef long time_t; Function: \u83b7\u53d6\u5f53\u524d\u7684\u7cfb\u7edf\u65f6\u95f4\uff0c\u8fd4\u56de\u7684\u7ed3\u679c\u662f\u4e00\u4e2atime_t\u7c7b\u578b\uff0c\u5176\u503c\u8868\u793a\u4eceCUT\uff08Coordinated Universal Time\uff09\u65f6\u95f41970\u5e741\u67081\u65e500:00:00\uff08\u79f0\u4e3aUNIX\u7cfb\u7edf\u7684Epoch\u65f6\u95f4\uff09\u5230\u5f53\u524d\u65f6\u523b\u7684\u79d2\u6570\u3002","title":"time()"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/TimerInCpp/#usage","text":"As timer: time_t start,stop; start = time(NULL); foo();//Dosomething stop = time(NULL); printf(\"Use Time:%ld\\n\",(stop-start)); As random seed: srand((unsigned) time(NULL)); printf(\"Ten random numbers from 0 to 99\\n\"); for(int i=0;i<10;i++) { printf(\"%d\\n\",rand()%100); } Combine with other function: Example: localtime, gmtime, asctime, ctime time_t timer; time(&timer); printf(\"Local time is: %s\\n\",asctime(localtime(&timer))); printf(\"Local time is: %s\\n\",ctime(&timer));","title":"Usage"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/TimerInCpp/#clock","text":"Prototype: clock_t clock(void) in <time.h> , and typedef long clock_t; Function: \u8fd4\u56de\u4ece\u201c\u5f00\u542f\u8fd9\u4e2a\u7a0b\u5e8f\u8fdb\u7a0b\u201d\u5230\u201c\u7a0b\u5e8f\u4e2d\u8c03\u7528clock()\u51fd\u6570\u201d\u65f6\u4e4b\u95f4\u7684CPU\u65f6\u949f\u8ba1\u65f6\u5355\u5143\uff08clock tick\uff09\u6570\uff0c\u5728MSDN\u4e2d\u79f0\u4e4b\u4e3a\u6302\u949f\u65f6\u95f4\uff08wal-clock\uff09\u3002 In <time.h> , there is a const CLOCKS_PER_SEC \uff0cindicating how many clock units in a second, so we can use clock()/CLOCKS_PER_SEC to calculate.","title":"clock()"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/TimerInCpp/#usage_1","text":"clock_t start, stop; start = clock(); foo();//Dosomething stop = clock(); printf(\"%f\", (double)(stop-start)/CLOCKS_PER_SEC);","title":"Usage"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/TimerInCpp/#gettimeofday","text":"Prototype: int gettimeofday(struct timeval* tv, struct timezone* tz) in <sys/time.h> , struct timeval and struct timezone are defined as follows: struct timeval{ long tv_sec; /*\u79d2*/ long tv_usec; /*\u5fae\u79d2*/ }; struct timezone{ int tz_minuteswest; /*\u548cGreenwich \u65f6\u95f4\u5dee\u4e86\u591a\u5c11\u5206\u949f*/ int tz_dsttime; /*\u65e5\u5149\u8282\u7ea6\u65f6\u95f4\u7684\u72b6\u6001*/ }; Function: gettimeofday() \u662flinux\u73af\u5883\u4e0b\u7684\u8ba1\u65f6\u51fd\u6570\uff0c\u628a\u5f53\u5730\u65f6\u533a\u7684\u4fe1\u606f\u653e\u5230tz\u6240\u6307\u7684\u7ed3\u6784\u4e2d\u3002","title":"gettimeofday"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/TimerInCpp/#usage_2","text":"struct timeval t1,t2; double timeuse; gettimeofday(&t1,NULL); foo(); gettimeofday(&t2,NULL); timeuse = t2.tv_sec-t1.tv_sec+(t2.tv_usec-t1.tv_usec)/1e6; printf(\"Use Time:%f\\n\",timeuse);","title":"Usage"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/remainder/","text":"\u6c42\u4f59\u6570\u4e0e\u6c42\u6a21 \u6c42\u6a21\uff1a c = a - \\lfloor a/b \\rfloor * b c = a - \\lfloor a/b \\rfloor * b \u6c42\u4f59\uff1a c = a - \\text{\u5411\u96f6\u53d6\u6574}(a/b) * b c = a - \\text{\u5411\u96f6\u53d6\u6574}(a/b) * b % Python \u4e2d\u4e3a\u53d6\u6a21\uff0c C++ \u4e2d\u4e3a\u53d6\u4f59\u3002 Dividend & Divisor Math Python C++ 7\\div 3 7\\div 3 1 1 1 7\\div (-3) 7\\div (-3) \\ or 1 -2 1 (-7)\\div 3 (-7)\\div 3 2 2 -1 (-7)\\div (-3) (-7)\\div (-3) \\ or 2 -1 -1 If divisor could be negative ,results in Math could be 1 or 2. Generalizing ,sign of remainder of Python is same as divisor ,and that of C++ is same as dividend.","title":"\u6c42\u4f59\u6570\u4e0e\u6c42\u6a21"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/remainder/#_1","text":"\u6c42\u6a21\uff1a c = a - \\lfloor a/b \\rfloor * b c = a - \\lfloor a/b \\rfloor * b \u6c42\u4f59\uff1a c = a - \\text{\u5411\u96f6\u53d6\u6574}(a/b) * b c = a - \\text{\u5411\u96f6\u53d6\u6574}(a/b) * b % Python \u4e2d\u4e3a\u53d6\u6a21\uff0c C++ \u4e2d\u4e3a\u53d6\u4f59\u3002 Dividend & Divisor Math Python C++ 7\\div 3 7\\div 3 1 1 1 7\\div (-3) 7\\div (-3) \\ or 1 -2 1 (-7)\\div 3 (-7)\\div 3 2 2 -1 (-7)\\div (-3) (-7)\\div (-3) \\ or 2 -1 -1 If divisor could be negative ,results in Math could be 1 or 2. Generalizing ,sign of remainder of Python is same as divisor ,and that of C++ is same as dividend.","title":"\u6c42\u4f59\u6570\u4e0e\u6c42\u6a21"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Bochs/","text":"Bochs \u8c03\u8bd5\u5185\u6838 \"C:\\Program Files\\Bochs-2.3.6\\bochsdbg\" -q -f bochsrc-0.12-hd.bxrc","title":"Bochs"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Bochs/#bochs","text":"","title":"Bochs"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Bochs/#_1","text":"\"C:\\Program Files\\Bochs-2.3.6\\bochsdbg\" -q -f bochsrc-0.12-hd.bxrc","title":"\u8c03\u8bd5\u5185\u6838"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Linux%20%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83%E7%9A%84%E4%BD%BF%E7%94%A8/","text":"Linux \u684c\u9762\u73af\u5883\u7684\u4f7f\u7528 \u5e94\u7528\u56fe\u6807 \u684c\u9762\u5feb\u6377\u65b9\u5f0f\u5b58\u653e\u4f4d\u7f6e\uff1a /usr/share/applications/ Format: #\u6587\u4ef6\u5934 [Desktop Entry] #\u7f16\u7801\u65b9\u5f0f Encoding=UTF-8 #\u5e94\u7528\u7a0b\u5e8f\u540d\u79f0\uff0c\u6839\u636e\u5f53\u524d\u7cfb\u7edf\u8bed\u8a00\u5339\u914d\u663e\u793a\uff0c\u4f18\u5148\u5339\u914d\u66f4\u7ec6\u5316\u7684\u8bed\u8a00\u6807\u8bc6\u540d\u79f0 Name=aMule Name[en]=en_name Name[en_US]=US_name #\u9f20\u6807\u7ecf\u8fc7\u4e0a\u9762\u65f6\u7684\u63d0\u793a\u540d\u79f0\uff0c\u4e5f\u53ef\u56fd\u9645\u5316 Comment=comment #\u83dc\u5355\u6267\u884c\u7684\u547d\u4ee4\u6216\u7a0b\u5e8f Exec=command #\u663e\u793a\u5728\u83dc\u5355\u9879\u4e2d\u7684\u56fe\u6807\uff0c\u53ef\u4ee5\u4e3a\u7a7a Icon=iconpath #\u662f\u5426\u4f7f\u7528\u7ec8\u7aef Terminal=false #\u5206\u7c7b Type=Application #\u83dc\u5355\u662f\u5426\u9690\u85cf\uff0c\u7c7b\u4f3cNoDisplay\u5c5e\u6027 Hidden=false #\u83dc\u5355\u6240\u5c5e\u7c7b\u522b\uff0c\u53ef\u4ee5\u786e\u5b9a\u8be5\u83dc\u5355\u7684\u4f4d\u7f6e Categories=Application;Network;","title":"Linux \u684c\u9762\u73af\u5883\u7684\u4f7f\u7528"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Linux%20%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83%E7%9A%84%E4%BD%BF%E7%94%A8/#linux","text":"","title":"Linux \u684c\u9762\u73af\u5883\u7684\u4f7f\u7528"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Linux%20%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83%E7%9A%84%E4%BD%BF%E7%94%A8/#_1","text":"\u684c\u9762\u5feb\u6377\u65b9\u5f0f\u5b58\u653e\u4f4d\u7f6e\uff1a /usr/share/applications/ Format: #\u6587\u4ef6\u5934 [Desktop Entry] #\u7f16\u7801\u65b9\u5f0f Encoding=UTF-8 #\u5e94\u7528\u7a0b\u5e8f\u540d\u79f0\uff0c\u6839\u636e\u5f53\u524d\u7cfb\u7edf\u8bed\u8a00\u5339\u914d\u663e\u793a\uff0c\u4f18\u5148\u5339\u914d\u66f4\u7ec6\u5316\u7684\u8bed\u8a00\u6807\u8bc6\u540d\u79f0 Name=aMule Name[en]=en_name Name[en_US]=US_name #\u9f20\u6807\u7ecf\u8fc7\u4e0a\u9762\u65f6\u7684\u63d0\u793a\u540d\u79f0\uff0c\u4e5f\u53ef\u56fd\u9645\u5316 Comment=comment #\u83dc\u5355\u6267\u884c\u7684\u547d\u4ee4\u6216\u7a0b\u5e8f Exec=command #\u663e\u793a\u5728\u83dc\u5355\u9879\u4e2d\u7684\u56fe\u6807\uff0c\u53ef\u4ee5\u4e3a\u7a7a Icon=iconpath #\u662f\u5426\u4f7f\u7528\u7ec8\u7aef Terminal=false #\u5206\u7c7b Type=Application #\u83dc\u5355\u662f\u5426\u9690\u85cf\uff0c\u7c7b\u4f3cNoDisplay\u5c5e\u6027 Hidden=false #\u83dc\u5355\u6240\u5c5e\u7c7b\u522b\uff0c\u53ef\u4ee5\u786e\u5b9a\u8be5\u83dc\u5355\u7684\u4f4d\u7f6e Categories=Application;Network;","title":"\u5e94\u7528\u56fe\u6807"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Windows10%20Config/","text":"Regedit Close Cortana\uff1a Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Windows Search New DWORD named AllowCortana , and it't value is 0 . Set Key Map Computer\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout Swap Esc with Caps : New Binaray Value named Scancode Map , and value like this: Install App Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh') scoop install aria2 scoop intall 7zip scoop install python3 scoop install git scoop install github scoop install vscode","title":"Windows10 Config"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Windows10%20Config/#regedit","text":"","title":"Regedit"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Windows10%20Config/#close-cortana","text":"Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Windows Search New DWORD named AllowCortana , and it't value is 0 .","title":"Close Cortana\uff1a"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Windows10%20Config/#set-key-map","text":"Computer\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout Swap Esc with Caps : New Binaray Value named Scancode Map , and value like this:","title":"Set Key Map"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Windows10%20Config/#install-app","text":"Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh') scoop install aria2 scoop intall 7zip scoop install python3 scoop install git scoop install github scoop install vscode","title":"Install App"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/","text":"bash \u5feb\u6377\u6307\u4ee4 [ctrl]+u/[ctrl]+k \u5206\u522b\u662f\u4ece\u5149\u6807\u5904\u5411\u524d\u5220\u9664\u6307\u4ee4\u4e32([ctrl]+u) \u53ca\u5411\u540e\u5220\u9664\u6307\u4ee4\u4e32 ([ctrl]+k)\u3002 [ctrl]+a/[ctrl]+e \u5206\u522b\u662f\u8ba9\u5149\u6807\u79fb\u52a8\u5230\u6574\u4e2a\u6307\u4ee4\u4e32\u7684\u6700\u524d\u9762 ([ctrl]+a) \u6216\u6700\u540e\u9762 ([ctrl]+e)\u3002 \u53d8\u91cf \u8bbe\u5b9a\u89c4\u5219 \u53d8\u91cf\u4e0e\u53d8\u91cf\u5185\u5bb9\u4ee5\u4e00\u4e2a\u7b49\u53f7 = \u6765\u8fde\u7ed3\uff0c \u7b49\u53f7\u4e24\u8fb9\u4e0d\u80fd\u76f4\u63a5\u63a5\u7a7a\u683c\u7b26 \u53d8\u91cf\u540d\u79f0\u53ea\u80fd\u662f\u82f1\u6587\u5b57\u6bcd\u4e0e\u6570\u5b57\uff0c\u4f46\u662f\u5f00\u5934\u5b57\u7b26\u4e0d\u80fd\u662f\u6570\u5b57 \u53d8\u91cf\u5185\u5bb9\u82e5\u6709\u7a7a\u683c\u7b26\u53ef\u4f7f\u7528\u53cc\u5f15\u53f7 \" \u6216\u5355\u5f15\u53f7 ' \u5c06\u53d8\u91cf\u5185\u5bb9\u7ed3\u5408\u8d77\u6765\uff0c\u4f46 \u53cc\u5f15\u53f7\u5185\u7684\u7279\u6b8a\u5b57\u7b26\u5982 $ \u7b49\uff0c\u53ef\u4ee5\u4fdd\u6709\u539f\u672c\u7684\u7279\u6027 \u5355\u5f15\u53f7\u5185\u7684\u7279\u6b8a\u5b57\u7b26\u5219\u4ec5\u4e3a\u4e00\u822c\u5b57\u7b26 (\u7eaf\u6587\u672c) \u53ef\u7528\u8df3\u8131\u5b57\u7b26 \\ \u5c06\u7279\u6b8a\u7b26\u53f7(\u5982 [Enter] , $ , \\ , \u7a7a\u683c\u7b26 , ' \u7b49 ) \u53d8\u6210\u4e00\u822c\u5b57\u7b26 \u5728\u4e00\u4e32\u6307\u4ee4\u7684\u6267\u884c\u4e2d\uff0c\u8fd8\u9700\u8981\u85c9\u7531\u5176\u4ed6\u989d\u5916\u7684\u6307\u4ee4\u6240\u63d0\u4f9b\u7684\u4fe1\u606f\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u53cd\u5355\u5f15\u53f7 \u6307\u4ee4 \u6216 $(\u6307 \u4ee4) \u82e5\u8be5\u53d8\u91cf\u4e3a\u6269\u589e\u53d8\u91cf\u5185\u5bb9\u65f6\uff0c\u5219\u53ef\u7528 \"$\u53d8\u91cf\u540d\u79f0\" \u6216 ${\u53d8\u91cf} \u7d2f\u52a0\u5185\u5bb9\uff0c\u5982\u4e0b\u6240\u793a\uff1a PATH=\"$PATH\":/home/bin \u6216 PATH=${PATH}:/home/bin \u82e5\u8be5\u53d8\u91cf\u9700\u8981\u5728\u5176\u4ed6\u5b50\u7a0b\u5e8f\u6267\u884c\uff0c\u5219\u9700\u8981\u4ee5 export \u6765\u4f7f\u53d8\u91cf\u53d8\u6210\u73af\u5883\u53d8\u91cf \u901a\u5e38\u5927\u5199\u5b57\u7b26\u4e3a\u7cfb\u7edf\u9ed8\u8ba4\u53d8\u91cf\uff0c\u81ea\u884c\u8bbe\u5b9a\u53d8\u91cf\u53ef\u4ee5\u4f7f\u7528\u5c0f\u5199\u5b57\u7b26\uff0c\u65b9\u4fbf\u5224\u65ad (\u7eaf\u7cb9\u4f9d\u7167\u4f7f\u7528\u8005\u5174\u8da3\u4e0e\u55dc\u597d) \uff1b \u53d6\u6d88\u53d8\u91cf\u7684\u65b9\u6cd5\u4e3a\u4f7f\u7528 unset \uff1a unset \u53d8\u91cf\u540d\u79f0 \u4f8b\u5982\u53d6\u6d88 myname \u7684\u8bbe\u5b9a\uff1a unset myname \u73af\u5883\u53d8\u91cf\u7684\u663e\u793a \u7528 env \u89c2\u5bdf\u73af\u5883\u53d8\u91cf\u4e0e\u5e38\u89c1\u73af\u5883\u53d8\u91cf\u8bf4\u660e HOME\uff1bHISTSIZE\uff1bMAIL\uff1bPATH\uff1bLANG\uff1bRANDOM set \u89c2\u5bdf\u6240\u6709\u53d8\u91cf \uff08\u542b\u73af\u5883\u53d8\u91cf\u4e0e\u81ea\u5b9a\u4e49\u53d8\u91cf\uff09 -\uff1a \u76ee\u524d\u6240\u6709\u7684 set \u8bbe\u5b9a\u503c PS1\uff1a(\u63d0\u793a\u5b57\u7b26\u7684\u8bbe\u5b9a) $\uff1a(\u5173\u4e8e\u672c shell \u7684 PID) ?\uff1a(\u5173\u4e8e\u4e0a\u4e2a\u6267\u884c\u6307\u4ee4\u7684\u56de\u4f20\u503c) OSTYPE, HOSTTYPE, MACHTYPE\uff1a(\u4e3b\u673a\u786c\u4ef6\u4e0e\u6838\u5fc3\u7684\u7b49\u7ea7) export\uff1a \u81ea\u5b9a\u4e49\u53d8\u91cf\u8f6c\u6210\u73af\u5883\u53d8\u91cf export \u800c\u6ca1\u6709\u63a5\u53d8\u91cf\u65f6\uff0c\u90a3\u4e48\u6b64\u65f6\u5c06\u4f1a\u6253\u5370\u6240\u6709\u7684\u300e\u73af\u5883\u53d8\u91cf\u300f\u3002 \u8bed\u7cfb\u53d8\u91cf \u4f7f\u7528 locale \u65f6\uff0c\u7cfb\u7edf\u662f\u5217\u51fa\u76ee\u524d Linux \u4e3b\u673a\u5185\u4fdd\u6709\u7684\u8bed\u7cfb\u6587\u4ef6\uff0c \u8fd9\u4e9b\u8bed\u7cfb\u6587\u4ef6\u90fd\u653e\u7f6e\u5728\uff1a /usr/lib/locale/ \u8fd9\u4e2a\u76ee\u5f55\u4e2d\u3002 \u53d8\u91cf\u952e\u76d8\u8bfb\u53d6\u3001\u6570\u7ec4\u4e0e\u5ba3\u544a read, array, declare read \u8bfb\u53d6\u6765\u81ea\u952e\u76d8\u8f93\u5165\u7684\u53d8\u91cf $ read [-pt] variable \u9009\u9879\u4e0e\u53c2\u6570\uff1a -p \uff1a\u540e\u9762\u53ef\u4ee5\u63a5\u63d0\u793a\u5b57\u7b26\uff01 -t \uff1a\u540e\u9762\u53ef\u4ee5\u63a5\u7b49\u5f85\u7684\u300e\u79d2\u6570\uff01\u300f\u8fd9\u4e2a\u6bd4\u8f83\u6709\u8da3\uff5e\u4e0d\u4f1a\u4e00\u76f4\u7b49\u5f85\u4f7f\u7528\u8005\u5566\uff01 ``` - declare / typeset ```sh $ declare [-aixr] variable \u9009\u9879\u4e0e\u53c2\u6570\uff1a -a \uff1a\u5c06\u540e\u9762\u540d\u4e3a variable \u7684\u53d8\u91cf\u5b9a\u4e49\u6210\u4e3a\u6570\u7ec4 (array) \u7c7b\u578b -i \uff1a\u5c06\u540e\u9762\u540d\u4e3a variable \u7684\u53d8\u91cf\u5b9a\u4e49\u6210\u4e3a\u6574\u6570\u6570\u5b57 (integer) \u7c7b\u578b -x \uff1a\u7528\u6cd5\u4e0e export \u4e00\u6837\uff0c\u5c31\u662f\u5c06\u540e\u9762\u7684 variable \u53d8\u6210\u73af\u5883\u53d8\u91cf\uff1b -r \uff1a\u5c06\u53d8\u91cf\u8bbe\u5b9a\u6210\u4e3a readonly \u7c7b\u578b\uff0c\u8be5\u53d8\u91cf\u4e0d\u53ef\u88ab\u66f4\u6539\u5185\u5bb9\uff0c\u4e5f\u4e0d\u80fd unset \u6570\u7ec4 (array) \u53d8\u91cf\u7c7b\u578b var[index]=content \u53d8\u91cf\u5185\u5bb9\u7684\u5220\u9664\u3001\u53d6\u4ee3\u4e0e\u66ff\u6362 \u53d8\u91cf\u5185\u5bb9\u7684\u5220\u9664\u4e0e\u53d6\u4ee3 \u53d8\u91cf\u5185\u5bb9\u7684\u5220\u9664\u4e0e\u53d6\u4ee3 \u8bf4\u660e ${\u53d8\u91cf#\u5173\u952e\u8bcd} \u82e5\u53d8\u91cf\u5185\u5bb9\u4ece\u5934\u5f00\u59cb\u7684\u6570\u636e\u7b26\u5408\u300e\u5173\u952e\u8bcd\u300f\uff0c\u5219\u5c06\u7b26\u5408\u7684\u6700\u77ed\u6570\u636e\u5220\u9664 ${\u53d8\u91cf##\u5173\u952e\u8bcd} \u82e5\u53d8\u91cf\u5185\u5bb9\u4ece\u5934\u5f00\u59cb\u7684\u6570\u636e\u7b26\u5408\u300e\u5173\u952e\u8bcd\u300f\uff0c\u5219\u5c06\u7b26\u5408\u7684\u6700\u957f\u6570\u636e\u5220\u9664 ${\u53d8\u91cf%\u5173\u952e\u8bcd} \u82e5\u53d8\u91cf\u5185\u5bb9\u4ece\u5c3e\u5411\u524d\u7684\u6570\u636e\u7b26\u5408\u300e\u5173\u952e\u8bcd\u300f\uff0c\u5219\u5c06\u7b26\u5408\u7684\u6700\u77ed\u6570\u636e\u5220\u9664 ${\u53d8\u91cf%%\u5173\u952e\u8bcd} \u82e5\u53d8\u91cf\u5185\u5bb9\u4ece\u5c3e\u5411\u524d\u7684\u6570\u636e\u7b26\u5408\u300e\u5173\u952e\u8bcd\u300f\uff0c\u5219\u5c06\u7b26\u5408\u7684\u6700\u957f\u6570\u636e\u5220\u9664 ${\u53d8\u91cf/\u65e7\u5b57\u7b26\u4e32/\u65b0\u5b57\u7b26\u4e32} \u82e5\u53d8\u91cf\u5185\u5bb9\u7b26\u5408\u300e\u65e7\u5b57\u7b26\u4e32\u300f\u5219\u300e\u7b2c\u4e00\u4e2a\u65e7\u5b57\u7b26\u4e32\u4f1a\u88ab\u65b0\u5b57\u7b26\u4e32\u53d6\u4ee3\u300f ${\u53d8\u91cf//\u65e7\u5b57\u7b26\u4e32/\u65b0\u5b57\u7b26\u4e32} \u82e5\u53d8\u91cf\u5185\u5bb9\u7b26\u5408\u300e\u65e7\u5b57\u7b26\u4e32\u300f\u5219\u300e\u5168\u90e8\u7684\u65e7\u5b57\u7b26\u4e32\u4f1a\u88ab\u65b0\u5b57\u7b26\u4e32\u53d6\u4ee3\u300f \u53d8\u91cf\u7684\u6d4b\u8bd5\u4e0e\u5185\u5bb9\u66ff\u6362 :\u7b26\u53f7 \u7684\u542b\u4e49\u662f\u5c06 str \u4e3a\u7a7a\u5b57\u7b26\u7684\u60c5\u51b5\u540c\u6837\u89c6\u4e3a\u672a\u8bbe\u5b9a\u3002 \u53d8\u91cf\u8bbe\u5b9a\u65b9\u5f0f str \u5df2\u8bbe\u5b9a str \u6ca1\u6709\u8bbe\u5b9a var=${str-expr} var=$str var=expr var=${str+expr} var=expr var= var=${str=expr} var=$str str=var=expr var=${str?expr} var=$str expr \u8f93\u51fa\u81f3 stderr Bash Shell \u7684\u64cd\u4f5c\u73af\u5883 \u5185\u7f6e\u547d\u4ee4 type $ type [-tpa] name \u9009\u9879\u4e0e\u53c2\u6570\uff1a \uff1a\u4e0d\u52a0\u4efb\u4f55\u9009\u9879\u4e0e\u53c2\u6570\u65f6\uff0ctype \u4f1a\u663e\u793a\u51fa name \u662f\u5916\u90e8\u6307\u4ee4\u8fd8\u662f bash \u5185\u5efa\u6307\u4ee4 -t \uff1a\u5f53\u52a0\u5165 -t \u53c2\u6570\u65f6\uff0ctype \u4f1a\u5c06 name \u4ee5\u5e95\u4e0b\u8fd9\u4e9b\u5b57\u773c\u663e\u793a\u51fa\u4ed6\u7684\u610f\u4e49\uff1a file \uff1a\u8868\u793a\u4e3a\u5916\u90e8\u6307\u4ee4\uff1b alias \uff1a\u8868\u793a\u8be5\u6307\u4ee4\u4e3a\u547d\u4ee4\u522b\u540d\u6240\u8bbe\u5b9a\u7684\u540d\u79f0\uff1b builtin \uff1a\u8868\u793a\u8be5\u6307\u4ee4\u4e3a bash \u5185\u5efa\u7684\u6307\u4ee4\u529f\u80fd\uff1b -p \uff1a\u5982\u679c\u540e\u9762\u63a5\u7684 name \u4e3a\u5916\u90e8\u6307\u4ee4\u65f6\uff0c\u624d\u4f1a\u663e\u793a\u5b8c\u6574\u6587\u4ef6\u540d\uff1b -a \uff1a\u4f1a\u7531 PATH \u53d8\u91cf\u5b9a\u4e49\u7684\u8def\u5f84\u4e2d\uff0c\u5c06\u6240\u6709\u542b name \u7684\u6307\u4ee4\u90fd\u5217\u51fa\u6765\uff0c\u5305\u542b alias ulimit \u4e0e\u6587\u4ef6\u7cfb\u7edf\u53ca\u7a0b\u5e8f\u7684\u9650\u5236\u5173\u7cfb\u3002 $ ulimit [-SHacdfltu] [\u914d\u989d] \u9009\u9879\u4e0e\u53c2\u6570\uff1a -H \uff1ahard limit \uff0c\u4e25\u683c\u7684\u8bbe\u5b9a\uff0c\u5fc5\u5b9a\u4e0d\u80fd\u8d85\u8fc7\u8fd9\u4e2a\u8bbe\u5b9a\u7684\u6570\u503c\uff1b -S \uff1asoft limit \uff0c\u8b66\u544a\u7684\u8bbe\u5b9a\uff0c\u53ef\u4ee5\u8d85\u8fc7\u8fd9\u4e2a\u8bbe\u5b9a\u503c\uff0c\u4f46\u662f\u82e5\u8d85\u8fc7\u5219\u6709\u8b66\u544a\u8baf\u606f\u3002 \u5728\u8bbe\u5b9a\u4e0a\uff0c\u901a\u5e38 soft \u4f1a\u6bd4 hard \u5c0f\uff1b -a \uff1a\u540e\u9762\u4e0d\u63a5\u4efb\u4f55\u9009\u9879\u4e0e\u53c2\u6570\uff0c\u53ef\u5217\u51fa\u6240\u6709\u7684\u9650\u5236\u989d\u5ea6\uff1b -c \uff1a\u5f53\u67d0\u4e9b\u7a0b\u5e8f\u53d1\u751f\u9519\u8bef\u65f6\uff0c\u7cfb\u7edf\u53ef\u80fd\u4f1a\u5c06\u8be5\u7a0b\u5e8f\u5728\u5185\u5b58\u4e2d\u7684\u4fe1\u606f\u5199\u6210\u6587\u4ef6(\u9664\u9519\u7528)\uff0c \u8fd9\u79cd\u6587\u4ef6\u5c31\u88ab\u79f0\u4e3a\u6838\u5fc3\u6587\u4ef6(core file)\u3002\u6b64\u4e3a\u9650\u5236\u6bcf\u4e2a\u6838\u5fc3\u6587\u4ef6\u7684\u6700\u5927\u5bb9\u91cf\u3002 -d \uff1a\u7a0b\u5e8f\u53ef\u4f7f\u7528\u7684\u6700\u5927\u65ad\u88c2\u5185\u5b58(segment)\u5bb9\u91cf\uff1b -l \uff1a\u53ef\u7528\u4e8e\u9501\u5b9a (lock) \u7684\u5185\u5b58\u91cf -t \uff1a\u53ef\u4f7f\u7528\u7684\u6700\u5927 CPU \u65f6\u95f4 (\u5355\u4f4d\u4e3a\u79d2) -u \uff1a\u5355\u4e00\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u7684\u6700\u5927\u7a0b\u5e8f(process)\u6570\u91cf\u3002 \u547d\u4ee4\u522b\u540d\u4e0e\u5386\u53f2\u547d\u4ee4 \u547d\u4ee4\u522b\u540d\u8bbe\u5b9a\uff1a alias, unalias \u5386\u53f2\u547d\u4ee4\uff1ahistory $ history [n] $ history [-c] $ history [-raw] histfiles \u9009\u9879\u4e0e\u53c2\u6570\uff1a n \uff1a\u6570\u5b57\uff0c\u610f\u601d\u662f\u300e\u8981\u5217\u51fa\u6700\u8fd1\u7684 n \u7b14\u547d\u4ee4\u884c\u8868\u300f\u7684\u610f\u601d\uff01 -c \uff1a\u5c06\u76ee\u524d\u7684 shell \u4e2d\u7684\u6240\u6709 history \u5185\u5bb9\u5168\u90e8\u6d88\u9664 -a \uff1a\u5c06\u76ee\u524d\u65b0\u589e\u7684 history \u6307\u4ee4\u65b0\u589e\u5165 histfiles \u4e2d\uff0c\u82e5\u6ca1\u6709\u52a0 histfiles\uff0c \u5219\u9884\u8bbe\u5199\u5165 ~/.bash_history -r \uff1a\u5c06 histfiles \u7684\u5185\u5bb9\u8bfb\u5230\u76ee\u524d\u8fd9\u4e2a shell \u7684 history \u8bb0\u5fc6\u4e2d\uff1b -w \uff1a\u5c06\u76ee\u524d\u7684 history \u8bb0\u5fc6\u5185\u5bb9\u5199\u5165 histfiles \u4e2d\uff01 $ !66 <==\u6267\u884c\u7b2c 66 \u7b14\u6307\u4ee4 $ !! <==\u6267\u884c\u4e0a\u4e00\u4e2a\u6307\u4ee4 $ !al <==\u6267\u884c\u6700\u8fd1\u4ee5 al \u4e3a\u5f00\u5934\u7684\u6307\u4ee4 \u8def\u5f84\u4e0e\u6307\u4ee4\u641c\u5bfb\u987a\u5e8f \u4ee5\u76f8\u5bf9/\u7edd\u5bf9\u8def\u5f84\u6267\u884c\u6307\u4ee4\uff0c\u4f8b\u5982\u300e /bin/ls \u300f\u6216\u300e ./ls \u300f\uff1b \u7531 alias \u627e\u5230\u8be5\u6307\u4ee4\u6765\u6267\u884c\uff1b \u7531 bash \u5185\u5efa\u7684 (builtin) \u6307\u4ee4\u6765\u6267\u884c\uff1b \u900f\u8fc7 $PATH \u8fd9\u4e2a\u53d8\u91cf\u7684\u987a\u5e8f\u641c\u5bfb\u5230\u7684\u7b2c\u4e00\u4e2a\u6307\u4ee4\u6765\u6267\u884c\u3002 bash \u7684\u8fdb\u7ad9\u4e0e\u6b22\u8fce\u8baf\u606f /etc/issue, /etc/motd \u4e2d\u8bb0\u5f55 bash \u7684\u73af\u5883\u914d\u7f6e\u6587\u4ef6 \u4e0b\u56fe\u4e3a login shell \u914d\u7f6e\u6587\u4ef6\u8bfb\u53d6\u6d41\u7a0b non-login shell \u53ea\u4f1a\u8bfb ~/.bashrc source \uff1a\u8bfb\u5165\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u7684\u6307\u4ee4 flowchart LR subgraph \u4e3b\u7ebf\u6d41\u7a0b id1[\"/etc/profile\"] id2[\"~/.bash_profile\"] id1 --> id2 --> \u5f00\u59cb\u64cd\u4f5cbash end subgraph \u914d\u7f6e\u6587\u4ef6\u7684\u8c03\u75281 direction TB id3[\"/etc/profile.d/*.sh\"] id4[\"/etc/locale.conf\"] id3 -.-> id4 end subgraph \u914d\u7f6e\u6587\u4ef6\u7684\u8c03\u75282 direction TB id5[\"~/.bashrc\"] id6[\"/etc/bashrc\"] id5 -.-> id6 end id1 -.-> \u914d\u7f6e\u6587\u4ef6\u7684\u8c03\u75281 id2 -.-> \u914d\u7f6e\u6587\u4ef6\u7684\u8c03\u75282 /etc/profile PATH\uff1a\u4f1a\u4f9d\u636e UID \u51b3\u5b9a PATH \u53d8\u91cf\u8981\u4e0d\u8981\u542b\u6709 sbin \u7684\u7cfb\u7edf\u6307\u4ee4\u76ee\u5f55\uff1b MAIL\uff1a\u4f9d\u636e\u8d26\u53f7\u8bbe\u5b9a\u597d\u4f7f\u7528\u8005\u7684 mailbox \u5230 /var/spool/mail/\u8d26\u53f7\u540d\uff1b USER\uff1a\u6839\u636e\u7528\u6237\u7684\u8d26\u53f7\u8bbe\u5b9a\u6b64\u4e00\u53d8\u91cf\u5185\u5bb9\uff1b HOSTNAME\uff1a\u4f9d\u636e\u4e3b\u673a\u7684 hostname \u6307\u4ee4\u51b3\u5b9a\u6b64\u4e00\u53d8\u91cf\u5185\u5bb9\uff1b HISTSIZE\uff1a\u5386\u53f2\u547d\u4ee4\u8bb0\u5f55\u7b14\u6570\u3002CentOS 7.x \u8bbe\u5b9a\u4e3a 1000 \uff1b umask\uff1a\u5305\u62ec root \u9ed8\u8ba4\u4e3a 022 \u800c\u4e00\u822c\u7528\u6237\u4e3a 002 \u7b49\uff01 /etc/profile.d/ * .sh /etc/profile.d/lang.sh\uff1a\u8c03\u7528 /etc/locale.conf /etc/profile.d/bash_completion.sh\uff1a\u8c03\u7528 /usr/share/bash-completion/completions/ * ~/.bash_profile\uff0c\u4e0b\u5217\u6587\u4ef6\u540c\u65f6\u5b58\u5728\u65f6\uff0c\u4ece\u4e0a\u5230\u4e0b\u8bfb\u53d6\u7b2c\u4e00\u4e2a\u627e\u5230\u7684\u6587\u4ef6 ~/.bash_profile ~/.bash_login ~/.profile /etc/bashrc\uff0c\u88ab CentOS 7.x \u4e2d\u7684 ~/.bashrc \u7684\u8c03\u7528 \u4f9d\u636e\u4e0d\u540c\u7684 UID \u89c4\u8303\u51fa umask \u7684\u503c\uff1b \u4f9d\u636e\u4e0d\u540c\u7684 UID \u89c4\u8303\u51fa\u63d0\u793a\u5b57\u7b26 (\u5c31\u662f PS1 \u53d8\u91cf)\uff1b \u547c\u53eb /etc/profile.d/ * .sh \u7684\u8bbe\u5b9a \u5176\u4ed6\u914d\u7f6e\u6587\u4ef6 /etc/man_db.conf\uff1b~/.bash_history\uff1b~/.bash_logout \u7ec8\u7aef\u73af\u5883\u8bbe\u5b9a $ stty [-a] \u9009\u9879\u4e0e\u53c2\u6570\uff1a -a \uff1a\u5c06\u76ee\u524d\u6240\u6709\u7684 stty \u53c2\u6570\u5217\u51fa\u6765\uff1b $ set [-uvCHhmBx] \u4f7f\u7528 +\u53c2\u6570 \u5c31\u80fd\u53d6\u6d88\u8bbe\u5b9a \u9009\u9879\u4e0e\u53c2\u6570\uff1a -u \uff1a\u9884\u8bbe\u4e0d\u542f\u7528\u3002\u82e5\u542f\u7528\u540e\uff0c\u5f53\u4f7f\u7528\u672a\u8bbe\u5b9a\u53d8\u91cf\u65f6\uff0c\u4f1a\u663e\u793a\u9519\u8bef\u8baf\u606f\uff1b -v \uff1a\u9884\u8bbe\u4e0d\u542f\u7528\u3002\u82e5\u542f\u7528\u540e\uff0c\u5728\u8baf\u606f\u88ab\u8f93\u51fa\u524d\uff0c\u4f1a\u5148\u663e\u793a\u8baf\u606f\u7684\u539f\u59cb\u5185\u5bb9\uff1b -x \uff1a\u9884\u8bbe\u4e0d\u542f\u7528\u3002\u82e5\u542f\u7528\u540e\uff0c\u5728\u6307\u4ee4\u88ab\u6267\u884c\u524d\uff0c\u4f1a\u663e\u793a\u6307\u4ee4\u5185\u5bb9(\u524d\u9762\u6709 ++ \u7b26\u53f7) -h \uff1a\u9884\u8bbe\u542f\u7528\u3002\u4e0e\u5386\u53f2\u547d\u4ee4\u6709\u5173\uff1b -H \uff1a\u9884\u8bbe\u542f\u7528\u3002\u4e0e\u5386\u53f2\u547d\u4ee4\u6709\u5173\uff1b -m \uff1a\u9884\u8bbe\u542f\u7528\u3002\u4e0e\u5de5\u4f5c\u7ba1\u7406\u6709\u5173\uff1b -B \uff1a\u9884\u8bbe\u542f\u7528\u3002\u4e0e\u522e\u53f7 [] \u7684\u4f5c\u7528\u6709\u5173\uff1b -C \uff1a\u9884\u8bbe\u4e0d\u542f\u7528\u3002\u82e5\u4f7f\u7528 > \u7b49\uff0c\u5219\u82e5\u6587\u4ef6\u5b58\u5728\u65f6\uff0c\u8be5\u6587\u4ef6\u4e0d\u4f1a\u88ab\u8986\u76d6\u3002 \u7ec4\u5408\u6309\u952e \u6267\u884c\u7ed3\u679c Ctrl + D \u8f93\u5165\u7ed3\u675f (EOF)\uff0c\u4f8b\u5982\u90ae\u4ef6\u7ed3\u675f\u7684\u65f6\u5019\uff1b Ctrl + M \u5c31\u662f Enter \u5566\uff01 Ctrl + S \u6682\u505c\u5c4f\u5e55\u7684\u8f93\u51fa Ctrl + Q \u6062\u590d\u5c4f\u5e55\u7684\u8f93\u51fa Ctrl + Z \u300e\u6682\u505c\u300f\u76ee\u524d\u7684\u547d\u4ee4 \u6570\u636e\u6d41\u91cd\u5bfc\u5411 \u6807\u51c6\u8f93\u5165 (stdin) \uff1a\u4ee3\u7801\u4e3a 0 \uff0c\u4f7f\u7528 < \u6216 << \u6807\u51c6\u8f93\u51fa (stdout)\uff1a\u4ee3\u7801\u4e3a 1 \uff0c\u4f7f\u7528 > \u6216 >> \u6807\u51c6\u9519\u8bef\u8f93\u51fa(stderr)\uff1a\u4ee3\u7801\u4e3a 2 \uff0c\u4f7f\u7528 2> \u6216 2>> 2>&1\uff0c1>&2\uff1a 1> \u548c 2> \u4e92\u76f8\u8f6c\u6362 command1 && command2 || command3 \u6761\u4ef6\u5224\u65ad\u5f0f\uff0c\u7b49\u6548\u4e8e C \u4e2d\u7684 c1 ? c2 : c3 < \u4e0e << \u7528 stdin \u53d6\u4ee3\u952e\u76d8\u7684\u8f93\u5165\u4ee5\u5efa\u7acb\u65b0\u6587\u4ef6\u7684\u7b80\u5355\u6d41\u7a0b $ cat > catfile < ~/.bashrc $ cat > catfile << \"eof\" > This is a test. > OK now stop > eof <==\u8f93\u5165\u8fd9\u5173\u952e\u8bcd\uff0c\u7acb\u523b\u5c31\u7ed3\u675f\u800c\u4e0d\u9700\u8981\u8f93\u5165 [ctrl]+d \u7ba1\u9053\u547d\u4ee4 \u4ec5\u4f1a\u5904\u7406 standard output\uff0c\u5bf9\u4e8e standard error output \u4f1a\u4e88\u4ee5\u5ffd\u7565 \u5fc5\u987b\u8981\u80fd\u591f\u63a5\u53d7\u6765\u81ea\u524d\u4e00\u4e2a\u6307\u4ee4\u7684\u6570\u636e\u6210\u4e3a standard input \u7ee7\u7eed\u5904\u7406\u624d\u884c\uff0c\u4f8b\u5982 ls, cp, mv \u7b49\u5c31\u4e0d\u662f\u7ba1\u9053\u547d\u4ee4 \u9009\u53d6\u547d\u4ee4 cut $ cut -d'\u5206\u9694\u5b57\u7b26' -f fields <==\u7528\u4e8e\u6709\u7279\u5b9a\u5206\u9694\u5b57\u7b26 $ cut -c \u5b57\u7b26\u533a\u95f4 <==\u7528\u4e8e\u6392\u5217\u6574\u9f50\u7684\u8baf\u606f \u9009\u9879\u4e0e\u53c2\u6570\uff1a -d \uff1a\u540e\u9762\u63a5\u5206\u9694\u5b57\u7b26\u3002\u4e0e -f \u4e00\u8d77\u4f7f\u7528\uff1b -f \uff1a\u4f9d\u636e -d \u7684\u5206\u9694\u5b57\u7b26\u5c06\u4e00\u6bb5\u8baf\u606f\u5206\u533a\u6210\u4e3a\u6570\u6bb5\uff0c\u7528 -f \u53d6\u51fa\u7b2c\u51e0\u6bb5\u7684\u610f\u601d\uff1b -c \uff1a\u4ee5\u5b57\u7b26 (characters) \u7684\u5355\u4f4d\u53d6\u51fa\u56fa\u5b9a\u5b57\u7b26\u533a\u95f4\uff1b grep $ grep [-acinv] [--color=auto] '\u641c\u5bfb\u5b57\u7b26\u4e32' filename \u9009\u9879\u4e0e\u53c2\u6570\uff1a -a \uff1a\u5c06 binary \u6587\u4ef6\u4ee5 text \u6587\u4ef6\u7684\u65b9\u5f0f\u641c\u5bfb\u6570\u636e -c \uff1a\u8ba1\u7b97\u627e\u5230 '\u641c\u5bfb\u5b57\u7b26\u4e32' \u7684\u6b21\u6570 -i \uff1a\u5ffd\u7565\u5927\u5c0f\u5199\u7684\u4e0d\u540c\uff0c\u6240\u4ee5\u5927\u5c0f\u5199\u89c6\u4e3a\u76f8\u540c -n \uff1a\u987a\u4fbf\u8f93\u51fa\u884c\u53f7 -v \uff1a\u53cd\u5411\u9009\u62e9\uff0c\u4ea6\u5373\u663e\u793a\u51fa\u6ca1\u6709 '\u641c\u5bfb\u5b57\u7b26\u4e32' \u5185\u5bb9\u7684\u90a3\u4e00\u884c\uff01 --color=auto \uff1a\u53ef\u4ee5\u5c06\u627e\u5230\u7684\u5173\u952e\u8bcd\u90e8\u5206\u52a0\u4e0a\u989c\u8272\u7684\u663e\u793a\u5594\uff01 \u6392\u5e8f\u547d\u4ee4 sort $ sort [-fbMnrtuk] [file or stdin] \u9009\u9879\u4e0e\u53c2\u6570\uff1a -f \uff1a\u5ffd\u7565\u5927\u5c0f\u5199\u7684\u5dee\u5f02\uff0c\u4f8b\u5982 A \u4e0e a \u89c6\u4e3a\u7f16\u7801\u76f8\u540c\uff1b -b \uff1a\u5ffd\u7565\u6700\u524d\u9762\u7684\u7a7a\u683c\u7b26\u90e8\u5206\uff1b -M \uff1a\u4ee5\u6708\u4efd\u7684\u540d\u5b57\u6765\u6392\u5e8f\uff0c\u4f8b\u5982 JAN, DEC \u7b49\u7b49\u7684\u6392\u5e8f\u65b9\u6cd5\uff1b -n \uff1a\u4f7f\u7528\u300e\u7eaf\u6570\u5b57\u300f\u8fdb\u884c\u6392\u5e8f(\u9ed8\u8ba4\u662f\u4ee5\u6587\u5b57\u578b\u6001\u6765\u6392\u5e8f\u7684)\uff1b -r \uff1a\u53cd\u5411\u6392\u5e8f\uff1b -u \uff1a\u5c31\u662f uniq \uff0c\u76f8\u540c\u7684\u6570\u636e\u4e2d\uff0c\u4ec5\u51fa\u73b0\u4e00\u884c\u4ee3\u8868\uff1b -t \uff1a\u5206\u9694\u7b26\uff0c\u9884\u8bbe\u662f\u7528 [tab] \u952e\u6765\u5206\u9694\uff1b -k \uff1a\u4ee5\u90a3\u4e2a\u533a\u95f4 (field) \u6765\u8fdb\u884c\u6392\u5e8f\u7684\u610f\u601d uniq uniq [-ic] \u9009\u9879\u4e0e\u53c2\u6570\uff1a -i \uff1a\u5ffd\u7565\u5927\u5c0f\u5199\u5b57\u7b26\u7684\u4e0d\u540c\uff1b -c \uff1a\u8fdb\u884c\u8ba1\u6570 wc $ wc [-lwm] \u9009\u9879\u4e0e\u53c2\u6570\uff1a -l \uff1a\u4ec5\u5217\u51fa\u884c\uff1b -w \uff1a\u4ec5\u5217\u51fa\u591a\u5c11\u5b57(\u82f1\u6587\u5355\u5b57)\uff1b -m \uff1a\u591a\u5c11\u5b57\u7b26\uff1b \u53cc\u5411\u7ba1\u9053\uff1atee $ tee [-a] file \u9009\u9879\u4e0e\u53c2\u6570\uff1a -a \uff1a\u4ee5\u7d2f\u52a0 (append) \u7684\u65b9\u5f0f\uff0c\u5c06\u6570\u636e\u52a0\u5165 file \u5f53\u4e2d\uff01 \u5b57\u7b26\u8f6c\u6362\u547d\u4ee4 tr \u53ef\u4ee5\u7528\u6765\u5220\u9664\u4e00\u6bb5\u8baf\u606f\u5f53\u4e2d\u7684\u6587\u5b57\uff0c\u6216\u8005\u662f\u8fdb\u884c\u6587\u5b57\u8baf\u606f\u7684\u66ff\u6362\uff01 $ tr [-ds] SET1 ... \u9009\u9879\u4e0e\u53c2\u6570\uff1a -d \uff1a\u5220\u9664\u8baf\u606f\u5f53\u4e2d\u7684 SET1 \u8fd9\u4e2a\u5b57\u7b26\u4e32\uff1b -s \uff1a\u53d6\u4ee3\u6389\u91cd\u590d\u7684\u5b57\u7b26\uff01 join \u5904\u7406\u300e\u4e24\u4e2a\u6587\u4ef6\u5f53\u4e2d\uff0c\u6709 \"\u76f8\u540c\u6570\u636e\" \u7684\u90a3\u4e00\u884c\uff0c\u624d\u5c06\u4ed6\u52a0\u5728\u4e00\u8d77\u300f $ join [-ti12] file1 file2 \u9009\u9879\u4e0e\u53c2\u6570\uff1a -t \uff1ajoin \u9ed8\u8ba4\u4ee5\u7a7a\u683c\u7b26\u5206\u9694\u6570\u636e\uff0c\u5e76\u4e14\u6bd4\u5bf9\u300e\u7b2c\u4e00\u4e2a\u5b57\u6bb5\u300f\u7684\u6570\u636e\uff0c \u5982\u679c\u4e24\u4e2a\u6587\u4ef6\u76f8\u540c\uff0c\u5219\u5c06\u4e24\u7b14\u6570\u636e\u8054\u6210\u4e00\u884c\uff0c\u4e14\u7b2c\u4e00\u4e2a\u5b57\u6bb5\u653e\u5728\u7b2c\u4e00\u4e2a\uff01 -i \uff1a\u5ffd\u7565\u5927\u5c0f\u5199\u7684\u5dee\u5f02\uff1b -1 \uff1a\u8fd9\u4e2a\u662f\u6570\u5b57\u7684 1 \uff0c\u4ee3\u8868\u300e\u7b2c\u4e00\u4e2a\u6587\u4ef6\u8981\u7528\u90a3\u4e2a\u5b57\u6bb5\u6765\u5206\u6790\u300f\u7684\u610f\u601d\uff1b -2 \uff1a\u4ee3\u8868\u300e\u7b2c\u4e8c\u4e2a\u6587\u4ef6\u8981\u7528\u90a3\u4e2a\u5b57\u6bb5\u6765\u5206\u6790\u300f\u7684\u610f\u601d\u3002 paste $ paste [-d] file1 file2 \u9009\u9879\u4e0e\u53c2\u6570\uff1a -d \uff1a\u540e\u9762\u53ef\u4ee5\u63a5\u5206\u9694\u5b57\u7b26\u3002\u9884\u8bbe\u662f\u4ee5 [tab] \u6765\u5206\u9694\u7684\uff01 - \uff1a\u5982\u679c file \u90e8\u5206\u5199\u6210 - \uff0c\u8868\u793a\u6765\u81ea standard input \u7684\u8d44\u6599\u7684\u610f\u601d expand $ expand [-t] file \u9009\u9879\u4e0e\u53c2\u6570\uff1a -t \uff1a\u540e\u9762\u53ef\u4ee5\u63a5\u6570\u5b57\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u4e00\u4e2a tab \u6309\u952e\u53ef\u4ee5\u7528 8 \u4e2a\u7a7a\u683c\u952e\u53d6\u4ee3\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u81ea\u884c\u5b9a\u4e49\u4e00\u4e2a [tab] \u6309\u952e\u4ee3\u8868\u591a\u5c11\u4e2a\u5b57\u7b26\u5462\uff01 \u5206\u533a\u547d\u4ee4\uff1a split $ split [-bl] file PREFIX \u9009\u9879\u4e0e\u53c2\u6570\uff1a -b \uff1a\u540e\u9762\u53ef\u63a5\u6b32\u5206\u533a\u6210\u7684\u6587\u4ef6\u5927\u5c0f\uff0c\u53ef\u52a0\u5355\u4f4d\uff0c\u4f8b\u5982 b, k, m \u7b49\uff1b -l \uff1a\u4ee5\u884c\u6570\u6765\u8fdb\u884c\u5206\u533a\u3002 PREFIX \uff1a\u4ee3\u8868\u524d\u5bfc\u7b26\u7684\u610f\u601d\uff0c\u53ef\u4f5c\u4e3a\u5206\u533a\u6587\u4ef6\u7684\u524d\u5bfc\u6587\u5b57\u3002 \u53c2\u6570\u4ee3\u6362\uff1a xargs $ xargs [-0epn] command \u9009\u9879\u4e0e\u53c2\u6570\uff1a -0 \uff1a\u5982\u679c\u8f93\u5165\u7684 stdin \u542b\u6709\u7279\u6b8a\u5b57\u7b26\uff0c\u4f8b\u5982 `, \\, \u7a7a\u683c\u952e\u7b49\u7b49\u5b57\u7b26\u65f6\uff0c\u8fd9\u4e2a -0 \u53c2\u6570 \u53ef\u4ee5\u5c06\u4ed6\u8fd8\u539f\u6210\u4e00\u822c\u5b57\u7b26\u3002\u8fd9\u4e2a\u53c2\u6570\u53ef\u4ee5\u7528\u4e8e\u7279\u6b8a\u72b6\u6001\u5594\uff01 -e \uff1a\u8fd9\u4e2a\u662f EOF (end of file) \u7684\u610f\u601d\u3002\u540e\u9762\u53ef\u4ee5\u63a5\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5f53 xargs \u5206\u6790\u5230 \u8fd9\u4e2a\u5b57\u7b26\u4e32\u65f6\uff0c \u5c31\u4f1a\u505c\u6b62\u7ee7\u7eed\u5de5\u4f5c\uff01 -p \uff1a\u5728\u6267\u884c\u6bcf\u4e2a\u6307\u4ee4\u7684 argument \u65f6\uff0c\u90fd\u4f1a\u8be2\u95ee\u4f7f\u7528\u8005\u7684\u610f\u601d\uff1b -n \uff1a\u540e\u9762\u63a5\u6b21\u6570\uff0c\u6bcf\u6b21 command \u6307\u4ee4\u6267\u884c\u65f6\uff0c\u8981\u4f7f\u7528\u51e0\u4e2a\u53c2\u6570\u7684\u610f\u601d\u3002 \u5f53 xargs \u540e \u9762\u6ca1\u6709\u63a5\u4efb\u4f55\u7684\u6307\u4ee4\u65f6\uff0c\u9ed8\u8ba4\u662f\u4ee5 echo \u6765\u8fdb\u884c\u8f93\u51fa\u5594\uff01 \u5c06 /etc/passwd \u5185\u7684\u7b2c\u4e00\u680f\u53d6\u51fa\uff0c\u4ec5\u53d6\u4e09\u884c\uff0c\u4f7f\u7528 id \u8fd9\u4e2a\u6307\u4ee4\u5c06\u6bcf\u4e2a\u8d26\u53f7\u5185\u5bb9\u79c0\u51fa\u6765 $ id root uid=0(root) gid=0(root) groups=0(root) # \u8fd9\u4e2a id \u6307\u4ee4\u53ef\u4ee5\u67e5\u8be2\u7528\u6237\u7684 UID/GID \u7b49\u4fe1\u606f $ cut -d ':' -f 1 /etc/passwd | head -n 3 | xargs -n 1 id uid=0(root) gid=0(root) groups=0(root) uid=1(bin) gid=1(bin) groups=1(bin) uid=2(daemon) gid=2(daemon) groups=2(daemon) # \u900f\u8fc7 -n \u6765\u5904\u7406\uff0c\u4e00\u6b21\u7ed9\u4e88\u4e00\u4e2a\u53c2\u6570\uff0c\u56e0\u6b64\u4e0a\u8ff0\u7684\u7ed3\u679c\u5c31 OK \u6b63\u5e38\u7684\u663e\u793a\u5570\uff01 \u5f88\u591a\u6307\u4ee4\u5176\u5b9e\u5e76\u4e0d\u652f\u6301\u7ba1\u9053\u547d\u4ee4\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u900f\u8fc7 xargs \u6765\u63d0\u4f9b\u8be5\u6307\u4ee4\u5f15\u7528 standard input \u4e4b\u7528\uff01 \u627e\u51fa /usr/sbin \u5e95\u4e0b\u5177\u6709\u7279\u6b8a\u6743\u9650\u7684\u6863\u540d\uff0c\u5e76\u4f7f\u7528 ls -l \u5217\u51fa\u8be6\u7ec6\u5c5e\u6027 $ find /usr/sbin -perm /7000 | xargs ls -l \u51cf\u53f7 - \u7684\u7528\u9014 stdin \u4e0e stdout \u53ef\u4ee5\u5229\u7528\u51cf\u53f7 \"-\" \u6765\u66ff\u4ee3 $ mkdir /tmp/homeback $ tar -cvf - /home | tar -xvf - -C /tmp/homeback script \u826f\u597d\u7684 script \u64b0\u5199\u4e60\u60ef\uff0c\u5728\u6bcf\u4e2a script \u7684\u6587\u4ef6\u5934\u5904\u8bb0\u5f55\u597d\uff1a \u7b2c\u4e00\u884c #!/bin/bash script \u7684\u529f\u80fd\uff1b script \u7684\u7248\u672c\u4fe1\u606f\uff1b script \u7684\u4f5c\u8005\u4e0e\u8054\u7edc\u65b9\u5f0f\uff1b script \u7684\u7248\u6743\u5ba3\u544a\u65b9\u5f0f\uff1b script \u7684 History (\u5386\u53f2\u7eaa\u5f55)\uff1b script \u5185\u8f83\u7279\u6b8a\u7684\u6307\u4ee4\uff0c\u4f7f\u7528\u300e\u7edd\u5bf9\u8def\u5f84\u300f\u7684\u65b9\u5f0f\u6765\u4e0b\u8fbe\uff1b script \u8fd0\u4f5c\u65f6\u9700\u8981\u7684\u73af\u5883\u53d8\u91cf\u9884\u5148\u5ba3\u544a\u4e0e\u8bbe\u5b9a\u3002 \u6267\u884c script \u76f4\u63a5\u6307\u4ee4\u4e0b\u8fbe\uff1a shell.sh \u6587\u4ef6\u5fc5\u987b\u8981\u5177\u5907\u53ef\u8bfb\u4e0e\u53ef\u6267\u884c (rx) \u7684\u6743\u9650\uff0c\u7136\u540e\uff1a \u7edd\u5bf9\u8def\u5f84\uff1a\u4f7f\u7528 /home/dmtsai/shell.sh \u6765\u4e0b\u8fbe\u6307\u4ee4\uff1b \u76f8\u5bf9\u8def\u5f84\uff1a\u5047\u8bbe\u5de5\u4f5c\u76ee\u5f55\u5728 /home/dmtsai/ \uff0c\u5219\u4f7f\u7528 ./shell.sh \u6765\u6267 \u53d8\u91cf\u300ePATH\u300f\u529f\u80fd\uff1a\u5c06 shell.sh \u653e\u5728 PATH \u6307\u5b9a\u7684\u76ee\u5f55\u5185\uff0c\u4f8b\u5982\uff1a ~/bin/ \u4ee5 bash \u7a0b\u5e8f\u6765\u6267\u884c\uff1a\u900f\u8fc7\u300e bash shell.sh \u300f\u6216\u300e sh shell.sh \u300f\u6765\u6267\u884c \u6267\u884c\u65b9\u5f0f\u5dee\u5f02\uff1a - \u4e0a\u8ff0\u65b9\u6cd5\u6267\u884c script\uff0c\u8be5 script \u90fd\u4f1a\u4f7f\u7528\u4e00\u4e2a\u65b0\u7684 bash \u73af\u5883\u6765\u6267\u884c\u811a\u672c\u5185\u7684\u6307\u4ee4 - source \u6765\u6267\u884c\u811a\u672c\uff1a\u5728\u7236\u7a0b\u5e8f\u4e2d\u6267\u884c \u6570\u503c\u8fd0\u7b97 declare -i total=${firstnu}*${secnu} var=$((\u8fd0\u7b97\u5185\u5bb9)) \u900f\u8fc7 bc \u5224\u65ad\u5f0f test \u6307\u4ee4\u7684\u6d4b\u8bd5\u529f \u5173\u4e8e\u67d0\u4e2a\u6863\u540d\u7684\u300e\u6587\u4ef6\u7c7b\u578b\u300f\u5224\u65ad\uff0c\u5982 test -e filename \u8868\u793a\u5b58\u5728\u5426 \u6d4b\u8bd5\u7684\u6807\u5fd7 \u4ee3\u8868\u610f\u4e49 -e \u8be5\u300e\u6863\u540d\u300f\u662f\u5426\u5b58\u5728\uff1f(\u5e38\u7528) -f \u8be5\u300e\u6863\u540d\u300f\u662f\u5426\u5b58\u5728\u4e14\u4e3a\u6587\u4ef6(file)\uff1f(\u5e38\u7528) -d \u8be5\u300e\u6587\u4ef6\u540d\u300f\u662f\u5426\u5b58\u5728\u4e14\u4e3a\u76ee\u5f55(directory)\uff1f(\u5e38\u7528) -b \u8be5\u300e\u6863\u540d\u300f\u662f\u5426\u5b58\u5728\u4e14\u4e3a\u4e00\u4e2a block device \u88c5\u7f6e\uff1f -c \u8be5\u300e\u6863\u540d\u300f\u662f\u5426\u5b58\u5728\u4e14\u4e3a\u4e00\u4e2a character device \u88c5\u7f6e -S \u8be5\u300e\u6863\u540d\u300f\u662f\u5426\u5b58\u5728\u4e14\u4e3a\u4e00\u4e2a Socket \u6587\u4ef6\uff1f -p \u8be5\u300e\u6863\u540d\u300f\u662f\u5426\u5b58\u5728\u4e14\u4e3a\u4e00\u4e2a FIFO (pipe) \u6587\u4ef6 -L \u8be5\u300e\u6863\u540d\u300f\u662f\u5426\u5b58\u5728\u4e14\u4e3a\u4e00\u4e2a\u94fe\u63a5\u6587\u4ef6\uff1f \u5173\u4e8e\u6587\u4ef6\u7684\u6743\u9650\u4fa6\u6d4b\uff0c\u5982 test -r filename \u8868\u793a\u53ef\u8bfb\u5426 (\u4f46 root \u6743\u9650\u5e38\u6709\u4f8b\u5916) \u6d4b\u8bd5\u7684\u6807\u5fd7 \u4ee3\u8868\u610f\u4e49 -r \u4fa6\u6d4b\u8be5\u6863\u540d\u662f\u5426\u5b58\u5728\u4e14\u5177\u6709\u300e\u53ef\u8bfb\u300f\u7684\u6743\u9650\uff1f -w \u4fa6\u6d4b\u8be5\u6863\u540d\u662f\u5426\u5b58\u5728\u4e14\u5177\u6709\u300e\u53ef\u5199\u300f\u7684\u6743\u9650\uff1f -x \u4fa6\u6d4b\u8be5\u6863\u540d\u662f\u5426\u5b58\u5728\u4e14\u5177\u6709\u300e\u53ef\u6267\u884c\u300f\u7684\u6743\u9650\uff1f -u \u4fa6\u6d4b\u8be5\u6587\u4ef6\u540d\u662f\u5426\u5b58\u5728\u4e14\u5177\u6709\u300eSUID\u300f\u7684\u5c5e\u6027\uff1f -g \u4fa6\u6d4b\u8be5\u6587\u4ef6\u540d\u662f\u5426\u5b58\u5728\u4e14\u5177\u6709\u300eSGID\u300f\u7684\u5c5e\u6027\uff1f -k \u4fa6\u6d4b\u8be5\u6587\u4ef6\u540d\u662f\u5426\u5b58\u5728\u4e14\u5177\u6709\u300eSticky bit\u300f\u7684\u5c5e\u6027\uff1f -s \u4fa6\u6d4b\u8be5\u6863\u540d\u662f\u5426\u5b58\u5728\u4e14\u4e3a\u300e\u975e\u7a7a\u767d\u6587\u4ef6\u300f\uff1f \u4e24\u4e2a\u6587\u4ef6\u4e4b\u95f4\u7684\u6bd4\u8f83\uff0c\u5982\uff1a test file1 -nt file2 nt\uff1bot\uff1bef \u5173\u4e8e\u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u7684\u5224\u5b9a\uff0c\u4f8b\u5982 test n1 -eq n2 eq\uff1bne\uff1bgt\uff1blt\uff1bge\uff1ble \u5224\u5b9a\u5b57\u7b26\u4e32\u7684\u6570\u636e test -z string\uff1a\u5224\u5b9a\u5b57\u7b26\u4e32\u662f\u5426\u4e3a 0 \uff1f\u82e5 string \u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5219\u4e3a true test -n string\uff1a\u5224\u5b9a\u5b57\u7b26\u4e32\u662f\u5426\u975e\u4e3a 0 \uff1f\u82e5 string \u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5219\u4e3a false\u3002 \u6ce8\uff1a -n \u4ea6\u53ef\u7701\u7565 test str1 == str2\uff1a\u5224\u5b9a str1 \u662f\u5426\u7b49\u4e8e str2 \uff0c\u82e5\u76f8\u7b49\uff0c\u5219\u56de\u4f20 true test str1 != str2\uff1a\u5224\u5b9a str1 \u662f\u5426\u4e0d\u7b49\u4e8e str2 \uff0c\u82e5\u76f8\u7b49\uff0c\u5219\u56de\u4f20 false \u591a\u91cd\u6761\u4ef6\u5224\u5b9a\uff0c\u4f8b\u5982\uff1a test -r filename -a -x filename a\uff1bo\uff1b! \u5229\u7528\u5224\u65ad\u7b26\u53f7 [ ] \u5728\u4e2d\u62ec\u53f7 [] \u5185\u7684\u6bcf\u4e2a\u7ec4\u4ef6\u90fd\u9700\u8981\u6709\u7a7a\u683c\u952e\u6765\u5206\u9694\uff1b \u5728\u4e2d\u62ec\u53f7\u5185\u7684\u53d8\u6570\uff0c\u6700\u597d\u90fd\u4ee5\u53cc\u5f15\u53f7\u62ec\u53f7\u8d77\u6765\uff1b \u5728\u4e2d\u62ec\u53f7\u5185\u7684\u5e38\u6570\uff0c\u6700\u597d\u90fd\u4ee5\u5355\u6216\u53cc\u5f15\u53f7\u62ec\u53f7\u8d77\u6765\u3002 \u7684\u9ed8\u8ba4\u53d8\u6570($0, $1...) $# \uff1a\u4ee3\u8868\u540e\u63a5\u7684\u53c2\u6570\u300e\u4e2a\u6570\u300f\uff1b - @ \uff1a\u4ee3\u8868\u300e \" @ \uff1a\u4ee3\u8868\u300e \" 1\" \" 2\" \" 2\" \" 3\" \"$4\" \u300f\u4e4b\u610f\uff0c\u6bcf\u4e2a\u53d8\u91cf\u662f\u72ec\u7acb\u7684(\u7528\u53cc\u5f15\u53f7\u62ec\u8d77\u6765)\uff1b * \uff1a\u4ee3\u8868\u300e \" * \uff1a\u4ee3\u8868\u300e \" 1c 2c 2c 3c$4\" \u300f\uff0c\u5176\u4e2d c \u4e3a\u5206\u9694\u5b57\u7b26\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\u683c\u952e\u3002 shift\uff1a\u9020\u6210\u53c2\u6570\u53d8\u91cf\u53f7\u7801\u504f\u79fb \u6761\u4ef6\u5224\u65ad\u5f0f # \u591a\u4e2a\u6761\u4ef6\u5224\u65ad (if ... elif ... elif ... else) \u5206\u591a\u79cd\u4e0d\u540c\u60c5\u51b5\u6267\u884c if [ \u6761\u4ef6\u5224\u65ad\u5f0f\u4e00 ]; then \u5f53\u6761\u4ef6\u5224\u65ad\u5f0f\u4e00\u6210\u7acb\u65f6\uff0c\u53ef\u4ee5\u8fdb\u884c\u7684\u6307\u4ee4\u5de5\u4f5c\u5185\u5bb9\uff1b elif [ \u6761\u4ef6\u5224\u65ad\u5f0f\u4e8c ]; then \u5f53\u6761\u4ef6\u5224\u65ad\u5f0f\u4e8c\u6210\u7acb\u65f6\uff0c\u53ef\u4ee5\u8fdb\u884c\u7684\u6307\u4ee4\u5de5\u4f5c\u5185\u5bb9\uff1b else \u5f53\u6761\u4ef6\u5224\u65ad\u5f0f\u4e00\u4e0e\u4e8c\u5747\u4e0d\u6210\u7acb\u65f6\uff0c\u53ef\u4ee5\u8fdb\u884c\u7684\u6307\u4ee4\u5de5\u4f5c\u5185\u5bb9\uff1b fi case $\u53d8\u91cf\u540d\u79f0 in <==\u5173\u952e\u8bcd\u4e3a case \uff0c\u8fd8\u6709\u53d8\u6570\u524d\u6709\u94b1\u5b57\u53f7 \"\u7b2c\u4e00\u4e2a\u53d8\u91cf\u5185\u5bb9\") <==\u6bcf\u4e2a\u53d8\u91cf\u5185\u5bb9\u5efa\u8bae\u7528\u53cc\u5f15\u53f7\u62ec\u8d77\u6765\uff0c\u5173\u952e\u8bcd\u5219\u4e3a\u5c0f\u62ec\u53f7 ) \u7a0b\u5e8f\u6bb5 ;; \"\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u5185\u5bb9\") \u7a0b\u5e8f\u6bb5 ;; *) <==\u6700\u540e\u4e00\u4e2a\u53d8\u91cf\u5185\u5bb9\u90fd\u4f1a\u7528 * \u6765\u4ee3\u8868\u6240\u6709\u5176\u4ed6\u503c \u4e0d\u5305\u542b\u7b2c\u4e00\u4e2a\u53d8\u91cf\u5185\u5bb9\u4e0e\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u5185\u5bb9\u7684\u5176\u4ed6\u7a0b\u5e8f\u6267\u884c\u6bb5 exit 1 ;; esac <==\u6700\u7ec8\u7684 case \u7ed3\u5c3e\uff01\u300e\u53cd\u8fc7\u6765\u5199\u300f\u601d\u8003\u4e00\u4e0b\uff01 \u51fd\u6570 function fname() { \u7a0b\u5e8f\u6bb5 } \u5faa\u73af (loop) \u4e0d\u5b9a\u5faa\u73af while [ condition ] <==\u4e2d\u62ec\u53f7\u5185\u7684\u72b6\u6001\u5c31\u662f\u5224\u65ad\u5f0f do <==do \u662f\u5faa\u73af\u7684\u5f00\u59cb\uff01 \u7a0b\u5e8f\u6bb5\u843d done <==done \u662f\u5faa\u73af\u7684\u7ed3\u675f until [ condition ] do \u7a0b\u5e8f\u6bb5\u843d done \u56fa\u5b9a\u5faa\u73af for var in con1 con2 con3 ... do \u7a0b\u5e8f\u6bb5 done for (( \u521d\u59cb\u503c; \u9650\u5236\u503c; \u6267\u884c\u6b65\u9636 )) do \u7a0b\u5e8f\u6bb5 done \u8ffd\u8e2a\u4e0e debug $ sh [-nvx] scripts.sh \u9009\u9879\u4e0e\u53c2\u6570\uff1a -n \uff1a\u4e0d\u8981\u6267\u884c script\uff0c\u4ec5\u67e5\u8be2\u8bed\u6cd5\u7684\u95ee\u9898\uff1b -v \uff1a\u518d\u6267\u884c sccript \u524d\uff0c\u5148\u5c06 scripts \u7684\u5185\u5bb9\u8f93\u51fa\u5230\u5c4f\u5e55\u4e0a\uff1b -x \uff1a\u5c06\u4f7f\u7528\u5230\u7684 script \u5185\u5bb9\u663e\u793a\u5230\u5c4f\u5e55\u4e0a\uff0c\u8fd9\u662f\u5f88\u6709\u7528\u7684\u53c2\u6570\uff01","title":"bash"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#bash","text":"\u5feb\u6377\u6307\u4ee4 [ctrl]+u/[ctrl]+k \u5206\u522b\u662f\u4ece\u5149\u6807\u5904\u5411\u524d\u5220\u9664\u6307\u4ee4\u4e32([ctrl]+u) \u53ca\u5411\u540e\u5220\u9664\u6307\u4ee4\u4e32 ([ctrl]+k)\u3002 [ctrl]+a/[ctrl]+e \u5206\u522b\u662f\u8ba9\u5149\u6807\u79fb\u52a8\u5230\u6574\u4e2a\u6307\u4ee4\u4e32\u7684\u6700\u524d\u9762 ([ctrl]+a) \u6216\u6700\u540e\u9762 ([ctrl]+e)\u3002","title":"bash"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#_1","text":"","title":"\u53d8\u91cf"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#_2","text":"\u53d8\u91cf\u4e0e\u53d8\u91cf\u5185\u5bb9\u4ee5\u4e00\u4e2a\u7b49\u53f7 = \u6765\u8fde\u7ed3\uff0c \u7b49\u53f7\u4e24\u8fb9\u4e0d\u80fd\u76f4\u63a5\u63a5\u7a7a\u683c\u7b26 \u53d8\u91cf\u540d\u79f0\u53ea\u80fd\u662f\u82f1\u6587\u5b57\u6bcd\u4e0e\u6570\u5b57\uff0c\u4f46\u662f\u5f00\u5934\u5b57\u7b26\u4e0d\u80fd\u662f\u6570\u5b57 \u53d8\u91cf\u5185\u5bb9\u82e5\u6709\u7a7a\u683c\u7b26\u53ef\u4f7f\u7528\u53cc\u5f15\u53f7 \" \u6216\u5355\u5f15\u53f7 ' \u5c06\u53d8\u91cf\u5185\u5bb9\u7ed3\u5408\u8d77\u6765\uff0c\u4f46 \u53cc\u5f15\u53f7\u5185\u7684\u7279\u6b8a\u5b57\u7b26\u5982 $ \u7b49\uff0c\u53ef\u4ee5\u4fdd\u6709\u539f\u672c\u7684\u7279\u6027 \u5355\u5f15\u53f7\u5185\u7684\u7279\u6b8a\u5b57\u7b26\u5219\u4ec5\u4e3a\u4e00\u822c\u5b57\u7b26 (\u7eaf\u6587\u672c) \u53ef\u7528\u8df3\u8131\u5b57\u7b26 \\ \u5c06\u7279\u6b8a\u7b26\u53f7(\u5982 [Enter] , $ , \\ , \u7a7a\u683c\u7b26 , ' \u7b49 ) \u53d8\u6210\u4e00\u822c\u5b57\u7b26 \u5728\u4e00\u4e32\u6307\u4ee4\u7684\u6267\u884c\u4e2d\uff0c\u8fd8\u9700\u8981\u85c9\u7531\u5176\u4ed6\u989d\u5916\u7684\u6307\u4ee4\u6240\u63d0\u4f9b\u7684\u4fe1\u606f\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u53cd\u5355\u5f15\u53f7 \u6307\u4ee4 \u6216 $(\u6307 \u4ee4) \u82e5\u8be5\u53d8\u91cf\u4e3a\u6269\u589e\u53d8\u91cf\u5185\u5bb9\u65f6\uff0c\u5219\u53ef\u7528 \"$\u53d8\u91cf\u540d\u79f0\" \u6216 ${\u53d8\u91cf} \u7d2f\u52a0\u5185\u5bb9\uff0c\u5982\u4e0b\u6240\u793a\uff1a PATH=\"$PATH\":/home/bin \u6216 PATH=${PATH}:/home/bin \u82e5\u8be5\u53d8\u91cf\u9700\u8981\u5728\u5176\u4ed6\u5b50\u7a0b\u5e8f\u6267\u884c\uff0c\u5219\u9700\u8981\u4ee5 export \u6765\u4f7f\u53d8\u91cf\u53d8\u6210\u73af\u5883\u53d8\u91cf \u901a\u5e38\u5927\u5199\u5b57\u7b26\u4e3a\u7cfb\u7edf\u9ed8\u8ba4\u53d8\u91cf\uff0c\u81ea\u884c\u8bbe\u5b9a\u53d8\u91cf\u53ef\u4ee5\u4f7f\u7528\u5c0f\u5199\u5b57\u7b26\uff0c\u65b9\u4fbf\u5224\u65ad (\u7eaf\u7cb9\u4f9d\u7167\u4f7f\u7528\u8005\u5174\u8da3\u4e0e\u55dc\u597d) \uff1b \u53d6\u6d88\u53d8\u91cf\u7684\u65b9\u6cd5\u4e3a\u4f7f\u7528 unset \uff1a unset \u53d8\u91cf\u540d\u79f0 \u4f8b\u5982\u53d6\u6d88 myname \u7684\u8bbe\u5b9a\uff1a unset myname","title":"\u8bbe\u5b9a\u89c4\u5219"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#_3","text":"\u7528 env \u89c2\u5bdf\u73af\u5883\u53d8\u91cf\u4e0e\u5e38\u89c1\u73af\u5883\u53d8\u91cf\u8bf4\u660e HOME\uff1bHISTSIZE\uff1bMAIL\uff1bPATH\uff1bLANG\uff1bRANDOM set \u89c2\u5bdf\u6240\u6709\u53d8\u91cf \uff08\u542b\u73af\u5883\u53d8\u91cf\u4e0e\u81ea\u5b9a\u4e49\u53d8\u91cf\uff09 -\uff1a \u76ee\u524d\u6240\u6709\u7684 set \u8bbe\u5b9a\u503c PS1\uff1a(\u63d0\u793a\u5b57\u7b26\u7684\u8bbe\u5b9a) $\uff1a(\u5173\u4e8e\u672c shell \u7684 PID) ?\uff1a(\u5173\u4e8e\u4e0a\u4e2a\u6267\u884c\u6307\u4ee4\u7684\u56de\u4f20\u503c) OSTYPE, HOSTTYPE, MACHTYPE\uff1a(\u4e3b\u673a\u786c\u4ef6\u4e0e\u6838\u5fc3\u7684\u7b49\u7ea7) export\uff1a \u81ea\u5b9a\u4e49\u53d8\u91cf\u8f6c\u6210\u73af\u5883\u53d8\u91cf export \u800c\u6ca1\u6709\u63a5\u53d8\u91cf\u65f6\uff0c\u90a3\u4e48\u6b64\u65f6\u5c06\u4f1a\u6253\u5370\u6240\u6709\u7684\u300e\u73af\u5883\u53d8\u91cf\u300f\u3002","title":"\u73af\u5883\u53d8\u91cf\u7684\u663e\u793a"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#_4","text":"\u4f7f\u7528 locale \u65f6\uff0c\u7cfb\u7edf\u662f\u5217\u51fa\u76ee\u524d Linux \u4e3b\u673a\u5185\u4fdd\u6709\u7684\u8bed\u7cfb\u6587\u4ef6\uff0c \u8fd9\u4e9b\u8bed\u7cfb\u6587\u4ef6\u90fd\u653e\u7f6e\u5728\uff1a /usr/lib/locale/ \u8fd9\u4e2a\u76ee\u5f55\u4e2d\u3002","title":"\u8bed\u7cfb\u53d8\u91cf"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#_5","text":"read, array, declare read \u8bfb\u53d6\u6765\u81ea\u952e\u76d8\u8f93\u5165\u7684\u53d8\u91cf $ read [-pt] variable \u9009\u9879\u4e0e\u53c2\u6570\uff1a -p \uff1a\u540e\u9762\u53ef\u4ee5\u63a5\u63d0\u793a\u5b57\u7b26\uff01 -t \uff1a\u540e\u9762\u53ef\u4ee5\u63a5\u7b49\u5f85\u7684\u300e\u79d2\u6570\uff01\u300f\u8fd9\u4e2a\u6bd4\u8f83\u6709\u8da3\uff5e\u4e0d\u4f1a\u4e00\u76f4\u7b49\u5f85\u4f7f\u7528\u8005\u5566\uff01 ``` - declare / typeset ```sh $ declare [-aixr] variable \u9009\u9879\u4e0e\u53c2\u6570\uff1a -a \uff1a\u5c06\u540e\u9762\u540d\u4e3a variable \u7684\u53d8\u91cf\u5b9a\u4e49\u6210\u4e3a\u6570\u7ec4 (array) \u7c7b\u578b -i \uff1a\u5c06\u540e\u9762\u540d\u4e3a variable \u7684\u53d8\u91cf\u5b9a\u4e49\u6210\u4e3a\u6574\u6570\u6570\u5b57 (integer) \u7c7b\u578b -x \uff1a\u7528\u6cd5\u4e0e export \u4e00\u6837\uff0c\u5c31\u662f\u5c06\u540e\u9762\u7684 variable \u53d8\u6210\u73af\u5883\u53d8\u91cf\uff1b -r \uff1a\u5c06\u53d8\u91cf\u8bbe\u5b9a\u6210\u4e3a readonly \u7c7b\u578b\uff0c\u8be5\u53d8\u91cf\u4e0d\u53ef\u88ab\u66f4\u6539\u5185\u5bb9\uff0c\u4e5f\u4e0d\u80fd unset \u6570\u7ec4 (array) \u53d8\u91cf\u7c7b\u578b var[index]=content","title":"\u53d8\u91cf\u952e\u76d8\u8bfb\u53d6\u3001\u6570\u7ec4\u4e0e\u5ba3\u544a"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#_6","text":"\u53d8\u91cf\u5185\u5bb9\u7684\u5220\u9664\u4e0e\u53d6\u4ee3 \u53d8\u91cf\u5185\u5bb9\u7684\u5220\u9664\u4e0e\u53d6\u4ee3 \u8bf4\u660e ${\u53d8\u91cf#\u5173\u952e\u8bcd} \u82e5\u53d8\u91cf\u5185\u5bb9\u4ece\u5934\u5f00\u59cb\u7684\u6570\u636e\u7b26\u5408\u300e\u5173\u952e\u8bcd\u300f\uff0c\u5219\u5c06\u7b26\u5408\u7684\u6700\u77ed\u6570\u636e\u5220\u9664 ${\u53d8\u91cf##\u5173\u952e\u8bcd} \u82e5\u53d8\u91cf\u5185\u5bb9\u4ece\u5934\u5f00\u59cb\u7684\u6570\u636e\u7b26\u5408\u300e\u5173\u952e\u8bcd\u300f\uff0c\u5219\u5c06\u7b26\u5408\u7684\u6700\u957f\u6570\u636e\u5220\u9664 ${\u53d8\u91cf%\u5173\u952e\u8bcd} \u82e5\u53d8\u91cf\u5185\u5bb9\u4ece\u5c3e\u5411\u524d\u7684\u6570\u636e\u7b26\u5408\u300e\u5173\u952e\u8bcd\u300f\uff0c\u5219\u5c06\u7b26\u5408\u7684\u6700\u77ed\u6570\u636e\u5220\u9664 ${\u53d8\u91cf%%\u5173\u952e\u8bcd} \u82e5\u53d8\u91cf\u5185\u5bb9\u4ece\u5c3e\u5411\u524d\u7684\u6570\u636e\u7b26\u5408\u300e\u5173\u952e\u8bcd\u300f\uff0c\u5219\u5c06\u7b26\u5408\u7684\u6700\u957f\u6570\u636e\u5220\u9664 ${\u53d8\u91cf/\u65e7\u5b57\u7b26\u4e32/\u65b0\u5b57\u7b26\u4e32} \u82e5\u53d8\u91cf\u5185\u5bb9\u7b26\u5408\u300e\u65e7\u5b57\u7b26\u4e32\u300f\u5219\u300e\u7b2c\u4e00\u4e2a\u65e7\u5b57\u7b26\u4e32\u4f1a\u88ab\u65b0\u5b57\u7b26\u4e32\u53d6\u4ee3\u300f ${\u53d8\u91cf//\u65e7\u5b57\u7b26\u4e32/\u65b0\u5b57\u7b26\u4e32} \u82e5\u53d8\u91cf\u5185\u5bb9\u7b26\u5408\u300e\u65e7\u5b57\u7b26\u4e32\u300f\u5219\u300e\u5168\u90e8\u7684\u65e7\u5b57\u7b26\u4e32\u4f1a\u88ab\u65b0\u5b57\u7b26\u4e32\u53d6\u4ee3\u300f \u53d8\u91cf\u7684\u6d4b\u8bd5\u4e0e\u5185\u5bb9\u66ff\u6362 :\u7b26\u53f7 \u7684\u542b\u4e49\u662f\u5c06 str \u4e3a\u7a7a\u5b57\u7b26\u7684\u60c5\u51b5\u540c\u6837\u89c6\u4e3a\u672a\u8bbe\u5b9a\u3002 \u53d8\u91cf\u8bbe\u5b9a\u65b9\u5f0f str \u5df2\u8bbe\u5b9a str \u6ca1\u6709\u8bbe\u5b9a var=${str-expr} var=$str var=expr var=${str+expr} var=expr var= var=${str=expr} var=$str str=var=expr var=${str?expr} var=$str expr \u8f93\u51fa\u81f3 stderr","title":"\u53d8\u91cf\u5185\u5bb9\u7684\u5220\u9664\u3001\u53d6\u4ee3\u4e0e\u66ff\u6362"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#bash-shell","text":"","title":"Bash Shell \u7684\u64cd\u4f5c\u73af\u5883"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#_7","text":"","title":"\u5185\u7f6e\u547d\u4ee4"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#type","text":"$ type [-tpa] name \u9009\u9879\u4e0e\u53c2\u6570\uff1a \uff1a\u4e0d\u52a0\u4efb\u4f55\u9009\u9879\u4e0e\u53c2\u6570\u65f6\uff0ctype \u4f1a\u663e\u793a\u51fa name \u662f\u5916\u90e8\u6307\u4ee4\u8fd8\u662f bash \u5185\u5efa\u6307\u4ee4 -t \uff1a\u5f53\u52a0\u5165 -t \u53c2\u6570\u65f6\uff0ctype \u4f1a\u5c06 name \u4ee5\u5e95\u4e0b\u8fd9\u4e9b\u5b57\u773c\u663e\u793a\u51fa\u4ed6\u7684\u610f\u4e49\uff1a file \uff1a\u8868\u793a\u4e3a\u5916\u90e8\u6307\u4ee4\uff1b alias \uff1a\u8868\u793a\u8be5\u6307\u4ee4\u4e3a\u547d\u4ee4\u522b\u540d\u6240\u8bbe\u5b9a\u7684\u540d\u79f0\uff1b builtin \uff1a\u8868\u793a\u8be5\u6307\u4ee4\u4e3a bash \u5185\u5efa\u7684\u6307\u4ee4\u529f\u80fd\uff1b -p \uff1a\u5982\u679c\u540e\u9762\u63a5\u7684 name \u4e3a\u5916\u90e8\u6307\u4ee4\u65f6\uff0c\u624d\u4f1a\u663e\u793a\u5b8c\u6574\u6587\u4ef6\u540d\uff1b -a \uff1a\u4f1a\u7531 PATH \u53d8\u91cf\u5b9a\u4e49\u7684\u8def\u5f84\u4e2d\uff0c\u5c06\u6240\u6709\u542b name \u7684\u6307\u4ee4\u90fd\u5217\u51fa\u6765\uff0c\u5305\u542b alias","title":"type"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#ulimit","text":"\u4e0e\u6587\u4ef6\u7cfb\u7edf\u53ca\u7a0b\u5e8f\u7684\u9650\u5236\u5173\u7cfb\u3002 $ ulimit [-SHacdfltu] [\u914d\u989d] \u9009\u9879\u4e0e\u53c2\u6570\uff1a -H \uff1ahard limit \uff0c\u4e25\u683c\u7684\u8bbe\u5b9a\uff0c\u5fc5\u5b9a\u4e0d\u80fd\u8d85\u8fc7\u8fd9\u4e2a\u8bbe\u5b9a\u7684\u6570\u503c\uff1b -S \uff1asoft limit \uff0c\u8b66\u544a\u7684\u8bbe\u5b9a\uff0c\u53ef\u4ee5\u8d85\u8fc7\u8fd9\u4e2a\u8bbe\u5b9a\u503c\uff0c\u4f46\u662f\u82e5\u8d85\u8fc7\u5219\u6709\u8b66\u544a\u8baf\u606f\u3002 \u5728\u8bbe\u5b9a\u4e0a\uff0c\u901a\u5e38 soft \u4f1a\u6bd4 hard \u5c0f\uff1b -a \uff1a\u540e\u9762\u4e0d\u63a5\u4efb\u4f55\u9009\u9879\u4e0e\u53c2\u6570\uff0c\u53ef\u5217\u51fa\u6240\u6709\u7684\u9650\u5236\u989d\u5ea6\uff1b -c \uff1a\u5f53\u67d0\u4e9b\u7a0b\u5e8f\u53d1\u751f\u9519\u8bef\u65f6\uff0c\u7cfb\u7edf\u53ef\u80fd\u4f1a\u5c06\u8be5\u7a0b\u5e8f\u5728\u5185\u5b58\u4e2d\u7684\u4fe1\u606f\u5199\u6210\u6587\u4ef6(\u9664\u9519\u7528)\uff0c \u8fd9\u79cd\u6587\u4ef6\u5c31\u88ab\u79f0\u4e3a\u6838\u5fc3\u6587\u4ef6(core file)\u3002\u6b64\u4e3a\u9650\u5236\u6bcf\u4e2a\u6838\u5fc3\u6587\u4ef6\u7684\u6700\u5927\u5bb9\u91cf\u3002 -d \uff1a\u7a0b\u5e8f\u53ef\u4f7f\u7528\u7684\u6700\u5927\u65ad\u88c2\u5185\u5b58(segment)\u5bb9\u91cf\uff1b -l \uff1a\u53ef\u7528\u4e8e\u9501\u5b9a (lock) \u7684\u5185\u5b58\u91cf -t \uff1a\u53ef\u4f7f\u7528\u7684\u6700\u5927 CPU \u65f6\u95f4 (\u5355\u4f4d\u4e3a\u79d2) -u \uff1a\u5355\u4e00\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u7684\u6700\u5927\u7a0b\u5e8f(process)\u6570\u91cf\u3002","title":"ulimit"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#_8","text":"\u547d\u4ee4\u522b\u540d\u8bbe\u5b9a\uff1a alias, unalias \u5386\u53f2\u547d\u4ee4\uff1ahistory $ history [n] $ history [-c] $ history [-raw] histfiles \u9009\u9879\u4e0e\u53c2\u6570\uff1a n \uff1a\u6570\u5b57\uff0c\u610f\u601d\u662f\u300e\u8981\u5217\u51fa\u6700\u8fd1\u7684 n \u7b14\u547d\u4ee4\u884c\u8868\u300f\u7684\u610f\u601d\uff01 -c \uff1a\u5c06\u76ee\u524d\u7684 shell \u4e2d\u7684\u6240\u6709 history \u5185\u5bb9\u5168\u90e8\u6d88\u9664 -a \uff1a\u5c06\u76ee\u524d\u65b0\u589e\u7684 history \u6307\u4ee4\u65b0\u589e\u5165 histfiles \u4e2d\uff0c\u82e5\u6ca1\u6709\u52a0 histfiles\uff0c \u5219\u9884\u8bbe\u5199\u5165 ~/.bash_history -r \uff1a\u5c06 histfiles \u7684\u5185\u5bb9\u8bfb\u5230\u76ee\u524d\u8fd9\u4e2a shell \u7684 history \u8bb0\u5fc6\u4e2d\uff1b -w \uff1a\u5c06\u76ee\u524d\u7684 history \u8bb0\u5fc6\u5185\u5bb9\u5199\u5165 histfiles \u4e2d\uff01 $ !66 <==\u6267\u884c\u7b2c 66 \u7b14\u6307\u4ee4 $ !! <==\u6267\u884c\u4e0a\u4e00\u4e2a\u6307\u4ee4 $ !al <==\u6267\u884c\u6700\u8fd1\u4ee5 al \u4e3a\u5f00\u5934\u7684\u6307\u4ee4","title":"\u547d\u4ee4\u522b\u540d\u4e0e\u5386\u53f2\u547d\u4ee4"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#_9","text":"\u4ee5\u76f8\u5bf9/\u7edd\u5bf9\u8def\u5f84\u6267\u884c\u6307\u4ee4\uff0c\u4f8b\u5982\u300e /bin/ls \u300f\u6216\u300e ./ls \u300f\uff1b \u7531 alias \u627e\u5230\u8be5\u6307\u4ee4\u6765\u6267\u884c\uff1b \u7531 bash \u5185\u5efa\u7684 (builtin) \u6307\u4ee4\u6765\u6267\u884c\uff1b \u900f\u8fc7 $PATH \u8fd9\u4e2a\u53d8\u91cf\u7684\u987a\u5e8f\u641c\u5bfb\u5230\u7684\u7b2c\u4e00\u4e2a\u6307\u4ee4\u6765\u6267\u884c\u3002","title":"\u8def\u5f84\u4e0e\u6307\u4ee4\u641c\u5bfb\u987a\u5e8f"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#bash_1","text":"/etc/issue, /etc/motd \u4e2d\u8bb0\u5f55","title":"bash \u7684\u8fdb\u7ad9\u4e0e\u6b22\u8fce\u8baf\u606f"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#bash_2","text":"\u4e0b\u56fe\u4e3a login shell \u914d\u7f6e\u6587\u4ef6\u8bfb\u53d6\u6d41\u7a0b non-login shell \u53ea\u4f1a\u8bfb ~/.bashrc source \uff1a\u8bfb\u5165\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u7684\u6307\u4ee4 flowchart LR subgraph \u4e3b\u7ebf\u6d41\u7a0b id1[\"/etc/profile\"] id2[\"~/.bash_profile\"] id1 --> id2 --> \u5f00\u59cb\u64cd\u4f5cbash end subgraph \u914d\u7f6e\u6587\u4ef6\u7684\u8c03\u75281 direction TB id3[\"/etc/profile.d/*.sh\"] id4[\"/etc/locale.conf\"] id3 -.-> id4 end subgraph \u914d\u7f6e\u6587\u4ef6\u7684\u8c03\u75282 direction TB id5[\"~/.bashrc\"] id6[\"/etc/bashrc\"] id5 -.-> id6 end id1 -.-> \u914d\u7f6e\u6587\u4ef6\u7684\u8c03\u75281 id2 -.-> \u914d\u7f6e\u6587\u4ef6\u7684\u8c03\u75282 /etc/profile PATH\uff1a\u4f1a\u4f9d\u636e UID \u51b3\u5b9a PATH \u53d8\u91cf\u8981\u4e0d\u8981\u542b\u6709 sbin \u7684\u7cfb\u7edf\u6307\u4ee4\u76ee\u5f55\uff1b MAIL\uff1a\u4f9d\u636e\u8d26\u53f7\u8bbe\u5b9a\u597d\u4f7f\u7528\u8005\u7684 mailbox \u5230 /var/spool/mail/\u8d26\u53f7\u540d\uff1b USER\uff1a\u6839\u636e\u7528\u6237\u7684\u8d26\u53f7\u8bbe\u5b9a\u6b64\u4e00\u53d8\u91cf\u5185\u5bb9\uff1b HOSTNAME\uff1a\u4f9d\u636e\u4e3b\u673a\u7684 hostname \u6307\u4ee4\u51b3\u5b9a\u6b64\u4e00\u53d8\u91cf\u5185\u5bb9\uff1b HISTSIZE\uff1a\u5386\u53f2\u547d\u4ee4\u8bb0\u5f55\u7b14\u6570\u3002CentOS 7.x \u8bbe\u5b9a\u4e3a 1000 \uff1b umask\uff1a\u5305\u62ec root \u9ed8\u8ba4\u4e3a 022 \u800c\u4e00\u822c\u7528\u6237\u4e3a 002 \u7b49\uff01 /etc/profile.d/ * .sh /etc/profile.d/lang.sh\uff1a\u8c03\u7528 /etc/locale.conf /etc/profile.d/bash_completion.sh\uff1a\u8c03\u7528 /usr/share/bash-completion/completions/ * ~/.bash_profile\uff0c\u4e0b\u5217\u6587\u4ef6\u540c\u65f6\u5b58\u5728\u65f6\uff0c\u4ece\u4e0a\u5230\u4e0b\u8bfb\u53d6\u7b2c\u4e00\u4e2a\u627e\u5230\u7684\u6587\u4ef6 ~/.bash_profile ~/.bash_login ~/.profile /etc/bashrc\uff0c\u88ab CentOS 7.x \u4e2d\u7684 ~/.bashrc \u7684\u8c03\u7528 \u4f9d\u636e\u4e0d\u540c\u7684 UID \u89c4\u8303\u51fa umask \u7684\u503c\uff1b \u4f9d\u636e\u4e0d\u540c\u7684 UID \u89c4\u8303\u51fa\u63d0\u793a\u5b57\u7b26 (\u5c31\u662f PS1 \u53d8\u91cf)\uff1b \u547c\u53eb /etc/profile.d/ * .sh \u7684\u8bbe\u5b9a","title":"bash \u7684\u73af\u5883\u914d\u7f6e\u6587\u4ef6"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#_10","text":"/etc/man_db.conf\uff1b~/.bash_history\uff1b~/.bash_logout","title":"\u5176\u4ed6\u914d\u7f6e\u6587\u4ef6"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#_11","text":"$ stty [-a] \u9009\u9879\u4e0e\u53c2\u6570\uff1a -a \uff1a\u5c06\u76ee\u524d\u6240\u6709\u7684 stty \u53c2\u6570\u5217\u51fa\u6765\uff1b $ set [-uvCHhmBx] \u4f7f\u7528 +\u53c2\u6570 \u5c31\u80fd\u53d6\u6d88\u8bbe\u5b9a \u9009\u9879\u4e0e\u53c2\u6570\uff1a -u \uff1a\u9884\u8bbe\u4e0d\u542f\u7528\u3002\u82e5\u542f\u7528\u540e\uff0c\u5f53\u4f7f\u7528\u672a\u8bbe\u5b9a\u53d8\u91cf\u65f6\uff0c\u4f1a\u663e\u793a\u9519\u8bef\u8baf\u606f\uff1b -v \uff1a\u9884\u8bbe\u4e0d\u542f\u7528\u3002\u82e5\u542f\u7528\u540e\uff0c\u5728\u8baf\u606f\u88ab\u8f93\u51fa\u524d\uff0c\u4f1a\u5148\u663e\u793a\u8baf\u606f\u7684\u539f\u59cb\u5185\u5bb9\uff1b -x \uff1a\u9884\u8bbe\u4e0d\u542f\u7528\u3002\u82e5\u542f\u7528\u540e\uff0c\u5728\u6307\u4ee4\u88ab\u6267\u884c\u524d\uff0c\u4f1a\u663e\u793a\u6307\u4ee4\u5185\u5bb9(\u524d\u9762\u6709 ++ \u7b26\u53f7) -h \uff1a\u9884\u8bbe\u542f\u7528\u3002\u4e0e\u5386\u53f2\u547d\u4ee4\u6709\u5173\uff1b -H \uff1a\u9884\u8bbe\u542f\u7528\u3002\u4e0e\u5386\u53f2\u547d\u4ee4\u6709\u5173\uff1b -m \uff1a\u9884\u8bbe\u542f\u7528\u3002\u4e0e\u5de5\u4f5c\u7ba1\u7406\u6709\u5173\uff1b -B \uff1a\u9884\u8bbe\u542f\u7528\u3002\u4e0e\u522e\u53f7 [] \u7684\u4f5c\u7528\u6709\u5173\uff1b -C \uff1a\u9884\u8bbe\u4e0d\u542f\u7528\u3002\u82e5\u4f7f\u7528 > \u7b49\uff0c\u5219\u82e5\u6587\u4ef6\u5b58\u5728\u65f6\uff0c\u8be5\u6587\u4ef6\u4e0d\u4f1a\u88ab\u8986\u76d6\u3002 \u7ec4\u5408\u6309\u952e \u6267\u884c\u7ed3\u679c Ctrl + D \u8f93\u5165\u7ed3\u675f (EOF)\uff0c\u4f8b\u5982\u90ae\u4ef6\u7ed3\u675f\u7684\u65f6\u5019\uff1b Ctrl + M \u5c31\u662f Enter \u5566\uff01 Ctrl + S \u6682\u505c\u5c4f\u5e55\u7684\u8f93\u51fa Ctrl + Q \u6062\u590d\u5c4f\u5e55\u7684\u8f93\u51fa Ctrl + Z \u300e\u6682\u505c\u300f\u76ee\u524d\u7684\u547d\u4ee4","title":"\u7ec8\u7aef\u73af\u5883\u8bbe\u5b9a"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#_12","text":"\u6807\u51c6\u8f93\u5165 (stdin) \uff1a\u4ee3\u7801\u4e3a 0 \uff0c\u4f7f\u7528 < \u6216 << \u6807\u51c6\u8f93\u51fa (stdout)\uff1a\u4ee3\u7801\u4e3a 1 \uff0c\u4f7f\u7528 > \u6216 >> \u6807\u51c6\u9519\u8bef\u8f93\u51fa(stderr)\uff1a\u4ee3\u7801\u4e3a 2 \uff0c\u4f7f\u7528 2> \u6216 2>> 2>&1\uff0c1>&2\uff1a 1> \u548c 2> \u4e92\u76f8\u8f6c\u6362 command1 && command2 || command3 \u6761\u4ef6\u5224\u65ad\u5f0f\uff0c\u7b49\u6548\u4e8e C \u4e2d\u7684 c1 ? c2 : c3","title":"\u6570\u636e\u6d41\u91cd\u5bfc\u5411"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#_13","text":"\u7528 stdin \u53d6\u4ee3\u952e\u76d8\u7684\u8f93\u5165\u4ee5\u5efa\u7acb\u65b0\u6587\u4ef6\u7684\u7b80\u5355\u6d41\u7a0b $ cat > catfile < ~/.bashrc $ cat > catfile << \"eof\" > This is a test. > OK now stop > eof <==\u8f93\u5165\u8fd9\u5173\u952e\u8bcd\uff0c\u7acb\u523b\u5c31\u7ed3\u675f\u800c\u4e0d\u9700\u8981\u8f93\u5165 [ctrl]+d","title":"&lt; \u4e0e &lt;&lt;"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#_14","text":"\u4ec5\u4f1a\u5904\u7406 standard output\uff0c\u5bf9\u4e8e standard error output \u4f1a\u4e88\u4ee5\u5ffd\u7565 \u5fc5\u987b\u8981\u80fd\u591f\u63a5\u53d7\u6765\u81ea\u524d\u4e00\u4e2a\u6307\u4ee4\u7684\u6570\u636e\u6210\u4e3a standard input \u7ee7\u7eed\u5904\u7406\u624d\u884c\uff0c\u4f8b\u5982 ls, cp, mv \u7b49\u5c31\u4e0d\u662f\u7ba1\u9053\u547d\u4ee4","title":"\u7ba1\u9053\u547d\u4ee4"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#_15","text":"cut $ cut -d'\u5206\u9694\u5b57\u7b26' -f fields <==\u7528\u4e8e\u6709\u7279\u5b9a\u5206\u9694\u5b57\u7b26 $ cut -c \u5b57\u7b26\u533a\u95f4 <==\u7528\u4e8e\u6392\u5217\u6574\u9f50\u7684\u8baf\u606f \u9009\u9879\u4e0e\u53c2\u6570\uff1a -d \uff1a\u540e\u9762\u63a5\u5206\u9694\u5b57\u7b26\u3002\u4e0e -f \u4e00\u8d77\u4f7f\u7528\uff1b -f \uff1a\u4f9d\u636e -d \u7684\u5206\u9694\u5b57\u7b26\u5c06\u4e00\u6bb5\u8baf\u606f\u5206\u533a\u6210\u4e3a\u6570\u6bb5\uff0c\u7528 -f \u53d6\u51fa\u7b2c\u51e0\u6bb5\u7684\u610f\u601d\uff1b -c \uff1a\u4ee5\u5b57\u7b26 (characters) \u7684\u5355\u4f4d\u53d6\u51fa\u56fa\u5b9a\u5b57\u7b26\u533a\u95f4\uff1b grep $ grep [-acinv] [--color=auto] '\u641c\u5bfb\u5b57\u7b26\u4e32' filename \u9009\u9879\u4e0e\u53c2\u6570\uff1a -a \uff1a\u5c06 binary \u6587\u4ef6\u4ee5 text \u6587\u4ef6\u7684\u65b9\u5f0f\u641c\u5bfb\u6570\u636e -c \uff1a\u8ba1\u7b97\u627e\u5230 '\u641c\u5bfb\u5b57\u7b26\u4e32' \u7684\u6b21\u6570 -i \uff1a\u5ffd\u7565\u5927\u5c0f\u5199\u7684\u4e0d\u540c\uff0c\u6240\u4ee5\u5927\u5c0f\u5199\u89c6\u4e3a\u76f8\u540c -n \uff1a\u987a\u4fbf\u8f93\u51fa\u884c\u53f7 -v \uff1a\u53cd\u5411\u9009\u62e9\uff0c\u4ea6\u5373\u663e\u793a\u51fa\u6ca1\u6709 '\u641c\u5bfb\u5b57\u7b26\u4e32' \u5185\u5bb9\u7684\u90a3\u4e00\u884c\uff01 --color=auto \uff1a\u53ef\u4ee5\u5c06\u627e\u5230\u7684\u5173\u952e\u8bcd\u90e8\u5206\u52a0\u4e0a\u989c\u8272\u7684\u663e\u793a\u5594\uff01","title":"\u9009\u53d6\u547d\u4ee4"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#_16","text":"sort $ sort [-fbMnrtuk] [file or stdin] \u9009\u9879\u4e0e\u53c2\u6570\uff1a -f \uff1a\u5ffd\u7565\u5927\u5c0f\u5199\u7684\u5dee\u5f02\uff0c\u4f8b\u5982 A \u4e0e a \u89c6\u4e3a\u7f16\u7801\u76f8\u540c\uff1b -b \uff1a\u5ffd\u7565\u6700\u524d\u9762\u7684\u7a7a\u683c\u7b26\u90e8\u5206\uff1b -M \uff1a\u4ee5\u6708\u4efd\u7684\u540d\u5b57\u6765\u6392\u5e8f\uff0c\u4f8b\u5982 JAN, DEC \u7b49\u7b49\u7684\u6392\u5e8f\u65b9\u6cd5\uff1b -n \uff1a\u4f7f\u7528\u300e\u7eaf\u6570\u5b57\u300f\u8fdb\u884c\u6392\u5e8f(\u9ed8\u8ba4\u662f\u4ee5\u6587\u5b57\u578b\u6001\u6765\u6392\u5e8f\u7684)\uff1b -r \uff1a\u53cd\u5411\u6392\u5e8f\uff1b -u \uff1a\u5c31\u662f uniq \uff0c\u76f8\u540c\u7684\u6570\u636e\u4e2d\uff0c\u4ec5\u51fa\u73b0\u4e00\u884c\u4ee3\u8868\uff1b -t \uff1a\u5206\u9694\u7b26\uff0c\u9884\u8bbe\u662f\u7528 [tab] \u952e\u6765\u5206\u9694\uff1b -k \uff1a\u4ee5\u90a3\u4e2a\u533a\u95f4 (field) \u6765\u8fdb\u884c\u6392\u5e8f\u7684\u610f\u601d uniq uniq [-ic] \u9009\u9879\u4e0e\u53c2\u6570\uff1a -i \uff1a\u5ffd\u7565\u5927\u5c0f\u5199\u5b57\u7b26\u7684\u4e0d\u540c\uff1b -c \uff1a\u8fdb\u884c\u8ba1\u6570 wc $ wc [-lwm] \u9009\u9879\u4e0e\u53c2\u6570\uff1a -l \uff1a\u4ec5\u5217\u51fa\u884c\uff1b -w \uff1a\u4ec5\u5217\u51fa\u591a\u5c11\u5b57(\u82f1\u6587\u5355\u5b57)\uff1b -m \uff1a\u591a\u5c11\u5b57\u7b26\uff1b","title":"\u6392\u5e8f\u547d\u4ee4"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#tee","text":"$ tee [-a] file \u9009\u9879\u4e0e\u53c2\u6570\uff1a -a \uff1a\u4ee5\u7d2f\u52a0 (append) \u7684\u65b9\u5f0f\uff0c\u5c06\u6570\u636e\u52a0\u5165 file \u5f53\u4e2d\uff01","title":"\u53cc\u5411\u7ba1\u9053\uff1atee"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#_17","text":"tr \u53ef\u4ee5\u7528\u6765\u5220\u9664\u4e00\u6bb5\u8baf\u606f\u5f53\u4e2d\u7684\u6587\u5b57\uff0c\u6216\u8005\u662f\u8fdb\u884c\u6587\u5b57\u8baf\u606f\u7684\u66ff\u6362\uff01 $ tr [-ds] SET1 ... \u9009\u9879\u4e0e\u53c2\u6570\uff1a -d \uff1a\u5220\u9664\u8baf\u606f\u5f53\u4e2d\u7684 SET1 \u8fd9\u4e2a\u5b57\u7b26\u4e32\uff1b -s \uff1a\u53d6\u4ee3\u6389\u91cd\u590d\u7684\u5b57\u7b26\uff01 join \u5904\u7406\u300e\u4e24\u4e2a\u6587\u4ef6\u5f53\u4e2d\uff0c\u6709 \"\u76f8\u540c\u6570\u636e\" \u7684\u90a3\u4e00\u884c\uff0c\u624d\u5c06\u4ed6\u52a0\u5728\u4e00\u8d77\u300f $ join [-ti12] file1 file2 \u9009\u9879\u4e0e\u53c2\u6570\uff1a -t \uff1ajoin \u9ed8\u8ba4\u4ee5\u7a7a\u683c\u7b26\u5206\u9694\u6570\u636e\uff0c\u5e76\u4e14\u6bd4\u5bf9\u300e\u7b2c\u4e00\u4e2a\u5b57\u6bb5\u300f\u7684\u6570\u636e\uff0c \u5982\u679c\u4e24\u4e2a\u6587\u4ef6\u76f8\u540c\uff0c\u5219\u5c06\u4e24\u7b14\u6570\u636e\u8054\u6210\u4e00\u884c\uff0c\u4e14\u7b2c\u4e00\u4e2a\u5b57\u6bb5\u653e\u5728\u7b2c\u4e00\u4e2a\uff01 -i \uff1a\u5ffd\u7565\u5927\u5c0f\u5199\u7684\u5dee\u5f02\uff1b -1 \uff1a\u8fd9\u4e2a\u662f\u6570\u5b57\u7684 1 \uff0c\u4ee3\u8868\u300e\u7b2c\u4e00\u4e2a\u6587\u4ef6\u8981\u7528\u90a3\u4e2a\u5b57\u6bb5\u6765\u5206\u6790\u300f\u7684\u610f\u601d\uff1b -2 \uff1a\u4ee3\u8868\u300e\u7b2c\u4e8c\u4e2a\u6587\u4ef6\u8981\u7528\u90a3\u4e2a\u5b57\u6bb5\u6765\u5206\u6790\u300f\u7684\u610f\u601d\u3002 paste $ paste [-d] file1 file2 \u9009\u9879\u4e0e\u53c2\u6570\uff1a -d \uff1a\u540e\u9762\u53ef\u4ee5\u63a5\u5206\u9694\u5b57\u7b26\u3002\u9884\u8bbe\u662f\u4ee5 [tab] \u6765\u5206\u9694\u7684\uff01 - \uff1a\u5982\u679c file \u90e8\u5206\u5199\u6210 - \uff0c\u8868\u793a\u6765\u81ea standard input \u7684\u8d44\u6599\u7684\u610f\u601d expand $ expand [-t] file \u9009\u9879\u4e0e\u53c2\u6570\uff1a -t \uff1a\u540e\u9762\u53ef\u4ee5\u63a5\u6570\u5b57\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u4e00\u4e2a tab \u6309\u952e\u53ef\u4ee5\u7528 8 \u4e2a\u7a7a\u683c\u952e\u53d6\u4ee3\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u81ea\u884c\u5b9a\u4e49\u4e00\u4e2a [tab] \u6309\u952e\u4ee3\u8868\u591a\u5c11\u4e2a\u5b57\u7b26\u5462\uff01","title":"\u5b57\u7b26\u8f6c\u6362\u547d\u4ee4"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#split","text":"$ split [-bl] file PREFIX \u9009\u9879\u4e0e\u53c2\u6570\uff1a -b \uff1a\u540e\u9762\u53ef\u63a5\u6b32\u5206\u533a\u6210\u7684\u6587\u4ef6\u5927\u5c0f\uff0c\u53ef\u52a0\u5355\u4f4d\uff0c\u4f8b\u5982 b, k, m \u7b49\uff1b -l \uff1a\u4ee5\u884c\u6570\u6765\u8fdb\u884c\u5206\u533a\u3002 PREFIX \uff1a\u4ee3\u8868\u524d\u5bfc\u7b26\u7684\u610f\u601d\uff0c\u53ef\u4f5c\u4e3a\u5206\u533a\u6587\u4ef6\u7684\u524d\u5bfc\u6587\u5b57\u3002","title":"\u5206\u533a\u547d\u4ee4\uff1a split"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#xargs","text":"$ xargs [-0epn] command \u9009\u9879\u4e0e\u53c2\u6570\uff1a -0 \uff1a\u5982\u679c\u8f93\u5165\u7684 stdin \u542b\u6709\u7279\u6b8a\u5b57\u7b26\uff0c\u4f8b\u5982 `, \\, \u7a7a\u683c\u952e\u7b49\u7b49\u5b57\u7b26\u65f6\uff0c\u8fd9\u4e2a -0 \u53c2\u6570 \u53ef\u4ee5\u5c06\u4ed6\u8fd8\u539f\u6210\u4e00\u822c\u5b57\u7b26\u3002\u8fd9\u4e2a\u53c2\u6570\u53ef\u4ee5\u7528\u4e8e\u7279\u6b8a\u72b6\u6001\u5594\uff01 -e \uff1a\u8fd9\u4e2a\u662f EOF (end of file) \u7684\u610f\u601d\u3002\u540e\u9762\u53ef\u4ee5\u63a5\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5f53 xargs \u5206\u6790\u5230 \u8fd9\u4e2a\u5b57\u7b26\u4e32\u65f6\uff0c \u5c31\u4f1a\u505c\u6b62\u7ee7\u7eed\u5de5\u4f5c\uff01 -p \uff1a\u5728\u6267\u884c\u6bcf\u4e2a\u6307\u4ee4\u7684 argument \u65f6\uff0c\u90fd\u4f1a\u8be2\u95ee\u4f7f\u7528\u8005\u7684\u610f\u601d\uff1b -n \uff1a\u540e\u9762\u63a5\u6b21\u6570\uff0c\u6bcf\u6b21 command \u6307\u4ee4\u6267\u884c\u65f6\uff0c\u8981\u4f7f\u7528\u51e0\u4e2a\u53c2\u6570\u7684\u610f\u601d\u3002 \u5f53 xargs \u540e \u9762\u6ca1\u6709\u63a5\u4efb\u4f55\u7684\u6307\u4ee4\u65f6\uff0c\u9ed8\u8ba4\u662f\u4ee5 echo \u6765\u8fdb\u884c\u8f93\u51fa\u5594\uff01 \u5c06 /etc/passwd \u5185\u7684\u7b2c\u4e00\u680f\u53d6\u51fa\uff0c\u4ec5\u53d6\u4e09\u884c\uff0c\u4f7f\u7528 id \u8fd9\u4e2a\u6307\u4ee4\u5c06\u6bcf\u4e2a\u8d26\u53f7\u5185\u5bb9\u79c0\u51fa\u6765 $ id root uid=0(root) gid=0(root) groups=0(root) # \u8fd9\u4e2a id \u6307\u4ee4\u53ef\u4ee5\u67e5\u8be2\u7528\u6237\u7684 UID/GID \u7b49\u4fe1\u606f $ cut -d ':' -f 1 /etc/passwd | head -n 3 | xargs -n 1 id uid=0(root) gid=0(root) groups=0(root) uid=1(bin) gid=1(bin) groups=1(bin) uid=2(daemon) gid=2(daemon) groups=2(daemon) # \u900f\u8fc7 -n \u6765\u5904\u7406\uff0c\u4e00\u6b21\u7ed9\u4e88\u4e00\u4e2a\u53c2\u6570\uff0c\u56e0\u6b64\u4e0a\u8ff0\u7684\u7ed3\u679c\u5c31 OK \u6b63\u5e38\u7684\u663e\u793a\u5570\uff01 \u5f88\u591a\u6307\u4ee4\u5176\u5b9e\u5e76\u4e0d\u652f\u6301\u7ba1\u9053\u547d\u4ee4\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u900f\u8fc7 xargs \u6765\u63d0\u4f9b\u8be5\u6307\u4ee4\u5f15\u7528 standard input \u4e4b\u7528\uff01 \u627e\u51fa /usr/sbin \u5e95\u4e0b\u5177\u6709\u7279\u6b8a\u6743\u9650\u7684\u6863\u540d\uff0c\u5e76\u4f7f\u7528 ls -l \u5217\u51fa\u8be6\u7ec6\u5c5e\u6027 $ find /usr/sbin -perm /7000 | xargs ls -l","title":"\u53c2\u6570\u4ee3\u6362\uff1a xargs"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#-","text":"stdin \u4e0e stdout \u53ef\u4ee5\u5229\u7528\u51cf\u53f7 \"-\" \u6765\u66ff\u4ee3 $ mkdir /tmp/homeback $ tar -cvf - /home | tar -xvf - -C /tmp/homeback","title":"\u51cf\u53f7 - \u7684\u7528\u9014"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#script","text":"\u826f\u597d\u7684 script \u64b0\u5199\u4e60\u60ef\uff0c\u5728\u6bcf\u4e2a script \u7684\u6587\u4ef6\u5934\u5904\u8bb0\u5f55\u597d\uff1a \u7b2c\u4e00\u884c #!/bin/bash script \u7684\u529f\u80fd\uff1b script \u7684\u7248\u672c\u4fe1\u606f\uff1b script \u7684\u4f5c\u8005\u4e0e\u8054\u7edc\u65b9\u5f0f\uff1b script \u7684\u7248\u6743\u5ba3\u544a\u65b9\u5f0f\uff1b script \u7684 History (\u5386\u53f2\u7eaa\u5f55)\uff1b script \u5185\u8f83\u7279\u6b8a\u7684\u6307\u4ee4\uff0c\u4f7f\u7528\u300e\u7edd\u5bf9\u8def\u5f84\u300f\u7684\u65b9\u5f0f\u6765\u4e0b\u8fbe\uff1b script \u8fd0\u4f5c\u65f6\u9700\u8981\u7684\u73af\u5883\u53d8\u91cf\u9884\u5148\u5ba3\u544a\u4e0e\u8bbe\u5b9a\u3002","title":"script"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#script_1","text":"\u76f4\u63a5\u6307\u4ee4\u4e0b\u8fbe\uff1a shell.sh \u6587\u4ef6\u5fc5\u987b\u8981\u5177\u5907\u53ef\u8bfb\u4e0e\u53ef\u6267\u884c (rx) \u7684\u6743\u9650\uff0c\u7136\u540e\uff1a \u7edd\u5bf9\u8def\u5f84\uff1a\u4f7f\u7528 /home/dmtsai/shell.sh \u6765\u4e0b\u8fbe\u6307\u4ee4\uff1b \u76f8\u5bf9\u8def\u5f84\uff1a\u5047\u8bbe\u5de5\u4f5c\u76ee\u5f55\u5728 /home/dmtsai/ \uff0c\u5219\u4f7f\u7528 ./shell.sh \u6765\u6267 \u53d8\u91cf\u300ePATH\u300f\u529f\u80fd\uff1a\u5c06 shell.sh \u653e\u5728 PATH \u6307\u5b9a\u7684\u76ee\u5f55\u5185\uff0c\u4f8b\u5982\uff1a ~/bin/ \u4ee5 bash \u7a0b\u5e8f\u6765\u6267\u884c\uff1a\u900f\u8fc7\u300e bash shell.sh \u300f\u6216\u300e sh shell.sh \u300f\u6765\u6267\u884c \u6267\u884c\u65b9\u5f0f\u5dee\u5f02\uff1a - \u4e0a\u8ff0\u65b9\u6cd5\u6267\u884c script\uff0c\u8be5 script \u90fd\u4f1a\u4f7f\u7528\u4e00\u4e2a\u65b0\u7684 bash \u73af\u5883\u6765\u6267\u884c\u811a\u672c\u5185\u7684\u6307\u4ee4 - source \u6765\u6267\u884c\u811a\u672c\uff1a\u5728\u7236\u7a0b\u5e8f\u4e2d\u6267\u884c","title":"\u6267\u884c script"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#_18","text":"declare -i total=${firstnu}*${secnu} var=$((\u8fd0\u7b97\u5185\u5bb9)) \u900f\u8fc7 bc","title":"\u6570\u503c\u8fd0\u7b97"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#_19","text":"","title":"\u5224\u65ad\u5f0f"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#test","text":"\u5173\u4e8e\u67d0\u4e2a\u6863\u540d\u7684\u300e\u6587\u4ef6\u7c7b\u578b\u300f\u5224\u65ad\uff0c\u5982 test -e filename \u8868\u793a\u5b58\u5728\u5426 \u6d4b\u8bd5\u7684\u6807\u5fd7 \u4ee3\u8868\u610f\u4e49 -e \u8be5\u300e\u6863\u540d\u300f\u662f\u5426\u5b58\u5728\uff1f(\u5e38\u7528) -f \u8be5\u300e\u6863\u540d\u300f\u662f\u5426\u5b58\u5728\u4e14\u4e3a\u6587\u4ef6(file)\uff1f(\u5e38\u7528) -d \u8be5\u300e\u6587\u4ef6\u540d\u300f\u662f\u5426\u5b58\u5728\u4e14\u4e3a\u76ee\u5f55(directory)\uff1f(\u5e38\u7528) -b \u8be5\u300e\u6863\u540d\u300f\u662f\u5426\u5b58\u5728\u4e14\u4e3a\u4e00\u4e2a block device \u88c5\u7f6e\uff1f -c \u8be5\u300e\u6863\u540d\u300f\u662f\u5426\u5b58\u5728\u4e14\u4e3a\u4e00\u4e2a character device \u88c5\u7f6e -S \u8be5\u300e\u6863\u540d\u300f\u662f\u5426\u5b58\u5728\u4e14\u4e3a\u4e00\u4e2a Socket \u6587\u4ef6\uff1f -p \u8be5\u300e\u6863\u540d\u300f\u662f\u5426\u5b58\u5728\u4e14\u4e3a\u4e00\u4e2a FIFO (pipe) \u6587\u4ef6 -L \u8be5\u300e\u6863\u540d\u300f\u662f\u5426\u5b58\u5728\u4e14\u4e3a\u4e00\u4e2a\u94fe\u63a5\u6587\u4ef6\uff1f \u5173\u4e8e\u6587\u4ef6\u7684\u6743\u9650\u4fa6\u6d4b\uff0c\u5982 test -r filename \u8868\u793a\u53ef\u8bfb\u5426 (\u4f46 root \u6743\u9650\u5e38\u6709\u4f8b\u5916) \u6d4b\u8bd5\u7684\u6807\u5fd7 \u4ee3\u8868\u610f\u4e49 -r \u4fa6\u6d4b\u8be5\u6863\u540d\u662f\u5426\u5b58\u5728\u4e14\u5177\u6709\u300e\u53ef\u8bfb\u300f\u7684\u6743\u9650\uff1f -w \u4fa6\u6d4b\u8be5\u6863\u540d\u662f\u5426\u5b58\u5728\u4e14\u5177\u6709\u300e\u53ef\u5199\u300f\u7684\u6743\u9650\uff1f -x \u4fa6\u6d4b\u8be5\u6863\u540d\u662f\u5426\u5b58\u5728\u4e14\u5177\u6709\u300e\u53ef\u6267\u884c\u300f\u7684\u6743\u9650\uff1f -u \u4fa6\u6d4b\u8be5\u6587\u4ef6\u540d\u662f\u5426\u5b58\u5728\u4e14\u5177\u6709\u300eSUID\u300f\u7684\u5c5e\u6027\uff1f -g \u4fa6\u6d4b\u8be5\u6587\u4ef6\u540d\u662f\u5426\u5b58\u5728\u4e14\u5177\u6709\u300eSGID\u300f\u7684\u5c5e\u6027\uff1f -k \u4fa6\u6d4b\u8be5\u6587\u4ef6\u540d\u662f\u5426\u5b58\u5728\u4e14\u5177\u6709\u300eSticky bit\u300f\u7684\u5c5e\u6027\uff1f -s \u4fa6\u6d4b\u8be5\u6863\u540d\u662f\u5426\u5b58\u5728\u4e14\u4e3a\u300e\u975e\u7a7a\u767d\u6587\u4ef6\u300f\uff1f \u4e24\u4e2a\u6587\u4ef6\u4e4b\u95f4\u7684\u6bd4\u8f83\uff0c\u5982\uff1a test file1 -nt file2 nt\uff1bot\uff1bef \u5173\u4e8e\u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u7684\u5224\u5b9a\uff0c\u4f8b\u5982 test n1 -eq n2 eq\uff1bne\uff1bgt\uff1blt\uff1bge\uff1ble \u5224\u5b9a\u5b57\u7b26\u4e32\u7684\u6570\u636e test -z string\uff1a\u5224\u5b9a\u5b57\u7b26\u4e32\u662f\u5426\u4e3a 0 \uff1f\u82e5 string \u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5219\u4e3a true test -n string\uff1a\u5224\u5b9a\u5b57\u7b26\u4e32\u662f\u5426\u975e\u4e3a 0 \uff1f\u82e5 string \u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5219\u4e3a false\u3002 \u6ce8\uff1a -n \u4ea6\u53ef\u7701\u7565 test str1 == str2\uff1a\u5224\u5b9a str1 \u662f\u5426\u7b49\u4e8e str2 \uff0c\u82e5\u76f8\u7b49\uff0c\u5219\u56de\u4f20 true test str1 != str2\uff1a\u5224\u5b9a str1 \u662f\u5426\u4e0d\u7b49\u4e8e str2 \uff0c\u82e5\u76f8\u7b49\uff0c\u5219\u56de\u4f20 false \u591a\u91cd\u6761\u4ef6\u5224\u5b9a\uff0c\u4f8b\u5982\uff1a test -r filename -a -x filename a\uff1bo\uff1b!","title":"test \u6307\u4ee4\u7684\u6d4b\u8bd5\u529f"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#_20","text":"\u5728\u4e2d\u62ec\u53f7 [] \u5185\u7684\u6bcf\u4e2a\u7ec4\u4ef6\u90fd\u9700\u8981\u6709\u7a7a\u683c\u952e\u6765\u5206\u9694\uff1b \u5728\u4e2d\u62ec\u53f7\u5185\u7684\u53d8\u6570\uff0c\u6700\u597d\u90fd\u4ee5\u53cc\u5f15\u53f7\u62ec\u53f7\u8d77\u6765\uff1b \u5728\u4e2d\u62ec\u53f7\u5185\u7684\u5e38\u6570\uff0c\u6700\u597d\u90fd\u4ee5\u5355\u6216\u53cc\u5f15\u53f7\u62ec\u53f7\u8d77\u6765\u3002","title":"\u5229\u7528\u5224\u65ad\u7b26\u53f7 [ ]"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#0-1","text":"$# \uff1a\u4ee3\u8868\u540e\u63a5\u7684\u53c2\u6570\u300e\u4e2a\u6570\u300f\uff1b - @ \uff1a\u4ee3\u8868\u300e \" @ \uff1a\u4ee3\u8868\u300e \" 1\" \" 2\" \" 2\" \" 3\" \"$4\" \u300f\u4e4b\u610f\uff0c\u6bcf\u4e2a\u53d8\u91cf\u662f\u72ec\u7acb\u7684(\u7528\u53cc\u5f15\u53f7\u62ec\u8d77\u6765)\uff1b * \uff1a\u4ee3\u8868\u300e \" * \uff1a\u4ee3\u8868\u300e \" 1c 2c 2c 3c$4\" \u300f\uff0c\u5176\u4e2d c \u4e3a\u5206\u9694\u5b57\u7b26\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\u683c\u952e\u3002 shift\uff1a\u9020\u6210\u53c2\u6570\u53d8\u91cf\u53f7\u7801\u504f\u79fb","title":"\u7684\u9ed8\u8ba4\u53d8\u6570($0, $1...)"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#_21","text":"# \u591a\u4e2a\u6761\u4ef6\u5224\u65ad (if ... elif ... elif ... else) \u5206\u591a\u79cd\u4e0d\u540c\u60c5\u51b5\u6267\u884c if [ \u6761\u4ef6\u5224\u65ad\u5f0f\u4e00 ]; then \u5f53\u6761\u4ef6\u5224\u65ad\u5f0f\u4e00\u6210\u7acb\u65f6\uff0c\u53ef\u4ee5\u8fdb\u884c\u7684\u6307\u4ee4\u5de5\u4f5c\u5185\u5bb9\uff1b elif [ \u6761\u4ef6\u5224\u65ad\u5f0f\u4e8c ]; then \u5f53\u6761\u4ef6\u5224\u65ad\u5f0f\u4e8c\u6210\u7acb\u65f6\uff0c\u53ef\u4ee5\u8fdb\u884c\u7684\u6307\u4ee4\u5de5\u4f5c\u5185\u5bb9\uff1b else \u5f53\u6761\u4ef6\u5224\u65ad\u5f0f\u4e00\u4e0e\u4e8c\u5747\u4e0d\u6210\u7acb\u65f6\uff0c\u53ef\u4ee5\u8fdb\u884c\u7684\u6307\u4ee4\u5de5\u4f5c\u5185\u5bb9\uff1b fi case $\u53d8\u91cf\u540d\u79f0 in <==\u5173\u952e\u8bcd\u4e3a case \uff0c\u8fd8\u6709\u53d8\u6570\u524d\u6709\u94b1\u5b57\u53f7 \"\u7b2c\u4e00\u4e2a\u53d8\u91cf\u5185\u5bb9\") <==\u6bcf\u4e2a\u53d8\u91cf\u5185\u5bb9\u5efa\u8bae\u7528\u53cc\u5f15\u53f7\u62ec\u8d77\u6765\uff0c\u5173\u952e\u8bcd\u5219\u4e3a\u5c0f\u62ec\u53f7 ) \u7a0b\u5e8f\u6bb5 ;; \"\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u5185\u5bb9\") \u7a0b\u5e8f\u6bb5 ;; *) <==\u6700\u540e\u4e00\u4e2a\u53d8\u91cf\u5185\u5bb9\u90fd\u4f1a\u7528 * \u6765\u4ee3\u8868\u6240\u6709\u5176\u4ed6\u503c \u4e0d\u5305\u542b\u7b2c\u4e00\u4e2a\u53d8\u91cf\u5185\u5bb9\u4e0e\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u5185\u5bb9\u7684\u5176\u4ed6\u7a0b\u5e8f\u6267\u884c\u6bb5 exit 1 ;; esac <==\u6700\u7ec8\u7684 case \u7ed3\u5c3e\uff01\u300e\u53cd\u8fc7\u6765\u5199\u300f\u601d\u8003\u4e00\u4e0b\uff01","title":"\u6761\u4ef6\u5224\u65ad\u5f0f"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#_22","text":"function fname() { \u7a0b\u5e8f\u6bb5 }","title":"\u51fd\u6570"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#loop","text":"","title":"\u5faa\u73af (loop)"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#_23","text":"while [ condition ] <==\u4e2d\u62ec\u53f7\u5185\u7684\u72b6\u6001\u5c31\u662f\u5224\u65ad\u5f0f do <==do \u662f\u5faa\u73af\u7684\u5f00\u59cb\uff01 \u7a0b\u5e8f\u6bb5\u843d done <==done \u662f\u5faa\u73af\u7684\u7ed3\u675f until [ condition ] do \u7a0b\u5e8f\u6bb5\u843d done","title":"\u4e0d\u5b9a\u5faa\u73af"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#_24","text":"for var in con1 con2 con3 ... do \u7a0b\u5e8f\u6bb5 done for (( \u521d\u59cb\u503c; \u9650\u5236\u503c; \u6267\u884c\u6b65\u9636 )) do \u7a0b\u5e8f\u6bb5 done","title":"\u56fa\u5b9a\u5faa\u73af"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/bash/#debug","text":"$ sh [-nvx] scripts.sh \u9009\u9879\u4e0e\u53c2\u6570\uff1a -n \uff1a\u4e0d\u8981\u6267\u884c script\uff0c\u4ec5\u67e5\u8be2\u8bed\u6cd5\u7684\u95ee\u9898\uff1b -v \uff1a\u518d\u6267\u884c sccript \u524d\uff0c\u5148\u5c06 scripts \u7684\u5185\u5bb9\u8f93\u51fa\u5230\u5c4f\u5e55\u4e0a\uff1b -x \uff1a\u5c06\u4f7f\u7528\u5230\u7684 script \u5185\u5bb9\u663e\u793a\u5230\u5c4f\u5e55\u4e0a\uff0c\u8fd9\u662f\u5f88\u6709\u7528\u7684\u53c2\u6570\uff01","title":"\u8ffd\u8e2a\u4e0e debug"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/latex/","text":"latex \u914d\u7f6e \u5b89\u88c5texlive \u6e05\u534e\u5927\u5b66\u5f00\u6e90\u8f6f\u4ef6\u955c\u50cf\u7ad9 sudo apt-get install perl-tk sudo mount -o loop texlive* /mnt cd /mnt ./install-tl -gui echo \"# TeXLive2019-path export PATH=/usr/local/texlive/2019/bin/x86_64-linux:$PATH export MANPATH=/usr/local/texlive/2019/texmf-dist/doc/man:$MANPATH export INFOPATH=/usr/local/texlive/2019/texmf-dist/doc/info:$INFOPATH\" >> ~/.bashrc cd .. sudo umount /mnt \u914d\u7f6evscode \u5b89\u88c5LaTeX Workshop\u63d2\u4ef6 { \"latex-workshop.latex.recipes\": [{ \"name\": \"xelatex\", \"tools\": [ \"xelatex\" ] }, { \"name\": \"latexmk\", \"tools\": [ \"latexmk\" ] }, { \"name\": \"pdflatex -> bibtex -> pdflatex*2\", \"tools\": [ \"pdflatex\", \"bibtex\", \"pdflatex\", \"pdflatex\" ] } ], \"latex-workshop.latex.tools\": [{ \"name\": \"latexmk\", \"command\": \"latexmk\", \"args\": [ \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"-pdf\", \"%DOC%\" ] }, { \"name\": \"xelatex\", \"command\": \"xelatex\", \"args\": [ \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"%DOC%\" ] }, { \"name\": \"pdflatex\", \"command\": \"pdflatex\", \"args\": [ \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"%DOC%\" ] }, { \"name\": \"bibtex\", \"command\": \"bibtex\", \"args\": [ \"%DOCFILE%\" ] }], \"latex-workshop.view.pdf.viewer\": \"tab\", \"latex-workshop.latex.clean.fileTypes\": [ \"*.aux\", \"*.bbl\", \"*.blg\", \"*.idx\", \"*.ind\", \"*.lof\", \"*.lot\", \"*.out\", \"*.toc\", \"*.acn\", \"*.acr\", \"*.alg\", \"*.glg\", \"*.glo\", \"*.gls\", \"*.ist\", \"*.fls\", \"*.log\", \"*.fdb_latexmk\" ], } \u5b57\u4f53 \u4e2d\u6587\u53ef\u76f4\u63a5\u4f7f\u7528\uff0c\u9ed8\u8ba4\u662ffandol\uff0c\u4f46\u4f1a\u6709wannring\uff0c\u53ef\u4ee5\u5ffd\u7565\u3002 \u5b9e\u5728\u4e0d\u60f3\u6709wannring\uff0c\u53ef\u5b89\u88c5windows\u5b57\u4f53\uff0c \u53c2\u80031 \uff0c\u518d\u4f7f\u7528: \\documentclass[fontset=windows]{ctexart}","title":"latex \u914d\u7f6e"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/latex/#latex","text":"","title":"latex \u914d\u7f6e"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/latex/#texlive","text":"\u6e05\u534e\u5927\u5b66\u5f00\u6e90\u8f6f\u4ef6\u955c\u50cf\u7ad9 sudo apt-get install perl-tk sudo mount -o loop texlive* /mnt cd /mnt ./install-tl -gui echo \"# TeXLive2019-path export PATH=/usr/local/texlive/2019/bin/x86_64-linux:$PATH export MANPATH=/usr/local/texlive/2019/texmf-dist/doc/man:$MANPATH export INFOPATH=/usr/local/texlive/2019/texmf-dist/doc/info:$INFOPATH\" >> ~/.bashrc cd .. sudo umount /mnt","title":"\u5b89\u88c5texlive"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/latex/#vscode","text":"\u5b89\u88c5LaTeX Workshop\u63d2\u4ef6 { \"latex-workshop.latex.recipes\": [{ \"name\": \"xelatex\", \"tools\": [ \"xelatex\" ] }, { \"name\": \"latexmk\", \"tools\": [ \"latexmk\" ] }, { \"name\": \"pdflatex -> bibtex -> pdflatex*2\", \"tools\": [ \"pdflatex\", \"bibtex\", \"pdflatex\", \"pdflatex\" ] } ], \"latex-workshop.latex.tools\": [{ \"name\": \"latexmk\", \"command\": \"latexmk\", \"args\": [ \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"-pdf\", \"%DOC%\" ] }, { \"name\": \"xelatex\", \"command\": \"xelatex\", \"args\": [ \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"%DOC%\" ] }, { \"name\": \"pdflatex\", \"command\": \"pdflatex\", \"args\": [ \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"%DOC%\" ] }, { \"name\": \"bibtex\", \"command\": \"bibtex\", \"args\": [ \"%DOCFILE%\" ] }], \"latex-workshop.view.pdf.viewer\": \"tab\", \"latex-workshop.latex.clean.fileTypes\": [ \"*.aux\", \"*.bbl\", \"*.blg\", \"*.idx\", \"*.ind\", \"*.lof\", \"*.lot\", \"*.out\", \"*.toc\", \"*.acn\", \"*.acr\", \"*.alg\", \"*.glg\", \"*.glo\", \"*.gls\", \"*.ist\", \"*.fls\", \"*.log\", \"*.fdb_latexmk\" ], }","title":"\u914d\u7f6evscode"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/latex/#_1","text":"\u4e2d\u6587\u53ef\u76f4\u63a5\u4f7f\u7528\uff0c\u9ed8\u8ba4\u662ffandol\uff0c\u4f46\u4f1a\u6709wannring\uff0c\u53ef\u4ee5\u5ffd\u7565\u3002 \u5b9e\u5728\u4e0d\u60f3\u6709wannring\uff0c\u53ef\u5b89\u88c5windows\u5b57\u4f53\uff0c \u53c2\u80031 \uff0c\u518d\u4f7f\u7528: \\documentclass[fontset=windows]{ctexart}","title":"\u5b57\u4f53"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/vim/","text":"vim \u7684\u4f7f\u7528 \u4e00\u822c\u6307\u4ee4\u6a21\u5f0f 0 \u6216\u529f\u80fd\u952e[Home] \u8fd9\u662f\u6570\u5b57\u300e 0 \u300f\uff1a\u79fb\u52a8\u5230\u8fd9\u4e00\u884c\u7684\u6700\u524d\u9762\u5b57\u7b26\u5904 $ \u6216\u529f\u80fd\u952e[End] \u79fb\u52a8\u5230\u8fd9\u4e00\u5217\u7684\u6700\u540e\u9762\u5b57\u7b26\u5904 H \u5149\u6807\u79fb\u52a8\u5230\u8fd9\u4e2a\u5c4f\u5e55\u7684\u6700\u4e0a\u65b9\u90a3\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26 M \u5149\u6807\u79fb\u52a8\u5230\u8fd9\u4e2a\u5c4f\u5e55\u7684\u4e2d\u592e\u90a3\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26 L \u5149\u6807\u79fb\u52a8\u5230\u8fd9\u4e2a\u5c4f\u5e55\u7684\u6700\u4e0b\u65b9\u90a3\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26 :n1,n2s/word1/word2/g n1 \u4e0e n2 \u4e3a\u6570\u5b57\u3002\u5728\u7b2c n1 \u4e0e n2 \u5217\u4e4b\u95f4\u5bfb\u627e word1 \u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u8be5\u5b57\u7b26\u4e32\u53d6\u4ee3 \u4e3a word2 . \u4e0d\u8981\u6000\u7591\uff01\u8fd9\u5c31\u662f\u5c0f\u6570\u70b9\uff01\u610f\u601d\u662f\u91cd\u590d\u524d\u4e00\u4e2a\u52a8\u4f5c\u7684\u610f\u601d \u591a\u6587\u4ef6\u7f16\u8f91\u7684\u6309\u952e :n \u7f16\u8f91\u4e0b\u4e00\u4e2a\u6587\u4ef6 :N \u7f16\u8f91\u4e0a\u4e00\u4e2a\u6587\u4ef6 :files \u5217\u51fa\u76ee\u524d\u8fd9\u4e2a vim \u7684\u5f00\u542f\u7684\u6240\u6709\u6587\u4ef6 \u7f16\u8f91\u6a21\u5f0f [ctrl]+x -> [ctrl]+n \u4ee5\u76ee\u524d\u6b63\u5728\u7f16\u8f91\u7684\u8fd9\u4e2a\u300e\u6587\u4ef6\u7684\u5185\u5bb9\u6587\u5b57\u300f\u4f5c\u4e3a\u5173\u952e\u8bcd\uff0c\u8865\u9f50 [ctrl]+x -> [ctrl]+f \u4ee5\u5f53\u524d\u76ee\u5f55\u5185\u7684\u300e\u6587\u4ef6\u540d\u300f\u4f5c\u4e3a\u5173\u952e\u8bcd\uff0c\u8865\u9f50 [ctrl]+x -> [ctrl]+o \u4ee5\u6269\u5c55\u540d\u4f5c\u4e3a\u8bed\u6cd5\u8865\u5145\uff0c\u4ee5 vim \u5185\u5efa\u7684\u5173\u952e\u8bcd\uff0c\u8865\u9f50 \u533a\u5757\u9009\u62e9 I -> \u8f93\u5165\u5185\u5bb9 -> [esc] \u591a\u884c\u7f16\u8f91 \u6307\u4ee4\u5217\u6a21\u5f0f :n1,n2 w [filename] \u5c06 n1 \u5230 n2 \u7684\u5185\u5bb9\u50a8\u5b58\u6210 filename \u8fd9\u4e2a\u6587\u4ef6 \u795e\u5947\u7684\u529f\u80fd \u7f16\u8f91\u6a21\u5f0f [ctrl] + k \u5bf9\u5e94 :digraphs \u4e2d\u7684\u5b57\u7b26\u8f93\u5165\u5176\u4ed6\u5b57\u7b26 \u6307\u4ee4\u5217\u6a21\u5f0f :w !sudo tee PATH \u8f93\u51fa vim \u4e2d\u5185\u5bb9\u5230\u7cfb\u7edf\u6587\u4ef6\u4e2d","title":"vim \u7684\u4f7f\u7528"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/vim/#vim","text":"\u4e00\u822c\u6307\u4ee4\u6a21\u5f0f 0 \u6216\u529f\u80fd\u952e[Home] \u8fd9\u662f\u6570\u5b57\u300e 0 \u300f\uff1a\u79fb\u52a8\u5230\u8fd9\u4e00\u884c\u7684\u6700\u524d\u9762\u5b57\u7b26\u5904 $ \u6216\u529f\u80fd\u952e[End] \u79fb\u52a8\u5230\u8fd9\u4e00\u5217\u7684\u6700\u540e\u9762\u5b57\u7b26\u5904 H \u5149\u6807\u79fb\u52a8\u5230\u8fd9\u4e2a\u5c4f\u5e55\u7684\u6700\u4e0a\u65b9\u90a3\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26 M \u5149\u6807\u79fb\u52a8\u5230\u8fd9\u4e2a\u5c4f\u5e55\u7684\u4e2d\u592e\u90a3\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26 L \u5149\u6807\u79fb\u52a8\u5230\u8fd9\u4e2a\u5c4f\u5e55\u7684\u6700\u4e0b\u65b9\u90a3\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26 :n1,n2s/word1/word2/g n1 \u4e0e n2 \u4e3a\u6570\u5b57\u3002\u5728\u7b2c n1 \u4e0e n2 \u5217\u4e4b\u95f4\u5bfb\u627e word1 \u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u8be5\u5b57\u7b26\u4e32\u53d6\u4ee3 \u4e3a word2 . \u4e0d\u8981\u6000\u7591\uff01\u8fd9\u5c31\u662f\u5c0f\u6570\u70b9\uff01\u610f\u601d\u662f\u91cd\u590d\u524d\u4e00\u4e2a\u52a8\u4f5c\u7684\u610f\u601d \u591a\u6587\u4ef6\u7f16\u8f91\u7684\u6309\u952e :n \u7f16\u8f91\u4e0b\u4e00\u4e2a\u6587\u4ef6 :N \u7f16\u8f91\u4e0a\u4e00\u4e2a\u6587\u4ef6 :files \u5217\u51fa\u76ee\u524d\u8fd9\u4e2a vim \u7684\u5f00\u542f\u7684\u6240\u6709\u6587\u4ef6 \u7f16\u8f91\u6a21\u5f0f [ctrl]+x -> [ctrl]+n \u4ee5\u76ee\u524d\u6b63\u5728\u7f16\u8f91\u7684\u8fd9\u4e2a\u300e\u6587\u4ef6\u7684\u5185\u5bb9\u6587\u5b57\u300f\u4f5c\u4e3a\u5173\u952e\u8bcd\uff0c\u8865\u9f50 [ctrl]+x -> [ctrl]+f \u4ee5\u5f53\u524d\u76ee\u5f55\u5185\u7684\u300e\u6587\u4ef6\u540d\u300f\u4f5c\u4e3a\u5173\u952e\u8bcd\uff0c\u8865\u9f50 [ctrl]+x -> [ctrl]+o \u4ee5\u6269\u5c55\u540d\u4f5c\u4e3a\u8bed\u6cd5\u8865\u5145\uff0c\u4ee5 vim \u5185\u5efa\u7684\u5173\u952e\u8bcd\uff0c\u8865\u9f50 \u533a\u5757\u9009\u62e9 I -> \u8f93\u5165\u5185\u5bb9 -> [esc] \u591a\u884c\u7f16\u8f91 \u6307\u4ee4\u5217\u6a21\u5f0f :n1,n2 w [filename] \u5c06 n1 \u5230 n2 \u7684\u5185\u5bb9\u50a8\u5b58\u6210 filename \u8fd9\u4e2a\u6587\u4ef6","title":"vim \u7684\u4f7f\u7528"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/vim/#_1","text":"\u7f16\u8f91\u6a21\u5f0f [ctrl] + k \u5bf9\u5e94 :digraphs \u4e2d\u7684\u5b57\u7b26\u8f93\u5165\u5176\u4ed6\u5b57\u7b26 \u6307\u4ee4\u5217\u6a21\u5f0f :w !sudo tee PATH \u8f93\u51fa vim \u4e2d\u5185\u5bb9\u5230\u7cfb\u7edf\u6587\u4ef6\u4e2d","title":"\u795e\u5947\u7684\u529f\u80fd"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","text":"\u6b63\u5219\u8868\u8fbe\u5f0f \u8bed\u7cfb\u9ed8\u8ba4\u4e3a LANG=C \u3002 export LANG=C; export LC_ALL=C \u57fa\u7840 \u5e38\u7528\uff1a[:alnum:], [:alpha:], [:upper:], [:lower:], [:digit:] \u7279\u6b8a\u7b26\u53f7 \u4ee3\u8868\u610f\u4e49 [:blank:] \u7a7a\u683c\u952e\u4e0e [Tab] \u6309\u952e\u4e24\u8005 [:cntrl:] \u952e\u76d8\u4e0a\u9762\u7684\u63a7\u5236\u6309\u952e\uff0c\u4ea6\u5373\u5305\u62ec CR, LF, Tab, Del.. \u7b49\u7b49 [:graph:] \u9664\u4e86\u7a7a\u683c\u7b26 (\u7a7a\u683c\u952e\u4e0e [Tab] \u6309\u952e) \u5916\u7684\u5176\u4ed6\u6240\u6709\u6309\u952e [:print:] \u4ee3\u8868\u4efb\u4f55\u53ef\u4ee5\u88ab\u6253\u5370\u51fa\u6765\u7684\u5b57\u7b26 [:puntct:] \u4ee3\u8868\u6807\u70b9\u7b26\u53f7 (punctuation symbol)\uff0c\u4ea6\u5373\uff1a\" ' ? ! ; : # $... [:space:] \u4efb\u4f55\u4f1a\u4ea7\u751f\u7a7a\u767d\u7684\u5b57\u7b26\uff0c\u5305\u62ec\u7a7a\u683c\u952e, [Tab], CR \u7b49\u7b49 [:xdigit:] 16 \u8fdb\u4f4d\u7684\u6570\u5b57\u7c7b\u578b\uff0c\u56e0\u6b64\u5305\u62ec\uff1a 0-9, A-F, a-f \u7684\u6570\u5b57\u4e0e\u5b57\u7b26 RE \u5b57\u7b26 \u610f\u4e49 ^word \u5f85\u641c\u5bfb\u7684\u5b57\u7b26\u4e32(word)\u5728\u884c\u9996 word$ \u5f85\u641c\u5bfb\u7684\u5b57\u7b26\u4e32(word)\u5728\u884c\u5c3e * \u91cd\u590d\u96f6\u4e2a\u5230\u65e0\u7a77\u591a\u4e2a\u7684\u524d\u4e00\u4e2a RE \u5b57\u7b26 \\ \u8df3\u8131\u5b57\u7b26\uff0c\u5c06\u7279\u6b8a\u7b26\u53f7\u7684\u7279\u6b8a\u610f\u4e49\u53bb\u9664 . \u4ee3\u8868\u300e\u4e00\u5b9a\u6709\u4e00\u4e2a\u4efb\u610f\u5b57\u7b26\u300f\u7684\u5b57\u7b26 [list] \u5b57\u7b26\u96c6\u5408\u7684 RE \u5b57\u7b26\uff0c\u91cc\u9762\u5217\u51fa\u60f3\u8981\u64b7\u53d6\u7684\u5b57\u7b26 [n1-n2] \u5b57\u7b26\u96c6\u5408\u7684 RE \u5b57\u7b26\uff0c\u91cc\u9762\u5217\u51fa\u60f3\u8981\u64b7\u53d6\u7684\u5b57\u7b26\u8303\u56f4 [^list] \u5b57\u7b26\u96c6\u5408\u7684 RE \u5b57\u7b26\uff0c\u91cc\u9762\u5217\u51fa\u4e0d\u8981\u7684\u5b57\u7b26\u4e32\u6216\u8303\u56f4 \\{n,m\\} \u8fde\u7eed n \u5230 m \u4e2a\u7684\u300e\u524d\u4e00\u4e2a RE \u5b57\u7b26\u300f \\{n\\} \u82e5\u4e3a {n} \u5219\u662f\u8fde\u7eed n \u4e2a\u7684\u524d\u4e00\u4e2a RE \u5b57\u7b26 \u901a\u914d\u7b26 \u6b63\u5219\u8868\u8fbe\u5f0f * .* ? . \u6269\u5c55\u6b63\u5219\u8868\u8fbe\u5f0f RE \u5b57\u7b26 \u610f\u4e49 + \u91cd\u590d\u300e\u4e00\u4e2a\u6216\u4e00\u4e2a\u4ee5\u4e0a\u300f\u7684\u524d\u4e00\u4e2a RE \u5b57\u7b26 ? \u300e\u96f6\u4e2a\u6216\u4e00\u4e2a\u300f\u7684\u524d\u4e00\u4e2a RE \u5b57\u7b26 | \u7528\u6216( or )\u7684\u65b9\u5f0f\u627e\u51fa\u6570\u4e2a\u5b57\u7b26\u4e32 () \u627e\u51fa\u300e\u7fa4\u7ec4\u300f\u5b57\u7b26\u4e32 ()+ \u591a\u4e2a\u91cd\u590d\u7fa4\u7ec4\u7684\u5224\u522b","title":"\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#_1","text":"\u8bed\u7cfb\u9ed8\u8ba4\u4e3a LANG=C \u3002 export LANG=C; export LC_ALL=C","title":"\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#_2","text":"\u5e38\u7528\uff1a[:alnum:], [:alpha:], [:upper:], [:lower:], [:digit:] \u7279\u6b8a\u7b26\u53f7 \u4ee3\u8868\u610f\u4e49 [:blank:] \u7a7a\u683c\u952e\u4e0e [Tab] \u6309\u952e\u4e24\u8005 [:cntrl:] \u952e\u76d8\u4e0a\u9762\u7684\u63a7\u5236\u6309\u952e\uff0c\u4ea6\u5373\u5305\u62ec CR, LF, Tab, Del.. \u7b49\u7b49 [:graph:] \u9664\u4e86\u7a7a\u683c\u7b26 (\u7a7a\u683c\u952e\u4e0e [Tab] \u6309\u952e) \u5916\u7684\u5176\u4ed6\u6240\u6709\u6309\u952e [:print:] \u4ee3\u8868\u4efb\u4f55\u53ef\u4ee5\u88ab\u6253\u5370\u51fa\u6765\u7684\u5b57\u7b26 [:puntct:] \u4ee3\u8868\u6807\u70b9\u7b26\u53f7 (punctuation symbol)\uff0c\u4ea6\u5373\uff1a\" ' ? ! ; : # $... [:space:] \u4efb\u4f55\u4f1a\u4ea7\u751f\u7a7a\u767d\u7684\u5b57\u7b26\uff0c\u5305\u62ec\u7a7a\u683c\u952e, [Tab], CR \u7b49\u7b49 [:xdigit:] 16 \u8fdb\u4f4d\u7684\u6570\u5b57\u7c7b\u578b\uff0c\u56e0\u6b64\u5305\u62ec\uff1a 0-9, A-F, a-f \u7684\u6570\u5b57\u4e0e\u5b57\u7b26 RE \u5b57\u7b26 \u610f\u4e49 ^word \u5f85\u641c\u5bfb\u7684\u5b57\u7b26\u4e32(word)\u5728\u884c\u9996 word$ \u5f85\u641c\u5bfb\u7684\u5b57\u7b26\u4e32(word)\u5728\u884c\u5c3e * \u91cd\u590d\u96f6\u4e2a\u5230\u65e0\u7a77\u591a\u4e2a\u7684\u524d\u4e00\u4e2a RE \u5b57\u7b26 \\ \u8df3\u8131\u5b57\u7b26\uff0c\u5c06\u7279\u6b8a\u7b26\u53f7\u7684\u7279\u6b8a\u610f\u4e49\u53bb\u9664 . \u4ee3\u8868\u300e\u4e00\u5b9a\u6709\u4e00\u4e2a\u4efb\u610f\u5b57\u7b26\u300f\u7684\u5b57\u7b26 [list] \u5b57\u7b26\u96c6\u5408\u7684 RE \u5b57\u7b26\uff0c\u91cc\u9762\u5217\u51fa\u60f3\u8981\u64b7\u53d6\u7684\u5b57\u7b26 [n1-n2] \u5b57\u7b26\u96c6\u5408\u7684 RE \u5b57\u7b26\uff0c\u91cc\u9762\u5217\u51fa\u60f3\u8981\u64b7\u53d6\u7684\u5b57\u7b26\u8303\u56f4 [^list] \u5b57\u7b26\u96c6\u5408\u7684 RE \u5b57\u7b26\uff0c\u91cc\u9762\u5217\u51fa\u4e0d\u8981\u7684\u5b57\u7b26\u4e32\u6216\u8303\u56f4 \\{n,m\\} \u8fde\u7eed n \u5230 m \u4e2a\u7684\u300e\u524d\u4e00\u4e2a RE \u5b57\u7b26\u300f \\{n\\} \u82e5\u4e3a {n} \u5219\u662f\u8fde\u7eed n \u4e2a\u7684\u524d\u4e00\u4e2a RE \u5b57\u7b26 \u901a\u914d\u7b26 \u6b63\u5219\u8868\u8fbe\u5f0f * .* ? .","title":"\u57fa\u7840"},{"location":"%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#_3","text":"RE \u5b57\u7b26 \u610f\u4e49 + \u91cd\u590d\u300e\u4e00\u4e2a\u6216\u4e00\u4e2a\u4ee5\u4e0a\u300f\u7684\u524d\u4e00\u4e2a RE \u5b57\u7b26 ? \u300e\u96f6\u4e2a\u6216\u4e00\u4e2a\u300f\u7684\u524d\u4e00\u4e2a RE \u5b57\u7b26 | \u7528\u6216( or )\u7684\u65b9\u5f0f\u627e\u51fa\u6570\u4e2a\u5b57\u7b26\u4e32 () \u627e\u51fa\u300e\u7fa4\u7ec4\u300f\u5b57\u7b26\u4e32 ()+ \u591a\u4e2a\u91cd\u590d\u7fa4\u7ec4\u7684\u5224\u522b","title":"\u6269\u5c55\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/","text":"\u6df1\u5165\u7406\u89e3\u8ba1\u7b97\u673a\u7cfb\u7edf Chapter 2 2.1.3 Addressing and Byte Ordering Litle endian: machines choose to store the object in memory ordered from least significant byte to most. Except Sun is big-endian machine, other is litile endian. 2.2.6 Expanding the Bit Representation of a Number Expansion of an unsigned number by zero extension, a two's-complement number by sign extension. C standards require, first expand size, then change sign. For: short a; unsigned a == (unsigned)(int)a 2.4.2 IEEE Floating-Point Representation V = (-1)^s \\times M \\times 2^E V = (-1)^s \\times M \\times 2^E // s-exp-frac //Single precision k = 8, n = 23, Bias = 127 //Double precision k = 11, n = 52, Bias = 1023 Normalized Values e \\neq 0, \\neq 2^k - 1 e \\neq 0, \\neq 2^k - 1 M = 1 + f, E = e - Bias M = 1 + f, E = e - Bias Denormalized Values e = 0 e = 0 M = f, E = 1 - Bias M = f, E = 1 - Bias Special Values NaN: e = 1, f \\neq 0 NaN: e = 1, f \\neq 0 \\infty: e =1, f = 0 \\infty: e =1, f = 0 Chapter 3 3.4 Accessing Information Integer registers: Argument number Registers 1 %rdi, %edi, %di, %dil 2 %rsi, %esi, %si, %sil 3 %rdx, %edx, %dx, %dl 4 %rcx, %ecx, %cx, %cl 5 %r8, %r8d, %r8w, %r8b 6 %r9, %r9d, %r9w, %r9b %rax, %eax, %ax, %al -> Return value %rbp, %rbx, %r12-%r15 -> Callee saved %r10, %r11 -> Caller saved 3.4.2 Data Movement Instructions Description Instruction Move movb, movw, movl, movq, movabsq Move with zero extension movzbw, movzbl, movzbq, movzwl, movzwq Move with sign extension movsbw, movsbl, movsbq, movswl, movswq, movslq, cltq 3.4.4 Pushing and Popping Stack Data Description Instruction Push quad word pushq Pop quad word popq 3.5 Arithmetic and Logical Operations The operations are divided into four groups: load effective address, unary, binary, and shifts. Description Instruction Load effective address leq S, D Increment INC D Decrement DEC D Negate NEG D Complement NOT D Add ADD S, D Subtract SUB S, D Multiply IMUL S, D Exclusive-or XOR S, D Or OR S, D And AND S, D Left shift SAL k, D Left shift SHL k, D Arithmetic right shift SAR k, D Logical right shift SHR k, D 3.5.5 Special Arithmetic Operations Description Effect Instruction imulq S R[%rdx]:R[%rax] \u2190 S \u00d7 R[%rax] Signed full multiply mulq S R[%rdx]:R[%rax] \u2190 S \u00d7 R[%rax] Unsigned full multiply cqto R[%rdx]:R[%rax] \u2190 (R[%rax]) Convert to oct word SignExtend idivq S R[%rdx] \u2190 R[%rdx]:R[%rax] mod S; R[%rax] \u2190 R[%rdx]:R[%rax] \u00f7 S Signed divide dicq S R[%rdx] \u2190 R[%rdx]:R[%rax] mod S; R[%rax] \u2190 R[%rdx]:R[%rax] \u00f7 S Unsigned divide 3.6.1 Condition Codes CF: Carry flag. The most recent operation generated a carry out of the most significant bit. Used to detect overflow for unsigned operations. ZF: Zero flag. The most recent operation yielded zero. SF: Sign flag. The most recent operation yielded a negative value. OF: Overflow flag. The most recent operation caused a two's-complement overflow\u2014either negative or positive. Description Instruction Compare CMP Test TEST 3.6.2 Accessing the Condition Codes Description Instruction Equal / zero sete, setz Not equal / not zero setne, setnz Negative sets Nonnegative setns Greater (signed >) setg, setnle Greater or equal (signed >=) setge, setnl Less (signed <) setl, setnge Less or equal (signed <=) setle, setng Above (unsigned >) seta, setnbe Above or equal (unsigned >=) setae, setnb Below (unsigned <) setb, setnae Below or equal (unsigned <=) setbe, setna 3.6.3 Jump Instructions Description Instruction Direct jump jmp Label Indirect jump jmp *Operand Equal, ..., Below or equal j(same as set) Label 3.6.5 Implementing Conditional Branches with Conditional Control if (test-expr) then-statement else else-statement t = test-expr; if (!t) goto false; then-statement goto done; false: else-statement done: 3.6.6 Implementing Conditional Branches with Conditional Control Description Instruction Equal, ..., Below or equal cmov(same as set) Label v = then-expr; ve = else-expr; t = test-expr; if (!t) v = ve; 3.6.7 Loops Do-While Loops do body-statement while (test-expr); loop: body-statement t = test-expr; if (t) goto loop; While Loops while (test-expr) body-statement Jump to middle goto test; loop: body-statement test: t = test-expr; if (t) goto loop; Guarded do t = test-expr; if (!t) goto done; do body-statement while (test-expr); done: t = test-expr; if (!t) goto done; loop: body-statement t = test-expr; if (t) goto loop; done: 3.7.1 The Run-Time Stack | Stack \"botton\" | | ------------------------- | | Earlier frames | | ... | | Arugment n | | ... | | Arugment 7 | | Return address | | Saved registers | | Local variables | | Argument build areas | | **Stack \"top\"** | 3.7.2 Control Transfer Description Instruction Procedure call call Label Procedure call call *Operand Return from call ret 3.11 Floating-Point Code %ymm0, %xmm0 1st FP arg / Return value %ymm(1-7), %xmm(1-7) (2-8)th FP argument %ymm(8-15), %xmm(8-15) Caller saved 3.11.1 Floating-Point Movement and Conversion Operations Description Instruction Move single precision vmovss Move double precision vmovsd Move aligned, packed single precision vmovaps Move aligned, packed double precision vmovapd Convert with truncation single precision to integer vcvttss2si Convert with truncation double precision to integer vcvttsd2si Convert with truncation single precision to quad word integer vcvttss2siq Convert with truncation double precision to quad word integer vcvttsd2siq Convert integer to single precision vcvtsi2ss Convert integer to double precision vcvtsi2sd Convert quad word integer to single precision vcvtsi2ssq Convert quad word integer to double precision vcvtsi2sdq ;Conversion from single to double precision vunpcklps %xmm0, %xmm0, %xmm0 ;Replicate first vector element vcvtps2pd %xmm0, %xmm0 ;Convert two vector elements to double ;Conversion from double to single precision vmovddup %xmm0, %xmm0 ;Replicate first vector element vcvtpd2psx %xmm0, %xmm0 ;Convert two vector elements to single 3.11.3 Floating-Point Arithmetic Operations Description Instruction Floating-point add vaddss, vaddsd Floating-point subtract vsubss, vsubsd Floating-point multiply vmulss, vmulsd Floating-point divide vdivss, vdivsd Floating-point maximum vmaxss, vmaxsd Floating-point minimum vminss, vminsd Floating-point square root sqrtss, sqrtsd 3.11.5 Using Bitwise Operations in Floating-Point Code Description Instruction Bitwise EXCLUSIVE-OR vxorps, vxorpd Bitwise AND vandps, vandpd 3.11.6 Floating-Point Comparison Operations Description Instruction Compare single precision vucomiss Compare double precision vucomisd The floating-point comparison instructions set three condition codes: the zero flag ZF, the carry flag CF, and the parity flag PF.","title":"\u6df1\u5165\u7406\u89e3\u8ba1\u7b97\u673a\u7cfb\u7edf"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#_1","text":"","title":"\u6df1\u5165\u7406\u89e3\u8ba1\u7b97\u673a\u7cfb\u7edf"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#chapter-2","text":"","title":"Chapter 2"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#213-addressing-and-byte-ordering","text":"Litle endian: machines choose to store the object in memory ordered from least significant byte to most. Except Sun is big-endian machine, other is litile endian.","title":"2.1.3 Addressing and Byte Ordering"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#226-expanding-the-bit-representation-of-a-number","text":"Expansion of an unsigned number by zero extension, a two's-complement number by sign extension. C standards require, first expand size, then change sign. For: short a; unsigned a == (unsigned)(int)a","title":"2.2.6 Expanding the Bit Representation of a Number"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#242-ieee-floating-point-representation","text":"V = (-1)^s \\times M \\times 2^E V = (-1)^s \\times M \\times 2^E // s-exp-frac //Single precision k = 8, n = 23, Bias = 127 //Double precision k = 11, n = 52, Bias = 1023 Normalized Values e \\neq 0, \\neq 2^k - 1 e \\neq 0, \\neq 2^k - 1 M = 1 + f, E = e - Bias M = 1 + f, E = e - Bias Denormalized Values e = 0 e = 0 M = f, E = 1 - Bias M = f, E = 1 - Bias Special Values NaN: e = 1, f \\neq 0 NaN: e = 1, f \\neq 0 \\infty: e =1, f = 0 \\infty: e =1, f = 0","title":"2.4.2 IEEE Floating-Point Representation"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#chapter-3","text":"","title":"Chapter 3"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#34-accessing-information","text":"Integer registers: Argument number Registers 1 %rdi, %edi, %di, %dil 2 %rsi, %esi, %si, %sil 3 %rdx, %edx, %dx, %dl 4 %rcx, %ecx, %cx, %cl 5 %r8, %r8d, %r8w, %r8b 6 %r9, %r9d, %r9w, %r9b %rax, %eax, %ax, %al -> Return value %rbp, %rbx, %r12-%r15 -> Callee saved %r10, %r11 -> Caller saved","title":"3.4 Accessing Information"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#342-data-movement-instructions","text":"Description Instruction Move movb, movw, movl, movq, movabsq Move with zero extension movzbw, movzbl, movzbq, movzwl, movzwq Move with sign extension movsbw, movsbl, movsbq, movswl, movswq, movslq, cltq","title":"3.4.2 Data Movement Instructions"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#344-pushing-and-popping-stack-data","text":"Description Instruction Push quad word pushq Pop quad word popq","title":"3.4.4 Pushing and Popping Stack Data"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#35-arithmetic-and-logical-operations","text":"The operations are divided into four groups: load effective address, unary, binary, and shifts. Description Instruction Load effective address leq S, D Increment INC D Decrement DEC D Negate NEG D Complement NOT D Add ADD S, D Subtract SUB S, D Multiply IMUL S, D Exclusive-or XOR S, D Or OR S, D And AND S, D Left shift SAL k, D Left shift SHL k, D Arithmetic right shift SAR k, D Logical right shift SHR k, D","title":"3.5 Arithmetic and Logical Operations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#355-special-arithmetic-operations","text":"Description Effect Instruction imulq S R[%rdx]:R[%rax] \u2190 S \u00d7 R[%rax] Signed full multiply mulq S R[%rdx]:R[%rax] \u2190 S \u00d7 R[%rax] Unsigned full multiply cqto R[%rdx]:R[%rax] \u2190 (R[%rax]) Convert to oct word SignExtend idivq S R[%rdx] \u2190 R[%rdx]:R[%rax] mod S; R[%rax] \u2190 R[%rdx]:R[%rax] \u00f7 S Signed divide dicq S R[%rdx] \u2190 R[%rdx]:R[%rax] mod S; R[%rax] \u2190 R[%rdx]:R[%rax] \u00f7 S Unsigned divide","title":"3.5.5 Special Arithmetic Operations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#361-condition-codes","text":"CF: Carry flag. The most recent operation generated a carry out of the most significant bit. Used to detect overflow for unsigned operations. ZF: Zero flag. The most recent operation yielded zero. SF: Sign flag. The most recent operation yielded a negative value. OF: Overflow flag. The most recent operation caused a two's-complement overflow\u2014either negative or positive. Description Instruction Compare CMP Test TEST","title":"3.6.1 Condition Codes"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#362-accessing-the-condition-codes","text":"Description Instruction Equal / zero sete, setz Not equal / not zero setne, setnz Negative sets Nonnegative setns Greater (signed >) setg, setnle Greater or equal (signed >=) setge, setnl Less (signed <) setl, setnge Less or equal (signed <=) setle, setng Above (unsigned >) seta, setnbe Above or equal (unsigned >=) setae, setnb Below (unsigned <) setb, setnae Below or equal (unsigned <=) setbe, setna","title":"3.6.2 Accessing the Condition Codes"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#363-jump-instructions","text":"Description Instruction Direct jump jmp Label Indirect jump jmp *Operand Equal, ..., Below or equal j(same as set) Label","title":"3.6.3 Jump Instructions"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#365-implementing-conditional-branches-with-conditional-control","text":"if (test-expr) then-statement else else-statement t = test-expr; if (!t) goto false; then-statement goto done; false: else-statement done:","title":"3.6.5 Implementing Conditional Branches with Conditional Control"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#366-implementing-conditional-branches-with-conditional-control","text":"Description Instruction Equal, ..., Below or equal cmov(same as set) Label v = then-expr; ve = else-expr; t = test-expr; if (!t) v = ve;","title":"3.6.6 Implementing Conditional Branches with Conditional Control"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#367-loops","text":"Do-While Loops do body-statement while (test-expr); loop: body-statement t = test-expr; if (t) goto loop; While Loops while (test-expr) body-statement Jump to middle goto test; loop: body-statement test: t = test-expr; if (t) goto loop; Guarded do t = test-expr; if (!t) goto done; do body-statement while (test-expr); done: t = test-expr; if (!t) goto done; loop: body-statement t = test-expr; if (t) goto loop; done:","title":"3.6.7 Loops"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#371-the-run-time-stack","text":"| Stack \"botton\" | | ------------------------- | | Earlier frames | | ... | | Arugment n | | ... | | Arugment 7 | | Return address | | Saved registers | | Local variables | | Argument build areas | | **Stack \"top\"** |","title":"3.7.1 The Run-Time Stack"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#372-control-transfer","text":"Description Instruction Procedure call call Label Procedure call call *Operand Return from call ret","title":"3.7.2 Control Transfer"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#311-floating-point-code","text":"%ymm0, %xmm0 1st FP arg / Return value %ymm(1-7), %xmm(1-7) (2-8)th FP argument %ymm(8-15), %xmm(8-15) Caller saved","title":"3.11 Floating-Point Code"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#3111-floating-point-movement-and-conversion-operations","text":"Description Instruction Move single precision vmovss Move double precision vmovsd Move aligned, packed single precision vmovaps Move aligned, packed double precision vmovapd Convert with truncation single precision to integer vcvttss2si Convert with truncation double precision to integer vcvttsd2si Convert with truncation single precision to quad word integer vcvttss2siq Convert with truncation double precision to quad word integer vcvttsd2siq Convert integer to single precision vcvtsi2ss Convert integer to double precision vcvtsi2sd Convert quad word integer to single precision vcvtsi2ssq Convert quad word integer to double precision vcvtsi2sdq ;Conversion from single to double precision vunpcklps %xmm0, %xmm0, %xmm0 ;Replicate first vector element vcvtps2pd %xmm0, %xmm0 ;Convert two vector elements to double ;Conversion from double to single precision vmovddup %xmm0, %xmm0 ;Replicate first vector element vcvtpd2psx %xmm0, %xmm0 ;Convert two vector elements to single","title":"3.11.1 Floating-Point Movement and Conversion Operations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#3113-floating-point-arithmetic-operations","text":"Description Instruction Floating-point add vaddss, vaddsd Floating-point subtract vsubss, vsubsd Floating-point multiply vmulss, vmulsd Floating-point divide vdivss, vdivsd Floating-point maximum vmaxss, vmaxsd Floating-point minimum vminss, vminsd Floating-point square root sqrtss, sqrtsd","title":"3.11.3 Floating-Point Arithmetic Operations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#3115-using-bitwise-operations-in-floating-point-code","text":"Description Instruction Bitwise EXCLUSIVE-OR vxorps, vxorpd Bitwise AND vandps, vandpd","title":"3.11.5 Using Bitwise Operations in Floating-Point Code"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#3116-floating-point-comparison-operations","text":"Description Instruction Compare single precision vucomiss Compare double precision vucomisd The floating-point comparison instructions set three condition codes: the zero flag ZF, the carry flag CF, and the parity flag PF.","title":"3.11.6 Floating-Point Comparison Operations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/C_Primer/","text":"C++ Primer 1. Start \u8bfb\u4e00\u884c\uff1a // 1 string s; getline(cin, s); // Defined in <string> // 2 char str[100]; cin.getline(str, 100); // 3 gets(str); //\u6b64\u51fd\u6578\u5728C++ 11\u4e2d\u5df2\u68c4\u7528\uff0c\u4e26\u5df2\u5f9eC++ 14\u4e2d\u522a\u9664\u3002 scanf() \u4e2d\u7684 \"%c\" \u548c char c = getchar() \u4e00\u6837\u4f1a\u5438\u6536\u7a7a\u683c\u3002 scanf() \u8fd4\u56de\u8bfb\u5165\u6210\u529f\u7684\u4e2a\u6570\uff0c\u5931\u8d25\u65f6\u8fd4\u56de-1\uff0c\u4e14 EOF \u4e3a-1\u3002 << , >> \u90fd\u662f\u8fd4\u56de\u5176\u5de6\u4fa7\u7684\u8fd0\u7b97\u5bf9\u8c61\u3002 \u591a\u70b9\u6d4b\u8bd5\u65f6\uff0c\u8f93\u5165\uff1a while (~scanf()) { // scanf \u8fd4\u56de\u6b63\u786e\u6309\u6307\u5b9a\u683c\u5f0f\u8f93\u5165\u53d8\u91cf\u7684\u4e2a\u6570\uff0c\u9519\u8bef\u65f6\u8fd4\u56de EOF \u5373 -1 // Statement } while (scanf(), /*Condition*/) { // Statement } int value; while (cin >> value) { // \u8bfb\u5230`EOF`\u6216\u975e\u6574\u6570\u65f6\uff0c\u8fd4\u56de\u65e0\u6548\u7684`istream` // Statement } 2. Variables and Foundation Type C++11\uff1a\u7a7a\u6307\u9488 nullptr Separation Compilation\uff1a 1. \u53ea\u58f0\u660e\u4e0d\u5b9a\u4e49\uff1a extern int i; 2. \u53ef\u4ee5\u58f0\u660e\u591a\u6b21\uff0c\u4f46\u5b9a\u4e49\u53ea\u80fd\u6709\u4e00\u6b21 \u7528\u672f\u8bed\u201c\u5f15\u7528\u201d\u662f\u6307\u201c\u5de6\u503c\u5f15\u7528\u201d const \u4fee\u9970\uff1a\u5728\u7f16\u8bd1\u6216\u8fd0\u884c\u65f6\u521d\u59cb\u5316 constexpr \uff1a\u5728\u7f16\u8bd1\u65f6\u521d\u59cb\u5316\uff0c\u5fc5\u987b\u4f7f\u7528\u5b57\u9762\u503c\u7c7b\u578b\u521d\u59cb\u5316\uff0c\u5f15\u7528\u548c\u6307\u9488\u65f6\uff0c\u4f46\u53ea\u80fd\u7528\u4e8e\u56fa\u5b9a\u5730\u5740\u7684\u5bf9\u8c61 const \u4fee\u9970\u7684\u53d8\u91cf\u9ed8\u8ba4\u53ea\u5728\u6587\u4ef6\u5185\u751f\u6548\uff0c\u82e5\u8981\u5171\u4eab\uff0c\u65e0\u8bba\u662f\u58f0\u660e\u8fd8\u662f\u5b9a\u4e49\u90fd\u9700\u8981\u52a0 extern //file.h extern const i = fcn(); // Defination //file.c extern const i; // Declaration :: \u4e3a\u4f5c\u7528\u57df\u64cd\u4f5c\u7b26 // \u663e\u793a\u4f7f\u7528\u5168\u5c40\u4f5c\u7528\u57df int i = 1; int main() { int i = 2; std::cout << ::i << std::endl; return 0; } C++11\u4e2d\u65e0\u8bba\u662f\u5bf9\u8c61\u8fd8\u662f\u5185\u7f6e\u7c7b\u578b\u90fd\u53ef\u4ee5\u4f7f\u7528\u5217\u8868\u521d\u59cb\u5316\uff0c\u7279\u70b9\u662f\u5b58\u5728\u6570\u636e\u4e22\u5931\u98ce\u9669\u65f6\u4f1a\u62a5\u9519\uff1a int i{0}; int i = {0}; // \u62a5\u9519 int i = {1.2}; \u5728\u51fd\u6570\u4f53\u5185\u90e8\u7684\u5185\u7f6e\u7c7b\u578b\u4e0d\u4f1a\u88ab\u9ed8\u8ba4\u521d\u59cb\u5316 Reference ot const: \u90fd\u4e0d\u80fd\u6539\uff0c\u53ef\u4ee5\u7ed1\u5b9a\u975e\u5e38\u91cf\uff0c\u5b57\u9762\u503c\uff0c\u8868\u8fbe\u5f0f\uff0c\u5176\u5b9e\u8d28\u662f\u518d\u5b9a\u4e49\u4e86\u4e2a\u53d8\u91cf int i = 0; // Const pointer int *const p = &i; // Pointer to const const int *p = &i; \u666e\u901a\u7c7b\u578b\u53ea\u6709top-level const\uff0c\u5f15\u7528\u53ea\u6709low-level const\uff0c\u6307\u9488\u90fd\u53ef\u4ee5\uff0ctop-level const \u65f6\u62f7\u8d1d\u4e0d\u5f71\u54cd\uff0c\u800clow-level const \u62f7\u8d1d\u65f6\u4e0d\u80fd\u662f\u5e38\u91cf\u8f6c\u975e\u5e38\u91cf constexpr \u53ea\u4fee\u9970\u9876\u5c42\u5bf9\u8c61 Alias declaration in C++11: using LL = long long \u522b\u540d\u4e0d\u80fd\u7b80\u5355\u7684\u7406\u89e3\u4e3a\u76f4\u63a5\u66ff\u6362\uff1a using pstring = char *; const pstring p; // `char`\u7c7b\u578b\u7684\u5e38\u91cf\u6307\u9488 const char *p; // \u6307\u5411`char`\u5e38\u91cf\u7684\u6307\u9488 auto \u4f1a\u5ffd\u7565 const \uff0c\u82e5\u8981\u63a8\u65ad\u4e3a const \u7c7b\u578b\uff0c\u8981\u624b\u52a8\u52a0\u4e0a \u5f53\u8868\u8fbe\u5f0f\u8fd4\u56de\u5de6\u503c\u65f6\uff0c decltype(\\*expersion*\\) \u8fd4\u56de\u8be5\u7c7b\u578b\u7684\u5f15\u7528 3. String, Vector and Array \u4e0b\u6807\u7c7b\u578b string<T>::size_type \uff0c vector<T>::size_type \u662f\u65e0\u7b26\u53f7\u6574\u6570 iterator \u8fd0\u7b97\u8fd4\u56de difference_type \u4e3a\u5e26\u7b26\u53f7\u6574\u6570 \u5411\u8fed\u4ee3\u5668\u6240\u5c5e\u5bb9\u5668\u6dfb\u52a0\u5143\u7d20\uff0c\u4f1a\u4f7f\u8fed\u4ee3\u5668\u5931\u6548 \u7406\u89e3\u6570\u7ec4\u4fee\u9970\u7b26\u65f6\uff0c\u4ece\u5185\u5230\u5916\uff0c\u4ece\u5de6\u5230\u53f3\uff0c\u5982 int *(&a)[10] = p; \uff0c\u662f\u4e00\u4e2a\u542b10 int \u6307\u9488\u7684\u6570\u7ec4\u7684\u5f15\u7528\uff0c int (*direction[3])(int) = {add, sub, mul} \u662f\u542b3\u4e2a\u51fd\u6570\u6307\u9488\u7684\u6570\u7ec4\u3002 \u6570\u7ec4\u5927\u5c0f\u7c7b\u578b\u4e3a size_t \uff0c\u4e0b\u6807\u8fd0\u7b97\u53ef\u4ee5\u5904\u7406\u8d1f\u503c\u4e3a ptrdiff_t \u7c7b\u578b \u6709 begin \u548c end \u51fd\u6570 auto \u63a8\u65ad\u6570\u7ec4\u4f1a\u81ea\u52a8\u8f6c\u5316\u4e3a\u8be5\u6570\u7ec4\u7684\u5934\u6307\u9488\uff0c\u800c decltype \u4f1a\u628a\u5927\u5c0f\u4e00\u8d77\u8868\u793a\u51fa\u6765 int a[] = {1, 2}; auto a1{a}; // a1\u4e3a\u6307\u9488 delctype(a) a2 = {1, 2}; //a2\u4e3a int[2] \u5bf9\u591a\u7ef4\u6570\u7ec4\u4f7f\u7528\u8303\u56f4 for \u65f6\uff0c\u9664\u6700\u5185\u5c42\u4ee5\u5916 auto \u90fd\u8981\u52a0\u4e0a & \uff0c\u9632\u6b62\u81ea\u52a8\u8f6c\u5316\u4e3a\u6307\u9488 4. Expersion \u4e00\u4e2a\u5bf9\u8c61\u88ab\u5f53\u4f5c\u5de6\u503c\u65f6\u7528\u7684\u4f7f\u5176\u8eab\u4efd\uff08\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\uff09\uff0c\u5f53\u4f5c\u53f3\u503c\u662f\u7528\u7684\u662f\u503c\uff08\u5185\u5bb9\uff09 \uff08\u9664\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff09\uff0c\u5de6\u503c\u53ef\u4ee5\u5f53\u4f5c\u53f3\u503c\uff0c\u4f46\u53f3\u503c\u4e0d\u80fd\u5f53\u4f5c\u5de6\u503c","title":"C++ Primer"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/C_Primer/#c-primer","text":"","title":"C++ Primer"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/C_Primer/#1-start","text":"\u8bfb\u4e00\u884c\uff1a // 1 string s; getline(cin, s); // Defined in <string> // 2 char str[100]; cin.getline(str, 100); // 3 gets(str); //\u6b64\u51fd\u6578\u5728C++ 11\u4e2d\u5df2\u68c4\u7528\uff0c\u4e26\u5df2\u5f9eC++ 14\u4e2d\u522a\u9664\u3002 scanf() \u4e2d\u7684 \"%c\" \u548c char c = getchar() \u4e00\u6837\u4f1a\u5438\u6536\u7a7a\u683c\u3002 scanf() \u8fd4\u56de\u8bfb\u5165\u6210\u529f\u7684\u4e2a\u6570\uff0c\u5931\u8d25\u65f6\u8fd4\u56de-1\uff0c\u4e14 EOF \u4e3a-1\u3002 << , >> \u90fd\u662f\u8fd4\u56de\u5176\u5de6\u4fa7\u7684\u8fd0\u7b97\u5bf9\u8c61\u3002 \u591a\u70b9\u6d4b\u8bd5\u65f6\uff0c\u8f93\u5165\uff1a while (~scanf()) { // scanf \u8fd4\u56de\u6b63\u786e\u6309\u6307\u5b9a\u683c\u5f0f\u8f93\u5165\u53d8\u91cf\u7684\u4e2a\u6570\uff0c\u9519\u8bef\u65f6\u8fd4\u56de EOF \u5373 -1 // Statement } while (scanf(), /*Condition*/) { // Statement } int value; while (cin >> value) { // \u8bfb\u5230`EOF`\u6216\u975e\u6574\u6570\u65f6\uff0c\u8fd4\u56de\u65e0\u6548\u7684`istream` // Statement }","title":"1. Start"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/C_Primer/#2-variables-and-foundation-type","text":"C++11\uff1a\u7a7a\u6307\u9488 nullptr Separation Compilation\uff1a 1. \u53ea\u58f0\u660e\u4e0d\u5b9a\u4e49\uff1a extern int i; 2. \u53ef\u4ee5\u58f0\u660e\u591a\u6b21\uff0c\u4f46\u5b9a\u4e49\u53ea\u80fd\u6709\u4e00\u6b21 \u7528\u672f\u8bed\u201c\u5f15\u7528\u201d\u662f\u6307\u201c\u5de6\u503c\u5f15\u7528\u201d const \u4fee\u9970\uff1a\u5728\u7f16\u8bd1\u6216\u8fd0\u884c\u65f6\u521d\u59cb\u5316 constexpr \uff1a\u5728\u7f16\u8bd1\u65f6\u521d\u59cb\u5316\uff0c\u5fc5\u987b\u4f7f\u7528\u5b57\u9762\u503c\u7c7b\u578b\u521d\u59cb\u5316\uff0c\u5f15\u7528\u548c\u6307\u9488\u65f6\uff0c\u4f46\u53ea\u80fd\u7528\u4e8e\u56fa\u5b9a\u5730\u5740\u7684\u5bf9\u8c61 const \u4fee\u9970\u7684\u53d8\u91cf\u9ed8\u8ba4\u53ea\u5728\u6587\u4ef6\u5185\u751f\u6548\uff0c\u82e5\u8981\u5171\u4eab\uff0c\u65e0\u8bba\u662f\u58f0\u660e\u8fd8\u662f\u5b9a\u4e49\u90fd\u9700\u8981\u52a0 extern //file.h extern const i = fcn(); // Defination //file.c extern const i; // Declaration :: \u4e3a\u4f5c\u7528\u57df\u64cd\u4f5c\u7b26 // \u663e\u793a\u4f7f\u7528\u5168\u5c40\u4f5c\u7528\u57df int i = 1; int main() { int i = 2; std::cout << ::i << std::endl; return 0; } C++11\u4e2d\u65e0\u8bba\u662f\u5bf9\u8c61\u8fd8\u662f\u5185\u7f6e\u7c7b\u578b\u90fd\u53ef\u4ee5\u4f7f\u7528\u5217\u8868\u521d\u59cb\u5316\uff0c\u7279\u70b9\u662f\u5b58\u5728\u6570\u636e\u4e22\u5931\u98ce\u9669\u65f6\u4f1a\u62a5\u9519\uff1a int i{0}; int i = {0}; // \u62a5\u9519 int i = {1.2}; \u5728\u51fd\u6570\u4f53\u5185\u90e8\u7684\u5185\u7f6e\u7c7b\u578b\u4e0d\u4f1a\u88ab\u9ed8\u8ba4\u521d\u59cb\u5316 Reference ot const: \u90fd\u4e0d\u80fd\u6539\uff0c\u53ef\u4ee5\u7ed1\u5b9a\u975e\u5e38\u91cf\uff0c\u5b57\u9762\u503c\uff0c\u8868\u8fbe\u5f0f\uff0c\u5176\u5b9e\u8d28\u662f\u518d\u5b9a\u4e49\u4e86\u4e2a\u53d8\u91cf int i = 0; // Const pointer int *const p = &i; // Pointer to const const int *p = &i; \u666e\u901a\u7c7b\u578b\u53ea\u6709top-level const\uff0c\u5f15\u7528\u53ea\u6709low-level const\uff0c\u6307\u9488\u90fd\u53ef\u4ee5\uff0ctop-level const \u65f6\u62f7\u8d1d\u4e0d\u5f71\u54cd\uff0c\u800clow-level const \u62f7\u8d1d\u65f6\u4e0d\u80fd\u662f\u5e38\u91cf\u8f6c\u975e\u5e38\u91cf constexpr \u53ea\u4fee\u9970\u9876\u5c42\u5bf9\u8c61 Alias declaration in C++11: using LL = long long \u522b\u540d\u4e0d\u80fd\u7b80\u5355\u7684\u7406\u89e3\u4e3a\u76f4\u63a5\u66ff\u6362\uff1a using pstring = char *; const pstring p; // `char`\u7c7b\u578b\u7684\u5e38\u91cf\u6307\u9488 const char *p; // \u6307\u5411`char`\u5e38\u91cf\u7684\u6307\u9488 auto \u4f1a\u5ffd\u7565 const \uff0c\u82e5\u8981\u63a8\u65ad\u4e3a const \u7c7b\u578b\uff0c\u8981\u624b\u52a8\u52a0\u4e0a \u5f53\u8868\u8fbe\u5f0f\u8fd4\u56de\u5de6\u503c\u65f6\uff0c decltype(\\*expersion*\\) \u8fd4\u56de\u8be5\u7c7b\u578b\u7684\u5f15\u7528","title":"2. Variables and Foundation Type"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/C_Primer/#3-string-vector-and-array","text":"\u4e0b\u6807\u7c7b\u578b string<T>::size_type \uff0c vector<T>::size_type \u662f\u65e0\u7b26\u53f7\u6574\u6570 iterator \u8fd0\u7b97\u8fd4\u56de difference_type \u4e3a\u5e26\u7b26\u53f7\u6574\u6570 \u5411\u8fed\u4ee3\u5668\u6240\u5c5e\u5bb9\u5668\u6dfb\u52a0\u5143\u7d20\uff0c\u4f1a\u4f7f\u8fed\u4ee3\u5668\u5931\u6548 \u7406\u89e3\u6570\u7ec4\u4fee\u9970\u7b26\u65f6\uff0c\u4ece\u5185\u5230\u5916\uff0c\u4ece\u5de6\u5230\u53f3\uff0c\u5982 int *(&a)[10] = p; \uff0c\u662f\u4e00\u4e2a\u542b10 int \u6307\u9488\u7684\u6570\u7ec4\u7684\u5f15\u7528\uff0c int (*direction[3])(int) = {add, sub, mul} \u662f\u542b3\u4e2a\u51fd\u6570\u6307\u9488\u7684\u6570\u7ec4\u3002 \u6570\u7ec4\u5927\u5c0f\u7c7b\u578b\u4e3a size_t \uff0c\u4e0b\u6807\u8fd0\u7b97\u53ef\u4ee5\u5904\u7406\u8d1f\u503c\u4e3a ptrdiff_t \u7c7b\u578b \u6709 begin \u548c end \u51fd\u6570 auto \u63a8\u65ad\u6570\u7ec4\u4f1a\u81ea\u52a8\u8f6c\u5316\u4e3a\u8be5\u6570\u7ec4\u7684\u5934\u6307\u9488\uff0c\u800c decltype \u4f1a\u628a\u5927\u5c0f\u4e00\u8d77\u8868\u793a\u51fa\u6765 int a[] = {1, 2}; auto a1{a}; // a1\u4e3a\u6307\u9488 delctype(a) a2 = {1, 2}; //a2\u4e3a int[2] \u5bf9\u591a\u7ef4\u6570\u7ec4\u4f7f\u7528\u8303\u56f4 for \u65f6\uff0c\u9664\u6700\u5185\u5c42\u4ee5\u5916 auto \u90fd\u8981\u52a0\u4e0a & \uff0c\u9632\u6b62\u81ea\u52a8\u8f6c\u5316\u4e3a\u6307\u9488","title":"3. String, Vector and Array"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/C_Primer/#4-expersion","text":"\u4e00\u4e2a\u5bf9\u8c61\u88ab\u5f53\u4f5c\u5de6\u503c\u65f6\u7528\u7684\u4f7f\u5176\u8eab\u4efd\uff08\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\uff09\uff0c\u5f53\u4f5c\u53f3\u503c\u662f\u7528\u7684\u662f\u503c\uff08\u5185\u5bb9\uff09 \uff08\u9664\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff09\uff0c\u5de6\u503c\u53ef\u4ee5\u5f53\u4f5c\u53f3\u503c\uff0c\u4f46\u53f3\u503c\u4e0d\u80fd\u5f53\u4f5c\u5de6\u503c","title":"4. Expersion"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux%E5%86%85%E6%A0%B8%E5%AE%8C%E5%85%A8%E6%B3%A8%E9%87%8A/","text":"\u5fae\u578b\u8ba1\u7b97\u673a\u7ec4\u6210\u7ed3\u6784 80386 CPU PC \u673a\uff1a \u4e2d\u65ad\u63a7\u5236\u5668\u7531 Intel 8259A \u6216\u5176\u517c\u5bb9\u82af\u7247\u6784\u6210\uff1b DMA \u63a7\u5236\u5668\u901a\u5e38\u91c7\u7528Intel 8237A \u82af\u7247\u6784\u6210\uff1b \u5b9a\u65f6\u8ba1\u6570\u5668\u7684\u6838\u5fc3\u5219\u662f Intel 8253/8254 \u5b9a\u65f6\u82af\u7247\uff1b \u952e\u76d8\u63a7\u5236\u5668\u4f7f\u7528\u7684\u662f Intel 8042 \u82af\u7247\u6765\u4e0e\u952e\u76d8\u4e2d\u7684\u626b\u63cf\u7535\u8def\u8fdb\u884c\u901a\u4fe1\u3002 \u73b0\u4ee3 PC \u673a\u4e3b\u677f\u4e3b\u8981\u4f7f\u7528 2 \u4e2a\u8d85\u5927\u89c4\u6a21\u82af\u7247\u6784\u6210 \u7684\u82af\u7247\u7ec4\u6216\u82af\u7247\u96c6\uff08Chipsets\uff09\u7ec4\u6210\uff1a \u5317\u6865\u82af\u7247\u7528\u4e8e \u4e0e CPU\u3001\u5185\u5b58\u548c AGP \u89c6\u9891\u63a5\u53e3 \u5357\u6865\u82af\u7247\u7528\u6765\u7ba1\u7406\u4f4e\u3001\u4e2d\u901f\u7684\u7ec4\u4ef6\uff0c\u4f8b\u5982\uff0c PCI \u603b\u7ebf\u3001IDE \u786c\u76d8\u63a5\u53e3\u3001USB \u7aef\u53e3\u7b49 IBM PC \u53ca\u5176\u517c\u5bb9\u5fae\u673a\u4e3b\u8981\u4f7f\u7528\u72ec\u7acb\u7f16\u5740\u65b9\u5f0f\uff0c\u4f7f\u7528 ISA \u603b\u7ebf\u7ed3\u6784\u7684\u4f20\u7edf PC \u673a\u5176 I/O \u5730\u5740\u7a7a\u95f4\u8303\u56f4\u662f 0x000 -- 0x3FF\uff0c\u6709 1024 \u4e2a I/O \u7aef\u53e3\u5730\u5740\u53ef\u4f9b\u4f7f\u7528\u3002 \u53e6\u5916\uff0cIBM PC \u673a\u4e5f\u90e8\u5206\u5730\u4f7f\u7528\u4e86\u7edf\u4e00\u7f16\u5740\u65b9\u5f0f\u3002\u4f8b\u5982\uff0cCGA \u663e\u793a\u5361\u4e0a\u663e\u793a\u5185\u5b58\u7684\u5730\u5740\u5c31\u76f4\u63a5\u5360\u7528\u4e86 \u5b58\u50a8\u5668\u5730\u5740\u7a7a\u95f4 0xB800 -- 0xBC00 \u8303\u56f4\u3002 \u5728\u666e\u901a Linux \u7cfb \u7edf\u4e0b\u901a\u8fc7\u67e5\u770b/proc/ioports \u6587\u4ef6\u53ef\u4ee5\u5f97\u5230\u76f8\u5173\u63a7\u5236\u5668\u6216\u8bbe\u7f6e\u4f7f\u7528\u7684 I/O \u5730\u5740\u8303\u56f4\u3002 \u9664\u4e86\u5730\u5740\u4ece 0xA0000 \u5230 0xFFFFF \uff08640K \u5230 1M \u5171 384K\uff09\u548c 0xFFFE0000 \u5230 0xFFFFFFFF\uff084G \u5904\u7684\u6700\u540e\u4e00 64K\uff09\u8303\u56f4\u4ee5\u5916\u7684\u6240\u6709\u5185\u5b58\u90fd\u53ef \u7528\u4f5c\u7cfb\u7edf\u5185\u5b58\u3002\u8fd9\u4e24\u4e2a\u7279\u5b9a\u8303\u56f4\u88ab\u7528\u4e8e I/O \u8bbe\u5907\u548c BIOS \u7a0b\u5e8f\u3002\u5728 Linux 0.1x \u7cfb\u7edf\u4e2d\uff0c0--640K \u5c06\u88ab\u7528\u4f5c\u5b58\u653e\u5185\u6838\u4ee3\u7801\u548c\u6570\u636e\u3002Linux \u5185\u6838\u4e0d\u4f7f\u7528 BIOS \u529f\u80fd\uff0c\u4e5f\u4e0d\u4f7f \u7528 BIOS \u8bbe\u7f6e\u7684\u4e2d\u65ad\u5411\u91cf\u8868\u3002","title":"Linux\u5185\u6838\u5b8c\u5168\u6ce8\u91ca"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux%E5%86%85%E6%A0%B8%E5%AE%8C%E5%85%A8%E6%B3%A8%E9%87%8A/#_1","text":"80386 CPU PC \u673a\uff1a \u4e2d\u65ad\u63a7\u5236\u5668\u7531 Intel 8259A \u6216\u5176\u517c\u5bb9\u82af\u7247\u6784\u6210\uff1b DMA \u63a7\u5236\u5668\u901a\u5e38\u91c7\u7528Intel 8237A \u82af\u7247\u6784\u6210\uff1b \u5b9a\u65f6\u8ba1\u6570\u5668\u7684\u6838\u5fc3\u5219\u662f Intel 8253/8254 \u5b9a\u65f6\u82af\u7247\uff1b \u952e\u76d8\u63a7\u5236\u5668\u4f7f\u7528\u7684\u662f Intel 8042 \u82af\u7247\u6765\u4e0e\u952e\u76d8\u4e2d\u7684\u626b\u63cf\u7535\u8def\u8fdb\u884c\u901a\u4fe1\u3002 \u73b0\u4ee3 PC \u673a\u4e3b\u677f\u4e3b\u8981\u4f7f\u7528 2 \u4e2a\u8d85\u5927\u89c4\u6a21\u82af\u7247\u6784\u6210 \u7684\u82af\u7247\u7ec4\u6216\u82af\u7247\u96c6\uff08Chipsets\uff09\u7ec4\u6210\uff1a \u5317\u6865\u82af\u7247\u7528\u4e8e \u4e0e CPU\u3001\u5185\u5b58\u548c AGP \u89c6\u9891\u63a5\u53e3 \u5357\u6865\u82af\u7247\u7528\u6765\u7ba1\u7406\u4f4e\u3001\u4e2d\u901f\u7684\u7ec4\u4ef6\uff0c\u4f8b\u5982\uff0c PCI \u603b\u7ebf\u3001IDE \u786c\u76d8\u63a5\u53e3\u3001USB \u7aef\u53e3\u7b49 IBM PC \u53ca\u5176\u517c\u5bb9\u5fae\u673a\u4e3b\u8981\u4f7f\u7528\u72ec\u7acb\u7f16\u5740\u65b9\u5f0f\uff0c\u4f7f\u7528 ISA \u603b\u7ebf\u7ed3\u6784\u7684\u4f20\u7edf PC \u673a\u5176 I/O \u5730\u5740\u7a7a\u95f4\u8303\u56f4\u662f 0x000 -- 0x3FF\uff0c\u6709 1024 \u4e2a I/O \u7aef\u53e3\u5730\u5740\u53ef\u4f9b\u4f7f\u7528\u3002 \u53e6\u5916\uff0cIBM PC \u673a\u4e5f\u90e8\u5206\u5730\u4f7f\u7528\u4e86\u7edf\u4e00\u7f16\u5740\u65b9\u5f0f\u3002\u4f8b\u5982\uff0cCGA \u663e\u793a\u5361\u4e0a\u663e\u793a\u5185\u5b58\u7684\u5730\u5740\u5c31\u76f4\u63a5\u5360\u7528\u4e86 \u5b58\u50a8\u5668\u5730\u5740\u7a7a\u95f4 0xB800 -- 0xBC00 \u8303\u56f4\u3002 \u5728\u666e\u901a Linux \u7cfb \u7edf\u4e0b\u901a\u8fc7\u67e5\u770b/proc/ioports \u6587\u4ef6\u53ef\u4ee5\u5f97\u5230\u76f8\u5173\u63a7\u5236\u5668\u6216\u8bbe\u7f6e\u4f7f\u7528\u7684 I/O \u5730\u5740\u8303\u56f4\u3002 \u9664\u4e86\u5730\u5740\u4ece 0xA0000 \u5230 0xFFFFF \uff08640K \u5230 1M \u5171 384K\uff09\u548c 0xFFFE0000 \u5230 0xFFFFFFFF\uff084G \u5904\u7684\u6700\u540e\u4e00 64K\uff09\u8303\u56f4\u4ee5\u5916\u7684\u6240\u6709\u5185\u5b58\u90fd\u53ef \u7528\u4f5c\u7cfb\u7edf\u5185\u5b58\u3002\u8fd9\u4e24\u4e2a\u7279\u5b9a\u8303\u56f4\u88ab\u7528\u4e8e I/O \u8bbe\u5907\u548c BIOS \u7a0b\u5e8f\u3002\u5728 Linux 0.1x \u7cfb\u7edf\u4e2d\uff0c0--640K \u5c06\u88ab\u7528\u4f5c\u5b58\u653e\u5185\u6838\u4ee3\u7801\u548c\u6570\u636e\u3002Linux \u5185\u6838\u4e0d\u4f7f\u7528 BIOS \u529f\u80fd\uff0c\u4e5f\u4e0d\u4f7f \u7528 BIOS \u8bbe\u7f6e\u7684\u4e2d\u65ad\u5411\u91cf\u8868\u3002","title":"\u5fae\u578b\u8ba1\u7b97\u673a\u7ec4\u6210\u7ed3\u6784"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/","text":"\u79bb\u6563\u6570\u5b66 Methods of Proving Theorems If we want to prove $q$ is true ,there are three methods: Direct Proofs p\\land (p\\to q) \\text{\\ is true} Proof by Contradiction \\lnot q\\to (\\lnot r\\land r)\\text{\\ is true} Proof by Contrposition p\\land (\\lnot q\\to \\lnot p)\\text{\\ is true} To be honest ,this is a specific case base on contradiction ,which p is subsititude for r ,generally , p is told in question stem ,and r is not. Propositional logic Proposition: A declarative sentence that is either true or false, but not both. Statements that can not be decided is not a proposition. Propositional/Statement variable: p, q, r, s Truth value: T, F Propositional Calculus/Logic: The area of logic that deals with propositions. Compound proposition: Proposition formed from existing propositions using operators. Operator: Not \u00acp e.g. It is not the case that \u2026 Conjunction/And p \u2227 q e.g. \u2026 and/but \u2026 Disjunction/Or p \u2228 q e.g. \u2026 or \u2026 Exclusive or p \u2295 q Conditional Statement / Implication p \u2192 q if p, then q p only if q p implies q p is a sufficient condition for q q is a necessary condition for p q follows from / if / when / whenever p q unless \u00acp False only when p is true, but q is false; when p is false, p \u2192 q is defined to be true. Converse p \u2192 q to q \u2192 p Inverse p \u2192 q to \u00acp \u2192 \u00acq Contrapositive Converse and inverse p \u2192 q to \u00acq \u2192 \u00acp Biconditional statement p \u2194 q p if and only if q p is necessary and sufficient for q if p then q, and conversely p iff q p \u2194 q == (p \u2192 q) \u2227 (q \u2192 p), only true when p and q have the same value Operator precedence: (), \u00ac, \u2227 \u2228, \u2192, \u2194 Bit: 1 for T, 0 for F. Bit string: a sequence of zero or more bits. Bit operation: Bitwise AND, Bitwise OR, Bitwise XOR Applications of propositional logic Translating English sentences: to logical proposition. Consistent system specification: no conflicting requirements; a set of value to satisfy all the statements translated; does not necessarily has a real usage. Propositional equivalences Classification of compound proposition: Tautology Always true Contradiction Always false Contingency Neither a tautology nor a contradiction Logical equivalence: Compound propositions that have the same truth values in all possible cases: p \u2194 q is a tautology p \u2261 q, p \u21d4 q Logical Equivalences: Equivalence Name p \u2227 T \u2261 p Identity laws p \u2228 F \u2261 p p \u2228 T \u2261 T Domination laws p \u2227 F \u2261 F p \u2228 p \u2261 p Idempotent laws p \u2227 p \u2261 p \u00ac(\u00acp) \u2261 p Double negation law p \u2228 q \u2261 q \u2228 p Commutative laws p \u2227 q \u2261 q \u2227 p (p \u2228 q) \u2228 r \u2261 p \u2228 (q \u2228 r) Associative laws (p \u2227 q) \u2227 r \u2261 p \u2227 (q \u2227 r) p \u2228 (q \u2227 r) \u2261 (p \u2228 q) \u2227 (p \u2228 r) Distributive laws p \u2227 (q \u2228 r) \u2261 (p \u2227 q) \u2228 (p \u2227 r) \u00ac(p \u2227 q) \u2261 \u00acp \u2228 \u00acq De Morgan\u2019s laws \u00ac(p \u2228 q) \u2261 \u00acp \u2227 \u00acq p \u2228 (p \u2227 q) \u2261 p Absorption laws p \u2227 (p \u2228 q) \u2261 p p \u2228 \u00acp \u2261 T Negation laws p \u2227 \u00acp \u2261 F p \u2192 q \u2261 \u00acp \u2228 q p \u2194 q \u2261 (p \u2227 q) \u2228 (\u00acp \u2227 \u00acq) Mine: \u00ac(p \u2192 q) \u2261 p \u2227 \u00acq Mine: p \u2228 (\u00acp \u2227 q) \u2261 p \u2228 q See Section 3.1 No.30 Prove Logical Equivalence: Truth table or developing a series of logical equivalences. Prove Not Logically Equivalent: (Simplify first) and find a counterexample. Propositional Satisfiability: An assignment of truth values that makes it true. Truth table, or whether its negation is a tautology. (or say whether itself is a contradiction?) Predicates and Qualifiers Predicate: Statements involving variables, the variables are called subjects, the other is called a predicate. The statement of P(x) is also called the value of Propositional function P at x. Precondition: Conditions for valid input. Postcondition: Conditions for correct output. Qualification: Express the extent to which a predicate is true over a range of elements. ((Domain / universe) of discourse) / domain: A predicate is true for a variable in a particular domain. Predicate calculus: The area of logic that deals with predicates and quantifiers. Universal qualification: For every element. \u2200x P(x): For all / every x P (x). An element for which P(x) is false is called a counterexample of \u2200x P(x). Existential qualification: For one or more element. \u2203x P(x): There exists an element x in the domain such that P(x). Uniqueness qualification: \u2203!x P(x) or \u2203_1 x P(x) There exists a unique x such that P (x) or There is one and only one x such that P (x). Abbreviated qualifier notation: Use condition for domain. Or use \u2200x P(x) \u2192 Q(x) for using P(x) as condition for domain. Quantifiers (\u2200 and \u2203) have higher precedence than all logical operators from propositional calculus. i.e. They absorb less. Occurrence of variable is bound: Quantifier is used on the variable. All the variables that occur in a propositional function must be bound or set equal to a particular value to turn it into a proposition. Scope of quantifier: The part of a logical expression to which a quantifier is applied. The same letter is often used to represent variables bound by different quantifiers with scopes that do not overlap. Statements involving predicates and quantifiers are logically equivalent: If and only if they have the same truth value no matter which predicates are substituted into these statements and which domain of discourse is used for the variables in these propositional functions. S \u2261 T \u2200x (P(x) \u2227 Q(x)) \u2261 \u2200x P(x) \u2227 \u2200x Q(x) \u2203x (P(x) \u2228 Q(x)) \u2261 \u2203x P(x) \u2228 \u2203x Q(x) De Morgan\u2019s laws for quantifiers: \u00ac\u2200x P(x) \u2261 \u2203x \u00acP(x) \u00ac\u2203x Q(x) \u2261 \u2200x \u00acQ(x) Translating from English into Logical Expression: \u2026 Using Quantifiers in System Specifications: \u2026 Nested Qualifiers Nested quantifiers: One quantifier is within the scope of another. Understanding Statements Involving Nested Quantifiers: \u2026 The order of the quantifiers is important, unless all the quantifiers are universal quantifiers or all are existential quantifiers. Statement Condition for true \u2200x\u2200y P(x, y) P (x, y) is true for every pair x, y. \u2200y\u2200x P(x, y) \u2200x\u2203y P(x, y) For every x there is a y for which P (x, y) is true. \u2203x\u2200y P(x, y) There is an x for which P (x, y) is true for every y. \u2203x\u2203y P(x, y) There is a pair x, y for which P (x, y) is true. \u2203y\u2203x P (x, y) Translating: \u2026 Negation: Recursively\u2026 Normal forms (Disjunctive / conjunctive) clause: Disjunctions / Conjunctions with literals (optionally negated) as its disjuncts / conjuncts. Disjunctive / Conjunctive normal form (DNF / CNF): A disjunction / conjunction with conjunctive / disjunctive clauses as its disjuncts / conjuncts. Full disjunctive / conjuctive normal form: Each of its variables appears exactly once in every clause. Obtained by adding \u2227 (\u00acP(x) \u2228 P(x)) to its conjuction disjuncts / \u2228 (\u00acP(x) \u2227 P(x)) to its disjunction conjuncts. Prenex normal form: Qualifier\u2026Predicate_without_quaulifier Inference Argument: a sequence of propositions. Premise: All but the final proposition in the argument. Conclusion: The final proposition in the argument. Valid argument: An argument is valid if the truth of all its premises implies that the conclusion is true. Fallacy: Common forms of incorrect reasoning which lead to invalid arguments. Argument form: A sequence of compound propositions involving propositional variables. Valid argument form: An argument form is valid no matter which particular propositions are substituted for the propositional variables in its premises, the conclusion is true if the premises are all true. The key to showing that an argument in propositional logic is valid is to show that its argument form is valid. Using truth table to show that an argument form is valid is tedious. Modus ponens (Mode that affirms) / the law of detachment: (p \u2227 (p \u2192 q)) \u2192 q Argument can be valid, but if any of its premise is false, its conclusion is false. Tautology Name (p \u2227 (p \u2192 q)) \u2192 q Modus ponens (\u00acq \u2227 (p \u2192 q)) \u2192 \u00acp Modus tollens ((p \u2192 q) \u2227 (q \u2192 r)) \u2192 (p \u2192 r) Hypothetical syllogism ((p \u2228 q) \u2227 \u00acp) \u2192 q Disjunctive syllogism p \u2192 (p \u2228 q) Addition (p \u2227 q) \u2192 p Simplification ((p) \u2227 (q)) \u2192 (p \u2227 q) Conjunction ((p \u2228 q) \u2227 (\u00acp \u2228 r)) \u2192 (q \u2228 r) Resolution p \u2227 q \u2192 (r \u2192 s) \u2261 p \u2227 q \u2227 r \u2192 s, r is additional premise. Resolution is commonly used: ((p \u2228 q) \u2227 (\u00acp \u2228 r)) \u2192 (q \u2228 r) Also rewrite premises into separate clauses can help. Fallacy Affirming the conclusion ((p \u2192 q) \u2227 q) \u2192 p is not a tautology. Denying the hypothesis ((p \u2192 q) \u2227 \u00acp) \u2192 \u00acq is not tautology. Begging the question (Circular reasoning) one or more steps of a proof are based on the truth of the statement being proved. Rules of inference for quantified statements Rule of Inference Name \u2200x P(x) \u2234 P(c) Universal instantiation P(c) for an arbitrary c \u2234 \u2200x P(x) Universal generalization \u2203x P(x) \u2234 P(c) for some element c Existential instantiation P(c) for some element c \u2234 \u2203x P(x) Existential generalization Universal modus ponens: \u2200x (P(x) \u2192 Q(x)), P(a), \u2234 Q(a) Universal modus tollens: \u2200x (P(x) \u2192 Q(x)), \u00acQ(a), \u2234 \u00acP(a) Introduction to Proofs Theorem / Fact / Result (\u5b9a\u7406): A statement that can be shown to be true. Propositions: Less important theorems. Axiom / Postulate (\u516c\u7406): Statements we assume to be true. Lemma (\u5f15\u7406): A less important theorem that is helpful in the proof of other results. (plural lemmas or lemmata) Corollary (\u63a8\u8bba): Theorem that can be established directly from a theorem that has been proved. Conjecture (\u731c\u60f3): Statement that is being proposed to be a true statement. Direct Proof: Direct proof of a conditional statement p \u2192 q is constructed when the first step is the assumption that p is true; subsequent steps are constructed using rules of inference, with the final step showing that q must also be true. Indirect Proofs: Proofs that do not start with the premises and end with the conclusion. Proof by Contraposition (\u8bc1\u660e\u9006\u5426\u547d\u9898): We take \u00acq as a premise, and using axioms, definitions, and previously proven theorems, together with rules of inference, we show that \u00acp must follow. Vacuous Proofs: If we can show that p is false, then we have a proof of the conditional statement p \u2192 q. Trivial Proof: By showing that q is true, it follows that p \u2192 q must also be true. Proofs by Contradiction (\u53cd\u8bc1): We can prove that p is true if we can show that \u00acp \u2192 (r \u2227 \u00acr) is true for some proposition r. i.e. r is premise and \u00acr is proved if \u00acp. To rewrite a proof by contraposition of p \u2192 q as a proof by contradiction, we suppose that both p and \u00acq are true. Then, we use the steps from the proof of \u00acq \u2192 \u00acp to show that \u00acp is true. Proofs of Equivalence: (p \u2194 q) \u2194 (p \u2192 q) \u2227 (q \u2192 p). (if and only if)(p_1 \u2194 p_2 \u2194 \u00b7\u00b7\u00b7 \u2194 p_n) \u2194 (p_1 \u2192 p_2) \u2227 (p_2 \u2192 p_3) \u2227 \u00b7\u00b7\u00b7 \u2227 (p_n \u2192 p_1). Counterexamples: To show that a statement of the form \u2200x P(x) is false, we only need to find a counterexample. Mistakes in proofs: Division by zero, Affirming the conclusion, Denying the hypothesis, Begging the question. Proof Methods and Strategy Exhaustive Proof (Proofs by exhaustion): [(p_1 \u2228 p_2 \u2228 \u00b7 \u00b7 \u00b7 \u2228 p_n) \u2192 q] \u2194 [(p_1 \u2192 q) \u2227 (p_2 \u2192 q) \u2227 \u00b7 \u00b7 \u00b7 \u2227 (p_n \u2192 q)] Eliminate cases when using exhaustive proof. Without loss of generality (WLOG): Other cases can be proved with the same method as this case. Exhaustive proof can be invalid if not all the cases are covered. Existence proof: A proof of a proposition of the form \u2203x P(x). Constructive: Given by finding a witness. Nonconstructive: Some other way, e.g. negation leads to contradiction. Uniqueness Proof: Assert that there is exactly one element with this property. \u2203x(P(x) \u2227 \u2200y(y = x \u2192 \u00acP(y))). Forward and backward reasoning: \u2026 Adapting existing proofs: \u2026 Look for counterexamples: \u2026 Tiling: Color the board with n colors. If top-right and bottom-left square is removed, the number of squares each color is unequal, but eachdomino / polymino must cover exactly one square of each color, so tiling is impossible. Set Set: A set is an unordered collection of objects. a \u2208 A, a \u2209 A. Roster method: List all the members of a set. Can use \u2026 when the general pattern is obvious. Set builder pattern: {x \u2208 set | predicate(x)} or {x | predicate(x), x \u2208 set} Name | Description \u2115 | the set of natural numbers \u2124 | the set of integers \u2124 | the set of positive integers \u211a | the set of rational numbers \u211d | the set of real numbers \u211d^+ \u211d^+ | the set of positive real numbers \u2102 | the set of complex numbers Interval | Set a, b | {x | a \u2264 x \u2264 b} [a, b) | {x | a \u2264 x < b} (a, b] | {x | a < x \u2264 b} (a, b) (Open) | {x | a < x < b} Equal: Two sets are equal if and only if they have the same elements. \u2200x(x \u2208 A \u2194 x \u2208 B). A = B. The order and repetition of elements does not matter: {5, 3, 3, 1} = {1, 3, 5} Empty/null set: \u2205 Singleton set: Set with a single element. \u2205 is not {\u2205}. Venn diagram: Rectangle for universal set, circle for set, dot for element. Subset: The set A is a subset of B if and only if every element of A is also an element of B. If and only if \u2200x(x \u2208 A \u2192 x \u2208 B). A \u2286 B. Showing that A is a Subset of B: To show that A \u2286 B, show that if x belongs to A then x also belongs to B. Showing that A is Not a Subset of B: To show that A \\not\\subseteq \\not\\subseteq B, find a single x \u2208 A such that x \u2209 B. For every set S, \u2205 \u2286 S and S \u2286 S. Proper subset: A \u2286 B and A \u2260 B. A \u2282 B. Showing Two Sets are Equal: To show that two sets A and B are equal, show that A \u2286 B and B \u2286 A. Size of a set: If there are exactly n distinct elements in S where n is a nonnegative integer, then S is a finite set and that n is the cardinality of S, written as |S|. Infinite set: A set is said to be infinite if it is not finite. Power set: Given a set S, the power set of S is the set of all subsets of the set S. \\mathcal{P}(S) \\mathcal{P}(S) . e.g. P(A) \u2208 P(B) \u21d2 P(A) \u2286 B \u21d2 A \u2208 B We can reconstruct the original set from the union of all element sets in its power set. So power set uniquely identifies a set. \u2205 cannot be a power set. Ordered n-tuple: The ordered collection that has $a_1 $ as its first element, a_2 a_2 as its second element, \u2026 , and a_n a_n as its nth element. ( a_1 a_1 , a_2 a_2 , \u2026 , a_n a_n ). Cartesian Product: A \u00d7 B = {(a, b) | a \u2208 A \u2227 b \u2208 B}.|A \u00d7 B| = |A||B| A_1 \u00d7 A_2 \u00d7 \u2026 \u00d7 A_n A_1 \u00d7 A_2 \u00d7 \u2026 \u00d7 A_n = {( a_1, a_2, \u2026 , a_n a_1, a_2, \u2026 , a_n ) | a_i \u2208 A_i a_i \u2208 A_i for i = 1, 2, \u2026 , n}. Relation: A subset R of the Cartesian product A \u00d7 B is called a relation. Using Set Notation with Quantifiers: \u2200x\u2208 S(P (x)) is shorthand for \u2200x(x \u2208 S \u2192 P (x)). Truth set: The truth set of P to be the set of elements x in D for which P(x) is true. Set Operations Union: The union of the sets A and B, denoted by A \u222a B, is the set that contains those elements that are either in A or in B, or in both. A \u222a B = {x | x \u2208 A \u2228 x \u2208 B}. Intersection: The intersection of the sets A and B, denoted by A \u2229 B, is the set containing those elements in both A and B. A \u2229 B = {x | x \u2208 A \u2227 x \u2208 B}. Disjoint: Two sets are called disjoint if their intersection is the empty set. Difference: The difference of A and B, denoted by A \u2212 B (or A \\ B), is the set containing those elements that are in A but not in B. The difference of A and B is also called the complement of B with respect to A. A \u2212 B = {x | x \u2208 A \u2227 x \u2208 / B}. Complement: Let U be the universal set. The complement of the set A, denoted by \\overline{A} \\overline{A} , is the complement of A with respect to U. Therefore, the complement of the set A is U \u2212 A. A \u2212 B = A \u2229 \\overline{B} \\overline{B} . Set Identities: Identity Name A \u2229 U = A Identity laws A \u222a\u2205= A A \u222a U = U Domination laws A \u2229\u2205=\u2205 A \u222a A = A Idempotent laws A \u2229 A = A \\overline{(\\overline{A})} = A \\overline{(\\overline{A})} = A Complementation law A \u222a B = B \u222a A Commutative laws A \u2229 B = B \u2229 A A \u222a (B \u222a C) = (A \u222a B) \u222a C Associative laws A \u2229 (B \u2229 C) = (A \u2229 B) \u2229 C A \u222a (B \u2229 C) = (A \u222a B) \u2229 (A \u222a C) Distributive laws A \u2229 (B \u222a C) = (A \u2229 B) \u222a (A \u2229 C) \\overline{A \u2229 B} = \\overline{A} \u222a \\overline{B} \\overline{A \u2229 B} = \\overline{A} \u222a \\overline{B} De Morgan\u2019s laws $\\overline{A \u222a B} = $ \\overline{A}\u2229\\overline{B} \\overline{A}\u2229\\overline{B} A \u222a (A \u2229 B) = A Absorption laws A \u2229 (A \u222a B) = A A \u2229 \\overline{A} \\overline{A} =\u2205 Complement laws A \u222a \\overline{A} \\overline{A} = U Prove set identity: Use set builder pattern and definition. Membership table: Set identities can also be proved using membership tables. We consider each combination of sets that an element can belong to and verify that elements in the same combinations of sets belong to both the sets in the identity. To indicate that an element is in a set, a 1 is used; to indicate that an element is not in a set, a 0 is used. Generalized Unions and Intersections: Because unions and intersections of sets satisfy associative laws, the sets A \u222a B \u222a C and A \u2229 B \u2229 C are well defined. The union of a collection of sets: The set that contains those elements that are members of at least one set in the collection. \\bigcup_{i=1}^{n}{A_i} \\bigcup_{i=1}^{n}{A_i} The intersection of a collection of sets is the set that contains those elements that are members of all the sets in the collection. \\bigcap_{i=1}^{n}{A_i} \\bigcap_{i=1}^{n}{A_i} Computer Representation of Sets: One of the methods is to use bit strings. Function Function/Mapping/Transformation: Let A and B be nonempty sets. A function f from A to B is an assignment of exactly one element of B to each element of A. f : A \u2192 B. f(a) = b. If f is a function from A to B, we say that A is the domain of f and B is the codomain of f. If f (a) = b, we say that b is the image of a and a is a preimage of b. The range, or image, of f is the set of all images of elements of A. Also, if f is a function from A to B, we say that f maps A to B. Two functions are equal: When they have the same domain, have the same codomain, and map each element of their common domain to the same element in their common codomain. Let f_1 f_1 and f_2 f_2 be functions from A to \\mathbb{R} \\mathbb{R} , then $f_1 + f_2 $ and f_1 f_2 f_1 f_2 are also functions from A to \\mathbb{R} \\mathbb{R} defined for all x \u2208 A by : (f_1 + f_2)(x) = f_1(x) + f_2(x) \\\\ (f_1f_2)(x) = f_1(x)f_2(x) (f_1 + f_2)(x) = f_1(x) + f_2(x) \\\\ (f_1f_2)(x) = f_1(x)f_2(x) The image of S under the function f: f (S) = {t | \u2203s \u2208 S (t = f (s))} = {f (s)| s \u2208 S}. One-to-one/injection (\u5355\u5c04): if and only if f (a) = f (b) implies that a = b for all a and b in the domain of f. A function is said to be injective if it is one-to-one. \\forall a\\forall b(f(a) = f(b) \\rightarrow a = b) \\forall a\\forall b(f(a) = f(b) \\rightarrow a = b) Increasing if f (x) \u2264 f (y), and strictly increasing: if f (x) <f (y), whenever x < y and x and y are in the domain of f. Decreasing if f (x) \u2265 f (y), and strictly decreasing if f (x) > f (y), whenever x < y and x and y are in the domain of f. Onto/surjection (\u6ee1\u5c04): if and only if for every element b \u2208 B there is an element a \u2208 A with f (a) = b. A function f is called surjective if it is onto. One-to-one correspondence / bijection (\u53cc\u5c04): if it is both one-to-one and onto. We also say that such a function is bijective. To show that f is injective: Show that if f (x) = f (y) for arbitrary x, y \u2208 A with x \u2260 y, then x = y. To show that f is not injective: Find particular elements x, y \u2208 A such that x \u2260 y and f (x) = f (y). To show that f is surjective: Consider an arbitrary element y \u2208 B and find an element x \u2208 A such that f (x) = y. To show that f is not surjective: Find a particular y \u2208 B such that f (x) \u2260 y for all x \u2208 A. Inverse function: Let f be a one-to-one correspondence from the set A to the set B. The inverse function of f is the function that assigns to an element b belonging to B the unique element a in A such that f(a) = b. The inverse function of f is denoted by f^{\u22121} f^{\u22121} . Hence, f^{\u22121}(b) = a f^{\u22121}(b) = a when f(a) = b. Composition of functions: Let g be a function from the set A to the set B and let f be a function from the set B to the set C. The composition of the functions f and g, denoted for all a \u2208 A by f \u25e6 g, is defined by (f \u25e6 g)(a) = f(g(a)) (f \u25e6 g)(a) = f(g(a)) The graphs of functions: \u2026 Some important functions: Floor(x): [x] Sequence Sequence: A function from a subset of the set of integers (usually either the set {0, 1, 2, \u2026} or the set {1, 2, 3, \u2026}) to a set S. We use the notation a_n a_n to denote the image of the integer n. We call a_n a_n a term of the sequence. Geometric progression: a, ar, ar^2,\u2026 , ar^n a, ar, ar^2,\u2026 , ar^n , \u2026 where a is initial term, r is common ratio. Arithmetic progression: a, a + d, a + 2d, \u2026 , a + nd, \u2026 where a is initial term, d is common difference. String: Finite sequence, where length is the number of terms in the string. Empty string: \u03bb. Recurrence relation: An equation that expresses a_n a_n in terms of one or more of the previous terms of the sequence. Initial condition: Specify the terms that precede the first term where the recurrence relation takes effect. Fibonacci sequence: f_0, f_1, f_2 f_0, f_1, f_2 ,\u2026 , is defined by the initial conditions f_0 = 0, f_1 = 1 f_0 = 0, f_1 = 1 , and the recurrence relation f_n = f_{n\u22121} + f{n\u22122} f_n = f_{n\u22121} + f{n\u22122} . Closed formula: We say that we have solved the recurrence relation together with the initial conditions when we find an explicit formula, called a closed formula, for the terms of the sequence. Finding closed formula: Iteration, forward substitution or backward substitution. Lucas sequence: Fibonacci sequence with different initial condition. Summation notation: \\sum_{i=m}^n{f(i)} \\sum_{i=m}^n{f(i)} where i is index of summation, m is lower limit, n is upper limit. \\sum_{i=0}^n(ar^i)=\\frac{ar^{n+1}-a}{r-1},r{\\neq}1 \\\\ \\sum_{i=0}^ni=\\frac{n(n+1)}{2} \\\\ \\sum_{i=0}^ni^2=\\frac{n(n+1)(2n+1)}{6} \\\\ \\sum_{i=0}^ni^3=\\frac{n^2(n+1)^2}{4} \\\\ \\sum_{i=0}^{\\infty}x^i,|x|<1=\\frac{1}{1-x} \\\\ \\sum_{i=0}^{\\infty}ix^{i-1},|x|<1=\\frac{1}{(1-x)^2} \\sum_{i=0}^n(ar^i)=\\frac{ar^{n+1}-a}{r-1},r{\\neq}1 \\\\ \\sum_{i=0}^ni=\\frac{n(n+1)}{2} \\\\ \\sum_{i=0}^ni^2=\\frac{n(n+1)(2n+1)}{6} \\\\ \\sum_{i=0}^ni^3=\\frac{n^2(n+1)^2}{4} \\\\ \\sum_{i=0}^{\\infty}x^i,|x|<1=\\frac{1}{1-x} \\\\ \\sum_{i=0}^{\\infty}ix^{i-1},|x|<1=\\frac{1}{(1-x)^2} Cardinality of Sets Same cardinality: If and only if there is a one-to-one correspondence from A to B. |A| = |B| Less cardinality: If there is a one-to-one function from A to B, the cardinality of A is less than or the same as the cardinality of B. |A| \u2264 |B|. When |A| \u2264 |B| and A and B have different cardinality, we say that the cardinality of A is less than the cardinality of B. |A| < |B|. Countable set: A set that is either finite or has the same cardinality as the set of positive integers is called countable. Uncountable set: A set that is not countable is called uncountable. When an infinite set S is countable, we denote the cardinality of S by \\aleph_0 \\aleph_0 (where \u05d0 is aleph). |S| = \\aleph_0 \\aleph_0 . S has cardinality \u201caleph null\u201d. Prove by showing one-to-one correspondence, or can be listed. \u2124 is countable: f(n) = n / 2, when n is even; -(n - 1) / 2, when n is odd. \u211a^+ \u211a^+ is countable: Use Cantor Diagonalization Argument for listing. \u211d is uncountable: 0.d_i, d_i = 0 0.d_i, d_i = 0 , if d_{ii} \\neq 0 d_{ii} \\neq 0 ; 1, if d_{ii} = 0 d_{ii} = 0 cannot be listed. If A and B are countable sets, then A \u222a B is also countable. Schr\u00f6der-Bernstein Theorem: If A and B are sets with |A| \u2264 |B| and |B| \u2264 |A|, then |A| = |B|. In other words, if there are one-to-one functions f from A to B and g from B to A, then there is a one-to-one correspondence between A and B. Can use two different functions to prove same cardinality, according to Schr\u00f6der-Bernstein Theorem. Computable / uncomputable function: If there is a computer program in some programming language that finds the values of this function. If a function is not computable we say it is uncomputable. Proof for existence of uncomputable function: Programs are countable (Binary can be listed), but functions are not, e.g. \u2124 -> \u2124 is not. The continuum hypothesis: (We have | P(\u2124^+) P(\u2124^+) | = 2^{\\aleph_0} 2^{\\aleph_0} = |\u211d| = c.) There is no cardinality such that it is greater than \\aleph_0 \\aleph_0 and less than c, or say, c = \\aleph_1 \\aleph_1 in sequence \\aleph_0, \\aleph_1, \\aleph_2 \\aleph_0, \\aleph_1, \\aleph_2 , .... Proving power set related cardinality: Use bit string for element sets of power set. (0, 1) and decimal representation rocks for proof. |(0, 1)| = |\u211d|, can be proved with Schr\u00f6der-Bernstein Theorem. Counting The Basics of Counting The product rule: Suppose that a procedure can be broken down into a sequence of two tasks. If there are n_1 n_1 ways to do the first task and for each of these ways of doing the first task, there are n_2 n_2 ways to do the second task, then there are n_1{\\cdot}n_2 n_1{\\cdot}n_2 ways to do the procedure. The sum rule: If a task can be done either in one of n_1 n_1 ways or in one of n_2 n_2 ways, where none of the set of n_1 n_1 ways is the same as any of the set of n_2 n_2 ways, then there are n_1 + n_2 n_1 + n_2 ways to do the task. The subtraction rule: If a task can be done in either n_1 n_1 ways or n_2 n_2 ways, then the number of ways to do the task is n_1 + n_2 n_1 + n_2 minus the number of ways to do the task that are common to the two different ways. The division rule: There are n/d ways to do a task if it can be done using a procedure that can be carried out in n ways, and for every way w, exactly d of the n ways correspond to way w. Counting problems can be solved using tree diagrams. The Pigeonhole Principle The pigeonhole principle: If k k is a positive integer and k + 1 k + 1 \u200b or more objects are placed into k k boxes, then there is at least one box containing two or more of the objects. Corollary 1: A function f from a set with k + 1 or more elements to a set with k elements is not one-to-one. The generalized pigeonhole principle: If N N objects are placed into k k \u200b boxes, then there is at least one box containing at least \u2308N/k\u2309 \u2308N/k\u2309 objects. Reverse minimum: (m - 1) * k + 1 Elegant applications: \u2026 Subsequence: Picking elements while the original order is preserved. Theorem: Every sequence of n^2+1 n^2+1 distinct real numbers contains a subsequence of length n+1 that is either strictly increasing or strictly decreasing. The Ramsey number R(m, n), where m and n are positive integers greater than or equal to 2, denotes the minimum number of people at a party such that there are either m mutual friends or n mutual enemies, assuming that every pair of people at the party are friends or enemies. Permutations and Combinations If n is a positive integer and r is an integer with 1 \u2264 r \u2264 n, then there are P(n, r) = n(n \u2212 1)(n \u2212 2) \u2026 (n \u2212 r + 1) = n! / (n - r)! r-permutations of a set with n distinct elements. P (n, 0) = 1 The number of r-combinations of a set with n elements, where n is a nonnegative integer and r is an integer with 0 \u2264 r \u2264 n, equals C(n, r) = n! / (r!(n \u2212 r)!). Binomial coefficient: (n, r)^T (n, r)^T = C(n, r). P (n, r) = C(n, r) \u00b7 P (r, r). C(n, r) = C(n, n \u2212 r). A combinatorial proof of an identity is a proof that uses counting arguments to prove that both sides of the identity count the same objects but in different ways, or a proof that is based on showing that there is a bijection between the sets of objects counted by the two sides of the identity. These two types of proofs are called double counting proofs and bijective proofs, respectively. Binomial Coefficient The binomial theorem: (x+y)^n=\\sum_{j=0}^{n}\\binom{n}{j}x^{n-j}y^j\\\\ \\sum_{k=0}^{n}\\binom{n}{k}=(1+1)^n=2^n\\\\ \\sum_{k=0}^{n}(-1)^k\\binom{n}{k}=(-1+1)^n=0\\\\ \\sum_{k=0}^{n}2^k\\binom{n}{k}=(2+1)^n=3^n (x+y)^n=\\sum_{j=0}^{n}\\binom{n}{j}x^{n-j}y^j\\\\ \\sum_{k=0}^{n}\\binom{n}{k}=(1+1)^n=2^n\\\\ \\sum_{k=0}^{n}(-1)^k\\binom{n}{k}=(-1+1)^n=0\\\\ \\sum_{k=0}^{n}2^k\\binom{n}{k}=(2+1)^n=3^n Pascal\u2019s identity: \\binom{n+1}{k}=\\binom{n}{k-1}+\\binom{n}{k} \\binom{n+1}{k}=\\binom{n}{k-1}+\\binom{n}{k} So Pascal\u2019s triangle. Vandermonde\u2019s identity: \\binom{m+n}{r}=\\sum_{k=0}^{r}\\binom{m}{r-k}\\binom{n}{k}\\\\ \\binom{2n}{n}=\\sum_{k=0}^{n}\\binom{n}{n-k}\\binom{n}{k}=\\sum_{k=0}^{n}\\binom{n}{k}^2\\\\ \\binom{n+1}{r+1}=\\sum_{j=r}^{n}\\binom{j}{r} \\binom{m+n}{r}=\\sum_{k=0}^{r}\\binom{m}{r-k}\\binom{n}{k}\\\\ \\binom{2n}{n}=\\sum_{k=0}^{n}\\binom{n}{n-k}\\binom{n}{k}=\\sum_{k=0}^{n}\\binom{n}{k}^2\\\\ \\binom{n+1}{r+1}=\\sum_{j=r}^{n}\\binom{j}{r} Prove by combinatorial argument: Use choosing subset, use bit string. Generalized Permutations and Combinations The number of r-permutations of a set of n objects with repetition allowed is n^r n^r . There are C(n + r \u2212 1, r) = C(n + r \u2212 1, n \u2212 1) r-combinations from a set with n elements when repetition of elements is allowed. Proved by stars and bars. Method: Stars and bars abstraction. P426 Counting solutions to equation: Notice non-negative or positive integer, the latter implies x_i \\ge 1 x_i \\ge 1 . P427 Nested loop P427 Word letter reordering: The number of different permutations of n objects, where there are n_1 n_1 indistinguishable objects of type 1, n_2 n_2 indistinguishable objects of type 2, \u2026 , and n_k n_k indistinguishable objects of type k, is \\frac{n!}{n_1!n_2! \u00b7\u00b7\u00b7 n_k!} \\frac{n!}{n_1!n_2! \u00b7\u00b7\u00b7 n_k!} Distinguishable objects and distinguishable boxes: The number of ways to distribute n distinguishable objects into k distinguishable boxes so that n_i n_i objects are placed into box i, i = 1, 2, \u2026 , k, equals \\frac{n!}{n_1!n_2!\u00b7\u00b7\u00b7n_k!} \\frac{n!}{n_1!n_2!\u00b7\u00b7\u00b7n_k!} Indistinguishable objects and distinguishable boxes: The number of ways to distribute n indistinguishable objects into k distinguishable boxes so that n_i objects are placed into box i, i = 1, 2, \u2026 , k, equals the n-combination from a set with k elements when repetition is allowed, according to its proof, C(k + n - 1, n). Distinguishable objects and indistinguishable boxes: Can enumerate by n into m, \u2026 , but no simple closed formula. Stirling numbers of the second kind: S(n, j) denote the number of ways to distribute n distinguishable objects into j indistinguishable boxes so that no box is empty. Then the number of ways to distribute n distinguishable objects into k indistinguishable boxes equals \\sum_{j=1}^{k}S(n,j) \\sum_{j=1}^{k}S(n,j) . S(n,j)=\\frac{1}{j!}\\sum_{i=0}{j-1}(-1)^i\\binom{j}{i}(j-i)^n S(n,j)=\\frac{1}{j!}\\sum_{i=0}{j-1}(-1)^i\\binom{j}{i}(j-i)^n Indistinguishable objects and indistinguishable boxes: List partition by decreasing order. If p_k(n) p_k(n) is the number of partitions of n into at most k positive integers, then there are p_k(n) p_k(n) ways to distribute n indistinguishable objects into k indistinguishable boxes. Generating Permutations and Combinations Generating permutations: Lexicographic. Next permutation: Find last pair such that a_j < a_{j+1} a_j < a_{j+1} , swap minimum of a_{j+1}, \u2026, a_n a_{j+1}, \u2026, a_n that is greater than a_j a_j with a_j a_j , and list remaining in increasing order. Generating subsets: Use bit string. Generating r-combinations: Lexicographic. Next permutation of {1, 2, \u2026 , n}: Find last a_i a_i such that a_i{\\ne} a_i{\\ne} n-r+i, replace a_i a_i with a_i+1 a_i+1 , a_j a_j with a_i+j-i+1 a_i+j-i+1 (increasing from a_i+1 a_i+1 ). (This is natural.) Applications of Recurrence Relations Recurrence relation: A rule for determining subsequent terms from those that precede them. Solution of a recurrence relation: A sequence is called a solution of a recurrence relation if its terms satisfy the recurrence relation. Rabbits: f_n = f_{n-1} + f_{n-2} f_n = f_{n-1} + f_{n-2} . Hanoi: H_n=2H_{n-1}+1, H_1=1 H_n=2H_{n-1}+1, H_1=1 . Bit string without two consecutive zeros: a_n = a_{n-1} + a_{n-2} a_n = a_{n-1} + a_{n-2} . Dynamic programming. Solving Linear Recurrence Relations Linear homogeneous recurrence relation of degree k k with constant coefficients: A recurrence relation of the form a_n=c_1a_{n-1}+c_2a_{n-2}+\u00b7\u00b7\u00b7+c_ka_{n-k}, a_n=c_1a_{n-1}+c_2a_{n-2}+\u00b7\u00b7\u00b7+c_ka_{n-k}, where c_1, c_2, \u2026, c_k c_1, c_2, \u2026, c_k are real numbers, and c_k \\neq 0 c_k \\neq 0 . Characteristic equation: Suppose a_n=r^n a_n=r^n , then r^k-c_1r^{k-1}-c_2r^{k-2}-...-c_{k-1}r-c_k=0 r^k-c_1r^{k-1}-c_2r^{k-2}-...-c_{k-1}r-c_k=0 is the characteristic equation. The solutions are called characteristic roots. Theorem 1: Let c_1 c_1 and c_2 c_2 be real numbers. Suppose that r^2-c_1r-c_2=0 r^2-c_1r-c_2=0 has two distinct roots r_1 r_1 and r_2 r_2 . Then the sequence \\{a_n\\} \\{a_n\\} is a solution of the recurrence relation a_n=c_1a_{n-1}+c_2a_{n-2} a_n=c_1a_{n-1}+c_2a_{n-2} if and only if a_n=\u03b1_1r_1^n+\u03b1_2r_2^n a_n=\u03b1_1r_1^n+\u03b1_2r_2^n for n n = 0, 1, 2, \u2026, where \u03b1_1 \u03b1_1 and \u03b1_2 \u03b1_2 are constants. Theorem 2: Let c_1 c_1 and c_2 c_2 be real numbers with c_2 \\neq 0 c_2 \\neq 0 . Suppose that r^2-c_1r-c_2=0 r^2-c_1r-c_2=0 has only one root r_0 r_0 . A sequence \\{a_n\\} \\{a_n\\} is a solution of the recurrence relation a_n=c_1a_{n-1}+c_2a_{n-2} a_n=c_1a_{n-1}+c_2a_{n-2} if and only if a_n=\u03b1_1r_0^n+\u03b1_2nr_0^n a_n=\u03b1_1r_0^n+\u03b1_2nr_0^n , for n n = 0, 1, 2, \u2026, where \u03b1_1 \u03b1_1 and \u03b1_2 \u03b1_2 are constants. Theorem 3: Let c_1, c_2, ..., c_k c_1, c_2, ..., c_k be real numbers. Suppose that the characteristic equation r^k-c_1r^{k-1}-...-c_k=0 r^k-c_1r^{k-1}-...-c_k=0 has k k distinct roots r_1, r_2, ..., r_k r_1, r_2, ..., r_k . Then a sequence \\{a_n\\} \\{a_n\\} is a solution of the recurrence relation a^n=c_1a^{n-1}+c_2a^{n-2}+...+c_ka^{n-k} a^n=c_1a^{n-1}+c_2a^{n-2}+...+c_ka^{n-k} if and only if a^n = \u03b1_1r_1^n+\u03b1_2r_2^n+\u00b7\u00b7\u00b7+\u03b1_kr_k^n a^n = \u03b1_1r_1^n+\u03b1_2r_2^n+\u00b7\u00b7\u00b7+\u03b1_kr_k^n for n n = 0, 1, 2, \u2026, where \u03b1_1, \u03b1_2, ..., \u03b1_k \u03b1_1, \u03b1_2, ..., \u03b1_k are constants. Theorem 4: Let c_1, c_2, \u2026, c_k c_1, c_2, \u2026, c_k be real numbers. Suppose that the characteristic equation r^k - c_1r^k-1 - \u00b7\u00b7\u00b7 - c_k = 0 r^k - c_1r^k-1 - \u00b7\u00b7\u00b7 - c_k = 0 has t t distinct roots r_1, r_2, \u2026, r_t r_1, r_2, \u2026, r_t with multiplicities m_1, m_2, \u2026, m_t m_1, m_2, \u2026, m_t , respectively, so that m_i\\geq1 m_i\\geq1 for i i = 1, 2, \u2026, t and m_1+m_2+\u00b7\u00b7\u00b7+m_t=k m_1+m_2+\u00b7\u00b7\u00b7+m_t=k . Then a sequence \\{a_n\\} \\{a_n\\} is a solution of the recurrence relation a_n=c_1a_{n-1}+c_2a_{n-2}+\u00b7\u00b7\u00b7+c_ka_{n-k} a_n=c_1a_{n-1}+c_2a_{n-2}+\u00b7\u00b7\u00b7+c_ka_{n-k} if and only if a_n=(\u03b1_{1, 0}+\u03b1_{1, 1}n+\u00b7\u00b7\u00b7+\u03b1_{1, m_1-1}n^{m_1-1})r_1^n\\\\ +(\u03b1_{2, 0}+\u03b1_{2, 1}n+\u00b7\u00b7\u00b7+\u03b1_{2, m_2-1}n^{m_2-1})r_2^n\\\\ +\u00b7\u00b7\u00b7+(\u03b1_{t, 0}+\u03b1_{t, 1}^n+\u00b7\u00b7\u00b7+\u03b1_{t, m_t-1}n^{m_t-1})r_t^n a_n=(\u03b1_{1, 0}+\u03b1_{1, 1}n+\u00b7\u00b7\u00b7+\u03b1_{1, m_1-1}n^{m_1-1})r_1^n\\\\ +(\u03b1_{2, 0}+\u03b1_{2, 1}n+\u00b7\u00b7\u00b7+\u03b1_{2, m_2-1}n^{m_2-1})r_2^n\\\\ +\u00b7\u00b7\u00b7+(\u03b1_{t, 0}+\u03b1_{t, 1}^n+\u00b7\u00b7\u00b7+\u03b1_{t, m_t-1}n^{m_t-1})r_t^n for n n = 0, 1, 2, \u2026, where \u03b1_{i, j} \u03b1_{i, j} are constants for 1\\leq{i}\\leq{t} 1\\leq{i}\\leq{t} and 0\\leq{j}\\leq{m}_i-1 0\\leq{j}\\leq{m}_i-1 . Theorem 5: If \\{a_n^{(p)}\\} \\{a_n^{(p)}\\} is a particular solution of the nonhomogeneous linear recurrence relation with constant coefficients a_n=c_1a_{n-1}+c_2a_{n-2}+...+c_ka_{n-k}+F(n), a_n=c_1a_{n-1}+c_2a_{n-2}+...+c_ka_{n-k}+F(n), then every solution is of the form \\{a_n^{(p)}+a_n^{(h)}\\} \\{a_n^{(p)}+a_n^{(h)}\\} , where \\{a_n^{(h)}\\} \\{a_n^{(h)}\\} is a solution of the associated homogeneous recurrence relation a_n=c_1a_{n-1}+c_2a_{n-2}+...+c_ka_{n-k}. a_n=c_1a_{n-1}+c_2a_{n-2}+...+c_ka_{n-k}. Theorem 6: If F(n)=(b_tn^t+b_{t-1}n^{t-1}+...+b_1n+b_0)s^n, F(n)=(b_tn^t+b_{t-1}n^{t-1}+...+b_1n+b_0)s^n, when s s is not a root of the characteristic equation of the associated linear homogeneous recurrence relation, there is a particular solution of the form (p_tn^t+p_{t-1}n^{t-1}+...+p_1n+p_0)s^n (p_tn^t+p_{t-1}n^{t-1}+...+p_1n+p_0)s^n When s s is a root of this characteristic equation and its multiplicity is m m , there is a particular solution of the form n^m(p_tn^t+p_{t-1}n^{t-1}+...+p_1n+p_0)s^n. n^m(p_tn^t+p_{t-1}n^{t-1}+...+p_1n+p_0)s^n. Generating Functions The (ordinary) generating function for the sequence a_0,a_1,...,a_k a_0,a_1,...,a_k ,... of real numbers is the infinite series G(x)=a_0+a_1x+...+a_kx^k+...=\\sum_{k=0}^\\infty{a}_kx^k. G(x)=a_0+a_1x+...+a_kx^k+...=\\sum_{k=0}^\\infty{a}_kx^k. We can define generating functions for finite sequences of real numbers by setting a_{n+1}=a_{n+2}=...=0 a_{n+1}=a_{n+2}=...=0 f(x)=\\frac{1}{1-x} f(x)=\\frac{1}{1-x} is the generating function of \\{1\\} \\{1\\} for |x|<1. f(x)=\\frac{1}{1-ax} f(x)=\\frac{1}{1-ax} is the generating function of \\{a^n\\} \\{a^n\\} for |ax|<1. Let f(x)=\\sum_{k=0}^\\infty{a}_kx^k f(x)=\\sum_{k=0}^\\infty{a}_kx^k and g(x)=\\sum_{k=0}^\\infty{b}_kx^k g(x)=\\sum_{k=0}^\\infty{b}_kx^k , then f(x)+g(x)=\\sum_{k=0}^\\infty(a_k+b_k)x^k and f(x)g(x)=\\sum_{k=0}^\\infty(\\sum_{j=0}^ka_jb_{k-j})x^k. f(x)+g(x)=\\sum_{k=0}^\\infty(a_k+b_k)x^k and f(x)g(x)=\\sum_{k=0}^\\infty(\\sum_{j=0}^ka_jb_{k-j})x^k. Let u u be a real number and k k a nonnegative integer. Then the extended binomial coefficient \\binom{u}{k} \\binom{u}{k} is defined by \\binom{u}{k}=\\begin{cases} u(u-1)...(u-k+1)/k! &\\text{if } k>0\\\\ 1 &\\text{if } k=0. \\end{cases} \\binom{u}{k}=\\begin{cases} u(u-1)...(u-k+1)/k! &\\text{if } k>0\\\\ 1 &\\text{if } k=0. \\end{cases} \\binom{-n}{r}=(-1)^r\\binom{n+r-1}{r} \\binom{-n}{r}=(-1)^r\\binom{n+r-1}{r} The extended binomial theorem: Let x x be a real number with |x|<1 and let u u be a real number. Then (1+x)^u=\\sum_{k=0}^\\infty\\binom{u}{k}x^k. (1+x)^u=\\sum_{k=0}^\\infty\\binom{u}{k}x^k. Find number of solutions: e_1+e_2+\\cdots+e_n=C, e_1+e_2+\\cdots+e_n=C, l_i\\leq{e}_i\\leq{u_i} l_i\\leq{e}_i\\leq{u_i} , then it is the coefficient of x^C x^C from (x^{l_i}+...+x^{u_i})...(...) (x^{l_i}+...+x^{u_i})...(...) . Form value r r with tokens of value t_i t_i : When order matters, ways of exactly n n tokens is the coefficient of x^r x^r from (x^{t_i}+...)^n (x^{t_i}+...)^n , so for all it is the coefficient of x^r x^r from 1+...+(x^{t_i}+...)^n 1+...+(x^{t_i}+...)^n ; else, it is the coefficient of x^r x^r from (1+...+(x^{t_i})^n)+... (1+...+(x^{t_i})^n)+... . More powerful and constraint-friendly then simple permutation and combination. Solve recurrence relations: Multiply x^n x^n to the recurrence relation. Substitute the multiplied relation into G(x)=\\sum_{k=0}^\\infty{a}_kx^k=..., G(x)=\\sum_{k=0}^\\infty{a}_kx^k=..., solve for G(x) G(x) , then make it a summation to see a_n a_n . Proving identity: Take combination as a coefficient of certain term. Inclusion-Exclusion |A\\cup{B}|=|A|+|B|-|A\\cap{B}|.\\\\ |A\\cup{B}\\cup{C}|=|A|+|B|+|C|-|A\\cap{B}|-|B\\cap{C}|-|C\\cap{A}|+|A\\cap{B}\\cap{C}|\\\\ \u2026 |A\\cup{B}|=|A|+|B|-|A\\cap{B}|.\\\\ |A\\cup{B}\\cup{C}|=|A|+|B|+|C|-|A\\cap{B}|-|B\\cap{C}|-|C\\cap{A}|+|A\\cap{B}\\cap{C}|\\\\ \u2026 Number of integers divisible: \\lfloor{n}/a\\rfloor+\\lfloor{n}/b\\rfloor-\\lfloor{n}/ab\\rfloor. \\lfloor{n}/a\\rfloor+\\lfloor{n}/b\\rfloor-\\lfloor{n}/ab\\rfloor. Applications of Inclusion-Exclusion Asking element count having none of some properties: Use inclusion-exclusion. The number of primes (The sieve of Eratosthenes): A composite number is divisible by a prime smaller than its square root. The number of onto functions: The shouldn\u2019t have properties are not having element i i in the range. Let m m and n n be positive integers with m \\geq{n} m \\geq{n} . Then, there are n^m-C(n,1)(n-1)^m+C(n,2)(n-2)^m-...+(-1)^{n-1}C(n,n-1)1^m n^m-C(n,1)(n-1)^m+C(n,2)(n-2)^m-...+(-1)^{n-1}C(n,n-1)1^m onto functions from a set with m elements to a set with n elements. Derangement: A permutation of objects that leaves no object in its original position. The number of derangements of a set with n n elements is D_n=n![1-\\frac{1}{1!}+\\frac{1}{2!}-\\frac{1}{3!}+...+(-1)^n\\frac{1}{n!}]\\to{n}!e^{-1}. D_n=n![1-\\frac{1}{1!}+\\frac{1}{2!}-\\frac{1}{3!}+...+(-1)^n\\frac{1}{n!}]\\to{n}!e^{-1}. For arranging differently between two times, the number is n!D_n=(n!)^2[1-\\frac{1}{1!}+\\frac{1}{2!}-\\frac{1}{3!}+...+(-1)^n\\frac{1}{n!}] n!D_n=(n!)^2[1-\\frac{1}{1!}+\\frac{1}{2!}-\\frac{1}{3!}+...+(-1)^n\\frac{1}{n!}] because the first arrangement can have n! n! ways. Relations, Their Properties and Representations Binary relation: Let A and B be sets. A binary relation from A to B is a subset of A\\times{B} A\\times{B} . a\\mathrel{R}b a\\mathrel{R}b or a\\not\\!\\!R \\;b a\\not\\!\\!R \\;b . Matrix representation: M_R,m_{ij}=(a_i,b_j)\\in{R} M_R,m_{ij}=(a_i,b_j)\\in{R} . Functions can be relations. Relation on a set: A relation on a set A A is a relation from A A to A A . Reflexive: A relation R R on a set A A is called reflexive if (a,a)\\in{R} (a,a)\\in{R} for every element a\\in{A} a\\in{A} . Irreflexive: A relation R R on the set A A is irreflexive if for every a\\in{A} a\\in{A} , (a,a)\\not\\in{R} (a,a)\\not\\in{R} . Symmetric: A relation R R on a set A A is called symmetric if (b,a)\\in{R} (b,a)\\in{R} whenever (a,b)\\in{R} (a,b)\\in{R} , for all a,b\\in{A} a,b\\in{A} . In matrix it is 1 to 1 and 0 to 0 mirrored by the main diagonal, or M_R=(M_R)^T M_R=(M_R)^T . Asymmetric: A relation R R is called asymmetric if (a,b)\\in{R} (a,b)\\in{R} implies that (b,a)\\not\\in{R} (b,a)\\not\\in{R} (So the main diagonal are all zeros). Antisymmetric: A relation R R on a set A A such that for all a,b\\in{A} a,b\\in{A} , if (a,b)\\in{R} (a,b)\\in{R} and (b,a)\\in{R} (b,a)\\in{R} , then a=b a=b is called antisymmetric. In matrix it is 1 to 0, 0 to 1 or 0 to 0 mirrored by the main diagonal. Antisymmetric is not Asymmetric, but Asymmetric is Antisymmetric. Transitive: A relation R R on a set A A is called transitive if whenever (a,b)\\in{R} (a,b)\\in{R} and (b,c)\\in{R} (b,c)\\in{R} , then (a,c)\\in{R} (a,c)\\in{R} , for all a,b,c\\in{A} a,b,c\\in{A} . Combining Relations: Relations can be combined like sets. M_{R_1\\cup{R}_2}=M_{R_1}\\vee{M}_{R_2}\\\\ M_{R_1\\cap{R}_2}=M_{R_1}\\wedge{M}_{R_2}\\\\ M_{R\\circ{S}}=M_S\\bigodot{M}_R (\\bigodot \\text{stands for boolean product})\\\\ M_{R^n}=(M_R)^n M_{R_1\\cup{R}_2}=M_{R_1}\\vee{M}_{R_2}\\\\ M_{R_1\\cap{R}_2}=M_{R_1}\\wedge{M}_{R_2}\\\\ M_{R\\circ{S}}=M_S\\bigodot{M}_R (\\bigodot \\text{stands for boolean product})\\\\ M_{R^n}=(M_R)^n Symmetric difference: The symmetric difference of A A and B B , denoted by A\\bigoplus{B} A\\bigoplus{B} , is the set containing those elements in either A A or$ B$, but not in both A A and B B . M_{\\bigoplus R} M_{\\bigoplus R} is the entry-wise XORed matrix. Composition: The composite of R R and S S is the relation consisting of ordered pairs (a, c) (a, c) , where a\\in{A} a\\in{A} , c\\in{C} c\\in{C} , and for which there exists an element b\\in{B} b\\in{B} such that (a,b)\\in{R} (a,b)\\in{R} and (b,c)\\in{S} (b,c)\\in{S} . We denote the composite of R R and S S by S\\circ{R} S\\circ{R} . S\\circ{R} S\\circ{R} is from right to left (inside to outside)! Composition can be done by matrix multiplication. Power: Let R R be a relation on the set A A . The powers R^n R^n , $n=1, 2, 3 ,..., $ are defined recursively by R^1=R R^1=R and R^{n+1}=R^n\\circ{R} R^{n+1}=R^n\\circ{R} . Theorem: The relation R R on a set A A is transitive if and only if R^n\\subseteq{R} R^n\\subseteq{R} for n=1, 2, 3, ... n=1, 2, 3, ... . Inverse relation: R^{-1} R^{-1} , with pairs inverted. Relations on a finite set can also be represented by digraphs (directed graphs). (R\\cup{S})^{-1}=R^{-1}\\cup{S}^{-1}\\\\ (R\\cap{S})^{-1}=R^{-1}\\cap{S}^{-1}\\\\ (\\overline{R})^{-1}=\\overline{R^{-1}}\\\\ (R-S)^{-1}=R^{-1}-S^{-1}\\\\ (A\\times{B})^{-1}=B\\times{A} (R\\cup{S})^{-1}=R^{-1}\\cup{S}^{-1}\\\\ (R\\cap{S})^{-1}=R^{-1}\\cap{S}^{-1}\\\\ (\\overline{R})^{-1}=\\overline{R^{-1}}\\\\ (R-S)^{-1}=R^{-1}-S^{-1}\\\\ (A\\times{B})^{-1}=B\\times{A} Closures of Relations Closure of R R with respect to P : The relation with property P containing R R such that it is a subset of every relation with property P containing R R . Diagonal relation: \\Delta=\\{(a,a)|a\\in{A}\\} \\Delta=\\{(a,a)|a\\in{A}\\} . Reflexive closure of R R : The smallest reflexive relation that contains R R . Formed by R\\cup\\Delta R\\cup\\Delta . Symmetric closure of R R : The smallest symmetric relation that contains R R . Formed by R\\cup{R}^{-1} R\\cup{R}^{-1} . Transitive closure of R R : The smallest transitive relation that contains R R . Path: A sequence of consecutive edges, denoted by x_0,x_1,x_2,...,x_{n-1},x_n x_0,x_1,x_2,...,x_{n-1},x_n , with length n n . Circuit (or cycle): A path of length n\\geq{1} n\\geq{1} that begins and ends at the same vertex. Path on relation: There is a path from a a to b b in R R if there is a sequence of elements a,x_1,x_2,...,x_{n\u22121} a,x_1,x_2,...,x_{n\u22121} , b b with (a,x_1)\\in{R} (a,x_1)\\in{R} , (x_1,x_2)\\in{R} (x_1,x_2)\\in{R} , ..., and (x_{n\u22121},b)\\in{R} (x_{n\u22121},b)\\in{R} . Theorem 1: Let R R be a relation on a set A A . There is a path of length n n , where n n is a positive integer, from a a to b b if and only if (a,b)\\in{R}^n (a,b)\\in{R}^n . Connectivity relation: Let R R be a relation on a set A A . The connectivity relation R^* R^* consists of the pairs (a,b) (a,b) such that there is a path of length at least one from a a to b b in R R . R^*=\\bigcup_{n=1}^\\infty{R}^n R^*=\\bigcup_{n=1}^\\infty{R}^n Theorem 2: The transitive closure of a relation R R equals the connectivity relation R^* R^* . Lemma 1: Let A A be a set with n elements, and let R R be a relation on A A . If there is a path of length at least one in R R from a a to b b , then there is such a path with length not exceeding n n . Moreover, when a\\neq{b} a\\neq{b} , if there is a path of length at least one in R R from a a to b b , then there is such a path with length not exceeding n\u22121 n\u22121 . R^*=\\bigcup_{i=1}^nR^i R^*=\\bigcup_{i=1}^nR^i Theorem 3: Let M_R M_R be the zero\u2013one matrix of the relation R R on a set with n n elements. Then the zero\u2013one matrix of the transitive closure R^* R^* is M_{R^*}=M_R\\vee{M}_R^{[2]}\\vee{M}_R^{[3]}\\vee...\\vee{M}_R^{[n]}. M_{R^*}=M_R\\vee{M}_R^{[2]}\\vee{M}_R^{[3]}\\vee...\\vee{M}_R^{[n]}. Interior vertices: Vertices of a path excluding the first and the last. W_0=M_R, W_i=[w_{ij}^{(k)}] W_0=M_R, W_i=[w_{ij}^{(k)}] , where w_{ij} w_{ij} is whether there is a path from v_i v_i to v_j v_j such that all interior vertices are in the first i i elements of the list (The list is prepared beforehand). W_n=M_{R^*}. W_n=M_{R^*}. Lemma 2: w_{ij}^{[k]}=w_{ij}^{[k-1]}\\vee(w_{ik}^{[k-1]}\\wedge{w}_{kj}^{[k-1]}) w_{ij}^{[k]}=w_{ij}^{[k-1]}\\vee(w_{ik}^{[k-1]}\\wedge{w}_{kj}^{[k-1]}) Equivalence Relations Equivalence Relation: A A relation on a set A A is called an equivalence relation if it is reflexive, symmetric, and transitive. Equivalent: Two elements a a and b b that are related by an equivalence relation are called equivalent. The notation a\\tilde{b} a\\tilde{b} is often used to denote that a a and b b are equivalent elements with respect to a particular equivalence relation. Congruence Modulo m m is an equivalence relation. Equivalence class: Let R R be an equivalence relation on a set A A . The set of all elements that are related to an element a of A A is called the equivalence class of a a . The equivalence class of a a with respect to R R is denoted by [a]_R [a]_R . When only one relation is under consideration, we can delete the subscript R R and write [a] [a] for this equivalence class. Representative of equivalence class: If b\\in[a]_R b\\in[a]_R , then b b is called a a representative of this equivalence class. Theorem 1: Let R R be an equivalence relation on a set A A . These statements for elements a a and b b of A A are equivalent: aRb \\\\ [a]=[b] \\\\ [a]\\cap[b]\\neq\\varnothing aRb \\\\ [a]=[b] \\\\ [a]\\cap[b]\\neq\\varnothing Partition: Partition of a set S S is a collection of disjoint nonempty subsets of S S that have S S as their union. Theorem 2: Let R R be an equivalence relation on a set S S . Then the equivalence classes of R R form a partition of S S . Conversely, given a partition \\{A_i|i\\in{I}\\} \\{A_i|i\\in{I}\\} of the set S S , there is an equivalence relation R R that has the sets A_i,i\\in{I} A_i,i\\in{I} , as its equivalence classes. The m congruence modulo classes are denoted by [0]_m, [1]_m, ..., [m\u22121]_m [0]_m, [1]_m, ..., [m\u22121]_m . Partial Ordering Partial ordering: A relation R R on a set S S is called a partial ordering or partial order if it is reflexive, antisymmetric, and transitive. Partially ordered set (poset): A set S S together with a partial ordering R R is called a partially ordered set, or poset, and is denoted by (S,R) (S,R) . Members of S S are called elements of the poset. Less/greater than or equal ( \\leq/\\geq \\leq/\\geq ), inclusion relation ( \\subseteq \\subseteq ), divisibility relation (|) are all partial orderings. Less/greater than ($$) are antisymmetric and transitive, but not reflexive, so they are not partial orderings. Comparable: The elements a a and b b of a poset (S,\\preceq) (S,\\preceq) are called comparable if either a\\preceq b a\\preceq b or b\\preceq a b\\preceq a . When a a and b b are elements of S S such that neither a\\preceq b a\\preceq b nor b\\preceq a b\\preceq a , a a and b b are called incomparable. Totally/linearly ordered set: If (S,\\preceq) (S,\\preceq) is a poset and every two elements of S S are comparable, S S is called a totally or linearly ordered set, and \\preceq \\preceq is called a total or linear order. A totally ordered set is also called a chain. Well-ordered set: (S,\\preceq) (S,\\preceq) is a well-ordered set if it is a poset such that \\preceq \\preceq is a total ordering and every nonempty subset of S S has a least element. The principle of well-ordered induction: Suppose that S S is a well-ordered set. Then P(x) P(x) is true for all $x\\in S $, if (inductive step:) For every y\\in{S} y\\in{S} , if P(x) P(x) is true for all x\\in{S} x\\in{S} with x\\prec{y} x\\prec{y} , then P(y) P(y) is true. Lexicographic ordering: The lexical ordering \\prec \\prec on A_1\\times{A}_2 A_1\\times{A}_2 is defined by specifying that one pair is less than a second pair if the first entry of the first pair is less than (in A_1 A_1 ) the first entry of the second pair, or if the first entries are equal, but the second entry of this pair is less than (in A_2 A_2 ) the second entry of the second pair. Hasse diagram: Start with the directed graph for this relation. First, Remove these loops because of reflexivity. Next, remove all edges that must be in the partial ordering because of transitivity. Finally, arrange each edge so that its initial vertex is below its terminal vertex and remove all the arrows on edges. Covers: An element y\\in{S} y\\in{S} covers an element x\\in{S} x\\in{S} if x\\prec{y} x\\prec{y} and there is no element z\\in{S} z\\in{S} such that x\\prec{z}\\prec{y} x\\prec{z}\\prec{y} . Covering relation: The set of pairs (x,y) (x,y) such that y y covers x x is called the covering relation of (S,\\preceq) (S,\\preceq) . Maximal element: An element of a poset is called maximal if it is not less than any element of the poset. The top element of a Hasse diagram. Minimal element: An element of a poset is called minimal if it is not greater than any element of the poset. The bottom element of a Hasse diagram. Greatest element: An element in a poset that is greater than every other element. Least element: An element in a poset that is less than every other element. Upper bound: Element greater than or equal to all the elements in a subset A A of S S . Lower bound: Element less than or equal to all the elements in a subset A A of S S . Least upper bound: Upper bound that is less than every other upper bound of a subset A A of S S . Greatest lower bound: Lower bound that is greater than every other lower bound of a subset A A of S S . Lattice: A partially ordered set in which every pair of elements has both a least upper bound and a greatest lower bound is called a lattice. (\\mathcal{P}(S),\\subseteq/\\supseteq) (\\mathcal{P}(S),\\subseteq/\\supseteq) is a lattice, with LUB and GLB being A\\cup{B} A\\cup{B} and A\\cap{B} A\\cap{B} . Compatible: A total ordering \\preceq \\preceq said to be compatible with the partial ordering R R if a\\preceq{b} a\\preceq{b} whenever aRb aRb . Topological sorting: Constructing a compatible total ordering from a partial ordering. Lemma 1: Every finite nonempty poset (S,\\preceq) (S,\\preceq) has at least one minimal element. Algorithm for topological sorting: Pick the least element and remove it from the poset. Can also be done with a Hasse diagram. Graphs and Graph Models (Undirected) graph: A graph G=(V,E) G=(V,E) consists of V, a nonempty set of vertices (or nodes) and E, a set of edges. Each edge has either one or two vertices associated with it, called its endpoints . An edge is said to connect , its endpoints. Simple graph: A graph in which each edge connects two different vertices and where no two edges connect the same pair of vertices is called a simple graph. Infinite graph: A graph with an infinite vertex set or an infinite number of edges is called an infinite graph. Finite graph: a graph with a finite vertex set and a finite edge set is called a finite graph. Multigraph: Graphs that may have multiple edges connecting the same vertices are called multigraphs. Loop: Edges that connect a vertex to itself. Pseudographs: Graphs that may include loops, and possibly multiple edges connecting the same pair of vertices or a vertex to itself. Directed graph (digraph): A directed graph (or digraph) (V,E) (V,E) consists of a nonempty set of vertices V and a set of directed edges (or arcs) E. Each directed edge is associated with an ordered pair of vertices. The directed edge associated with the ordered pair (u,v) (u,v) is said to start at u and end at v. Simple directed graph: A directed graph with no loops and no multiple directed edges that start and end at the same vertices. Directed multigraphs: Directed graphs that may have multiple directed edges from a vertex to a second (possibly the same) vertex. Multiplicity: When there are m directed edges, each associated to an ordered pair of vertices (u,v) (u,v) , we say that (u,v) (u,v) is an edge of multiplicity m. Mixed graph: A graph with both directed and undirected edges. Graph Terminology and Special Types of Graphs Adjacent (Neighbor): Two vertices u and v in an undirected graph G are called adjacent (or neighbors) in G if u and v are endpoints of an edge e of G. Such an edge e is called incident with the vertices u and v and e is said to connect u and v. Neighborhood: The set of all neighbors of a vertex v of G=(V,E) G=(V,E) , denoted by N(v), is called the neighborhood of v. If A is a subset of V , we denote by N(A) the set of all vertices in G that are adjacent to at least one vertex in A. So, N(A)=\\bigcup_{v\\in{A}}N(v) N(A)=\\bigcup_{v\\in{A}}N(v) . Degree: The degree of a vertex in an undirected graph is the number of edges incident with it, except that a loop at a vertex contributes twice to the degree of that vertex. The degree of the vertex v is denoted by deg(v) deg(v) . Theorem 1, The handshaking theorem: Let G=(V,E) G=(V,E) be an undirected graph with m edges. Then 2m=\\sum_{v\\in{V}}deg(v). 2m=\\sum_{v\\in{V}}deg(v). Theorem 2: An undirected graph has an even number of vertices of odd degree. Adjacent to/from, initial/terminal vertex: When (u,v) (u,v) is an edge of the graph G G with directed edges, u is said to be adjacent to v and v is said to be adjacent from u. The vertex u is called the initial vertex of (u,v) (u,v) , and v is called the terminal or end vertex of (u,v) (u,v) . The initial vertex and terminal vertex of a loop are the same. In/out degree: In a graph with directed edges the in-degree of a vertex v, denoted by deg^\u2212(v) deg^\u2212(v) , is the number of edges with v as their terminal vertex. The out-degree of v, denoted by deg^+(v) deg^+(v) , is the number of edges with v as their initial vertex. (Note that a loop at a vertex contributes 1 to both the in-degree and the out-degree of this vertex.) Theorem 3: Let G=(V,E) G=(V,E) be a graph with directed edges. Then \\sum_{v\\in{V}}deg^\u2212(v)=\\sum_{v\\in{V}}deg^+(v)=|E|. \\sum_{v\\in{V}}deg^\u2212(v)=\\sum_{v\\in{V}}deg^+(v)=|E|. Underlying undirected graph: The undirected graph that results from ignoring directions of edges is called the underlying undirected graph. Complete graph: A complete graph on n vertices, denoted by K_n K_n , is a simple graph that contains exactly one edge between each pair of distinct vertices. Noncomplete graph: A simple graph for which there is at least one pair of distinct vertex not connected by an edge. Cycle: A cycle C_n C_n , n\\geq3 n\\geq3 , consists of n n vertices v_1,v_2,...,v_n v_1,v_2,...,v_n and edges \\{v_1,v_2\\}, \\{v_2,v_3\\}, ..., \\{v_{n\u22121},v_n\\}, \\{v_n,v_1\\} \\{v_1,v_2\\}, \\{v_2,v_3\\}, ..., \\{v_{n\u22121},v_n\\}, \\{v_n,v_1\\} . Wheel: We obtain a wheel W_n when we add an additional vertex to a cycle C_n C_n , for n\\geq3 n\\geq3 , and connect this new vertex to each of the n n vertices in C_n C_n , by new edges. n-Cube: An n-dimensional hypercube, or n-cube, denoted by Q_n Q_n , is a graph that has vertices representing the 2^n 2^n bit strings of length n. Bipartite and bipartition: A simple graph G G is called bipartite if its vertex set V V can be partitioned into two disjoint sets V_1 V_1 and V_2 V_2 such that every edge in the graph connects a vertex in V_1 V_1 and a vertex in V_2 V_2 (so that no edge in G connects either two vertices in V_1 V_1 or two vertices in V_2 V_2 ). When this condition holds, we call the pair (V_1,V_2) (V_1,V_2) a bipartition of the vertex set V V of G G . Theorem 4: A simple graph is bipartite if and only if it is possible to assign one of two different colors to each vertex of the graph so that no two adjacent vertices are assigned the same color. Complete Bipartite Graph: A complete bipartite graph K_{m,n} K_{m,n} is a graph that has its vertex set partitioned into two subsets of m and n vertices, respectively with an edge between two vertices if and only if one vertex is in the first subset and the other vertex is in the second subset. Bipartite graphs can be used to model many types of applications that involve matching the elements of one set to elements of another. Regular graph: A simple graph is called regular if every vertex of this graph has the same degree. A regular graph is called n-regular if every vertex in this graph has degree n. Subgraph: A subgraph of a graph G=(V,E) G=(V,E) is a graph H=(W,F) H=(W,F) , where W\\subseteq{V} W\\subseteq{V} and F\\subseteq{E} F\\subseteq{E} . A subgraph H H of G G is a proper subgraph of G G if H\\neq G H\\neq G . Subgraph induced by vertex set: Let G=(V,E) G=(V,E) be a simple graph. The subgraph induced by a subset W W of the vertex set V V is the graph (W,F) (W,F) , where the edge set F F contains an edge in E E if and only if both endpoints of this edge are in W W . Spanning subgraph: H H is a spanning subgraph of G G if W=V W=V , F\\subseteq{E} F\\subseteq{E} . Union of graph: The union of two simple graphs G_1=(V_1,E_1) G_1=(V_1,E_1) and G_2= (V_2,E_2) G_2= (V_2,E_2) is the simple graph with vertex set V_1\\cup{V}_2 V_1\\cup{V}_2 and edge set E_1\\cup{E}_2 E_1\\cup{E}_2 . The union of G_1 G_1 and G_2 G_2 is denoted by G_1\\cup{G}_2 G_1\\cup{G}_2 . Representing Graphs and Graph Isomorphism Adjacency list: Vertex and Adjacent vertices for simple graph, Initial vertex and terminal vertices for directed graph. Adjacency matrix: A (or A_G ). Incidence matrix: 1 when edge j is incident with vertex i. Isomorphism: The simple graphs G_1=(V_1,E_1) G_1=(V_1,E_1) and G_2=(V_2,E_2) G_2=(V_2,E_2) are isomorphic if there exists a one-to-one and onto function f from V_1 V_1 to V_2 V_2 with the property that a and b are adjacent in G_1 G_1 if and only if f(a) f(a) and f(b) f(b) are adjacent in G_2 G_2 , for all a and b in V_1 V_1 . Such a function f is called an isomorphism. Two simple graphs that are not isomorphic are called nonisomorphic. Graph invariant: A property preserved by isomorphism of graphs is called a graph invariant. Graph invariants include: The number of vertices, the number of edges, the number of vertices of each degree (useful), bipartite, complete, wheel. Can also check isomorphism by making a function that maps vertices and checking whether it is preserving edges using adjacent matrix. Connectivity Path: A sequence of edges that begins at a vertex of a graph and travels from vertex to vertex along edges of the graph. When there are no multiple edges, the path can be denoted by its vertex sequence. Circuit: The path is a circuit if it begins and ends at the same vertex, and has length greater than zero. Pass through and traverse: The path or circuit is said to pass through the vertices in between or traverse the edges. Simple A path or circuit is simple if it does not contain the same edge more than once. Connected: An undirected graph is called connected if there is a path between every pair of distinct vertices of the graph. An undirected graph that is not connected is called disconnected. Theorem 1: There is a simple path between every pair of distinct vertices of a connected undirected graph. Connected component: A maximal connected subgraph of a graph. Cut vertex: A vertex is a cut vertex (or articulation point), if removing it and all edges incident with it results in more connected components than in the original graph. Cut edge: If removal of an edge creates more components, the edge is called a cut edge or bridge. Strongly connected: A directed graph is strongly connected if there is a path from a to b and from b to a whenever a and b are vertices in the graph. Weakly connected: A directed graph is weakly connected if there is a path between every two vertices in the underlying undirected graph. Any strongly connected directed graph is also weakly connected. Strongly connected component: A maximal strongly connected subgraph, is called a strongly connected component or strong component. Two graphs are isomorphic only if they have simple circuits of the same length. Two graphs are isomorphic only if they contain paths that go through vertices so that the corresponding vertices in the two graphs have the same degree. Theorem 2: Let G G be a graph with adjacency matrix A A with respect to the ordering v_1,v_2,...,v_n v_1,v_2,...,v_n of the vertices of the graph (with directed or undirected edges, with multiple edges and loops allowed). The number of different paths of length r r from v_i v_i to v_j v_j , where r r is a positive integer, equals the (i,j) (i,j) th entry of A^r A^r . The graph G G is connected if and only if every off-diagonal entry of A+A^2+A^3+...+A^{n\u22121} A+A^2+A^3+...+A^{n\u22121} is positive. The check can end earlier if an A^i A^i is found to be so. Euler and Hamilton Paths Euler circuit: A simple circuit containing every edge of graph G. Euler path: A simple path containing every edge of graph G. Theorem 1: A connected multigraph with at least two vertices has an Euler circuit if and only if each of its vertices has even degree. Algorithm 1: Constructing Euler Circuits. Theorem 2: A connected multigraph has an Euler path but not an Euler circuit if and only if it has exactly two vertices of odd degree. Hamilton path: A simple path in a graph G G that passes through every vertex exactly once. Hamilton circuit: A simple circuit in a graph G G that passes through every vertex exactly once. A graph with a vertex of degree one cannot have a Hamilton circuit. If a vertex in the graph has degree two, then both edges that are incident with this vertex must be part of any Hamilton circuit. When a Hamilton circuit is being constructed and this circuit has passed through a vertex, then all remaining edges incident with this vertex, other than the two used in the circuit, can be removed from consideration. A Hamilton circuit cannot contain a smaller circuit within it. Dirac\u2019s theorem: If G G is a simple graph with n n vertices with n\\geq3 n\\geq3 such that the degree of every vertex in G G is at least \\frac{n}2 \\frac{n}2 , then G G has a Hamilton circuit. Ore\u2019s theorem: If G G is a simple graph with n n vertices with n\\geq3 n\\geq3 such that deg(u)+deg(v)\\geq{n} deg(u)+deg(v)\\geq{n} for every pair of nonadjacent vertices u and v in G G , then G G has a Hamilton circuit. Finding Gray code is equivalent to finding a Hamilton circuit for n-cube. Shortest-Path Problems Algorithm 1: Dijkstra\u2019s Algorithm Theorem 1: Dijkstra\u2019s algorithm finds the length of a shortest path between two vertices in a connected simple undirected weighted graph. Theorem 2: Dijkstra\u2019s algorithm uses O(n^2) O(n^2) operations (additions and comparisons) to find the length of a shortest path between two vertices in a connected simple undirected weighted graph with n vertices. Traveling salesperson problem: The circuit of minimum total weight in aweighted, complete, undirected graph that visits each vertex exactly once and returns to its starting point. This is equivalent to asking for a Hamilton circuit with minimum total weight in the complete graph, because each vertex is visited exactly once in the circuit. Planar Graphs Planar: A graph is called planar if it can be drawn in the plane without any edges crossing (where a crossing of edges is the intersection of the lines or arcs representing them at a point other than their common endpoint). Such a drawing is called a planar representation of the graph. Proving no planar representation: Find a loop, divide the plane into regions, divide and conquer. K_{3,3} K_{3,3} and K_5 K_5 are non-planar. Euler\u2019s formula: Let G G be a connected planar simple graph with e edges and v vertices. Let r be the number of regions in a planar representation of G. Then r=e\u2212v+2. r=e\u2212v+2. Proved by mathematical induction. Corollary 1: If G G is a connected planar simple graph with e e edges and v v vertices, where v\\geq3 v\\geq3 , then e\\leq3v\u22126 e\\leq3v\u22126 . Can be used to show that a graph is non-planar. Degree of a region: the number of edges on the boundary of this region. Proved by 2e\\geq3r 2e\\geq3r and Euler\u2019s formula. Corollary 2: If $$$ is a connected planar simple graph, then G G has a vertex of degree not exceeding five. Corollary 3: If a connected planar simple graph has e edges and v vertices with v\\geq3 v\\geq3 and no circuits of length three, then e\\leq2v\u22124 e\\leq2v\u22124 . Proved like corollary 1, where 2e\\geq4r 2e\\geq4r . Can be used to show that a graph is non-planar. Elementary subdivision: If a graph is planar, so will be any graph obtained by removing an edge {u,v} and adding a new vertex w together with edges \\{u,w\\} \\{u,w\\} and \\{w,v\\} \\{w,v\\} . Such an operation is called an elementary subdivision. Homeomorphic: The graphs G_1=(V_1,E_1) G_1=(V_1,E_1) and G_2=(V_2,E_2) G_2=(V_2,E_2) are called homeomorphic if they can be obtained from the same graph by a sequence of elementary subdivisions. Kuratowski\u2019s Theorem: A graph is nonplanar if and only if it contains a subgraph (deleting vertices and incident edges) homeomorphic to K_{3,3} K_{3,3} or K_5 K_5 . K_{3,3} K_{3,3} can also be a hexagon with opposing vertices connected, and the parts are the two sets of three unconnected vertices. Graph Coloring Dual graph: Each map in the plane can be represented by a graph. To set up this correspondence, each region of the map is represented by a vertex. Edges connect two vertices if the regions represented by these vertices have a common border. Two regions that touch at only one point are not considered adjacent. The resulting graph is called the dual graph of the map. Any map in the plane has a planar dual graph. Coloring: A coloring of a simple graph is the assignment of a color to each vertex of the graph so that no two adjacent vertices are assigned the same color. Chromatic number: The chromatic number of a graph is the least number of colors needed for a coloring of this graph, denoted by \\chi(G) \\chi(G) . The four color theorem: The chromatic number of a planar graph is no greater than four. Nonplanar graphs can have arbitrarily large chromatic numbers. Show that the chromatic number of a graph is k: Show that the graph can be colored with k colors. This can be done by constructing such a coloring. Show that the graph cannot be colored using fewer than k colors, when 3 it is often shown by a three vertices loop. The chromatic number of a complete graph K_n K_n is n because every vertex is connected with all others, and this does not contradict the four color theorem because K_n K_n is not planar when n>4. The chromatic number of a complete bipartite graph K_{m,n} K_{m,n} is 2, by coloring either set a color. The chromatic number of a cycle graph C_n C_n , is 1 when n=1, 2 when n is even, 3 when n is odd and n>1. Equivalent to scheduling and required number of time slots.","title":"\u79bb\u6563\u6570\u5b66"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#_1","text":"","title":"\u79bb\u6563\u6570\u5b66"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#methods-of-proving-theorems","text":"If we want to prove $q$ is true ,there are three methods:","title":"Methods of Proving Theorems"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#direct-proofs","text":"p\\land (p\\to q) \\text{\\ is true}","title":"Direct Proofs"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#proof-by-contradiction","text":"\\lnot q\\to (\\lnot r\\land r)\\text{\\ is true}","title":"Proof by Contradiction"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#proof-by-contrposition","text":"p\\land (\\lnot q\\to \\lnot p)\\text{\\ is true} To be honest ,this is a specific case base on contradiction ,which p is subsititude for r ,generally , p is told in question stem ,and r is not.","title":"Proof by Contrposition"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#propositional-logic","text":"Proposition: A declarative sentence that is either true or false, but not both. Statements that can not be decided is not a proposition. Propositional/Statement variable: p, q, r, s Truth value: T, F Propositional Calculus/Logic: The area of logic that deals with propositions. Compound proposition: Proposition formed from existing propositions using operators. Operator: Not \u00acp e.g. It is not the case that \u2026 Conjunction/And p \u2227 q e.g. \u2026 and/but \u2026 Disjunction/Or p \u2228 q e.g. \u2026 or \u2026 Exclusive or p \u2295 q Conditional Statement / Implication p \u2192 q if p, then q p only if q p implies q p is a sufficient condition for q q is a necessary condition for p q follows from / if / when / whenever p q unless \u00acp False only when p is true, but q is false; when p is false, p \u2192 q is defined to be true. Converse p \u2192 q to q \u2192 p Inverse p \u2192 q to \u00acp \u2192 \u00acq Contrapositive Converse and inverse p \u2192 q to \u00acq \u2192 \u00acp Biconditional statement p \u2194 q p if and only if q p is necessary and sufficient for q if p then q, and conversely p iff q p \u2194 q == (p \u2192 q) \u2227 (q \u2192 p), only true when p and q have the same value Operator precedence: (), \u00ac, \u2227 \u2228, \u2192, \u2194 Bit: 1 for T, 0 for F. Bit string: a sequence of zero or more bits. Bit operation: Bitwise AND, Bitwise OR, Bitwise XOR","title":"Propositional logic"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#applications-of-propositional-logic","text":"Translating English sentences: to logical proposition. Consistent system specification: no conflicting requirements; a set of value to satisfy all the statements translated; does not necessarily has a real usage.","title":"Applications of propositional logic"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#propositional-equivalences","text":"Classification of compound proposition: Tautology Always true Contradiction Always false Contingency Neither a tautology nor a contradiction Logical equivalence: Compound propositions that have the same truth values in all possible cases: p \u2194 q is a tautology p \u2261 q, p \u21d4 q Logical Equivalences: Equivalence Name p \u2227 T \u2261 p Identity laws p \u2228 F \u2261 p p \u2228 T \u2261 T Domination laws p \u2227 F \u2261 F p \u2228 p \u2261 p Idempotent laws p \u2227 p \u2261 p \u00ac(\u00acp) \u2261 p Double negation law p \u2228 q \u2261 q \u2228 p Commutative laws p \u2227 q \u2261 q \u2227 p (p \u2228 q) \u2228 r \u2261 p \u2228 (q \u2228 r) Associative laws (p \u2227 q) \u2227 r \u2261 p \u2227 (q \u2227 r) p \u2228 (q \u2227 r) \u2261 (p \u2228 q) \u2227 (p \u2228 r) Distributive laws p \u2227 (q \u2228 r) \u2261 (p \u2227 q) \u2228 (p \u2227 r) \u00ac(p \u2227 q) \u2261 \u00acp \u2228 \u00acq De Morgan\u2019s laws \u00ac(p \u2228 q) \u2261 \u00acp \u2227 \u00acq p \u2228 (p \u2227 q) \u2261 p Absorption laws p \u2227 (p \u2228 q) \u2261 p p \u2228 \u00acp \u2261 T Negation laws p \u2227 \u00acp \u2261 F p \u2192 q \u2261 \u00acp \u2228 q p \u2194 q \u2261 (p \u2227 q) \u2228 (\u00acp \u2227 \u00acq) Mine: \u00ac(p \u2192 q) \u2261 p \u2227 \u00acq Mine: p \u2228 (\u00acp \u2227 q) \u2261 p \u2228 q See Section 3.1 No.30 Prove Logical Equivalence: Truth table or developing a series of logical equivalences. Prove Not Logically Equivalent: (Simplify first) and find a counterexample. Propositional Satisfiability: An assignment of truth values that makes it true. Truth table, or whether its negation is a tautology. (or say whether itself is a contradiction?)","title":"Propositional equivalences"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#predicates-and-qualifiers","text":"Predicate: Statements involving variables, the variables are called subjects, the other is called a predicate. The statement of P(x) is also called the value of Propositional function P at x. Precondition: Conditions for valid input. Postcondition: Conditions for correct output. Qualification: Express the extent to which a predicate is true over a range of elements. ((Domain / universe) of discourse) / domain: A predicate is true for a variable in a particular domain. Predicate calculus: The area of logic that deals with predicates and quantifiers. Universal qualification: For every element. \u2200x P(x): For all / every x P (x). An element for which P(x) is false is called a counterexample of \u2200x P(x). Existential qualification: For one or more element. \u2203x P(x): There exists an element x in the domain such that P(x). Uniqueness qualification: \u2203!x P(x) or \u2203_1 x P(x) There exists a unique x such that P (x) or There is one and only one x such that P (x). Abbreviated qualifier notation: Use condition for domain. Or use \u2200x P(x) \u2192 Q(x) for using P(x) as condition for domain. Quantifiers (\u2200 and \u2203) have higher precedence than all logical operators from propositional calculus. i.e. They absorb less. Occurrence of variable is bound: Quantifier is used on the variable. All the variables that occur in a propositional function must be bound or set equal to a particular value to turn it into a proposition. Scope of quantifier: The part of a logical expression to which a quantifier is applied. The same letter is often used to represent variables bound by different quantifiers with scopes that do not overlap. Statements involving predicates and quantifiers are logically equivalent: If and only if they have the same truth value no matter which predicates are substituted into these statements and which domain of discourse is used for the variables in these propositional functions. S \u2261 T \u2200x (P(x) \u2227 Q(x)) \u2261 \u2200x P(x) \u2227 \u2200x Q(x) \u2203x (P(x) \u2228 Q(x)) \u2261 \u2203x P(x) \u2228 \u2203x Q(x) De Morgan\u2019s laws for quantifiers: \u00ac\u2200x P(x) \u2261 \u2203x \u00acP(x) \u00ac\u2203x Q(x) \u2261 \u2200x \u00acQ(x) Translating from English into Logical Expression: \u2026 Using Quantifiers in System Specifications: \u2026","title":"Predicates and Qualifiers"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#nested-qualifiers","text":"Nested quantifiers: One quantifier is within the scope of another. Understanding Statements Involving Nested Quantifiers: \u2026 The order of the quantifiers is important, unless all the quantifiers are universal quantifiers or all are existential quantifiers. Statement Condition for true \u2200x\u2200y P(x, y) P (x, y) is true for every pair x, y. \u2200y\u2200x P(x, y) \u2200x\u2203y P(x, y) For every x there is a y for which P (x, y) is true. \u2203x\u2200y P(x, y) There is an x for which P (x, y) is true for every y. \u2203x\u2203y P(x, y) There is a pair x, y for which P (x, y) is true. \u2203y\u2203x P (x, y) Translating: \u2026 Negation: Recursively\u2026","title":"Nested Qualifiers"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#normal-forms","text":"(Disjunctive / conjunctive) clause: Disjunctions / Conjunctions with literals (optionally negated) as its disjuncts / conjuncts. Disjunctive / Conjunctive normal form (DNF / CNF): A disjunction / conjunction with conjunctive / disjunctive clauses as its disjuncts / conjuncts. Full disjunctive / conjuctive normal form: Each of its variables appears exactly once in every clause. Obtained by adding \u2227 (\u00acP(x) \u2228 P(x)) to its conjuction disjuncts / \u2228 (\u00acP(x) \u2227 P(x)) to its disjunction conjuncts. Prenex normal form: Qualifier\u2026Predicate_without_quaulifier","title":"Normal forms"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#inference","text":"Argument: a sequence of propositions. Premise: All but the final proposition in the argument. Conclusion: The final proposition in the argument. Valid argument: An argument is valid if the truth of all its premises implies that the conclusion is true. Fallacy: Common forms of incorrect reasoning which lead to invalid arguments. Argument form: A sequence of compound propositions involving propositional variables. Valid argument form: An argument form is valid no matter which particular propositions are substituted for the propositional variables in its premises, the conclusion is true if the premises are all true. The key to showing that an argument in propositional logic is valid is to show that its argument form is valid. Using truth table to show that an argument form is valid is tedious. Modus ponens (Mode that affirms) / the law of detachment: (p \u2227 (p \u2192 q)) \u2192 q Argument can be valid, but if any of its premise is false, its conclusion is false. Tautology Name (p \u2227 (p \u2192 q)) \u2192 q Modus ponens (\u00acq \u2227 (p \u2192 q)) \u2192 \u00acp Modus tollens ((p \u2192 q) \u2227 (q \u2192 r)) \u2192 (p \u2192 r) Hypothetical syllogism ((p \u2228 q) \u2227 \u00acp) \u2192 q Disjunctive syllogism p \u2192 (p \u2228 q) Addition (p \u2227 q) \u2192 p Simplification ((p) \u2227 (q)) \u2192 (p \u2227 q) Conjunction ((p \u2228 q) \u2227 (\u00acp \u2228 r)) \u2192 (q \u2228 r) Resolution p \u2227 q \u2192 (r \u2192 s) \u2261 p \u2227 q \u2227 r \u2192 s, r is additional premise. Resolution is commonly used: ((p \u2228 q) \u2227 (\u00acp \u2228 r)) \u2192 (q \u2228 r) Also rewrite premises into separate clauses can help. Fallacy Affirming the conclusion ((p \u2192 q) \u2227 q) \u2192 p is not a tautology. Denying the hypothesis ((p \u2192 q) \u2227 \u00acp) \u2192 \u00acq is not tautology. Begging the question (Circular reasoning) one or more steps of a proof are based on the truth of the statement being proved. Rules of inference for quantified statements Rule of Inference Name \u2200x P(x) \u2234 P(c) Universal instantiation P(c) for an arbitrary c \u2234 \u2200x P(x) Universal generalization \u2203x P(x) \u2234 P(c) for some element c Existential instantiation P(c) for some element c \u2234 \u2203x P(x) Existential generalization Universal modus ponens: \u2200x (P(x) \u2192 Q(x)), P(a), \u2234 Q(a) Universal modus tollens: \u2200x (P(x) \u2192 Q(x)), \u00acQ(a), \u2234 \u00acP(a)","title":"Inference"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#introduction-to-proofs","text":"Theorem / Fact / Result (\u5b9a\u7406): A statement that can be shown to be true. Propositions: Less important theorems. Axiom / Postulate (\u516c\u7406): Statements we assume to be true. Lemma (\u5f15\u7406): A less important theorem that is helpful in the proof of other results. (plural lemmas or lemmata) Corollary (\u63a8\u8bba): Theorem that can be established directly from a theorem that has been proved. Conjecture (\u731c\u60f3): Statement that is being proposed to be a true statement. Direct Proof: Direct proof of a conditional statement p \u2192 q is constructed when the first step is the assumption that p is true; subsequent steps are constructed using rules of inference, with the final step showing that q must also be true. Indirect Proofs: Proofs that do not start with the premises and end with the conclusion. Proof by Contraposition (\u8bc1\u660e\u9006\u5426\u547d\u9898): We take \u00acq as a premise, and using axioms, definitions, and previously proven theorems, together with rules of inference, we show that \u00acp must follow. Vacuous Proofs: If we can show that p is false, then we have a proof of the conditional statement p \u2192 q. Trivial Proof: By showing that q is true, it follows that p \u2192 q must also be true. Proofs by Contradiction (\u53cd\u8bc1): We can prove that p is true if we can show that \u00acp \u2192 (r \u2227 \u00acr) is true for some proposition r. i.e. r is premise and \u00acr is proved if \u00acp. To rewrite a proof by contraposition of p \u2192 q as a proof by contradiction, we suppose that both p and \u00acq are true. Then, we use the steps from the proof of \u00acq \u2192 \u00acp to show that \u00acp is true. Proofs of Equivalence: (p \u2194 q) \u2194 (p \u2192 q) \u2227 (q \u2192 p). (if and only if)(p_1 \u2194 p_2 \u2194 \u00b7\u00b7\u00b7 \u2194 p_n) \u2194 (p_1 \u2192 p_2) \u2227 (p_2 \u2192 p_3) \u2227 \u00b7\u00b7\u00b7 \u2227 (p_n \u2192 p_1). Counterexamples: To show that a statement of the form \u2200x P(x) is false, we only need to find a counterexample. Mistakes in proofs: Division by zero, Affirming the conclusion, Denying the hypothesis, Begging the question.","title":"Introduction to Proofs"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#proof-methods-and-strategy","text":"Exhaustive Proof (Proofs by exhaustion): [(p_1 \u2228 p_2 \u2228 \u00b7 \u00b7 \u00b7 \u2228 p_n) \u2192 q] \u2194 [(p_1 \u2192 q) \u2227 (p_2 \u2192 q) \u2227 \u00b7 \u00b7 \u00b7 \u2227 (p_n \u2192 q)] Eliminate cases when using exhaustive proof. Without loss of generality (WLOG): Other cases can be proved with the same method as this case. Exhaustive proof can be invalid if not all the cases are covered. Existence proof: A proof of a proposition of the form \u2203x P(x). Constructive: Given by finding a witness. Nonconstructive: Some other way, e.g. negation leads to contradiction. Uniqueness Proof: Assert that there is exactly one element with this property. \u2203x(P(x) \u2227 \u2200y(y = x \u2192 \u00acP(y))). Forward and backward reasoning: \u2026 Adapting existing proofs: \u2026 Look for counterexamples: \u2026 Tiling: Color the board with n colors. If top-right and bottom-left square is removed, the number of squares each color is unequal, but eachdomino / polymino must cover exactly one square of each color, so tiling is impossible.","title":"Proof Methods and Strategy"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#set","text":"Set: A set is an unordered collection of objects. a \u2208 A, a \u2209 A. Roster method: List all the members of a set. Can use \u2026 when the general pattern is obvious. Set builder pattern: {x \u2208 set | predicate(x)} or {x | predicate(x), x \u2208 set} Name | Description \u2115 | the set of natural numbers \u2124 | the set of integers \u2124 | the set of positive integers \u211a | the set of rational numbers \u211d | the set of real numbers \u211d^+ \u211d^+ | the set of positive real numbers \u2102 | the set of complex numbers Interval | Set a, b | {x | a \u2264 x \u2264 b} [a, b) | {x | a \u2264 x < b} (a, b] | {x | a < x \u2264 b} (a, b) (Open) | {x | a < x < b} Equal: Two sets are equal if and only if they have the same elements. \u2200x(x \u2208 A \u2194 x \u2208 B). A = B. The order and repetition of elements does not matter: {5, 3, 3, 1} = {1, 3, 5} Empty/null set: \u2205 Singleton set: Set with a single element. \u2205 is not {\u2205}. Venn diagram: Rectangle for universal set, circle for set, dot for element. Subset: The set A is a subset of B if and only if every element of A is also an element of B. If and only if \u2200x(x \u2208 A \u2192 x \u2208 B). A \u2286 B. Showing that A is a Subset of B: To show that A \u2286 B, show that if x belongs to A then x also belongs to B. Showing that A is Not a Subset of B: To show that A \\not\\subseteq \\not\\subseteq B, find a single x \u2208 A such that x \u2209 B. For every set S, \u2205 \u2286 S and S \u2286 S. Proper subset: A \u2286 B and A \u2260 B. A \u2282 B. Showing Two Sets are Equal: To show that two sets A and B are equal, show that A \u2286 B and B \u2286 A. Size of a set: If there are exactly n distinct elements in S where n is a nonnegative integer, then S is a finite set and that n is the cardinality of S, written as |S|. Infinite set: A set is said to be infinite if it is not finite. Power set: Given a set S, the power set of S is the set of all subsets of the set S. \\mathcal{P}(S) \\mathcal{P}(S) . e.g. P(A) \u2208 P(B) \u21d2 P(A) \u2286 B \u21d2 A \u2208 B We can reconstruct the original set from the union of all element sets in its power set. So power set uniquely identifies a set. \u2205 cannot be a power set. Ordered n-tuple: The ordered collection that has $a_1 $ as its first element, a_2 a_2 as its second element, \u2026 , and a_n a_n as its nth element. ( a_1 a_1 , a_2 a_2 , \u2026 , a_n a_n ). Cartesian Product: A \u00d7 B = {(a, b) | a \u2208 A \u2227 b \u2208 B}.|A \u00d7 B| = |A||B| A_1 \u00d7 A_2 \u00d7 \u2026 \u00d7 A_n A_1 \u00d7 A_2 \u00d7 \u2026 \u00d7 A_n = {( a_1, a_2, \u2026 , a_n a_1, a_2, \u2026 , a_n ) | a_i \u2208 A_i a_i \u2208 A_i for i = 1, 2, \u2026 , n}. Relation: A subset R of the Cartesian product A \u00d7 B is called a relation. Using Set Notation with Quantifiers: \u2200x\u2208 S(P (x)) is shorthand for \u2200x(x \u2208 S \u2192 P (x)). Truth set: The truth set of P to be the set of elements x in D for which P(x) is true.","title":"Set"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#set-operations","text":"Union: The union of the sets A and B, denoted by A \u222a B, is the set that contains those elements that are either in A or in B, or in both. A \u222a B = {x | x \u2208 A \u2228 x \u2208 B}. Intersection: The intersection of the sets A and B, denoted by A \u2229 B, is the set containing those elements in both A and B. A \u2229 B = {x | x \u2208 A \u2227 x \u2208 B}. Disjoint: Two sets are called disjoint if their intersection is the empty set. Difference: The difference of A and B, denoted by A \u2212 B (or A \\ B), is the set containing those elements that are in A but not in B. The difference of A and B is also called the complement of B with respect to A. A \u2212 B = {x | x \u2208 A \u2227 x \u2208 / B}. Complement: Let U be the universal set. The complement of the set A, denoted by \\overline{A} \\overline{A} , is the complement of A with respect to U. Therefore, the complement of the set A is U \u2212 A. A \u2212 B = A \u2229 \\overline{B} \\overline{B} . Set Identities: Identity Name A \u2229 U = A Identity laws A \u222a\u2205= A A \u222a U = U Domination laws A \u2229\u2205=\u2205 A \u222a A = A Idempotent laws A \u2229 A = A \\overline{(\\overline{A})} = A \\overline{(\\overline{A})} = A Complementation law A \u222a B = B \u222a A Commutative laws A \u2229 B = B \u2229 A A \u222a (B \u222a C) = (A \u222a B) \u222a C Associative laws A \u2229 (B \u2229 C) = (A \u2229 B) \u2229 C A \u222a (B \u2229 C) = (A \u222a B) \u2229 (A \u222a C) Distributive laws A \u2229 (B \u222a C) = (A \u2229 B) \u222a (A \u2229 C) \\overline{A \u2229 B} = \\overline{A} \u222a \\overline{B} \\overline{A \u2229 B} = \\overline{A} \u222a \\overline{B} De Morgan\u2019s laws $\\overline{A \u222a B} = $ \\overline{A}\u2229\\overline{B} \\overline{A}\u2229\\overline{B} A \u222a (A \u2229 B) = A Absorption laws A \u2229 (A \u222a B) = A A \u2229 \\overline{A} \\overline{A} =\u2205 Complement laws A \u222a \\overline{A} \\overline{A} = U Prove set identity: Use set builder pattern and definition. Membership table: Set identities can also be proved using membership tables. We consider each combination of sets that an element can belong to and verify that elements in the same combinations of sets belong to both the sets in the identity. To indicate that an element is in a set, a 1 is used; to indicate that an element is not in a set, a 0 is used. Generalized Unions and Intersections: Because unions and intersections of sets satisfy associative laws, the sets A \u222a B \u222a C and A \u2229 B \u2229 C are well defined. The union of a collection of sets: The set that contains those elements that are members of at least one set in the collection. \\bigcup_{i=1}^{n}{A_i} \\bigcup_{i=1}^{n}{A_i} The intersection of a collection of sets is the set that contains those elements that are members of all the sets in the collection. \\bigcap_{i=1}^{n}{A_i} \\bigcap_{i=1}^{n}{A_i} Computer Representation of Sets: One of the methods is to use bit strings.","title":"Set Operations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#function","text":"Function/Mapping/Transformation: Let A and B be nonempty sets. A function f from A to B is an assignment of exactly one element of B to each element of A. f : A \u2192 B. f(a) = b. If f is a function from A to B, we say that A is the domain of f and B is the codomain of f. If f (a) = b, we say that b is the image of a and a is a preimage of b. The range, or image, of f is the set of all images of elements of A. Also, if f is a function from A to B, we say that f maps A to B. Two functions are equal: When they have the same domain, have the same codomain, and map each element of their common domain to the same element in their common codomain. Let f_1 f_1 and f_2 f_2 be functions from A to \\mathbb{R} \\mathbb{R} , then $f_1 + f_2 $ and f_1 f_2 f_1 f_2 are also functions from A to \\mathbb{R} \\mathbb{R} defined for all x \u2208 A by : (f_1 + f_2)(x) = f_1(x) + f_2(x) \\\\ (f_1f_2)(x) = f_1(x)f_2(x) (f_1 + f_2)(x) = f_1(x) + f_2(x) \\\\ (f_1f_2)(x) = f_1(x)f_2(x) The image of S under the function f: f (S) = {t | \u2203s \u2208 S (t = f (s))} = {f (s)| s \u2208 S}. One-to-one/injection (\u5355\u5c04): if and only if f (a) = f (b) implies that a = b for all a and b in the domain of f. A function is said to be injective if it is one-to-one. \\forall a\\forall b(f(a) = f(b) \\rightarrow a = b) \\forall a\\forall b(f(a) = f(b) \\rightarrow a = b) Increasing if f (x) \u2264 f (y), and strictly increasing: if f (x) <f (y), whenever x < y and x and y are in the domain of f. Decreasing if f (x) \u2265 f (y), and strictly decreasing if f (x) > f (y), whenever x < y and x and y are in the domain of f. Onto/surjection (\u6ee1\u5c04): if and only if for every element b \u2208 B there is an element a \u2208 A with f (a) = b. A function f is called surjective if it is onto. One-to-one correspondence / bijection (\u53cc\u5c04): if it is both one-to-one and onto. We also say that such a function is bijective. To show that f is injective: Show that if f (x) = f (y) for arbitrary x, y \u2208 A with x \u2260 y, then x = y. To show that f is not injective: Find particular elements x, y \u2208 A such that x \u2260 y and f (x) = f (y). To show that f is surjective: Consider an arbitrary element y \u2208 B and find an element x \u2208 A such that f (x) = y. To show that f is not surjective: Find a particular y \u2208 B such that f (x) \u2260 y for all x \u2208 A. Inverse function: Let f be a one-to-one correspondence from the set A to the set B. The inverse function of f is the function that assigns to an element b belonging to B the unique element a in A such that f(a) = b. The inverse function of f is denoted by f^{\u22121} f^{\u22121} . Hence, f^{\u22121}(b) = a f^{\u22121}(b) = a when f(a) = b. Composition of functions: Let g be a function from the set A to the set B and let f be a function from the set B to the set C. The composition of the functions f and g, denoted for all a \u2208 A by f \u25e6 g, is defined by (f \u25e6 g)(a) = f(g(a)) (f \u25e6 g)(a) = f(g(a)) The graphs of functions: \u2026 Some important functions: Floor(x): [x]","title":"Function"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#sequence","text":"Sequence: A function from a subset of the set of integers (usually either the set {0, 1, 2, \u2026} or the set {1, 2, 3, \u2026}) to a set S. We use the notation a_n a_n to denote the image of the integer n. We call a_n a_n a term of the sequence. Geometric progression: a, ar, ar^2,\u2026 , ar^n a, ar, ar^2,\u2026 , ar^n , \u2026 where a is initial term, r is common ratio. Arithmetic progression: a, a + d, a + 2d, \u2026 , a + nd, \u2026 where a is initial term, d is common difference. String: Finite sequence, where length is the number of terms in the string. Empty string: \u03bb. Recurrence relation: An equation that expresses a_n a_n in terms of one or more of the previous terms of the sequence. Initial condition: Specify the terms that precede the first term where the recurrence relation takes effect. Fibonacci sequence: f_0, f_1, f_2 f_0, f_1, f_2 ,\u2026 , is defined by the initial conditions f_0 = 0, f_1 = 1 f_0 = 0, f_1 = 1 , and the recurrence relation f_n = f_{n\u22121} + f{n\u22122} f_n = f_{n\u22121} + f{n\u22122} . Closed formula: We say that we have solved the recurrence relation together with the initial conditions when we find an explicit formula, called a closed formula, for the terms of the sequence. Finding closed formula: Iteration, forward substitution or backward substitution. Lucas sequence: Fibonacci sequence with different initial condition. Summation notation: \\sum_{i=m}^n{f(i)} \\sum_{i=m}^n{f(i)} where i is index of summation, m is lower limit, n is upper limit. \\sum_{i=0}^n(ar^i)=\\frac{ar^{n+1}-a}{r-1},r{\\neq}1 \\\\ \\sum_{i=0}^ni=\\frac{n(n+1)}{2} \\\\ \\sum_{i=0}^ni^2=\\frac{n(n+1)(2n+1)}{6} \\\\ \\sum_{i=0}^ni^3=\\frac{n^2(n+1)^2}{4} \\\\ \\sum_{i=0}^{\\infty}x^i,|x|<1=\\frac{1}{1-x} \\\\ \\sum_{i=0}^{\\infty}ix^{i-1},|x|<1=\\frac{1}{(1-x)^2} \\sum_{i=0}^n(ar^i)=\\frac{ar^{n+1}-a}{r-1},r{\\neq}1 \\\\ \\sum_{i=0}^ni=\\frac{n(n+1)}{2} \\\\ \\sum_{i=0}^ni^2=\\frac{n(n+1)(2n+1)}{6} \\\\ \\sum_{i=0}^ni^3=\\frac{n^2(n+1)^2}{4} \\\\ \\sum_{i=0}^{\\infty}x^i,|x|<1=\\frac{1}{1-x} \\\\ \\sum_{i=0}^{\\infty}ix^{i-1},|x|<1=\\frac{1}{(1-x)^2}","title":"Sequence"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#cardinality-of-sets","text":"Same cardinality: If and only if there is a one-to-one correspondence from A to B. |A| = |B| Less cardinality: If there is a one-to-one function from A to B, the cardinality of A is less than or the same as the cardinality of B. |A| \u2264 |B|. When |A| \u2264 |B| and A and B have different cardinality, we say that the cardinality of A is less than the cardinality of B. |A| < |B|. Countable set: A set that is either finite or has the same cardinality as the set of positive integers is called countable. Uncountable set: A set that is not countable is called uncountable. When an infinite set S is countable, we denote the cardinality of S by \\aleph_0 \\aleph_0 (where \u05d0 is aleph). |S| = \\aleph_0 \\aleph_0 . S has cardinality \u201caleph null\u201d. Prove by showing one-to-one correspondence, or can be listed. \u2124 is countable: f(n) = n / 2, when n is even; -(n - 1) / 2, when n is odd. \u211a^+ \u211a^+ is countable: Use Cantor Diagonalization Argument for listing. \u211d is uncountable: 0.d_i, d_i = 0 0.d_i, d_i = 0 , if d_{ii} \\neq 0 d_{ii} \\neq 0 ; 1, if d_{ii} = 0 d_{ii} = 0 cannot be listed. If A and B are countable sets, then A \u222a B is also countable. Schr\u00f6der-Bernstein Theorem: If A and B are sets with |A| \u2264 |B| and |B| \u2264 |A|, then |A| = |B|. In other words, if there are one-to-one functions f from A to B and g from B to A, then there is a one-to-one correspondence between A and B. Can use two different functions to prove same cardinality, according to Schr\u00f6der-Bernstein Theorem. Computable / uncomputable function: If there is a computer program in some programming language that finds the values of this function. If a function is not computable we say it is uncomputable. Proof for existence of uncomputable function: Programs are countable (Binary can be listed), but functions are not, e.g. \u2124 -> \u2124 is not. The continuum hypothesis: (We have | P(\u2124^+) P(\u2124^+) | = 2^{\\aleph_0} 2^{\\aleph_0} = |\u211d| = c.) There is no cardinality such that it is greater than \\aleph_0 \\aleph_0 and less than c, or say, c = \\aleph_1 \\aleph_1 in sequence \\aleph_0, \\aleph_1, \\aleph_2 \\aleph_0, \\aleph_1, \\aleph_2 , .... Proving power set related cardinality: Use bit string for element sets of power set. (0, 1) and decimal representation rocks for proof. |(0, 1)| = |\u211d|, can be proved with Schr\u00f6der-Bernstein Theorem.","title":"Cardinality of Sets"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#counting-the-basics-of-counting","text":"The product rule: Suppose that a procedure can be broken down into a sequence of two tasks. If there are n_1 n_1 ways to do the first task and for each of these ways of doing the first task, there are n_2 n_2 ways to do the second task, then there are n_1{\\cdot}n_2 n_1{\\cdot}n_2 ways to do the procedure. The sum rule: If a task can be done either in one of n_1 n_1 ways or in one of n_2 n_2 ways, where none of the set of n_1 n_1 ways is the same as any of the set of n_2 n_2 ways, then there are n_1 + n_2 n_1 + n_2 ways to do the task. The subtraction rule: If a task can be done in either n_1 n_1 ways or n_2 n_2 ways, then the number of ways to do the task is n_1 + n_2 n_1 + n_2 minus the number of ways to do the task that are common to the two different ways. The division rule: There are n/d ways to do a task if it can be done using a procedure that can be carried out in n ways, and for every way w, exactly d of the n ways correspond to way w. Counting problems can be solved using tree diagrams.","title":"Counting The Basics of Counting"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#the-pigeonhole-principle","text":"The pigeonhole principle: If k k is a positive integer and k + 1 k + 1 \u200b or more objects are placed into k k boxes, then there is at least one box containing two or more of the objects. Corollary 1: A function f from a set with k + 1 or more elements to a set with k elements is not one-to-one. The generalized pigeonhole principle: If N N objects are placed into k k \u200b boxes, then there is at least one box containing at least \u2308N/k\u2309 \u2308N/k\u2309 objects. Reverse minimum: (m - 1) * k + 1 Elegant applications: \u2026 Subsequence: Picking elements while the original order is preserved. Theorem: Every sequence of n^2+1 n^2+1 distinct real numbers contains a subsequence of length n+1 that is either strictly increasing or strictly decreasing. The Ramsey number R(m, n), where m and n are positive integers greater than or equal to 2, denotes the minimum number of people at a party such that there are either m mutual friends or n mutual enemies, assuming that every pair of people at the party are friends or enemies.","title":"The Pigeonhole Principle"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#permutations-and-combinations","text":"If n is a positive integer and r is an integer with 1 \u2264 r \u2264 n, then there are P(n, r) = n(n \u2212 1)(n \u2212 2) \u2026 (n \u2212 r + 1) = n! / (n - r)! r-permutations of a set with n distinct elements. P (n, 0) = 1 The number of r-combinations of a set with n elements, where n is a nonnegative integer and r is an integer with 0 \u2264 r \u2264 n, equals C(n, r) = n! / (r!(n \u2212 r)!). Binomial coefficient: (n, r)^T (n, r)^T = C(n, r). P (n, r) = C(n, r) \u00b7 P (r, r). C(n, r) = C(n, n \u2212 r). A combinatorial proof of an identity is a proof that uses counting arguments to prove that both sides of the identity count the same objects but in different ways, or a proof that is based on showing that there is a bijection between the sets of objects counted by the two sides of the identity. These two types of proofs are called double counting proofs and bijective proofs, respectively.","title":"Permutations and Combinations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#binomial-coefficient","text":"The binomial theorem: (x+y)^n=\\sum_{j=0}^{n}\\binom{n}{j}x^{n-j}y^j\\\\ \\sum_{k=0}^{n}\\binom{n}{k}=(1+1)^n=2^n\\\\ \\sum_{k=0}^{n}(-1)^k\\binom{n}{k}=(-1+1)^n=0\\\\ \\sum_{k=0}^{n}2^k\\binom{n}{k}=(2+1)^n=3^n (x+y)^n=\\sum_{j=0}^{n}\\binom{n}{j}x^{n-j}y^j\\\\ \\sum_{k=0}^{n}\\binom{n}{k}=(1+1)^n=2^n\\\\ \\sum_{k=0}^{n}(-1)^k\\binom{n}{k}=(-1+1)^n=0\\\\ \\sum_{k=0}^{n}2^k\\binom{n}{k}=(2+1)^n=3^n Pascal\u2019s identity: \\binom{n+1}{k}=\\binom{n}{k-1}+\\binom{n}{k} \\binom{n+1}{k}=\\binom{n}{k-1}+\\binom{n}{k} So Pascal\u2019s triangle. Vandermonde\u2019s identity: \\binom{m+n}{r}=\\sum_{k=0}^{r}\\binom{m}{r-k}\\binom{n}{k}\\\\ \\binom{2n}{n}=\\sum_{k=0}^{n}\\binom{n}{n-k}\\binom{n}{k}=\\sum_{k=0}^{n}\\binom{n}{k}^2\\\\ \\binom{n+1}{r+1}=\\sum_{j=r}^{n}\\binom{j}{r} \\binom{m+n}{r}=\\sum_{k=0}^{r}\\binom{m}{r-k}\\binom{n}{k}\\\\ \\binom{2n}{n}=\\sum_{k=0}^{n}\\binom{n}{n-k}\\binom{n}{k}=\\sum_{k=0}^{n}\\binom{n}{k}^2\\\\ \\binom{n+1}{r+1}=\\sum_{j=r}^{n}\\binom{j}{r} Prove by combinatorial argument: Use choosing subset, use bit string.","title":"Binomial Coefficient"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#generalized-permutations-and-combinations","text":"The number of r-permutations of a set of n objects with repetition allowed is n^r n^r . There are C(n + r \u2212 1, r) = C(n + r \u2212 1, n \u2212 1) r-combinations from a set with n elements when repetition of elements is allowed. Proved by stars and bars. Method: Stars and bars abstraction. P426 Counting solutions to equation: Notice non-negative or positive integer, the latter implies x_i \\ge 1 x_i \\ge 1 . P427 Nested loop P427 Word letter reordering: The number of different permutations of n objects, where there are n_1 n_1 indistinguishable objects of type 1, n_2 n_2 indistinguishable objects of type 2, \u2026 , and n_k n_k indistinguishable objects of type k, is \\frac{n!}{n_1!n_2! \u00b7\u00b7\u00b7 n_k!} \\frac{n!}{n_1!n_2! \u00b7\u00b7\u00b7 n_k!} Distinguishable objects and distinguishable boxes: The number of ways to distribute n distinguishable objects into k distinguishable boxes so that n_i n_i objects are placed into box i, i = 1, 2, \u2026 , k, equals \\frac{n!}{n_1!n_2!\u00b7\u00b7\u00b7n_k!} \\frac{n!}{n_1!n_2!\u00b7\u00b7\u00b7n_k!} Indistinguishable objects and distinguishable boxes: The number of ways to distribute n indistinguishable objects into k distinguishable boxes so that n_i objects are placed into box i, i = 1, 2, \u2026 , k, equals the n-combination from a set with k elements when repetition is allowed, according to its proof, C(k + n - 1, n). Distinguishable objects and indistinguishable boxes: Can enumerate by n into m, \u2026 , but no simple closed formula. Stirling numbers of the second kind: S(n, j) denote the number of ways to distribute n distinguishable objects into j indistinguishable boxes so that no box is empty. Then the number of ways to distribute n distinguishable objects into k indistinguishable boxes equals \\sum_{j=1}^{k}S(n,j) \\sum_{j=1}^{k}S(n,j) . S(n,j)=\\frac{1}{j!}\\sum_{i=0}{j-1}(-1)^i\\binom{j}{i}(j-i)^n S(n,j)=\\frac{1}{j!}\\sum_{i=0}{j-1}(-1)^i\\binom{j}{i}(j-i)^n Indistinguishable objects and indistinguishable boxes: List partition by decreasing order. If p_k(n) p_k(n) is the number of partitions of n into at most k positive integers, then there are p_k(n) p_k(n) ways to distribute n indistinguishable objects into k indistinguishable boxes.","title":"Generalized Permutations and Combinations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#generating-permutations-and-combinations","text":"Generating permutations: Lexicographic. Next permutation: Find last pair such that a_j < a_{j+1} a_j < a_{j+1} , swap minimum of a_{j+1}, \u2026, a_n a_{j+1}, \u2026, a_n that is greater than a_j a_j with a_j a_j , and list remaining in increasing order. Generating subsets: Use bit string. Generating r-combinations: Lexicographic. Next permutation of {1, 2, \u2026 , n}: Find last a_i a_i such that a_i{\\ne} a_i{\\ne} n-r+i, replace a_i a_i with a_i+1 a_i+1 , a_j a_j with a_i+j-i+1 a_i+j-i+1 (increasing from a_i+1 a_i+1 ). (This is natural.)","title":"Generating Permutations and Combinations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#applications-of-recurrence-relations","text":"Recurrence relation: A rule for determining subsequent terms from those that precede them. Solution of a recurrence relation: A sequence is called a solution of a recurrence relation if its terms satisfy the recurrence relation. Rabbits: f_n = f_{n-1} + f_{n-2} f_n = f_{n-1} + f_{n-2} . Hanoi: H_n=2H_{n-1}+1, H_1=1 H_n=2H_{n-1}+1, H_1=1 . Bit string without two consecutive zeros: a_n = a_{n-1} + a_{n-2} a_n = a_{n-1} + a_{n-2} . Dynamic programming.","title":"Applications of Recurrence Relations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#solving-linear-recurrence-relations","text":"Linear homogeneous recurrence relation of degree k k with constant coefficients: A recurrence relation of the form a_n=c_1a_{n-1}+c_2a_{n-2}+\u00b7\u00b7\u00b7+c_ka_{n-k}, a_n=c_1a_{n-1}+c_2a_{n-2}+\u00b7\u00b7\u00b7+c_ka_{n-k}, where c_1, c_2, \u2026, c_k c_1, c_2, \u2026, c_k are real numbers, and c_k \\neq 0 c_k \\neq 0 . Characteristic equation: Suppose a_n=r^n a_n=r^n , then r^k-c_1r^{k-1}-c_2r^{k-2}-...-c_{k-1}r-c_k=0 r^k-c_1r^{k-1}-c_2r^{k-2}-...-c_{k-1}r-c_k=0 is the characteristic equation. The solutions are called characteristic roots. Theorem 1: Let c_1 c_1 and c_2 c_2 be real numbers. Suppose that r^2-c_1r-c_2=0 r^2-c_1r-c_2=0 has two distinct roots r_1 r_1 and r_2 r_2 . Then the sequence \\{a_n\\} \\{a_n\\} is a solution of the recurrence relation a_n=c_1a_{n-1}+c_2a_{n-2} a_n=c_1a_{n-1}+c_2a_{n-2} if and only if a_n=\u03b1_1r_1^n+\u03b1_2r_2^n a_n=\u03b1_1r_1^n+\u03b1_2r_2^n for n n = 0, 1, 2, \u2026, where \u03b1_1 \u03b1_1 and \u03b1_2 \u03b1_2 are constants. Theorem 2: Let c_1 c_1 and c_2 c_2 be real numbers with c_2 \\neq 0 c_2 \\neq 0 . Suppose that r^2-c_1r-c_2=0 r^2-c_1r-c_2=0 has only one root r_0 r_0 . A sequence \\{a_n\\} \\{a_n\\} is a solution of the recurrence relation a_n=c_1a_{n-1}+c_2a_{n-2} a_n=c_1a_{n-1}+c_2a_{n-2} if and only if a_n=\u03b1_1r_0^n+\u03b1_2nr_0^n a_n=\u03b1_1r_0^n+\u03b1_2nr_0^n , for n n = 0, 1, 2, \u2026, where \u03b1_1 \u03b1_1 and \u03b1_2 \u03b1_2 are constants. Theorem 3: Let c_1, c_2, ..., c_k c_1, c_2, ..., c_k be real numbers. Suppose that the characteristic equation r^k-c_1r^{k-1}-...-c_k=0 r^k-c_1r^{k-1}-...-c_k=0 has k k distinct roots r_1, r_2, ..., r_k r_1, r_2, ..., r_k . Then a sequence \\{a_n\\} \\{a_n\\} is a solution of the recurrence relation a^n=c_1a^{n-1}+c_2a^{n-2}+...+c_ka^{n-k} a^n=c_1a^{n-1}+c_2a^{n-2}+...+c_ka^{n-k} if and only if a^n = \u03b1_1r_1^n+\u03b1_2r_2^n+\u00b7\u00b7\u00b7+\u03b1_kr_k^n a^n = \u03b1_1r_1^n+\u03b1_2r_2^n+\u00b7\u00b7\u00b7+\u03b1_kr_k^n for n n = 0, 1, 2, \u2026, where \u03b1_1, \u03b1_2, ..., \u03b1_k \u03b1_1, \u03b1_2, ..., \u03b1_k are constants. Theorem 4: Let c_1, c_2, \u2026, c_k c_1, c_2, \u2026, c_k be real numbers. Suppose that the characteristic equation r^k - c_1r^k-1 - \u00b7\u00b7\u00b7 - c_k = 0 r^k - c_1r^k-1 - \u00b7\u00b7\u00b7 - c_k = 0 has t t distinct roots r_1, r_2, \u2026, r_t r_1, r_2, \u2026, r_t with multiplicities m_1, m_2, \u2026, m_t m_1, m_2, \u2026, m_t , respectively, so that m_i\\geq1 m_i\\geq1 for i i = 1, 2, \u2026, t and m_1+m_2+\u00b7\u00b7\u00b7+m_t=k m_1+m_2+\u00b7\u00b7\u00b7+m_t=k . Then a sequence \\{a_n\\} \\{a_n\\} is a solution of the recurrence relation a_n=c_1a_{n-1}+c_2a_{n-2}+\u00b7\u00b7\u00b7+c_ka_{n-k} a_n=c_1a_{n-1}+c_2a_{n-2}+\u00b7\u00b7\u00b7+c_ka_{n-k} if and only if a_n=(\u03b1_{1, 0}+\u03b1_{1, 1}n+\u00b7\u00b7\u00b7+\u03b1_{1, m_1-1}n^{m_1-1})r_1^n\\\\ +(\u03b1_{2, 0}+\u03b1_{2, 1}n+\u00b7\u00b7\u00b7+\u03b1_{2, m_2-1}n^{m_2-1})r_2^n\\\\ +\u00b7\u00b7\u00b7+(\u03b1_{t, 0}+\u03b1_{t, 1}^n+\u00b7\u00b7\u00b7+\u03b1_{t, m_t-1}n^{m_t-1})r_t^n a_n=(\u03b1_{1, 0}+\u03b1_{1, 1}n+\u00b7\u00b7\u00b7+\u03b1_{1, m_1-1}n^{m_1-1})r_1^n\\\\ +(\u03b1_{2, 0}+\u03b1_{2, 1}n+\u00b7\u00b7\u00b7+\u03b1_{2, m_2-1}n^{m_2-1})r_2^n\\\\ +\u00b7\u00b7\u00b7+(\u03b1_{t, 0}+\u03b1_{t, 1}^n+\u00b7\u00b7\u00b7+\u03b1_{t, m_t-1}n^{m_t-1})r_t^n for n n = 0, 1, 2, \u2026, where \u03b1_{i, j} \u03b1_{i, j} are constants for 1\\leq{i}\\leq{t} 1\\leq{i}\\leq{t} and 0\\leq{j}\\leq{m}_i-1 0\\leq{j}\\leq{m}_i-1 . Theorem 5: If \\{a_n^{(p)}\\} \\{a_n^{(p)}\\} is a particular solution of the nonhomogeneous linear recurrence relation with constant coefficients a_n=c_1a_{n-1}+c_2a_{n-2}+...+c_ka_{n-k}+F(n), a_n=c_1a_{n-1}+c_2a_{n-2}+...+c_ka_{n-k}+F(n), then every solution is of the form \\{a_n^{(p)}+a_n^{(h)}\\} \\{a_n^{(p)}+a_n^{(h)}\\} , where \\{a_n^{(h)}\\} \\{a_n^{(h)}\\} is a solution of the associated homogeneous recurrence relation a_n=c_1a_{n-1}+c_2a_{n-2}+...+c_ka_{n-k}. a_n=c_1a_{n-1}+c_2a_{n-2}+...+c_ka_{n-k}. Theorem 6: If F(n)=(b_tn^t+b_{t-1}n^{t-1}+...+b_1n+b_0)s^n, F(n)=(b_tn^t+b_{t-1}n^{t-1}+...+b_1n+b_0)s^n, when s s is not a root of the characteristic equation of the associated linear homogeneous recurrence relation, there is a particular solution of the form (p_tn^t+p_{t-1}n^{t-1}+...+p_1n+p_0)s^n (p_tn^t+p_{t-1}n^{t-1}+...+p_1n+p_0)s^n When s s is a root of this characteristic equation and its multiplicity is m m , there is a particular solution of the form n^m(p_tn^t+p_{t-1}n^{t-1}+...+p_1n+p_0)s^n. n^m(p_tn^t+p_{t-1}n^{t-1}+...+p_1n+p_0)s^n.","title":"Solving Linear Recurrence Relations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#generating-functions","text":"The (ordinary) generating function for the sequence a_0,a_1,...,a_k a_0,a_1,...,a_k ,... of real numbers is the infinite series G(x)=a_0+a_1x+...+a_kx^k+...=\\sum_{k=0}^\\infty{a}_kx^k. G(x)=a_0+a_1x+...+a_kx^k+...=\\sum_{k=0}^\\infty{a}_kx^k. We can define generating functions for finite sequences of real numbers by setting a_{n+1}=a_{n+2}=...=0 a_{n+1}=a_{n+2}=...=0 f(x)=\\frac{1}{1-x} f(x)=\\frac{1}{1-x} is the generating function of \\{1\\} \\{1\\} for |x|<1. f(x)=\\frac{1}{1-ax} f(x)=\\frac{1}{1-ax} is the generating function of \\{a^n\\} \\{a^n\\} for |ax|<1. Let f(x)=\\sum_{k=0}^\\infty{a}_kx^k f(x)=\\sum_{k=0}^\\infty{a}_kx^k and g(x)=\\sum_{k=0}^\\infty{b}_kx^k g(x)=\\sum_{k=0}^\\infty{b}_kx^k , then f(x)+g(x)=\\sum_{k=0}^\\infty(a_k+b_k)x^k and f(x)g(x)=\\sum_{k=0}^\\infty(\\sum_{j=0}^ka_jb_{k-j})x^k. f(x)+g(x)=\\sum_{k=0}^\\infty(a_k+b_k)x^k and f(x)g(x)=\\sum_{k=0}^\\infty(\\sum_{j=0}^ka_jb_{k-j})x^k. Let u u be a real number and k k a nonnegative integer. Then the extended binomial coefficient \\binom{u}{k} \\binom{u}{k} is defined by \\binom{u}{k}=\\begin{cases} u(u-1)...(u-k+1)/k! &\\text{if } k>0\\\\ 1 &\\text{if } k=0. \\end{cases} \\binom{u}{k}=\\begin{cases} u(u-1)...(u-k+1)/k! &\\text{if } k>0\\\\ 1 &\\text{if } k=0. \\end{cases} \\binom{-n}{r}=(-1)^r\\binom{n+r-1}{r} \\binom{-n}{r}=(-1)^r\\binom{n+r-1}{r} The extended binomial theorem: Let x x be a real number with |x|<1 and let u u be a real number. Then (1+x)^u=\\sum_{k=0}^\\infty\\binom{u}{k}x^k. (1+x)^u=\\sum_{k=0}^\\infty\\binom{u}{k}x^k. Find number of solutions: e_1+e_2+\\cdots+e_n=C, e_1+e_2+\\cdots+e_n=C, l_i\\leq{e}_i\\leq{u_i} l_i\\leq{e}_i\\leq{u_i} , then it is the coefficient of x^C x^C from (x^{l_i}+...+x^{u_i})...(...) (x^{l_i}+...+x^{u_i})...(...) . Form value r r with tokens of value t_i t_i : When order matters, ways of exactly n n tokens is the coefficient of x^r x^r from (x^{t_i}+...)^n (x^{t_i}+...)^n , so for all it is the coefficient of x^r x^r from 1+...+(x^{t_i}+...)^n 1+...+(x^{t_i}+...)^n ; else, it is the coefficient of x^r x^r from (1+...+(x^{t_i})^n)+... (1+...+(x^{t_i})^n)+... . More powerful and constraint-friendly then simple permutation and combination. Solve recurrence relations: Multiply x^n x^n to the recurrence relation. Substitute the multiplied relation into G(x)=\\sum_{k=0}^\\infty{a}_kx^k=..., G(x)=\\sum_{k=0}^\\infty{a}_kx^k=..., solve for G(x) G(x) , then make it a summation to see a_n a_n . Proving identity: Take combination as a coefficient of certain term.","title":"Generating Functions"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#inclusion-exclusion","text":"|A\\cup{B}|=|A|+|B|-|A\\cap{B}|.\\\\ |A\\cup{B}\\cup{C}|=|A|+|B|+|C|-|A\\cap{B}|-|B\\cap{C}|-|C\\cap{A}|+|A\\cap{B}\\cap{C}|\\\\ \u2026 |A\\cup{B}|=|A|+|B|-|A\\cap{B}|.\\\\ |A\\cup{B}\\cup{C}|=|A|+|B|+|C|-|A\\cap{B}|-|B\\cap{C}|-|C\\cap{A}|+|A\\cap{B}\\cap{C}|\\\\ \u2026 Number of integers divisible: \\lfloor{n}/a\\rfloor+\\lfloor{n}/b\\rfloor-\\lfloor{n}/ab\\rfloor. \\lfloor{n}/a\\rfloor+\\lfloor{n}/b\\rfloor-\\lfloor{n}/ab\\rfloor.","title":"Inclusion-Exclusion"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#applications-of-inclusion-exclusion","text":"Asking element count having none of some properties: Use inclusion-exclusion. The number of primes (The sieve of Eratosthenes): A composite number is divisible by a prime smaller than its square root. The number of onto functions: The shouldn\u2019t have properties are not having element i i in the range. Let m m and n n be positive integers with m \\geq{n} m \\geq{n} . Then, there are n^m-C(n,1)(n-1)^m+C(n,2)(n-2)^m-...+(-1)^{n-1}C(n,n-1)1^m n^m-C(n,1)(n-1)^m+C(n,2)(n-2)^m-...+(-1)^{n-1}C(n,n-1)1^m onto functions from a set with m elements to a set with n elements. Derangement: A permutation of objects that leaves no object in its original position. The number of derangements of a set with n n elements is D_n=n![1-\\frac{1}{1!}+\\frac{1}{2!}-\\frac{1}{3!}+...+(-1)^n\\frac{1}{n!}]\\to{n}!e^{-1}. D_n=n![1-\\frac{1}{1!}+\\frac{1}{2!}-\\frac{1}{3!}+...+(-1)^n\\frac{1}{n!}]\\to{n}!e^{-1}. For arranging differently between two times, the number is n!D_n=(n!)^2[1-\\frac{1}{1!}+\\frac{1}{2!}-\\frac{1}{3!}+...+(-1)^n\\frac{1}{n!}] n!D_n=(n!)^2[1-\\frac{1}{1!}+\\frac{1}{2!}-\\frac{1}{3!}+...+(-1)^n\\frac{1}{n!}] because the first arrangement can have n! n! ways.","title":"Applications of Inclusion-Exclusion"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#relations-their-properties-and-representations","text":"Binary relation: Let A and B be sets. A binary relation from A to B is a subset of A\\times{B} A\\times{B} . a\\mathrel{R}b a\\mathrel{R}b or a\\not\\!\\!R \\;b a\\not\\!\\!R \\;b . Matrix representation: M_R,m_{ij}=(a_i,b_j)\\in{R} M_R,m_{ij}=(a_i,b_j)\\in{R} . Functions can be relations. Relation on a set: A relation on a set A A is a relation from A A to A A . Reflexive: A relation R R on a set A A is called reflexive if (a,a)\\in{R} (a,a)\\in{R} for every element a\\in{A} a\\in{A} . Irreflexive: A relation R R on the set A A is irreflexive if for every a\\in{A} a\\in{A} , (a,a)\\not\\in{R} (a,a)\\not\\in{R} . Symmetric: A relation R R on a set A A is called symmetric if (b,a)\\in{R} (b,a)\\in{R} whenever (a,b)\\in{R} (a,b)\\in{R} , for all a,b\\in{A} a,b\\in{A} . In matrix it is 1 to 1 and 0 to 0 mirrored by the main diagonal, or M_R=(M_R)^T M_R=(M_R)^T . Asymmetric: A relation R R is called asymmetric if (a,b)\\in{R} (a,b)\\in{R} implies that (b,a)\\not\\in{R} (b,a)\\not\\in{R} (So the main diagonal are all zeros). Antisymmetric: A relation R R on a set A A such that for all a,b\\in{A} a,b\\in{A} , if (a,b)\\in{R} (a,b)\\in{R} and (b,a)\\in{R} (b,a)\\in{R} , then a=b a=b is called antisymmetric. In matrix it is 1 to 0, 0 to 1 or 0 to 0 mirrored by the main diagonal. Antisymmetric is not Asymmetric, but Asymmetric is Antisymmetric. Transitive: A relation R R on a set A A is called transitive if whenever (a,b)\\in{R} (a,b)\\in{R} and (b,c)\\in{R} (b,c)\\in{R} , then (a,c)\\in{R} (a,c)\\in{R} , for all a,b,c\\in{A} a,b,c\\in{A} . Combining Relations: Relations can be combined like sets. M_{R_1\\cup{R}_2}=M_{R_1}\\vee{M}_{R_2}\\\\ M_{R_1\\cap{R}_2}=M_{R_1}\\wedge{M}_{R_2}\\\\ M_{R\\circ{S}}=M_S\\bigodot{M}_R (\\bigodot \\text{stands for boolean product})\\\\ M_{R^n}=(M_R)^n M_{R_1\\cup{R}_2}=M_{R_1}\\vee{M}_{R_2}\\\\ M_{R_1\\cap{R}_2}=M_{R_1}\\wedge{M}_{R_2}\\\\ M_{R\\circ{S}}=M_S\\bigodot{M}_R (\\bigodot \\text{stands for boolean product})\\\\ M_{R^n}=(M_R)^n Symmetric difference: The symmetric difference of A A and B B , denoted by A\\bigoplus{B} A\\bigoplus{B} , is the set containing those elements in either A A or$ B$, but not in both A A and B B . M_{\\bigoplus R} M_{\\bigoplus R} is the entry-wise XORed matrix. Composition: The composite of R R and S S is the relation consisting of ordered pairs (a, c) (a, c) , where a\\in{A} a\\in{A} , c\\in{C} c\\in{C} , and for which there exists an element b\\in{B} b\\in{B} such that (a,b)\\in{R} (a,b)\\in{R} and (b,c)\\in{S} (b,c)\\in{S} . We denote the composite of R R and S S by S\\circ{R} S\\circ{R} . S\\circ{R} S\\circ{R} is from right to left (inside to outside)! Composition can be done by matrix multiplication. Power: Let R R be a relation on the set A A . The powers R^n R^n , $n=1, 2, 3 ,..., $ are defined recursively by R^1=R R^1=R and R^{n+1}=R^n\\circ{R} R^{n+1}=R^n\\circ{R} . Theorem: The relation R R on a set A A is transitive if and only if R^n\\subseteq{R} R^n\\subseteq{R} for n=1, 2, 3, ... n=1, 2, 3, ... . Inverse relation: R^{-1} R^{-1} , with pairs inverted. Relations on a finite set can also be represented by digraphs (directed graphs). (R\\cup{S})^{-1}=R^{-1}\\cup{S}^{-1}\\\\ (R\\cap{S})^{-1}=R^{-1}\\cap{S}^{-1}\\\\ (\\overline{R})^{-1}=\\overline{R^{-1}}\\\\ (R-S)^{-1}=R^{-1}-S^{-1}\\\\ (A\\times{B})^{-1}=B\\times{A} (R\\cup{S})^{-1}=R^{-1}\\cup{S}^{-1}\\\\ (R\\cap{S})^{-1}=R^{-1}\\cap{S}^{-1}\\\\ (\\overline{R})^{-1}=\\overline{R^{-1}}\\\\ (R-S)^{-1}=R^{-1}-S^{-1}\\\\ (A\\times{B})^{-1}=B\\times{A}","title":"Relations, Their Properties and Representations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#closures-of-relations","text":"Closure of R R with respect to P : The relation with property P containing R R such that it is a subset of every relation with property P containing R R . Diagonal relation: \\Delta=\\{(a,a)|a\\in{A}\\} \\Delta=\\{(a,a)|a\\in{A}\\} . Reflexive closure of R R : The smallest reflexive relation that contains R R . Formed by R\\cup\\Delta R\\cup\\Delta . Symmetric closure of R R : The smallest symmetric relation that contains R R . Formed by R\\cup{R}^{-1} R\\cup{R}^{-1} . Transitive closure of R R : The smallest transitive relation that contains R R . Path: A sequence of consecutive edges, denoted by x_0,x_1,x_2,...,x_{n-1},x_n x_0,x_1,x_2,...,x_{n-1},x_n , with length n n . Circuit (or cycle): A path of length n\\geq{1} n\\geq{1} that begins and ends at the same vertex. Path on relation: There is a path from a a to b b in R R if there is a sequence of elements a,x_1,x_2,...,x_{n\u22121} a,x_1,x_2,...,x_{n\u22121} , b b with (a,x_1)\\in{R} (a,x_1)\\in{R} , (x_1,x_2)\\in{R} (x_1,x_2)\\in{R} , ..., and (x_{n\u22121},b)\\in{R} (x_{n\u22121},b)\\in{R} . Theorem 1: Let R R be a relation on a set A A . There is a path of length n n , where n n is a positive integer, from a a to b b if and only if (a,b)\\in{R}^n (a,b)\\in{R}^n . Connectivity relation: Let R R be a relation on a set A A . The connectivity relation R^* R^* consists of the pairs (a,b) (a,b) such that there is a path of length at least one from a a to b b in R R . R^*=\\bigcup_{n=1}^\\infty{R}^n R^*=\\bigcup_{n=1}^\\infty{R}^n Theorem 2: The transitive closure of a relation R R equals the connectivity relation R^* R^* . Lemma 1: Let A A be a set with n elements, and let R R be a relation on A A . If there is a path of length at least one in R R from a a to b b , then there is such a path with length not exceeding n n . Moreover, when a\\neq{b} a\\neq{b} , if there is a path of length at least one in R R from a a to b b , then there is such a path with length not exceeding n\u22121 n\u22121 . R^*=\\bigcup_{i=1}^nR^i R^*=\\bigcup_{i=1}^nR^i Theorem 3: Let M_R M_R be the zero\u2013one matrix of the relation R R on a set with n n elements. Then the zero\u2013one matrix of the transitive closure R^* R^* is M_{R^*}=M_R\\vee{M}_R^{[2]}\\vee{M}_R^{[3]}\\vee...\\vee{M}_R^{[n]}. M_{R^*}=M_R\\vee{M}_R^{[2]}\\vee{M}_R^{[3]}\\vee...\\vee{M}_R^{[n]}. Interior vertices: Vertices of a path excluding the first and the last. W_0=M_R, W_i=[w_{ij}^{(k)}] W_0=M_R, W_i=[w_{ij}^{(k)}] , where w_{ij} w_{ij} is whether there is a path from v_i v_i to v_j v_j such that all interior vertices are in the first i i elements of the list (The list is prepared beforehand). W_n=M_{R^*}. W_n=M_{R^*}. Lemma 2: w_{ij}^{[k]}=w_{ij}^{[k-1]}\\vee(w_{ik}^{[k-1]}\\wedge{w}_{kj}^{[k-1]}) w_{ij}^{[k]}=w_{ij}^{[k-1]}\\vee(w_{ik}^{[k-1]}\\wedge{w}_{kj}^{[k-1]})","title":"Closures of Relations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#equivalence-relations","text":"Equivalence Relation: A A relation on a set A A is called an equivalence relation if it is reflexive, symmetric, and transitive. Equivalent: Two elements a a and b b that are related by an equivalence relation are called equivalent. The notation a\\tilde{b} a\\tilde{b} is often used to denote that a a and b b are equivalent elements with respect to a particular equivalence relation. Congruence Modulo m m is an equivalence relation. Equivalence class: Let R R be an equivalence relation on a set A A . The set of all elements that are related to an element a of A A is called the equivalence class of a a . The equivalence class of a a with respect to R R is denoted by [a]_R [a]_R . When only one relation is under consideration, we can delete the subscript R R and write [a] [a] for this equivalence class. Representative of equivalence class: If b\\in[a]_R b\\in[a]_R , then b b is called a a representative of this equivalence class. Theorem 1: Let R R be an equivalence relation on a set A A . These statements for elements a a and b b of A A are equivalent: aRb \\\\ [a]=[b] \\\\ [a]\\cap[b]\\neq\\varnothing aRb \\\\ [a]=[b] \\\\ [a]\\cap[b]\\neq\\varnothing Partition: Partition of a set S S is a collection of disjoint nonempty subsets of S S that have S S as their union. Theorem 2: Let R R be an equivalence relation on a set S S . Then the equivalence classes of R R form a partition of S S . Conversely, given a partition \\{A_i|i\\in{I}\\} \\{A_i|i\\in{I}\\} of the set S S , there is an equivalence relation R R that has the sets A_i,i\\in{I} A_i,i\\in{I} , as its equivalence classes. The m congruence modulo classes are denoted by [0]_m, [1]_m, ..., [m\u22121]_m [0]_m, [1]_m, ..., [m\u22121]_m .","title":"Equivalence Relations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#partial-ordering","text":"Partial ordering: A relation R R on a set S S is called a partial ordering or partial order if it is reflexive, antisymmetric, and transitive. Partially ordered set (poset): A set S S together with a partial ordering R R is called a partially ordered set, or poset, and is denoted by (S,R) (S,R) . Members of S S are called elements of the poset. Less/greater than or equal ( \\leq/\\geq \\leq/\\geq ), inclusion relation ( \\subseteq \\subseteq ), divisibility relation (|) are all partial orderings. Less/greater than ($$) are antisymmetric and transitive, but not reflexive, so they are not partial orderings. Comparable: The elements a a and b b of a poset (S,\\preceq) (S,\\preceq) are called comparable if either a\\preceq b a\\preceq b or b\\preceq a b\\preceq a . When a a and b b are elements of S S such that neither a\\preceq b a\\preceq b nor b\\preceq a b\\preceq a , a a and b b are called incomparable. Totally/linearly ordered set: If (S,\\preceq) (S,\\preceq) is a poset and every two elements of S S are comparable, S S is called a totally or linearly ordered set, and \\preceq \\preceq is called a total or linear order. A totally ordered set is also called a chain. Well-ordered set: (S,\\preceq) (S,\\preceq) is a well-ordered set if it is a poset such that \\preceq \\preceq is a total ordering and every nonempty subset of S S has a least element. The principle of well-ordered induction: Suppose that S S is a well-ordered set. Then P(x) P(x) is true for all $x\\in S $, if (inductive step:) For every y\\in{S} y\\in{S} , if P(x) P(x) is true for all x\\in{S} x\\in{S} with x\\prec{y} x\\prec{y} , then P(y) P(y) is true. Lexicographic ordering: The lexical ordering \\prec \\prec on A_1\\times{A}_2 A_1\\times{A}_2 is defined by specifying that one pair is less than a second pair if the first entry of the first pair is less than (in A_1 A_1 ) the first entry of the second pair, or if the first entries are equal, but the second entry of this pair is less than (in A_2 A_2 ) the second entry of the second pair. Hasse diagram: Start with the directed graph for this relation. First, Remove these loops because of reflexivity. Next, remove all edges that must be in the partial ordering because of transitivity. Finally, arrange each edge so that its initial vertex is below its terminal vertex and remove all the arrows on edges. Covers: An element y\\in{S} y\\in{S} covers an element x\\in{S} x\\in{S} if x\\prec{y} x\\prec{y} and there is no element z\\in{S} z\\in{S} such that x\\prec{z}\\prec{y} x\\prec{z}\\prec{y} . Covering relation: The set of pairs (x,y) (x,y) such that y y covers x x is called the covering relation of (S,\\preceq) (S,\\preceq) . Maximal element: An element of a poset is called maximal if it is not less than any element of the poset. The top element of a Hasse diagram. Minimal element: An element of a poset is called minimal if it is not greater than any element of the poset. The bottom element of a Hasse diagram. Greatest element: An element in a poset that is greater than every other element. Least element: An element in a poset that is less than every other element. Upper bound: Element greater than or equal to all the elements in a subset A A of S S . Lower bound: Element less than or equal to all the elements in a subset A A of S S . Least upper bound: Upper bound that is less than every other upper bound of a subset A A of S S . Greatest lower bound: Lower bound that is greater than every other lower bound of a subset A A of S S . Lattice: A partially ordered set in which every pair of elements has both a least upper bound and a greatest lower bound is called a lattice. (\\mathcal{P}(S),\\subseteq/\\supseteq) (\\mathcal{P}(S),\\subseteq/\\supseteq) is a lattice, with LUB and GLB being A\\cup{B} A\\cup{B} and A\\cap{B} A\\cap{B} . Compatible: A total ordering \\preceq \\preceq said to be compatible with the partial ordering R R if a\\preceq{b} a\\preceq{b} whenever aRb aRb . Topological sorting: Constructing a compatible total ordering from a partial ordering. Lemma 1: Every finite nonempty poset (S,\\preceq) (S,\\preceq) has at least one minimal element. Algorithm for topological sorting: Pick the least element and remove it from the poset. Can also be done with a Hasse diagram.","title":"Partial Ordering"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#graphs-and-graph-models","text":"(Undirected) graph: A graph G=(V,E) G=(V,E) consists of V, a nonempty set of vertices (or nodes) and E, a set of edges. Each edge has either one or two vertices associated with it, called its endpoints . An edge is said to connect , its endpoints. Simple graph: A graph in which each edge connects two different vertices and where no two edges connect the same pair of vertices is called a simple graph. Infinite graph: A graph with an infinite vertex set or an infinite number of edges is called an infinite graph. Finite graph: a graph with a finite vertex set and a finite edge set is called a finite graph. Multigraph: Graphs that may have multiple edges connecting the same vertices are called multigraphs. Loop: Edges that connect a vertex to itself. Pseudographs: Graphs that may include loops, and possibly multiple edges connecting the same pair of vertices or a vertex to itself. Directed graph (digraph): A directed graph (or digraph) (V,E) (V,E) consists of a nonempty set of vertices V and a set of directed edges (or arcs) E. Each directed edge is associated with an ordered pair of vertices. The directed edge associated with the ordered pair (u,v) (u,v) is said to start at u and end at v. Simple directed graph: A directed graph with no loops and no multiple directed edges that start and end at the same vertices. Directed multigraphs: Directed graphs that may have multiple directed edges from a vertex to a second (possibly the same) vertex. Multiplicity: When there are m directed edges, each associated to an ordered pair of vertices (u,v) (u,v) , we say that (u,v) (u,v) is an edge of multiplicity m. Mixed graph: A graph with both directed and undirected edges.","title":"Graphs and Graph Models"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#graph-terminology-and-special-types-of-graphs","text":"Adjacent (Neighbor): Two vertices u and v in an undirected graph G are called adjacent (or neighbors) in G if u and v are endpoints of an edge e of G. Such an edge e is called incident with the vertices u and v and e is said to connect u and v. Neighborhood: The set of all neighbors of a vertex v of G=(V,E) G=(V,E) , denoted by N(v), is called the neighborhood of v. If A is a subset of V , we denote by N(A) the set of all vertices in G that are adjacent to at least one vertex in A. So, N(A)=\\bigcup_{v\\in{A}}N(v) N(A)=\\bigcup_{v\\in{A}}N(v) . Degree: The degree of a vertex in an undirected graph is the number of edges incident with it, except that a loop at a vertex contributes twice to the degree of that vertex. The degree of the vertex v is denoted by deg(v) deg(v) . Theorem 1, The handshaking theorem: Let G=(V,E) G=(V,E) be an undirected graph with m edges. Then 2m=\\sum_{v\\in{V}}deg(v). 2m=\\sum_{v\\in{V}}deg(v). Theorem 2: An undirected graph has an even number of vertices of odd degree. Adjacent to/from, initial/terminal vertex: When (u,v) (u,v) is an edge of the graph G G with directed edges, u is said to be adjacent to v and v is said to be adjacent from u. The vertex u is called the initial vertex of (u,v) (u,v) , and v is called the terminal or end vertex of (u,v) (u,v) . The initial vertex and terminal vertex of a loop are the same. In/out degree: In a graph with directed edges the in-degree of a vertex v, denoted by deg^\u2212(v) deg^\u2212(v) , is the number of edges with v as their terminal vertex. The out-degree of v, denoted by deg^+(v) deg^+(v) , is the number of edges with v as their initial vertex. (Note that a loop at a vertex contributes 1 to both the in-degree and the out-degree of this vertex.) Theorem 3: Let G=(V,E) G=(V,E) be a graph with directed edges. Then \\sum_{v\\in{V}}deg^\u2212(v)=\\sum_{v\\in{V}}deg^+(v)=|E|. \\sum_{v\\in{V}}deg^\u2212(v)=\\sum_{v\\in{V}}deg^+(v)=|E|. Underlying undirected graph: The undirected graph that results from ignoring directions of edges is called the underlying undirected graph. Complete graph: A complete graph on n vertices, denoted by K_n K_n , is a simple graph that contains exactly one edge between each pair of distinct vertices. Noncomplete graph: A simple graph for which there is at least one pair of distinct vertex not connected by an edge. Cycle: A cycle C_n C_n , n\\geq3 n\\geq3 , consists of n n vertices v_1,v_2,...,v_n v_1,v_2,...,v_n and edges \\{v_1,v_2\\}, \\{v_2,v_3\\}, ..., \\{v_{n\u22121},v_n\\}, \\{v_n,v_1\\} \\{v_1,v_2\\}, \\{v_2,v_3\\}, ..., \\{v_{n\u22121},v_n\\}, \\{v_n,v_1\\} . Wheel: We obtain a wheel W_n when we add an additional vertex to a cycle C_n C_n , for n\\geq3 n\\geq3 , and connect this new vertex to each of the n n vertices in C_n C_n , by new edges. n-Cube: An n-dimensional hypercube, or n-cube, denoted by Q_n Q_n , is a graph that has vertices representing the 2^n 2^n bit strings of length n. Bipartite and bipartition: A simple graph G G is called bipartite if its vertex set V V can be partitioned into two disjoint sets V_1 V_1 and V_2 V_2 such that every edge in the graph connects a vertex in V_1 V_1 and a vertex in V_2 V_2 (so that no edge in G connects either two vertices in V_1 V_1 or two vertices in V_2 V_2 ). When this condition holds, we call the pair (V_1,V_2) (V_1,V_2) a bipartition of the vertex set V V of G G . Theorem 4: A simple graph is bipartite if and only if it is possible to assign one of two different colors to each vertex of the graph so that no two adjacent vertices are assigned the same color. Complete Bipartite Graph: A complete bipartite graph K_{m,n} K_{m,n} is a graph that has its vertex set partitioned into two subsets of m and n vertices, respectively with an edge between two vertices if and only if one vertex is in the first subset and the other vertex is in the second subset. Bipartite graphs can be used to model many types of applications that involve matching the elements of one set to elements of another. Regular graph: A simple graph is called regular if every vertex of this graph has the same degree. A regular graph is called n-regular if every vertex in this graph has degree n. Subgraph: A subgraph of a graph G=(V,E) G=(V,E) is a graph H=(W,F) H=(W,F) , where W\\subseteq{V} W\\subseteq{V} and F\\subseteq{E} F\\subseteq{E} . A subgraph H H of G G is a proper subgraph of G G if H\\neq G H\\neq G . Subgraph induced by vertex set: Let G=(V,E) G=(V,E) be a simple graph. The subgraph induced by a subset W W of the vertex set V V is the graph (W,F) (W,F) , where the edge set F F contains an edge in E E if and only if both endpoints of this edge are in W W . Spanning subgraph: H H is a spanning subgraph of G G if W=V W=V , F\\subseteq{E} F\\subseteq{E} . Union of graph: The union of two simple graphs G_1=(V_1,E_1) G_1=(V_1,E_1) and G_2= (V_2,E_2) G_2= (V_2,E_2) is the simple graph with vertex set V_1\\cup{V}_2 V_1\\cup{V}_2 and edge set E_1\\cup{E}_2 E_1\\cup{E}_2 . The union of G_1 G_1 and G_2 G_2 is denoted by G_1\\cup{G}_2 G_1\\cup{G}_2 .","title":"Graph Terminology and Special Types of Graphs"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#representing-graphs-and-graph","text":"Isomorphism Adjacency list: Vertex and Adjacent vertices for simple graph, Initial vertex and terminal vertices for directed graph. Adjacency matrix: A (or A_G ). Incidence matrix: 1 when edge j is incident with vertex i. Isomorphism: The simple graphs G_1=(V_1,E_1) G_1=(V_1,E_1) and G_2=(V_2,E_2) G_2=(V_2,E_2) are isomorphic if there exists a one-to-one and onto function f from V_1 V_1 to V_2 V_2 with the property that a and b are adjacent in G_1 G_1 if and only if f(a) f(a) and f(b) f(b) are adjacent in G_2 G_2 , for all a and b in V_1 V_1 . Such a function f is called an isomorphism. Two simple graphs that are not isomorphic are called nonisomorphic. Graph invariant: A property preserved by isomorphism of graphs is called a graph invariant. Graph invariants include: The number of vertices, the number of edges, the number of vertices of each degree (useful), bipartite, complete, wheel. Can also check isomorphism by making a function that maps vertices and checking whether it is preserving edges using adjacent matrix.","title":"Representing Graphs and Graph"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#connectivity","text":"Path: A sequence of edges that begins at a vertex of a graph and travels from vertex to vertex along edges of the graph. When there are no multiple edges, the path can be denoted by its vertex sequence. Circuit: The path is a circuit if it begins and ends at the same vertex, and has length greater than zero. Pass through and traverse: The path or circuit is said to pass through the vertices in between or traverse the edges. Simple A path or circuit is simple if it does not contain the same edge more than once. Connected: An undirected graph is called connected if there is a path between every pair of distinct vertices of the graph. An undirected graph that is not connected is called disconnected. Theorem 1: There is a simple path between every pair of distinct vertices of a connected undirected graph. Connected component: A maximal connected subgraph of a graph. Cut vertex: A vertex is a cut vertex (or articulation point), if removing it and all edges incident with it results in more connected components than in the original graph. Cut edge: If removal of an edge creates more components, the edge is called a cut edge or bridge. Strongly connected: A directed graph is strongly connected if there is a path from a to b and from b to a whenever a and b are vertices in the graph. Weakly connected: A directed graph is weakly connected if there is a path between every two vertices in the underlying undirected graph. Any strongly connected directed graph is also weakly connected. Strongly connected component: A maximal strongly connected subgraph, is called a strongly connected component or strong component. Two graphs are isomorphic only if they have simple circuits of the same length. Two graphs are isomorphic only if they contain paths that go through vertices so that the corresponding vertices in the two graphs have the same degree. Theorem 2: Let G G be a graph with adjacency matrix A A with respect to the ordering v_1,v_2,...,v_n v_1,v_2,...,v_n of the vertices of the graph (with directed or undirected edges, with multiple edges and loops allowed). The number of different paths of length r r from v_i v_i to v_j v_j , where r r is a positive integer, equals the (i,j) (i,j) th entry of A^r A^r . The graph G G is connected if and only if every off-diagonal entry of A+A^2+A^3+...+A^{n\u22121} A+A^2+A^3+...+A^{n\u22121} is positive. The check can end earlier if an A^i A^i is found to be so.","title":"Connectivity"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#euler-and-hamilton-paths","text":"Euler circuit: A simple circuit containing every edge of graph G. Euler path: A simple path containing every edge of graph G. Theorem 1: A connected multigraph with at least two vertices has an Euler circuit if and only if each of its vertices has even degree. Algorithm 1: Constructing Euler Circuits. Theorem 2: A connected multigraph has an Euler path but not an Euler circuit if and only if it has exactly two vertices of odd degree. Hamilton path: A simple path in a graph G G that passes through every vertex exactly once. Hamilton circuit: A simple circuit in a graph G G that passes through every vertex exactly once. A graph with a vertex of degree one cannot have a Hamilton circuit. If a vertex in the graph has degree two, then both edges that are incident with this vertex must be part of any Hamilton circuit. When a Hamilton circuit is being constructed and this circuit has passed through a vertex, then all remaining edges incident with this vertex, other than the two used in the circuit, can be removed from consideration. A Hamilton circuit cannot contain a smaller circuit within it. Dirac\u2019s theorem: If G G is a simple graph with n n vertices with n\\geq3 n\\geq3 such that the degree of every vertex in G G is at least \\frac{n}2 \\frac{n}2 , then G G has a Hamilton circuit. Ore\u2019s theorem: If G G is a simple graph with n n vertices with n\\geq3 n\\geq3 such that deg(u)+deg(v)\\geq{n} deg(u)+deg(v)\\geq{n} for every pair of nonadjacent vertices u and v in G G , then G G has a Hamilton circuit. Finding Gray code is equivalent to finding a Hamilton circuit for n-cube.","title":"Euler and Hamilton Paths"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#shortest-path-problems","text":"Algorithm 1: Dijkstra\u2019s Algorithm Theorem 1: Dijkstra\u2019s algorithm finds the length of a shortest path between two vertices in a connected simple undirected weighted graph. Theorem 2: Dijkstra\u2019s algorithm uses O(n^2) O(n^2) operations (additions and comparisons) to find the length of a shortest path between two vertices in a connected simple undirected weighted graph with n vertices. Traveling salesperson problem: The circuit of minimum total weight in aweighted, complete, undirected graph that visits each vertex exactly once and returns to its starting point. This is equivalent to asking for a Hamilton circuit with minimum total weight in the complete graph, because each vertex is visited exactly once in the circuit.","title":"Shortest-Path Problems"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#planar-graphs","text":"Planar: A graph is called planar if it can be drawn in the plane without any edges crossing (where a crossing of edges is the intersection of the lines or arcs representing them at a point other than their common endpoint). Such a drawing is called a planar representation of the graph. Proving no planar representation: Find a loop, divide the plane into regions, divide and conquer. K_{3,3} K_{3,3} and K_5 K_5 are non-planar. Euler\u2019s formula: Let G G be a connected planar simple graph with e edges and v vertices. Let r be the number of regions in a planar representation of G. Then r=e\u2212v+2. r=e\u2212v+2. Proved by mathematical induction. Corollary 1: If G G is a connected planar simple graph with e e edges and v v vertices, where v\\geq3 v\\geq3 , then e\\leq3v\u22126 e\\leq3v\u22126 . Can be used to show that a graph is non-planar. Degree of a region: the number of edges on the boundary of this region. Proved by 2e\\geq3r 2e\\geq3r and Euler\u2019s formula. Corollary 2: If $$$ is a connected planar simple graph, then G G has a vertex of degree not exceeding five. Corollary 3: If a connected planar simple graph has e edges and v vertices with v\\geq3 v\\geq3 and no circuits of length three, then e\\leq2v\u22124 e\\leq2v\u22124 . Proved like corollary 1, where 2e\\geq4r 2e\\geq4r . Can be used to show that a graph is non-planar. Elementary subdivision: If a graph is planar, so will be any graph obtained by removing an edge {u,v} and adding a new vertex w together with edges \\{u,w\\} \\{u,w\\} and \\{w,v\\} \\{w,v\\} . Such an operation is called an elementary subdivision. Homeomorphic: The graphs G_1=(V_1,E_1) G_1=(V_1,E_1) and G_2=(V_2,E_2) G_2=(V_2,E_2) are called homeomorphic if they can be obtained from the same graph by a sequence of elementary subdivisions. Kuratowski\u2019s Theorem: A graph is nonplanar if and only if it contains a subgraph (deleting vertices and incident edges) homeomorphic to K_{3,3} K_{3,3} or K_5 K_5 . K_{3,3} K_{3,3} can also be a hexagon with opposing vertices connected, and the parts are the two sets of three unconnected vertices.","title":"Planar Graphs"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#graph-coloring","text":"Dual graph: Each map in the plane can be represented by a graph. To set up this correspondence, each region of the map is represented by a vertex. Edges connect two vertices if the regions represented by these vertices have a common border. Two regions that touch at only one point are not considered adjacent. The resulting graph is called the dual graph of the map. Any map in the plane has a planar dual graph. Coloring: A coloring of a simple graph is the assignment of a color to each vertex of the graph so that no two adjacent vertices are assigned the same color. Chromatic number: The chromatic number of a graph is the least number of colors needed for a coloring of this graph, denoted by \\chi(G) \\chi(G) . The four color theorem: The chromatic number of a planar graph is no greater than four. Nonplanar graphs can have arbitrarily large chromatic numbers. Show that the chromatic number of a graph is k: Show that the graph can be colored with k colors. This can be done by constructing such a coloring. Show that the graph cannot be colored using fewer than k colors, when 3 it is often shown by a three vertices loop. The chromatic number of a complete graph K_n K_n is n because every vertex is connected with all others, and this does not contradict the four color theorem because K_n K_n is not planar when n>4. The chromatic number of a complete bipartite graph K_{m,n} K_{m,n} is 2, by coloring either set a color. The chromatic number of a cycle graph C_n C_n , is 1 when n=1, 2 when n is even, 3 when n is odd and n>1. Equivalent to scheduling and required number of time slots.","title":"Graph Coloring"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/math_postgraduate/","text":"\u5f20\u5b87\u8003\u7814\u6570\u5b66 \u6cf0\u52d2\u5c55\u5f00 f(x) f(x) \\sum\\limits_{n=0}^\\infty \\frac{f(0)^{(n)}}{n!}x^n \\sum\\limits_{n=0}^\\infty \\frac{f(0)^{(n)}}{n!}x^n \\sin x \\sin x \\sum\\limits_{n=0}^\\infty (-1)^{n}\\frac{x^{2n+1}}{(2n+1)!} \\sum\\limits_{n=0}^\\infty (-1)^{n}\\frac{x^{2n+1}}{(2n+1)!} \\mathrm{sh} x \\mathrm{sh} x \\sum\\limits_{n=0}^\\infty \\frac{x^{2n+1}}{(2n+1)!} \\sum\\limits_{n=0}^\\infty \\frac{x^{2n+1}}{(2n+1)!} \\cos x \\cos x \\sum\\limits_{n=0}^\\infty (-1)^n \\frac{x^{2n}}{2n!} \\sum\\limits_{n=0}^\\infty (-1)^n \\frac{x^{2n}}{2n!} \\mathrm{ch} x \\mathrm{ch} x \\sum\\limits_{n=0}^\\infty \\frac{x^{2n}}{2n!} \\sum\\limits_{n=0}^\\infty \\frac{x^{2n}}{2n!} \\tan x \\tan x x+\\frac{1}{3}x^3+o(x^3) x+\\frac{1}{3}x^3+o(x^3) \\arcsin x \\arcsin x x+\\frac{1}{6}x^3+o(x^3) x+\\frac{1}{6}x^3+o(x^3) \\arctan x \\arctan x \\sum\\limits_{n=0}^\\infty (-1)^n\\frac{x^{2n+1}}{2n+1} \\sum\\limits_{n=0}^\\infty (-1)^n\\frac{x^{2n+1}}{2n+1} e^x e^x \\sum\\limits_{n=0}^\\infty \\frac{x^n}{n!} \\sum\\limits_{n=0}^\\infty \\frac{x^n}{n!} \\ln (1+x) \\ln (1+x) \\sum\\limits_{n=1}^\\infty (-1)^{n+1} \\frac{x^n}{n}, -1 < x \\le 1 \\sum\\limits_{n=1}^\\infty (-1)^{n+1} \\frac{x^n}{n}, -1 < x \\le 1 -\\ln (1-x) -\\ln (1-x) \\sum\\limits_{n=1}^\\infty \\frac{x^n}{n}, [-1,1) \\sum\\limits_{n=1}^\\infty \\frac{x^n}{n}, [-1,1) \\frac{x}{(1-x)^2} \\frac{x}{(1-x)^2} \\sum\\limits_{n=1}^\\infty nx^n, (-1,1) \\sum\\limits_{n=1}^\\infty nx^n, (-1,1) \\frac{1}{1+x} \\frac{1}{1+x} \\sum\\limits_{n=0}^\\infty (-1)^n x^n, -1 < x < 1 \\sum\\limits_{n=0}^\\infty (-1)^n x^n, -1 < x < 1 (1+x)^\\alpha (1+x)^\\alpha \\sum\\limits_{n=0}^\\infty \\frac{\\alpha^{\\underline{n}}}{n!}x^n, -1 < x < 1 \\sum\\limits_{n=0}^\\infty \\frac{\\alpha^{\\underline{n}}}{n!}x^n, -1 < x < 1 \uff0c\u7aef\u70b9\u89c6 \\alpha \\alpha \u4ee4 f''_{xx} = A, f''_{yy}=B,f''_{xy}=C f''_{xx} = A, f''_{yy}=B,f''_{xy}=C \uff1a f(x,y) = f(x_0, y_0)+(f'_x,f'_y)\\left(\\begin{array}{c}\\Delta x\\\\ \\Delta y\\end{array}\\right) + (\\Delta x \\:\\Delta y)\\left(\\begin{array}{cc}A &B\\\\ B & C\\end{array}\\right)\\left(\\begin{array}{c}\\Delta x\\\\ \\Delta y\\end{array}\\right) + R_2 f(x,y) = f(x_0, y_0)+(f'_x,f'_y)\\left(\\begin{array}{c}\\Delta x\\\\ \\Delta y\\end{array}\\right) + (\\Delta x \\:\\Delta y)\\left(\\begin{array}{cc}A &B\\\\ B & C\\end{array}\\right)\\left(\\begin{array}{c}\\Delta x\\\\ \\Delta y\\end{array}\\right) + R_2 \\left|\\begin{array}{cc}A &B\\\\ B & C\\end{array}\\right| \\left|\\begin{array}{cc}A &B\\\\ B & C\\end{array}\\right| \u6b63\u5b9a\uff0c\u6781\u5c0f\u503c\uff1b\u8d1f\u5b9a\uff0c\u6781\u5927\u503c\uff1b\u5c0f\u4e8e 0 0 \u975e\u6781\u503c\u70b9\u3002 \u5085\u91cc\u53f6\u5206\u6790 g(t) g(t) \u4e3a\u5468\u671f\u4e3a T T \u7684\u5468\u671f\u51fd\u6570\u3002 g(t) = \\frac{a_0}{2}+\\sum\\limits_{n=1}^\\infty a_n\\cos 2\\pi fnt + b_n\\sin 2\\pi fnt \\\\ a_n = \\frac{2}{T}\\int_0^T g(t)\\cos 2\\pi fnt \\mathrm{d}t \\\\ b_n = \\frac{2}{T}\\int_0^T g(t)\\sin 2\\pi fnt \\mathrm{d}t \\\\ g(t) = \\frac{a_0}{2}+\\sum\\limits_{n=1}^\\infty a_n\\cos 2\\pi fnt + b_n\\sin 2\\pi fnt \\\\ a_n = \\frac{2}{T}\\int_0^T g(t)\\cos 2\\pi fnt \\mathrm{d}t \\\\ b_n = \\frac{2}{T}\\int_0^T g(t)\\sin 2\\pi fnt \\mathrm{d}t \\\\ \u6052\u7b49\u53d8\u5f62 a^n-b^n = (a-b)\\sum\\limits_{i=0}^{n-1}a^{n-1-i}b^i \\\\ \\sum\\limits_{k=1}^n k^2 = \\frac{n(n+1)(2n+1)}{6} \\\\ \\sin\\alpha \\cos\\beta = \\frac{1}{2}(\\sin(\\alpha + \\beta) + \\sin(\\alpha - \\beta)) \\\\ \\sin\\alpha \\sin\\beta = \\frac{1}{2}(\\cos(\\alpha - \\beta) - \\cos(\\alpha + \\beta)) \\\\ \\cos\\alpha \\cos\\beta = \\frac{1}{2}(\\cos(\\alpha + \\beta) + \\cos(\\alpha - \\beta)) \\\\ a^n-b^n = (a-b)\\sum\\limits_{i=0}^{n-1}a^{n-1-i}b^i \\\\ \\sum\\limits_{k=1}^n k^2 = \\frac{n(n+1)(2n+1)}{6} \\\\ \\sin\\alpha \\cos\\beta = \\frac{1}{2}(\\sin(\\alpha + \\beta) + \\sin(\\alpha - \\beta)) \\\\ \\sin\\alpha \\sin\\beta = \\frac{1}{2}(\\cos(\\alpha - \\beta) - \\cos(\\alpha + \\beta)) \\\\ \\cos\\alpha \\cos\\beta = \\frac{1}{2}(\\cos(\\alpha + \\beta) + \\cos(\\alpha - \\beta)) \\\\ \u6c42\u5bfc f(x) f(x) f(x)' f(x)' \\ln\\lvert\\sec x + \\tan x\\rvert \\ln\\lvert\\sec x + \\tan x\\rvert \\sec x \\sec x \\ln\\lvert\\csc x - \\cot x\\rvert \\ln\\lvert\\csc x - \\cot x\\rvert \\cot x \\cot x \u79ef\u5206 f(x) f(x) \\int f(x) \\mathrm{d}x \\int f(x) \\mathrm{d}x \\sqrt{a^2 + x^2} \\sqrt{a^2 + x^2} \\frac{x}{2}\\sqrt{a^2+x^2}+\\frac{a^2}{2}\\ln (\\frac{\\sqrt{a^2 + x^2}}{a}+\\frac{x}{a})+C \\frac{x}{2}\\sqrt{a^2+x^2}+\\frac{a^2}{2}\\ln (\\frac{\\sqrt{a^2 + x^2}}{a}+\\frac{x}{a})+C \\sqrt{a^2-x^2} \\sqrt{a^2-x^2} \\frac{x}{2}\\sqrt{a^2-x^2}+\\frac{a^2}{2}\\arcsin(\\frac{x}{a})+C \\frac{x}{2}\\sqrt{a^2-x^2}+\\frac{a^2}{2}\\arcsin(\\frac{x}{a})+C \\sin^2(x) \\sin^2(x) \\frac{x}{2}-\\frac{\\sin (2x)}{4}+C \\frac{x}{2}-\\frac{\\sin (2x)}{4}+C \u56fe\u50cf \u6781\u5750\u6807\u65b9\u7a0b \u5fc3\u5f62\u7ebf r=a(1-\\cos \\theta)(a > 0) r=a(1-\\cos \\theta)(a > 0) \u73ab\u7470\u7ebf r=a\\sin 3\\theta(a>0) r=a\\sin 3\\theta(a>0) \u963f\u57fa\u7c73\u5fb7\u87ba\u7ebf r = a\\theta (a > 0, \\theta \\ge 0) r = a\\theta (a > 0, \\theta \\ge 0) ] \u4f2f\u52aa\u5229\u53cc\u626d\u7ebf r^2 = a^2 \\cos 2\\theta, r^2 = a^2 \\sin \\theta r^2 = a^2 \\cos 2\\theta, r^2 = a^2 \\sin \\theta \u53c2\u6570\u65b9\u7a0b \u5e73\u6446\u7ebf x = r(t - \\sin t); y = r(1 - \\cos t) x = r(t - \\sin t); y = r(1 - \\cos t) \u661f\u578b\u7ebf\uff08\u5927\u5706 r r \u4e3a\u5c0f\u5706 4 4 \u500d\uff09 x = r\\cos^3 t; y = r\\sin^3 t x = r\\cos^3 t; y = r\\sin^3 t \u7a7a\u95f4\u5e73\u9762 \u9a6c\u978d\u9762 z=xy z=xy \u629b\u7269\u9762 z=x^2+y^2 z=x^2+y^2 \u5706\u9525\u9762 z=\\sqrt{x^2+y^2} z=\\sqrt{x^2+y^2} \u5fae\u5206\u65b9\u7a0b \u539f\u5f0f \u4ee3\u6362 \u5316\u7b80 y'+p(x)y=y^nq(x) y'+p(x)y=y^nq(x) z=y^{1-n} z=y^{1-n} \\frac{1}{1-n}z'+p(x)z=q(x) \\frac{1}{1-n}z'+p(x)z=q(x) y''=f(y,y') y''=f(y,y') y'=p y'=p p\\frac{\\mathrm{d}p}{\\mathrm{d}y}=f(y,p) p\\frac{\\mathrm{d}p}{\\mathrm{d}y}=f(y,p) y''+py'+q=f(x)e^{\\alpha x} y''+py'+q=f(x)e^{\\alpha x} y=R(x)e^{\\alpha x} y=R(x)e^{\\alpha x} R''+R'(2\\alpha + p)+(\\alpha^2+p\\alpha+q)R=f(x) R''+R'(2\\alpha + p)+(\\alpha^2+p\\alpha+q)R=f(x) x^ny^{(n)}+p_1x^{n-1}y^{(n-1)}+\\cdots +p_nxy=f(x) x^ny^{(n)}+p_1x^{n-1}y^{(n-1)}+\\cdots +p_nxy=f(x) x=e^t x=e^t x^iy^{(i)}=D(D-1)(D-i+1)y x^iy^{(i)}=D(D-1)(D-i+1)y \u200b \u7a7a\u95f4\u51e0\u4f55 \u65b9\u7a0b\u7ec4\u66f2\u7ebf\u7684\u5207\u5411\u91cf\uff1a \\begin{cases} F(x,y,z)=0\\\\ G(x,y,z)=0 \\end{cases}\\Rightarrow \\tau = \\left|\\begin{array}{ccc} \\boldsymbol{i} &\\boldsymbol{j} &\\boldsymbol{k}\\\\ F'_x &F'_y &F'_z\\\\ G'_x &G'_y &G'_z \\end{array}\\right| \\begin{cases} F(x,y,z)=0\\\\ G(x,y,z)=0 \\end{cases}\\Rightarrow \\tau = \\left|\\begin{array}{ccc} \\boldsymbol{i} &\\boldsymbol{j} &\\boldsymbol{k}\\\\ F'_x &F'_y &F'_z\\\\ G'_x &G'_y &G'_z \\end{array}\\right| \u70b9 P_0(x_0,y_0,z_0) P_0(x_0,y_0,z_0) \u5230\u5e73\u9762 Ax+By+Cz+D=0 Ax+By+Cz+D=0 \u7684\u8ddd\u79bb\u4e3a\uff1a \\frac{\\left| Ax_0 + By_0 + Cz_0 + D\\right|}{\\sqrt{A^2+B^2+C^2}} \\frac{\\left| Ax_0 + By_0 + Cz_0 + D\\right|}{\\sqrt{A^2+B^2+C^2}} \u5411\u91cf\u573a \\boldsymbol{A}(x,y,z)=P(x,y,z)\\boldsymbol{i}+Q(x,y,z)\\boldsymbol{j}+R(x,y,z)\\boldsymbol{k} \\boldsymbol{A}(x,y,z)=P(x,y,z)\\boldsymbol{i}+Q(x,y,z)\\boldsymbol{j}+R(x,y,z)\\boldsymbol{k} \uff1a \\mathrm{div} \\boldsymbol{A}=\\frac{\\partial P}{\\partial x}+\\frac{\\partial Q}{\\partial y}+\\frac{\\partial R}{\\partial z}\\\\ \\mathrm{rot} \\boldsymbol{A}= \\left| \\begin{array}{ccc} \\boldsymbol{i} &\\boldsymbol{j} &\\boldsymbol{k}\\\\ \\frac{\\partial}{\\partial x}&\\frac{\\partial}{\\partial y}&\\frac{\\partial}{\\partial z}\\\\ P &Q &R \\end{array} \\right| \\mathrm{div} \\boldsymbol{A}=\\frac{\\partial P}{\\partial x}+\\frac{\\partial Q}{\\partial y}+\\frac{\\partial R}{\\partial z}\\\\ \\mathrm{rot} \\boldsymbol{A}= \\left| \\begin{array}{ccc} \\boldsymbol{i} &\\boldsymbol{j} &\\boldsymbol{k}\\\\ \\frac{\\partial}{\\partial x}&\\frac{\\partial}{\\partial y}&\\frac{\\partial}{\\partial z}\\\\ P &Q &R \\end{array} \\right| \u5411\u91cf\u4e09\u91cd\u79ef\uff1a \\boldsymbol{A}\\times (\\boldsymbol{B}\\times \\boldsymbol{C})=(\\boldsymbol{A}\\cdot \\boldsymbol{C})\\boldsymbol{B}-(\\boldsymbol{A}\\cdot \\boldsymbol{B})\\boldsymbol{C} \\boldsymbol{A}\\times (\\boldsymbol{B}\\times \\boldsymbol{C})=(\\boldsymbol{A}\\cdot \\boldsymbol{C})\\boldsymbol{B}-(\\boldsymbol{A}\\cdot \\boldsymbol{B})\\boldsymbol{C} \u5206\u5e03 \u5206\u5e03 \u671f\u671b \u65b9\u5dee B(n,p) B(n,p) np np np(1-p) np(1-p) P(\\lambda) P(\\lambda) \\lambda \\lambda \\lambda \\lambda G(p) G(p) 1/p 1/p \u200b (1-p)/p^2 (1-p)/p^2 U(a,b) U(a,b) (a+b)/2 (a+b)/2 (b-a)^2/12 (b-a)^2/12 E(\\lambda) E(\\lambda) 1/\\lambda 1/\\lambda 1/\\lambda^2 1/\\lambda^2 \\chi^2(n) \\chi^2(n) n n 2n 2n","title":"\u5f20\u5b87\u8003\u7814\u6570\u5b66"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/math_postgraduate/#_1","text":"\u6cf0\u52d2\u5c55\u5f00 f(x) f(x) \\sum\\limits_{n=0}^\\infty \\frac{f(0)^{(n)}}{n!}x^n \\sum\\limits_{n=0}^\\infty \\frac{f(0)^{(n)}}{n!}x^n \\sin x \\sin x \\sum\\limits_{n=0}^\\infty (-1)^{n}\\frac{x^{2n+1}}{(2n+1)!} \\sum\\limits_{n=0}^\\infty (-1)^{n}\\frac{x^{2n+1}}{(2n+1)!} \\mathrm{sh} x \\mathrm{sh} x \\sum\\limits_{n=0}^\\infty \\frac{x^{2n+1}}{(2n+1)!} \\sum\\limits_{n=0}^\\infty \\frac{x^{2n+1}}{(2n+1)!} \\cos x \\cos x \\sum\\limits_{n=0}^\\infty (-1)^n \\frac{x^{2n}}{2n!} \\sum\\limits_{n=0}^\\infty (-1)^n \\frac{x^{2n}}{2n!} \\mathrm{ch} x \\mathrm{ch} x \\sum\\limits_{n=0}^\\infty \\frac{x^{2n}}{2n!} \\sum\\limits_{n=0}^\\infty \\frac{x^{2n}}{2n!} \\tan x \\tan x x+\\frac{1}{3}x^3+o(x^3) x+\\frac{1}{3}x^3+o(x^3) \\arcsin x \\arcsin x x+\\frac{1}{6}x^3+o(x^3) x+\\frac{1}{6}x^3+o(x^3) \\arctan x \\arctan x \\sum\\limits_{n=0}^\\infty (-1)^n\\frac{x^{2n+1}}{2n+1} \\sum\\limits_{n=0}^\\infty (-1)^n\\frac{x^{2n+1}}{2n+1} e^x e^x \\sum\\limits_{n=0}^\\infty \\frac{x^n}{n!} \\sum\\limits_{n=0}^\\infty \\frac{x^n}{n!} \\ln (1+x) \\ln (1+x) \\sum\\limits_{n=1}^\\infty (-1)^{n+1} \\frac{x^n}{n}, -1 < x \\le 1 \\sum\\limits_{n=1}^\\infty (-1)^{n+1} \\frac{x^n}{n}, -1 < x \\le 1 -\\ln (1-x) -\\ln (1-x) \\sum\\limits_{n=1}^\\infty \\frac{x^n}{n}, [-1,1) \\sum\\limits_{n=1}^\\infty \\frac{x^n}{n}, [-1,1) \\frac{x}{(1-x)^2} \\frac{x}{(1-x)^2} \\sum\\limits_{n=1}^\\infty nx^n, (-1,1) \\sum\\limits_{n=1}^\\infty nx^n, (-1,1) \\frac{1}{1+x} \\frac{1}{1+x} \\sum\\limits_{n=0}^\\infty (-1)^n x^n, -1 < x < 1 \\sum\\limits_{n=0}^\\infty (-1)^n x^n, -1 < x < 1 (1+x)^\\alpha (1+x)^\\alpha \\sum\\limits_{n=0}^\\infty \\frac{\\alpha^{\\underline{n}}}{n!}x^n, -1 < x < 1 \\sum\\limits_{n=0}^\\infty \\frac{\\alpha^{\\underline{n}}}{n!}x^n, -1 < x < 1 \uff0c\u7aef\u70b9\u89c6 \\alpha \\alpha \u4ee4 f''_{xx} = A, f''_{yy}=B,f''_{xy}=C f''_{xx} = A, f''_{yy}=B,f''_{xy}=C \uff1a f(x,y) = f(x_0, y_0)+(f'_x,f'_y)\\left(\\begin{array}{c}\\Delta x\\\\ \\Delta y\\end{array}\\right) + (\\Delta x \\:\\Delta y)\\left(\\begin{array}{cc}A &B\\\\ B & C\\end{array}\\right)\\left(\\begin{array}{c}\\Delta x\\\\ \\Delta y\\end{array}\\right) + R_2 f(x,y) = f(x_0, y_0)+(f'_x,f'_y)\\left(\\begin{array}{c}\\Delta x\\\\ \\Delta y\\end{array}\\right) + (\\Delta x \\:\\Delta y)\\left(\\begin{array}{cc}A &B\\\\ B & C\\end{array}\\right)\\left(\\begin{array}{c}\\Delta x\\\\ \\Delta y\\end{array}\\right) + R_2 \\left|\\begin{array}{cc}A &B\\\\ B & C\\end{array}\\right| \\left|\\begin{array}{cc}A &B\\\\ B & C\\end{array}\\right| \u6b63\u5b9a\uff0c\u6781\u5c0f\u503c\uff1b\u8d1f\u5b9a\uff0c\u6781\u5927\u503c\uff1b\u5c0f\u4e8e 0 0 \u975e\u6781\u503c\u70b9\u3002 \u5085\u91cc\u53f6\u5206\u6790 g(t) g(t) \u4e3a\u5468\u671f\u4e3a T T \u7684\u5468\u671f\u51fd\u6570\u3002 g(t) = \\frac{a_0}{2}+\\sum\\limits_{n=1}^\\infty a_n\\cos 2\\pi fnt + b_n\\sin 2\\pi fnt \\\\ a_n = \\frac{2}{T}\\int_0^T g(t)\\cos 2\\pi fnt \\mathrm{d}t \\\\ b_n = \\frac{2}{T}\\int_0^T g(t)\\sin 2\\pi fnt \\mathrm{d}t \\\\ g(t) = \\frac{a_0}{2}+\\sum\\limits_{n=1}^\\infty a_n\\cos 2\\pi fnt + b_n\\sin 2\\pi fnt \\\\ a_n = \\frac{2}{T}\\int_0^T g(t)\\cos 2\\pi fnt \\mathrm{d}t \\\\ b_n = \\frac{2}{T}\\int_0^T g(t)\\sin 2\\pi fnt \\mathrm{d}t \\\\ \u6052\u7b49\u53d8\u5f62 a^n-b^n = (a-b)\\sum\\limits_{i=0}^{n-1}a^{n-1-i}b^i \\\\ \\sum\\limits_{k=1}^n k^2 = \\frac{n(n+1)(2n+1)}{6} \\\\ \\sin\\alpha \\cos\\beta = \\frac{1}{2}(\\sin(\\alpha + \\beta) + \\sin(\\alpha - \\beta)) \\\\ \\sin\\alpha \\sin\\beta = \\frac{1}{2}(\\cos(\\alpha - \\beta) - \\cos(\\alpha + \\beta)) \\\\ \\cos\\alpha \\cos\\beta = \\frac{1}{2}(\\cos(\\alpha + \\beta) + \\cos(\\alpha - \\beta)) \\\\ a^n-b^n = (a-b)\\sum\\limits_{i=0}^{n-1}a^{n-1-i}b^i \\\\ \\sum\\limits_{k=1}^n k^2 = \\frac{n(n+1)(2n+1)}{6} \\\\ \\sin\\alpha \\cos\\beta = \\frac{1}{2}(\\sin(\\alpha + \\beta) + \\sin(\\alpha - \\beta)) \\\\ \\sin\\alpha \\sin\\beta = \\frac{1}{2}(\\cos(\\alpha - \\beta) - \\cos(\\alpha + \\beta)) \\\\ \\cos\\alpha \\cos\\beta = \\frac{1}{2}(\\cos(\\alpha + \\beta) + \\cos(\\alpha - \\beta)) \\\\ \u6c42\u5bfc f(x) f(x) f(x)' f(x)' \\ln\\lvert\\sec x + \\tan x\\rvert \\ln\\lvert\\sec x + \\tan x\\rvert \\sec x \\sec x \\ln\\lvert\\csc x - \\cot x\\rvert \\ln\\lvert\\csc x - \\cot x\\rvert \\cot x \\cot x \u79ef\u5206 f(x) f(x) \\int f(x) \\mathrm{d}x \\int f(x) \\mathrm{d}x \\sqrt{a^2 + x^2} \\sqrt{a^2 + x^2} \\frac{x}{2}\\sqrt{a^2+x^2}+\\frac{a^2}{2}\\ln (\\frac{\\sqrt{a^2 + x^2}}{a}+\\frac{x}{a})+C \\frac{x}{2}\\sqrt{a^2+x^2}+\\frac{a^2}{2}\\ln (\\frac{\\sqrt{a^2 + x^2}}{a}+\\frac{x}{a})+C \\sqrt{a^2-x^2} \\sqrt{a^2-x^2} \\frac{x}{2}\\sqrt{a^2-x^2}+\\frac{a^2}{2}\\arcsin(\\frac{x}{a})+C \\frac{x}{2}\\sqrt{a^2-x^2}+\\frac{a^2}{2}\\arcsin(\\frac{x}{a})+C \\sin^2(x) \\sin^2(x) \\frac{x}{2}-\\frac{\\sin (2x)}{4}+C \\frac{x}{2}-\\frac{\\sin (2x)}{4}+C \u56fe\u50cf \u6781\u5750\u6807\u65b9\u7a0b \u5fc3\u5f62\u7ebf r=a(1-\\cos \\theta)(a > 0) r=a(1-\\cos \\theta)(a > 0) \u73ab\u7470\u7ebf r=a\\sin 3\\theta(a>0) r=a\\sin 3\\theta(a>0) \u963f\u57fa\u7c73\u5fb7\u87ba\u7ebf r = a\\theta (a > 0, \\theta \\ge 0) r = a\\theta (a > 0, \\theta \\ge 0) ] \u4f2f\u52aa\u5229\u53cc\u626d\u7ebf r^2 = a^2 \\cos 2\\theta, r^2 = a^2 \\sin \\theta r^2 = a^2 \\cos 2\\theta, r^2 = a^2 \\sin \\theta \u53c2\u6570\u65b9\u7a0b \u5e73\u6446\u7ebf x = r(t - \\sin t); y = r(1 - \\cos t) x = r(t - \\sin t); y = r(1 - \\cos t) \u661f\u578b\u7ebf\uff08\u5927\u5706 r r \u4e3a\u5c0f\u5706 4 4 \u500d\uff09 x = r\\cos^3 t; y = r\\sin^3 t x = r\\cos^3 t; y = r\\sin^3 t \u7a7a\u95f4\u5e73\u9762 \u9a6c\u978d\u9762 z=xy z=xy \u629b\u7269\u9762 z=x^2+y^2 z=x^2+y^2 \u5706\u9525\u9762 z=\\sqrt{x^2+y^2} z=\\sqrt{x^2+y^2} \u5fae\u5206\u65b9\u7a0b \u539f\u5f0f \u4ee3\u6362 \u5316\u7b80 y'+p(x)y=y^nq(x) y'+p(x)y=y^nq(x) z=y^{1-n} z=y^{1-n} \\frac{1}{1-n}z'+p(x)z=q(x) \\frac{1}{1-n}z'+p(x)z=q(x) y''=f(y,y') y''=f(y,y') y'=p y'=p p\\frac{\\mathrm{d}p}{\\mathrm{d}y}=f(y,p) p\\frac{\\mathrm{d}p}{\\mathrm{d}y}=f(y,p) y''+py'+q=f(x)e^{\\alpha x} y''+py'+q=f(x)e^{\\alpha x} y=R(x)e^{\\alpha x} y=R(x)e^{\\alpha x} R''+R'(2\\alpha + p)+(\\alpha^2+p\\alpha+q)R=f(x) R''+R'(2\\alpha + p)+(\\alpha^2+p\\alpha+q)R=f(x) x^ny^{(n)}+p_1x^{n-1}y^{(n-1)}+\\cdots +p_nxy=f(x) x^ny^{(n)}+p_1x^{n-1}y^{(n-1)}+\\cdots +p_nxy=f(x) x=e^t x=e^t x^iy^{(i)}=D(D-1)(D-i+1)y x^iy^{(i)}=D(D-1)(D-i+1)y \u200b \u7a7a\u95f4\u51e0\u4f55 \u65b9\u7a0b\u7ec4\u66f2\u7ebf\u7684\u5207\u5411\u91cf\uff1a \\begin{cases} F(x,y,z)=0\\\\ G(x,y,z)=0 \\end{cases}\\Rightarrow \\tau = \\left|\\begin{array}{ccc} \\boldsymbol{i} &\\boldsymbol{j} &\\boldsymbol{k}\\\\ F'_x &F'_y &F'_z\\\\ G'_x &G'_y &G'_z \\end{array}\\right| \\begin{cases} F(x,y,z)=0\\\\ G(x,y,z)=0 \\end{cases}\\Rightarrow \\tau = \\left|\\begin{array}{ccc} \\boldsymbol{i} &\\boldsymbol{j} &\\boldsymbol{k}\\\\ F'_x &F'_y &F'_z\\\\ G'_x &G'_y &G'_z \\end{array}\\right| \u70b9 P_0(x_0,y_0,z_0) P_0(x_0,y_0,z_0) \u5230\u5e73\u9762 Ax+By+Cz+D=0 Ax+By+Cz+D=0 \u7684\u8ddd\u79bb\u4e3a\uff1a \\frac{\\left| Ax_0 + By_0 + Cz_0 + D\\right|}{\\sqrt{A^2+B^2+C^2}} \\frac{\\left| Ax_0 + By_0 + Cz_0 + D\\right|}{\\sqrt{A^2+B^2+C^2}} \u5411\u91cf\u573a \\boldsymbol{A}(x,y,z)=P(x,y,z)\\boldsymbol{i}+Q(x,y,z)\\boldsymbol{j}+R(x,y,z)\\boldsymbol{k} \\boldsymbol{A}(x,y,z)=P(x,y,z)\\boldsymbol{i}+Q(x,y,z)\\boldsymbol{j}+R(x,y,z)\\boldsymbol{k} \uff1a \\mathrm{div} \\boldsymbol{A}=\\frac{\\partial P}{\\partial x}+\\frac{\\partial Q}{\\partial y}+\\frac{\\partial R}{\\partial z}\\\\ \\mathrm{rot} \\boldsymbol{A}= \\left| \\begin{array}{ccc} \\boldsymbol{i} &\\boldsymbol{j} &\\boldsymbol{k}\\\\ \\frac{\\partial}{\\partial x}&\\frac{\\partial}{\\partial y}&\\frac{\\partial}{\\partial z}\\\\ P &Q &R \\end{array} \\right| \\mathrm{div} \\boldsymbol{A}=\\frac{\\partial P}{\\partial x}+\\frac{\\partial Q}{\\partial y}+\\frac{\\partial R}{\\partial z}\\\\ \\mathrm{rot} \\boldsymbol{A}= \\left| \\begin{array}{ccc} \\boldsymbol{i} &\\boldsymbol{j} &\\boldsymbol{k}\\\\ \\frac{\\partial}{\\partial x}&\\frac{\\partial}{\\partial y}&\\frac{\\partial}{\\partial z}\\\\ P &Q &R \\end{array} \\right| \u5411\u91cf\u4e09\u91cd\u79ef\uff1a \\boldsymbol{A}\\times (\\boldsymbol{B}\\times \\boldsymbol{C})=(\\boldsymbol{A}\\cdot \\boldsymbol{C})\\boldsymbol{B}-(\\boldsymbol{A}\\cdot \\boldsymbol{B})\\boldsymbol{C} \\boldsymbol{A}\\times (\\boldsymbol{B}\\times \\boldsymbol{C})=(\\boldsymbol{A}\\cdot \\boldsymbol{C})\\boldsymbol{B}-(\\boldsymbol{A}\\cdot \\boldsymbol{B})\\boldsymbol{C} \u5206\u5e03 \u5206\u5e03 \u671f\u671b \u65b9\u5dee B(n,p) B(n,p) np np np(1-p) np(1-p) P(\\lambda) P(\\lambda) \\lambda \\lambda \\lambda \\lambda G(p) G(p) 1/p 1/p \u200b (1-p)/p^2 (1-p)/p^2 U(a,b) U(a,b) (a+b)/2 (a+b)/2 (b-a)^2/12 (b-a)^2/12 E(\\lambda) E(\\lambda) 1/\\lambda 1/\\lambda 1/\\lambda^2 1/\\lambda^2 \\chi^2(n) \\chi^2(n) n n 2n 2n","title":"\u5f20\u5b87\u8003\u7814\u6570\u5b66"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/","text":"\u8ba1\u7b97\u673a\u7f51\u7edc \u539f\u7406 ELEMENTARY DATA LINK PROTOCOLS Some definitions needed in the protocols to follow #define MAX_PKT 1024 typedef enum { false, true } boolean; typedef unsigned int seq_nr; typedef struct { unsigned char data[MAX PKT]; } packet; typedef enum { data, ack, nak } frame_kind; typedef struct { frame_kind kind; seq_nr seq; seq_nr ack; packet info; } frame; void wait_for_event(event_type *event); void from_network_layer(packet *p); void to_network_layer(packet *p); void from_physical_layer(frame *r); void to_physical_layer(frame *s); void start_timer(seq_nr k); void stop_timer(seq_nr k); void start_ack_timer(void); void stop_ack_timer(void); void enable_network_layer(void); void disable_network_layer(void); #define inc(k) \\ if (k < MAX_SEQ) \\ k = k + 1; \\ else \\ k = 0 A utopian simplex protocol typedef enum { frame_arrival } event_type; #include \"protocol.h\" void sender1(void) { frame s; packet buffer; while (true) { from_network_layer(&buffer); s.info = buffer; to_physical_layer(&s); } } void receiver1(void) { frame r; event_type event; while (true) { wait_for_event(&event); from_physical_layer(&r); to_network_layer(&r.info); } } A Simplex Stop-and-Wait Protocol for an Error-Free Channel The only difference between receiver1 and receiver2 is that after delivering a packet to the network layer, receiver2 sends an acknowledgement frame back to the sender before entering the wait loop again. This delay is a simple example of a flow control protocol. typedef enum { frame_arrival } event_type; #include \"protocol.h\" void sender2(void) { frame s; packet buffer; event_type event; while (true) { from_network_layer(&buffer); s.info = buffer; to_physical_layer(&s); wait_for_event(&event); } } void receiver2(void) { frame r, s; event_type event; while (true) { wait_for_event(&event); from_physical_layer(&r); to_network_layer(&r.info); to_physical_layer(&s); } } A Simplex Stop-and-Wait Protocol for a Noisy Channel A positive acknowledgement with retransmission protocol. #define MAX_SEQ 1 typedef enum { frame_arrival, cksum_err, timeout } event_type; #include \"protocol.h\" void sender3(void) { seq_nr next_frame_to_send; frame s; packet buffer; event_type event; next_frame_to_send = 0; from_network_layer(&buffer); while (true) { s.info = buffer; s.seq = next_frame_to_send; to_physical_layer(&s); start_timer(s.seq); wait_for_event(&event); if (event == frame_arrival) { from_physical_layer(&s); if (s.ack == next_frame_to_send) { stop_timer(s.ack); from_network_layer(&buffer); inc(next_frame_to_send); } } } } void receiver3(void) { seq_nr frame_expected; frame r, s; event_type event; frame_expected = 0; while (true) { wait_for_event(&event); if (event == frame_arrival) { from_physical_layer(&r); if (r.seq == frame_expected) { to_network_layer(&r.info); inc(frame_expected); } s.ack = 1 \u2212 frame_expected; to_physical_layer(&s); } } } A 1-bit sliding window protocol #define MAX_SEQ 1 typedef enum { frame_arrival, cksum_err, timeout } event_type; #include \"protocol.h\" void protocol4(void) { seq_nr next_frame_to_send; seq_nr frame_expected; frame r, s; packet buffer; event_type event; next_frame_to_send = 0; frame_expected = 0; from_network_layer(&buffer); s.info = buffer; s.seq = next_frame_to_send; s.ack = 1 \u2212 frame_expected; to_physical_layer(&s); start_timer(s.seq); while (true) { wait_for_event(&event); if (event == frame_arrival) { from_physical_layer(&r); if (r.seq == frame_expected) { to_network_layer(&r.info); inc(frame_expected); } if (r.ack == next_frame_to_send) { stop_timer(r.ack); from_network_layer(&buffer); inc(next_frame_to_send); } } s.info = buffer; s.seq = next_frame_to_send; s.ack = 1 \u2212 frame_expected; to_physical_layer(&s); start_timer(s.seq); } } A sliding window protocol using go-back-n #define MAX \\ SEQ 7 typedef enum { frame_arrival, \\ cksum_err, \\ timeout, \\ network layer ready } event_type; \\ #include \"protocol.h\" static boolean between(seq_nr a, seq_nr b, seq_nr c) { if (((a <= b) && (b < c)) || ((c < a) && (a <= b)) || ((b < c) && (c < a))) return (true); else return (false); } static void send_data(seq_nr frame_nr, seq_nr frame_expected, packet buffer[]) { frame s; s.info = buffer[frame_nr]; s.seq = frame_nr; } void protocol5(void) { seq_nr next_frame_to_send; seq_nr ack_expected; seq_nr frame_expected; frame r; packet buffer[MAX_SEQ + 1]; seq_nr nbuffered; seq_nr i; event_type event; enable_network_layer(); next_frame_to_send = 0; nbuffered = 0; ack_expected = 0; frame_expected = 0; while (true) { wait_for_event(&event); to_physical_layer(&s); start_timer(frame_nr); switch (event) { case network_layer_ready: nbuffered = nbuffered + 1; inc(next_frame_to_send); break; case frame_arrival: from_physical_layer(&r); if (r.seq == frame_expected) { to_network_layer(&r.info); inc(frame_expected); } while (between(ack_expected, r.ack, next_frame_to_send)) { nbuffered = nbuffered \u2212 1; stop_timer(ack_expected); inc(ack_expected); } break; case cksum_err: break; case timeout: for (i = 1; i <= nbuffered; i++) { inc(next_frame_to_send); } } if (nbuffered < MAX_SEQ) enable_network_layer(); else disable_network_layer(); } } A sliding window protocol using selective repeat #define MAX_SEQ 7 #define NR \\ BUFS((MAX_SEQ + 1) / 2) \\ typedef enum \\ { \\ frame_arrival, \\ cksum_err, \\ timeout, \\ network layer ready, \\ ack timeout \\ } event_type; \\ #include \"protocol.h\" boolean no_nak = true; seq_nr oldest_frame = MAX_SEQ + 1; static boolean between(seq_nr a, seq_nr b, seq_nr c) { return ((a <= b) && (b < c)) || ((c < a) && (a <= b)) || ((b < c) && (c < a)); } static void send_frame(frame_kind fk, seq_nr frame_nr, seq_nr frame_expected, packet buffer[]) { frame s; s.kind = fk; if (fk == data) s.info = buffer[frame_nr % NR_BUFS]; s.seq = frame_nr; s.ack = (frame_expected + MAX_SEQ) % (MAX_SEQ + 1); if (fk == nak) no_nak = false; to_physical_layer(&s); if (fk == data) start_timer(frame_nr % NR_BUFS); stop_ack_timer(); } void protocol6(void) { seq_nr ack_expected; seq_nr next_frame_to_send; seq_nr frame_expected; seq_nr too_far; int i; frame r; packet out_buf[NR_BUFS]; packet in_buf[NR_BUFS]; boolean arrived[NR_BUFS]; seq_nr nbuffered; event_type event; enable_network_layer(); next_frame_to_send = 0; ack_expected = 0; frame_expected = 0; too_far = NR_BUFS; nbuffered = 0; for (i = 0; i < NR_BUFS; i++) arrived[i] = false; while (true) { wait_for_event(&event); switch (event) { case network layer ready: nbuffered = nbuffered + 1; from_network_layer(&out_buf[next_frame_to_send % NR_BUFS]); send_frame(data, next_frame_to_send, frame_expected, out_buf); inc(next_frame_to_send); break; case frame_arrival: from_physical_layer(&r); if (r.kind == data) { if ((r.seq != frame_expected) && no_nak) send_frame(nak, 0, frame_expected, out_buf); else start_ack_timer(); if (between(frame_expected, r.seq, too_far) && (arrived[r.seq % NR_BUFS] == false)) { arrived[r.seq % NR_BUFS] = true; in_buf[r.seq % NR_BUFS] = r.info; while (arrived[frame_expected % NR_BUFS]) { to_network_layer(&in_buf[frame_expected % NR_BUFS]); no_nak = true; arrived[frame_expected % NR_BUFS] = false; inc(frame_expected); inc(too_far); start_ack_timer(); } } } if ((r.kind == nak) && between(ack_expected, (r.ack + 1) % (MAX_SEQ + 1), next_frame_to_send)) send_frame(data, (r.ack + 1) % (MAX_SEQ + 1), frame_expected, out_buf); while (between(ack_expected, r.ack, next_frame_to_send)) { nbuffered = nbuffered \u2212 1; stop_timer(ack_expected % NR_BUFS); inc(ack_expected); } break; case cksum_err: if (no_nak) send_frame(nak, 0, frame_expected, out_buf); break; case timeout: send_frame(data, oldest_frame, frame_expected, out_buf); break; case ack timeout: send_frame(ack, 0, frame_expected, out_buf); } if (nbuffered < NR_BUFS) enable_network_layer(); else disable_network_layer(); } } SMTP \u5b9e\u9a8c dogtorhuang@foxmail.com -> hrz_ms@outlook.com base64\u7f16\u7801 \u7528\u6237\u540d\u5982\u4e0b\uff0c\u5bc6\u7801\u540c\u7406\u3002 echo -n \"dogtorhuang\" | base64 ZG9ndG9yaHVhbmc= telnet telnet smtp.qq.com 25 Trying 14.18.175.202... Connected to smtp.qq.com. Escape character is '^]'. 220 newxmesmtplogicsvrszb7.qq.com XMail Esmtp QQ Mail Server. HELO hrz 250-newxmesmtplogicsvrszb7.qq.com-11.176.226.127-42011439 250-SIZE 73400320 250 OK AUTH LOGIN 334 VXNlcm5hbWU6 ZG9ndG9yaHVhbmc= 334 UGFzc3dvcmQ6 c2pjdnFrcnNmZHRuYmVoaQ== 235 Authentication successful MAIL FROM:<dogtorhuang@foxmail.com> 250 OK. RCPT TO:<hrz_ms@outlook.com> 250 OK DATA 354 End data with <CR><LF>.<CR><LF>. FROM: dogtorhuang@foxmail.com To: hrz_ms@outlook.com Subject: confirm information Hi, Michael I got your message. Looking forward to meeting you. Thanks & Best Regards. . 250 OK: queued as.","title":"\u8ba1\u7b97\u673a\u7f51\u7edc"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/#_1","text":"","title":"\u8ba1\u7b97\u673a\u7f51\u7edc"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/#_2","text":"","title":"\u539f\u7406"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/#elementary-data-link-protocols","text":"","title":"ELEMENTARY DATA LINK PROTOCOLS"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/#some-definitions-needed-in-the-protocols-to-follow","text":"#define MAX_PKT 1024 typedef enum { false, true } boolean; typedef unsigned int seq_nr; typedef struct { unsigned char data[MAX PKT]; } packet; typedef enum { data, ack, nak } frame_kind; typedef struct { frame_kind kind; seq_nr seq; seq_nr ack; packet info; } frame; void wait_for_event(event_type *event); void from_network_layer(packet *p); void to_network_layer(packet *p); void from_physical_layer(frame *r); void to_physical_layer(frame *s); void start_timer(seq_nr k); void stop_timer(seq_nr k); void start_ack_timer(void); void stop_ack_timer(void); void enable_network_layer(void); void disable_network_layer(void); #define inc(k) \\ if (k < MAX_SEQ) \\ k = k + 1; \\ else \\ k = 0","title":"Some definitions needed in the protocols to follow"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/#a-utopian-simplex-protocol","text":"typedef enum { frame_arrival } event_type; #include \"protocol.h\" void sender1(void) { frame s; packet buffer; while (true) { from_network_layer(&buffer); s.info = buffer; to_physical_layer(&s); } } void receiver1(void) { frame r; event_type event; while (true) { wait_for_event(&event); from_physical_layer(&r); to_network_layer(&r.info); } }","title":"A utopian simplex protocol"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/#a-simplex-stop-and-wait-protocol-for-an-error-free-channel","text":"The only difference between receiver1 and receiver2 is that after delivering a packet to the network layer, receiver2 sends an acknowledgement frame back to the sender before entering the wait loop again. This delay is a simple example of a flow control protocol. typedef enum { frame_arrival } event_type; #include \"protocol.h\" void sender2(void) { frame s; packet buffer; event_type event; while (true) { from_network_layer(&buffer); s.info = buffer; to_physical_layer(&s); wait_for_event(&event); } } void receiver2(void) { frame r, s; event_type event; while (true) { wait_for_event(&event); from_physical_layer(&r); to_network_layer(&r.info); to_physical_layer(&s); } }","title":"A Simplex Stop-and-Wait Protocol for an Error-Free Channel"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/#a-simplex-stop-and-wait-protocol-for-a-noisy-channel","text":"A positive acknowledgement with retransmission protocol. #define MAX_SEQ 1 typedef enum { frame_arrival, cksum_err, timeout } event_type; #include \"protocol.h\" void sender3(void) { seq_nr next_frame_to_send; frame s; packet buffer; event_type event; next_frame_to_send = 0; from_network_layer(&buffer); while (true) { s.info = buffer; s.seq = next_frame_to_send; to_physical_layer(&s); start_timer(s.seq); wait_for_event(&event); if (event == frame_arrival) { from_physical_layer(&s); if (s.ack == next_frame_to_send) { stop_timer(s.ack); from_network_layer(&buffer); inc(next_frame_to_send); } } } } void receiver3(void) { seq_nr frame_expected; frame r, s; event_type event; frame_expected = 0; while (true) { wait_for_event(&event); if (event == frame_arrival) { from_physical_layer(&r); if (r.seq == frame_expected) { to_network_layer(&r.info); inc(frame_expected); } s.ack = 1 \u2212 frame_expected; to_physical_layer(&s); } } }","title":"A Simplex Stop-and-Wait Protocol for a Noisy Channel"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/#a-1-bit-sliding-window-protocol","text":"#define MAX_SEQ 1 typedef enum { frame_arrival, cksum_err, timeout } event_type; #include \"protocol.h\" void protocol4(void) { seq_nr next_frame_to_send; seq_nr frame_expected; frame r, s; packet buffer; event_type event; next_frame_to_send = 0; frame_expected = 0; from_network_layer(&buffer); s.info = buffer; s.seq = next_frame_to_send; s.ack = 1 \u2212 frame_expected; to_physical_layer(&s); start_timer(s.seq); while (true) { wait_for_event(&event); if (event == frame_arrival) { from_physical_layer(&r); if (r.seq == frame_expected) { to_network_layer(&r.info); inc(frame_expected); } if (r.ack == next_frame_to_send) { stop_timer(r.ack); from_network_layer(&buffer); inc(next_frame_to_send); } } s.info = buffer; s.seq = next_frame_to_send; s.ack = 1 \u2212 frame_expected; to_physical_layer(&s); start_timer(s.seq); } }","title":"A 1-bit sliding window protocol"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/#a-sliding-window-protocol-using-go-back-n","text":"#define MAX \\ SEQ 7 typedef enum { frame_arrival, \\ cksum_err, \\ timeout, \\ network layer ready } event_type; \\ #include \"protocol.h\" static boolean between(seq_nr a, seq_nr b, seq_nr c) { if (((a <= b) && (b < c)) || ((c < a) && (a <= b)) || ((b < c) && (c < a))) return (true); else return (false); } static void send_data(seq_nr frame_nr, seq_nr frame_expected, packet buffer[]) { frame s; s.info = buffer[frame_nr]; s.seq = frame_nr; } void protocol5(void) { seq_nr next_frame_to_send; seq_nr ack_expected; seq_nr frame_expected; frame r; packet buffer[MAX_SEQ + 1]; seq_nr nbuffered; seq_nr i; event_type event; enable_network_layer(); next_frame_to_send = 0; nbuffered = 0; ack_expected = 0; frame_expected = 0; while (true) { wait_for_event(&event); to_physical_layer(&s); start_timer(frame_nr); switch (event) { case network_layer_ready: nbuffered = nbuffered + 1; inc(next_frame_to_send); break; case frame_arrival: from_physical_layer(&r); if (r.seq == frame_expected) { to_network_layer(&r.info); inc(frame_expected); } while (between(ack_expected, r.ack, next_frame_to_send)) { nbuffered = nbuffered \u2212 1; stop_timer(ack_expected); inc(ack_expected); } break; case cksum_err: break; case timeout: for (i = 1; i <= nbuffered; i++) { inc(next_frame_to_send); } } if (nbuffered < MAX_SEQ) enable_network_layer(); else disable_network_layer(); } }","title":"A sliding window protocol using go-back-n"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/#a-sliding-window-protocol-using-selective-repeat","text":"#define MAX_SEQ 7 #define NR \\ BUFS((MAX_SEQ + 1) / 2) \\ typedef enum \\ { \\ frame_arrival, \\ cksum_err, \\ timeout, \\ network layer ready, \\ ack timeout \\ } event_type; \\ #include \"protocol.h\" boolean no_nak = true; seq_nr oldest_frame = MAX_SEQ + 1; static boolean between(seq_nr a, seq_nr b, seq_nr c) { return ((a <= b) && (b < c)) || ((c < a) && (a <= b)) || ((b < c) && (c < a)); } static void send_frame(frame_kind fk, seq_nr frame_nr, seq_nr frame_expected, packet buffer[]) { frame s; s.kind = fk; if (fk == data) s.info = buffer[frame_nr % NR_BUFS]; s.seq = frame_nr; s.ack = (frame_expected + MAX_SEQ) % (MAX_SEQ + 1); if (fk == nak) no_nak = false; to_physical_layer(&s); if (fk == data) start_timer(frame_nr % NR_BUFS); stop_ack_timer(); } void protocol6(void) { seq_nr ack_expected; seq_nr next_frame_to_send; seq_nr frame_expected; seq_nr too_far; int i; frame r; packet out_buf[NR_BUFS]; packet in_buf[NR_BUFS]; boolean arrived[NR_BUFS]; seq_nr nbuffered; event_type event; enable_network_layer(); next_frame_to_send = 0; ack_expected = 0; frame_expected = 0; too_far = NR_BUFS; nbuffered = 0; for (i = 0; i < NR_BUFS; i++) arrived[i] = false; while (true) { wait_for_event(&event); switch (event) { case network layer ready: nbuffered = nbuffered + 1; from_network_layer(&out_buf[next_frame_to_send % NR_BUFS]); send_frame(data, next_frame_to_send, frame_expected, out_buf); inc(next_frame_to_send); break; case frame_arrival: from_physical_layer(&r); if (r.kind == data) { if ((r.seq != frame_expected) && no_nak) send_frame(nak, 0, frame_expected, out_buf); else start_ack_timer(); if (between(frame_expected, r.seq, too_far) && (arrived[r.seq % NR_BUFS] == false)) { arrived[r.seq % NR_BUFS] = true; in_buf[r.seq % NR_BUFS] = r.info; while (arrived[frame_expected % NR_BUFS]) { to_network_layer(&in_buf[frame_expected % NR_BUFS]); no_nak = true; arrived[frame_expected % NR_BUFS] = false; inc(frame_expected); inc(too_far); start_ack_timer(); } } } if ((r.kind == nak) && between(ack_expected, (r.ack + 1) % (MAX_SEQ + 1), next_frame_to_send)) send_frame(data, (r.ack + 1) % (MAX_SEQ + 1), frame_expected, out_buf); while (between(ack_expected, r.ack, next_frame_to_send)) { nbuffered = nbuffered \u2212 1; stop_timer(ack_expected % NR_BUFS); inc(ack_expected); } break; case cksum_err: if (no_nak) send_frame(nak, 0, frame_expected, out_buf); break; case timeout: send_frame(data, oldest_frame, frame_expected, out_buf); break; case ack timeout: send_frame(ack, 0, frame_expected, out_buf); } if (nbuffered < NR_BUFS) enable_network_layer(); else disable_network_layer(); } }","title":"A sliding window protocol using selective repeat"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/#smtp","text":"dogtorhuang@foxmail.com -> hrz_ms@outlook.com base64\u7f16\u7801 \u7528\u6237\u540d\u5982\u4e0b\uff0c\u5bc6\u7801\u540c\u7406\u3002 echo -n \"dogtorhuang\" | base64 ZG9ndG9yaHVhbmc= telnet telnet smtp.qq.com 25 Trying 14.18.175.202... Connected to smtp.qq.com. Escape character is '^]'. 220 newxmesmtplogicsvrszb7.qq.com XMail Esmtp QQ Mail Server. HELO hrz 250-newxmesmtplogicsvrszb7.qq.com-11.176.226.127-42011439 250-SIZE 73400320 250 OK AUTH LOGIN 334 VXNlcm5hbWU6 ZG9ndG9yaHVhbmc= 334 UGFzc3dvcmQ6 c2pjdnFrcnNmZHRuYmVoaQ== 235 Authentication successful MAIL FROM:<dogtorhuang@foxmail.com> 250 OK. RCPT TO:<hrz_ms@outlook.com> 250 OK DATA 354 End data with <CR><LF>.<CR><LF>. FROM: dogtorhuang@foxmail.com To: hrz_ms@outlook.com Subject: confirm information Hi, Michael I got your message. Looking forward to meeting you. Thanks & Best Regards. . 250 OK: queued as.","title":"SMTP \u5b9e\u9a8c"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/politics/","text":"\u5f90\u6d9b\u8003\u7814\u653f\u6cbb \u9a6c\u514b\u601d\u539f\u7406 \u601d\u4fee\u6cd5\u57fa","title":"\u5f90\u6d9b\u8003\u7814\u653f\u6cbb"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/politics/#_1","text":"","title":"\u5f90\u6d9b\u8003\u7814\u653f\u6cbb"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/politics/#_2","text":"","title":"\u9a6c\u514b\u601d\u539f\u7406"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/politics/#_3","text":"","title":"\u601d\u4fee\u6cd5\u57fa"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/","text":"\u539f\u7406 \u4e3b\u5b9a\u7406 n=b^k n=b^k , k k and b b is integer, c, k > 0 c, k > 0 , b > 1 b > 1 , a \\ge 1 a \\ge 1 , d \\ge 0 d \\ge 0 . f(n) = af(n/b)+cn^d f(n) = af(n/b)+cn^d Compare a a and b^d b^d . less: O(n^d) O(n^d) . equal: O(n^d \\log n) O(n^d \\log n) . greater: O(n^{\\log_b a}) O(n^{\\log_b a}) Akra-Bazzi\u65b9\u6cd5 T(n) = \\sum_{i = 1}^k a_iT(b_i n) + f(n) T(n) = \\sum_{i = 1}^k a_iT(b_i n) + f(n) p p \u6ee1\u8db3 \\sum_{i=1}^k a_ib_i^p = 1 \\sum_{i=1}^k a_ib_i^p = 1 \uff0c\u5219\uff1a T(n) = \\Theta\\left(n^p\\left(1 + \\int_1^n \\frac{f(u)}{u^{p+1}}\\mathrm{d}u\\right)\\right) T(n) = \\Theta\\left(n^p\\left(1 + \\int_1^n \\frac{f(u)}{u^{p+1}}\\mathrm{d}u\\right)\\right) \u6570\u5b66\u7ed3\u8bba x(g, h) x(g, h) \u4e3a g g \u548c h h \u7ebf\u6027\u7ec4\u5408\u51fa\u7684\u6700\u5927\u81ea\u7136\u6570\uff0c x(g,h) = (g - 1)(h - 1) x(g,h) = (g - 1)(h - 1) \\ln n = \\ln 2 \\log_2n \\ln n = \\ln 2 \\log_2n \uff0c \\phi^{\\lg n}=n^{\\lg\\phi} \\phi^{\\lg n}=n^{\\lg\\phi} \\omega(2^n)=n!=o(n^n) \\omega(2^n)=n!=o(n^n) \uff1b \\lg n! = \\Theta(n\\lg n) \\lg n! = \\Theta(n\\lg n) Fibonacci\u6570\uff1a F_i = \\frac{\\phi^i - \\hat{\\phi}^i}{\\sqrt{5}}=\\left\\lfloor\\frac{\\phi^i}{\\sqrt{5}}+\\frac{1}{2}\\right\\rfloor F_i = \\frac{\\phi^i - \\hat{\\phi}^i}{\\sqrt{5}}=\\left\\lfloor\\frac{\\phi^i}{\\sqrt{5}}+\\frac{1}{2}\\right\\rfloor \uff1b \\phi,\\hat{\\phi} \\phi,\\hat{\\phi} \u4e3a x^2=x+1 x^2=x+1 \u200b\u7684\u5171\u8f6d\u53cc\u6839\u3002 Catalan\u6570\uff1a Catalan_n=\\sum\\limits_{i=1}^{n-1}Catalan_{i}\\cdot Catalan_{n-i}=\\frac{1}{n-1}C_{2n}^{n} Catalan_n=\\sum\\limits_{i=1}^{n-1}Catalan_{i}\\cdot Catalan_{n-i}=\\frac{1}{n-1}C_{2n}^{n} \u200b\u3002\u200b \\sum\\limits_{i = 1}^n \\frac{1}{i} = \\ln n + \\gamma + \\Theta\\left(\\frac{1}{2n}\\right) \\sum\\limits_{i = 1}^n \\frac{1}{i} = \\ln n + \\gamma + \\Theta\\left(\\frac{1}{2n}\\right) \u3002 \u6982\u5ff5 \u6808 \u9006\u5e8f\u8f93\u51fa \u9012\u5f52\u5d4c\u5957 n n \u4e2a\u6570\u8fdb\u884c\u6808\u6df7\u6d17\uff0c\u5171\u6709 Catalan_n Catalan_n \u79cd\u53ef\u80fd\u3002 \u5408\u6cd5\u5d4c\u5957\u548c\u76f8\u5e94\u957f\u5ea6\u7684\u6808\u6df7\u6d17\u4e00\u4e00\u5bf9\u5e94\u3002 \u5ef6\u8fdf\u7f13\u51b2 \u8868\u8fbe\u5f0f\u6c42\u503c\uff0c\u9006\u6ce2\u5170\u5f0f\u3002 \u8bd5\u63a2\u56de\u6eaf\u6cd5 \u6811 \u5355\u8282\u70b9\u7684\u6811\u9ad8\u4e3a 0 0 \u3002 \u9ad8\u4e3a h h \u200b \u7684\u6ee1\u4e8c\u53c9\u6811\u8282\u70b9\u6570\u91cf\u4e3a 2^{h+1} -1 2^{h+1} -1 \u200b \u3002 \u4e8c\u53c9\u6811\u5ea6\u4e3a 2 2 \u7684\u8282\u70b9\u6570\u91cf\u6bd4\u53f6\u8282\u70b9\u6570\u91cf\u5c11 1 1 \uff0c\u5b8c\u5168\u4e8c\u53c9\u6811\u53f6\u8282\u70b9\u6570\u91cf\u6bd4\u5185\u90e8\u8282\u70b9\u6570\u91cf\u591a 1 1 \u6216\u76f8\u7b49\u3002 \u56fe \u6b27\u62c9\u73af\u8def\uff1a\u5404\u8fb9\u4e00\u6b21\uff1b\u54c8\u5bc6\u987f\u73af\u8def\uff1a\u5404\u9876\u70b9\u4e00\u6b21\u3002 BFS\u6811\u6bcf\u6761\u8fb9\u6df1\u5ea6\u5173\u7cfb \u6709\u5411\u56fe\u8fb9 (v, u) (v, u) \uff1a depth(v) \\le depth(u) + 1 depth(v) \\le depth(u) + 1 \uff0c\u53d6\u7b49\u65f6\u4e3a\u6811\u8fb9\u3002 \u65e0\u5411\u56fe\u5dee\u503c\u4e3a 1 1 \u3002 DFS\u6811\uff0c\u540e\u5411\u8fb9\uff0c\u524d\u5411\u8fb9\uff0c\u8de8\u8fb9\uff0c v v \u4e3a u u \u7684\u7956\u5148\u5373 dtime[v] < dtime[u] < ftime[u] < ftime[v] \u3002 \u5173\u8282\u70b9 \u6839\u8282\u70b9\uff1a\u6709\u65e0\u5206\u652f \u5185\u90e8\u8282\u70b9\uff1a\u6709\u65e0\u9ad8\u4e8e\u7236\u8282\u70b9\u7684\u540e\u5411\u8fb9 \u53f6\u8282\u70b9\uff1a\u65e0 BST \u5220\u9664\uff0c\u5355\u5206\u652f\uff0c\u65e0\u5206\u652f\u76f4\u63a5\u5220\uff1b\u53cc\u5206\u652f\uff0c\u5bfb\u627e\u540e\u7ee7\u4ea4\u6362\u540e\u5220 \u9ad8\u4e3a h h \u200b\u7684AVL\u7684\u81f3\u5c11\u5305\u542b F_{h+3}-1 F_{h+3}-1 \u200b\u200b\u4e2a\u8282\u70b9 \u4f38\u5c55\u6811 \u6bcf\u4e2a\u8282\u70b9 v v \u4f7f\u7528\u52bf\u80fd\u51fd\u6570 lg |v| lg |v| \u200b\uff0c |v| |v| \u4e3a\u8282\u70b9\u540e\u4ee3\u6570\u76ee\u3002 \u6bcf\u6b65\u8c03\u6574\u6240\u9700\u65f6\u95f4 A=T_i + \\Delta\\phi_i\\le 3[\\phi'(v)-\\phi(v)] A=T_i + \\Delta\\phi_i\\le 3[\\phi'(v)-\\phi(v)] \u3002 \u603b\u4f53\u5206\u644a\u65f6\u95f4 A\\le 1+3[\\phi(r)-\\phi(v)] A\\le 1+3[\\phi(r)-\\phi(v)] \u3002 B-\u6811 \u9ad8\u4e3a h h \u200b \u7684 B-\u6811\u5305\u62ec\u5916\u90e8\u8282\u70b9\u3002 m m \u200b\u200b \u9636B-\u6811\u9664\u6839\u8282\u70b9\u5bf9\u5e94\u5206\u652f\u6570\u4e3a \\left[\\lceil m/2\\rceil,m\\right] \\left[\\lceil m/2\\rceil,m\\right] \u200b\u200b \uff0c\u5916\u90e8\u8282\u70b9\u6570\u5bf9\u5e94\u5931\u8d25\u67e5\u627e\u7684\u6570\u91cf\uff0c\u6bd4\u5185\u90e8\u5173\u952e\u7801\u6570\u91cf\u591a 1 1 \u200b \u3002 m m \u9636B-\u6811\u6ee1\u8db3 \\log_m(N+1) \\le h \\le \\log_{\\lceil m/2\\rceil}((N+1)/2)+1 \\log_m(N+1) \\le h \\le \\log_{\\lceil m/2\\rceil}((N+1)/2)+1 \u200b\u200b\u3002 \u7ea2\u9ed1\u6811 \u5bf9\u5e94\u7684 (2,4) (2,4) -\u6811 T_B T_B \u9ad8\u4e3a H H \u3002 \\lg (n+1) \\le h \\le 2H \\le 2\\lg(n+1) \\lg (n+1) \\le h \\le 2H \\le 2\\lg(n+1) \u200b\u200b\u200b \u3002 \u8df3\u8f6c\u8868 \u8868\u7684\u9ad8\u5ea6 Pr(h < k)=1-n/2^k,E(h)=O(\\lg n) Pr(h < k)=1-n/2^k,E(h)=O(\\lg n) \u200b\u200b\u200b \u3002 \u6bcf\u5c42\u6a2a\u5411\u8df3\u8f6c k k \u200b\u200b \u4e2a\u5854\u9876\uff0c 1 1 \u200b\u200b \u4e2a\u975e\u5854\u9876\uff0c\u8df3\u8f6c\u6b21\u6570 Pr(Y=k)=(1-p)^k p Pr(Y=k)=(1-p)^k p \u200b\u200b\u200b\u200b \u3002 \u6563\u5217\u8868 \u957f\u5ea6\u4e3a M M \u200b \uff0c\u88c5\u586b\u56e0\u5b50\u4e3a \\lambda \\lambda \u200b \u3002 \u6a21\u4f59\u6cd5\u95f4\u9694\u4e3a T T \u7684 M M \u4e2a\u5173\u952e\u7801\u63d2\u5165\u5230\u6563\u5217\u8868\uff0c g=gcd(M,T) g=gcd(M,T) \uff0c\u6bcf\u4e2a\u5173\u952e\u7801\u7ea6\u4e0e g g \u4e2a\u5173\u952e\u7801\u51b2\u7a81\u3002 M M \u200b \u4e3a\u7d20\u6570\u4e14 \\lambda \\le 50\\% \\lambda \\le 50\\% \u200b\uff0c\u5e73\u65b9\u8bd5\u63a2\u5c06\u7ec8\u6b62\u4e8e\u67d0\u4e2a\u7a7a\u6876\u3002\u200b \u5de6\u5f0f\u5806 npl(x)=npl(rc(x))+1 npl(x)=npl(rc(x))+1 \u200b\u3002 KMP N(P,j)=\\left\\{ 0\\le t<j|P[0,t)=P[j-t,j)\\right\\} N(P,j)=\\left\\{ 0\\le t<j|P[0,t)=P[j-t,j)\\right\\} \u4e14 P[t]\\neq P[j]) P[t]\\neq P[j]) \u200b\uff0c next[j]=max(N(P,j)) next[j]=max(N(P,j)) \u200b\u3002 \u4ee4 t=next[j] t=next[j] \uff0c\u5219 $$ next[j+1]=\\begin{cases} P[j+1]=P[t+1]?next[t+1]:t+1 &,P[j]=P[t]\\ next[t]+1,next[next[t]]+1,\\cdots &,others \\end{cases} $$ BM m m \u4e3a P P \u7684\u957f\u5ea6\uff0c ss[j]=max\\left\\{ 0\\le s<j|P(j-s,j]=P[m-s,m)\\right\\} ss[j]=max\\left\\{ 0\\le s<j|P(j-s,j]=P[m-s,m)\\right\\} \u200b\u200b\u200b \u3002 \u4ee4 (lo,hi] (lo,hi] \u4e3a\u6781\u957f\u5339\u914d\u540e\u7f00\uff0c\u5219 $$ ss[j]=\\begin{cases} ss[m-1-hi+j]&,j-lo\\le ss[m-1-hi+j]\\ updated(hi)-updated(lo)&, others \\end{cases} $$ $$ \\begin{cases} \\forall i<m-j-1, gs[i]=m-j-1&,ss[i]=j+1\\ gs[m-ss[j]-1]=m-j-1 &,others \\end{cases} $$ \u6392\u5e8f \u5411\u91cf S S \u5df2\u7ecf (g,h) (g,h) \u6709\u5e8f\uff0c\u4e14 g,h g,h \u5c5e\u4e8e O(d) O(d) \u6570\u91cf\u7ea7\uff0c\u5219\u4f7f\u7528\u63d2\u5165\u7b97\u6cd5\u8fdb\u884c d d -\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u7684\u4e3a O(dn) O(dn) \u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \u5e73\u5747\u8fd0\u884c\u65f6\u95f4 \u57fa\u6570\u6392\u5e8f\uff1a O(t(m+n)) O(t(m+n)) \u200b \u5feb\u901f\u6392\u5e8f\uff1a T(n) = n + 1 + \\frac{1}{n}\\sum\\limits_{i = 1}^{n}T(i - 1) + T(n - i) T(n) = n + 1 + \\frac{1}{n}\\sum\\limits_{i = 1}^{n}T(i - 1) + T(n - i) k-\u9009\u53d6\u7b97\u6cd5\uff1a T(n) = cn + T(n/Q) + T(3n/4) T(n) = cn + T(n/Q) + T(3n/4) \u200b","title":"\u539f\u7406"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_1","text":"\u4e3b\u5b9a\u7406 n=b^k n=b^k , k k and b b is integer, c, k > 0 c, k > 0 , b > 1 b > 1 , a \\ge 1 a \\ge 1 , d \\ge 0 d \\ge 0 . f(n) = af(n/b)+cn^d f(n) = af(n/b)+cn^d Compare a a and b^d b^d . less: O(n^d) O(n^d) . equal: O(n^d \\log n) O(n^d \\log n) . greater: O(n^{\\log_b a}) O(n^{\\log_b a}) Akra-Bazzi\u65b9\u6cd5 T(n) = \\sum_{i = 1}^k a_iT(b_i n) + f(n) T(n) = \\sum_{i = 1}^k a_iT(b_i n) + f(n) p p \u6ee1\u8db3 \\sum_{i=1}^k a_ib_i^p = 1 \\sum_{i=1}^k a_ib_i^p = 1 \uff0c\u5219\uff1a T(n) = \\Theta\\left(n^p\\left(1 + \\int_1^n \\frac{f(u)}{u^{p+1}}\\mathrm{d}u\\right)\\right) T(n) = \\Theta\\left(n^p\\left(1 + \\int_1^n \\frac{f(u)}{u^{p+1}}\\mathrm{d}u\\right)\\right) \u6570\u5b66\u7ed3\u8bba x(g, h) x(g, h) \u4e3a g g \u548c h h \u7ebf\u6027\u7ec4\u5408\u51fa\u7684\u6700\u5927\u81ea\u7136\u6570\uff0c x(g,h) = (g - 1)(h - 1) x(g,h) = (g - 1)(h - 1) \\ln n = \\ln 2 \\log_2n \\ln n = \\ln 2 \\log_2n \uff0c \\phi^{\\lg n}=n^{\\lg\\phi} \\phi^{\\lg n}=n^{\\lg\\phi} \\omega(2^n)=n!=o(n^n) \\omega(2^n)=n!=o(n^n) \uff1b \\lg n! = \\Theta(n\\lg n) \\lg n! = \\Theta(n\\lg n) Fibonacci\u6570\uff1a F_i = \\frac{\\phi^i - \\hat{\\phi}^i}{\\sqrt{5}}=\\left\\lfloor\\frac{\\phi^i}{\\sqrt{5}}+\\frac{1}{2}\\right\\rfloor F_i = \\frac{\\phi^i - \\hat{\\phi}^i}{\\sqrt{5}}=\\left\\lfloor\\frac{\\phi^i}{\\sqrt{5}}+\\frac{1}{2}\\right\\rfloor \uff1b \\phi,\\hat{\\phi} \\phi,\\hat{\\phi} \u4e3a x^2=x+1 x^2=x+1 \u200b\u7684\u5171\u8f6d\u53cc\u6839\u3002 Catalan\u6570\uff1a Catalan_n=\\sum\\limits_{i=1}^{n-1}Catalan_{i}\\cdot Catalan_{n-i}=\\frac{1}{n-1}C_{2n}^{n} Catalan_n=\\sum\\limits_{i=1}^{n-1}Catalan_{i}\\cdot Catalan_{n-i}=\\frac{1}{n-1}C_{2n}^{n} \u200b\u3002\u200b \\sum\\limits_{i = 1}^n \\frac{1}{i} = \\ln n + \\gamma + \\Theta\\left(\\frac{1}{2n}\\right) \\sum\\limits_{i = 1}^n \\frac{1}{i} = \\ln n + \\gamma + \\Theta\\left(\\frac{1}{2n}\\right) \u3002","title":"\u539f\u7406"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_2","text":"\u6808 \u9006\u5e8f\u8f93\u51fa \u9012\u5f52\u5d4c\u5957 n n \u4e2a\u6570\u8fdb\u884c\u6808\u6df7\u6d17\uff0c\u5171\u6709 Catalan_n Catalan_n \u79cd\u53ef\u80fd\u3002 \u5408\u6cd5\u5d4c\u5957\u548c\u76f8\u5e94\u957f\u5ea6\u7684\u6808\u6df7\u6d17\u4e00\u4e00\u5bf9\u5e94\u3002 \u5ef6\u8fdf\u7f13\u51b2 \u8868\u8fbe\u5f0f\u6c42\u503c\uff0c\u9006\u6ce2\u5170\u5f0f\u3002 \u8bd5\u63a2\u56de\u6eaf\u6cd5 \u6811 \u5355\u8282\u70b9\u7684\u6811\u9ad8\u4e3a 0 0 \u3002 \u9ad8\u4e3a h h \u200b \u7684\u6ee1\u4e8c\u53c9\u6811\u8282\u70b9\u6570\u91cf\u4e3a 2^{h+1} -1 2^{h+1} -1 \u200b \u3002 \u4e8c\u53c9\u6811\u5ea6\u4e3a 2 2 \u7684\u8282\u70b9\u6570\u91cf\u6bd4\u53f6\u8282\u70b9\u6570\u91cf\u5c11 1 1 \uff0c\u5b8c\u5168\u4e8c\u53c9\u6811\u53f6\u8282\u70b9\u6570\u91cf\u6bd4\u5185\u90e8\u8282\u70b9\u6570\u91cf\u591a 1 1 \u6216\u76f8\u7b49\u3002 \u56fe \u6b27\u62c9\u73af\u8def\uff1a\u5404\u8fb9\u4e00\u6b21\uff1b\u54c8\u5bc6\u987f\u73af\u8def\uff1a\u5404\u9876\u70b9\u4e00\u6b21\u3002 BFS\u6811\u6bcf\u6761\u8fb9\u6df1\u5ea6\u5173\u7cfb \u6709\u5411\u56fe\u8fb9 (v, u) (v, u) \uff1a depth(v) \\le depth(u) + 1 depth(v) \\le depth(u) + 1 \uff0c\u53d6\u7b49\u65f6\u4e3a\u6811\u8fb9\u3002 \u65e0\u5411\u56fe\u5dee\u503c\u4e3a 1 1 \u3002 DFS\u6811\uff0c\u540e\u5411\u8fb9\uff0c\u524d\u5411\u8fb9\uff0c\u8de8\u8fb9\uff0c v v \u4e3a u u \u7684\u7956\u5148\u5373 dtime[v] < dtime[u] < ftime[u] < ftime[v] \u3002 \u5173\u8282\u70b9 \u6839\u8282\u70b9\uff1a\u6709\u65e0\u5206\u652f \u5185\u90e8\u8282\u70b9\uff1a\u6709\u65e0\u9ad8\u4e8e\u7236\u8282\u70b9\u7684\u540e\u5411\u8fb9 \u53f6\u8282\u70b9\uff1a\u65e0 BST \u5220\u9664\uff0c\u5355\u5206\u652f\uff0c\u65e0\u5206\u652f\u76f4\u63a5\u5220\uff1b\u53cc\u5206\u652f\uff0c\u5bfb\u627e\u540e\u7ee7\u4ea4\u6362\u540e\u5220 \u9ad8\u4e3a h h \u200b\u7684AVL\u7684\u81f3\u5c11\u5305\u542b F_{h+3}-1 F_{h+3}-1 \u200b\u200b\u4e2a\u8282\u70b9 \u4f38\u5c55\u6811 \u6bcf\u4e2a\u8282\u70b9 v v \u4f7f\u7528\u52bf\u80fd\u51fd\u6570 lg |v| lg |v| \u200b\uff0c |v| |v| \u4e3a\u8282\u70b9\u540e\u4ee3\u6570\u76ee\u3002 \u6bcf\u6b65\u8c03\u6574\u6240\u9700\u65f6\u95f4 A=T_i + \\Delta\\phi_i\\le 3[\\phi'(v)-\\phi(v)] A=T_i + \\Delta\\phi_i\\le 3[\\phi'(v)-\\phi(v)] \u3002 \u603b\u4f53\u5206\u644a\u65f6\u95f4 A\\le 1+3[\\phi(r)-\\phi(v)] A\\le 1+3[\\phi(r)-\\phi(v)] \u3002 B-\u6811 \u9ad8\u4e3a h h \u200b \u7684 B-\u6811\u5305\u62ec\u5916\u90e8\u8282\u70b9\u3002 m m \u200b\u200b \u9636B-\u6811\u9664\u6839\u8282\u70b9\u5bf9\u5e94\u5206\u652f\u6570\u4e3a \\left[\\lceil m/2\\rceil,m\\right] \\left[\\lceil m/2\\rceil,m\\right] \u200b\u200b \uff0c\u5916\u90e8\u8282\u70b9\u6570\u5bf9\u5e94\u5931\u8d25\u67e5\u627e\u7684\u6570\u91cf\uff0c\u6bd4\u5185\u90e8\u5173\u952e\u7801\u6570\u91cf\u591a 1 1 \u200b \u3002 m m \u9636B-\u6811\u6ee1\u8db3 \\log_m(N+1) \\le h \\le \\log_{\\lceil m/2\\rceil}((N+1)/2)+1 \\log_m(N+1) \\le h \\le \\log_{\\lceil m/2\\rceil}((N+1)/2)+1 \u200b\u200b\u3002 \u7ea2\u9ed1\u6811 \u5bf9\u5e94\u7684 (2,4) (2,4) -\u6811 T_B T_B \u9ad8\u4e3a H H \u3002 \\lg (n+1) \\le h \\le 2H \\le 2\\lg(n+1) \\lg (n+1) \\le h \\le 2H \\le 2\\lg(n+1) \u200b\u200b\u200b \u3002 \u8df3\u8f6c\u8868 \u8868\u7684\u9ad8\u5ea6 Pr(h < k)=1-n/2^k,E(h)=O(\\lg n) Pr(h < k)=1-n/2^k,E(h)=O(\\lg n) \u200b\u200b\u200b \u3002 \u6bcf\u5c42\u6a2a\u5411\u8df3\u8f6c k k \u200b\u200b \u4e2a\u5854\u9876\uff0c 1 1 \u200b\u200b \u4e2a\u975e\u5854\u9876\uff0c\u8df3\u8f6c\u6b21\u6570 Pr(Y=k)=(1-p)^k p Pr(Y=k)=(1-p)^k p \u200b\u200b\u200b\u200b \u3002 \u6563\u5217\u8868 \u957f\u5ea6\u4e3a M M \u200b \uff0c\u88c5\u586b\u56e0\u5b50\u4e3a \\lambda \\lambda \u200b \u3002 \u6a21\u4f59\u6cd5\u95f4\u9694\u4e3a T T \u7684 M M \u4e2a\u5173\u952e\u7801\u63d2\u5165\u5230\u6563\u5217\u8868\uff0c g=gcd(M,T) g=gcd(M,T) \uff0c\u6bcf\u4e2a\u5173\u952e\u7801\u7ea6\u4e0e g g \u4e2a\u5173\u952e\u7801\u51b2\u7a81\u3002 M M \u200b \u4e3a\u7d20\u6570\u4e14 \\lambda \\le 50\\% \\lambda \\le 50\\% \u200b\uff0c\u5e73\u65b9\u8bd5\u63a2\u5c06\u7ec8\u6b62\u4e8e\u67d0\u4e2a\u7a7a\u6876\u3002\u200b \u5de6\u5f0f\u5806 npl(x)=npl(rc(x))+1 npl(x)=npl(rc(x))+1 \u200b\u3002 KMP N(P,j)=\\left\\{ 0\\le t<j|P[0,t)=P[j-t,j)\\right\\} N(P,j)=\\left\\{ 0\\le t<j|P[0,t)=P[j-t,j)\\right\\} \u4e14 P[t]\\neq P[j]) P[t]\\neq P[j]) \u200b\uff0c next[j]=max(N(P,j)) next[j]=max(N(P,j)) \u200b\u3002 \u4ee4 t=next[j] t=next[j] \uff0c\u5219 $$ next[j+1]=\\begin{cases} P[j+1]=P[t+1]?next[t+1]:t+1 &,P[j]=P[t]\\ next[t]+1,next[next[t]]+1,\\cdots &,others \\end{cases} $$ BM m m \u4e3a P P \u7684\u957f\u5ea6\uff0c ss[j]=max\\left\\{ 0\\le s<j|P(j-s,j]=P[m-s,m)\\right\\} ss[j]=max\\left\\{ 0\\le s<j|P(j-s,j]=P[m-s,m)\\right\\} \u200b\u200b\u200b \u3002 \u4ee4 (lo,hi] (lo,hi] \u4e3a\u6781\u957f\u5339\u914d\u540e\u7f00\uff0c\u5219 $$ ss[j]=\\begin{cases} ss[m-1-hi+j]&,j-lo\\le ss[m-1-hi+j]\\ updated(hi)-updated(lo)&, others \\end{cases} $$ $$ \\begin{cases} \\forall i<m-j-1, gs[i]=m-j-1&,ss[i]=j+1\\ gs[m-ss[j]-1]=m-j-1 &,others \\end{cases} $$ \u6392\u5e8f \u5411\u91cf S S \u5df2\u7ecf (g,h) (g,h) \u6709\u5e8f\uff0c\u4e14 g,h g,h \u5c5e\u4e8e O(d) O(d) \u6570\u91cf\u7ea7\uff0c\u5219\u4f7f\u7528\u63d2\u5165\u7b97\u6cd5\u8fdb\u884c d d -\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u7684\u4e3a O(dn) O(dn) \u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \u5e73\u5747\u8fd0\u884c\u65f6\u95f4 \u57fa\u6570\u6392\u5e8f\uff1a O(t(m+n)) O(t(m+n)) \u200b \u5feb\u901f\u6392\u5e8f\uff1a T(n) = n + 1 + \\frac{1}{n}\\sum\\limits_{i = 1}^{n}T(i - 1) + T(n - i) T(n) = n + 1 + \\frac{1}{n}\\sum\\limits_{i = 1}^{n}T(i - 1) + T(n - i) k-\u9009\u53d6\u7b97\u6cd5\uff1a T(n) = cn + T(n/Q) + T(3n/4) T(n) = cn + T(n/Q) + T(3n/4) \u200b","title":"\u6982\u5ff5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%20%E5%85%A5%E9%97%A8%E5%88%B0%E8%BF%9B%E9%98%B6/","text":"\u7b97\u6cd5\u7ade\u8d5b \u5165\u95e8\u5230\u8fdb\u9636 \u6d88\u9664 kk \u7684\u4e8c\u8fdb\u5236\u6570\u7684\u6700\u540e\u4e00\u4e2a 1 c++ kk = kk & (kk - 1) Cantor \u51fd\u6570\uff0c\u72b6\u6001 --> \u6570\u503c X = \\sum_{i = 0}^{n-1} a[i]\\times i! X = \\sum_{i = 0}^{n-1} a[i]\\times i!","title":"\u7b97\u6cd5\u7ade\u8d5b \u5165\u95e8\u5230\u8fdb\u9636"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%20%E5%85%A5%E9%97%A8%E5%88%B0%E8%BF%9B%E9%98%B6/#_1","text":"\u6d88\u9664 kk \u7684\u4e8c\u8fdb\u5236\u6570\u7684\u6700\u540e\u4e00\u4e2a 1 c++ kk = kk & (kk - 1) Cantor \u51fd\u6570\uff0c\u72b6\u6001 --> \u6570\u503c X = \\sum_{i = 0}^{n-1} a[i]\\times i! X = \\sum_{i = 0}^{n-1} a[i]\\times i!","title":"\u7b97\u6cd5\u7ade\u8d5b \u5165\u95e8\u5230\u8fdb\u9636"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/","text":"\u9e1f\u54e5\u7684Linux\u79c1\u623f\u83dc \u968f\u8bb0 \u5404\u79cd\u6587\u4ef6 \u5e2e\u52a9\u6587\u6863 man: /usr/share/man info: /usr/share/info /usr/share/doc \u7528\u6237\u4e0e\u7528\u6237\u7ec4 \u7528\u6237\u4fe1\u606f\uff1a/etc/passwd\uff1bchown \u5bc6\u7801\uff1a/etc/shadow \u7ec4\u540d\uff1a/etc/group\uff1bchgrp \u6570\u636e \u767b\u5f55\u6570\u636e\uff1a/var/log/wtmp\uff1blast \u8bfb \u8bed\u8a00\uff1a/etc/locale.conf\uff1bLANG\uff1bLC_ALL locate \u6570\u636e\u5e93\uff1a/var/lib/mlocate; /etc/updatedb.conf \u6302\u8f7d\u914d\u7f6e\uff1a/etc/fstab\uff1b/etc/mtab\uff1b/proc/mounts shell \u4fe1\u606f\uff1a/etc/shell \u9a71\u52a8\u7a0b\u5e8f \u6587\u4ef6\u7cfb\u7edf\uff1a/lib/modules/$(uname -r)/kernel/fs/ \u6613\u6df7\u53c2\u6570 -p mkdir -p # \u9012\u5f52\u521b\u5efa\u76ee\u5f55 pwd -P # \u663e\u793a\u771f\u5b9e\u8def\u5f84 cp -p # \u8fde\u540c\u5c5e\u6027\u7684\u590d\u5236 -r cp -r # \u9012\u5f52\u8d1f\u8d23\uff0c\u7528\u4e8e\u76ee\u5f55 rm -r # \u9012\u5f52\u5220\u9664 \u795e\u5947\u7684\u547d\u4ee4 \u9690\u85cf\u5c5e\u6027\uff1achattr, lsattr \u67e5\u770b\u4e8c\u8fdb\u5236\u6587\u4ef6\uff1aod \u78c1\u76d8\u4e0e\u6587\u4ef6\u7cfb\u7edf\u7ba1\u7406 \u67e5\u770b\u6587\u4ef6\u5bf9\u5e94\u7684 inode \u53f7\uff1als -i \u67e5\u8be2 ext \u7cfb\u5217\u8d85\u7ea7\u5757\u4fe1\u606f\uff1adumpe2fs \u67e5\u8be2 xfs \u8d85\u7ea7\u5757\u4fe1\u606f\uff1axfs_info \u5206\u533a\u3001\u683c\u5f0f\u5316\u3001\u68c0\u9a8c\u4e0e\u6302\u8f7d \u663e\u793a\u78c1\u76d8\u5206\u533a\u72b6\u6001\uff1ablkid\uff1blsblk -f\uff1bparted \u5206\u533a\uff1agdisk / fdisk \u683c\u5f0f\u5316\uff1amkfs\uff1bpartprobe -s \u6587\u4ef6\u7cfb\u7edf\u68c0\u9a8c\uff1axfs_repair\uff1bfsck.ext4 \u6302\u8f7d\uff1amount\uff1bumount label\uff0cuuid \u81ea\u5b9a\u4e49\uff1auuidgen\uff1bxfs_admin\uff1btune2fs \u542f\u52a8\u6302\u8f7d \u4fee\u6539 /etc/fstab \u5355\u4eba\u7ef4\u62a4 mount -n -o remount,rw / \u5236\u4f5c\u865a\u62df\u6587\u4ef6\u7cfb\u7edf\uff1a/ect/fstab \u4e2d\u4e0d\u7528 UUID \u521b\u5efa swap mkswap\uff1bswapon\uff1bswapoff \u6587\u4ef6\u4e0e\u6587\u4ef6\u7cfb\u7edf\u7684\u538b\u7f29\u3001\u6253\u5305\u4e0e\u5907\u4efd \u6253\u5305\u6307\u4ee4 tar [-z|-j|-J] [cv] [-f \u5f85\u5efa\u7acb\u7684\u65b0\u6a94\u540d] filename... <==\u6253\u5305\u4e0e\u538b\u7f29 tar [-z|-j|-J] [t] [-f \u65e2\u6709\u7684 tar \u6a94\u540d] <==\u5bdf\u770b\u6a94\u540d tar [-z|-j|-J] [xv] [-f \u65e2\u6709\u7684 tar \u6a94\u540d] [-C \u76ee\u5f55] <==\u89e3\u538b\u7f29 \u5907\u4efd tar \u5907\u4efd XFS \u6587\u4ef6\u7cfb\u7edf\uff1axfsdump\uff1bxfsrestore xfsdump [-L Slabel] [-M M_label] [-l #] [-f \u5907\u4efd\u6863] \u5f85\u5907\u4efd\u8d44\u6599 xfsrestore -I <==\u7528\u6765\u5bdf\u770b\u5907\u4efd\u6587\u4ef6\u8d44\u6599 xfsrestore [-f \u5907\u4efd\u6863] [-L S_label] [-s] \u5f85\u590d\u539f\u76ee\u5f55 <==\u5355\u4e00\u6587\u4ef6\u5168\u7cfb\u7edf\u590d\u539f xfsrestore [-f \u5907\u4efd\u6587\u4ef6] -r \u5f85\u590d\u539f\u76ee\u5f55 <==\u900f\u8fc7\u7d2f\u79ef\u5907\u4efd\u6587\u4ef6\u6765\u590d\u539f \u7cfb\u7edf xfsrestore [-f \u5907\u4efd\u6587\u4ef6] -i \u5f85\u590d\u539f\u76ee\u5f55 <==\u8fdb\u5165\u4e92\u52a8\u6a21\u5f0f dd cpio vim DOS \u4e0e Linux \u7684\u65ad\u884c\u5b57\u7b26\uff1ados2unix\uff1bunix2dos \u8bed\u7cfb\u7f16\u7801\u8f6c\u6362\uff1a iconv -f \u539f\u672c\u7f16\u7801 -t \u65b0\u7f16\u7801 filename [-o newfile] bash \u6b63\u5219\u8868\u8fbe\u5f0f sed $ sed [-nefr] [\u52a8\u4f5c] \u9009\u9879\u4e0e\u53c2\u6570\uff1a -n \uff1a\u4f7f\u7528\u5b89\u9759(silent)\u6a21\u5f0f\u3002\u5728\u4e00\u822c sed \u7684\u7528\u6cd5\u4e2d\uff0c\u6240\u6709\u6765\u81ea STDIN \u7684\u6570\u636e\u4e00\u822c\u90fd\u4f1a\u88ab\u5217\u51fa\u5230\u5c4f\u5e55\u4e0a\u3002 \u4f46\u5982\u679c\u52a0\u4e0a -n \u53c2\u6570\u540e\uff0c\u5219\u53ea\u6709\u7ecf\u8fc7 sed \u7279\u6b8a\u5904\u7406\u7684\u90a3\u4e00\u884c(\u6216\u8005\u52a8\u4f5c)\u624d\u4f1a\u88ab\u5217\u51fa\u6765\u3002 -e \uff1a\u76f4\u63a5\u5728\u6307\u4ee4\u5217\u6a21\u5f0f\u4e0a\u8fdb\u884c sed \u7684\u52a8\u4f5c\u7f16\u8f91\uff1b -f \uff1a\u76f4\u63a5\u5c06 sed \u7684\u52a8\u4f5c\u5199\u5728\u4e00\u4e2a\u6587\u4ef6\u5185\uff0c -f filename \u5219\u53ef\u4ee5\u6267\u884c filename \u5185\u7684 sed \u52a8\u4f5c\uff1b -r \uff1ased \u7684\u52a8\u4f5c\u652f\u6301\u7684\u662f\u5ef6\u4f38\u578b\u6b63\u89c4\u8868\u793a\u6cd5\u7684\u8bed\u6cd5\u3002(\u9884\u8bbe\u662f\u57fa\u7840\u6b63\u89c4\u8868\u793a\u6cd5\u8bed\u6cd5) -i \uff1a\u76f4\u63a5\u4fee\u6539\u8bfb\u53d6\u7684\u6587\u4ef6\u5185\u5bb9\uff0c\u800c\u4e0d\u662f\u7531\u5c4f\u5e55\u8f93\u51fa\u3002 \u52a8\u4f5c\u8bf4\u660e\uff1a [n1[,n2]]function n1, n2 \uff1a\u4e0d\u89c1\u5f97\u4f1a\u5b58\u5728\uff0c\u4e00\u822c\u4ee3\u8868\u300e\u9009\u62e9\u8fdb\u884c\u52a8\u4f5c\u7684\u884c\u6570\u300f\uff0c\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5982\u679c\u6211\u7684\u52a8\u4f5c\u662f\u9700\u8981\u5728 10 \u5230 20 \u884c\u4e4b\u95f4\u8fdb\u884c\u7684\uff0c\u5219\u300e 10,20[\u52a8\u4f5c\u884c\u4e3a] \u300f function \u6709\u5e95\u4e0b\u8fd9\u4e9b\u549a\u549a\uff1a a \uff1a\u65b0\u589e\uff0c a \u7684\u540e\u9762\u53ef\u4ee5\u63a5\u5b57\u7b26\u4e32\uff0c\u800c\u8fd9\u4e9b\u5b57\u7b26\u4e32\u4f1a\u5728\u65b0\u7684\u4e00\u884c\u51fa\u73b0(\u76ee\u524d\u7684\u4e0b\u4e00\u884c)\uff5e c \uff1a\u53d6\u4ee3\uff0c c \u7684\u540e\u9762\u53ef\u4ee5\u63a5\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e9b\u5b57\u7b26\u4e32\u53ef\u4ee5\u53d6\u4ee3 n1,n2 \u4e4b\u95f4\u7684\u884c\uff01 d \uff1a\u5220\u9664\uff0c\u56e0\u4e3a\u662f\u5220\u9664\u554a\uff0c\u6240\u4ee5 d \u540e\u9762\u901a\u5e38\u4e0d\u63a5\u4efb\u4f55\u549a\u549a\uff1b i \uff1a\u63d2\u5165\uff0c i \u7684\u540e\u9762\u53ef\u4ee5\u63a5\u5b57\u7b26\u4e32\uff0c\u800c\u8fd9\u4e9b\u5b57\u7b26\u4e32\u4f1a\u5728\u65b0\u7684\u4e00\u884c\u51fa\u73b0(\u76ee\u524d\u7684\u4e0a\u4e00\u884c)\uff1b p \uff1a\u6253\u5370\uff0c\u4ea6\u5373\u5c06\u67d0\u4e2a\u9009\u62e9\u7684\u6570\u636e\u5370\u51fa\u3002\u901a\u5e38 p \u4f1a\u4e0e\u53c2\u6570 sed -n \u4e00\u8d77\u8fd0\u4f5c\uff5e s \uff1a\u53d6\u4ee3\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u53d6\u4ee3\u7684\u5de5\u4f5c\u54e9\uff01\u901a\u5e38\u8fd9\u4e2a s \u7684\u52a8\u4f5c\u53ef\u4ee5\u642d\u914d\u6b63\u89c4\u8868\u793a\u6cd5\uff01 \u4f8b\u5982 1,20s/old/new/g \u5c31\u662f\u5566\uff01 printf $ printf '\u6253\u5370\u683c\u5f0f' \u5b9e\u9645\u5185\u5bb9$ printf '\u6253\u5370\u683c\u5f0f' \u5b9e\u9645\u5185\u5bb9 \u9009\u9879\u4e0e\u53c2\u6570\uff1a \u5173\u4e8e\u683c\u5f0f\u65b9\u9762\u7684\u51e0\u4e2a\u7279\u6b8a\u6837\u5f0f\uff1a \\a \u8b66\u544a\u58f0\u97f3\u8f93\u51fa \\b \u9000\u683c\u952e(backspace) \\f \u6e05\u9664\u5c4f\u5e55 (form feed) \\n \u8f93\u51fa\u65b0\u7684\u4e00\u884c \\r \u4ea6\u5373 Enter \u6309\u952e \\t \u6c34\u5e73\u7684 [tab] \u6309\u952e \\v \u5782\u76f4\u7684 [tab] \u6309\u952e \\xNN NN \u4e3a\u4e24\u4f4d\u6570\u7684\u6570\u5b57\uff0c\u53ef\u4ee5\u8f6c\u6362\u6570\u5b57\u6210\u4e3a\u5b57\u7b26\u3002 \u5173\u4e8e C \u7a0b\u5e8f\u8bed\u8a00\u5185\uff0c\u5e38\u89c1\u7684\u53d8\u6570\u683c\u5f0f %ns \u90a3\u4e2a n \u662f\u6570\u5b57\uff0c s \u4ee3\u8868 string \uff0c\u4ea6\u5373\u591a\u5c11\u4e2a\u5b57\u7b26\uff1b %ni \u90a3\u4e2a n \u662f\u6570\u5b57\uff0c i \u4ee3\u8868 integer \uff0c\u4ea6\u5373\u591a\u5c11\u6574\u6570\u5b57\u6570\uff1b %N.nf \u90a3\u4e2a n \u4e0e N \u90fd\u662f\u6570\u5b57\uff0c f \u4ee3\u8868 floating (\u6d6e\u70b9)\uff0c\u5982\u679c\u6709\u5c0f\u6570\u5b57\u6570\uff0c \u5047\u8bbe\u6211\u5171\u8981\u5341\u4e2a\u4f4d\u6570\uff0c\u4f46\u5c0f\u6570\u70b9\u6709\u4e24\u4f4d\uff0c\u5373\u4e3a %10.2f \u5570\uff01 awk $ awk '\u6761\u4ef6\u7c7b\u578b 1{\u52a8\u4f5c 1} \u6761\u4ef6\u7c7b\u578b 2{\u52a8\u4f5c 2} ...' filename \u5904\u7406\u6d41\u7a0b\u662f\uff1a 1. \u8bfb\u5165\u7b2c\u4e00\u884c\uff0c\u5e76\u5c06\u7b2c\u4e00\u884c\u7684\u8d44\u6599\u586b\u5165 $0, $1, $2.... \u7b49\u53d8\u6570\u5f53\u4e2d\uff1b 2. \u4f9d\u636e \"\u6761\u4ef6\u7c7b\u578b\" \u7684\u9650\u5236\uff0c\u5224\u65ad\u662f\u5426\u9700\u8981\u8fdb\u884c\u540e\u9762\u7684 \"\u52a8\u4f5c\"\uff1b 3. \u505a\u5b8c\u6240\u6709\u7684\u52a8\u4f5c\u4e0e\u6761\u4ef6\u7c7b\u578b\uff1b 4. \u82e5\u8fd8\u6709\u540e\u7eed\u7684\u300e\u884c\u300f\u7684\u6570\u636e\uff0c\u5219\u91cd\u590d\u4e0a\u9762 1~3 \u7684\u6b65\u9aa4\uff0c\u76f4\u5230\u6240\u6709\u7684\u6570\u636e\u90fd\u8bfb\u5b8c\u4e3a\u6b62\u3002 \u53d8\u91cf\u540d\u79f0 \u4ee3\u8868\u610f\u4e49 NF \u6bcf\u4e00\u884c ($0) \u62e5\u6709\u7684\u5b57\u6bb5\u603b\u6570 NR \u76ee\u524d awk \u6240\u5904\u7406\u7684\u662f\u300e\u7b2c\u51e0\u884c\u300f\u6570\u636e FS \u76ee\u524d\u7684\u5206\u9694\u5b57\u7b26\uff0c\u9ed8\u8ba4\u662f\u7a7a\u683c\u952e \u6211\u4eec\u53ef\u4ee5\u9884\u5148\u8bbe\u5b9a awk \u7684\u53d8\u91cf\uff1a\u5982 BEGIN {FS=\":\"} pay.txt \u5982\u4e0b\uff0c\u5e76\u8ba1\u7b97\u6bcf\u4e2a\u4eba\u7684\u603b\u989d Name 1st 2nd 3th VBird 23000 24000 25000 DMTsa 21000 20000 23000 Bird2 43000 42000 41000 $ cat pay.txt | \\ > awk 'NR==1{printf \"%10s %10s %10s %10s %10s\\n\",$1,$2,$3,$4,\"Total\" } > NR>=2{total = $2 + $3 + $4 > printf \"%10s %10d %10d %10d %10.2f\\n\", $1, $2, $3, $4, total}' \u6587\u4ef6\u6bd4\u5bf9\u5de5\u5177 diff $ diff [-bBi] from-file to-file \u9009\u9879\u4e0e\u53c2\u6570\uff1a from-file \uff1a\u4e00\u4e2a\u6863\u540d\uff0c\u4f5c\u4e3a\u539f\u59cb\u6bd4\u5bf9\u6587\u4ef6\u7684\u6863\u540d\uff1b to-file \uff1a\u4e00\u4e2a\u6863\u540d\uff0c\u4f5c\u4e3a\u76ee\u7684\u6bd4\u5bf9\u6587\u4ef6\u7684\u6863\u540d\uff1b \u6ce8\u610f\uff0cfrom-file \u6216 to-file \u53ef\u4ee5 - \u53d6\u4ee3\uff0c\u90a3\u4e2a - \u4ee3\u8868\u300eStandard input\u300f\u4e4b\u610f\u3002 -b \uff1a\u5ffd\u7565\u4e00\u884c\u5f53\u4e2d\uff0c\u4ec5\u6709\u591a\u4e2a\u7a7a\u767d\u7684\u5dee\u5f02(\u4f8b\u5982 \"about me\" \u4e0e \"about me\" \u89c6\u4e3a\u76f8\u540c -B \uff1a\u5ffd\u7565\u7a7a\u767d\u884c\u7684\u5dee\u5f02\u3002 -i \uff1a\u5ffd\u7565\u5927\u5c0f\u5199\u7684\u4e0d\u540c\u3002 $ cp /etc/passwd passwd.old $ cat /etc/passwd | sed -e '4d' -e '6c no six line' > passwd.new \u6bd4\u5bf9 passwd.old \u4e0e passwd.new \u7684\u5dee\u5f02\uff1a $ diff passwd.old passwd.new 4d3 <==\u5de6\u8fb9\u7b2c\u56db\u884c\u88ab\u5220\u9664 (d) \u6389\u4e86\uff0c\u57fa\u51c6\u662f\u53f3\u8fb9\u7684\u7b2c\u4e09\u884c < adm:x:3:4:adm:/var/adm:/sbin/nologin <==\u8fd9\u8fb9\u5217\u51fa\u5de6\u8fb9(<)\u6587\u4ef6\u88ab\u5220\u9664\u7684\u90a3\u4e00\u884c\u5185\u5bb9 6c5 <==\u5de6\u8fb9\u6587\u4ef6\u7684\u7b2c\u516d\u884c\u88ab\u53d6\u4ee3 (c) \u6210\u53f3\u8fb9\u6587\u4ef6\u7684\u7b2c\u4e94\u884c < sync:x:5:0:sync:/sbin:/bin/sync <==\u5de6\u8fb9(<)\u6587\u4ef6\u7b2c\u516d\u884c\u5185\u5bb9 -- > no six line <==\u53f3\u8fb9(>)\u6587\u4ef6\u7b2c\u4e94\u884c\u5185\u5bb9 cmp cmp \u4ee5\u300e\u5b57\u8282\u300f\u4e3a\u5355\u4f4d\u53bb\u6bd4\u5bf9 patch $ diff -Naur passwd.old passwd.new > passwd.patch $ patch -pN < patch_file <==\u66f4\u65b0 $ patch -R -pN < patch_file <==\u8fd8\u539f \u9009\u9879\u4e0e\u53c2\u6570\uff1a -p \uff1a\u540e\u9762\u53ef\u4ee5\u63a5\u300e\u53d6\u6d88\u51e0\u5c42\u76ee\u5f55\u300f\u7684\u610f\u601d\u3002 -R \uff1a\u4ee3\u8868\u8fd8\u539f\uff0c\u5c06\u65b0\u7684\u6587\u4ef6\u8fd8\u539f\u6210\u539f\u6765\u65e7\u7684\u7248\u672c\u3002 \u6587\u4ef6\u6253\u5370\u51c6\u5907 pr \u53c2\u6570\u592a\u591a\uff0c\u76f4\u63a5\u7528 bash script \u8d26\u53f7\u7ba1\u7406\u4e0e ACL \u8d26\u53f7\u4e0e\u7fa4\u7ec4 \u8d26\u53f7\u76f8\u5173\u6587\u4ef6\u4e4b\u95f4\u7684 UID/GID \u4e0e\u5bc6\u7801\u76f8\u5173\u6027\u793a\u610f\u56fe /etc/passwd \u8d26\u53f7\u540d\u79f0\uff1a\u5bc6\u7801\uff1aUID\uff1aGID\uff1a\u7528\u6237\u4fe1\u606f\u8bf4\u660e\u680f\uff1a\u5bb6\u76ee\u5f55\uff1aShell /etc/shadow \u8d26\u53f7\u540d\u79f0\uff1a\u5bc6\u7801\uff1a\u6700\u8fd1\u66f4\u52a8\u5bc6\u7801\u7684\u65e5\u671f\uff1a \u5bc6\u7801\u4e0d\u53ef\u88ab\u66f4\u52a8\u7684\u5929\u6570\uff1a \u5bc6\u7801\u9700\u8981\u91cd\u65b0\u53d8\u66f4\u7684\u5929\u6570\uff1a \u5bc6\u7801\u9700\u8981\u53d8\u66f4\u671f\u9650\u524d\u7684\u8b66\u544a\u5929\u6570\uff1a \u5bc6\u7801\u8fc7\u671f\u540e\u7684\u8d26\u53f7\u5bbd\u9650\u65f6\u95f4(\u5bc6\u7801\u5931\u6548\u65e5)\uff1a \u8d26\u53f7\u5931\u6548\u65e5\u671f\uff1a\u4fdd\u7559 /etc/group \u7ec4\u540d\uff1a\u7fa4\u7ec4\u5bc6\u7801\uff1aGID\uff1a\u6b64\u7fa4\u7ec4\u652f\u6301\u7684\u8d26\u53f7\u540d\u79f0 /etc/gshadow \u7ec4\u540d \u5bc6\u7801\u680f\uff0c\u540c\u6837\u7684\uff0c\u5f00\u5934\u4e3a ! \u8868\u793a\u65e0\u5408\u6cd5\u5bc6\u7801\uff0c\u6240\u4ee5\u65e0\u7fa4\u7ec4\u7ba1\u7406\u5458 \u7fa4\u7ec4\u7ba1\u7406\u5458\u7684\u8d26\u53f7 (\u76f8\u5173\u4fe1\u606f\u5728 gpasswd \u4e2d\u4ecb\u7ecd) \u6709\u52a0\u5165\u8be5\u7fa4\u7ec4\u652f\u6301\u7684\u6240\u5c5e\u8d26\u53f7 (\u4e0e /etc/group \u5185\u5bb9\u76f8\u540c\uff01) groups: \u6709\u6548\u4e0e\u652f\u6301\u7fa4\u7ec4\u7684\u89c2\u5bdf\uff1bnewgrp: \u6709\u6548\u7fa4\u7ec4\u7684\u5207\u6362 \u8d26\u53f7\u7ba1\u7406 \u65b0\u589e\u4e0e\u79fb\u9664\u4f7f\u7528\u8005, usearadd \u5728 /etc/passwd \u91cc\u9762\u5efa\u7acb\u4e00\u884c\u4e0e\u8d26\u53f7\u76f8\u5173\u7684\u6570\u636e\uff0c\u5305\u62ec\u5efa\u7acb UID/GID/\u5bb6\u76ee\u5f55\u7b49\uff1b \u5728 /etc/shadow \u91cc\u9762\u5c06\u6b64\u8d26\u53f7\u7684\u5bc6\u7801\u76f8\u5173\u53c2\u6570\u586b\u5165\uff0c\u4f46\u662f\u5c1a\u672a\u6709\u5bc6\u7801\uff1b \u5728 /etc/group \u91cc\u9762\u52a0\u5165\u4e00\u4e2a\u4e0e\u8d26\u53f7\u540d\u79f0\u4e00\u6a21\u4e00\u6837\u7684\u7ec4\u540d\uff1b \u5728 /home \u5e95\u4e0b\u5efa\u7acb\u4e00\u4e2a\u4e0e\u8d26\u53f7\u540c\u540d\u7684\u76ee\u5f55\u4f5c\u4e3a\u7528\u6237\u5bb6\u76ee\u5f55\uff0c\u4e14\u6743\u9650\u4e3a 700 $ useradd [-u UID] [-g \u521d\u59cb\u7fa4\u7ec4] [-G \u6b21\u8981\u7fa4\u7ec4] [-mM]\\ > [-c \u8bf4\u660e\u680f] [-d \u5bb6\u76ee\u5f55\u7edd\u5bf9\u8def\u5f84] [-s shell] \u4f7f\u7528\u8005\u8d26\u53f7\u540d \u9009\u9879\u4e0e\u53c2\u6570\uff1a -u \uff1a\u540e\u9762\u63a5\u7684\u662f UID \uff0c\u662f\u4e00\u7ec4\u6570\u5b57\u3002\u76f4\u63a5\u6307\u5b9a\u4e00\u4e2a\u7279\u5b9a\u7684 UID \u7ed9\u8fd9\u4e2a\u8d26\u53f7\uff1b -g \uff1a\u540e\u9762\u63a5\u7684\u90a3\u4e2a\u7ec4\u540d\u5c31\u662f\u6211\u4eec\u4e0a\u9762\u63d0\u5230\u7684 initial group \u5566\uff5e \u8be5\u7fa4\u7ec4\u7684 GID \u4f1a\u88ab\u653e\u7f6e\u5230 /etc/passwd \u7684\u7b2c\u56db\u4e2a\u5b57\u6bb5\u5185\u3002 -G \uff1a\u540e\u9762\u63a5\u7684\u7ec4\u540d\u5219\u662f\u8fd9\u4e2a\u8d26\u53f7\u8fd8\u53ef\u4ee5\u52a0\u5165\u7684\u7fa4\u7ec4\u3002 \u8fd9\u4e2a\u9009\u9879\u4e0e\u53c2\u6570\u4f1a\u4fee\u6539 /etc/group \u5185\u7684\u76f8\u5173\u8d44\u6599\u5594\uff01 -M \uff1a\u5f3a\u5236\uff01\u4e0d\u8981\u5efa\u7acb\u7528\u6237\u5bb6\u76ee\u5f55\uff01(\u7cfb\u7edf\u8d26\u53f7\u9ed8\u8ba4\u503c) -m \uff1a\u5f3a\u5236\uff01\u8981\u5efa\u7acb\u7528\u6237\u5bb6\u76ee\u5f55\uff01(\u4e00\u822c\u8d26\u53f7\u9ed8\u8ba4\u503c) -c \uff1a\u8fd9\u4e2a\u5c31\u662f /etc/passwd \u7684\u7b2c\u4e94\u680f\u7684\u8bf4\u660e\u5185\u5bb9\u5566\uff5e\u53ef\u4ee5\u968f\u4fbf\u6211\u4eec\u8bbe\u5b9a\u7684\u5566\uff5e -d \uff1a\u6307\u5b9a\u67d0\u4e2a\u76ee\u5f55\u6210\u4e3a\u5bb6\u76ee\u5f55\uff0c\u800c\u4e0d\u8981\u4f7f\u7528\u9ed8\u8ba4\u503c\u3002\u52a1\u5fc5\u4f7f\u7528\u7edd\u5bf9\u8def\u5f84\uff01 -r \uff1a\u5efa\u7acb\u4e00\u4e2a\u7cfb\u7edf\u7684\u8d26\u53f7\uff0c\u8fd9\u4e2a\u8d26\u53f7\u7684 UID \u4f1a\u6709\u9650\u5236 (\u53c2\u8003 /etc/login.defs) -s \uff1a\u540e\u9762\u63a5\u4e00\u4e2a shell \uff0c\u82e5\u6ca1\u6709\u6307\u5b9a\u5219\u9884\u8bbe\u662f /bin/bash \u7684\u5566\uff5e -e \uff1a\u540e\u9762\u63a5\u4e00\u4e2a\u65e5\u671f\uff0c\u683c\u5f0f\u4e3a\u300eYYYY-MM-DD\u300f\u6b64\u9879\u76ee\u53ef\u5199\u5165 shadow \u7b2c\u516b\u5b57\u6bb5\uff0c \u4ea6\u5373\u8d26\u53f7\u5931\u6548\u65e5\u7684\u8bbe\u5b9a\u9879\u76ee\u5570\uff1b -f \uff1a\u540e\u9762\u63a5 shadow \u7684\u7b2c\u4e03\u5b57\u6bb5\u9879\u76ee\uff0c\u6307\u5b9a\u5bc6\u7801\u662f\u5426\u4f1a\u5931\u6548\u30020 \u4e3a\u7acb\u523b\u5931\u6548\uff0c -1 \u4e3a\u6c38\u8fdc\u4e0d\u5931\u6548(\u5bc6\u7801\u53ea\u4f1a\u8fc7\u671f\u800c\u5f3a\u5236\u4e8e\u767b\u5165\u65f6\u91cd\u65b0\u8bbe\u5b9a\u800c\u5df2\u3002) useradd \u53c2\u8003\u6587\u4ef6 /etc/default/useradd /etc/login.defs /etc/skel/* /etc/default/useradd $ useradd -D GROUP=100 <==\u9884\u8bbe\u7684\u7fa4\u7ec4 HOME=/home <==\u9ed8\u8ba4\u7684\u5bb6\u76ee\u5f55\u6240\u5728\u76ee\u5f55 INACTIVE=-1 <==\u5bc6\u7801\u5931\u6548\u65e5\uff0c\u5728 shadow \u5185\u7684\u7b2c 7 \u680f\uff0c-1 \u6c38\u4e0d\u5931\u6548 EXPIRE= <==\u8d26\u53f7\u5931\u6548\u65e5\uff0c\u5728 shadow \u5185\u7684\u7b2c 8 \u680f SHELL=/bin/bash <==\u9884\u8bbe\u7684 shell SKEL=/etc/skel <==\u7528\u6237\u5bb6\u76ee\u5f55\u7684\u5185\u5bb9\u6570\u636e\u53c2\u8003\u76ee\u5f55 CREATE_MAIL_SPOOL=yes <==\u662f\u5426\u4e3b\u52a8\u5e2e\u4f7f\u7528\u8005\u5efa\u7acb\u90ae\u4ef6\u4fe1\u7bb1(mailbox) /etc/login.defs MAIL_DIR /var/spool/mail <==\u7528\u6237\u9ed8\u8ba4\u90ae\u4ef6\u4fe1\u7bb1\u653e\u7f6e\u76ee\u5f55 PASS_MAX_DAYS 99999 <==/etc/shadow \u5185\u7684\u7b2c 5 \u680f\uff0c\u591a\u4e45\u9700\u53d8\u66f4\u5bc6\u7801\u65e5\u6570 PASS_MIN_DAYS 0 PASS_MIN_LEN 5 <==\u5bc6\u7801\u6700\u77ed\u7684\u5b57\u7b26\u957f\u5ea6\uff0c\u5df2\u88ab pam \u6a21\u5757\u53d6\u4ee3\uff0c\u5931\u53bb\u6548\u7528 PASS_WARN_AGE 7 UID_MIN 1000 UID_MAX 60000 SYS_UID_MIN 201 SYS_UID_MAX 999 GID_MIN 1000 GID_MAX 60000 SYS_GID_MIN 201 SYS_GID_MAX 999 CREATE_HOME yes UMASK 077 USERGROUPS_ENAB yes <==\u4f7f\u7528 userdel \u5220\u9664\u65f6\uff0c\u662f\u5426\u4f1a\u5220\u9664\u521d\u59cb\u7fa4\u7ec4 ENCRYPT_METHOD SHA512 passwd passwd [-l] [-u] [--stdin] [-S] \\ > [-n \u65e5\u6570] [-x \u65e5\u6570] [-w \u65e5\u6570] [-i \u65e5\u671f] \u8d26\u53f7 <==root \u529f\u80fd \u9009\u9879\u4e0e\u53c2\u6570\uff1a --stdin \uff1a\u53ef\u4ee5\u900f\u8fc7\u6765\u81ea\u524d\u4e00\u4e2a\u7ba1\u7ebf\u7684\u6570\u636e\uff0c\u4f5c\u4e3a\u5bc6\u7801\u8f93\u5165 -l \uff1a\u662f Lock \u7684\u610f\u601d\uff0c\u4f1a\u5c06 /etc/shadow \u7b2c\u4e8c\u680f\u6700\u524d\u9762\u52a0\u4e0a ! \u4f7f\u5bc6\u7801\u5931\u6548\uff1b -u \uff1a\u4e0e -l \u76f8\u5bf9\uff0c\u662f Unlock \u7684\u610f\u601d\uff01 -S \uff1a\u5217\u51fa\u5bc6\u7801\u76f8\u5173\u53c2\u6570\uff0c\u4ea6\u5373 shadow \u6587\u4ef6\u5185\u7684\u5927\u90e8\u5206\u4fe1\u606f\u3002 -n \uff1a\u540e\u9762\u63a5\u5929\u6570\uff0cshadow \u7684\u7b2c 4 \u5b57\u6bb5\uff0c\u591a\u4e45\u4e0d\u53ef\u4fee\u6539\u5bc6\u7801\u5929\u6570 -x \uff1a\u540e\u9762\u63a5\u5929\u6570\uff0cshadow \u7684\u7b2c 5 \u5b57\u6bb5\uff0c\u591a\u4e45\u5185\u5fc5\u987b\u8981\u66f4\u52a8\u5bc6\u7801 -w \uff1a\u540e\u9762\u63a5\u5929\u6570\uff0cshadow \u7684\u7b2c 6 \u5b57\u6bb5\uff0c\u5bc6\u7801\u8fc7\u671f\u524d\u7684\u8b66\u544a\u5929\u6570 -i \uff1a\u540e\u9762\u63a5\u300e\u65e5\u671f\u300f\uff0cshadow \u7684\u7b2c 7 \u5b57\u6bb5\uff0c\u5bc6\u7801\u5931\u6548\u65e5\u671f chage chage [-ldEImMW] \u8d26\u53f7\u540d \u9009\u9879\u4e0e\u53c2\u6570\uff1a -l \uff1a\u5217\u51fa\u8be5\u8d26\u53f7\u7684\u8be6\u7ec6\u5bc6\u7801\u53c2\u6570\uff1b - d \uff1a\u540e\u9762\u63a5\u65e5\u671f\uff0c\u4fee\u6539 shadow \u7b2c\u4e09\u5b57\u6bb5(\u6700\u8fd1\u4e00\u6b21\u66f4\u6539\u5bc6\u7801\u7684\u65e5\u671f)\uff0c\u683c\u5f0f YYYY-MM-DD -E \uff1a\u540e\u9762\u63a5\u65e5\u671f\uff0c\u4fee\u6539 shadow \u7b2c\u516b\u5b57\u6bb5(\u8d26\u53f7\u5931\u6548\u65e5)\uff0c\u683c\u5f0f YYYY-MM-DD -I \uff1a\u540e\u9762\u63a5\u5929\u6570\uff0c\u4fee\u6539 shadow \u7b2c\u4e03\u5b57\u6bb5(\u5bc6\u7801\u5931\u6548\u65e5\u671f) -m \uff1a\u540e\u9762\u63a5\u5929\u6570\uff0c\u4fee\u6539 shadow \u7b2c\u56db\u5b57\u6bb5(\u5bc6\u7801\u6700\u77ed\u4fdd\u7559\u5929\u6570) -M \uff1a\u540e\u9762\u63a5\u5929\u6570\uff0c\u4fee\u6539 shadow \u7b2c\u4e94\u5b57\u6bb5(\u5bc6\u7801\u591a\u4e45\u9700\u8981\u8fdb\u884c\u53d8\u66f4) -W \uff1a\u540e\u9762\u63a5\u5929\u6570\uff0c\u4fee\u6539 shadow \u7b2c\u516d\u5b57\u6bb5(\u5bc6\u7801\u8fc7\u671f\u524d\u8b66\u544a\u65e5\u671f) usermod usermod \u7684\u9009\u9879\u4e0e useradd \u975e\u5e38\u7c7b\u4f3c\uff01-L \u4e0e -U \uff0c\u4e0e passwd \u7684 -l, -u \u662f\u76f8\u540c\u7684 userdel \u5220\u9664\u7684\u6570\u636e\u6709\uff1a \u7528\u6237\u8d26\u53f7/\u5bc6\u7801\u76f8\u5173\u53c2\u6570\uff1a/etc/passwd, /etc/shadow \u4f7f\u7528\u8005\u7fa4\u7ec4\u76f8\u5173\u53c2\u6570\uff1a/etc/group, /etc/gshadow \u7528\u6237\u4e2a\u4eba\u6587\u4ef6\u6570\u636e\uff1a /home/username, /var/spool/mail/username.. $ userdel [-r] username \u7528\u6237\u529f\u80fd id\uff1a\u67e5\u8be2\u67d0\u4eba\u6216\u81ea\u5df1\u7684\u76f8\u5173 UID/GID \u7b49\u7b49\u7684\u4fe1\u606f finger\uff1a\u53ef\u4ee5\u67e5\u9605\u5f88\u591a\u7528\u6237\u76f8\u5173\u7684 \u4fe1\u606f chfn\uff1achange finger \u7684\u610f\u601d chsh\uff1achange shell \u7684\u7b80\u5199 \u65b0\u589e\u4e0e\u79fb\u9664\u7fa4\u7ec4 groupadd groupadd [-g gid] [-r] \u7ec4\u540d \u9009\u9879\u4e0e\u53c2\u6570\uff1a -g \uff1a\u540e\u9762\u63a5\u67d0\u4e2a\u7279\u5b9a\u7684 GID \uff0c\u7528\u6765\u76f4\u63a5\u7ed9\u4e88\u67d0\u4e2a GID \uff5e -r \uff1a\u5efa\u7acb\u7cfb\u7edf\u7fa4\u7ec4\u5566\uff01\u4e0e /etc/login.defs \u5185\u7684 GID_MIN \u6709\u5173\u3002 groupmod \u8ddf usermod \u7c7b\u4f3c\u7684\uff0c\u8fd9\u4e2a\u6307\u4ee4\u4ec5\u662f\u5728\u8fdb\u884c group \u76f8\u5173\u53c2\u6570\u7684\u4fee\u6539\u800c\u5df2 groupdel groupdel [groupname] gpasswd $ gpasswd groupname [root@study ~] $ gpasswd [-A user1,...] [-M user3,...] groupname $ gpasswd [-rR] groupname \u9009\u9879\u4e0e\u53c2\u6570\uff1a \uff1a\u82e5\u6ca1\u6709\u4efb\u4f55\u53c2\u6570\u65f6\uff0c\u8868\u793a\u7ed9\u4e88 groupname \u4e00\u4e2a\u5bc6\u7801(/etc/gshadow) -A \uff1a\u5c06 groupname \u7684\u4e3b\u63a7\u6743\u4ea4\u7531\u540e\u9762\u7684\u4f7f\u7528\u8005\u7ba1\u7406(\u8be5\u7fa4\u7ec4\u7684\u7ba1\u7406\u5458) -M \uff1a\u5c06\u67d0\u4e9b\u8d26\u53f7\u52a0\u5165\u8fd9\u4e2a\u7fa4\u7ec4\u5f53\u4e2d\uff01 -r \uff1a\u5c06 groupname \u7684\u5bc6\u7801\u79fb\u9664 -R \uff1a\u8ba9 groupname \u7684\u5bc6\u7801\u680f\u5931\u6548 \u7ec6\u90e8\u6743\u9650\u89c4\u5212\uff1aACL getfacl\uff1a\u53d6\u5f97\u67d0\u4e2a\u6587\u4ef6/\u76ee\u5f55\u7684 ACL \u8bbe\u5b9a\u9879\u76ee\uff1b setfacl\uff1a\u8bbe\u5b9a\u67d0\u4e2a\u76ee\u5f55/\u6587\u4ef6\u7684 ACL \u89c4\u8303\u3002 \u300e u:\u8d26\u53f7:\u6743\u9650 \u300f\u8bbe\u5b9a \u7279\u5b9a\u7684\u5355\u4e00\u7fa4\u7ec4\u7684\u6743\u9650\u8bbe\u5b9a\uff1a\u300e g:\u7fa4\u7ec4\u540d:\u6743\u9650 \u300f \u9488\u5bf9\u6709\u6548\u6743\u9650\u8bbe\u5b9a\uff1a\u300e m:\u6743\u9650 \u300f \u9ed8\u8ba4\u6743\u9650\u8bbe\u5b9a\u300e d:[u|g]:[user|group]:\u6743\u9650 \u300f $ setfacl [-bkRd] [{-m|-x} acl \u53c2\u6570] \u76ee\u6807\u6587\u4ef6\u540d \u9009\u9879\u4e0e\u53c2\u6570\uff1a -m \uff1a\u8bbe\u5b9a\u540e\u7eed\u7684 acl \u53c2\u6570\u7ed9\u6587\u4ef6\u4f7f\u7528\uff0c\u4e0d\u53ef\u4e0e -x \u5408\u7528\uff1b -x \uff1a\u5220\u9664\u540e\u7eed\u7684 acl \u53c2\u6570\uff0c\u4e0d\u53ef\u4e0e -m \u5408\u7528\uff1b -b \uff1a\u79fb\u9664\u300e\u6240\u6709\u7684\u300f ACL \u8bbe\u5b9a\u53c2\u6570\uff1b -k \uff1a\u79fb\u9664\u300e\u9884\u8bbe\u7684\u300f ACL \u53c2\u6570\uff0c\u5173\u4e8e\u6240\u8c13\u7684\u300e\u9884\u8bbe\u300f\u53c2\u6570\u4e8e\u540e\u7eed\u8303\u4f8b\u4e2d\u4ecb\u7ecd\uff1b -R \uff1a\u9012\u5f52\u8bbe\u5b9a acl \uff0c\u4ea6\u5373\u5305\u62ec\u6b21\u76ee\u5f55\u90fd\u4f1a\u88ab\u8bbe\u5b9a\u8d77\u6765\uff1b -d \uff1a\u8bbe\u5b9a\u300e\u9884\u8bbe acl \u53c2\u6570\u300f\u7684\u610f\u601d\uff01\u53ea\u5bf9\u76ee\u5f55\u6709\u6548\uff0c\u5728\u8be5\u76ee\u5f55\u65b0\u5efa\u7684\u6570\u636e\u4f1a\u5f15\u7528\u6b64\u9ed8\u8ba4\u503c \u4f7f\u7528\u8005\u8eab\u4efd\u5207\u6362 su sudo visudo \u4e0e /etc/sudoers ....(\u524d\u9762\u7701\u7565).... root ALL=(ALL) ALL <==\u627e\u5230\u8fd9\u4e00\u884c\uff0c\u5927\u7ea6\u5728 98 \u884c\u5de6\u53f3 vbird1 ALL=(ALL) ALL <==\u8fd9\u4e00\u884c\u662f\u4f60\u8981\u65b0\u589e\u7684\uff01 # \u5728\u6700\u5de6\u8fb9\u52a0\u4e0a % \uff0c\u4ee3\u8868\u540e\u9762\u63a5\u7684\u662f\u4e00\u4e2a\u300e\u7fa4\u7ec4\u300f\u4e4b\u610f\uff01\u6539\u5b8c\u8bf7\u50a8\u5b58\u540e\u79bb\u5f00 %wheel ALL=(ALL) ALL <==\u5927\u7ea6\u5728 106 \u884c\u5de6\u53f3\uff0c\u8bf7\u5c06\u8fd9\u884c\u7684 # \u6709\u9650\u5236\u7684\u6307\u4ee4\u64cd\u4f5c myuser1 ALL=(root) /usr/bin/passwd <==\u6700\u540e\u6307\u4ee4\u52a1\u5fc5\u7528\u7edd\u5bf9\u8def\u5f84 # \u900f\u8fc7\u522b\u540d\u5efa\u7f6e visudo User_Alias ADMPW = pro1, pro2, pro3, myuser1, myuser2 Cmnd_Alias ADMPWCOM = !/usr/bin/passwd, /usr/bin/passwd [A-Za-z]*, !/usr/bin/passwd root ADMPW ALL=(root) ADMPWCOM ....(\u5e95\u4e0b\u7701\u7565).... \u7528\u6237\u8baf\u606f\u4f20\u9012 \u67e5\u8be2\u4f7f\u7528\u8005\uff1a w, who, last, lastlog \u4f7f\u7528\u8005\u5bf9\u8c08\uff1a write, mesg, wall \u4f7f\u7528\u8005\u90ae\u4ef6\u4fe1\u7bb1\uff1a mail","title":"\u9e1f\u54e5\u7684Linux\u79c1\u623f\u83dc"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#linux","text":"","title":"\u9e1f\u54e5\u7684Linux\u79c1\u623f\u83dc"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#_1","text":"","title":"\u968f\u8bb0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#_2","text":"\u5e2e\u52a9\u6587\u6863 man: /usr/share/man info: /usr/share/info /usr/share/doc \u7528\u6237\u4e0e\u7528\u6237\u7ec4 \u7528\u6237\u4fe1\u606f\uff1a/etc/passwd\uff1bchown \u5bc6\u7801\uff1a/etc/shadow \u7ec4\u540d\uff1a/etc/group\uff1bchgrp \u6570\u636e \u767b\u5f55\u6570\u636e\uff1a/var/log/wtmp\uff1blast \u8bfb \u8bed\u8a00\uff1a/etc/locale.conf\uff1bLANG\uff1bLC_ALL locate \u6570\u636e\u5e93\uff1a/var/lib/mlocate; /etc/updatedb.conf \u6302\u8f7d\u914d\u7f6e\uff1a/etc/fstab\uff1b/etc/mtab\uff1b/proc/mounts shell \u4fe1\u606f\uff1a/etc/shell \u9a71\u52a8\u7a0b\u5e8f \u6587\u4ef6\u7cfb\u7edf\uff1a/lib/modules/$(uname -r)/kernel/fs/","title":"\u5404\u79cd\u6587\u4ef6"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#_3","text":"-p mkdir -p # \u9012\u5f52\u521b\u5efa\u76ee\u5f55 pwd -P # \u663e\u793a\u771f\u5b9e\u8def\u5f84 cp -p # \u8fde\u540c\u5c5e\u6027\u7684\u590d\u5236 -r cp -r # \u9012\u5f52\u8d1f\u8d23\uff0c\u7528\u4e8e\u76ee\u5f55 rm -r # \u9012\u5f52\u5220\u9664","title":"\u6613\u6df7\u53c2\u6570"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#_4","text":"\u9690\u85cf\u5c5e\u6027\uff1achattr, lsattr \u67e5\u770b\u4e8c\u8fdb\u5236\u6587\u4ef6\uff1aod","title":"\u795e\u5947\u7684\u547d\u4ee4"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#_5","text":"\u67e5\u770b\u6587\u4ef6\u5bf9\u5e94\u7684 inode \u53f7\uff1als -i \u67e5\u8be2 ext \u7cfb\u5217\u8d85\u7ea7\u5757\u4fe1\u606f\uff1adumpe2fs \u67e5\u8be2 xfs \u8d85\u7ea7\u5757\u4fe1\u606f\uff1axfs_info","title":"\u78c1\u76d8\u4e0e\u6587\u4ef6\u7cfb\u7edf\u7ba1\u7406"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#_6","text":"\u663e\u793a\u78c1\u76d8\u5206\u533a\u72b6\u6001\uff1ablkid\uff1blsblk -f\uff1bparted \u5206\u533a\uff1agdisk / fdisk \u683c\u5f0f\u5316\uff1amkfs\uff1bpartprobe -s \u6587\u4ef6\u7cfb\u7edf\u68c0\u9a8c\uff1axfs_repair\uff1bfsck.ext4 \u6302\u8f7d\uff1amount\uff1bumount label\uff0cuuid \u81ea\u5b9a\u4e49\uff1auuidgen\uff1bxfs_admin\uff1btune2fs","title":"\u5206\u533a\u3001\u683c\u5f0f\u5316\u3001\u68c0\u9a8c\u4e0e\u6302\u8f7d"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#_7","text":"\u4fee\u6539 /etc/fstab \u5355\u4eba\u7ef4\u62a4 mount -n -o remount,rw / \u5236\u4f5c\u865a\u62df\u6587\u4ef6\u7cfb\u7edf\uff1a/ect/fstab \u4e2d\u4e0d\u7528 UUID","title":"\u542f\u52a8\u6302\u8f7d"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#swap","text":"mkswap\uff1bswapon\uff1bswapoff","title":"\u521b\u5efa swap"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#_8","text":"","title":"\u6587\u4ef6\u4e0e\u6587\u4ef6\u7cfb\u7edf\u7684\u538b\u7f29\u3001\u6253\u5305\u4e0e\u5907\u4efd"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#_9","text":"tar [-z|-j|-J] [cv] [-f \u5f85\u5efa\u7acb\u7684\u65b0\u6a94\u540d] filename... <==\u6253\u5305\u4e0e\u538b\u7f29 tar [-z|-j|-J] [t] [-f \u65e2\u6709\u7684 tar \u6a94\u540d] <==\u5bdf\u770b\u6a94\u540d tar [-z|-j|-J] [xv] [-f \u65e2\u6709\u7684 tar \u6a94\u540d] [-C \u76ee\u5f55] <==\u89e3\u538b\u7f29","title":"\u6253\u5305\u6307\u4ee4"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#_10","text":"tar \u5907\u4efd XFS \u6587\u4ef6\u7cfb\u7edf\uff1axfsdump\uff1bxfsrestore xfsdump [-L Slabel] [-M M_label] [-l #] [-f \u5907\u4efd\u6863] \u5f85\u5907\u4efd\u8d44\u6599 xfsrestore -I <==\u7528\u6765\u5bdf\u770b\u5907\u4efd\u6587\u4ef6\u8d44\u6599 xfsrestore [-f \u5907\u4efd\u6863] [-L S_label] [-s] \u5f85\u590d\u539f\u76ee\u5f55 <==\u5355\u4e00\u6587\u4ef6\u5168\u7cfb\u7edf\u590d\u539f xfsrestore [-f \u5907\u4efd\u6587\u4ef6] -r \u5f85\u590d\u539f\u76ee\u5f55 <==\u900f\u8fc7\u7d2f\u79ef\u5907\u4efd\u6587\u4ef6\u6765\u590d\u539f \u7cfb\u7edf xfsrestore [-f \u5907\u4efd\u6587\u4ef6] -i \u5f85\u590d\u539f\u76ee\u5f55 <==\u8fdb\u5165\u4e92\u52a8\u6a21\u5f0f dd cpio","title":"\u5907\u4efd"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#vim","text":"DOS \u4e0e Linux \u7684\u65ad\u884c\u5b57\u7b26\uff1ados2unix\uff1bunix2dos \u8bed\u7cfb\u7f16\u7801\u8f6c\u6362\uff1a iconv -f \u539f\u672c\u7f16\u7801 -t \u65b0\u7f16\u7801 filename [-o newfile]","title":"vim"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#bash","text":"","title":"bash"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#_11","text":"","title":"\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#sed","text":"$ sed [-nefr] [\u52a8\u4f5c] \u9009\u9879\u4e0e\u53c2\u6570\uff1a -n \uff1a\u4f7f\u7528\u5b89\u9759(silent)\u6a21\u5f0f\u3002\u5728\u4e00\u822c sed \u7684\u7528\u6cd5\u4e2d\uff0c\u6240\u6709\u6765\u81ea STDIN \u7684\u6570\u636e\u4e00\u822c\u90fd\u4f1a\u88ab\u5217\u51fa\u5230\u5c4f\u5e55\u4e0a\u3002 \u4f46\u5982\u679c\u52a0\u4e0a -n \u53c2\u6570\u540e\uff0c\u5219\u53ea\u6709\u7ecf\u8fc7 sed \u7279\u6b8a\u5904\u7406\u7684\u90a3\u4e00\u884c(\u6216\u8005\u52a8\u4f5c)\u624d\u4f1a\u88ab\u5217\u51fa\u6765\u3002 -e \uff1a\u76f4\u63a5\u5728\u6307\u4ee4\u5217\u6a21\u5f0f\u4e0a\u8fdb\u884c sed \u7684\u52a8\u4f5c\u7f16\u8f91\uff1b -f \uff1a\u76f4\u63a5\u5c06 sed \u7684\u52a8\u4f5c\u5199\u5728\u4e00\u4e2a\u6587\u4ef6\u5185\uff0c -f filename \u5219\u53ef\u4ee5\u6267\u884c filename \u5185\u7684 sed \u52a8\u4f5c\uff1b -r \uff1ased \u7684\u52a8\u4f5c\u652f\u6301\u7684\u662f\u5ef6\u4f38\u578b\u6b63\u89c4\u8868\u793a\u6cd5\u7684\u8bed\u6cd5\u3002(\u9884\u8bbe\u662f\u57fa\u7840\u6b63\u89c4\u8868\u793a\u6cd5\u8bed\u6cd5) -i \uff1a\u76f4\u63a5\u4fee\u6539\u8bfb\u53d6\u7684\u6587\u4ef6\u5185\u5bb9\uff0c\u800c\u4e0d\u662f\u7531\u5c4f\u5e55\u8f93\u51fa\u3002 \u52a8\u4f5c\u8bf4\u660e\uff1a [n1[,n2]]function n1, n2 \uff1a\u4e0d\u89c1\u5f97\u4f1a\u5b58\u5728\uff0c\u4e00\u822c\u4ee3\u8868\u300e\u9009\u62e9\u8fdb\u884c\u52a8\u4f5c\u7684\u884c\u6570\u300f\uff0c\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5982\u679c\u6211\u7684\u52a8\u4f5c\u662f\u9700\u8981\u5728 10 \u5230 20 \u884c\u4e4b\u95f4\u8fdb\u884c\u7684\uff0c\u5219\u300e 10,20[\u52a8\u4f5c\u884c\u4e3a] \u300f function \u6709\u5e95\u4e0b\u8fd9\u4e9b\u549a\u549a\uff1a a \uff1a\u65b0\u589e\uff0c a \u7684\u540e\u9762\u53ef\u4ee5\u63a5\u5b57\u7b26\u4e32\uff0c\u800c\u8fd9\u4e9b\u5b57\u7b26\u4e32\u4f1a\u5728\u65b0\u7684\u4e00\u884c\u51fa\u73b0(\u76ee\u524d\u7684\u4e0b\u4e00\u884c)\uff5e c \uff1a\u53d6\u4ee3\uff0c c \u7684\u540e\u9762\u53ef\u4ee5\u63a5\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e9b\u5b57\u7b26\u4e32\u53ef\u4ee5\u53d6\u4ee3 n1,n2 \u4e4b\u95f4\u7684\u884c\uff01 d \uff1a\u5220\u9664\uff0c\u56e0\u4e3a\u662f\u5220\u9664\u554a\uff0c\u6240\u4ee5 d \u540e\u9762\u901a\u5e38\u4e0d\u63a5\u4efb\u4f55\u549a\u549a\uff1b i \uff1a\u63d2\u5165\uff0c i \u7684\u540e\u9762\u53ef\u4ee5\u63a5\u5b57\u7b26\u4e32\uff0c\u800c\u8fd9\u4e9b\u5b57\u7b26\u4e32\u4f1a\u5728\u65b0\u7684\u4e00\u884c\u51fa\u73b0(\u76ee\u524d\u7684\u4e0a\u4e00\u884c)\uff1b p \uff1a\u6253\u5370\uff0c\u4ea6\u5373\u5c06\u67d0\u4e2a\u9009\u62e9\u7684\u6570\u636e\u5370\u51fa\u3002\u901a\u5e38 p \u4f1a\u4e0e\u53c2\u6570 sed -n \u4e00\u8d77\u8fd0\u4f5c\uff5e s \uff1a\u53d6\u4ee3\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u53d6\u4ee3\u7684\u5de5\u4f5c\u54e9\uff01\u901a\u5e38\u8fd9\u4e2a s \u7684\u52a8\u4f5c\u53ef\u4ee5\u642d\u914d\u6b63\u89c4\u8868\u793a\u6cd5\uff01 \u4f8b\u5982 1,20s/old/new/g \u5c31\u662f\u5566\uff01","title":"sed"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#printf","text":"$ printf '\u6253\u5370\u683c\u5f0f' \u5b9e\u9645\u5185\u5bb9$ printf '\u6253\u5370\u683c\u5f0f' \u5b9e\u9645\u5185\u5bb9 \u9009\u9879\u4e0e\u53c2\u6570\uff1a \u5173\u4e8e\u683c\u5f0f\u65b9\u9762\u7684\u51e0\u4e2a\u7279\u6b8a\u6837\u5f0f\uff1a \\a \u8b66\u544a\u58f0\u97f3\u8f93\u51fa \\b \u9000\u683c\u952e(backspace) \\f \u6e05\u9664\u5c4f\u5e55 (form feed) \\n \u8f93\u51fa\u65b0\u7684\u4e00\u884c \\r \u4ea6\u5373 Enter \u6309\u952e \\t \u6c34\u5e73\u7684 [tab] \u6309\u952e \\v \u5782\u76f4\u7684 [tab] \u6309\u952e \\xNN NN \u4e3a\u4e24\u4f4d\u6570\u7684\u6570\u5b57\uff0c\u53ef\u4ee5\u8f6c\u6362\u6570\u5b57\u6210\u4e3a\u5b57\u7b26\u3002 \u5173\u4e8e C \u7a0b\u5e8f\u8bed\u8a00\u5185\uff0c\u5e38\u89c1\u7684\u53d8\u6570\u683c\u5f0f %ns \u90a3\u4e2a n \u662f\u6570\u5b57\uff0c s \u4ee3\u8868 string \uff0c\u4ea6\u5373\u591a\u5c11\u4e2a\u5b57\u7b26\uff1b %ni \u90a3\u4e2a n \u662f\u6570\u5b57\uff0c i \u4ee3\u8868 integer \uff0c\u4ea6\u5373\u591a\u5c11\u6574\u6570\u5b57\u6570\uff1b %N.nf \u90a3\u4e2a n \u4e0e N \u90fd\u662f\u6570\u5b57\uff0c f \u4ee3\u8868 floating (\u6d6e\u70b9)\uff0c\u5982\u679c\u6709\u5c0f\u6570\u5b57\u6570\uff0c \u5047\u8bbe\u6211\u5171\u8981\u5341\u4e2a\u4f4d\u6570\uff0c\u4f46\u5c0f\u6570\u70b9\u6709\u4e24\u4f4d\uff0c\u5373\u4e3a %10.2f \u5570\uff01","title":"printf"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#awk","text":"$ awk '\u6761\u4ef6\u7c7b\u578b 1{\u52a8\u4f5c 1} \u6761\u4ef6\u7c7b\u578b 2{\u52a8\u4f5c 2} ...' filename \u5904\u7406\u6d41\u7a0b\u662f\uff1a 1. \u8bfb\u5165\u7b2c\u4e00\u884c\uff0c\u5e76\u5c06\u7b2c\u4e00\u884c\u7684\u8d44\u6599\u586b\u5165 $0, $1, $2.... \u7b49\u53d8\u6570\u5f53\u4e2d\uff1b 2. \u4f9d\u636e \"\u6761\u4ef6\u7c7b\u578b\" \u7684\u9650\u5236\uff0c\u5224\u65ad\u662f\u5426\u9700\u8981\u8fdb\u884c\u540e\u9762\u7684 \"\u52a8\u4f5c\"\uff1b 3. \u505a\u5b8c\u6240\u6709\u7684\u52a8\u4f5c\u4e0e\u6761\u4ef6\u7c7b\u578b\uff1b 4. \u82e5\u8fd8\u6709\u540e\u7eed\u7684\u300e\u884c\u300f\u7684\u6570\u636e\uff0c\u5219\u91cd\u590d\u4e0a\u9762 1~3 \u7684\u6b65\u9aa4\uff0c\u76f4\u5230\u6240\u6709\u7684\u6570\u636e\u90fd\u8bfb\u5b8c\u4e3a\u6b62\u3002 \u53d8\u91cf\u540d\u79f0 \u4ee3\u8868\u610f\u4e49 NF \u6bcf\u4e00\u884c ($0) \u62e5\u6709\u7684\u5b57\u6bb5\u603b\u6570 NR \u76ee\u524d awk \u6240\u5904\u7406\u7684\u662f\u300e\u7b2c\u51e0\u884c\u300f\u6570\u636e FS \u76ee\u524d\u7684\u5206\u9694\u5b57\u7b26\uff0c\u9ed8\u8ba4\u662f\u7a7a\u683c\u952e \u6211\u4eec\u53ef\u4ee5\u9884\u5148\u8bbe\u5b9a awk \u7684\u53d8\u91cf\uff1a\u5982 BEGIN {FS=\":\"} pay.txt \u5982\u4e0b\uff0c\u5e76\u8ba1\u7b97\u6bcf\u4e2a\u4eba\u7684\u603b\u989d Name 1st 2nd 3th VBird 23000 24000 25000 DMTsa 21000 20000 23000 Bird2 43000 42000 41000 $ cat pay.txt | \\ > awk 'NR==1{printf \"%10s %10s %10s %10s %10s\\n\",$1,$2,$3,$4,\"Total\" } > NR>=2{total = $2 + $3 + $4 > printf \"%10s %10d %10d %10d %10.2f\\n\", $1, $2, $3, $4, total}'","title":"awk"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#_12","text":"diff $ diff [-bBi] from-file to-file \u9009\u9879\u4e0e\u53c2\u6570\uff1a from-file \uff1a\u4e00\u4e2a\u6863\u540d\uff0c\u4f5c\u4e3a\u539f\u59cb\u6bd4\u5bf9\u6587\u4ef6\u7684\u6863\u540d\uff1b to-file \uff1a\u4e00\u4e2a\u6863\u540d\uff0c\u4f5c\u4e3a\u76ee\u7684\u6bd4\u5bf9\u6587\u4ef6\u7684\u6863\u540d\uff1b \u6ce8\u610f\uff0cfrom-file \u6216 to-file \u53ef\u4ee5 - \u53d6\u4ee3\uff0c\u90a3\u4e2a - \u4ee3\u8868\u300eStandard input\u300f\u4e4b\u610f\u3002 -b \uff1a\u5ffd\u7565\u4e00\u884c\u5f53\u4e2d\uff0c\u4ec5\u6709\u591a\u4e2a\u7a7a\u767d\u7684\u5dee\u5f02(\u4f8b\u5982 \"about me\" \u4e0e \"about me\" \u89c6\u4e3a\u76f8\u540c -B \uff1a\u5ffd\u7565\u7a7a\u767d\u884c\u7684\u5dee\u5f02\u3002 -i \uff1a\u5ffd\u7565\u5927\u5c0f\u5199\u7684\u4e0d\u540c\u3002 $ cp /etc/passwd passwd.old $ cat /etc/passwd | sed -e '4d' -e '6c no six line' > passwd.new \u6bd4\u5bf9 passwd.old \u4e0e passwd.new \u7684\u5dee\u5f02\uff1a $ diff passwd.old passwd.new 4d3 <==\u5de6\u8fb9\u7b2c\u56db\u884c\u88ab\u5220\u9664 (d) \u6389\u4e86\uff0c\u57fa\u51c6\u662f\u53f3\u8fb9\u7684\u7b2c\u4e09\u884c < adm:x:3:4:adm:/var/adm:/sbin/nologin <==\u8fd9\u8fb9\u5217\u51fa\u5de6\u8fb9(<)\u6587\u4ef6\u88ab\u5220\u9664\u7684\u90a3\u4e00\u884c\u5185\u5bb9 6c5 <==\u5de6\u8fb9\u6587\u4ef6\u7684\u7b2c\u516d\u884c\u88ab\u53d6\u4ee3 (c) \u6210\u53f3\u8fb9\u6587\u4ef6\u7684\u7b2c\u4e94\u884c < sync:x:5:0:sync:/sbin:/bin/sync <==\u5de6\u8fb9(<)\u6587\u4ef6\u7b2c\u516d\u884c\u5185\u5bb9 -- > no six line <==\u53f3\u8fb9(>)\u6587\u4ef6\u7b2c\u4e94\u884c\u5185\u5bb9 cmp cmp \u4ee5\u300e\u5b57\u8282\u300f\u4e3a\u5355\u4f4d\u53bb\u6bd4\u5bf9 patch $ diff -Naur passwd.old passwd.new > passwd.patch $ patch -pN < patch_file <==\u66f4\u65b0 $ patch -R -pN < patch_file <==\u8fd8\u539f \u9009\u9879\u4e0e\u53c2\u6570\uff1a -p \uff1a\u540e\u9762\u53ef\u4ee5\u63a5\u300e\u53d6\u6d88\u51e0\u5c42\u76ee\u5f55\u300f\u7684\u610f\u601d\u3002 -R \uff1a\u4ee3\u8868\u8fd8\u539f\uff0c\u5c06\u65b0\u7684\u6587\u4ef6\u8fd8\u539f\u6210\u539f\u6765\u65e7\u7684\u7248\u672c\u3002","title":"\u6587\u4ef6\u6bd4\u5bf9\u5de5\u5177"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#_13","text":"pr \u53c2\u6570\u592a\u591a\uff0c\u76f4\u63a5\u7528","title":"\u6587\u4ef6\u6253\u5370\u51c6\u5907"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#bash-script","text":"","title":"bash script"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#acl","text":"","title":"\u8d26\u53f7\u7ba1\u7406\u4e0e ACL"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#_14","text":"\u8d26\u53f7\u76f8\u5173\u6587\u4ef6\u4e4b\u95f4\u7684 UID/GID \u4e0e\u5bc6\u7801\u76f8\u5173\u6027\u793a\u610f\u56fe /etc/passwd \u8d26\u53f7\u540d\u79f0\uff1a\u5bc6\u7801\uff1aUID\uff1aGID\uff1a\u7528\u6237\u4fe1\u606f\u8bf4\u660e\u680f\uff1a\u5bb6\u76ee\u5f55\uff1aShell /etc/shadow \u8d26\u53f7\u540d\u79f0\uff1a\u5bc6\u7801\uff1a\u6700\u8fd1\u66f4\u52a8\u5bc6\u7801\u7684\u65e5\u671f\uff1a \u5bc6\u7801\u4e0d\u53ef\u88ab\u66f4\u52a8\u7684\u5929\u6570\uff1a \u5bc6\u7801\u9700\u8981\u91cd\u65b0\u53d8\u66f4\u7684\u5929\u6570\uff1a \u5bc6\u7801\u9700\u8981\u53d8\u66f4\u671f\u9650\u524d\u7684\u8b66\u544a\u5929\u6570\uff1a \u5bc6\u7801\u8fc7\u671f\u540e\u7684\u8d26\u53f7\u5bbd\u9650\u65f6\u95f4(\u5bc6\u7801\u5931\u6548\u65e5)\uff1a \u8d26\u53f7\u5931\u6548\u65e5\u671f\uff1a\u4fdd\u7559 /etc/group \u7ec4\u540d\uff1a\u7fa4\u7ec4\u5bc6\u7801\uff1aGID\uff1a\u6b64\u7fa4\u7ec4\u652f\u6301\u7684\u8d26\u53f7\u540d\u79f0 /etc/gshadow \u7ec4\u540d \u5bc6\u7801\u680f\uff0c\u540c\u6837\u7684\uff0c\u5f00\u5934\u4e3a ! \u8868\u793a\u65e0\u5408\u6cd5\u5bc6\u7801\uff0c\u6240\u4ee5\u65e0\u7fa4\u7ec4\u7ba1\u7406\u5458 \u7fa4\u7ec4\u7ba1\u7406\u5458\u7684\u8d26\u53f7 (\u76f8\u5173\u4fe1\u606f\u5728 gpasswd \u4e2d\u4ecb\u7ecd) \u6709\u52a0\u5165\u8be5\u7fa4\u7ec4\u652f\u6301\u7684\u6240\u5c5e\u8d26\u53f7 (\u4e0e /etc/group \u5185\u5bb9\u76f8\u540c\uff01) groups: \u6709\u6548\u4e0e\u652f\u6301\u7fa4\u7ec4\u7684\u89c2\u5bdf\uff1bnewgrp: \u6709\u6548\u7fa4\u7ec4\u7684\u5207\u6362","title":"\u8d26\u53f7\u4e0e\u7fa4\u7ec4"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#_15","text":"","title":"\u8d26\u53f7\u7ba1\u7406"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#_16","text":"usearadd \u5728 /etc/passwd \u91cc\u9762\u5efa\u7acb\u4e00\u884c\u4e0e\u8d26\u53f7\u76f8\u5173\u7684\u6570\u636e\uff0c\u5305\u62ec\u5efa\u7acb UID/GID/\u5bb6\u76ee\u5f55\u7b49\uff1b \u5728 /etc/shadow \u91cc\u9762\u5c06\u6b64\u8d26\u53f7\u7684\u5bc6\u7801\u76f8\u5173\u53c2\u6570\u586b\u5165\uff0c\u4f46\u662f\u5c1a\u672a\u6709\u5bc6\u7801\uff1b \u5728 /etc/group \u91cc\u9762\u52a0\u5165\u4e00\u4e2a\u4e0e\u8d26\u53f7\u540d\u79f0\u4e00\u6a21\u4e00\u6837\u7684\u7ec4\u540d\uff1b \u5728 /home \u5e95\u4e0b\u5efa\u7acb\u4e00\u4e2a\u4e0e\u8d26\u53f7\u540c\u540d\u7684\u76ee\u5f55\u4f5c\u4e3a\u7528\u6237\u5bb6\u76ee\u5f55\uff0c\u4e14\u6743\u9650\u4e3a 700 $ useradd [-u UID] [-g \u521d\u59cb\u7fa4\u7ec4] [-G \u6b21\u8981\u7fa4\u7ec4] [-mM]\\ > [-c \u8bf4\u660e\u680f] [-d \u5bb6\u76ee\u5f55\u7edd\u5bf9\u8def\u5f84] [-s shell] \u4f7f\u7528\u8005\u8d26\u53f7\u540d \u9009\u9879\u4e0e\u53c2\u6570\uff1a -u \uff1a\u540e\u9762\u63a5\u7684\u662f UID \uff0c\u662f\u4e00\u7ec4\u6570\u5b57\u3002\u76f4\u63a5\u6307\u5b9a\u4e00\u4e2a\u7279\u5b9a\u7684 UID \u7ed9\u8fd9\u4e2a\u8d26\u53f7\uff1b -g \uff1a\u540e\u9762\u63a5\u7684\u90a3\u4e2a\u7ec4\u540d\u5c31\u662f\u6211\u4eec\u4e0a\u9762\u63d0\u5230\u7684 initial group \u5566\uff5e \u8be5\u7fa4\u7ec4\u7684 GID \u4f1a\u88ab\u653e\u7f6e\u5230 /etc/passwd \u7684\u7b2c\u56db\u4e2a\u5b57\u6bb5\u5185\u3002 -G \uff1a\u540e\u9762\u63a5\u7684\u7ec4\u540d\u5219\u662f\u8fd9\u4e2a\u8d26\u53f7\u8fd8\u53ef\u4ee5\u52a0\u5165\u7684\u7fa4\u7ec4\u3002 \u8fd9\u4e2a\u9009\u9879\u4e0e\u53c2\u6570\u4f1a\u4fee\u6539 /etc/group \u5185\u7684\u76f8\u5173\u8d44\u6599\u5594\uff01 -M \uff1a\u5f3a\u5236\uff01\u4e0d\u8981\u5efa\u7acb\u7528\u6237\u5bb6\u76ee\u5f55\uff01(\u7cfb\u7edf\u8d26\u53f7\u9ed8\u8ba4\u503c) -m \uff1a\u5f3a\u5236\uff01\u8981\u5efa\u7acb\u7528\u6237\u5bb6\u76ee\u5f55\uff01(\u4e00\u822c\u8d26\u53f7\u9ed8\u8ba4\u503c) -c \uff1a\u8fd9\u4e2a\u5c31\u662f /etc/passwd \u7684\u7b2c\u4e94\u680f\u7684\u8bf4\u660e\u5185\u5bb9\u5566\uff5e\u53ef\u4ee5\u968f\u4fbf\u6211\u4eec\u8bbe\u5b9a\u7684\u5566\uff5e -d \uff1a\u6307\u5b9a\u67d0\u4e2a\u76ee\u5f55\u6210\u4e3a\u5bb6\u76ee\u5f55\uff0c\u800c\u4e0d\u8981\u4f7f\u7528\u9ed8\u8ba4\u503c\u3002\u52a1\u5fc5\u4f7f\u7528\u7edd\u5bf9\u8def\u5f84\uff01 -r \uff1a\u5efa\u7acb\u4e00\u4e2a\u7cfb\u7edf\u7684\u8d26\u53f7\uff0c\u8fd9\u4e2a\u8d26\u53f7\u7684 UID \u4f1a\u6709\u9650\u5236 (\u53c2\u8003 /etc/login.defs) -s \uff1a\u540e\u9762\u63a5\u4e00\u4e2a shell \uff0c\u82e5\u6ca1\u6709\u6307\u5b9a\u5219\u9884\u8bbe\u662f /bin/bash \u7684\u5566\uff5e -e \uff1a\u540e\u9762\u63a5\u4e00\u4e2a\u65e5\u671f\uff0c\u683c\u5f0f\u4e3a\u300eYYYY-MM-DD\u300f\u6b64\u9879\u76ee\u53ef\u5199\u5165 shadow \u7b2c\u516b\u5b57\u6bb5\uff0c \u4ea6\u5373\u8d26\u53f7\u5931\u6548\u65e5\u7684\u8bbe\u5b9a\u9879\u76ee\u5570\uff1b -f \uff1a\u540e\u9762\u63a5 shadow \u7684\u7b2c\u4e03\u5b57\u6bb5\u9879\u76ee\uff0c\u6307\u5b9a\u5bc6\u7801\u662f\u5426\u4f1a\u5931\u6548\u30020 \u4e3a\u7acb\u523b\u5931\u6548\uff0c -1 \u4e3a\u6c38\u8fdc\u4e0d\u5931\u6548(\u5bc6\u7801\u53ea\u4f1a\u8fc7\u671f\u800c\u5f3a\u5236\u4e8e\u767b\u5165\u65f6\u91cd\u65b0\u8bbe\u5b9a\u800c\u5df2\u3002) useradd \u53c2\u8003\u6587\u4ef6 /etc/default/useradd /etc/login.defs /etc/skel/* /etc/default/useradd $ useradd -D GROUP=100 <==\u9884\u8bbe\u7684\u7fa4\u7ec4 HOME=/home <==\u9ed8\u8ba4\u7684\u5bb6\u76ee\u5f55\u6240\u5728\u76ee\u5f55 INACTIVE=-1 <==\u5bc6\u7801\u5931\u6548\u65e5\uff0c\u5728 shadow \u5185\u7684\u7b2c 7 \u680f\uff0c-1 \u6c38\u4e0d\u5931\u6548 EXPIRE= <==\u8d26\u53f7\u5931\u6548\u65e5\uff0c\u5728 shadow \u5185\u7684\u7b2c 8 \u680f SHELL=/bin/bash <==\u9884\u8bbe\u7684 shell SKEL=/etc/skel <==\u7528\u6237\u5bb6\u76ee\u5f55\u7684\u5185\u5bb9\u6570\u636e\u53c2\u8003\u76ee\u5f55 CREATE_MAIL_SPOOL=yes <==\u662f\u5426\u4e3b\u52a8\u5e2e\u4f7f\u7528\u8005\u5efa\u7acb\u90ae\u4ef6\u4fe1\u7bb1(mailbox) /etc/login.defs MAIL_DIR /var/spool/mail <==\u7528\u6237\u9ed8\u8ba4\u90ae\u4ef6\u4fe1\u7bb1\u653e\u7f6e\u76ee\u5f55 PASS_MAX_DAYS 99999 <==/etc/shadow \u5185\u7684\u7b2c 5 \u680f\uff0c\u591a\u4e45\u9700\u53d8\u66f4\u5bc6\u7801\u65e5\u6570 PASS_MIN_DAYS 0 PASS_MIN_LEN 5 <==\u5bc6\u7801\u6700\u77ed\u7684\u5b57\u7b26\u957f\u5ea6\uff0c\u5df2\u88ab pam \u6a21\u5757\u53d6\u4ee3\uff0c\u5931\u53bb\u6548\u7528 PASS_WARN_AGE 7 UID_MIN 1000 UID_MAX 60000 SYS_UID_MIN 201 SYS_UID_MAX 999 GID_MIN 1000 GID_MAX 60000 SYS_GID_MIN 201 SYS_GID_MAX 999 CREATE_HOME yes UMASK 077 USERGROUPS_ENAB yes <==\u4f7f\u7528 userdel \u5220\u9664\u65f6\uff0c\u662f\u5426\u4f1a\u5220\u9664\u521d\u59cb\u7fa4\u7ec4 ENCRYPT_METHOD SHA512 passwd passwd [-l] [-u] [--stdin] [-S] \\ > [-n \u65e5\u6570] [-x \u65e5\u6570] [-w \u65e5\u6570] [-i \u65e5\u671f] \u8d26\u53f7 <==root \u529f\u80fd \u9009\u9879\u4e0e\u53c2\u6570\uff1a --stdin \uff1a\u53ef\u4ee5\u900f\u8fc7\u6765\u81ea\u524d\u4e00\u4e2a\u7ba1\u7ebf\u7684\u6570\u636e\uff0c\u4f5c\u4e3a\u5bc6\u7801\u8f93\u5165 -l \uff1a\u662f Lock \u7684\u610f\u601d\uff0c\u4f1a\u5c06 /etc/shadow \u7b2c\u4e8c\u680f\u6700\u524d\u9762\u52a0\u4e0a ! \u4f7f\u5bc6\u7801\u5931\u6548\uff1b -u \uff1a\u4e0e -l \u76f8\u5bf9\uff0c\u662f Unlock \u7684\u610f\u601d\uff01 -S \uff1a\u5217\u51fa\u5bc6\u7801\u76f8\u5173\u53c2\u6570\uff0c\u4ea6\u5373 shadow \u6587\u4ef6\u5185\u7684\u5927\u90e8\u5206\u4fe1\u606f\u3002 -n \uff1a\u540e\u9762\u63a5\u5929\u6570\uff0cshadow \u7684\u7b2c 4 \u5b57\u6bb5\uff0c\u591a\u4e45\u4e0d\u53ef\u4fee\u6539\u5bc6\u7801\u5929\u6570 -x \uff1a\u540e\u9762\u63a5\u5929\u6570\uff0cshadow \u7684\u7b2c 5 \u5b57\u6bb5\uff0c\u591a\u4e45\u5185\u5fc5\u987b\u8981\u66f4\u52a8\u5bc6\u7801 -w \uff1a\u540e\u9762\u63a5\u5929\u6570\uff0cshadow \u7684\u7b2c 6 \u5b57\u6bb5\uff0c\u5bc6\u7801\u8fc7\u671f\u524d\u7684\u8b66\u544a\u5929\u6570 -i \uff1a\u540e\u9762\u63a5\u300e\u65e5\u671f\u300f\uff0cshadow \u7684\u7b2c 7 \u5b57\u6bb5\uff0c\u5bc6\u7801\u5931\u6548\u65e5\u671f chage chage [-ldEImMW] \u8d26\u53f7\u540d \u9009\u9879\u4e0e\u53c2\u6570\uff1a -l \uff1a\u5217\u51fa\u8be5\u8d26\u53f7\u7684\u8be6\u7ec6\u5bc6\u7801\u53c2\u6570\uff1b - d \uff1a\u540e\u9762\u63a5\u65e5\u671f\uff0c\u4fee\u6539 shadow \u7b2c\u4e09\u5b57\u6bb5(\u6700\u8fd1\u4e00\u6b21\u66f4\u6539\u5bc6\u7801\u7684\u65e5\u671f)\uff0c\u683c\u5f0f YYYY-MM-DD -E \uff1a\u540e\u9762\u63a5\u65e5\u671f\uff0c\u4fee\u6539 shadow \u7b2c\u516b\u5b57\u6bb5(\u8d26\u53f7\u5931\u6548\u65e5)\uff0c\u683c\u5f0f YYYY-MM-DD -I \uff1a\u540e\u9762\u63a5\u5929\u6570\uff0c\u4fee\u6539 shadow \u7b2c\u4e03\u5b57\u6bb5(\u5bc6\u7801\u5931\u6548\u65e5\u671f) -m \uff1a\u540e\u9762\u63a5\u5929\u6570\uff0c\u4fee\u6539 shadow \u7b2c\u56db\u5b57\u6bb5(\u5bc6\u7801\u6700\u77ed\u4fdd\u7559\u5929\u6570) -M \uff1a\u540e\u9762\u63a5\u5929\u6570\uff0c\u4fee\u6539 shadow \u7b2c\u4e94\u5b57\u6bb5(\u5bc6\u7801\u591a\u4e45\u9700\u8981\u8fdb\u884c\u53d8\u66f4) -W \uff1a\u540e\u9762\u63a5\u5929\u6570\uff0c\u4fee\u6539 shadow \u7b2c\u516d\u5b57\u6bb5(\u5bc6\u7801\u8fc7\u671f\u524d\u8b66\u544a\u65e5\u671f) usermod usermod \u7684\u9009\u9879\u4e0e useradd \u975e\u5e38\u7c7b\u4f3c\uff01-L \u4e0e -U \uff0c\u4e0e passwd \u7684 -l, -u \u662f\u76f8\u540c\u7684 userdel \u5220\u9664\u7684\u6570\u636e\u6709\uff1a \u7528\u6237\u8d26\u53f7/\u5bc6\u7801\u76f8\u5173\u53c2\u6570\uff1a/etc/passwd, /etc/shadow \u4f7f\u7528\u8005\u7fa4\u7ec4\u76f8\u5173\u53c2\u6570\uff1a/etc/group, /etc/gshadow \u7528\u6237\u4e2a\u4eba\u6587\u4ef6\u6570\u636e\uff1a /home/username, /var/spool/mail/username.. $ userdel [-r] username","title":"\u65b0\u589e\u4e0e\u79fb\u9664\u4f7f\u7528\u8005,"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#_17","text":"id\uff1a\u67e5\u8be2\u67d0\u4eba\u6216\u81ea\u5df1\u7684\u76f8\u5173 UID/GID \u7b49\u7b49\u7684\u4fe1\u606f finger\uff1a\u53ef\u4ee5\u67e5\u9605\u5f88\u591a\u7528\u6237\u76f8\u5173\u7684 \u4fe1\u606f chfn\uff1achange finger \u7684\u610f\u601d chsh\uff1achange shell \u7684\u7b80\u5199","title":"\u7528\u6237\u529f\u80fd"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#_18","text":"groupadd groupadd [-g gid] [-r] \u7ec4\u540d \u9009\u9879\u4e0e\u53c2\u6570\uff1a -g \uff1a\u540e\u9762\u63a5\u67d0\u4e2a\u7279\u5b9a\u7684 GID \uff0c\u7528\u6765\u76f4\u63a5\u7ed9\u4e88\u67d0\u4e2a GID \uff5e -r \uff1a\u5efa\u7acb\u7cfb\u7edf\u7fa4\u7ec4\u5566\uff01\u4e0e /etc/login.defs \u5185\u7684 GID_MIN \u6709\u5173\u3002 groupmod \u8ddf usermod \u7c7b\u4f3c\u7684\uff0c\u8fd9\u4e2a\u6307\u4ee4\u4ec5\u662f\u5728\u8fdb\u884c group \u76f8\u5173\u53c2\u6570\u7684\u4fee\u6539\u800c\u5df2 groupdel groupdel [groupname] gpasswd $ gpasswd groupname [root@study ~] $ gpasswd [-A user1,...] [-M user3,...] groupname $ gpasswd [-rR] groupname \u9009\u9879\u4e0e\u53c2\u6570\uff1a \uff1a\u82e5\u6ca1\u6709\u4efb\u4f55\u53c2\u6570\u65f6\uff0c\u8868\u793a\u7ed9\u4e88 groupname \u4e00\u4e2a\u5bc6\u7801(/etc/gshadow) -A \uff1a\u5c06 groupname \u7684\u4e3b\u63a7\u6743\u4ea4\u7531\u540e\u9762\u7684\u4f7f\u7528\u8005\u7ba1\u7406(\u8be5\u7fa4\u7ec4\u7684\u7ba1\u7406\u5458) -M \uff1a\u5c06\u67d0\u4e9b\u8d26\u53f7\u52a0\u5165\u8fd9\u4e2a\u7fa4\u7ec4\u5f53\u4e2d\uff01 -r \uff1a\u5c06 groupname \u7684\u5bc6\u7801\u79fb\u9664 -R \uff1a\u8ba9 groupname \u7684\u5bc6\u7801\u680f\u5931\u6548","title":"\u65b0\u589e\u4e0e\u79fb\u9664\u7fa4\u7ec4"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#acl_1","text":"getfacl\uff1a\u53d6\u5f97\u67d0\u4e2a\u6587\u4ef6/\u76ee\u5f55\u7684 ACL \u8bbe\u5b9a\u9879\u76ee\uff1b setfacl\uff1a\u8bbe\u5b9a\u67d0\u4e2a\u76ee\u5f55/\u6587\u4ef6\u7684 ACL \u89c4\u8303\u3002 \u300e u:\u8d26\u53f7:\u6743\u9650 \u300f\u8bbe\u5b9a \u7279\u5b9a\u7684\u5355\u4e00\u7fa4\u7ec4\u7684\u6743\u9650\u8bbe\u5b9a\uff1a\u300e g:\u7fa4\u7ec4\u540d:\u6743\u9650 \u300f \u9488\u5bf9\u6709\u6548\u6743\u9650\u8bbe\u5b9a\uff1a\u300e m:\u6743\u9650 \u300f \u9ed8\u8ba4\u6743\u9650\u8bbe\u5b9a\u300e d:[u|g]:[user|group]:\u6743\u9650 \u300f $ setfacl [-bkRd] [{-m|-x} acl \u53c2\u6570] \u76ee\u6807\u6587\u4ef6\u540d \u9009\u9879\u4e0e\u53c2\u6570\uff1a -m \uff1a\u8bbe\u5b9a\u540e\u7eed\u7684 acl \u53c2\u6570\u7ed9\u6587\u4ef6\u4f7f\u7528\uff0c\u4e0d\u53ef\u4e0e -x \u5408\u7528\uff1b -x \uff1a\u5220\u9664\u540e\u7eed\u7684 acl \u53c2\u6570\uff0c\u4e0d\u53ef\u4e0e -m \u5408\u7528\uff1b -b \uff1a\u79fb\u9664\u300e\u6240\u6709\u7684\u300f ACL \u8bbe\u5b9a\u53c2\u6570\uff1b -k \uff1a\u79fb\u9664\u300e\u9884\u8bbe\u7684\u300f ACL \u53c2\u6570\uff0c\u5173\u4e8e\u6240\u8c13\u7684\u300e\u9884\u8bbe\u300f\u53c2\u6570\u4e8e\u540e\u7eed\u8303\u4f8b\u4e2d\u4ecb\u7ecd\uff1b -R \uff1a\u9012\u5f52\u8bbe\u5b9a acl \uff0c\u4ea6\u5373\u5305\u62ec\u6b21\u76ee\u5f55\u90fd\u4f1a\u88ab\u8bbe\u5b9a\u8d77\u6765\uff1b -d \uff1a\u8bbe\u5b9a\u300e\u9884\u8bbe acl \u53c2\u6570\u300f\u7684\u610f\u601d\uff01\u53ea\u5bf9\u76ee\u5f55\u6709\u6548\uff0c\u5728\u8be5\u76ee\u5f55\u65b0\u5efa\u7684\u6570\u636e\u4f1a\u5f15\u7528\u6b64\u9ed8\u8ba4\u503c","title":"\u7ec6\u90e8\u6743\u9650\u89c4\u5212\uff1aACL"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#_19","text":"su sudo visudo \u4e0e /etc/sudoers ....(\u524d\u9762\u7701\u7565).... root ALL=(ALL) ALL <==\u627e\u5230\u8fd9\u4e00\u884c\uff0c\u5927\u7ea6\u5728 98 \u884c\u5de6\u53f3 vbird1 ALL=(ALL) ALL <==\u8fd9\u4e00\u884c\u662f\u4f60\u8981\u65b0\u589e\u7684\uff01 # \u5728\u6700\u5de6\u8fb9\u52a0\u4e0a % \uff0c\u4ee3\u8868\u540e\u9762\u63a5\u7684\u662f\u4e00\u4e2a\u300e\u7fa4\u7ec4\u300f\u4e4b\u610f\uff01\u6539\u5b8c\u8bf7\u50a8\u5b58\u540e\u79bb\u5f00 %wheel ALL=(ALL) ALL <==\u5927\u7ea6\u5728 106 \u884c\u5de6\u53f3\uff0c\u8bf7\u5c06\u8fd9\u884c\u7684 # \u6709\u9650\u5236\u7684\u6307\u4ee4\u64cd\u4f5c myuser1 ALL=(root) /usr/bin/passwd <==\u6700\u540e\u6307\u4ee4\u52a1\u5fc5\u7528\u7edd\u5bf9\u8def\u5f84 # \u900f\u8fc7\u522b\u540d\u5efa\u7f6e visudo User_Alias ADMPW = pro1, pro2, pro3, myuser1, myuser2 Cmnd_Alias ADMPWCOM = !/usr/bin/passwd, /usr/bin/passwd [A-Za-z]*, !/usr/bin/passwd root ADMPW ALL=(root) ADMPWCOM ....(\u5e95\u4e0b\u7701\u7565)....","title":"\u4f7f\u7528\u8005\u8eab\u4efd\u5207\u6362"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/#_20","text":"\u67e5\u8be2\u4f7f\u7528\u8005\uff1a w, who, last, lastlog \u4f7f\u7528\u8005\u5bf9\u8c08\uff1a write, mesg, wall \u4f7f\u7528\u8005\u90ae\u4ef6\u4fe1\u7bb1\uff1a mail","title":"\u7528\u6237\u8baf\u606f\u4f20\u9012"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/detail/","text":"detail probe_memory \u63a2\u6d4b\u540e\u7ed3\u679c e820map: memory: 0009fc00, [00000000, 0009fbff], type = 1. memory: 00000400, [0009fc00, 0009ffff], type = 2. memory: 00010000, [000f0000, 000fffff], type = 2. memory: 07ee0000, [00100000, 07fdffff], type = 1. memory: 00020000, [07fe0000, 07ffffff], type = 2. memory: 00040000, [fffc0000, ffffffff], type = 2. \u542f\u52a8\u9875\u673a\u5236 \u548cgdt\u4e0eidt\u4e0d\u540c\uff0cpdt\u7684\u9996\u5730\u5740\u4fdd\u5b58\u5728cr3\u4e2d\uff0c\u4f7f\u7528movl\u52a0\u8f7d\uff0c\u800cgdt\u4e0eidt\u5206\u522b\u4f7f\u7528lgdt\u4e0elidt\u52a0\u8f7d\u5230gdtr\u4e0eidtr\u4e2d\u3002\u9875\u673a\u5236\u7684\u542f\u52a8\u5bf9\u5e94cr0\u7684bit31\uff0c\u6bb5\u673a\u5236\u662fbit0\u3002 \u9875\u673a\u5236\u542f\u7528\u524d\uff0c\u64cd\u4f5c\u7cfb\u7edf\u8fd0\u884c\u5728\u4f4e\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u6240\u4ee5\u9875\u673a\u5236\u542f\u7528\u540e\u8981\u4fdd\u6301\u4f4e\u865a\u62df\u5730\u5740\u7684\u5bf9\u7b49\u6620\u5c04\uff0c\u540c\u65f6\u4e5f\u8981\u5c06\u9ad8\u865a\u62df\u5730\u5740\u6620\u5c04\u5230\u4f4e\u7269\u7406\u5730\u5740\uff0c\u5728\u8df3\u8f6c\u5230\u9ad8\u865a\u62df\u5730\u5740\u540e\u5c31\u53ef\u4ee5\u53d6\u6d88\u5bf9\u7b49\u6620\u5c04\u4e86\u3002 \u542f\u52a8\u9875\u673a\u5236\u540e\uff0c\u6620\u5c04\u5173\u7cfb\u4e3a\uff1a \u5176\u4e2d 0xc00000 \u6709\u8bef\uff0c\u5e94\u4e3a 0xc0000000 \u3002 page_init \u6700\u5927\u7269\u7406\u5730\u5740\u4e3a maxpa \uff0c\u4ece end \u5f00\u59cb\u521d\u59cb\u5316 pages \uff08 maxpa/PGSIZE \u4e2a Page \u7684 \u6570\u7ec4\uff09 freemem \u6307\u5411 pages \u7ed3\u675f\u7684\u540e\u7684\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u7269\u7406\u5185\u5b58\uff0c\u5bf9\u6bcf\u4e2a\u5927\u4e8e freemem \u7684\u7a7a\u95f2\u5730\u5740\u5757\u8c03\u7528 init_memmap \u4e0b\u56fe\u4e3a\u6267\u884c page_init() \u540e\u7684\u7269\u7406\u7a7a\u95f4\u3002\u5171128.87M\uff0c struct Page \u4e00\u517132736\u4e2a, \u7cfb\u7edf\u5360\u7528443\u4e2a\u3002 mem_end ---------> +---------------------------------+ 0x07fe0000 | Empty Memory (*) | freemem_begin ----> +---------------------------------+ 0x001bb000 pages_end --------> +---------------------------------+ 0x001bad80 | pages for free_mem | freepages_begin --> +---------------------------------+ 0x0011d29c | pages for kern + pages_begin ------> +---------------------------------+ 0x0011b000 end --------------> +---------------------------------+ 0x0011af28 | ucore bss | edata ------------> +---------------------------------+ 0x0011a000 | ucore data | boot_pgdir -------> + ------------------------------- + 0x0015ca00 | | etext ------------> +---------------------------------+ 0x00105a94 | | entry-------------> +--- ----+ 0x00100000 | ucore text | | | | | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \u81ea\u6620\u5c04\u673a\u5236 \u76f8\u5e94\u8bed\u53e5\u4e3a\uff1a boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W \uff0c\u5176\u4e2d VPT=0xFAC00000 \u5f53kern\u865a\u62df\u5730\u5740\u6269\u5c55\u5230\u6700\u5927\u65f6\uff0cpdt\u4e2d 0xc00>>2 =768\u5230 0xf7f>>2 =991\u9879\u88ab\u586b\u5145\u3002\u7531\u4e8e\u591a\u4e2a\u865a\u62df\u5730\u5740\u53ef\u4ee5\u5bf9\u5e94\u4e00\u4e2a\u7269\u7406\u5730\u5740\uff0c\u9009\u53d6\u7b2c (VPT=0xfac<<20)>>22 =1003\u9879\u8868\u793apdt\u53e6\u4e00\u4e2a\u865a\u62df\u5730\u5740\uff0c\u5373\u4e3avpd= {VPT>>22, VPT>>12, 12{1b'0}} \uff0c\u8fd9\u662f\u4e00\u79cd\u81ea\u6620\u5c04\uff0c\u628apdt\u672c\u8eab\u6620\u5c04\u4e3a\u4e00\u4e2apt\u4e0e\u4e00\u4e2a\u7269\u7406\u9875\u3002\u540c\u7406\u9875\u76ee\u5f55\u8868\u4e2d\u7b2ci\u4e2a\u9875\u8868\u7684\u865a\u62df\u5730\u5740\u5c31\u4e3avpt_i= {VPT>>22, (10-i\u7684\u4f4d\u6570){1b'0}, {i}, 12{1b'0}} \u3002 \u865a\u62df\u5730\u5740\u6269\u5c55\u5230\u6700\u5927\u540e\uff0c\u7ecf print_pgdir \u6253\u5370\u4e3a\uff1a -------------------- BEGIN -------------------- PDE(0e0) c0000000-f8000000 38000000 urw |-- PTE(38000) c0000000-f8000000 38000000 -rw PDE(001) fac00000-fb000000 00400000 -rw |-- PTE(000e0) faf00000-fafe0000 000e0000 urw |-- PTE(00001) fafeb000-fafec000 00001000 -rw --------------------- END --------------------- boot_map_segment \u5c06 la ~ la + size \u6620\u5c04\u5230 pa ~ pa + size \u5bf9\u4e8e\u6bcf\u4e2a \u6574\u9664 PGSIZE \u7684 la \uff0c\u8c03\u7528 get_pte \u83b7\u53d6\u5176 pte \uff0c\u4ee4\u5176 pte \u4e3a pa | PTE_P | perm \u7a7a\u95f2\u7a7a\u95f4\u5f00\u59cb\u4e8e0x001bb000\u5904\uff0c\u9875\u8868\u5171\u5360 KMEMSIZE / 4M * 4K = 0xe0000 \uff0c\u5373\u521d\u59cb\u5316\u65f6\u7ed3\u675f\u4e8e 0x0029b000 \u5904\u5728 0~4M\u7a7a\u95f4\u5185\uff0c\u5982\u4e0b\u56fe\uff0c\u6240\u4ee5 pte \u7528\u865a\u62df\u5730\u5740\u66f4\u6539\u3002 mem_end ---------> +---------------------------------+ 0x07fe0000 | Empty Memory (*) | page_table_end ---> +---------------------------------+ 0x0029b000 | page table | page_table_begin -> +---------------------------------+ 0x001bb000 gdt_init gdt_init \u4e2d\u91cd\u65b0\u5206\u6bb5\uff0c\u589e\u52a0 TSS \u6bb5\uff0c\u5c06\u5185\u6838\u7a7a\u95f4\u548c\u7528\u6237\u7a7a\u95f4\u5206\u5f00\u3002 TTS \u4e2d\u7684 ess0 \u548c esp0 \u52a0\u8f7d\u5185\u6838\u6808\u5730\u5740\uff08\u5b9a\u4e49\u5728 entry.S \u4e2d\uff09\uff0c\u5927\u5c0f\u4e3a 2 \u9875\u3002 ltr\u662f\u5c06gdt\u4e2dtss\u63cf\u8ff0\u7b26\u7d22\u5f15\u503c\u52a0\u8f7d\u5230tr\u4e2d\u3002 idt_init \u5171256\u4e2a\u4e2d\u65ad\u5411\u91cf\uff0c[32, 255]\u53ef\u7531\u64cd\u4f5c\u7cfb\u7edf\u5b9a\u4e49\u3002\u5176\u5730\u5740\u4fdd\u5b58\u5728 __vectors \u4e2d\uff0c\u9700\u8981\u5c06\u5176\u52a0\u8f7d\u5230IDT\u4e2d\u53bb\uff0cIDT\u5305\u542b3\u79cd\u7c7b\u578b\u7684Descriptor\uff1a Task-gate descriptor \uff08\u8fd9\u91cc\u6ca1\u6709\u4f7f\u7528\uff09 Interrupt-gate descriptor \uff08\u4e2d\u65ad\u65b9\u5f0f\u7528\u5230\uff0cInterrupt\u4f1a\u88abCPU\u81ea\u52a8\u7981\u6b62\uff09 Trap-gate descriptor\uff08\u7cfb\u7edf\u8c03\u7528\u7528\u5230\uff0cCPU\u4e0d\u6539\u53d8\u4e2d\u65ad\uff09 \u8bbf\u95ee\u4e00\u4e2a\u95e8\u7279\u6743\u7ea7\u68c0\u6d4b\uff1aCPL<=DPL\uff08\u95e8\uff09\u4e14CPL>=DPL\uff08\u6bb5\uff09\uff0cCPL>DPL\uff08\u6bb5\uff09\u6ee1\u8db3\u4e86\u7528\u6237\u6001\u5230\u7cfb\u7edf\u6001\u7684\u8df3\u8f6c\u3002\u6240\u6709IDT\u9879\u4e2d\u53ea\u6709 idt[T_SWITCH_TOK=121] \uff08\u5bf9\u5e94\u7cfb\u7edf\u8c03\u7528\uff09\u4e2d\u7684DPL\u4e3a DPL_USER=3 \uff0c\u5176\u4ed6\u7684\u4e3a DPL_KERNEL=0 \u3002\u800c\u95e8\u4e2d\u9009\u62e9\u5b50\u4f4d\u6570\u4e3a16\u4f4d\uff0c\u5b9e\u9645\u53ea\u7528\u4e86\u9ad813\u4f4d\uff0c\u4f4e3\u4f4d\u4e3a0\u3002 \u4e2d\u65ad\u5904\u7406\u65f6\uff1a - \u7531\u786c\u4ef6\u4fdd\u5b58\u5b8c\u5bf9\u5e94\u7684\u503c\u540e\uff0c\u591a\u6570\u4e2d\u65ad\u5747\u538b\u51650\u4ee3\u8868error_code\uff0c\u4ee5\u53ca\u76f8\u5e94\u7684\u4e2d\u65ad\u53f7\uff0c\u67d0\u4e9b\u4e2d\u65ad\u7684error_code\u7531\u786c\u4ef6\u538b\u5165\uff0c\u5982 vector8 \u5230 vector14 \u3002 - \u670d\u52a1\u4f8b\u7a0b\u53c2\u6570\u4fdd\u5b58\u5728 trapframe \u4e2d\uff0c\u5176\u4e2d pushal \u538b\u6808\u7684\u987a\u5e8f\u4e3a\uff1aeax\uff0cecx\uff0cedx\uff0cebx\uff0coesp\uff0cebp\uff0cebp\uff0cesi\uff0cedi","title":"detail"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/detail/#detail","text":"","title":"detail"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/detail/#probe_memory","text":"\u63a2\u6d4b\u540e\u7ed3\u679c e820map: memory: 0009fc00, [00000000, 0009fbff], type = 1. memory: 00000400, [0009fc00, 0009ffff], type = 2. memory: 00010000, [000f0000, 000fffff], type = 2. memory: 07ee0000, [00100000, 07fdffff], type = 1. memory: 00020000, [07fe0000, 07ffffff], type = 2. memory: 00040000, [fffc0000, ffffffff], type = 2.","title":"probe_memory"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/detail/#_1","text":"\u548cgdt\u4e0eidt\u4e0d\u540c\uff0cpdt\u7684\u9996\u5730\u5740\u4fdd\u5b58\u5728cr3\u4e2d\uff0c\u4f7f\u7528movl\u52a0\u8f7d\uff0c\u800cgdt\u4e0eidt\u5206\u522b\u4f7f\u7528lgdt\u4e0elidt\u52a0\u8f7d\u5230gdtr\u4e0eidtr\u4e2d\u3002\u9875\u673a\u5236\u7684\u542f\u52a8\u5bf9\u5e94cr0\u7684bit31\uff0c\u6bb5\u673a\u5236\u662fbit0\u3002 \u9875\u673a\u5236\u542f\u7528\u524d\uff0c\u64cd\u4f5c\u7cfb\u7edf\u8fd0\u884c\u5728\u4f4e\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u6240\u4ee5\u9875\u673a\u5236\u542f\u7528\u540e\u8981\u4fdd\u6301\u4f4e\u865a\u62df\u5730\u5740\u7684\u5bf9\u7b49\u6620\u5c04\uff0c\u540c\u65f6\u4e5f\u8981\u5c06\u9ad8\u865a\u62df\u5730\u5740\u6620\u5c04\u5230\u4f4e\u7269\u7406\u5730\u5740\uff0c\u5728\u8df3\u8f6c\u5230\u9ad8\u865a\u62df\u5730\u5740\u540e\u5c31\u53ef\u4ee5\u53d6\u6d88\u5bf9\u7b49\u6620\u5c04\u4e86\u3002 \u542f\u52a8\u9875\u673a\u5236\u540e\uff0c\u6620\u5c04\u5173\u7cfb\u4e3a\uff1a \u5176\u4e2d 0xc00000 \u6709\u8bef\uff0c\u5e94\u4e3a 0xc0000000 \u3002","title":"\u542f\u52a8\u9875\u673a\u5236"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/detail/#page_init","text":"\u6700\u5927\u7269\u7406\u5730\u5740\u4e3a maxpa \uff0c\u4ece end \u5f00\u59cb\u521d\u59cb\u5316 pages \uff08 maxpa/PGSIZE \u4e2a Page \u7684 \u6570\u7ec4\uff09 freemem \u6307\u5411 pages \u7ed3\u675f\u7684\u540e\u7684\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u7269\u7406\u5185\u5b58\uff0c\u5bf9\u6bcf\u4e2a\u5927\u4e8e freemem \u7684\u7a7a\u95f2\u5730\u5740\u5757\u8c03\u7528 init_memmap \u4e0b\u56fe\u4e3a\u6267\u884c page_init() \u540e\u7684\u7269\u7406\u7a7a\u95f4\u3002\u5171128.87M\uff0c struct Page \u4e00\u517132736\u4e2a, \u7cfb\u7edf\u5360\u7528443\u4e2a\u3002 mem_end ---------> +---------------------------------+ 0x07fe0000 | Empty Memory (*) | freemem_begin ----> +---------------------------------+ 0x001bb000 pages_end --------> +---------------------------------+ 0x001bad80 | pages for free_mem | freepages_begin --> +---------------------------------+ 0x0011d29c | pages for kern + pages_begin ------> +---------------------------------+ 0x0011b000 end --------------> +---------------------------------+ 0x0011af28 | ucore bss | edata ------------> +---------------------------------+ 0x0011a000 | ucore data | boot_pgdir -------> + ------------------------------- + 0x0015ca00 | | etext ------------> +---------------------------------+ 0x00105a94 | | entry-------------> +--- ----+ 0x00100000 | ucore text | | | | | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","title":"page_init"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/detail/#_2","text":"\u76f8\u5e94\u8bed\u53e5\u4e3a\uff1a boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W \uff0c\u5176\u4e2d VPT=0xFAC00000 \u5f53kern\u865a\u62df\u5730\u5740\u6269\u5c55\u5230\u6700\u5927\u65f6\uff0cpdt\u4e2d 0xc00>>2 =768\u5230 0xf7f>>2 =991\u9879\u88ab\u586b\u5145\u3002\u7531\u4e8e\u591a\u4e2a\u865a\u62df\u5730\u5740\u53ef\u4ee5\u5bf9\u5e94\u4e00\u4e2a\u7269\u7406\u5730\u5740\uff0c\u9009\u53d6\u7b2c (VPT=0xfac<<20)>>22 =1003\u9879\u8868\u793apdt\u53e6\u4e00\u4e2a\u865a\u62df\u5730\u5740\uff0c\u5373\u4e3avpd= {VPT>>22, VPT>>12, 12{1b'0}} \uff0c\u8fd9\u662f\u4e00\u79cd\u81ea\u6620\u5c04\uff0c\u628apdt\u672c\u8eab\u6620\u5c04\u4e3a\u4e00\u4e2apt\u4e0e\u4e00\u4e2a\u7269\u7406\u9875\u3002\u540c\u7406\u9875\u76ee\u5f55\u8868\u4e2d\u7b2ci\u4e2a\u9875\u8868\u7684\u865a\u62df\u5730\u5740\u5c31\u4e3avpt_i= {VPT>>22, (10-i\u7684\u4f4d\u6570){1b'0}, {i}, 12{1b'0}} \u3002 \u865a\u62df\u5730\u5740\u6269\u5c55\u5230\u6700\u5927\u540e\uff0c\u7ecf print_pgdir \u6253\u5370\u4e3a\uff1a -------------------- BEGIN -------------------- PDE(0e0) c0000000-f8000000 38000000 urw |-- PTE(38000) c0000000-f8000000 38000000 -rw PDE(001) fac00000-fb000000 00400000 -rw |-- PTE(000e0) faf00000-fafe0000 000e0000 urw |-- PTE(00001) fafeb000-fafec000 00001000 -rw --------------------- END ---------------------","title":"\u81ea\u6620\u5c04\u673a\u5236"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/detail/#boot_map_segment","text":"\u5c06 la ~ la + size \u6620\u5c04\u5230 pa ~ pa + size \u5bf9\u4e8e\u6bcf\u4e2a \u6574\u9664 PGSIZE \u7684 la \uff0c\u8c03\u7528 get_pte \u83b7\u53d6\u5176 pte \uff0c\u4ee4\u5176 pte \u4e3a pa | PTE_P | perm \u7a7a\u95f2\u7a7a\u95f4\u5f00\u59cb\u4e8e0x001bb000\u5904\uff0c\u9875\u8868\u5171\u5360 KMEMSIZE / 4M * 4K = 0xe0000 \uff0c\u5373\u521d\u59cb\u5316\u65f6\u7ed3\u675f\u4e8e 0x0029b000 \u5904\u5728 0~4M\u7a7a\u95f4\u5185\uff0c\u5982\u4e0b\u56fe\uff0c\u6240\u4ee5 pte \u7528\u865a\u62df\u5730\u5740\u66f4\u6539\u3002 mem_end ---------> +---------------------------------+ 0x07fe0000 | Empty Memory (*) | page_table_end ---> +---------------------------------+ 0x0029b000 | page table | page_table_begin -> +---------------------------------+ 0x001bb000","title":"boot_map_segment"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/detail/#gdt_init","text":"gdt_init \u4e2d\u91cd\u65b0\u5206\u6bb5\uff0c\u589e\u52a0 TSS \u6bb5\uff0c\u5c06\u5185\u6838\u7a7a\u95f4\u548c\u7528\u6237\u7a7a\u95f4\u5206\u5f00\u3002 TTS \u4e2d\u7684 ess0 \u548c esp0 \u52a0\u8f7d\u5185\u6838\u6808\u5730\u5740\uff08\u5b9a\u4e49\u5728 entry.S \u4e2d\uff09\uff0c\u5927\u5c0f\u4e3a 2 \u9875\u3002 ltr\u662f\u5c06gdt\u4e2dtss\u63cf\u8ff0\u7b26\u7d22\u5f15\u503c\u52a0\u8f7d\u5230tr\u4e2d\u3002","title":"gdt_init"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/detail/#idt_init","text":"\u5171256\u4e2a\u4e2d\u65ad\u5411\u91cf\uff0c[32, 255]\u53ef\u7531\u64cd\u4f5c\u7cfb\u7edf\u5b9a\u4e49\u3002\u5176\u5730\u5740\u4fdd\u5b58\u5728 __vectors \u4e2d\uff0c\u9700\u8981\u5c06\u5176\u52a0\u8f7d\u5230IDT\u4e2d\u53bb\uff0cIDT\u5305\u542b3\u79cd\u7c7b\u578b\u7684Descriptor\uff1a Task-gate descriptor \uff08\u8fd9\u91cc\u6ca1\u6709\u4f7f\u7528\uff09 Interrupt-gate descriptor \uff08\u4e2d\u65ad\u65b9\u5f0f\u7528\u5230\uff0cInterrupt\u4f1a\u88abCPU\u81ea\u52a8\u7981\u6b62\uff09 Trap-gate descriptor\uff08\u7cfb\u7edf\u8c03\u7528\u7528\u5230\uff0cCPU\u4e0d\u6539\u53d8\u4e2d\u65ad\uff09 \u8bbf\u95ee\u4e00\u4e2a\u95e8\u7279\u6743\u7ea7\u68c0\u6d4b\uff1aCPL<=DPL\uff08\u95e8\uff09\u4e14CPL>=DPL\uff08\u6bb5\uff09\uff0cCPL>DPL\uff08\u6bb5\uff09\u6ee1\u8db3\u4e86\u7528\u6237\u6001\u5230\u7cfb\u7edf\u6001\u7684\u8df3\u8f6c\u3002\u6240\u6709IDT\u9879\u4e2d\u53ea\u6709 idt[T_SWITCH_TOK=121] \uff08\u5bf9\u5e94\u7cfb\u7edf\u8c03\u7528\uff09\u4e2d\u7684DPL\u4e3a DPL_USER=3 \uff0c\u5176\u4ed6\u7684\u4e3a DPL_KERNEL=0 \u3002\u800c\u95e8\u4e2d\u9009\u62e9\u5b50\u4f4d\u6570\u4e3a16\u4f4d\uff0c\u5b9e\u9645\u53ea\u7528\u4e86\u9ad813\u4f4d\uff0c\u4f4e3\u4f4d\u4e3a0\u3002 \u4e2d\u65ad\u5904\u7406\u65f6\uff1a - \u7531\u786c\u4ef6\u4fdd\u5b58\u5b8c\u5bf9\u5e94\u7684\u503c\u540e\uff0c\u591a\u6570\u4e2d\u65ad\u5747\u538b\u51650\u4ee3\u8868error_code\uff0c\u4ee5\u53ca\u76f8\u5e94\u7684\u4e2d\u65ad\u53f7\uff0c\u67d0\u4e9b\u4e2d\u65ad\u7684error_code\u7531\u786c\u4ef6\u538b\u5165\uff0c\u5982 vector8 \u5230 vector14 \u3002 - \u670d\u52a1\u4f8b\u7a0b\u53c2\u6570\u4fdd\u5b58\u5728 trapframe \u4e2d\uff0c\u5176\u4e2d pushal \u538b\u6808\u7684\u987a\u5e8f\u4e3a\uff1aeax\uff0cecx\uff0cedx\uff0cebx\uff0coesp\uff0cebp\uff0cebp\uff0cesi\uff0cedi","title":"idt_init"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/struct/","text":"struct e820map #define E820MAX 20 // number of entries in E820MAP #define E820_ARM 1 // address range memory #define E820_ARR 2 // address range reserved struct e820map { int nr_map; struct { uint64_t addr; uint64_t size; uint32_t type; } __attribute__((packed)) map[E820MAX]; }; default_pmm_manager const struct pmm_manager default_pmm_manager = { .name = \"default_pmm_manager\", .init = default_init, .init_memmap = default_init_memmap, .alloc_pages = default_alloc_pages, .free_pages = default_free_pages, .nr_free_pages = default_nr_free_pages, .check = default_check, }; free_area_t typedef struct { list_entry_t free_list; // the list header unsigned int nr_free; // # of free pages in this free list } free_area_t; Page /* * * struct Page - Page descriptor structures. Each Page describes one * physical page. In kern/mm/pmm.h, you can find lots of useful functions * that convert Page to other data types, such as phyical address. * */ struct Page { int ref; // page frame's reference counter uint32_t flags; // array of flags that describe the status of the page frame unsigned int property; // used in buddy system, stores the order (the X in 2^X) of the continuous memory block int zone_num; // used in buddy system, the No. of zone which the page belongs to list_entry_t page_link; // free list link list_entry_t pra_page_link; // used for pra (page replace algorithm) uintptr_t pra_vaddr; // used for pra (page replace algorithm) }; \u6bb5\u9875\u6620\u5c04\u673a\u5236 cr3, pde, pte R/W: 1 if this page is writable U/S: 1 if this page is accessible in ring 3 A: 1 if this page has been accessed \u6bb5\u9009\u62e9\u7b26 \u5728CS\u4e2d\uff0cRPL\u4e3aCPL \u6bb5\u63cf\u8ff0\u7b26 \u95e8\u63cf\u8ff0\u7b26 TSS TTS \u6bb5\u63cf\u8ff0\u7b26 \u7279\u6743\u7ea7\u5207\u6362 3 \u5411 0 \u8f6c\u6362\u8981\u5411\u6808\u4e2d\u538b\u5165 SS\uff0cesp","title":"Struct"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/struct/#struct-e820map","text":"#define E820MAX 20 // number of entries in E820MAP #define E820_ARM 1 // address range memory #define E820_ARR 2 // address range reserved struct e820map { int nr_map; struct { uint64_t addr; uint64_t size; uint32_t type; } __attribute__((packed)) map[E820MAX]; };","title":"struct e820map"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/struct/#default_pmm_manager","text":"const struct pmm_manager default_pmm_manager = { .name = \"default_pmm_manager\", .init = default_init, .init_memmap = default_init_memmap, .alloc_pages = default_alloc_pages, .free_pages = default_free_pages, .nr_free_pages = default_nr_free_pages, .check = default_check, };","title":"default_pmm_manager"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/struct/#free_area_t","text":"typedef struct { list_entry_t free_list; // the list header unsigned int nr_free; // # of free pages in this free list } free_area_t;","title":"free_area_t"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/struct/#page","text":"/* * * struct Page - Page descriptor structures. Each Page describes one * physical page. In kern/mm/pmm.h, you can find lots of useful functions * that convert Page to other data types, such as phyical address. * */ struct Page { int ref; // page frame's reference counter uint32_t flags; // array of flags that describe the status of the page frame unsigned int property; // used in buddy system, stores the order (the X in 2^X) of the continuous memory block int zone_num; // used in buddy system, the No. of zone which the page belongs to list_entry_t page_link; // free list link list_entry_t pra_page_link; // used for pra (page replace algorithm) uintptr_t pra_vaddr; // used for pra (page replace algorithm) };","title":"Page"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/struct/#_1","text":"","title":"\u6bb5\u9875\u6620\u5c04\u673a\u5236"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/struct/#cr3-pde-pte","text":"R/W: 1 if this page is writable U/S: 1 if this page is accessible in ring 3 A: 1 if this page has been accessed \u6bb5\u9009\u62e9\u7b26 \u5728CS\u4e2d\uff0cRPL\u4e3aCPL \u6bb5\u63cf\u8ff0\u7b26 \u95e8\u63cf\u8ff0\u7b26","title":"cr3, pde, pte"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/struct/#tss","text":"TTS \u6bb5\u63cf\u8ff0\u7b26","title":"TSS"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/struct/#_2","text":"3 \u5411 0 \u8f6c\u6362\u8981\u5411\u6808\u4e2d\u538b\u5165 SS\uff0cesp","title":"\u7279\u6743\u7ea7\u5207\u6362"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ucore/","text":"UCore \u6d41\u7a0b boot CPU\u4e0a\u7535 \u7b2c\u4e00\u6761\u6307\u4ee4\uff1a0xfffffff0 JMP F000:E05B # \u4ece\u6700\u9ad864K \u8df3\u56de 1M\u7a7a\u95f4\u7684\u6700\u9ad864K CS.Base->0x000f0000 \u7b2c\u4e8c\u6761\u6307\u4ee4\uff1a0x000fe05b BIOS \u6307\u4ee4 BIOS \u786c\u4ef6\u81ea\u68c0\u548c\u521d\u59cb\u5316 \u9009\u62e9\u4e00\u4e2a\u542f\u52a8\u8bbe\u5907\uff08\u4f8b\u5982\u8f6f\u76d8\u3001\u786c\u76d8\u3001\u5149\u76d8\u7b49\uff09\uff0c\u8bfb\u53d6\u8be5\u8bbe\u5907\u7684\u7b2c\u4e00\u6247\u533a \u5373\u4e3b\u5f15\u5bfc\u6247\u533a\u6216\u542f\u52a8\u6247\u533a \u5373\u4e3b\u5f15\u5bfc\u6247\u533a\u6216\u542f\u52a8\u6247\u533a \u52300x7c00\u5904 \u8df3\u8f6c\u81f30x7c00\u5904\uff0c\u6267\u884cbootloader bootasm.S::start \u901a\u8fc7\u952e\u76d8\u63a7\u5236\u56688042\uff0c\u4f7f\u80fdA20\u63a7\u5236\u7ebf\uff0c\u4ee5\u4fbf\u5207\u6362\u5230\u4fdd\u6a21\u5f0f A20\u63a7\u5236\u7ebf\uff080\u65f6\uff09\u662f\u4e3a\u4e86\u5728\u5b9e\u6a21\u5f0f\u4e0b\u6a21\u4eff\u65e9\u671f8086\u5bfb\u5740\u7684\u56de\u7ed5\u7279\u5f81\uff0c\u4e3a\u8bbf\u95ee\u5168\u90e8\u5185\u5b58\u9700\u4f7f\u5176\u4e3a1\u3002 \u63a2\u6d4b\u7269\u7406\u5730\u5740 -> struct e820map \uff080x8000\uff09\uff1b \u5207\u6362\u5230\u4fdd\u62a4\u6a21\u5f0f\uff0c\u542f\u7528\u5206\u6bb5\u673a\u5236 bootmain.c::bootmain \u52a0\u8f7d gdtr\uff080x7db4\uff09\uff0c\u5c06CR0\u7b2c0\u4f4d\u7f6e1\uff0c\u66f4\u65b0CS \u66f4\u65b0CS\u4f7f\u7528\u957f\u8df3\u8f6c\u6307\u4ee4 gdtr\uff1a\uff08size\uff1a0x17\uff0cadd\uff1a0x7c9c \uff09 gdt\uff1a \u4e09\u4e2a\u6bb5\uff0c\u7b2c\u4e00\u4e2a\u6bb5\u5168 0\uff0cdata\uff0ctext \u6bb5\uff1a\uff080x0 - 0xffffffff\uff09 \u8bfb\u78c1\u76d8\u4e2dELF\u6267\u884c\u6587\u4ef6\u683c\u5f0f\u7684kernel\u5230\u5185\u5b58\u6307\u5b9a\u7684\u5185\u5b58\u8d77\u59cb\u5730\u5740\uff080xc010000\uff09\uff0ckernel\u7684\u8d77\u59cb\u5730\u5740\u662f\u5728\u786c\u76d8\u7b2c1\u6247\u533a\u3002 \u628a\u63a7\u5236\u6743\u4ea4\u7ed9ucore\u64cd\u4f5c\u7cfb\u7edf kern init entry.S::kern_entry \u542f\u52a8\u9875\u673a\u5236 movl \u52a0\u8f7d _boot_pgdir \u5230 cr3 \u4e2d\uff0c\u4f7f\u80fdcr0\u7684bit31\u3002 \u8df3\u8f6c\u5230\u9ad8\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff080xc0000000\u4ee5\u4e0a\uff09\uff0c\u53d6\u6d88\u4f4e\u5730\u5740\u5bf9\u7b49\u6620\u5c04\uff0c\u8c03\u7528 kern_init \u3002 init.c::kern_init \u521d\u59cb\u5316\u7ec8\u7aef\uff0c\u663e\u793a\u5b57\u7b26\u4e32\uff0c\u663e\u793a\u5806\u6808\u4e2d\u7684\u591a\u5c42\u51fd\u6570\u8c03\u7528\u5173\u7cfb\uff1b \u8c03\u7528 pmm_init mm pmm.c::pmm_init \u9ed8\u8ba4\u7269\u7406\u5185\u5b58\u7ba1\u7406\u5668 \u521d\u59cb\u5316\uff08\u521d\u59cb\u5316 free_area \uff09 \u8c03\u7528 page_init \u5efa\u7acb \u81ea\u6620\u5c04\u673a\u5236 \uff0c\u4fbf\u4e8e\u6309\u865a\u62df\u5730\u5740\u7684\u5730\u5740\u987a\u5e8f\u663e\u793a\u6574\u4e2a\u9875\u76ee\u5f55\u8868\u548c\u9875\u8868\u7684\u5185\u5bb9 \u8c03\u7528 boot_map_segment \uff0c\u5c06 KERNBASE ~ KERNBASE + KMEMSIZE \u6620\u5c04\u5230 0 ~ KMEMSIZE \u8c03\u7528 gdt_init \u8fd4\u56de kern_init kern init init.c::kern_init \u8c03\u7528 pic_init \uff0c\u521d\u59cb\u5316\u4e2d\u65ad\u63a7\u5236\u5668 \u8c03\u7528 idt_init \uff0c\u521d\u59cb\u5316\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868 \uff0c\u521d\u59cb\u5316\u65f6\u949f\u4e2d\u65ad\uff0c\u4f7f\u80fd\u6574\u4e2a\u7cfb\u7edf\u7684\u4e2d\u65ad\u673a\u5236\uff1b \u6267\u884cwhile\uff081\uff09\u6b7b\u5faa\u73af\u3002","title":"UCore \u6d41\u7a0b"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ucore/#ucore","text":"","title":"UCore \u6d41\u7a0b"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ucore/#boot","text":"CPU\u4e0a\u7535 \u7b2c\u4e00\u6761\u6307\u4ee4\uff1a0xfffffff0 JMP F000:E05B # \u4ece\u6700\u9ad864K \u8df3\u56de 1M\u7a7a\u95f4\u7684\u6700\u9ad864K CS.Base->0x000f0000 \u7b2c\u4e8c\u6761\u6307\u4ee4\uff1a0x000fe05b BIOS \u6307\u4ee4 BIOS \u786c\u4ef6\u81ea\u68c0\u548c\u521d\u59cb\u5316 \u9009\u62e9\u4e00\u4e2a\u542f\u52a8\u8bbe\u5907\uff08\u4f8b\u5982\u8f6f\u76d8\u3001\u786c\u76d8\u3001\u5149\u76d8\u7b49\uff09\uff0c\u8bfb\u53d6\u8be5\u8bbe\u5907\u7684\u7b2c\u4e00\u6247\u533a \u5373\u4e3b\u5f15\u5bfc\u6247\u533a\u6216\u542f\u52a8\u6247\u533a \u5373\u4e3b\u5f15\u5bfc\u6247\u533a\u6216\u542f\u52a8\u6247\u533a \u52300x7c00\u5904 \u8df3\u8f6c\u81f30x7c00\u5904\uff0c\u6267\u884cbootloader bootasm.S::start \u901a\u8fc7\u952e\u76d8\u63a7\u5236\u56688042\uff0c\u4f7f\u80fdA20\u63a7\u5236\u7ebf\uff0c\u4ee5\u4fbf\u5207\u6362\u5230\u4fdd\u6a21\u5f0f A20\u63a7\u5236\u7ebf\uff080\u65f6\uff09\u662f\u4e3a\u4e86\u5728\u5b9e\u6a21\u5f0f\u4e0b\u6a21\u4eff\u65e9\u671f8086\u5bfb\u5740\u7684\u56de\u7ed5\u7279\u5f81\uff0c\u4e3a\u8bbf\u95ee\u5168\u90e8\u5185\u5b58\u9700\u4f7f\u5176\u4e3a1\u3002 \u63a2\u6d4b\u7269\u7406\u5730\u5740 -> struct e820map \uff080x8000\uff09\uff1b \u5207\u6362\u5230\u4fdd\u62a4\u6a21\u5f0f\uff0c\u542f\u7528\u5206\u6bb5\u673a\u5236 bootmain.c::bootmain \u52a0\u8f7d gdtr\uff080x7db4\uff09\uff0c\u5c06CR0\u7b2c0\u4f4d\u7f6e1\uff0c\u66f4\u65b0CS \u66f4\u65b0CS\u4f7f\u7528\u957f\u8df3\u8f6c\u6307\u4ee4 gdtr\uff1a\uff08size\uff1a0x17\uff0cadd\uff1a0x7c9c \uff09 gdt\uff1a \u4e09\u4e2a\u6bb5\uff0c\u7b2c\u4e00\u4e2a\u6bb5\u5168 0\uff0cdata\uff0ctext \u6bb5\uff1a\uff080x0 - 0xffffffff\uff09 \u8bfb\u78c1\u76d8\u4e2dELF\u6267\u884c\u6587\u4ef6\u683c\u5f0f\u7684kernel\u5230\u5185\u5b58\u6307\u5b9a\u7684\u5185\u5b58\u8d77\u59cb\u5730\u5740\uff080xc010000\uff09\uff0ckernel\u7684\u8d77\u59cb\u5730\u5740\u662f\u5728\u786c\u76d8\u7b2c1\u6247\u533a\u3002 \u628a\u63a7\u5236\u6743\u4ea4\u7ed9ucore\u64cd\u4f5c\u7cfb\u7edf","title":"boot"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ucore/#kern","text":"","title":"kern"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ucore/#init","text":"entry.S::kern_entry \u542f\u52a8\u9875\u673a\u5236 movl \u52a0\u8f7d _boot_pgdir \u5230 cr3 \u4e2d\uff0c\u4f7f\u80fdcr0\u7684bit31\u3002 \u8df3\u8f6c\u5230\u9ad8\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff080xc0000000\u4ee5\u4e0a\uff09\uff0c\u53d6\u6d88\u4f4e\u5730\u5740\u5bf9\u7b49\u6620\u5c04\uff0c\u8c03\u7528 kern_init \u3002 init.c::kern_init \u521d\u59cb\u5316\u7ec8\u7aef\uff0c\u663e\u793a\u5b57\u7b26\u4e32\uff0c\u663e\u793a\u5806\u6808\u4e2d\u7684\u591a\u5c42\u51fd\u6570\u8c03\u7528\u5173\u7cfb\uff1b \u8c03\u7528 pmm_init","title":"init"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ucore/#mm","text":"pmm.c::pmm_init \u9ed8\u8ba4\u7269\u7406\u5185\u5b58\u7ba1\u7406\u5668 \u521d\u59cb\u5316\uff08\u521d\u59cb\u5316 free_area \uff09 \u8c03\u7528 page_init \u5efa\u7acb \u81ea\u6620\u5c04\u673a\u5236 \uff0c\u4fbf\u4e8e\u6309\u865a\u62df\u5730\u5740\u7684\u5730\u5740\u987a\u5e8f\u663e\u793a\u6574\u4e2a\u9875\u76ee\u5f55\u8868\u548c\u9875\u8868\u7684\u5185\u5bb9 \u8c03\u7528 boot_map_segment \uff0c\u5c06 KERNBASE ~ KERNBASE + KMEMSIZE \u6620\u5c04\u5230 0 ~ KMEMSIZE \u8c03\u7528 gdt_init \u8fd4\u56de kern_init","title":"mm"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ucore/#kern_1","text":"","title":"kern"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ucore/#init_1","text":"init.c::kern_init \u8c03\u7528 pic_init \uff0c\u521d\u59cb\u5316\u4e2d\u65ad\u63a7\u5236\u5668 \u8c03\u7528 idt_init \uff0c\u521d\u59cb\u5316\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868 \uff0c\u521d\u59cb\u5316\u65f6\u949f\u4e2d\u65ad\uff0c\u4f7f\u80fd\u6574\u4e2a\u7cfb\u7edf\u7684\u4e2d\u65ad\u673a\u5236\uff1b \u6267\u884cwhile\uff081\uff09\u6b7b\u5faa\u73af\u3002","title":"init"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/appendix/gcc_inline_asm/","text":"GCC\u6269\u5c55\u5185\u8054\u6c47\u7f16 GCC\u6269\u5c55\u5185\u8054\u6c47\u7f16\u7684\u57fa\u672c\u683c\u5f0f\u662f\uff1a asm [volatile] ( Assembler Template : Output Operands [ : Input Operands [ : Clobbers ] ]) \u5982\u679c\u4e0d\u5e0c\u671b\u6c47\u7f16\u8bed\u53e5\u88ab gcc \u4f18\u5316\u800c\u6539\u53d8\u4f4d\u7f6e\uff0c\u5c31\u9700\u8981\u5728 asm \u7b26\u53f7\u540e\u6dfb\u52a0 volatile \u5173\u952e\u8bcd\uff1aasm volatile(...)\uff1b Assembler Template \u4e3a\u6c47\u7f16\u6307\u4ee4\u90e8\u5206\uff0c\u4f8b\u5982\uff0c\"movl %%cr0,%0\\n\\t\"\u3002\u6570\u5b57\u524d\u52a0\u524d\u7f00 \u201c\uff05\u201c\uff0c\u5982\uff051\uff0c\uff052\u7b49\u8868\u793a\u4f7f\u7528\u5bc4\u5b58\u5668\u7684\u6837\u677f\u64cd\u4f5c\u6570\uff0c\u8fd9\u7c7b\u5bc4\u5b58\u5668\u7684\u503c\u548c\u8fd9\u4e4b\u540e\u7684\u7ea6\u675f\u5173\u8054\uff0c\u5982%0\uff08The first constraint following\uff09\u3002\u5728\u7528\u5230\u5177\u4f53\u7684\u5bc4\u5b58\u5668\u65f6\u5c31\u5728\u524d\u9762\u52a0 \u4e24\u4e2a\u201c\uff05\u201d \uff0c\u5982 %%cr0 \u3002 \u8f93\u51fa\u90e8\u5206\uff08output operand list\uff09\uff0c\u7528\u4ee5\u89c4\u5b9a\u5bf9\u8f93\u51fa\u53d8\u91cf\uff08\u76ee\u6807\u64cd\u4f5c\u6570\uff09\u5982\u4f55\u4e0e\u5bc4\u5b58\u5668\u7ed3\u5408\u7684\u7ea6\u675f\uff08constraint\uff09,\u8f93\u51fa\u90e8\u5206\u53ef\u4ee5\u6709\u591a\u4e2a\u7ea6\u675f\uff0c\u4e92\u76f8\u4ee5\u9017\u53f7\u5206\u5f00\u3002\u6bcf\u4e2a\u7ea6\u675f\u4ee5\u201c\uff1d\u201d\u5f00\u5934\uff0c\u63a5\u7740\u7528\u4e00\u4e2a\u5b57\u6bcd\u6765\u8868\u793a\u64cd\u4f5c\u6570\u7684\u7c7b\u578b\uff0c\u7136\u540e\u662f\u5173\u4e8e\u53d8\u91cf\u7ed3\u5408\u7684\u7ea6\u675f\u3002\u4f8b\u5982\uff0c\u4e0a\u4f8b\u4e2d\uff1a :\"=r\" (__dummy) \u201c\uff1dr\u201d\u8868\u793a\u76f8\u5e94\u7684\u76ee\u6807\u64cd\u4f5c\u6570\uff08\u6307\u4ee4\u90e8\u5206\u7684%0\uff09\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u4e00\u4e2a\u901a\u7528\u5bc4\u5b58\u5668\uff0c\u5e76\u4e14\u53d8\u91cf__dummy \u5b58\u653e\u5728\u8fd9\u4e2a\u5bc4\u5b58\u5668\u4e2d\uff0c\u4f46\u5982\u679c\u662f\uff1a :\u201c\uff1dm\u201d(__dummy) \u201c\uff1dm\u201d\u5c31\u8868\u793a\u76f8\u5e94\u7684\u76ee\u6807\u64cd\u4f5c\u6570\u662f\u5b58\u653e\u5728\u5185\u5b58\u5355\u5143__dummy\u4e2d\u3002\u8868\u793a\u7ea6\u675f\u6761\u4ef6\u7684\u5b57\u6bcd\u5f88\u591a\uff0c\u4e0b\u8868\u7ed9\u51fa\u51e0\u4e2a\u4e3b\u8981\u7684\u7ea6\u675f\u5b57\u6bcd\u53ca\u5176\u542b\u4e49\uff1a \u5b57\u6bcd \u542b\u4e49 m, v, o \u5185\u5b58\u5355\u5143 R \u4efb\u4f55\u901a\u7528\u5bc4\u5b58\u5668 Q \u5bc4\u5b58\u5668eax, ebx, ecx,edx\u4e4b\u4e00 I, h \u76f4\u63a5\u64cd\u4f5c\u6570 E, F \u6d6e\u70b9\u6570 G \u4efb\u610f a, b, c, d \u5bc4\u5b58\u5668eax/ax/al, ebx/bx/bl, ecx/cx/cl\u6216edx/dx/dl S, D \u5bc4\u5b58\u5668esi\u6216edi I \u5e38\u6570\uff080\uff5e31\uff09 \u8f93\u5165\u90e8\u5206\uff08input operand list\uff09\uff1a\u8f93\u5165\u90e8\u5206\u4e0e\u8f93\u51fa\u90e8\u5206\u76f8\u4f3c\uff0c\u4f46\u6ca1\u6709\u201c\uff1d\u201d\u3002\u5982\u679c\u8f93\u5165\u90e8\u5206\u4e00\u4e2a\u64cd\u4f5c\u6570\u6240\u8981\u6c42\u4f7f\u7528\u7684\u5bc4\u5b58\u5668\uff0c\u4e0e\u524d\u9762\u8f93\u51fa\u90e8\u5206\u67d0\u4e2a\u7ea6\u675f\u6240\u8981\u6c42\u7684\u662f\u540c\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u90a3\u5c31\u628a\u5bf9\u5e94\u64cd\u4f5c\u6570\u7684\u7f16\u53f7\uff08\u5982\u201c1\u201d\uff0c\u201c2\u201d\u7b49\uff09\u653e\u5728\u7ea6\u675f\u6761\u4ef6\u4e2d\u3002\u5728\u540e\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u53ef\u770b\u5230\u8fd9\u79cd\u60c5\u51b5\u3002 \u4fee\u6539\u90e8\u5206\uff08clobber list,\u4e5f\u79f0 \u4e71\u7801\u5217\u8868\uff09:\u8fd9\u90e8\u5206\u5e38\u5e38\u4ee5\u201cmemory\u201d\u4e3a\u7ea6\u675f\u6761\u4ef6\uff0c\u4ee5\u8868\u793a\u64cd\u4f5c\u5b8c\u6210\u540e\u5185\u5b58\u4e2d\u7684\u5185\u5bb9\u5df2\u6709\u6539\u53d8\uff0c\u5982\u679c\u539f\u6765\u67d0\u4e2a\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u6765\u81ea\u5185\u5b58\uff0c\u90a3\u4e48\u73b0\u5728\u5185\u5b58\u4e2d\u8fd9\u4e2a\u5355\u5143\u7684\u5185\u5bb9\u5df2\u7ecf\u6539\u53d8\u3002\u4e71\u7801\u5217\u8868\u901a\u77e5\u7f16\u8bd1\u5668\uff0c\u6709\u4e9b\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u56e0\u5185\u8054\u6c47\u7f16\u5757\u9020\u6210\u4e71\u7801\uff0c\u53ef\u9690\u5f0f\u5730\u7834\u574f\u4e86\u6761\u4ef6\u5bc4\u5b58\u5668\u7684\u67d0\u4e9b\u4f4d\uff08\u5b57\u6bb5\uff09\u3002 \u6ce8\u610f\uff0c\u6307\u4ee4\u90e8\u5206\u4e3a\u5fc5\u9009\u9879\uff0c\u800c\u8f93\u5165\u90e8\u5206\u3001\u8f93\u51fa\u90e8\u5206\u53ca\u4fee\u6539\u90e8\u5206\u4e3a\u53ef\u9009\u9879\uff0c\u5f53\u8f93\u5165\u90e8\u5206\u5b58\u5728\uff0c\u800c\u8f93\u51fa\u90e8\u5206\u4e0d\u5b58\u5728\u65f6\uff0c\u5192\u53f7\u201c\uff1a\u201d\u8981\u4fdd\u7559\uff0c\u5f53\u201cmemory\u201d\u5b58\u5728\u65f6\uff0c\u4e09\u4e2a\u5192\u53f7\u90fd\u8981\u4fdd\u7559\uff0c\u4f8b\u5982 #define __cli() __asm__ __volatile__(\"cli\": : :\"memory\") \u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a int count=1; int value=1; int buf[10]; void main() { asm( \"cld \\n\\t\" \"rep \\n\\t\" \"stosl\" : : \"c\" (count), \"a\" (value) , \"D\" (buf) ); } \u5f97\u5230\u7684\u4e3b\u8981\u6c47\u7f16\u4ee3\u7801\u4e3a\uff1a movl count,%ecx movl value,%eax movl buf,%edi #APP cld rep stosl #NO_APP cld,rep,stos\u8fd9\u51e0\u6761\u8bed\u53e5\u7684\u529f\u80fd\u662f\u5411buf\u4e2d\u5199\u4e0acount\u4e2avalue\u503c\u3002\u5192\u53f7\u540e\u7684\u8bed\u53e5\u6307\u660e\u8f93\u5165\uff0c\u8f93\u51fa\u548c\u88ab\u6539\u53d8\u7684\u5bc4\u5b58\u5668\u3002\u901a\u8fc7\u5192\u53f7\u4ee5\u540e\u7684\u8bed\u53e5\uff0c\u7f16\u8bd1\u5668\u5c31\u77e5\u9053\u4f60\u7684\u6307\u4ee4\u9700\u8981\u548c\u6539\u53d8\u54ea\u4e9b\u5bc4\u5b58\u5668\uff0c\u4ece\u800c\u53ef\u4ee5\u4f18\u5316\u5bc4\u5b58\u5668\u7684\u5206\u914d\u3002\u5176\u4e2d\u7b26\u53f7\"c\"(count)\u6307\u793a\u8981\u628acount\u7684\u503c\u653e\u5165ecx\u5bc4\u5b58\u5668\u3002\u7c7b\u4f3c\u7684\u8fd8\u6709\uff1a 0 same as the first a eax b ebx c ecx d edx S esi D edi I \u5e38\u6570\u503c\uff0c(0 - 31) q,r \u52a8\u6001\u5206\u914d\u7684\u5bc4\u5b58\u5668 g eax,ebx,ecx,edx\u6216\u5185\u5b58\u53d8\u91cf A \u628aeax\u548cedx\u5408\u6210\u4e00\u4e2a64\u4f4d\u7684\u5bc4\u5b58\u5668(use long longs) \u4e5f\u53ef\u4ee5\u8ba9gcc\u81ea\u5df1\u9009\u62e9\u5408\u9002\u7684\u5bc4\u5b58\u5668\u3002\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a asm(\"leal (%1,%1,4),%0\" : \"=r\" (x) : \"0\" (x)); \u8fd9\u6bb5\u4ee3\u7801\u5230\u7684\u4e3b\u8981\u6c47\u7f16\u4ee3\u7801\u4e3a\uff1a movl x,%eax #APP leal (%eax,%eax,4),%eax #NO_APP movl %eax,x \u51e0\u70b9\u8bf4\u660e\uff1a [1] \u4f7f\u7528q\u6307\u793a\u7f16\u8bd1\u5668\u4eceeax, ebx, ecx, edx\u5206\u914d\u5bc4\u5b58\u5668\u3002 \u4f7f\u7528r\u6307\u793a\u7f16\u8bd1\u5668\u4eceeax, ebx, ecx, edx, esi, edi\u5206\u914d\u5bc4\u5b58\u5668\u3002 [2] \u4e0d\u5fc5\u628a\u7f16\u8bd1\u5668\u5206\u914d\u7684\u5bc4\u5b58\u5668\u653e\u5165\u6539\u53d8\u7684\u5bc4\u5b58\u5668\u5217\u8868\uff0c\u56e0\u4e3a\u5bc4\u5b58\u5668\u5df2\u7ecf\u8bb0\u4f4f\u4e86\u5b83\u4eec\u3002 [3] \"=\"\u662f\u6807\u793a\u8f93\u51fa\u5bc4\u5b58\u5668\uff0c\u5fc5\u987b\u8fd9\u6837\u7528\u3002 [4] \u6570\u5b57%n\u7684\u7528\u6cd5\uff1a\u6570\u5b57\u8868\u793a\u7684\u5bc4\u5b58\u5668\u662f\u6309\u7167\u51fa\u73b0\u548c\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6620\u5c04\u5230\u7528\"r\"\u6216\"q\"\u8bf7\u6c42\u7684\u5bc4\u5b58\u5668\uff0e\u5982\u679c\u8981\u91cd\u7528\"r\"\u6216\"q\"\u8bf7\u6c42\u7684\u5bc4\u5b58\u5668\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u3002 [5] \u5982\u679c\u5f3a\u5236\u4f7f\u7528\u56fa\u5b9a\u7684\u5bc4\u5b58\u5668\u7684\u8bdd\uff0c\u5982\u4e0d\u7528%1\uff0c\u800c\u7528ebx\uff0c\u5219\uff1a asm(\"leal (%%ebx,%%ebx,4),%0\" : \"=r\" (x) : \"0\" (x) ); \u6ce8\u610f\u8981\u4f7f\u7528\u4e24\u4e2a%,\u56e0\u4e3a\u4e00\u4e2a%\u7684\u8bed\u6cd5\u5df2\u7ecf\u88ab%n\u7528\u6389\u4e86\u3002 \u53c2\u8003\uff1a GCC Manual\uff0c \u7248\u672c\u4e3a5.0.0 pre-release,6.43\u8282\uff08How to Use Inline Assembly Language in C Code\uff09 GCC-Inline-Assembly-HOWTO","title":"Gcc inline asm"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/appendix/gcc_inline_asm/#gcc","text":"GCC\u6269\u5c55\u5185\u8054\u6c47\u7f16\u7684\u57fa\u672c\u683c\u5f0f\u662f\uff1a asm [volatile] ( Assembler Template : Output Operands [ : Input Operands [ : Clobbers ] ]) \u5982\u679c\u4e0d\u5e0c\u671b\u6c47\u7f16\u8bed\u53e5\u88ab gcc \u4f18\u5316\u800c\u6539\u53d8\u4f4d\u7f6e\uff0c\u5c31\u9700\u8981\u5728 asm \u7b26\u53f7\u540e\u6dfb\u52a0 volatile \u5173\u952e\u8bcd\uff1aasm volatile(...)\uff1b Assembler Template \u4e3a\u6c47\u7f16\u6307\u4ee4\u90e8\u5206\uff0c\u4f8b\u5982\uff0c\"movl %%cr0,%0\\n\\t\"\u3002\u6570\u5b57\u524d\u52a0\u524d\u7f00 \u201c\uff05\u201c\uff0c\u5982\uff051\uff0c\uff052\u7b49\u8868\u793a\u4f7f\u7528\u5bc4\u5b58\u5668\u7684\u6837\u677f\u64cd\u4f5c\u6570\uff0c\u8fd9\u7c7b\u5bc4\u5b58\u5668\u7684\u503c\u548c\u8fd9\u4e4b\u540e\u7684\u7ea6\u675f\u5173\u8054\uff0c\u5982%0\uff08The first constraint following\uff09\u3002\u5728\u7528\u5230\u5177\u4f53\u7684\u5bc4\u5b58\u5668\u65f6\u5c31\u5728\u524d\u9762\u52a0 \u4e24\u4e2a\u201c\uff05\u201d \uff0c\u5982 %%cr0 \u3002 \u8f93\u51fa\u90e8\u5206\uff08output operand list\uff09\uff0c\u7528\u4ee5\u89c4\u5b9a\u5bf9\u8f93\u51fa\u53d8\u91cf\uff08\u76ee\u6807\u64cd\u4f5c\u6570\uff09\u5982\u4f55\u4e0e\u5bc4\u5b58\u5668\u7ed3\u5408\u7684\u7ea6\u675f\uff08constraint\uff09,\u8f93\u51fa\u90e8\u5206\u53ef\u4ee5\u6709\u591a\u4e2a\u7ea6\u675f\uff0c\u4e92\u76f8\u4ee5\u9017\u53f7\u5206\u5f00\u3002\u6bcf\u4e2a\u7ea6\u675f\u4ee5\u201c\uff1d\u201d\u5f00\u5934\uff0c\u63a5\u7740\u7528\u4e00\u4e2a\u5b57\u6bcd\u6765\u8868\u793a\u64cd\u4f5c\u6570\u7684\u7c7b\u578b\uff0c\u7136\u540e\u662f\u5173\u4e8e\u53d8\u91cf\u7ed3\u5408\u7684\u7ea6\u675f\u3002\u4f8b\u5982\uff0c\u4e0a\u4f8b\u4e2d\uff1a :\"=r\" (__dummy) \u201c\uff1dr\u201d\u8868\u793a\u76f8\u5e94\u7684\u76ee\u6807\u64cd\u4f5c\u6570\uff08\u6307\u4ee4\u90e8\u5206\u7684%0\uff09\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u4e00\u4e2a\u901a\u7528\u5bc4\u5b58\u5668\uff0c\u5e76\u4e14\u53d8\u91cf__dummy \u5b58\u653e\u5728\u8fd9\u4e2a\u5bc4\u5b58\u5668\u4e2d\uff0c\u4f46\u5982\u679c\u662f\uff1a :\u201c\uff1dm\u201d(__dummy) \u201c\uff1dm\u201d\u5c31\u8868\u793a\u76f8\u5e94\u7684\u76ee\u6807\u64cd\u4f5c\u6570\u662f\u5b58\u653e\u5728\u5185\u5b58\u5355\u5143__dummy\u4e2d\u3002\u8868\u793a\u7ea6\u675f\u6761\u4ef6\u7684\u5b57\u6bcd\u5f88\u591a\uff0c\u4e0b\u8868\u7ed9\u51fa\u51e0\u4e2a\u4e3b\u8981\u7684\u7ea6\u675f\u5b57\u6bcd\u53ca\u5176\u542b\u4e49\uff1a \u5b57\u6bcd \u542b\u4e49 m, v, o \u5185\u5b58\u5355\u5143 R \u4efb\u4f55\u901a\u7528\u5bc4\u5b58\u5668 Q \u5bc4\u5b58\u5668eax, ebx, ecx,edx\u4e4b\u4e00 I, h \u76f4\u63a5\u64cd\u4f5c\u6570 E, F \u6d6e\u70b9\u6570 G \u4efb\u610f a, b, c, d \u5bc4\u5b58\u5668eax/ax/al, ebx/bx/bl, ecx/cx/cl\u6216edx/dx/dl S, D \u5bc4\u5b58\u5668esi\u6216edi I \u5e38\u6570\uff080\uff5e31\uff09 \u8f93\u5165\u90e8\u5206\uff08input operand list\uff09\uff1a\u8f93\u5165\u90e8\u5206\u4e0e\u8f93\u51fa\u90e8\u5206\u76f8\u4f3c\uff0c\u4f46\u6ca1\u6709\u201c\uff1d\u201d\u3002\u5982\u679c\u8f93\u5165\u90e8\u5206\u4e00\u4e2a\u64cd\u4f5c\u6570\u6240\u8981\u6c42\u4f7f\u7528\u7684\u5bc4\u5b58\u5668\uff0c\u4e0e\u524d\u9762\u8f93\u51fa\u90e8\u5206\u67d0\u4e2a\u7ea6\u675f\u6240\u8981\u6c42\u7684\u662f\u540c\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u90a3\u5c31\u628a\u5bf9\u5e94\u64cd\u4f5c\u6570\u7684\u7f16\u53f7\uff08\u5982\u201c1\u201d\uff0c\u201c2\u201d\u7b49\uff09\u653e\u5728\u7ea6\u675f\u6761\u4ef6\u4e2d\u3002\u5728\u540e\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u53ef\u770b\u5230\u8fd9\u79cd\u60c5\u51b5\u3002 \u4fee\u6539\u90e8\u5206\uff08clobber list,\u4e5f\u79f0 \u4e71\u7801\u5217\u8868\uff09:\u8fd9\u90e8\u5206\u5e38\u5e38\u4ee5\u201cmemory\u201d\u4e3a\u7ea6\u675f\u6761\u4ef6\uff0c\u4ee5\u8868\u793a\u64cd\u4f5c\u5b8c\u6210\u540e\u5185\u5b58\u4e2d\u7684\u5185\u5bb9\u5df2\u6709\u6539\u53d8\uff0c\u5982\u679c\u539f\u6765\u67d0\u4e2a\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u6765\u81ea\u5185\u5b58\uff0c\u90a3\u4e48\u73b0\u5728\u5185\u5b58\u4e2d\u8fd9\u4e2a\u5355\u5143\u7684\u5185\u5bb9\u5df2\u7ecf\u6539\u53d8\u3002\u4e71\u7801\u5217\u8868\u901a\u77e5\u7f16\u8bd1\u5668\uff0c\u6709\u4e9b\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u56e0\u5185\u8054\u6c47\u7f16\u5757\u9020\u6210\u4e71\u7801\uff0c\u53ef\u9690\u5f0f\u5730\u7834\u574f\u4e86\u6761\u4ef6\u5bc4\u5b58\u5668\u7684\u67d0\u4e9b\u4f4d\uff08\u5b57\u6bb5\uff09\u3002 \u6ce8\u610f\uff0c\u6307\u4ee4\u90e8\u5206\u4e3a\u5fc5\u9009\u9879\uff0c\u800c\u8f93\u5165\u90e8\u5206\u3001\u8f93\u51fa\u90e8\u5206\u53ca\u4fee\u6539\u90e8\u5206\u4e3a\u53ef\u9009\u9879\uff0c\u5f53\u8f93\u5165\u90e8\u5206\u5b58\u5728\uff0c\u800c\u8f93\u51fa\u90e8\u5206\u4e0d\u5b58\u5728\u65f6\uff0c\u5192\u53f7\u201c\uff1a\u201d\u8981\u4fdd\u7559\uff0c\u5f53\u201cmemory\u201d\u5b58\u5728\u65f6\uff0c\u4e09\u4e2a\u5192\u53f7\u90fd\u8981\u4fdd\u7559\uff0c\u4f8b\u5982 #define __cli() __asm__ __volatile__(\"cli\": : :\"memory\") \u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a int count=1; int value=1; int buf[10]; void main() { asm( \"cld \\n\\t\" \"rep \\n\\t\" \"stosl\" : : \"c\" (count), \"a\" (value) , \"D\" (buf) ); } \u5f97\u5230\u7684\u4e3b\u8981\u6c47\u7f16\u4ee3\u7801\u4e3a\uff1a movl count,%ecx movl value,%eax movl buf,%edi #APP cld rep stosl #NO_APP cld,rep,stos\u8fd9\u51e0\u6761\u8bed\u53e5\u7684\u529f\u80fd\u662f\u5411buf\u4e2d\u5199\u4e0acount\u4e2avalue\u503c\u3002\u5192\u53f7\u540e\u7684\u8bed\u53e5\u6307\u660e\u8f93\u5165\uff0c\u8f93\u51fa\u548c\u88ab\u6539\u53d8\u7684\u5bc4\u5b58\u5668\u3002\u901a\u8fc7\u5192\u53f7\u4ee5\u540e\u7684\u8bed\u53e5\uff0c\u7f16\u8bd1\u5668\u5c31\u77e5\u9053\u4f60\u7684\u6307\u4ee4\u9700\u8981\u548c\u6539\u53d8\u54ea\u4e9b\u5bc4\u5b58\u5668\uff0c\u4ece\u800c\u53ef\u4ee5\u4f18\u5316\u5bc4\u5b58\u5668\u7684\u5206\u914d\u3002\u5176\u4e2d\u7b26\u53f7\"c\"(count)\u6307\u793a\u8981\u628acount\u7684\u503c\u653e\u5165ecx\u5bc4\u5b58\u5668\u3002\u7c7b\u4f3c\u7684\u8fd8\u6709\uff1a 0 same as the first a eax b ebx c ecx d edx S esi D edi I \u5e38\u6570\u503c\uff0c(0 - 31) q,r \u52a8\u6001\u5206\u914d\u7684\u5bc4\u5b58\u5668 g eax,ebx,ecx,edx\u6216\u5185\u5b58\u53d8\u91cf A \u628aeax\u548cedx\u5408\u6210\u4e00\u4e2a64\u4f4d\u7684\u5bc4\u5b58\u5668(use long longs) \u4e5f\u53ef\u4ee5\u8ba9gcc\u81ea\u5df1\u9009\u62e9\u5408\u9002\u7684\u5bc4\u5b58\u5668\u3002\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a asm(\"leal (%1,%1,4),%0\" : \"=r\" (x) : \"0\" (x)); \u8fd9\u6bb5\u4ee3\u7801\u5230\u7684\u4e3b\u8981\u6c47\u7f16\u4ee3\u7801\u4e3a\uff1a movl x,%eax #APP leal (%eax,%eax,4),%eax #NO_APP movl %eax,x \u51e0\u70b9\u8bf4\u660e\uff1a [1] \u4f7f\u7528q\u6307\u793a\u7f16\u8bd1\u5668\u4eceeax, ebx, ecx, edx\u5206\u914d\u5bc4\u5b58\u5668\u3002 \u4f7f\u7528r\u6307\u793a\u7f16\u8bd1\u5668\u4eceeax, ebx, ecx, edx, esi, edi\u5206\u914d\u5bc4\u5b58\u5668\u3002 [2] \u4e0d\u5fc5\u628a\u7f16\u8bd1\u5668\u5206\u914d\u7684\u5bc4\u5b58\u5668\u653e\u5165\u6539\u53d8\u7684\u5bc4\u5b58\u5668\u5217\u8868\uff0c\u56e0\u4e3a\u5bc4\u5b58\u5668\u5df2\u7ecf\u8bb0\u4f4f\u4e86\u5b83\u4eec\u3002 [3] \"=\"\u662f\u6807\u793a\u8f93\u51fa\u5bc4\u5b58\u5668\uff0c\u5fc5\u987b\u8fd9\u6837\u7528\u3002 [4] \u6570\u5b57%n\u7684\u7528\u6cd5\uff1a\u6570\u5b57\u8868\u793a\u7684\u5bc4\u5b58\u5668\u662f\u6309\u7167\u51fa\u73b0\u548c\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6620\u5c04\u5230\u7528\"r\"\u6216\"q\"\u8bf7\u6c42\u7684\u5bc4\u5b58\u5668\uff0e\u5982\u679c\u8981\u91cd\u7528\"r\"\u6216\"q\"\u8bf7\u6c42\u7684\u5bc4\u5b58\u5668\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u3002 [5] \u5982\u679c\u5f3a\u5236\u4f7f\u7528\u56fa\u5b9a\u7684\u5bc4\u5b58\u5668\u7684\u8bdd\uff0c\u5982\u4e0d\u7528%1\uff0c\u800c\u7528ebx\uff0c\u5219\uff1a asm(\"leal (%%ebx,%%ebx,4),%0\" : \"=r\" (x) : \"0\" (x) ); \u6ce8\u610f\u8981\u4f7f\u7528\u4e24\u4e2a%,\u56e0\u4e3a\u4e00\u4e2a%\u7684\u8bed\u6cd5\u5df2\u7ecf\u88ab%n\u7528\u6389\u4e86\u3002 \u53c2\u8003\uff1a GCC Manual\uff0c \u7248\u672c\u4e3a5.0.0 pre-release,6.43\u8282\uff08How to Use Inline Assembly Language in C Code\uff09 GCC-Inline-Assembly-HOWTO","title":"GCC\u6269\u5c55\u5185\u8054\u6c47\u7f16"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/appendix/gdb/","text":"gdb\u4f7f\u7528 gdb \u662f\u529f\u80fd\u5f3a\u5927\u7684\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u53ef\u5b8c\u6210\u5982\u4e0b\u7684\u8c03\u8bd5\u4efb\u52a1\uff1a \u8bbe\u7f6e\u65ad\u70b9 \u76d1\u89c6\u7a0b\u5e8f\u53d8\u91cf\u7684\u503c \u7a0b\u5e8f\u7684\u5355\u6b65(step in/step over)\u6267\u884c \u663e\u793a/\u4fee\u6539\u53d8\u91cf\u7684\u503c \u663e\u793a/\u4fee\u6539\u5bc4\u5b58\u5668 \u67e5\u770b\u7a0b\u5e8f\u7684\u5806\u6808\u60c5\u51b5 \u8fdc\u7a0b\u8c03\u8bd5 \u8c03\u8bd5\u7ebf\u7a0b \u5728\u53ef\u4ee5\u4f7f\u7528 gdb \u8c03\u8bd5\u7a0b\u5e8f\u4e4b\u524d\uff0c\u5fc5\u987b\u4f7f\u7528 -g \u6216 \u2013ggdb\u7f16\u8bd1\u9009\u9879\u7f16\u8bd1\u6e90\u6587\u4ef6\u3002\u8fd0\u884c gdb \u8c03\u8bd5\u7a0b\u5e8f\u65f6\u901a\u5e38\u4f7f\u7528\u5982\u4e0b\u7684\u547d\u4ee4\uff1a gdb progname \u5728 gdb \u63d0\u793a\u7b26\u5904\u952e\u5165help\uff0c\u5c06\u5217\u51fa\u547d\u4ee4\u7684\u5206\u7c7b\uff0c\u4e3b\u8981\u7684\u5206\u7c7b\u6709\uff1a aliases\uff1a\u547d\u4ee4\u522b\u540d breakpoints\uff1a\u65ad\u70b9\u5b9a\u4e49\uff1b data\uff1a\u6570\u636e\u67e5\u770b\uff1b files\uff1a\u6307\u5b9a\u5e76\u67e5\u770b\u6587\u4ef6\uff1b internals\uff1a\u7ef4\u62a4\u547d\u4ee4\uff1b running\uff1a\u7a0b\u5e8f\u6267\u884c\uff1b stack\uff1a\u8c03\u7528\u6808\u67e5\u770b\uff1b status\uff1a\u72b6\u6001\u67e5\u770b\uff1b tracepoints\uff1a\u8ddf\u8e2a\u7a0b\u5e8f\u6267\u884c\u3002 \u952e\u5165 help \u540e\u8ddf\u547d\u4ee4\u7684\u5206\u7c7b\u540d\uff0c\u53ef\u83b7\u5f97\u8be5\u7c7b\u547d\u4ee4\u7684\u8be6\u7ec6\u6e05\u5355\u3002gdb\u7684\u5e38\u7528\u547d\u4ee4\u5982\u4e0b\u8868\u6240\u793a\u3002 \u8868 gdb \u7684\u5e38\u7528\u547d\u4ee4 break FILENAME:NUM \u5728\u7279\u5b9a\u6e90\u6587\u4ef6\u7279\u5b9a\u884c\u4e0a\u8bbe\u7f6e\u65ad\u70b9 clear FILENAME:NUM \u5220\u9664\u8bbe\u7f6e\u5728\u7279\u5b9a\u6e90\u6587\u4ef6\u7279\u5b9a\u884c\u4e0a\u7684\u65ad\u70b9 run \u8fd0\u884c\u8c03\u8bd5\u7a0b\u5e8f step \u5355\u6b65\u6267\u884c\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u4e0d\u4f1a\u76f4\u63a5\u6267\u884c\u51fd\u6570 next \u5355\u6b65\u6267\u884c\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u4f1a\u76f4\u63a5\u6267\u884c\u51fd\u6570 backtrace \u663e\u793a\u6240\u6709\u7684\u8c03\u7528\u6808\u5e27\u3002\u8be5\u547d\u4ee4\u53ef\u7528\u6765\u663e\u793a\u51fd\u6570\u7684\u8c03\u7528\u987a\u5e8f where continue \u7ee7\u7eed\u6267\u884c\u6b63\u5728\u8c03\u8bd5\u7684\u7a0b\u5e8f display EXPR \u6bcf\u6b21\u7a0b\u5e8f\u505c\u6b62\u540e\u663e\u793a\u8868\u8fbe\u5f0f\u7684\u503c,\u8868\u8fbe\u5f0f\u7531\u7a0b\u5e8f\u5b9a\u4e49\u7684\u53d8\u91cf\u7ec4\u6210 file FILENAME \u88c5\u8f7d\u6307\u5b9a\u7684\u53ef\u6267\u884c\u6587\u4ef6\u8fdb\u884c\u8c03\u8bd5 help CMDNAME \u663e\u793a\u6307\u5b9a\u8c03\u8bd5\u547d\u4ee4\u7684\u5e2e\u52a9\u4fe1\u606f info break \u663e\u793a\u5f53\u524d\u65ad\u70b9\u5217\u8868\uff0c\u5305\u62ec\u5230\u8fbe\u65ad\u70b9\u5904\u7684\u6b21\u6570\u7b49 info files \u663e\u793a\u88ab\u8c03\u8bd5\u6587\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f info func \u663e\u793a\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u7684\u6240\u6709\u51fd\u6570\u540d\u79f0 info prog \u663e\u793a\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u7684\u6267\u884c\u72b6\u6001 info local \u663e\u793a\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u5f53\u524d\u51fd\u6570\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\u4fe1\u606f info var \u663e\u793a\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u7684\u6240\u6709\u5168\u5c40\u548c\u9759\u6001\u53d8\u91cf\u540d\u79f0 kill \u7ec8\u6b62\u6b63\u5728\u88ab\u8c03\u8bd5\u7684\u7a0b\u5e8f list \u663e\u793a\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801 quit \u9000\u51fa gdb gdb\u8c03\u8bd5\u5b9e\u4f8b \u4e0b\u9762\u4ee5\u4e00\u4e2a\u6709\u9519\u8bef\u7684\u4f8b\u5b50\u7a0b\u5e8f\u6765\u4ecb\u7ecdgdb\u7684\u4f7f\u7528\uff1a /*bugging.c*/ #include <stdio.h> #include <stdlib.h> static char buff [256]; static char* string; int main () { printf (\"Please input a string: \"); gets (string); printf (\"\\nYour string is: %s\\n\", string); } \u8fd9\u4e2a\u7a0b\u5e8f\u662f\u63a5\u53d7\u7528\u6237\u7684\u8f93\u5165\uff0c\u7136\u540e\u5c06\u7528\u6237\u7684\u8f93\u5165\u6253\u5370\u51fa\u6765\u3002\u8be5\u7a0b\u5e8f\u4f7f\u7528\u4e86\u4e00\u4e2a\u672a\u7ecf\u8fc7\u521d\u59cb\u5316\u7684\u5b57\u7b26\u4e32\u5730\u5740 string\uff0c\u56e0\u6b64\uff0c\u7f16\u8bd1\u5e76\u8fd0\u884c\u4e4b\u540e\uff0c\u5c06\u51fa\u73b0 \"Segment Fault\"\u9519\u8bef\uff1a $ gcc -o bugging -g bugging.c $ ./bugging Please input a string: asdf Segmentation fault (core dumped) \u4e3a\u4e86\u67e5\u627e\u8be5\u7a0b\u5e8f\u4e2d\u51fa\u73b0\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5229\u7528 gdb\uff0c\u5e76\u6309\u5982\u4e0b\u7684\u6b65\u9aa4\u8fdb\u884c\uff1a [1] \u8fd0\u884c \u201cgdb bugging\u201d \uff0c\u52a0\u8f7d bugging \u53ef\u6267\u884c\u6587\u4ef6\uff1b $gdb bugging [2] \u6267\u884c\u88c5\u5165\u7684 bugging \u547d\u4ee4\uff1b (gdb) run [3] \u4f7f\u7528 where \u547d\u4ee4\u67e5\u770b\u7a0b\u5e8f\u51fa\u9519\u7684\u5730\u65b9\uff1b (gdb) where [4] \u5229\u7528 list \u547d\u4ee4\u67e5\u770b\u8c03\u7528 gets \u51fd\u6570\u9644\u8fd1\u7684\u4ee3\u7801\uff1b (gdb) list [5] \u5728 gdb \u4e2d\uff0c\u6211\u4eec\u5728\u7b2c 11 \u884c\u5904\u8bbe\u7f6e\u65ad\u70b9\uff0c\u770b\u770b\u662f\u5426\u662f\u5728\u7b2c11\u884c\u51fa\u9519\uff1b (gdb) break 11 [6] \u7a0b\u5e8f\u91cd\u65b0\u8fd0\u884c\u5230\u7b2c 11 \u884c\u5904\u505c\u6b62\uff0c\u8fd9\u65f6\u7a0b\u5e8f\u6b63\u5e38\uff0c\u7136\u540e\u6267\u884c\u5355\u6b65\u547d\u4ee4next\uff1b (gdb) next [7] \u7a0b\u5e8f\u786e\u5b9e\u51fa\u9519\uff0c\u80fd\u591f\u5bfc\u81f4 gets \u51fd\u6570\u51fa\u9519\u7684\u56e0\u7d20\u5c31\u662f\u53d8\u91cf string\u3002\u91cd\u65b0\u6267\u884c\u6d4b\u8bd5\u7a0b\uff0c\u7528 print \u547d\u4ee4\u67e5\u770b string \u7684\u503c\uff1b (gdb) run (gdb) print string (gdb) $1=0x0 [8] \u95ee\u9898\u5728\u4e8estring\u6307\u5411\u7684\u662f\u4e00\u4e2a\u65e0\u6548\u6307\u9488\uff0c\u4fee\u6539\u7a0b\u5e8f\uff0c\u572810\u884c\u548c11\u884c\u4e4b\u95f4\u589e\u52a0\u4e00\u6761\u8bed\u53e5 \u201cstring=buff; \u201d\uff0c\u91cd\u65b0\u7f16\u8bd1\u7a0b\u5e8f\uff0c\u7136\u540e\u7ee7\u7eed\u8fd0\u884c\uff0c\u5c06\u770b\u5230\u6b63\u786e\u7684\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u679c\u3002 \u7528gdb\u67e5\u770b\u6e90\u4ee3\u7801\u53ef\u4ee5\u7528list\u547d\u4ee4\uff0c\u4f46\u662f\u8fd9\u4e2a\u4e0d\u591f\u7075\u6d3b\u3002\u53ef\u4ee5\u4f7f\u7528\"layout src\"\u547d\u4ee4\uff0c\u6216\u8005\u6309Ctrl-X\u518d\u6309A\uff0c\u5c31\u4f1a\u51fa\u73b0\u4e00\u4e2a\u7a97\u53e3\u53ef\u4ee5\u67e5\u770b\u6e90\u4ee3\u7801\u3002\u4e5f\u53ef\u4ee5\u7528\u4f7f\u7528-tui\u53c2\u6570\uff0c\u8fd9\u6837\u8fdb\u5165gdb\u91cc\u9762\u540e\u5c31\u80fd\u76f4\u63a5\u6253\u5f00\u4ee3\u7801\u67e5\u770b\u7a97\u53e3\u3002\u5176\u4ed6\u4ee3\u7801\u7a97\u53e3\u76f8\u5173\u547d\u4ee4\uff1a info win \u663e\u793a\u7a97\u53e3\u7684\u5927\u5c0f layout next \u5207\u6362\u5230\u4e0b\u4e00\u4e2a\u5e03\u5c40\u6a21\u5f0f layout prev \u5207\u6362\u5230\u4e0a\u4e00\u4e2a\u5e03\u5c40\u6a21\u5f0f layout src \u53ea\u663e\u793a\u6e90\u4ee3\u7801 layout asm \u53ea\u663e\u793a\u6c47\u7f16\u4ee3\u7801 layout split \u663e\u793a\u6e90\u4ee3\u7801\u548c\u6c47\u7f16\u4ee3\u7801 layout regs \u589e\u52a0\u5bc4\u5b58\u5668\u5185\u5bb9\u663e\u793a focus cmd/src/asm/regs/next/prev \u5207\u6362\u5f53\u524d\u7a97\u53e3 refresh \u5237\u65b0\u6240\u6709\u7a97\u53e3 tui reg next \u663e\u793a\u4e0b\u4e00\u7ec4\u5bc4\u5b58\u5668 tui reg system \u663e\u793a\u7cfb\u7edf\u5bc4\u5b58\u5668 update \u66f4\u65b0\u6e90\u4ee3\u7801\u7a97\u53e3\u548c\u5f53\u524d\u6267\u884c\u70b9 winheight name +/- line \u8c03\u6574name\u7a97\u53e3\u7684\u9ad8\u5ea6 tabset nchar \u8bbe\u7f6etab\u4e3anchar\u4e2a\u5b57\u7b26","title":"Gdb"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/appendix/gdb/#gdb","text":"gdb \u662f\u529f\u80fd\u5f3a\u5927\u7684\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u53ef\u5b8c\u6210\u5982\u4e0b\u7684\u8c03\u8bd5\u4efb\u52a1\uff1a \u8bbe\u7f6e\u65ad\u70b9 \u76d1\u89c6\u7a0b\u5e8f\u53d8\u91cf\u7684\u503c \u7a0b\u5e8f\u7684\u5355\u6b65(step in/step over)\u6267\u884c \u663e\u793a/\u4fee\u6539\u53d8\u91cf\u7684\u503c \u663e\u793a/\u4fee\u6539\u5bc4\u5b58\u5668 \u67e5\u770b\u7a0b\u5e8f\u7684\u5806\u6808\u60c5\u51b5 \u8fdc\u7a0b\u8c03\u8bd5 \u8c03\u8bd5\u7ebf\u7a0b \u5728\u53ef\u4ee5\u4f7f\u7528 gdb \u8c03\u8bd5\u7a0b\u5e8f\u4e4b\u524d\uff0c\u5fc5\u987b\u4f7f\u7528 -g \u6216 \u2013ggdb\u7f16\u8bd1\u9009\u9879\u7f16\u8bd1\u6e90\u6587\u4ef6\u3002\u8fd0\u884c gdb \u8c03\u8bd5\u7a0b\u5e8f\u65f6\u901a\u5e38\u4f7f\u7528\u5982\u4e0b\u7684\u547d\u4ee4\uff1a gdb progname \u5728 gdb \u63d0\u793a\u7b26\u5904\u952e\u5165help\uff0c\u5c06\u5217\u51fa\u547d\u4ee4\u7684\u5206\u7c7b\uff0c\u4e3b\u8981\u7684\u5206\u7c7b\u6709\uff1a aliases\uff1a\u547d\u4ee4\u522b\u540d breakpoints\uff1a\u65ad\u70b9\u5b9a\u4e49\uff1b data\uff1a\u6570\u636e\u67e5\u770b\uff1b files\uff1a\u6307\u5b9a\u5e76\u67e5\u770b\u6587\u4ef6\uff1b internals\uff1a\u7ef4\u62a4\u547d\u4ee4\uff1b running\uff1a\u7a0b\u5e8f\u6267\u884c\uff1b stack\uff1a\u8c03\u7528\u6808\u67e5\u770b\uff1b status\uff1a\u72b6\u6001\u67e5\u770b\uff1b tracepoints\uff1a\u8ddf\u8e2a\u7a0b\u5e8f\u6267\u884c\u3002 \u952e\u5165 help \u540e\u8ddf\u547d\u4ee4\u7684\u5206\u7c7b\u540d\uff0c\u53ef\u83b7\u5f97\u8be5\u7c7b\u547d\u4ee4\u7684\u8be6\u7ec6\u6e05\u5355\u3002gdb\u7684\u5e38\u7528\u547d\u4ee4\u5982\u4e0b\u8868\u6240\u793a\u3002 \u8868 gdb \u7684\u5e38\u7528\u547d\u4ee4 break FILENAME:NUM \u5728\u7279\u5b9a\u6e90\u6587\u4ef6\u7279\u5b9a\u884c\u4e0a\u8bbe\u7f6e\u65ad\u70b9 clear FILENAME:NUM \u5220\u9664\u8bbe\u7f6e\u5728\u7279\u5b9a\u6e90\u6587\u4ef6\u7279\u5b9a\u884c\u4e0a\u7684\u65ad\u70b9 run \u8fd0\u884c\u8c03\u8bd5\u7a0b\u5e8f step \u5355\u6b65\u6267\u884c\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u4e0d\u4f1a\u76f4\u63a5\u6267\u884c\u51fd\u6570 next \u5355\u6b65\u6267\u884c\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u4f1a\u76f4\u63a5\u6267\u884c\u51fd\u6570 backtrace \u663e\u793a\u6240\u6709\u7684\u8c03\u7528\u6808\u5e27\u3002\u8be5\u547d\u4ee4\u53ef\u7528\u6765\u663e\u793a\u51fd\u6570\u7684\u8c03\u7528\u987a\u5e8f where continue \u7ee7\u7eed\u6267\u884c\u6b63\u5728\u8c03\u8bd5\u7684\u7a0b\u5e8f display EXPR \u6bcf\u6b21\u7a0b\u5e8f\u505c\u6b62\u540e\u663e\u793a\u8868\u8fbe\u5f0f\u7684\u503c,\u8868\u8fbe\u5f0f\u7531\u7a0b\u5e8f\u5b9a\u4e49\u7684\u53d8\u91cf\u7ec4\u6210 file FILENAME \u88c5\u8f7d\u6307\u5b9a\u7684\u53ef\u6267\u884c\u6587\u4ef6\u8fdb\u884c\u8c03\u8bd5 help CMDNAME \u663e\u793a\u6307\u5b9a\u8c03\u8bd5\u547d\u4ee4\u7684\u5e2e\u52a9\u4fe1\u606f info break \u663e\u793a\u5f53\u524d\u65ad\u70b9\u5217\u8868\uff0c\u5305\u62ec\u5230\u8fbe\u65ad\u70b9\u5904\u7684\u6b21\u6570\u7b49 info files \u663e\u793a\u88ab\u8c03\u8bd5\u6587\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f info func \u663e\u793a\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u7684\u6240\u6709\u51fd\u6570\u540d\u79f0 info prog \u663e\u793a\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u7684\u6267\u884c\u72b6\u6001 info local \u663e\u793a\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u5f53\u524d\u51fd\u6570\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\u4fe1\u606f info var \u663e\u793a\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u7684\u6240\u6709\u5168\u5c40\u548c\u9759\u6001\u53d8\u91cf\u540d\u79f0 kill \u7ec8\u6b62\u6b63\u5728\u88ab\u8c03\u8bd5\u7684\u7a0b\u5e8f list \u663e\u793a\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801 quit \u9000\u51fa gdb","title":"gdb\u4f7f\u7528"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/appendix/gdb/#gdb_1","text":"\u4e0b\u9762\u4ee5\u4e00\u4e2a\u6709\u9519\u8bef\u7684\u4f8b\u5b50\u7a0b\u5e8f\u6765\u4ecb\u7ecdgdb\u7684\u4f7f\u7528\uff1a /*bugging.c*/ #include <stdio.h> #include <stdlib.h> static char buff [256]; static char* string; int main () { printf (\"Please input a string: \"); gets (string); printf (\"\\nYour string is: %s\\n\", string); } \u8fd9\u4e2a\u7a0b\u5e8f\u662f\u63a5\u53d7\u7528\u6237\u7684\u8f93\u5165\uff0c\u7136\u540e\u5c06\u7528\u6237\u7684\u8f93\u5165\u6253\u5370\u51fa\u6765\u3002\u8be5\u7a0b\u5e8f\u4f7f\u7528\u4e86\u4e00\u4e2a\u672a\u7ecf\u8fc7\u521d\u59cb\u5316\u7684\u5b57\u7b26\u4e32\u5730\u5740 string\uff0c\u56e0\u6b64\uff0c\u7f16\u8bd1\u5e76\u8fd0\u884c\u4e4b\u540e\uff0c\u5c06\u51fa\u73b0 \"Segment Fault\"\u9519\u8bef\uff1a $ gcc -o bugging -g bugging.c $ ./bugging Please input a string: asdf Segmentation fault (core dumped) \u4e3a\u4e86\u67e5\u627e\u8be5\u7a0b\u5e8f\u4e2d\u51fa\u73b0\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5229\u7528 gdb\uff0c\u5e76\u6309\u5982\u4e0b\u7684\u6b65\u9aa4\u8fdb\u884c\uff1a [1] \u8fd0\u884c \u201cgdb bugging\u201d \uff0c\u52a0\u8f7d bugging \u53ef\u6267\u884c\u6587\u4ef6\uff1b $gdb bugging [2] \u6267\u884c\u88c5\u5165\u7684 bugging \u547d\u4ee4\uff1b (gdb) run [3] \u4f7f\u7528 where \u547d\u4ee4\u67e5\u770b\u7a0b\u5e8f\u51fa\u9519\u7684\u5730\u65b9\uff1b (gdb) where [4] \u5229\u7528 list \u547d\u4ee4\u67e5\u770b\u8c03\u7528 gets \u51fd\u6570\u9644\u8fd1\u7684\u4ee3\u7801\uff1b (gdb) list [5] \u5728 gdb \u4e2d\uff0c\u6211\u4eec\u5728\u7b2c 11 \u884c\u5904\u8bbe\u7f6e\u65ad\u70b9\uff0c\u770b\u770b\u662f\u5426\u662f\u5728\u7b2c11\u884c\u51fa\u9519\uff1b (gdb) break 11 [6] \u7a0b\u5e8f\u91cd\u65b0\u8fd0\u884c\u5230\u7b2c 11 \u884c\u5904\u505c\u6b62\uff0c\u8fd9\u65f6\u7a0b\u5e8f\u6b63\u5e38\uff0c\u7136\u540e\u6267\u884c\u5355\u6b65\u547d\u4ee4next\uff1b (gdb) next [7] \u7a0b\u5e8f\u786e\u5b9e\u51fa\u9519\uff0c\u80fd\u591f\u5bfc\u81f4 gets \u51fd\u6570\u51fa\u9519\u7684\u56e0\u7d20\u5c31\u662f\u53d8\u91cf string\u3002\u91cd\u65b0\u6267\u884c\u6d4b\u8bd5\u7a0b\uff0c\u7528 print \u547d\u4ee4\u67e5\u770b string \u7684\u503c\uff1b (gdb) run (gdb) print string (gdb) $1=0x0 [8] \u95ee\u9898\u5728\u4e8estring\u6307\u5411\u7684\u662f\u4e00\u4e2a\u65e0\u6548\u6307\u9488\uff0c\u4fee\u6539\u7a0b\u5e8f\uff0c\u572810\u884c\u548c11\u884c\u4e4b\u95f4\u589e\u52a0\u4e00\u6761\u8bed\u53e5 \u201cstring=buff; \u201d\uff0c\u91cd\u65b0\u7f16\u8bd1\u7a0b\u5e8f\uff0c\u7136\u540e\u7ee7\u7eed\u8fd0\u884c\uff0c\u5c06\u770b\u5230\u6b63\u786e\u7684\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u679c\u3002 \u7528gdb\u67e5\u770b\u6e90\u4ee3\u7801\u53ef\u4ee5\u7528list\u547d\u4ee4\uff0c\u4f46\u662f\u8fd9\u4e2a\u4e0d\u591f\u7075\u6d3b\u3002\u53ef\u4ee5\u4f7f\u7528\"layout src\"\u547d\u4ee4\uff0c\u6216\u8005\u6309Ctrl-X\u518d\u6309A\uff0c\u5c31\u4f1a\u51fa\u73b0\u4e00\u4e2a\u7a97\u53e3\u53ef\u4ee5\u67e5\u770b\u6e90\u4ee3\u7801\u3002\u4e5f\u53ef\u4ee5\u7528\u4f7f\u7528-tui\u53c2\u6570\uff0c\u8fd9\u6837\u8fdb\u5165gdb\u91cc\u9762\u540e\u5c31\u80fd\u76f4\u63a5\u6253\u5f00\u4ee3\u7801\u67e5\u770b\u7a97\u53e3\u3002\u5176\u4ed6\u4ee3\u7801\u7a97\u53e3\u76f8\u5173\u547d\u4ee4\uff1a info win \u663e\u793a\u7a97\u53e3\u7684\u5927\u5c0f layout next \u5207\u6362\u5230\u4e0b\u4e00\u4e2a\u5e03\u5c40\u6a21\u5f0f layout prev \u5207\u6362\u5230\u4e0a\u4e00\u4e2a\u5e03\u5c40\u6a21\u5f0f layout src \u53ea\u663e\u793a\u6e90\u4ee3\u7801 layout asm \u53ea\u663e\u793a\u6c47\u7f16\u4ee3\u7801 layout split \u663e\u793a\u6e90\u4ee3\u7801\u548c\u6c47\u7f16\u4ee3\u7801 layout regs \u589e\u52a0\u5bc4\u5b58\u5668\u5185\u5bb9\u663e\u793a focus cmd/src/asm/regs/next/prev \u5207\u6362\u5f53\u524d\u7a97\u53e3 refresh \u5237\u65b0\u6240\u6709\u7a97\u53e3 tui reg next \u663e\u793a\u4e0b\u4e00\u7ec4\u5bc4\u5b58\u5668 tui reg system \u663e\u793a\u7cfb\u7edf\u5bc4\u5b58\u5668 update \u66f4\u65b0\u6e90\u4ee3\u7801\u7a97\u53e3\u548c\u5f53\u524d\u6267\u884c\u70b9 winheight name +/- line \u8c03\u6574name\u7a97\u53e3\u7684\u9ad8\u5ea6 tabset nchar \u8bbe\u7f6etab\u4e3anchar\u4e2a\u5b57\u7b26","title":"gdb\u8c03\u8bd5\u5b9e\u4f8b"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/appendix/global_var/","text":"\u7ba1\u7406PCB \u4e3a\u4e86\u7ba1\u7406\u7cfb\u7edf\u4e2d\u6240\u6709\u7684\u8fdb\u7a0b\u63a7\u5236\u5757\uff0cuCore\u7ef4\u62a4\u4e86\u5982\u4e0b\u5168\u5c40\u53d8\u91cf\uff08\u4f4d\u4e8e kern/process/proc.c \uff09\uff1a static int nr_process\uff1a\u8fdb\u7a0b\u603b\u6570\u3002 static struct proc *current\uff1a\u5f53\u524d\u5360\u7528CPU\u4e14\u5904\u4e8e\u201c\u8fd0\u884c\u201d\u72b6\u6001\u8fdb\u7a0b\u63a7\u5236\u5757\u6307\u9488\u3002 static struct proc *initproc\uff1alab4\u4e2d\uff0c\u6307\u5411\u4e00\u4e2a\u5185\u6838\u7ebf\u7a0b\u3002lab4\u4ee5\u540e\uff0c\u6b64\u6307\u9488\u5c06\u6307\u5411\u7b2c\u4e00\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u3002 static list_entry_t hash_list[HASH_LIST_SIZE]\uff1a\u6240\u6709\u8fdb\u7a0b\u63a7\u5236\u5757\u7684\u54c8\u5e0c\u8868\uff0cproc_struct\u4e2d\u7684\u6210\u5458\u53d8\u91cfhash_link\u5c06\u57fa\u4e8epid\u94fe\u63a5\u5165\u8fd9\u4e2a\u54c8\u5e0c\u8868\u4e2d\u3002 list_entry_t proc_list\uff1a\u6240\u6709\u8fdb\u7a0b\u63a7\u5236\u5757\u7684\u53cc\u5411\u7ebf\u6027\u5217\u8868\uff0cproc_struct\u4e2d\u7684\u6210\u5458\u53d8\u91cflist_link\u5c06\u94fe\u63a5\u5165\u8fd9\u4e2a\u94fe\u8868\u4e2d\u3002","title":"Global var"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/appendix/global_var/#pcb","text":"\u4e3a\u4e86\u7ba1\u7406\u7cfb\u7edf\u4e2d\u6240\u6709\u7684\u8fdb\u7a0b\u63a7\u5236\u5757\uff0cuCore\u7ef4\u62a4\u4e86\u5982\u4e0b\u5168\u5c40\u53d8\u91cf\uff08\u4f4d\u4e8e kern/process/proc.c \uff09\uff1a static int nr_process\uff1a\u8fdb\u7a0b\u603b\u6570\u3002 static struct proc *current\uff1a\u5f53\u524d\u5360\u7528CPU\u4e14\u5904\u4e8e\u201c\u8fd0\u884c\u201d\u72b6\u6001\u8fdb\u7a0b\u63a7\u5236\u5757\u6307\u9488\u3002 static struct proc *initproc\uff1alab4\u4e2d\uff0c\u6307\u5411\u4e00\u4e2a\u5185\u6838\u7ebf\u7a0b\u3002lab4\u4ee5\u540e\uff0c\u6b64\u6307\u9488\u5c06\u6307\u5411\u7b2c\u4e00\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u3002 static list_entry_t hash_list[HASH_LIST_SIZE]\uff1a\u6240\u6709\u8fdb\u7a0b\u63a7\u5236\u5757\u7684\u54c8\u5e0c\u8868\uff0cproc_struct\u4e2d\u7684\u6210\u5458\u53d8\u91cfhash_link\u5c06\u57fa\u4e8epid\u94fe\u63a5\u5165\u8fd9\u4e2a\u54c8\u5e0c\u8868\u4e2d\u3002 list_entry_t proc_list\uff1a\u6240\u6709\u8fdb\u7a0b\u63a7\u5236\u5757\u7684\u53cc\u5411\u7ebf\u6027\u5217\u8868\uff0cproc_struct\u4e2d\u7684\u6210\u5458\u53d8\u91cflist_link\u5c06\u94fe\u63a5\u5165\u8fd9\u4e2a\u94fe\u8868\u4e2d\u3002","title":"\u7ba1\u7406PCB"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/appendix/interrupt/","text":"\u539f\u7406 \u9012\u5f52\u8c03\u7528\u6808 \u7279\u6743\u7ea7\u5207\u6362","title":"\u539f\u7406"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/appendix/interrupt/#_1","text":"\u9012\u5f52\u8c03\u7528\u6808 \u7279\u6743\u7ea7\u5207\u6362","title":"\u539f\u7406"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/appendix/struct/","text":"","title":"Struct"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/1/","text":"\u7ec3\u4e601 \u95ee\u98981.1\uff1a\u64cd\u4f5c\u7cfb\u7edf\u955c\u50cf\u6587\u4ef6 ucore.img \u662f\u5982\u4f55\u4e00\u6b65\u4e00\u6b65\u751f\u6210\u7684?(\u9700\u8981\u6bd4\u8f83\u8be6\u7ec6\u5730\u89e3\u91ca Makefile \u4e2d\u6bcf\u4e00\u6761\u76f8\u5173\u547d\u4ee4\u548c\u547d\u4ee4\u53c2\u6570\u7684\u542b\u4e49,\u4ee5\u53ca\u8bf4\u660e\u547d\u4ee4\u5bfc\u81f4\u7684\u7ed3\u679c) bin/ucore.img | \u751f\u6210ucore.img\u7684\u76f8\u5173\u4ee3\u7801\u4e3a | $(UCOREIMG): $(kernel) $(bootblock) | $(V)dd if=/dev/zero of=$@ count=10000 | $(V)dd if=$(bootblock) of=$@ conv=notrunc | $(V)dd if=$(kernel) of=$@ seek=1 conv=notrunc | | \u4e3a\u4e86\u751f\u6210ucore.img\uff0c\u9996\u5148\u9700\u8981\u751f\u6210bootblock\u3001kernel | |> bin/bootblock | | \u751f\u6210bootblock\u7684\u76f8\u5173\u4ee3\u7801\u4e3a | | $(bootblock): $(call toobj,$(bootfiles)) | $(call totarget,sign) | | @echo + ld $@ | | $(V)$(LD) $(LDFLAGS) -N -e start -Ttext 0x7C00 $^ \\ | | -o $(call toobj,bootblock) | | @$(OBJDUMP) -S $(call objfile,bootblock) > \\ | | $(call asmfile,bootblock) | | @$(OBJCOPY) -S -O binary $(call objfile,bootblock) \\ | | $(call outfile,bootblock) | | @$(call totarget,sign) $(call outfile,bootblock) $(bootblock) | | | | \u4e3a\u4e86\u751f\u6210bootblock\uff0c\u9996\u5148\u9700\u8981\u751f\u6210bootasm.o\u3001bootmain.o\u3001sign | | | |> obj/boot/bootasm.o, obj/boot/bootmain.o | | | \u751f\u6210bootasm.o,bootmain.o\u7684\u76f8\u5173makefile\u4ee3\u7801\u4e3a | | | bootfiles = $(call listf_cc,boot) | | | $(foreach f,$(bootfiles),$(call cc_compile,$(f),$(CC),\\ | | | $(CFLAGS) -Os -nostdinc)) | | | \u5b9e\u9645\u4ee3\u7801\u7531\u5b8f\u6279\u91cf\u751f\u6210 | | | | | | \u751f\u6210bootasm.o\u9700\u8981bootasm.S | | | \u5b9e\u9645\u547d\u4ee4\u4e3a | | | gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs \\ | | | -nostdinc -fno-stack-protector -Ilibs/ -Os -nostdinc \\ | | | -c boot/bootasm.S -o obj/boot/bootasm.o | | | \u5176\u4e2d\u5173\u952e\u7684\u53c2\u6570\u4e3a | | | -ggdb \u751f\u6210\u53ef\u4f9bgdb\u4f7f\u7528\u7684\u8c03\u8bd5\u4fe1\u606f\u3002\u8fd9\u6837\u624d\u80fd\u7528qemu+gdb\u6765\u8c03\u8bd5bootloader or ucore\u3002 | | | -m32 \u751f\u6210\u9002\u7528\u4e8e32\u4f4d\u73af\u5883\u7684\u4ee3\u7801\u3002\u6211\u4eec\u7528\u7684\u6a21\u62df\u786c\u4ef6\u662f32bit\u768480386\uff0c\u6240\u4ee5ucore\u4e5f\u8981\u662f32\u4f4d\u7684\u8f6f\u4ef6\u3002 | | | -gstabs \u751f\u6210stabs\u683c\u5f0f\u7684\u8c03\u8bd5\u4fe1\u606f\u3002\u8fd9\u6837\u8981ucore\u7684monitor\u53ef\u4ee5\u663e\u793a\u51fa\u4fbf\u4e8e\u5f00\u53d1\u8005\u9605\u8bfb\u7684\u51fd\u6570\u8c03\u7528\u6808\u4fe1\u606f | | | -nostdinc \u4e0d\u4f7f\u7528\u6807\u51c6\u5e93\u3002\u6807\u51c6\u5e93\u662f\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7528\u7684\uff0c\u6211\u4eec\u662f\u7f16\u8bd1ucore\u5185\u6838\uff0cOS\u5185\u6838\u662f\u63d0\u4f9b\u670d\u52a1\u7684\uff0c\u6240\u4ee5\u6240\u6709\u7684\u670d\u52a1\u8981\u81ea\u7ed9\u81ea\u8db3\u3002 | | | -fno-stack-protector \u4e0d\u751f\u6210\u7528\u4e8e\u68c0\u6d4b\u7f13\u51b2\u533a\u6ea2\u51fa\u7684\u4ee3\u7801\u3002\u8fd9\u662ffor \u5e94\u7528\u7a0b\u5e8f\u7684\uff0c\u6211\u4eec\u662f\u7f16\u8bd1\u5185\u6838\uff0cucore\u5185\u6838\u597d\u50cf\u8fd8\u7528\u4e0d\u5230\u6b64\u529f\u80fd\u3002 | | | -Os \u4e3a\u51cf\u5c0f\u4ee3\u7801\u5927\u5c0f\u800c\u8fdb\u884c\u4f18\u5316\u3002\u6839\u636e\u786c\u4ef6spec\uff0c\u4e3b\u5f15\u5bfc\u6247\u533a\u53ea\u6709512\u5b57\u8282\uff0c\u6211\u4eec\u5199\u7684\u7b80\u5355bootloader\u7684\u6700\u7ec8\u5927\u5c0f\u4e0d\u80fd\u5927\u4e8e510\u5b57\u8282\u3002 | | | -I<dir> \u6dfb\u52a0\u641c\u7d22\u5934\u6587\u4ef6\u7684\u8def\u5f84 | | | | | | \u751f\u6210bootmain.o\u9700\u8981bootmain.c | | | \u5b9e\u9645\u547d\u4ee4\u4e3a | | | gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc \\ | | | -fno-stack-protector -Ilibs/ -Os -nostdinc \\ | | | -c boot/bootmain.c -o obj/boot/bootmain.o | | | \u65b0\u51fa\u73b0\u7684\u5173\u952e\u53c2\u6570\u6709 | | | -fno-builtin \u9664\u975e\u7528__builtin_\u524d\u7f00\uff0c | | | \u5426\u5219\u4e0d\u8fdb\u884cbuiltin\u51fd\u6570\u7684\u4f18\u5316 | | | |> bin/sign | | | \u751f\u6210sign\u5de5\u5177\u7684makefile\u4ee3\u7801\u4e3a | | | $(call add_files_host,tools/sign.c,sign,sign) | | | $(call create_target_host,sign,sign) | | | | | | \u5b9e\u9645\u547d\u4ee4\u4e3a | | | gcc -Itools/ -g -Wall -O2 -c tools/sign.c \\ | | | -o obj/sign/tools/sign.o | | | gcc -g -Wall -O2 obj/sign/tools/sign.o -o bin/sign | | | | \u9996\u5148\u751f\u6210bootblock.o | | ld -m elf_i386 -nostdlib -N -e start -Ttext 0x7C00 \\ | | obj/boot/bootasm.o obj/boot/bootmain.o -o obj/bootblock.o | | \u5176\u4e2d\u5173\u952e\u7684\u53c2\u6570\u4e3a | | -m <emulation> \u6a21\u62df\u4e3ai386\u4e0a\u7684\u8fde\u63a5\u5668 | | -nostdlib \u4e0d\u4f7f\u7528\u6807\u51c6\u5e93 | | -N \u8bbe\u7f6e\u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5\u5747\u53ef\u8bfb\u5199 | | -e <entry> \u6307\u5b9a\u5165\u53e3 | | -Ttext \u5236\u5b9a\u4ee3\u7801\u6bb5\u5f00\u59cb\u4f4d\u7f6e | | | | \u62f7\u8d1d\u4e8c\u8fdb\u5236\u4ee3\u7801bootblock.o\u5230bootblock.out | | objcopy -S -O binary obj/bootblock.o obj/bootblock.out | | \u5176\u4e2d\u5173\u952e\u7684\u53c2\u6570\u4e3a | | -S \u79fb\u9664\u6240\u6709\u7b26\u53f7\u548c\u91cd\u5b9a\u4f4d\u4fe1\u606f | | -O <bfdname> \u6307\u5b9a\u8f93\u51fa\u683c\u5f0f | | | | \u4f7f\u7528sign\u5de5\u5177\u5904\u7406bootblock.out\uff0c\u751f\u6210bootblock | | bin/sign obj/bootblock.out bin/bootblock | |> bin/kernel | | \u751f\u6210kernel\u7684\u76f8\u5173\u4ee3\u7801\u4e3a | | $(kernel): tools/kernel.ld | | $(kernel): $(KOBJS) | | @echo + ld $@ | | $(V)$(LD) $(LDFLAGS) -T tools/kernel.ld -o $@ $(KOBJS) | | @$(OBJDUMP) -S $@ > $(call asmfile,kernel) | | @$(OBJDUMP) -t $@ | $(SED) '1,/SYMBOL TABLE/d; s/ .* / /; \\ | | /^$$/d' > $(call symfile,kernel) | | | | \u4e3a\u4e86\u751f\u6210kernel\uff0c\u9996\u5148\u9700\u8981 kernel.ld init.o readline.o stdio.o kdebug.o | | kmonitor.o panic.o clock.o console.o intr.o picirq.o trap.o | | trapentry.o vectors.o pmm.o printfmt.o string.o | | kernel.ld\u5df2\u5b58\u5728 | | | |> obj/kern/*/*.o | | | \u751f\u6210\u8fd9\u4e9b.o\u6587\u4ef6\u7684\u76f8\u5173makefile\u4ee3\u7801\u4e3a | | | $(call add_files_cc,$(call listf_cc,$(KSRCDIR)),kernel,\\ | | | $(KCFLAGS)) | | | \u8fd9\u4e9b.o\u751f\u6210\u65b9\u5f0f\u548c\u53c2\u6570\u5747\u7c7b\u4f3c\uff0c\u4ec5\u4e3einit.o\u4e3a\u4f8b\uff0c\u5176\u4f59\u4e0d\u8d58\u8ff0 | |> obj/kern/init/init.o | | | \u7f16\u8bd1\u9700\u8981init.c | | | \u5b9e\u9645\u547d\u4ee4\u4e3a | | | gcc -Ikern/init/ -fno-builtin -Wall -ggdb -m32 \\ | | | -gstabs -nostdinc -fno-stack-protector \\ | | | -Ilibs/ -Ikern/debug/ -Ikern/driver/ \\ | | | -Ikern/trap/ -Ikern/mm/ -c kern/init/init.c \\ | | | -o obj/kern/init/init.o | | | | \u751f\u6210kernel\u65f6\uff0cmakefile\u7684\u51e0\u6761\u6307\u4ee4\u4e2d\u6709@\u524d\u7f00\u7684\u90fd\u4e0d\u5fc5\u9700 | | \u5fc5\u9700\u7684\u547d\u4ee4\u53ea\u6709 | | ld -m elf_i386 -nostdlib -T tools/kernel.ld -o bin/kernel \\ | | obj/kern/init/init.o obj/kern/libs/readline.o \\ | | obj/kern/libs/stdio.o obj/kern/debug/kdebug.o \\ | | obj/kern/debug/kmonitor.o obj/kern/debug/panic.o \\ | | obj/kern/driver/clock.o obj/kern/driver/console.o \\ | | obj/kern/driver/intr.o obj/kern/driver/picirq.o \\ | | obj/kern/trap/trap.o obj/kern/trap/trapentry.o \\ | | obj/kern/trap/vectors.o obj/kern/mm/pmm.o \\ | | obj/libs/printfmt.o obj/libs/string.o | | \u5176\u4e2d\u65b0\u51fa\u73b0\u7684\u5173\u952e\u53c2\u6570\u4e3a | | -T <scriptfile> \u8ba9\u8fde\u63a5\u5668\u4f7f\u7528\u6307\u5b9a\u7684\u811a\u672c | | \u751f\u6210\u4e00\u4e2a\u670910000\u4e2a\u5757\u7684\u6587\u4ef6\uff0c\u6bcf\u4e2a\u5757\u9ed8\u8ba4512\u5b57\u8282\uff0c\u75280\u586b\u5145 | dd if=/dev/zero of=bin/ucore.img count=10000 | | \u628abootblock\u4e2d\u7684\u5185\u5bb9\u5199\u5230\u7b2c\u4e00\u4e2a\u5757 | dd if=bin/bootblock of=bin/ucore.img conv=notrunc | | \u4ece\u7b2c\u4e8c\u4e2a\u5757\u5f00\u59cb\u5199kernel\u4e2d\u7684\u5185\u5bb9 | dd if=bin/kernel of=bin/ucore.img seek=1 conv=notrunc \u95ee\u98981.2\uff1a\u4e00\u4e2a\u88ab\u7cfb\u7edf\u8ba4\u4e3a\u662f\u7b26\u5408\u89c4\u8303\u7684\u786c\u76d8\u4e3b\u5f15\u5bfc\u6247\u533a\u7684\u7279\u5f81\u662f\u4ec0\u4e48? \u4ecesign.c\u7684\u4ee3\u7801\u6765\u770b\uff0c\u4e00\u4e2a\u78c1\u76d8\u4e3b\u5f15\u5bfc\u6247\u533a\u53ea\u6709512\u5b57\u8282\u3002\u4e14 \u7b2c510\u4e2a\uff08\u5012\u6570\u7b2c\u4e8c\u4e2a\uff09\u5b57\u8282\u662f0x55\uff0c \u7b2c511\u4e2a\uff08\u5012\u6570\u7b2c\u4e00\u4e2a\uff09\u5b57\u8282\u662f0xAA\u3002","title":"1"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/1/#1","text":"\u95ee\u98981.1\uff1a\u64cd\u4f5c\u7cfb\u7edf\u955c\u50cf\u6587\u4ef6 ucore.img \u662f\u5982\u4f55\u4e00\u6b65\u4e00\u6b65\u751f\u6210\u7684?(\u9700\u8981\u6bd4\u8f83\u8be6\u7ec6\u5730\u89e3\u91ca Makefile \u4e2d\u6bcf\u4e00\u6761\u76f8\u5173\u547d\u4ee4\u548c\u547d\u4ee4\u53c2\u6570\u7684\u542b\u4e49,\u4ee5\u53ca\u8bf4\u660e\u547d\u4ee4\u5bfc\u81f4\u7684\u7ed3\u679c) bin/ucore.img | \u751f\u6210ucore.img\u7684\u76f8\u5173\u4ee3\u7801\u4e3a | $(UCOREIMG): $(kernel) $(bootblock) | $(V)dd if=/dev/zero of=$@ count=10000 | $(V)dd if=$(bootblock) of=$@ conv=notrunc | $(V)dd if=$(kernel) of=$@ seek=1 conv=notrunc | | \u4e3a\u4e86\u751f\u6210ucore.img\uff0c\u9996\u5148\u9700\u8981\u751f\u6210bootblock\u3001kernel | |> bin/bootblock | | \u751f\u6210bootblock\u7684\u76f8\u5173\u4ee3\u7801\u4e3a | | $(bootblock): $(call toobj,$(bootfiles)) | $(call totarget,sign) | | @echo + ld $@ | | $(V)$(LD) $(LDFLAGS) -N -e start -Ttext 0x7C00 $^ \\ | | -o $(call toobj,bootblock) | | @$(OBJDUMP) -S $(call objfile,bootblock) > \\ | | $(call asmfile,bootblock) | | @$(OBJCOPY) -S -O binary $(call objfile,bootblock) \\ | | $(call outfile,bootblock) | | @$(call totarget,sign) $(call outfile,bootblock) $(bootblock) | | | | \u4e3a\u4e86\u751f\u6210bootblock\uff0c\u9996\u5148\u9700\u8981\u751f\u6210bootasm.o\u3001bootmain.o\u3001sign | | | |> obj/boot/bootasm.o, obj/boot/bootmain.o | | | \u751f\u6210bootasm.o,bootmain.o\u7684\u76f8\u5173makefile\u4ee3\u7801\u4e3a | | | bootfiles = $(call listf_cc,boot) | | | $(foreach f,$(bootfiles),$(call cc_compile,$(f),$(CC),\\ | | | $(CFLAGS) -Os -nostdinc)) | | | \u5b9e\u9645\u4ee3\u7801\u7531\u5b8f\u6279\u91cf\u751f\u6210 | | | | | | \u751f\u6210bootasm.o\u9700\u8981bootasm.S | | | \u5b9e\u9645\u547d\u4ee4\u4e3a | | | gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs \\ | | | -nostdinc -fno-stack-protector -Ilibs/ -Os -nostdinc \\ | | | -c boot/bootasm.S -o obj/boot/bootasm.o | | | \u5176\u4e2d\u5173\u952e\u7684\u53c2\u6570\u4e3a | | | -ggdb \u751f\u6210\u53ef\u4f9bgdb\u4f7f\u7528\u7684\u8c03\u8bd5\u4fe1\u606f\u3002\u8fd9\u6837\u624d\u80fd\u7528qemu+gdb\u6765\u8c03\u8bd5bootloader or ucore\u3002 | | | -m32 \u751f\u6210\u9002\u7528\u4e8e32\u4f4d\u73af\u5883\u7684\u4ee3\u7801\u3002\u6211\u4eec\u7528\u7684\u6a21\u62df\u786c\u4ef6\u662f32bit\u768480386\uff0c\u6240\u4ee5ucore\u4e5f\u8981\u662f32\u4f4d\u7684\u8f6f\u4ef6\u3002 | | | -gstabs \u751f\u6210stabs\u683c\u5f0f\u7684\u8c03\u8bd5\u4fe1\u606f\u3002\u8fd9\u6837\u8981ucore\u7684monitor\u53ef\u4ee5\u663e\u793a\u51fa\u4fbf\u4e8e\u5f00\u53d1\u8005\u9605\u8bfb\u7684\u51fd\u6570\u8c03\u7528\u6808\u4fe1\u606f | | | -nostdinc \u4e0d\u4f7f\u7528\u6807\u51c6\u5e93\u3002\u6807\u51c6\u5e93\u662f\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7528\u7684\uff0c\u6211\u4eec\u662f\u7f16\u8bd1ucore\u5185\u6838\uff0cOS\u5185\u6838\u662f\u63d0\u4f9b\u670d\u52a1\u7684\uff0c\u6240\u4ee5\u6240\u6709\u7684\u670d\u52a1\u8981\u81ea\u7ed9\u81ea\u8db3\u3002 | | | -fno-stack-protector \u4e0d\u751f\u6210\u7528\u4e8e\u68c0\u6d4b\u7f13\u51b2\u533a\u6ea2\u51fa\u7684\u4ee3\u7801\u3002\u8fd9\u662ffor \u5e94\u7528\u7a0b\u5e8f\u7684\uff0c\u6211\u4eec\u662f\u7f16\u8bd1\u5185\u6838\uff0cucore\u5185\u6838\u597d\u50cf\u8fd8\u7528\u4e0d\u5230\u6b64\u529f\u80fd\u3002 | | | -Os \u4e3a\u51cf\u5c0f\u4ee3\u7801\u5927\u5c0f\u800c\u8fdb\u884c\u4f18\u5316\u3002\u6839\u636e\u786c\u4ef6spec\uff0c\u4e3b\u5f15\u5bfc\u6247\u533a\u53ea\u6709512\u5b57\u8282\uff0c\u6211\u4eec\u5199\u7684\u7b80\u5355bootloader\u7684\u6700\u7ec8\u5927\u5c0f\u4e0d\u80fd\u5927\u4e8e510\u5b57\u8282\u3002 | | | -I<dir> \u6dfb\u52a0\u641c\u7d22\u5934\u6587\u4ef6\u7684\u8def\u5f84 | | | | | | \u751f\u6210bootmain.o\u9700\u8981bootmain.c | | | \u5b9e\u9645\u547d\u4ee4\u4e3a | | | gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc \\ | | | -fno-stack-protector -Ilibs/ -Os -nostdinc \\ | | | -c boot/bootmain.c -o obj/boot/bootmain.o | | | \u65b0\u51fa\u73b0\u7684\u5173\u952e\u53c2\u6570\u6709 | | | -fno-builtin \u9664\u975e\u7528__builtin_\u524d\u7f00\uff0c | | | \u5426\u5219\u4e0d\u8fdb\u884cbuiltin\u51fd\u6570\u7684\u4f18\u5316 | | | |> bin/sign | | | \u751f\u6210sign\u5de5\u5177\u7684makefile\u4ee3\u7801\u4e3a | | | $(call add_files_host,tools/sign.c,sign,sign) | | | $(call create_target_host,sign,sign) | | | | | | \u5b9e\u9645\u547d\u4ee4\u4e3a | | | gcc -Itools/ -g -Wall -O2 -c tools/sign.c \\ | | | -o obj/sign/tools/sign.o | | | gcc -g -Wall -O2 obj/sign/tools/sign.o -o bin/sign | | | | \u9996\u5148\u751f\u6210bootblock.o | | ld -m elf_i386 -nostdlib -N -e start -Ttext 0x7C00 \\ | | obj/boot/bootasm.o obj/boot/bootmain.o -o obj/bootblock.o | | \u5176\u4e2d\u5173\u952e\u7684\u53c2\u6570\u4e3a | | -m <emulation> \u6a21\u62df\u4e3ai386\u4e0a\u7684\u8fde\u63a5\u5668 | | -nostdlib \u4e0d\u4f7f\u7528\u6807\u51c6\u5e93 | | -N \u8bbe\u7f6e\u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5\u5747\u53ef\u8bfb\u5199 | | -e <entry> \u6307\u5b9a\u5165\u53e3 | | -Ttext \u5236\u5b9a\u4ee3\u7801\u6bb5\u5f00\u59cb\u4f4d\u7f6e | | | | \u62f7\u8d1d\u4e8c\u8fdb\u5236\u4ee3\u7801bootblock.o\u5230bootblock.out | | objcopy -S -O binary obj/bootblock.o obj/bootblock.out | | \u5176\u4e2d\u5173\u952e\u7684\u53c2\u6570\u4e3a | | -S \u79fb\u9664\u6240\u6709\u7b26\u53f7\u548c\u91cd\u5b9a\u4f4d\u4fe1\u606f | | -O <bfdname> \u6307\u5b9a\u8f93\u51fa\u683c\u5f0f | | | | \u4f7f\u7528sign\u5de5\u5177\u5904\u7406bootblock.out\uff0c\u751f\u6210bootblock | | bin/sign obj/bootblock.out bin/bootblock | |> bin/kernel | | \u751f\u6210kernel\u7684\u76f8\u5173\u4ee3\u7801\u4e3a | | $(kernel): tools/kernel.ld | | $(kernel): $(KOBJS) | | @echo + ld $@ | | $(V)$(LD) $(LDFLAGS) -T tools/kernel.ld -o $@ $(KOBJS) | | @$(OBJDUMP) -S $@ > $(call asmfile,kernel) | | @$(OBJDUMP) -t $@ | $(SED) '1,/SYMBOL TABLE/d; s/ .* / /; \\ | | /^$$/d' > $(call symfile,kernel) | | | | \u4e3a\u4e86\u751f\u6210kernel\uff0c\u9996\u5148\u9700\u8981 kernel.ld init.o readline.o stdio.o kdebug.o | | kmonitor.o panic.o clock.o console.o intr.o picirq.o trap.o | | trapentry.o vectors.o pmm.o printfmt.o string.o | | kernel.ld\u5df2\u5b58\u5728 | | | |> obj/kern/*/*.o | | | \u751f\u6210\u8fd9\u4e9b.o\u6587\u4ef6\u7684\u76f8\u5173makefile\u4ee3\u7801\u4e3a | | | $(call add_files_cc,$(call listf_cc,$(KSRCDIR)),kernel,\\ | | | $(KCFLAGS)) | | | \u8fd9\u4e9b.o\u751f\u6210\u65b9\u5f0f\u548c\u53c2\u6570\u5747\u7c7b\u4f3c\uff0c\u4ec5\u4e3einit.o\u4e3a\u4f8b\uff0c\u5176\u4f59\u4e0d\u8d58\u8ff0 | |> obj/kern/init/init.o | | | \u7f16\u8bd1\u9700\u8981init.c | | | \u5b9e\u9645\u547d\u4ee4\u4e3a | | | gcc -Ikern/init/ -fno-builtin -Wall -ggdb -m32 \\ | | | -gstabs -nostdinc -fno-stack-protector \\ | | | -Ilibs/ -Ikern/debug/ -Ikern/driver/ \\ | | | -Ikern/trap/ -Ikern/mm/ -c kern/init/init.c \\ | | | -o obj/kern/init/init.o | | | | \u751f\u6210kernel\u65f6\uff0cmakefile\u7684\u51e0\u6761\u6307\u4ee4\u4e2d\u6709@\u524d\u7f00\u7684\u90fd\u4e0d\u5fc5\u9700 | | \u5fc5\u9700\u7684\u547d\u4ee4\u53ea\u6709 | | ld -m elf_i386 -nostdlib -T tools/kernel.ld -o bin/kernel \\ | | obj/kern/init/init.o obj/kern/libs/readline.o \\ | | obj/kern/libs/stdio.o obj/kern/debug/kdebug.o \\ | | obj/kern/debug/kmonitor.o obj/kern/debug/panic.o \\ | | obj/kern/driver/clock.o obj/kern/driver/console.o \\ | | obj/kern/driver/intr.o obj/kern/driver/picirq.o \\ | | obj/kern/trap/trap.o obj/kern/trap/trapentry.o \\ | | obj/kern/trap/vectors.o obj/kern/mm/pmm.o \\ | | obj/libs/printfmt.o obj/libs/string.o | | \u5176\u4e2d\u65b0\u51fa\u73b0\u7684\u5173\u952e\u53c2\u6570\u4e3a | | -T <scriptfile> \u8ba9\u8fde\u63a5\u5668\u4f7f\u7528\u6307\u5b9a\u7684\u811a\u672c | | \u751f\u6210\u4e00\u4e2a\u670910000\u4e2a\u5757\u7684\u6587\u4ef6\uff0c\u6bcf\u4e2a\u5757\u9ed8\u8ba4512\u5b57\u8282\uff0c\u75280\u586b\u5145 | dd if=/dev/zero of=bin/ucore.img count=10000 | | \u628abootblock\u4e2d\u7684\u5185\u5bb9\u5199\u5230\u7b2c\u4e00\u4e2a\u5757 | dd if=bin/bootblock of=bin/ucore.img conv=notrunc | | \u4ece\u7b2c\u4e8c\u4e2a\u5757\u5f00\u59cb\u5199kernel\u4e2d\u7684\u5185\u5bb9 | dd if=bin/kernel of=bin/ucore.img seek=1 conv=notrunc \u95ee\u98981.2\uff1a\u4e00\u4e2a\u88ab\u7cfb\u7edf\u8ba4\u4e3a\u662f\u7b26\u5408\u89c4\u8303\u7684\u786c\u76d8\u4e3b\u5f15\u5bfc\u6247\u533a\u7684\u7279\u5f81\u662f\u4ec0\u4e48? \u4ecesign.c\u7684\u4ee3\u7801\u6765\u770b\uff0c\u4e00\u4e2a\u78c1\u76d8\u4e3b\u5f15\u5bfc\u6247\u533a\u53ea\u6709512\u5b57\u8282\u3002\u4e14 \u7b2c510\u4e2a\uff08\u5012\u6570\u7b2c\u4e8c\u4e2a\uff09\u5b57\u8282\u662f0x55\uff0c \u7b2c511\u4e2a\uff08\u5012\u6570\u7b2c\u4e00\u4e2a\uff09\u5b57\u8282\u662f0xAA\u3002","title":"\u7ec3\u4e601"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/2/","text":"\u7ec3\u4e602 \u95ee\u98982.1\uff1a\u4eceCPU\u52a0\u7535\u540e\u6267\u884c\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u5f00\u59cb\uff0c\u5355\u6b65\u8ddf\u8e2aBIOS\u7684\u6267\u884c\u3002 \u7ec3\u4e602\u53ef\u4ee5\u5355\u6b65\u8ddf\u8e2a\uff0c\u65b9\u6cd5\u5982\u4e0b\uff1a 1 \u4fee\u6539 lab1/tools/gdbinit,\u5185\u5bb9\u4e3a: set architecture i8086 target remote :1234 2 \u5728 lab1\u76ee\u5f55\u4e0b\uff0c\u6267\u884c make debug 3 \u5728\u770b\u5230gdb\u7684\u8c03\u8bd5\u754c\u9762(gdb)\u540e\uff0c\u5728gdb\u8c03\u8bd5\u754c\u9762\u4e0b\u6267\u884c\u5982\u4e0b\u547d\u4ee4 si \u5373\u53ef\u5355\u6b65\u8ddf\u8e2aBIOS\u4e86\u3002 4 \u5728gdb\u754c\u9762\u4e0b\uff0c\u53ef\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6765\u770bBIOS\u7684\u4ee3\u7801 x /2i \u5730\u5740\u503c //\u663e\u793a\u5f53\u524deip\u5904\u7684\u6c47\u7f16\u6307\u4ee4 \u8fdb\u4e00\u6b65\u7684\u8865\u5145 \u6539\u5199Makefile\u6587\u4ef6 debug: $(UCOREIMG) $(V)$(TERMINAL) -e \"$(QEMU) -S -s -d in_asm -D $(BINDIR)/q.log -parallel stdio -hda $< -serial null\" $(V)sleep 2 $(V)$(TERMINAL) -e \"gdb -q -tui -x tools/gdbinit\" \u5728\u8c03\u7528qemu\u65f6\u589e\u52a0 -d in_asm -D q.log \u53c2\u6570\uff0c\u4fbf\u53ef\u4ee5\u5c06\u8fd0\u884c\u7684\u6c47\u7f16\u6307\u4ee4\u4fdd\u5b58\u5728q.log\u4e2d\u3002 \u4e3a\u9632\u6b62qemu\u5728gdb\u8fde\u63a5\u540e\u7acb\u5373\u5f00\u59cb\u6267\u884c\uff0c\u5220\u9664\u4e86 tools/gdbinit \u4e2d\u7684 continue \u884c\u3002 \u95ee\u98982.2\uff1a\u5728\u521d\u59cb\u5316\u4f4d\u7f6e0x7c00 \u8bbe\u7f6e\u5b9e\u5730\u5740\u65ad\u70b9,\u6d4b\u8bd5\u65ad\u70b9\u6b63\u5e38\u3002 \u5728tools/gdbinit\u7ed3\u5c3e\u52a0\u4e0a set architecture i8086 //\u8bbe\u7f6e\u5f53\u524d\u8c03\u8bd5\u7684CPU\u662f8086 b *0x7c00 //\u57280x7c00\u5904\u8bbe\u7f6e\u65ad\u70b9\u3002\u6b64\u5730\u5740\u662fbootloader\u5165\u53e3\u70b9\u5730\u5740\uff0c\u53ef\u770bboot/bootasm.S\u7684start\u5730\u5740\u5904 c //continue\u7b80\u79f0\uff0c\u8868\u793a\u7ee7\u7eed\u6267\u884c x /2i $pc //\u663e\u793a\u5f53\u524deip\u5904\u7684\u6c47\u7f16\u6307\u4ee4 set architecture i386 //\u8bbe\u7f6e\u5f53\u524d\u8c03\u8bd5\u7684CPU\u662f80386 \u8fd0\u884c\"make debug\"\u4fbf\u53ef\u5f97\u5230 Breakpoint 2, 0x00007c00 in ?? () => 0x7c00: cli 0x7c01: cld 0x7c02: xor %eax,%eax 0x7c04: mov %eax,%ds 0x7c06: mov %eax,%es 0x7c08: mov %eax,%ss 0x7c0a: in $0x64,%al 0x7c0c: test $0x2,%al 0x7c0e: jne 0x7c0a 0x7c10: mov $0xd1,%al \u95ee\u98982.3\uff1a\u5728\u8c03\u7528qemu \u65f6\u589e\u52a0-d in_asm -D q.log \u53c2\u6570\uff0c\u4fbf\u53ef\u4ee5\u5c06\u8fd0\u884c\u7684\u6c47\u7f16\u6307\u4ee4\u4fdd\u5b58\u5728q.log \u4e2d\u3002\u5c06\u6267\u884c\u7684\u6c47\u7f16\u4ee3\u7801\u4e0ebootasm.S \u548c bootblock.asm \u8fdb\u884c\u6bd4\u8f83\uff0c\u770b\u770b\u4e8c\u8005\u662f\u5426\u4e00\u81f4\u3002 \u5728tools/gdbinit\u7ed3\u5c3e\u52a0\u4e0a b *0x7c00 c x /10i $pc \u4fbf\u53ef\u4ee5\u5728q.log\u4e2d\u8bfb\u5230\"call bootmain\"\u524d\u6267\u884c\u7684\u547d\u4ee4 ---------------- IN: 0x00007c00: cli ---------------- IN: 0x00007c01: cld 0x00007c02: xor %ax,%ax 0x00007c04: mov %ax,%ds 0x00007c06: mov %ax,%es 0x00007c08: mov %ax,%ss ---------------- IN: 0x00007c0a: in $0x64,%al ---------------- IN: 0x00007c0c: test $0x2,%al 0x00007c0e: jne 0x7c0a ---------------- IN: 0x00007c10: mov $0xd1,%al 0x00007c12: out %al,$0x64 0x00007c14: in $0x64,%al 0x00007c16: test $0x2,%al 0x00007c18: jne 0x7c14 ---------------- IN: 0x00007c1a: mov $0xdf,%al 0x00007c1c: out %al,$0x60 0x00007c1e: lgdtw 0x7c6c 0x00007c23: mov %cr0,%eax 0x00007c26: or $0x1,%eax 0x00007c2a: mov %eax,%cr0 ---------------- IN: 0x00007c2d: ljmp $0x8,$0x7c32 ---------------- IN: 0x00007c32: mov $0x10,%ax 0x00007c36: mov %eax,%ds ---------------- IN: 0x00007c38: mov %eax,%es ---------------- IN: 0x00007c3a: mov %eax,%fs 0x00007c3c: mov %eax,%gs 0x00007c3e: mov %eax,%ss ---------------- IN: 0x00007c40: mov $0x0,%ebp ---------------- IN: 0x00007c45: mov $0x7c00,%esp 0x00007c4a: call 0x7d0d ---------------- IN: 0x00007d0d: push %ebp \u5176\u4e0ebootasm.S\u548cbootblock.asm\u4e2d\u7684\u4ee3\u7801\u76f8\u540c\u3002","title":"2"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/2/#2","text":"\u95ee\u98982.1\uff1a\u4eceCPU\u52a0\u7535\u540e\u6267\u884c\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u5f00\u59cb\uff0c\u5355\u6b65\u8ddf\u8e2aBIOS\u7684\u6267\u884c\u3002 \u7ec3\u4e602\u53ef\u4ee5\u5355\u6b65\u8ddf\u8e2a\uff0c\u65b9\u6cd5\u5982\u4e0b\uff1a 1 \u4fee\u6539 lab1/tools/gdbinit,\u5185\u5bb9\u4e3a: set architecture i8086 target remote :1234 2 \u5728 lab1\u76ee\u5f55\u4e0b\uff0c\u6267\u884c make debug 3 \u5728\u770b\u5230gdb\u7684\u8c03\u8bd5\u754c\u9762(gdb)\u540e\uff0c\u5728gdb\u8c03\u8bd5\u754c\u9762\u4e0b\u6267\u884c\u5982\u4e0b\u547d\u4ee4 si \u5373\u53ef\u5355\u6b65\u8ddf\u8e2aBIOS\u4e86\u3002 4 \u5728gdb\u754c\u9762\u4e0b\uff0c\u53ef\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6765\u770bBIOS\u7684\u4ee3\u7801 x /2i \u5730\u5740\u503c //\u663e\u793a\u5f53\u524deip\u5904\u7684\u6c47\u7f16\u6307\u4ee4 \u8fdb\u4e00\u6b65\u7684\u8865\u5145 \u6539\u5199Makefile\u6587\u4ef6 debug: $(UCOREIMG) $(V)$(TERMINAL) -e \"$(QEMU) -S -s -d in_asm -D $(BINDIR)/q.log -parallel stdio -hda $< -serial null\" $(V)sleep 2 $(V)$(TERMINAL) -e \"gdb -q -tui -x tools/gdbinit\" \u5728\u8c03\u7528qemu\u65f6\u589e\u52a0 -d in_asm -D q.log \u53c2\u6570\uff0c\u4fbf\u53ef\u4ee5\u5c06\u8fd0\u884c\u7684\u6c47\u7f16\u6307\u4ee4\u4fdd\u5b58\u5728q.log\u4e2d\u3002 \u4e3a\u9632\u6b62qemu\u5728gdb\u8fde\u63a5\u540e\u7acb\u5373\u5f00\u59cb\u6267\u884c\uff0c\u5220\u9664\u4e86 tools/gdbinit \u4e2d\u7684 continue \u884c\u3002 \u95ee\u98982.2\uff1a\u5728\u521d\u59cb\u5316\u4f4d\u7f6e0x7c00 \u8bbe\u7f6e\u5b9e\u5730\u5740\u65ad\u70b9,\u6d4b\u8bd5\u65ad\u70b9\u6b63\u5e38\u3002 \u5728tools/gdbinit\u7ed3\u5c3e\u52a0\u4e0a set architecture i8086 //\u8bbe\u7f6e\u5f53\u524d\u8c03\u8bd5\u7684CPU\u662f8086 b *0x7c00 //\u57280x7c00\u5904\u8bbe\u7f6e\u65ad\u70b9\u3002\u6b64\u5730\u5740\u662fbootloader\u5165\u53e3\u70b9\u5730\u5740\uff0c\u53ef\u770bboot/bootasm.S\u7684start\u5730\u5740\u5904 c //continue\u7b80\u79f0\uff0c\u8868\u793a\u7ee7\u7eed\u6267\u884c x /2i $pc //\u663e\u793a\u5f53\u524deip\u5904\u7684\u6c47\u7f16\u6307\u4ee4 set architecture i386 //\u8bbe\u7f6e\u5f53\u524d\u8c03\u8bd5\u7684CPU\u662f80386 \u8fd0\u884c\"make debug\"\u4fbf\u53ef\u5f97\u5230 Breakpoint 2, 0x00007c00 in ?? () => 0x7c00: cli 0x7c01: cld 0x7c02: xor %eax,%eax 0x7c04: mov %eax,%ds 0x7c06: mov %eax,%es 0x7c08: mov %eax,%ss 0x7c0a: in $0x64,%al 0x7c0c: test $0x2,%al 0x7c0e: jne 0x7c0a 0x7c10: mov $0xd1,%al \u95ee\u98982.3\uff1a\u5728\u8c03\u7528qemu \u65f6\u589e\u52a0-d in_asm -D q.log \u53c2\u6570\uff0c\u4fbf\u53ef\u4ee5\u5c06\u8fd0\u884c\u7684\u6c47\u7f16\u6307\u4ee4\u4fdd\u5b58\u5728q.log \u4e2d\u3002\u5c06\u6267\u884c\u7684\u6c47\u7f16\u4ee3\u7801\u4e0ebootasm.S \u548c bootblock.asm \u8fdb\u884c\u6bd4\u8f83\uff0c\u770b\u770b\u4e8c\u8005\u662f\u5426\u4e00\u81f4\u3002 \u5728tools/gdbinit\u7ed3\u5c3e\u52a0\u4e0a b *0x7c00 c x /10i $pc \u4fbf\u53ef\u4ee5\u5728q.log\u4e2d\u8bfb\u5230\"call bootmain\"\u524d\u6267\u884c\u7684\u547d\u4ee4 ---------------- IN: 0x00007c00: cli ---------------- IN: 0x00007c01: cld 0x00007c02: xor %ax,%ax 0x00007c04: mov %ax,%ds 0x00007c06: mov %ax,%es 0x00007c08: mov %ax,%ss ---------------- IN: 0x00007c0a: in $0x64,%al ---------------- IN: 0x00007c0c: test $0x2,%al 0x00007c0e: jne 0x7c0a ---------------- IN: 0x00007c10: mov $0xd1,%al 0x00007c12: out %al,$0x64 0x00007c14: in $0x64,%al 0x00007c16: test $0x2,%al 0x00007c18: jne 0x7c14 ---------------- IN: 0x00007c1a: mov $0xdf,%al 0x00007c1c: out %al,$0x60 0x00007c1e: lgdtw 0x7c6c 0x00007c23: mov %cr0,%eax 0x00007c26: or $0x1,%eax 0x00007c2a: mov %eax,%cr0 ---------------- IN: 0x00007c2d: ljmp $0x8,$0x7c32 ---------------- IN: 0x00007c32: mov $0x10,%ax 0x00007c36: mov %eax,%ds ---------------- IN: 0x00007c38: mov %eax,%es ---------------- IN: 0x00007c3a: mov %eax,%fs 0x00007c3c: mov %eax,%gs 0x00007c3e: mov %eax,%ss ---------------- IN: 0x00007c40: mov $0x0,%ebp ---------------- IN: 0x00007c45: mov $0x7c00,%esp 0x00007c4a: call 0x7d0d ---------------- IN: 0x00007d0d: push %ebp \u5176\u4e0ebootasm.S\u548cbootblock.asm\u4e2d\u7684\u4ee3\u7801\u76f8\u540c\u3002","title":"\u7ec3\u4e602"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/3/","text":"\u7ec3\u4e603\uff1a\u5206\u6790bootloader \u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\u7684\u8fc7\u7a0b\u3002 \u4ece %cs=0 $pc=0x7c00 \uff0c\u8fdb\u5165\u540e \u9996\u5148\u6e05\u7406\u73af\u5883\uff1a\u5305\u62ec\u5c06flag\u7f6e0\u548c\u5c06\u6bb5\u5bc4\u5b58\u5668\u7f6e0 .code16 cli cld xorw %ax, %ax movw %ax, %ds movw %ax, %es movw %ax, %ss \u5f00\u542fA20\uff1a\u901a\u8fc7\u5c06\u952e\u76d8\u63a7\u5236\u5668\u4e0a\u7684A20\u7ebf\u7f6e\u4e8e\u9ad8\u7535\u4f4d\uff0c\u5168\u90e832\u6761\u5730\u5740\u7ebf\u53ef\u7528\uff0c \u53ef\u4ee5\u8bbf\u95ee4G\u7684\u5185\u5b58\u7a7a\u95f4\u3002 seta20.1: ## \u7b49\u5f858042\u952e\u76d8\u63a7\u5236\u5668\u4e0d\u5fd9 inb $0x64, %al ## testb $0x2, %al # jnz seta20.1 # movb $0xd1, %al ## \u53d1\u9001\u51998042\u8f93\u51fa\u7aef\u53e3\u7684\u6307\u4ee4 outb %al, $0x64 # seta20.1: ## \u7b49\u5f858042\u952e\u76d8\u63a7\u5236\u5668\u4e0d\u5fd9 inb $0x64, %al ## testb $0x2, %al # jnz seta20.1 # movb $0xdf, %al ## \u6253\u5f00A20 outb %al, $0x60 ## \u521d\u59cb\u5316GDT\u8868\uff1a\u4e00\u4e2a\u7b80\u5355\u7684GDT\u8868\u548c\u5176\u63cf\u8ff0\u7b26\u5df2\u7ecf\u9759\u6001\u50a8\u5b58\u5728\u5f15\u5bfc\u533a\u4e2d\uff0c\u8f7d\u5165\u5373\u53ef lgdt gdtdesc \u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\uff1a\u901a\u8fc7\u5c06cr0\u5bc4\u5b58\u5668PE\u4f4d\u7f6e1\u4fbf\u5f00\u542f\u4e86\u4fdd\u62a4\u6a21\u5f0f movl %cr0, %eax orl $CR0_PE_ON, %eax movl %eax, %cr0 \u901a\u8fc7\u957f\u8df3\u8f6c\u66f4\u65b0cs\u7684\u57fa\u5730\u5740 ljmp $PROT_MODE_CSEG, $protcseg .code32 protcseg: \u8bbe\u7f6e\u6bb5\u5bc4\u5b58\u5668\uff0c\u5e76\u5efa\u7acb\u5806\u6808 movw $PROT_MODE_DSEG, %ax movw %ax, %ds movw %ax, %es movw %ax, %fs movw %ax, %gs movw %ax, %ss movl $0x0, %ebp movl $start, %esp \u8f6c\u5230\u4fdd\u62a4\u6a21\u5f0f\u5b8c\u6210\uff0c\u8fdb\u5165boot\u4e3b\u65b9\u6cd5 call bootmain","title":"3"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/3/#3bootloader","text":"\u4ece %cs=0 $pc=0x7c00 \uff0c\u8fdb\u5165\u540e \u9996\u5148\u6e05\u7406\u73af\u5883\uff1a\u5305\u62ec\u5c06flag\u7f6e0\u548c\u5c06\u6bb5\u5bc4\u5b58\u5668\u7f6e0 .code16 cli cld xorw %ax, %ax movw %ax, %ds movw %ax, %es movw %ax, %ss \u5f00\u542fA20\uff1a\u901a\u8fc7\u5c06\u952e\u76d8\u63a7\u5236\u5668\u4e0a\u7684A20\u7ebf\u7f6e\u4e8e\u9ad8\u7535\u4f4d\uff0c\u5168\u90e832\u6761\u5730\u5740\u7ebf\u53ef\u7528\uff0c \u53ef\u4ee5\u8bbf\u95ee4G\u7684\u5185\u5b58\u7a7a\u95f4\u3002 seta20.1: ## \u7b49\u5f858042\u952e\u76d8\u63a7\u5236\u5668\u4e0d\u5fd9 inb $0x64, %al ## testb $0x2, %al # jnz seta20.1 # movb $0xd1, %al ## \u53d1\u9001\u51998042\u8f93\u51fa\u7aef\u53e3\u7684\u6307\u4ee4 outb %al, $0x64 # seta20.1: ## \u7b49\u5f858042\u952e\u76d8\u63a7\u5236\u5668\u4e0d\u5fd9 inb $0x64, %al ## testb $0x2, %al # jnz seta20.1 # movb $0xdf, %al ## \u6253\u5f00A20 outb %al, $0x60 ## \u521d\u59cb\u5316GDT\u8868\uff1a\u4e00\u4e2a\u7b80\u5355\u7684GDT\u8868\u548c\u5176\u63cf\u8ff0\u7b26\u5df2\u7ecf\u9759\u6001\u50a8\u5b58\u5728\u5f15\u5bfc\u533a\u4e2d\uff0c\u8f7d\u5165\u5373\u53ef lgdt gdtdesc \u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\uff1a\u901a\u8fc7\u5c06cr0\u5bc4\u5b58\u5668PE\u4f4d\u7f6e1\u4fbf\u5f00\u542f\u4e86\u4fdd\u62a4\u6a21\u5f0f movl %cr0, %eax orl $CR0_PE_ON, %eax movl %eax, %cr0 \u901a\u8fc7\u957f\u8df3\u8f6c\u66f4\u65b0cs\u7684\u57fa\u5730\u5740 ljmp $PROT_MODE_CSEG, $protcseg .code32 protcseg: \u8bbe\u7f6e\u6bb5\u5bc4\u5b58\u5668\uff0c\u5e76\u5efa\u7acb\u5806\u6808 movw $PROT_MODE_DSEG, %ax movw %ax, %ds movw %ax, %es movw %ax, %fs movw %ax, %gs movw %ax, %ss movl $0x0, %ebp movl $start, %esp \u8f6c\u5230\u4fdd\u62a4\u6a21\u5f0f\u5b8c\u6210\uff0c\u8fdb\u5165boot\u4e3b\u65b9\u6cd5 call bootmain","title":"\u7ec3\u4e603\uff1a\u5206\u6790bootloader \u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\u7684\u8fc7\u7a0b\u3002"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/4/","text":"\u7ec3\u4e604\uff1a\u5206\u6790bootloader\u52a0\u8f7dELF\u683c\u5f0f\u7684OS\u7684\u8fc7\u7a0b\u3002 \u9996\u5148\u770breadsect\u51fd\u6570\uff0c readsect \u4ece\u8bbe\u5907\u7684\u7b2csecno\u6247\u533a\u8bfb\u53d6\u6570\u636e\u5230dst\u4f4d\u7f6e static void readsect(void *dst, uint32_t secno) { waitdisk(); outb(0x1F2, 1); // \u8bbe\u7f6e\u8bfb\u53d6\u6247\u533a\u7684\u6570\u76ee\u4e3a1 outb(0x1F3, secno & 0xFF); outb(0x1F4, (secno >> 8) & 0xFF); outb(0x1F5, (secno >> 16) & 0xFF); outb(0x1F6, ((secno >> 24) & 0xF) | 0xE0); // \u4e0a\u9762\u56db\u6761\u6307\u4ee4\u8054\u5408\u5236\u5b9a\u4e86\u6247\u533a\u53f7 // \u5728\u8fd94\u4e2a\u5b57\u8282\u7ebf\u8054\u5408\u6784\u6210\u768432\u4f4d\u53c2\u6570\u4e2d // 29-31\u4f4d\u5f3a\u5236\u8bbe\u4e3a1 // 28\u4f4d(=0)\u8868\u793a\u8bbf\u95ee\"Disk 0\" // 0-27\u4f4d\u662f28\u4f4d\u7684\u504f\u79fb\u91cf outb(0x1F7, 0x20); // 0x20\u547d\u4ee4\uff0c\u8bfb\u53d6\u6247\u533a waitdisk(); insl(0x1F0, dst, SECTSIZE / 4); // \u8bfb\u53d6\u5230dst\u4f4d\u7f6e\uff0c // \u5e7b\u65704\u56e0\u4e3a\u8fd9\u91cc\u4ee5DW\u4e3a\u5355\u4f4d } readseg\u7b80\u5355\u5305\u88c5\u4e86readsect\uff0c\u53ef\u4ee5\u4ece\u8bbe\u5907\u8bfb\u53d6\u4efb\u610f\u957f\u5ea6\u7684\u5185\u5bb9\u3002 static void readseg(uintptr_t va, uint32_t count, uint32_t offset) { uintptr_t end_va = va + count; va -= offset % SECTSIZE; uint32_t secno = (offset / SECTSIZE) + 1; // \u52a01\u56e0\u4e3a0\u6247\u533a\u88ab\u5f15\u5bfc\u5360\u7528 // ELF\u6587\u4ef6\u4ece1\u6247\u533a\u5f00\u59cb for (; va < end_va; va += SECTSIZE, secno ++) { readsect((void *)va, secno); } } \u5728bootmain\u51fd\u6570\u4e2d\uff0c void bootmain(void) { // \u9996\u5148\u8bfb\u53d6ELF\u7684\u5934\u90e8 readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0); // \u901a\u8fc7\u50a8\u5b58\u5728\u5934\u90e8\u7684\u5e7b\u6570\u5224\u65ad\u662f\u5426\u662f\u5408\u6cd5\u7684ELF\u6587\u4ef6 if (ELFHDR->e_magic != ELF_MAGIC) { goto bad; } struct proghdr *ph, *eph; // ELF\u5934\u90e8\u6709\u63cf\u8ff0ELF\u6587\u4ef6\u5e94\u52a0\u8f7d\u5230\u5185\u5b58\u4ec0\u4e48\u4f4d\u7f6e\u7684\u63cf\u8ff0\u8868\uff0c // \u5148\u5c06\u63cf\u8ff0\u8868\u7684\u5934\u5730\u5740\u5b58\u5728ph ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff); eph = ph + ELFHDR->e_phnum; // \u6309\u7167\u63cf\u8ff0\u8868\u5c06ELF\u6587\u4ef6\u4e2d\u6570\u636e\u8f7d\u5165\u5185\u5b58 for (; ph < eph; ph ++) { readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset); } // ELF\u6587\u4ef60x1000\u4f4d\u7f6e\u540e\u9762\u76840xd1ec\u6bd4\u7279\u88ab\u8f7d\u5165\u5185\u5b580x00100000 // ELF\u6587\u4ef60xf000\u4f4d\u7f6e\u540e\u9762\u76840x1d20\u6bd4\u7279\u88ab\u8f7d\u5165\u5185\u5b580x0010e000 // \u6839\u636eELF\u5934\u90e8\u50a8\u5b58\u7684\u5165\u53e3\u4fe1\u606f\uff0c\u627e\u5230\u5185\u6838\u7684\u5165\u53e3 ((void (*)(void))(ELFHDR->e_entry & 0xFFFFFF))(); bad: outw(0x8A00, 0x8A00); outw(0x8A00, 0x8E00); while (1); }","title":"4"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/4/#4bootloaderelfos","text":"\u9996\u5148\u770breadsect\u51fd\u6570\uff0c readsect \u4ece\u8bbe\u5907\u7684\u7b2csecno\u6247\u533a\u8bfb\u53d6\u6570\u636e\u5230dst\u4f4d\u7f6e static void readsect(void *dst, uint32_t secno) { waitdisk(); outb(0x1F2, 1); // \u8bbe\u7f6e\u8bfb\u53d6\u6247\u533a\u7684\u6570\u76ee\u4e3a1 outb(0x1F3, secno & 0xFF); outb(0x1F4, (secno >> 8) & 0xFF); outb(0x1F5, (secno >> 16) & 0xFF); outb(0x1F6, ((secno >> 24) & 0xF) | 0xE0); // \u4e0a\u9762\u56db\u6761\u6307\u4ee4\u8054\u5408\u5236\u5b9a\u4e86\u6247\u533a\u53f7 // \u5728\u8fd94\u4e2a\u5b57\u8282\u7ebf\u8054\u5408\u6784\u6210\u768432\u4f4d\u53c2\u6570\u4e2d // 29-31\u4f4d\u5f3a\u5236\u8bbe\u4e3a1 // 28\u4f4d(=0)\u8868\u793a\u8bbf\u95ee\"Disk 0\" // 0-27\u4f4d\u662f28\u4f4d\u7684\u504f\u79fb\u91cf outb(0x1F7, 0x20); // 0x20\u547d\u4ee4\uff0c\u8bfb\u53d6\u6247\u533a waitdisk(); insl(0x1F0, dst, SECTSIZE / 4); // \u8bfb\u53d6\u5230dst\u4f4d\u7f6e\uff0c // \u5e7b\u65704\u56e0\u4e3a\u8fd9\u91cc\u4ee5DW\u4e3a\u5355\u4f4d } readseg\u7b80\u5355\u5305\u88c5\u4e86readsect\uff0c\u53ef\u4ee5\u4ece\u8bbe\u5907\u8bfb\u53d6\u4efb\u610f\u957f\u5ea6\u7684\u5185\u5bb9\u3002 static void readseg(uintptr_t va, uint32_t count, uint32_t offset) { uintptr_t end_va = va + count; va -= offset % SECTSIZE; uint32_t secno = (offset / SECTSIZE) + 1; // \u52a01\u56e0\u4e3a0\u6247\u533a\u88ab\u5f15\u5bfc\u5360\u7528 // ELF\u6587\u4ef6\u4ece1\u6247\u533a\u5f00\u59cb for (; va < end_va; va += SECTSIZE, secno ++) { readsect((void *)va, secno); } } \u5728bootmain\u51fd\u6570\u4e2d\uff0c void bootmain(void) { // \u9996\u5148\u8bfb\u53d6ELF\u7684\u5934\u90e8 readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0); // \u901a\u8fc7\u50a8\u5b58\u5728\u5934\u90e8\u7684\u5e7b\u6570\u5224\u65ad\u662f\u5426\u662f\u5408\u6cd5\u7684ELF\u6587\u4ef6 if (ELFHDR->e_magic != ELF_MAGIC) { goto bad; } struct proghdr *ph, *eph; // ELF\u5934\u90e8\u6709\u63cf\u8ff0ELF\u6587\u4ef6\u5e94\u52a0\u8f7d\u5230\u5185\u5b58\u4ec0\u4e48\u4f4d\u7f6e\u7684\u63cf\u8ff0\u8868\uff0c // \u5148\u5c06\u63cf\u8ff0\u8868\u7684\u5934\u5730\u5740\u5b58\u5728ph ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff); eph = ph + ELFHDR->e_phnum; // \u6309\u7167\u63cf\u8ff0\u8868\u5c06ELF\u6587\u4ef6\u4e2d\u6570\u636e\u8f7d\u5165\u5185\u5b58 for (; ph < eph; ph ++) { readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset); } // ELF\u6587\u4ef60x1000\u4f4d\u7f6e\u540e\u9762\u76840xd1ec\u6bd4\u7279\u88ab\u8f7d\u5165\u5185\u5b580x00100000 // ELF\u6587\u4ef60xf000\u4f4d\u7f6e\u540e\u9762\u76840x1d20\u6bd4\u7279\u88ab\u8f7d\u5165\u5185\u5b580x0010e000 // \u6839\u636eELF\u5934\u90e8\u50a8\u5b58\u7684\u5165\u53e3\u4fe1\u606f\uff0c\u627e\u5230\u5185\u6838\u7684\u5165\u53e3 ((void (*)(void))(ELFHDR->e_entry & 0xFFFFFF))(); bad: outw(0x8A00, 0x8A00); outw(0x8A00, 0x8E00); while (1); }","title":"\u7ec3\u4e604\uff1a\u5206\u6790bootloader\u52a0\u8f7dELF\u683c\u5f0f\u7684OS\u7684\u8fc7\u7a0b\u3002"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/5/","text":"\u7ec3\u4e605\uff1a\u5b9e\u73b0\u51fd\u6570\u8c03\u7528\u5806\u6808\u8ddf\u8e2a\u51fd\u6570 ss:ebp\u6307\u5411\u7684\u5806\u6808\u4f4d\u7f6e\u50a8\u5b58\u7740caller\u7684ebp\uff0c\u4ee5\u6b64\u4e3a\u7ebf\u7d22\u53ef\u4ee5\u5f97\u5230\u6240\u6709\u4f7f\u7528\u5806\u6808\u7684\u51fd\u6570ebp\u3002 ss:ebp+4\u6307\u5411caller\u8c03\u7528\u65f6\u7684eip\uff0css:ebp+8\u7b49\u662f\uff08\u53ef\u80fd\u7684\uff09\u53c2\u6570\u3002 \u8f93\u51fa\u4e2d\uff0c\u5806\u6808\u6700\u6df1\u4e00\u5c42\u4e3a ebp:0x00007bf8 eip:0x00007d68 \\ args:0x00000000 0x00000000 0x00000000 0x00007c4f <unknow>: -- 0x00007d67 -- \u5176\u5bf9\u5e94\u7684\u662f\u7b2c\u4e00\u4e2a\u4f7f\u7528\u5806\u6808\u7684\u51fd\u6570\uff0cbootmain.c\u4e2d\u7684bootmain\u3002 bootloader\u8bbe\u7f6e\u7684\u5806\u6808\u4ece0x7c00\u5f00\u59cb\uff0c\u4f7f\u7528\"call bootmain\"\u8f6c\u5165bootmain\u51fd\u6570\u3002 call\u6307\u4ee4\u538b\u6808\uff0c\u6240\u4ee5bootmain\u4e2debp\u4e3a0x7bf8\u3002","title":"5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/5/#5","text":"ss:ebp\u6307\u5411\u7684\u5806\u6808\u4f4d\u7f6e\u50a8\u5b58\u7740caller\u7684ebp\uff0c\u4ee5\u6b64\u4e3a\u7ebf\u7d22\u53ef\u4ee5\u5f97\u5230\u6240\u6709\u4f7f\u7528\u5806\u6808\u7684\u51fd\u6570ebp\u3002 ss:ebp+4\u6307\u5411caller\u8c03\u7528\u65f6\u7684eip\uff0css:ebp+8\u7b49\u662f\uff08\u53ef\u80fd\u7684\uff09\u53c2\u6570\u3002 \u8f93\u51fa\u4e2d\uff0c\u5806\u6808\u6700\u6df1\u4e00\u5c42\u4e3a ebp:0x00007bf8 eip:0x00007d68 \\ args:0x00000000 0x00000000 0x00000000 0x00007c4f <unknow>: -- 0x00007d67 -- \u5176\u5bf9\u5e94\u7684\u662f\u7b2c\u4e00\u4e2a\u4f7f\u7528\u5806\u6808\u7684\u51fd\u6570\uff0cbootmain.c\u4e2d\u7684bootmain\u3002 bootloader\u8bbe\u7f6e\u7684\u5806\u6808\u4ece0x7c00\u5f00\u59cb\uff0c\u4f7f\u7528\"call bootmain\"\u8f6c\u5165bootmain\u51fd\u6570\u3002 call\u6307\u4ee4\u538b\u6808\uff0c\u6240\u4ee5bootmain\u4e2debp\u4e3a0x7bf8\u3002","title":"\u7ec3\u4e605\uff1a\u5b9e\u73b0\u51fd\u6570\u8c03\u7528\u5806\u6808\u8ddf\u8e2a\u51fd\u6570"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/6/","text":"\u7ec3\u4e606\uff1a\u5b8c\u5584\u4e2d\u65ad\u521d\u59cb\u5316\u548c\u5904\u7406 \u95ee\u98986.1\uff1a\u4e2d\u65ad\u5411\u91cf\u8868\u4e2d\u4e00\u4e2a\u8868\u9879\u5360\u591a\u5c11\u5b57\u8282\uff1f\u5176\u4e2d\u54ea\u51e0\u4f4d\u4ee3\u8868\u4e2d\u65ad\u5904\u7406\u4ee3\u7801\u7684\u5165\u53e3\uff1f \u4e2d\u65ad\u5411\u91cf\u8868\u4e00\u4e2a\u8868\u9879\u5360\u75288\u5b57\u8282\uff0c\u5176\u4e2d2-3\u5b57\u8282\u662f\u6bb5\u9009\u62e9\u5b50\uff0c0-1\u5b57\u8282\u548c6-7\u5b57\u8282\u62fc\u6210\u4f4d\u79fb\uff0c \u4e24\u8005\u8054\u5408\u4fbf\u662f\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740\u3002 \u95ee\u98986.2\uff1a\u8bf7\u7f16\u7a0b\u5b8c\u5584kern/trap/trap.c\u4e2d\u5bf9\u4e2d\u65ad\u5411\u91cf\u8868\u8fdb\u884c\u521d\u59cb\u5316\u7684\u51fd\u6570idt_init\u3002 \u89c1\u4ee3\u7801 \u95ee\u98986.3\uff1a\u8bf7\u7f16\u7a0b\u5b8c\u5584trap.c\u4e2d\u7684\u4e2d\u65ad\u5904\u7406\u51fd\u6570trap\uff0c\u5728\u5bf9\u65f6\u949f\u4e2d\u65ad\u8fdb\u884c\u5904\u7406\u7684\u90e8\u5206\u586b\u5199trap\u51fd\u6570\u3002 \u89c1\u4ee3\u7801","title":"6"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/6/#6","text":"\u95ee\u98986.1\uff1a\u4e2d\u65ad\u5411\u91cf\u8868\u4e2d\u4e00\u4e2a\u8868\u9879\u5360\u591a\u5c11\u5b57\u8282\uff1f\u5176\u4e2d\u54ea\u51e0\u4f4d\u4ee3\u8868\u4e2d\u65ad\u5904\u7406\u4ee3\u7801\u7684\u5165\u53e3\uff1f \u4e2d\u65ad\u5411\u91cf\u8868\u4e00\u4e2a\u8868\u9879\u5360\u75288\u5b57\u8282\uff0c\u5176\u4e2d2-3\u5b57\u8282\u662f\u6bb5\u9009\u62e9\u5b50\uff0c0-1\u5b57\u8282\u548c6-7\u5b57\u8282\u62fc\u6210\u4f4d\u79fb\uff0c \u4e24\u8005\u8054\u5408\u4fbf\u662f\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740\u3002 \u95ee\u98986.2\uff1a\u8bf7\u7f16\u7a0b\u5b8c\u5584kern/trap/trap.c\u4e2d\u5bf9\u4e2d\u65ad\u5411\u91cf\u8868\u8fdb\u884c\u521d\u59cb\u5316\u7684\u51fd\u6570idt_init\u3002 \u89c1\u4ee3\u7801 \u95ee\u98986.3\uff1a\u8bf7\u7f16\u7a0b\u5b8c\u5584trap.c\u4e2d\u7684\u4e2d\u65ad\u5904\u7406\u51fd\u6570trap\uff0c\u5728\u5bf9\u65f6\u949f\u4e2d\u65ad\u8fdb\u884c\u5904\u7406\u7684\u90e8\u5206\u586b\u5199trap\u51fd\u6570\u3002 \u89c1\u4ee3\u7801","title":"\u7ec3\u4e606\uff1a\u5b8c\u5584\u4e2d\u65ad\u521d\u59cb\u5316\u548c\u5904\u7406"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/7/","text":"\u7ec3\u4e607 \u589e\u52a0syscall\u529f\u80fd\uff0c\u5373\u589e\u52a0\u4e00\u7528\u6237\u6001\u51fd\u6570\uff08\u53ef\u6267\u884c\u4e00\u7279\u5b9a\u7cfb\u7edf\u8c03\u7528\uff1a\u83b7\u5f97\u65f6\u949f\u8ba1\u6570\u503c\uff09\uff0c \u5f53\u5185\u6838\u521d\u59cb\u5b8c\u6bd5\u540e\uff0c\u53ef\u4ece\u5185\u6838\u6001\u8fd4\u56de\u5230\u7528\u6237\u6001\u7684\u51fd\u6570\uff0c\u800c\u7528\u6237\u6001\u7684\u51fd\u6570\u53c8\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u5f97\u5230\u5185\u6838\u6001\u7684\u670d\u52a1 \u5728idt_init\u4e2d\uff0c\u5c06\u7528\u6237\u6001\u8c03\u7528SWITCH_TOK\u4e2d\u65ad\u7684\u6743\u9650\u6253\u5f00\u3002 SETGATE(idt[T_SWITCH_TOK], 1, KERNEL_CS, __vectors[T_SWITCH_TOK], 3); \u5728trap_dispatch\u4e2d\uff0c\u5c06iret\u65f6\u4f1a\u4ece\u5806\u6808\u5f39\u51fa\u7684\u6bb5\u5bc4\u5b58\u5668\u8fdb\u884c\u4fee\u6539 \u5bf9TO User tf->tf_cs = USER_CS; tf->tf_ds = USER_DS; tf->tf_es = USER_DS; tf->tf_ss = USER_DS; \u5bf9TO Kernel tf->tf_cs = KERNEL_CS; tf->tf_ds = KERNEL_DS; tf->tf_es = KERNEL_DS; \u5728lab1_switch_to_user\u4e2d\uff0c\u8c03\u7528T_SWITCH_TOU\u4e2d\u65ad\u3002 \u6ce8\u610f\u4ece\u4e2d\u65ad\u8fd4\u56de\u65f6\uff0c\u4f1a\u591apop\u4e24\u4f4d\uff0c\u5e76\u7528\u8fd9\u4e24\u4f4d\u7684\u503c\u66f4\u65b0ss,sp\uff0c\u635f\u574f\u5806\u6808\u3002 \u6240\u4ee5\u8981\u5148\u628a\u6808\u538b\u4e24\u4f4d\uff0c\u5e76\u5728\u4ece\u4e2d\u65ad\u8fd4\u56de\u540e\u4fee\u590desp\u3002 asm volatile ( \"sub $0x8, %%esp \\n\" \"int %0 \\n\" \"movl %%ebp, %%esp\" : : \"i\"(T_SWITCH_TOU) ); \u5728lab1_switch_to_kernel\u4e2d\uff0c\u8c03\u7528T_SWITCH_TOK\u4e2d\u65ad\u3002 \u6ce8\u610f\u4ece\u4e2d\u65ad\u8fd4\u56de\u65f6\uff0cesp\u4ecd\u5728TSS\u6307\u793a\u7684\u5806\u6808\u4e2d\u3002\u6240\u4ee5\u8981\u5728\u4ece\u4e2d\u65ad\u8fd4\u56de\u540e\u4fee\u590desp\u3002 asm volatile ( \"int %0 \\n\" \"movl %%ebp, %%esp \\n\" : : \"i\"(T_SWITCH_TOK) ); \u4f46\u8fd9\u6837\u4e0d\u80fd\u6b63\u5e38\u8f93\u51fa\u6587\u672c\u3002\u6839\u636e\u63d0\u793a\uff0c\u5728trap_dispatch\u4e2d\u8f6cUser\u6001\u65f6\uff0c\u5c06\u8c03\u7528io\u6240\u9700\u6743\u9650\u964d\u4f4e\u3002 tf->tf_eflags |= 0x3000;","title":"7"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/7/#7","text":"\u589e\u52a0syscall\u529f\u80fd\uff0c\u5373\u589e\u52a0\u4e00\u7528\u6237\u6001\u51fd\u6570\uff08\u53ef\u6267\u884c\u4e00\u7279\u5b9a\u7cfb\u7edf\u8c03\u7528\uff1a\u83b7\u5f97\u65f6\u949f\u8ba1\u6570\u503c\uff09\uff0c \u5f53\u5185\u6838\u521d\u59cb\u5b8c\u6bd5\u540e\uff0c\u53ef\u4ece\u5185\u6838\u6001\u8fd4\u56de\u5230\u7528\u6237\u6001\u7684\u51fd\u6570\uff0c\u800c\u7528\u6237\u6001\u7684\u51fd\u6570\u53c8\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u5f97\u5230\u5185\u6838\u6001\u7684\u670d\u52a1 \u5728idt_init\u4e2d\uff0c\u5c06\u7528\u6237\u6001\u8c03\u7528SWITCH_TOK\u4e2d\u65ad\u7684\u6743\u9650\u6253\u5f00\u3002 SETGATE(idt[T_SWITCH_TOK], 1, KERNEL_CS, __vectors[T_SWITCH_TOK], 3); \u5728trap_dispatch\u4e2d\uff0c\u5c06iret\u65f6\u4f1a\u4ece\u5806\u6808\u5f39\u51fa\u7684\u6bb5\u5bc4\u5b58\u5668\u8fdb\u884c\u4fee\u6539 \u5bf9TO User tf->tf_cs = USER_CS; tf->tf_ds = USER_DS; tf->tf_es = USER_DS; tf->tf_ss = USER_DS; \u5bf9TO Kernel tf->tf_cs = KERNEL_CS; tf->tf_ds = KERNEL_DS; tf->tf_es = KERNEL_DS; \u5728lab1_switch_to_user\u4e2d\uff0c\u8c03\u7528T_SWITCH_TOU\u4e2d\u65ad\u3002 \u6ce8\u610f\u4ece\u4e2d\u65ad\u8fd4\u56de\u65f6\uff0c\u4f1a\u591apop\u4e24\u4f4d\uff0c\u5e76\u7528\u8fd9\u4e24\u4f4d\u7684\u503c\u66f4\u65b0ss,sp\uff0c\u635f\u574f\u5806\u6808\u3002 \u6240\u4ee5\u8981\u5148\u628a\u6808\u538b\u4e24\u4f4d\uff0c\u5e76\u5728\u4ece\u4e2d\u65ad\u8fd4\u56de\u540e\u4fee\u590desp\u3002 asm volatile ( \"sub $0x8, %%esp \\n\" \"int %0 \\n\" \"movl %%ebp, %%esp\" : : \"i\"(T_SWITCH_TOU) ); \u5728lab1_switch_to_kernel\u4e2d\uff0c\u8c03\u7528T_SWITCH_TOK\u4e2d\u65ad\u3002 \u6ce8\u610f\u4ece\u4e2d\u65ad\u8fd4\u56de\u65f6\uff0cesp\u4ecd\u5728TSS\u6307\u793a\u7684\u5806\u6808\u4e2d\u3002\u6240\u4ee5\u8981\u5728\u4ece\u4e2d\u65ad\u8fd4\u56de\u540e\u4fee\u590desp\u3002 asm volatile ( \"int %0 \\n\" \"movl %%ebp, %%esp \\n\" : : \"i\"(T_SWITCH_TOK) ); \u4f46\u8fd9\u6837\u4e0d\u80fd\u6b63\u5e38\u8f93\u51fa\u6587\u672c\u3002\u6839\u636e\u63d0\u793a\uff0c\u5728trap_dispatch\u4e2d\u8f6cUser\u6001\u65f6\uff0c\u5c06\u8c03\u7528io\u6240\u9700\u6743\u9650\u964d\u4f4e\u3002 tf->tf_eflags |= 0x3000;","title":"\u7ec3\u4e607"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/data_struct/","text":"\u6570\u636e\u7ed3\u6784 \u4e2d\u65ad\u7ba1\u7406 /* registers as pushed by pushal */ struct pushregs { uint32_t reg_edi; uint32_t reg_esi; uint32_t reg_ebp; uint32_t reg_oesp; /* Useless */ uint32_t reg_ebx; uint32_t reg_edx; uint32_t reg_ecx; uint32_t reg_eax; }; struct trapframe { struct pushregs tf_regs; uint16_t tf_gs; uint16_t tf_padding0; uint16_t tf_fs; uint16_t tf_padding1; uint16_t tf_es; uint16_t tf_padding2; uint16_t tf_ds; uint16_t tf_padding3; uint32_t tf_trapno; /* below here defined by x86 hardware */ uint32_t tf_err; uintptr_t tf_eip; uint16_t tf_cs; uint16_t tf_padding4; uint32_t tf_eflags; /* below here only when crossing rings, such as from user to kernel */ uintptr_t tf_esp; uint16_t tf_ss; uint16_t tf_padding5; } __attribute__((packed));","title":"Data struct"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/data_struct/#_1","text":"\u4e2d\u65ad\u7ba1\u7406 /* registers as pushed by pushal */ struct pushregs { uint32_t reg_edi; uint32_t reg_esi; uint32_t reg_ebp; uint32_t reg_oesp; /* Useless */ uint32_t reg_ebx; uint32_t reg_edx; uint32_t reg_ecx; uint32_t reg_eax; }; struct trapframe { struct pushregs tf_regs; uint16_t tf_gs; uint16_t tf_padding0; uint16_t tf_fs; uint16_t tf_padding1; uint16_t tf_es; uint16_t tf_padding2; uint16_t tf_ds; uint16_t tf_padding3; uint32_t tf_trapno; /* below here defined by x86 hardware */ uint32_t tf_err; uintptr_t tf_eip; uint16_t tf_cs; uint16_t tf_padding4; uint32_t tf_eflags; /* below here only when crossing rings, such as from user to kernel */ uintptr_t tf_esp; uint16_t tf_ss; uint16_t tf_padding5; } __attribute__((packed));","title":"\u6570\u636e\u7ed3\u6784"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/my_note/","text":"\u7b14\u8bb0 CPU\u4e0a\u7535 \u4e3a\u4fdd\u8bc1\u4e86\u5411\u4e0b\u517c\u5bb9\u4e0e\u7269\u7406\u5730\u5740\u7a7a\u95f4\u7684\u8fde\u7eed\u6027\uff0cIntel\u8ba94GB\u5730\u5740\u7a7a\u95f4\u7684\u6700\u9ad8\u4e00\u4e2a64KB\u7684\u5185\u5bb9\u7b49\u540c\u4e8e1MB\u5730\u5740\u7a7a\u95f4\u7684\u6700\u9ad8\u4e00\u4e2a64K\u7684\u5185\u5bb9\uff0c\u4ece\u800c\u4f7f\u5f97\u6267\u884c\u4e86\u957f\u8df3\u8f6c\u6307\u4ee4\u540e\uff0c\u5176\u5b9e\u662f\u56de\u5230\u4e86\u65e9\u671f\u76848086 CPU\u521d\u59cb\u5316\u63a7\u5236\u6d41\u3002 \u5bfb\u5740\u65b9\u5f0f\u4e3a\uff1aCS.Base+EIP CS=0xf000\uff0cCS.Base=0xffff0000\uff0cEIP=0xfff0 \u7b2c\u4e00\u6761\u6307\u4ee4\uff1a0xfffffff0 JMP F000:E05B CS.Base->0x000f0000 \u7b2c\u4e8c\u6761\u6307\u4ee4\uff1a0x000fe05b BIOS \u6307\u4ee4 BIOS \u786c\u4ef6\u81ea\u68c0\u548c\u521d\u59cb\u5316 \u9009\u62e9\u4e00\u4e2a\u542f\u52a8\u8bbe\u5907\uff08\u4f8b\u5982\u8f6f\u76d8\u3001\u786c\u76d8\u3001\u5149\u76d8\u7b49\uff09 \u8bfb\u53d6\u8be5\u8bbe\u5907\u7684\u7b2c\u4e00\u6247\u533a \u5373\u4e3b\u5f15\u5bfc\u6247\u533a\u6216\u542f\u52a8\u6247\u533a \u5373\u4e3b\u5f15\u5bfc\u6247\u533a\u6216\u542f\u52a8\u6247\u533a \u52300x7c00\u5904 \u8df3\u8f6c\u81f30x7c00\u5904\uff0c\u6267\u884cbootloader bootloader \u5207\u6362\u5230\u4fdd\u62a4\u6a21\u5f0f\uff0c\u542f\u7528\u5206\u6bb5\u673a\u5236 \u901a\u8fc7\u952e\u76d8\u63a7\u5236\u56688042\uff0c\u4f7f\u80fdA20\u63a7\u5236\u7ebf A20\u63a7\u5236\u7ebf\uff080\u65f6\uff09\u662f\u4e3a\u4e86\u5728\u5b9e\u6a21\u5f0f\u4e0b\u6a21\u4eff\u65e9\u671f8086\u5bfb\u5740\u7684\u56de\u7ed5\u7279\u5f81\uff0c\u4e3a\u8bbf\u95ee\u5168\u90e8\u5185\u5b58\u9700\u4f7f\u5176\u4e3a1\u3002 \u52a0\u8f7d\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\uff0c\u5c06CR0\u7b2c0\u4f4d\u7f6e1\uff0c\u66f4\u65b0CS \u66f4\u65b0CS\u4f7f\u7528\u957f\u8df3\u8f6c\u6307\u4ee4 \u8bfb\u78c1\u76d8\u4e2dELF\u6267\u884c\u6587\u4ef6\u683c\u5f0f\u7684kernel\u5230\u5185\u5b58\u6307\u5b9a\u7684\u5185\u5b58\u8d77\u59cb\u5730\u5740\u53bb\uff08ELFHDR=0x10000\uff09\uff0ckernel\u7684\u8d77\u59cb\u5730\u5740\u662f\u5728\u786c\u76d8\u7b2c1\u6247\u533a\u3002 \u628a\u63a7\u5236\u6743\u4ea4\u7ed9ucore\u64cd\u4f5c\u7cfb\u7edf \u4e3b\u5f15\u5bfc\u6247\u533a\u7684\u5927\u5c0f\u4e3a512B\uff0c\u542f\u52a8\u4ee3\u7801\u90e8\u5206\u4e0d\u8d85\u8fc7446B\uff0c obj/bootblock.out \u662f\u79fb\u9664\u6240\u6709\u591a\u4f59\u4fe1\u606f\u7684\u542f\u52a8\u4ee3\u7801\u4e3a442B\u3002 \u5168\u5c40\u63cf\u8ff0\u7b26\u8868\u8d77\u59cb\u5730\u5740\u4fdd\u5b58\u5728\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\u5bc4\u5b58\u5668GDTR\u4e2d\u3002GDTR\u957f48\u4f4d\uff0c\u5176\u4e2d\u9ad832\u4f4d\u4e3a\u57fa\u5730\u5740\uff0c\u4f4e16\u4f4d\u4e3a\u6bb5\u754c\u9650\u3002\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\u4e2d\u7b2c\u4e00\u4e2a\u6bb5\u63cf\u8ff0\u7b26\u8bbe\u5b9a\u4e3a\u7a7a\u6bb5\u63cf\u8ff0\u7b26\u3002GDTR\u4e2d\u7684\u6bb5\u754c\u9650\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u3002\u5bf9\u4e8e\u542b\u6709N\u4e2a\u63cf\u8ff0\u7b26\u7684\u63cf\u8ff0\u7b26\u8868\u7684\u6bb5\u754c\u9650\u901a\u5e38\u53ef\u8bbe\u4e3a8*N-1\uff0c\u5373\u6700\u591a\u53ea\u6709pow(2, 16)/8=8192\u4e2a\u6bb5\uff0c\u6bb5\u9009\u62e9\u5b50\u7684\u7d22\u5f15\u4f4d\u6570\u4e3alog2(8192)=13\u4f4d\u3002 \u8bbf\u95ee\u4e00\u4e2a\u6bb5\u7279\u6743\u7ea7\u68c0\u6d4b\uff1amax(CPL, RPL)<=DPL\uff0c\u4f46\u5806\u6808\u5bc4\u5b58\u5668\u8981\u6c42CPL=RPL=DPL\u3002 \u64cd\u4f5c\u7cfb\u7edf\u521d\u59cb\u5316 - \u521d\u59cb\u5316\u7ec8\u7aef\uff1b - \u663e\u793a\u5b57\u7b26\u4e32\uff1b - \u663e\u793a\u5806\u6808\u4e2d\u7684\u591a\u5c42\u51fd\u6570\u8c03\u7528\u5173\u7cfb\uff1b - \u66f4\u65b0gdt\uff1b - \u521d\u59cb\u5316\u4e2d\u65ad\u63a7\u5236\u5668\uff0c\u8bbe\u7f6e\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\uff0c\u521d\u59cb\u5316\u65f6\u949f\u4e2d\u65ad\uff0c\u4f7f\u80fd\u6574\u4e2a\u7cfb\u7edf\u7684\u4e2d\u65ad\u673a\u5236\uff1b - \u6267\u884cwhile\uff081\uff09\u6b7b\u5faa\u73af\u3002 gdt_init() \u4e2d\u91cd\u65b0\u5212\u5206\u4e86\u6808\u7a7a\u95f4\uff0ckern\u7684ess\u548cesp\u5b9a\u4e49\u5728TTS\u4e2d\uff0c\u5927\u5c0f\u4e3a1KB\u3002 \u5171256\u4e2a\u4e2d\u65ad\u5411\u91cf\uff0c[32, 255]\u53ef\u7531\u64cd\u4f5c\u7cfb\u7edf\u5b9a\u4e49\u3002\u5176\u5730\u5740\u4fdd\u5b58\u5728 __vectors \u4e2d\uff0c\u9700\u8981\u5c06\u5176\u52a0\u8f7d\u5230IDT\u4e2d\u53bb\uff0cIDT\u5305\u542b3\u79cd\u7c7b\u578b\u7684Descriptor\uff1a Task-gate descriptor \uff08\u8fd9\u91cc\u6ca1\u6709\u4f7f\u7528\uff09 Interrupt-gate descriptor \uff08\u4e2d\u65ad\u65b9\u5f0f\u7528\u5230\uff0cInterrupt\u4f1a\u88abCPU\u81ea\u52a8\u7981\u6b62\uff09 Trap-gate descriptor\uff08\u7cfb\u7edf\u8c03\u7528\u7528\u5230\uff0cCPU\u4e0d\u6539\u53d8\u4e2d\u65ad\uff09 \u8bbf\u95ee\u4e00\u4e2a\u95e8\u7279\u6743\u7ea7\u68c0\u6d4b\uff1aCPL<=DPL\uff08\u95e8\uff09\u4e14CPL>=DPL\uff08\u6bb5\uff09\uff0cCPL>DPL\uff08\u6bb5\uff09\u6ee1\u8db3\u4e86\u7528\u6237\u6001\u5230\u7cfb\u7edf\u6001\u7684\u8df3\u8f6c\u3002\u6240\u6709IDT\u9879\u4e2d\u53ea\u6709 idt[T_SWITCH_TOK=121] \uff08\u5bf9\u5e94\u7cfb\u7edf\u8c03\u7528\uff09\u4e2d\u7684DPL\u4e3a DPL_USER=3 \uff0c\u5176\u4ed6\u7684\u4e3a DPL_KERNEL=0 \u3002\u800c\u95e8\u4e2d\u9009\u62e9\u5b50\u4f4d\u6570\u4e3a16\u4f4d\uff0c\u5b9e\u9645\u53ea\u7528\u4e86\u9ad813\u4f4d\uff0c\u4f4e3\u4f4d\u4e3a0\u3002 \u4e2d\u65ad\u5904\u7406\u65f6\uff1a - \u7531\u786c\u4ef6\u4fdd\u5b58\u5b8c\u5bf9\u5e94\u7684\u503c\u540e\uff0c\u591a\u6570\u4e2d\u65ad\u5747\u538b\u51650\u4ee3\u8868error_code\uff0c\u4ee5\u53ca\u76f8\u5e94\u7684\u4e2d\u65ad\u53f7\uff0c\u67d0\u4e9b\u4e2d\u65ad\u7684error_code\u7531\u786c\u4ef6\u538b\u5165\uff0c\u5982 vector8 \u5230 vector14 \u3002 - \u670d\u52a1\u4f8b\u7a0b\u53c2\u6570\u4fdd\u5b58\u5728 trapframe \u4e2d\uff0c\u5176\u4e2d pushal \u538b\u6808\u7684\u987a\u5e8f\u4e3a\uff1aeax\uff0cecx\uff0cedx\uff0cebx\uff0coesp\uff0cebp\uff0cebp\uff0cesi\uff0cedi \u9057\u7559\u95ee\u9898 // boot/bootmain.c // \u4e3a\u4ec0\u4e48\u8bfb8\u4e2a\u6247\u533a 88: readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0); // kern/debug/kdebug.c // \u4e3a\u4ec0\u4e48\u8981\u5148\u8bfbebp\uff0c\u5426\u5219print_debugifo\u4f1a\u51fa\u9519 305: uint32_t ebp = read_ebp(), eip = read_eip();","title":"My note"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/my_note/#_1","text":"CPU\u4e0a\u7535 \u4e3a\u4fdd\u8bc1\u4e86\u5411\u4e0b\u517c\u5bb9\u4e0e\u7269\u7406\u5730\u5740\u7a7a\u95f4\u7684\u8fde\u7eed\u6027\uff0cIntel\u8ba94GB\u5730\u5740\u7a7a\u95f4\u7684\u6700\u9ad8\u4e00\u4e2a64KB\u7684\u5185\u5bb9\u7b49\u540c\u4e8e1MB\u5730\u5740\u7a7a\u95f4\u7684\u6700\u9ad8\u4e00\u4e2a64K\u7684\u5185\u5bb9\uff0c\u4ece\u800c\u4f7f\u5f97\u6267\u884c\u4e86\u957f\u8df3\u8f6c\u6307\u4ee4\u540e\uff0c\u5176\u5b9e\u662f\u56de\u5230\u4e86\u65e9\u671f\u76848086 CPU\u521d\u59cb\u5316\u63a7\u5236\u6d41\u3002 \u5bfb\u5740\u65b9\u5f0f\u4e3a\uff1aCS.Base+EIP CS=0xf000\uff0cCS.Base=0xffff0000\uff0cEIP=0xfff0 \u7b2c\u4e00\u6761\u6307\u4ee4\uff1a0xfffffff0 JMP F000:E05B CS.Base->0x000f0000 \u7b2c\u4e8c\u6761\u6307\u4ee4\uff1a0x000fe05b BIOS \u6307\u4ee4 BIOS \u786c\u4ef6\u81ea\u68c0\u548c\u521d\u59cb\u5316 \u9009\u62e9\u4e00\u4e2a\u542f\u52a8\u8bbe\u5907\uff08\u4f8b\u5982\u8f6f\u76d8\u3001\u786c\u76d8\u3001\u5149\u76d8\u7b49\uff09 \u8bfb\u53d6\u8be5\u8bbe\u5907\u7684\u7b2c\u4e00\u6247\u533a \u5373\u4e3b\u5f15\u5bfc\u6247\u533a\u6216\u542f\u52a8\u6247\u533a \u5373\u4e3b\u5f15\u5bfc\u6247\u533a\u6216\u542f\u52a8\u6247\u533a \u52300x7c00\u5904 \u8df3\u8f6c\u81f30x7c00\u5904\uff0c\u6267\u884cbootloader bootloader \u5207\u6362\u5230\u4fdd\u62a4\u6a21\u5f0f\uff0c\u542f\u7528\u5206\u6bb5\u673a\u5236 \u901a\u8fc7\u952e\u76d8\u63a7\u5236\u56688042\uff0c\u4f7f\u80fdA20\u63a7\u5236\u7ebf A20\u63a7\u5236\u7ebf\uff080\u65f6\uff09\u662f\u4e3a\u4e86\u5728\u5b9e\u6a21\u5f0f\u4e0b\u6a21\u4eff\u65e9\u671f8086\u5bfb\u5740\u7684\u56de\u7ed5\u7279\u5f81\uff0c\u4e3a\u8bbf\u95ee\u5168\u90e8\u5185\u5b58\u9700\u4f7f\u5176\u4e3a1\u3002 \u52a0\u8f7d\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\uff0c\u5c06CR0\u7b2c0\u4f4d\u7f6e1\uff0c\u66f4\u65b0CS \u66f4\u65b0CS\u4f7f\u7528\u957f\u8df3\u8f6c\u6307\u4ee4 \u8bfb\u78c1\u76d8\u4e2dELF\u6267\u884c\u6587\u4ef6\u683c\u5f0f\u7684kernel\u5230\u5185\u5b58\u6307\u5b9a\u7684\u5185\u5b58\u8d77\u59cb\u5730\u5740\u53bb\uff08ELFHDR=0x10000\uff09\uff0ckernel\u7684\u8d77\u59cb\u5730\u5740\u662f\u5728\u786c\u76d8\u7b2c1\u6247\u533a\u3002 \u628a\u63a7\u5236\u6743\u4ea4\u7ed9ucore\u64cd\u4f5c\u7cfb\u7edf \u4e3b\u5f15\u5bfc\u6247\u533a\u7684\u5927\u5c0f\u4e3a512B\uff0c\u542f\u52a8\u4ee3\u7801\u90e8\u5206\u4e0d\u8d85\u8fc7446B\uff0c obj/bootblock.out \u662f\u79fb\u9664\u6240\u6709\u591a\u4f59\u4fe1\u606f\u7684\u542f\u52a8\u4ee3\u7801\u4e3a442B\u3002 \u5168\u5c40\u63cf\u8ff0\u7b26\u8868\u8d77\u59cb\u5730\u5740\u4fdd\u5b58\u5728\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\u5bc4\u5b58\u5668GDTR\u4e2d\u3002GDTR\u957f48\u4f4d\uff0c\u5176\u4e2d\u9ad832\u4f4d\u4e3a\u57fa\u5730\u5740\uff0c\u4f4e16\u4f4d\u4e3a\u6bb5\u754c\u9650\u3002\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\u4e2d\u7b2c\u4e00\u4e2a\u6bb5\u63cf\u8ff0\u7b26\u8bbe\u5b9a\u4e3a\u7a7a\u6bb5\u63cf\u8ff0\u7b26\u3002GDTR\u4e2d\u7684\u6bb5\u754c\u9650\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u3002\u5bf9\u4e8e\u542b\u6709N\u4e2a\u63cf\u8ff0\u7b26\u7684\u63cf\u8ff0\u7b26\u8868\u7684\u6bb5\u754c\u9650\u901a\u5e38\u53ef\u8bbe\u4e3a8*N-1\uff0c\u5373\u6700\u591a\u53ea\u6709pow(2, 16)/8=8192\u4e2a\u6bb5\uff0c\u6bb5\u9009\u62e9\u5b50\u7684\u7d22\u5f15\u4f4d\u6570\u4e3alog2(8192)=13\u4f4d\u3002 \u8bbf\u95ee\u4e00\u4e2a\u6bb5\u7279\u6743\u7ea7\u68c0\u6d4b\uff1amax(CPL, RPL)<=DPL\uff0c\u4f46\u5806\u6808\u5bc4\u5b58\u5668\u8981\u6c42CPL=RPL=DPL\u3002 \u64cd\u4f5c\u7cfb\u7edf\u521d\u59cb\u5316 - \u521d\u59cb\u5316\u7ec8\u7aef\uff1b - \u663e\u793a\u5b57\u7b26\u4e32\uff1b - \u663e\u793a\u5806\u6808\u4e2d\u7684\u591a\u5c42\u51fd\u6570\u8c03\u7528\u5173\u7cfb\uff1b - \u66f4\u65b0gdt\uff1b - \u521d\u59cb\u5316\u4e2d\u65ad\u63a7\u5236\u5668\uff0c\u8bbe\u7f6e\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\uff0c\u521d\u59cb\u5316\u65f6\u949f\u4e2d\u65ad\uff0c\u4f7f\u80fd\u6574\u4e2a\u7cfb\u7edf\u7684\u4e2d\u65ad\u673a\u5236\uff1b - \u6267\u884cwhile\uff081\uff09\u6b7b\u5faa\u73af\u3002 gdt_init() \u4e2d\u91cd\u65b0\u5212\u5206\u4e86\u6808\u7a7a\u95f4\uff0ckern\u7684ess\u548cesp\u5b9a\u4e49\u5728TTS\u4e2d\uff0c\u5927\u5c0f\u4e3a1KB\u3002 \u5171256\u4e2a\u4e2d\u65ad\u5411\u91cf\uff0c[32, 255]\u53ef\u7531\u64cd\u4f5c\u7cfb\u7edf\u5b9a\u4e49\u3002\u5176\u5730\u5740\u4fdd\u5b58\u5728 __vectors \u4e2d\uff0c\u9700\u8981\u5c06\u5176\u52a0\u8f7d\u5230IDT\u4e2d\u53bb\uff0cIDT\u5305\u542b3\u79cd\u7c7b\u578b\u7684Descriptor\uff1a Task-gate descriptor \uff08\u8fd9\u91cc\u6ca1\u6709\u4f7f\u7528\uff09 Interrupt-gate descriptor \uff08\u4e2d\u65ad\u65b9\u5f0f\u7528\u5230\uff0cInterrupt\u4f1a\u88abCPU\u81ea\u52a8\u7981\u6b62\uff09 Trap-gate descriptor\uff08\u7cfb\u7edf\u8c03\u7528\u7528\u5230\uff0cCPU\u4e0d\u6539\u53d8\u4e2d\u65ad\uff09 \u8bbf\u95ee\u4e00\u4e2a\u95e8\u7279\u6743\u7ea7\u68c0\u6d4b\uff1aCPL<=DPL\uff08\u95e8\uff09\u4e14CPL>=DPL\uff08\u6bb5\uff09\uff0cCPL>DPL\uff08\u6bb5\uff09\u6ee1\u8db3\u4e86\u7528\u6237\u6001\u5230\u7cfb\u7edf\u6001\u7684\u8df3\u8f6c\u3002\u6240\u6709IDT\u9879\u4e2d\u53ea\u6709 idt[T_SWITCH_TOK=121] \uff08\u5bf9\u5e94\u7cfb\u7edf\u8c03\u7528\uff09\u4e2d\u7684DPL\u4e3a DPL_USER=3 \uff0c\u5176\u4ed6\u7684\u4e3a DPL_KERNEL=0 \u3002\u800c\u95e8\u4e2d\u9009\u62e9\u5b50\u4f4d\u6570\u4e3a16\u4f4d\uff0c\u5b9e\u9645\u53ea\u7528\u4e86\u9ad813\u4f4d\uff0c\u4f4e3\u4f4d\u4e3a0\u3002 \u4e2d\u65ad\u5904\u7406\u65f6\uff1a - \u7531\u786c\u4ef6\u4fdd\u5b58\u5b8c\u5bf9\u5e94\u7684\u503c\u540e\uff0c\u591a\u6570\u4e2d\u65ad\u5747\u538b\u51650\u4ee3\u8868error_code\uff0c\u4ee5\u53ca\u76f8\u5e94\u7684\u4e2d\u65ad\u53f7\uff0c\u67d0\u4e9b\u4e2d\u65ad\u7684error_code\u7531\u786c\u4ef6\u538b\u5165\uff0c\u5982 vector8 \u5230 vector14 \u3002 - \u670d\u52a1\u4f8b\u7a0b\u53c2\u6570\u4fdd\u5b58\u5728 trapframe \u4e2d\uff0c\u5176\u4e2d pushal \u538b\u6808\u7684\u987a\u5e8f\u4e3a\uff1aeax\uff0cecx\uff0cedx\uff0cebx\uff0coesp\uff0cebp\uff0cebp\uff0cesi\uff0cedi \u9057\u7559\u95ee\u9898 // boot/bootmain.c // \u4e3a\u4ec0\u4e48\u8bfb8\u4e2a\u6247\u533a 88: readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0); // kern/debug/kdebug.c // \u4e3a\u4ec0\u4e48\u8981\u5148\u8bfbebp\uff0c\u5426\u5219print_debugifo\u4f1a\u51fa\u9519 305: uint32_t ebp = read_ebp(), eip = read_eip();","title":"\u7b14\u8bb0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab2/1/","text":"\u7ec3\u4e601\uff1a\u5b9e\u73b0first-fit\u8fde\u7eed\u7269\u7406\u5185\u5b58\u5206\u914d\u7b97\u6cd5 \u4fee\u6539default_pmm.c\u4e2ddefault_alloc_pages\u51fd\u6570\u548cdefault_free_pages\u51fd\u6570\uff0c\u5b9e\u73b0first_fit\u5185\u5b58\u5206\u914d\u7b97\u6cd5\u3002 \u5b9e\u73b0\u4e2d\u6240\u7528\u5230\u7684\u6570\u636e\u7ed3\u6784\u4e3a\u53cc\u5411\u94fe\u8868\uff0c\u91c7\u7528\u5b9e\u9a8c\u6307\u5bfc\u4e66\u4e2d\u4ecb\u7ecd\u7684\u65b9\u6cd5\uff0c\u5728\u4e00\u5757\u8fde\u7eed\u7684\u9875\u7a7a\u95f4\u5185\uff0c\u4f7f\u7528\u5730\u5740\u6700\u5c0f\u7684\u4e00\u9875\uff08Head Page\uff09\u8bb0\u5f55\u8fd9\u5757\u5185\u5b58\u5730\u5740\u7684\u5927\u5c0f\uff0c\u5e76\u901a\u8fc7\u6210\u5458\u53d8\u91cfpage_link\u6765\u7ef4\u62a4\u94fe\u8868\u7ed3\u6784\u3002\u5177\u4f53\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a static struct Page * default_alloc_pages(size_t n) { assert(n > 0); if (n > nr_free) { return NULL; } struct Page *page = NULL; list_entry_t *le = &free_list; while ((le = list_next(le)) != &free_list) { struct Page *p = le2page(le, page_link); if (p->property >= n) { page = p; break; } } //\u5c06\u5269\u4f59\u7a7a\u95f2\u533a\u57df\u7531\u6dfb\u52a0\u5230\u94fe\u8868\u5934\u6539\u81f3\u6309\u5730\u5740\u6392\u5e8f\u7684\u4f4d\u7f6e if (page != NULL) { struct Page *p = page; if (page->property > n) { p = page + n; p->property = page->property - n; //Page.flags\u53ea\u5728\u5934\u4e00\u9875\u6709\u7528\uff0c\u5176\u4f59\u7a7a\u95f2\u9875\u5168\u4e3a0 SetPageProperty(p); page->property = n; list_add(&page->page_link, &(p->page_link)); } list_del(&(page->page_link)); nr_free -= n; } return page; } \u5206\u914d\u5185\u5b58\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u5224\u65ad\u7a7a\u95f2\u5730\u5740\u7a7a\u95f4\u662f\u5426\u5927\u4e8e\u6240\u9700\u7a7a\u95f4 \u4ecefree_list\u5f00\u59cb\uff0c\u904d\u5386\u94fe\u8868\uff0c\u76f4\u5230\u627e\u5230\u7b2c\u4e00\u5757\u4e0d\u5c0f\u4e8e\u6240\u9700\u7a7a\u95f4\u5927\u5c0f\u7684\u5185\u5b58\u5757 \u5206\u914d\u8fde\u7eed\u7684n\u9875\uff0c\u4fee\u6539\u6807\u5fd7\u4f4d \u4ece\u94fe\u8868\u4e2d\u5220\u9664\u6b64\u5185\u5b58\u5757\uff0c\u5982\u679c\u6709\u5269\u4f59\u7684\u5c0f\u7684\u5185\u5b58\u5757\uff0c\u91cd\u65b0\u63d2\u5165\u94fe\u8868 \u91ca\u653e\u5185\u5b58\u7684\u51fd\u6570\u5b9e\u73b0\u4e3a\uff1a static void default_free_pages(struct Page *base, size_t n) { assert(n > 0); struct Page *p = base; for (; p != base + n; p ++) { //\u91ca\u653e\u533a\u57df\u4e0d\u662f\u64cd\u4f5c\u7cfb\u7edf\u7a7a\u95f4\u4e14\u4e0d\u542b\u7a7a\u95f2\u533a\u57df\u7684\u5934\u9875 assert(!PageReserved(p) && !PageProperty(p)); p->flags = p->property = 0; set_page_ref(p, 0); } base->property = n; SetPageProperty(base); while (le != &free_list) { p = le2page(le, page_link); le = list_next(le); // \u5bfb\u627e\u53ef\u4ee5\u5408\u5e76\u7684\u7a7a\u95f4 if (base + base->property == p) { base->property += p->property; ClearPageProperty(p); list_del(&(p->page_link)); //\u7531\u4e8e\u662ffirst-fit\u7a7a\u95f2\u5757\u6309\u5730\u5740\u6392\u5e8f\uff0c\u627e\u5230\u4e86\u53ef\u4ee5break\u8df3\u51fa\u5faa\u73af break; } else if (p + p->property == base) { p->property += base->property; ClearPageProperty(base); base = p; list_del(&(p->page_link)); } } nr_free += n; le = list_next(&free_list); // \u63d2\u5165\u7a7a\u95f2\u94fe\u8868 while (le != &free_list) { p = le2page(le, page_link); if (base + base->property <= p) { assert(base + base->property != p); break; } le = list_next(le); } list_add_before(le, &(base->page_link)); } \u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u4fee\u6539\u91ca\u653e\u9875\u7684\u6807\u5fd7\u4f4d \u627e\u5230\u94fe\u8868\u4e2d\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u5e76\u63d2\u5165 \u5224\u65ad\u6b64\u5757\u7a7a\u4f59\u7a7a\u95f4\u80fd\u5426\u4e0e\u524d\u540e\u7a7a\u4f59\u7a7a\u95f4\u5408\u5e76\uff0c\u5982\u679c\u53ef\u4ee5\u5c06\u5176\u5408\u5e76 \u95ee\u98981.1\uff1a \u4f60\u7684first fit\u7b97\u6cd5\u662f\u5426\u6709\u8fdb\u4e00\u6b65\u7684\u6539\u8fdb\u7a7a\u95f4 \u6709\uff0c\u53ef\u4ee5\u91c7\u7528\u5e73\u8861\u6811\u7684\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u7a7a\u95f2\u5730\u5740\u7a7a\u95f4\uff0c\u8fd9\u6837\u5728\u5206\u914d\u548c\u56de\u6536\u7a7a\u95f4\u65f6\uff0c\u67e5\u627e\u5185\u5b58\u7684\u64cd\u4f5c\u53ef\u4ee5\u66f4\u5feb\u3002","title":"1"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab2/1/#1first-fit","text":"\u4fee\u6539default_pmm.c\u4e2ddefault_alloc_pages\u51fd\u6570\u548cdefault_free_pages\u51fd\u6570\uff0c\u5b9e\u73b0first_fit\u5185\u5b58\u5206\u914d\u7b97\u6cd5\u3002 \u5b9e\u73b0\u4e2d\u6240\u7528\u5230\u7684\u6570\u636e\u7ed3\u6784\u4e3a\u53cc\u5411\u94fe\u8868\uff0c\u91c7\u7528\u5b9e\u9a8c\u6307\u5bfc\u4e66\u4e2d\u4ecb\u7ecd\u7684\u65b9\u6cd5\uff0c\u5728\u4e00\u5757\u8fde\u7eed\u7684\u9875\u7a7a\u95f4\u5185\uff0c\u4f7f\u7528\u5730\u5740\u6700\u5c0f\u7684\u4e00\u9875\uff08Head Page\uff09\u8bb0\u5f55\u8fd9\u5757\u5185\u5b58\u5730\u5740\u7684\u5927\u5c0f\uff0c\u5e76\u901a\u8fc7\u6210\u5458\u53d8\u91cfpage_link\u6765\u7ef4\u62a4\u94fe\u8868\u7ed3\u6784\u3002\u5177\u4f53\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a static struct Page * default_alloc_pages(size_t n) { assert(n > 0); if (n > nr_free) { return NULL; } struct Page *page = NULL; list_entry_t *le = &free_list; while ((le = list_next(le)) != &free_list) { struct Page *p = le2page(le, page_link); if (p->property >= n) { page = p; break; } } //\u5c06\u5269\u4f59\u7a7a\u95f2\u533a\u57df\u7531\u6dfb\u52a0\u5230\u94fe\u8868\u5934\u6539\u81f3\u6309\u5730\u5740\u6392\u5e8f\u7684\u4f4d\u7f6e if (page != NULL) { struct Page *p = page; if (page->property > n) { p = page + n; p->property = page->property - n; //Page.flags\u53ea\u5728\u5934\u4e00\u9875\u6709\u7528\uff0c\u5176\u4f59\u7a7a\u95f2\u9875\u5168\u4e3a0 SetPageProperty(p); page->property = n; list_add(&page->page_link, &(p->page_link)); } list_del(&(page->page_link)); nr_free -= n; } return page; } \u5206\u914d\u5185\u5b58\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u5224\u65ad\u7a7a\u95f2\u5730\u5740\u7a7a\u95f4\u662f\u5426\u5927\u4e8e\u6240\u9700\u7a7a\u95f4 \u4ecefree_list\u5f00\u59cb\uff0c\u904d\u5386\u94fe\u8868\uff0c\u76f4\u5230\u627e\u5230\u7b2c\u4e00\u5757\u4e0d\u5c0f\u4e8e\u6240\u9700\u7a7a\u95f4\u5927\u5c0f\u7684\u5185\u5b58\u5757 \u5206\u914d\u8fde\u7eed\u7684n\u9875\uff0c\u4fee\u6539\u6807\u5fd7\u4f4d \u4ece\u94fe\u8868\u4e2d\u5220\u9664\u6b64\u5185\u5b58\u5757\uff0c\u5982\u679c\u6709\u5269\u4f59\u7684\u5c0f\u7684\u5185\u5b58\u5757\uff0c\u91cd\u65b0\u63d2\u5165\u94fe\u8868 \u91ca\u653e\u5185\u5b58\u7684\u51fd\u6570\u5b9e\u73b0\u4e3a\uff1a static void default_free_pages(struct Page *base, size_t n) { assert(n > 0); struct Page *p = base; for (; p != base + n; p ++) { //\u91ca\u653e\u533a\u57df\u4e0d\u662f\u64cd\u4f5c\u7cfb\u7edf\u7a7a\u95f4\u4e14\u4e0d\u542b\u7a7a\u95f2\u533a\u57df\u7684\u5934\u9875 assert(!PageReserved(p) && !PageProperty(p)); p->flags = p->property = 0; set_page_ref(p, 0); } base->property = n; SetPageProperty(base); while (le != &free_list) { p = le2page(le, page_link); le = list_next(le); // \u5bfb\u627e\u53ef\u4ee5\u5408\u5e76\u7684\u7a7a\u95f4 if (base + base->property == p) { base->property += p->property; ClearPageProperty(p); list_del(&(p->page_link)); //\u7531\u4e8e\u662ffirst-fit\u7a7a\u95f2\u5757\u6309\u5730\u5740\u6392\u5e8f\uff0c\u627e\u5230\u4e86\u53ef\u4ee5break\u8df3\u51fa\u5faa\u73af break; } else if (p + p->property == base) { p->property += base->property; ClearPageProperty(base); base = p; list_del(&(p->page_link)); } } nr_free += n; le = list_next(&free_list); // \u63d2\u5165\u7a7a\u95f2\u94fe\u8868 while (le != &free_list) { p = le2page(le, page_link); if (base + base->property <= p) { assert(base + base->property != p); break; } le = list_next(le); } list_add_before(le, &(base->page_link)); } \u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u4fee\u6539\u91ca\u653e\u9875\u7684\u6807\u5fd7\u4f4d \u627e\u5230\u94fe\u8868\u4e2d\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u5e76\u63d2\u5165 \u5224\u65ad\u6b64\u5757\u7a7a\u4f59\u7a7a\u95f4\u80fd\u5426\u4e0e\u524d\u540e\u7a7a\u4f59\u7a7a\u95f4\u5408\u5e76\uff0c\u5982\u679c\u53ef\u4ee5\u5c06\u5176\u5408\u5e76 \u95ee\u98981.1\uff1a \u4f60\u7684first fit\u7b97\u6cd5\u662f\u5426\u6709\u8fdb\u4e00\u6b65\u7684\u6539\u8fdb\u7a7a\u95f4 \u6709\uff0c\u53ef\u4ee5\u91c7\u7528\u5e73\u8861\u6811\u7684\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u7a7a\u95f2\u5730\u5740\u7a7a\u95f4\uff0c\u8fd9\u6837\u5728\u5206\u914d\u548c\u56de\u6536\u7a7a\u95f4\u65f6\uff0c\u67e5\u627e\u5185\u5b58\u7684\u64cd\u4f5c\u53ef\u4ee5\u66f4\u5feb\u3002","title":"\u7ec3\u4e601\uff1a\u5b9e\u73b0first-fit\u8fde\u7eed\u7269\u7406\u5185\u5b58\u5206\u914d\u7b97\u6cd5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab2/2/","text":"\u7ec3\u4e602\uff1a\u5b9e\u73b0\u5bfb\u627e\u865a\u62df\u5730\u5740\u5bf9\u5e94\u7684\u9875\u8868\u9879 \u4fee\u6539pmm.c\u4e2d\u7684get_pte\u51fd\u6570\uff0c\u589e\u52a0\u4e0b\u9762\u4ee3\u7801\uff1a pde_t *pdep = &pgdir[PDX(la)]; if (!(*pdep & PTE_P)) { struct Page *page; if (!create || (page = alloc_page()) == NULL) { return NULL; } set_page_ref(page, 1); uintptr_t pa = page2pa(page); memset(KADDR(pa), 0, PGSIZE); *pdep = pa | PTE_U | PTE_W | PTE_P; } return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)]; \u4ee3\u7801\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u6839\u636e\u865a\u5730\u5740\u7684\u9ad8\u5341\u4f4d\u67e5\u8be2\u9875\u76ee\u5f55\uff0c\u627e\u5230\u9875\u8868\u9879\u7684pdep \u68c0\u67e5\u8be5\u9875\u662f\u5426\u5728\u5185\u5b58\u4e2d\uff0c\u5982\u679c\u4e0d\u5728\uff0c\u521b\u5efa\u8be5\u9875\uff0c\u5e76\u66f4\u65b0\u76f8\u5173\u4fe1\u606f \u6839\u636e\u865a\u62df\u5730\u5740\u7684\u4e2d\u95f4\u5341\u4f4d\uff0c\u627e\u5230\u865a\u62df\u5730\u5740\u5bf9\u5e94\u7684\u9875\u8868\u9879 \u95ee\u98982.1\uff1a\u8bf7\u63cf\u8ff0\u9875\u76ee\u5f55\u9879\uff08Pag Director Entry\uff09\u548c\u9875\u8868\uff08Page Table Entry\uff09\u4e2d\u6bcf\u4e2a\u7ec4\u6210\u90e8\u5206\u7684\u542b\u4e49\u548c\u4ee5\u53ca\u5bf9ucore\u800c\u8a00\u7684\u6f5c\u5728\u7528\u5904\u3002 \u9875\u76ee\u5f55\u9879\u5185\u5bb9 = (\u9875\u8868\u8d77\u59cb\u7269\u7406\u5730\u5740 & ~ 0x0FFF) | PTE_U | PTE_W | PTE_P \u9875\u8868\u9879\u5185\u5bb9 = (pa & ~0x0FFF) | PTE_P | PTE_W \u9875\u76ee\u5f55\u9879\u548c\u9875\u8868\u9879\u7684\u9ad820\u4f4d\u5b58\u50a8\u76f8\u5e94\u7684\u7269\u7406\u9875\u5e27\u53f7\uff0c\u4f4e12\u4f4d\u5b58\u50a8\u6807\u5fd7\u4f4d\u3002\u6807\u5fd7\u4f4d\u7684\u5b9a\u4e49\u4e3a\uff1a #define PTE_P 0x001 // Present #define PTE_W 0x002 // Writeable #define PTE_U 0x004 // User #define PTE_PWT 0x008 // Write-Through #define PTE_PCD 0x010 // Cache-Disable #define PTE_A 0x020 // Accessed #define PTE_D 0x040 // Dirty #define PTE_PS 0x080 // Page Size #define PTE_MBZ 0x180 // Bits must be zero #define PTE_AVAIL 0xE00 // Available for software use // The PTE_AVAIL bits aren't used by the kernel or interpreted by the // hardware, so user processes are allowed to set them arbitrarily. \u95ee\u98982.2\uff1a\u5982\u679cucore\u6267\u884c\u8fc7\u7a0b\u4e2d\u8bbf\u95ee\u5185\u5b58\uff0c\u51fa\u73b0\u4e86\u9875\u8bbf\u95ee\u5f02\u5e38\uff0c\u8bf7\u95ee\u786c\u4ef6\u8981\u505a\u54ea\u4e9b\u4e8b\u60c5\uff1f \u5728\u9875\u673a\u5236\u542f\u52a8\u540e\uff0c\u4f46\u4e2d\u65ad\u5411\u91cf\u8868\u672a\u52a0\u8f7d\u65f6\uff0c\u4f1a\u505c\u673a\u5d29\u6e83\u3002","title":"2"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab2/2/#2","text":"\u4fee\u6539pmm.c\u4e2d\u7684get_pte\u51fd\u6570\uff0c\u589e\u52a0\u4e0b\u9762\u4ee3\u7801\uff1a pde_t *pdep = &pgdir[PDX(la)]; if (!(*pdep & PTE_P)) { struct Page *page; if (!create || (page = alloc_page()) == NULL) { return NULL; } set_page_ref(page, 1); uintptr_t pa = page2pa(page); memset(KADDR(pa), 0, PGSIZE); *pdep = pa | PTE_U | PTE_W | PTE_P; } return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)]; \u4ee3\u7801\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u6839\u636e\u865a\u5730\u5740\u7684\u9ad8\u5341\u4f4d\u67e5\u8be2\u9875\u76ee\u5f55\uff0c\u627e\u5230\u9875\u8868\u9879\u7684pdep \u68c0\u67e5\u8be5\u9875\u662f\u5426\u5728\u5185\u5b58\u4e2d\uff0c\u5982\u679c\u4e0d\u5728\uff0c\u521b\u5efa\u8be5\u9875\uff0c\u5e76\u66f4\u65b0\u76f8\u5173\u4fe1\u606f \u6839\u636e\u865a\u62df\u5730\u5740\u7684\u4e2d\u95f4\u5341\u4f4d\uff0c\u627e\u5230\u865a\u62df\u5730\u5740\u5bf9\u5e94\u7684\u9875\u8868\u9879 \u95ee\u98982.1\uff1a\u8bf7\u63cf\u8ff0\u9875\u76ee\u5f55\u9879\uff08Pag Director Entry\uff09\u548c\u9875\u8868\uff08Page Table Entry\uff09\u4e2d\u6bcf\u4e2a\u7ec4\u6210\u90e8\u5206\u7684\u542b\u4e49\u548c\u4ee5\u53ca\u5bf9ucore\u800c\u8a00\u7684\u6f5c\u5728\u7528\u5904\u3002 \u9875\u76ee\u5f55\u9879\u5185\u5bb9 = (\u9875\u8868\u8d77\u59cb\u7269\u7406\u5730\u5740 & ~ 0x0FFF) | PTE_U | PTE_W | PTE_P \u9875\u8868\u9879\u5185\u5bb9 = (pa & ~0x0FFF) | PTE_P | PTE_W \u9875\u76ee\u5f55\u9879\u548c\u9875\u8868\u9879\u7684\u9ad820\u4f4d\u5b58\u50a8\u76f8\u5e94\u7684\u7269\u7406\u9875\u5e27\u53f7\uff0c\u4f4e12\u4f4d\u5b58\u50a8\u6807\u5fd7\u4f4d\u3002\u6807\u5fd7\u4f4d\u7684\u5b9a\u4e49\u4e3a\uff1a #define PTE_P 0x001 // Present #define PTE_W 0x002 // Writeable #define PTE_U 0x004 // User #define PTE_PWT 0x008 // Write-Through #define PTE_PCD 0x010 // Cache-Disable #define PTE_A 0x020 // Accessed #define PTE_D 0x040 // Dirty #define PTE_PS 0x080 // Page Size #define PTE_MBZ 0x180 // Bits must be zero #define PTE_AVAIL 0xE00 // Available for software use // The PTE_AVAIL bits aren't used by the kernel or interpreted by the // hardware, so user processes are allowed to set them arbitrarily. \u95ee\u98982.2\uff1a\u5982\u679cucore\u6267\u884c\u8fc7\u7a0b\u4e2d\u8bbf\u95ee\u5185\u5b58\uff0c\u51fa\u73b0\u4e86\u9875\u8bbf\u95ee\u5f02\u5e38\uff0c\u8bf7\u95ee\u786c\u4ef6\u8981\u505a\u54ea\u4e9b\u4e8b\u60c5\uff1f \u5728\u9875\u673a\u5236\u542f\u52a8\u540e\uff0c\u4f46\u4e2d\u65ad\u5411\u91cf\u8868\u672a\u52a0\u8f7d\u65f6\uff0c\u4f1a\u505c\u673a\u5d29\u6e83\u3002","title":"\u7ec3\u4e602\uff1a\u5b9e\u73b0\u5bfb\u627e\u865a\u62df\u5730\u5740\u5bf9\u5e94\u7684\u9875\u8868\u9879"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab2/3/","text":"\u7ec3\u4e603\uff1a\u91ca\u653e\u67d0\u865a\u5730\u5740\u6240\u5728\u7684\u9875\u5e76\u53d6\u6d88\u5bf9\u5e94\u4e8c\u7ea7\u9875\u8868\u9879\u7684\u6620\u5c04 \u4fee\u6539pmm.c\u4e2d\u7684page_remove_pte\u51fd\u6570\u3002 if (*ptep & PTE_P) { struct Page *page = pte2page(*ptep); if (page_ref_dec(page) == 0) { free_page(page); } *ptep = 0; tlb_invalidate(pgdir, la); } \u4ee3\u7801\u6267\u884c\u6b65\u9aa4\u4e3a\uff1a \u627e\u5230\u9875\u8868\u9879\u5bf9\u5e94\u7684\u7269\u7406\u9875\u5e27 \u5c06\u9875\u7684\u5bf9\u5e94\u7684\u88ab\u5f15\u7528\u6b21\u6570\u51cf\u4e00 \u5982\u679cref\u4e3a0\uff0c\u91ca\u653e\u8be5\u9875 \u6e05\u9664\u9875\u8868\u9879\uff0c\u5e76\u66f4\u65b0tlb \u95ee\u98983.1\uff1a\u6570\u636e\u7ed3\u6784Page\u7684\u5168\u5c40\u53d8\u91cf\uff08\u5176\u5b9e\u662f\u4e00\u4e2a\u6570\u7ec4\uff09\u7684\u6bcf\u4e00\u9879\u4e0e\u9875\u8868\u4e2d\u7684\u9875\u76ee\u5f55\u9879\u548c\u9875\u8868\u9879\u6709\u65e0\u5bf9\u5e94\u5173\u7cfb\uff1f\u5982\u679c\u6709\uff0c\u5176\u5bf9\u5e94\u5173\u7cfb\u662f\u5565\uff1f \u5728pmm.c\u7684page_init\u51fd\u6570\u4e2d\uff1a npage = maxpa / PGSIZE; pages = (struct Page *)ROUNDUP((void *)end, PGSIZE); for (i = 0; i < npage; i ++) { SetPageReserved(pages + i); } uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage); \u4ece\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u9996\u5148\u8ba1\u7b97\u51fa\u9875\u7684\u603b\u6570npage\uff0c\u7136\u540e\u5206\u914d\u5185\u5b58pages\u4e3aPage\u6570\u7ec4\u7684\u5934\u6307\u9488\uff0c\u5e76\u5bf9npage\u9879\u521d\u59cb\u5316\u3002\u53ef\u89c1\u6bcf\u4e00\u9879\u5bf9\u5e94\u7269\u7406\u7a7a\u95f4\u7684\u6bcf\u4e00\u9875\u3002\u9875\u8868\u9879\u4e2d\u7684\u57fa\u5740\u4e3a\u7269\u7406\u5730\u5740\uff0c\u53ef\u4ee5\u8f6c\u5316\u4e3aPage\u4e2d\u76f8\u5e94\u7684\u9879\u3002 \u95ee\u98983.2\uff1a\u5982\u679c\u5e0c\u671b\u865a\u62df\u5730\u5740\u4e0e\u7269\u7406\u5730\u5740\u76f8\u7b49\uff0c\u5219\u9700\u8981\u5982\u4f55\u4fee\u6539lab2\uff0c\u5b8c\u6210\u6b64\u4e8b\uff1f\u9f13\u52b1\u901a\u8fc7\u7f16\u7a0b\u6765\u5177\u4f53\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898 \u4fee\u6539memlayout.h\uff1a #define KERNBASE 0x00000000 #define VPT 0x3AC00000 \u4fee\u6539kernel.ld\uff1a . = 0x00100000; \u5728entry.s\u4e2d\u53bb\u6389\u7f6eboot_pgdir[0]\u4e3a0\u7684\u9879\uff0c\u56e0\u4e3a\u6b64\u65f6\u865a\u5730\u5740\u4e0e\u5b9e\u5730\u5740\u4e00\u4e00\u5bf9\u5e94\uff1a # xorl %eax, %eax # movl %eax, __boot_pgdir","title":"3"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab2/3/#3","text":"\u4fee\u6539pmm.c\u4e2d\u7684page_remove_pte\u51fd\u6570\u3002 if (*ptep & PTE_P) { struct Page *page = pte2page(*ptep); if (page_ref_dec(page) == 0) { free_page(page); } *ptep = 0; tlb_invalidate(pgdir, la); } \u4ee3\u7801\u6267\u884c\u6b65\u9aa4\u4e3a\uff1a \u627e\u5230\u9875\u8868\u9879\u5bf9\u5e94\u7684\u7269\u7406\u9875\u5e27 \u5c06\u9875\u7684\u5bf9\u5e94\u7684\u88ab\u5f15\u7528\u6b21\u6570\u51cf\u4e00 \u5982\u679cref\u4e3a0\uff0c\u91ca\u653e\u8be5\u9875 \u6e05\u9664\u9875\u8868\u9879\uff0c\u5e76\u66f4\u65b0tlb \u95ee\u98983.1\uff1a\u6570\u636e\u7ed3\u6784Page\u7684\u5168\u5c40\u53d8\u91cf\uff08\u5176\u5b9e\u662f\u4e00\u4e2a\u6570\u7ec4\uff09\u7684\u6bcf\u4e00\u9879\u4e0e\u9875\u8868\u4e2d\u7684\u9875\u76ee\u5f55\u9879\u548c\u9875\u8868\u9879\u6709\u65e0\u5bf9\u5e94\u5173\u7cfb\uff1f\u5982\u679c\u6709\uff0c\u5176\u5bf9\u5e94\u5173\u7cfb\u662f\u5565\uff1f \u5728pmm.c\u7684page_init\u51fd\u6570\u4e2d\uff1a npage = maxpa / PGSIZE; pages = (struct Page *)ROUNDUP((void *)end, PGSIZE); for (i = 0; i < npage; i ++) { SetPageReserved(pages + i); } uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage); \u4ece\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u9996\u5148\u8ba1\u7b97\u51fa\u9875\u7684\u603b\u6570npage\uff0c\u7136\u540e\u5206\u914d\u5185\u5b58pages\u4e3aPage\u6570\u7ec4\u7684\u5934\u6307\u9488\uff0c\u5e76\u5bf9npage\u9879\u521d\u59cb\u5316\u3002\u53ef\u89c1\u6bcf\u4e00\u9879\u5bf9\u5e94\u7269\u7406\u7a7a\u95f4\u7684\u6bcf\u4e00\u9875\u3002\u9875\u8868\u9879\u4e2d\u7684\u57fa\u5740\u4e3a\u7269\u7406\u5730\u5740\uff0c\u53ef\u4ee5\u8f6c\u5316\u4e3aPage\u4e2d\u76f8\u5e94\u7684\u9879\u3002 \u95ee\u98983.2\uff1a\u5982\u679c\u5e0c\u671b\u865a\u62df\u5730\u5740\u4e0e\u7269\u7406\u5730\u5740\u76f8\u7b49\uff0c\u5219\u9700\u8981\u5982\u4f55\u4fee\u6539lab2\uff0c\u5b8c\u6210\u6b64\u4e8b\uff1f\u9f13\u52b1\u901a\u8fc7\u7f16\u7a0b\u6765\u5177\u4f53\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898 \u4fee\u6539memlayout.h\uff1a #define KERNBASE 0x00000000 #define VPT 0x3AC00000 \u4fee\u6539kernel.ld\uff1a . = 0x00100000; \u5728entry.s\u4e2d\u53bb\u6389\u7f6eboot_pgdir[0]\u4e3a0\u7684\u9879\uff0c\u56e0\u4e3a\u6b64\u65f6\u865a\u5730\u5740\u4e0e\u5b9e\u5730\u5740\u4e00\u4e00\u5bf9\u5e94\uff1a # xorl %eax, %eax # movl %eax, __boot_pgdir","title":"\u7ec3\u4e603\uff1a\u91ca\u653e\u67d0\u865a\u5730\u5740\u6240\u5728\u7684\u9875\u5e76\u53d6\u6d88\u5bf9\u5e94\u4e8c\u7ea7\u9875\u8868\u9879\u7684\u6620\u5c04"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab2/data_stuct/","text":"\u6570\u636e\u7ed3\u6784 \u7269\u7406\u9875\u7ba1\u7406 struct Page { int ref; // page frame's reference counter uint32_t flags; // array of flags that describe the status of the page frame unsigned int property; // the num of free block, used in first fit pm manager list_entry_t page_link; // free list link // lab3\u4e2d\u52a0\u5165\uff0c\u5b9e\u73b0\u9875\u66ff\u6362\u7b97\u6cd5 list_entry_t pra_page_link; // used for pra (page replace algorithm) uintptr_t pra_vaddr; // used for pra (page replace algorithm) }; /* Flags describing the status of a page frame */ #define PG_reserved 0 // the page descriptor is reserved for kernel or unusable #define PG_property 1 // the member 'property' is valid \u9875\u76ee\u5f55\u8868/\u9875\u8868 /* page table/directory entry flags */ #define PTE_P 0x001 // Present #define PTE_W 0x002 // Writeable #define PTE_U 0x004 // User #define PTE_PWT 0x008 // Write-Through #define PTE_PCD 0x010 // Cache-Disable #define PTE_A 0x020 // Accessed #define PTE_D 0x040 // Dirty #define PTE_PS 0x080 // Page Size #define PTE_MBZ 0x180 // Bits must be zero #define PTE_AVAIL 0xE00 // Available for software use // The PTE_AVAIL bits aren't used by the kernel or interpreted by the // hardware, so user processes are allowed to set them arbitrarily. #define PTE_USER (PTE_U | PTE_W | PTE_P)","title":"Data stuct"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab2/data_stuct/#_1","text":"\u7269\u7406\u9875\u7ba1\u7406 struct Page { int ref; // page frame's reference counter uint32_t flags; // array of flags that describe the status of the page frame unsigned int property; // the num of free block, used in first fit pm manager list_entry_t page_link; // free list link // lab3\u4e2d\u52a0\u5165\uff0c\u5b9e\u73b0\u9875\u66ff\u6362\u7b97\u6cd5 list_entry_t pra_page_link; // used for pra (page replace algorithm) uintptr_t pra_vaddr; // used for pra (page replace algorithm) }; /* Flags describing the status of a page frame */ #define PG_reserved 0 // the page descriptor is reserved for kernel or unusable #define PG_property 1 // the member 'property' is valid \u9875\u76ee\u5f55\u8868/\u9875\u8868 /* page table/directory entry flags */ #define PTE_P 0x001 // Present #define PTE_W 0x002 // Writeable #define PTE_U 0x004 // User #define PTE_PWT 0x008 // Write-Through #define PTE_PCD 0x010 // Cache-Disable #define PTE_A 0x020 // Accessed #define PTE_D 0x040 // Dirty #define PTE_PS 0x080 // Page Size #define PTE_MBZ 0x180 // Bits must be zero #define PTE_AVAIL 0xE00 // Available for software use // The PTE_AVAIL bits aren't used by the kernel or interpreted by the // hardware, so user processes are allowed to set them arbitrarily. #define PTE_USER (PTE_U | PTE_W | PTE_P)","title":"\u6570\u636e\u7ed3\u6784"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab2/my_note/","text":"\u7b14\u8bb0 probe_memory e820map: memory: 0009fc00, [00000000, 0009fbff], type = 1. memory: 00000400, [0009fc00, 0009ffff], type = 2. memory: 00010000, [000f0000, 000fffff], type = 2. memory: 07ee0000, [00100000, 07fdffff], type = 1. memory: 00020000, [07fe0000, 07ffffff], type = 2. memory: 00040000, [fffc0000, ffffffff], type = 2. kern_entry \u548cgdt\u4e0eidt\u4e0d\u540c\uff0cpdt\u7684\u9996\u5730\u5740\u4fdd\u5b58\u5728cr3\u4e2d\uff0c\u4f7f\u7528movl\u52a0\u8f7d\uff0c\u800cgdt\u4e0eidt\u5206\u522b\u4f7f\u7528lgdt\u4e0elidt\u52a0\u8f7d\u5230gdtr\u4e0eidtr\u4e2d\u3002\u9875\u673a\u5236\u7684\u542f\u52a8\u5bf9\u5e94cr0\u7684bit31\uff0c\u6bb5\u673a\u5236\u662fbit0\u3002 \u9875\u673a\u5236\u542f\u7528\u524d\uff0c\u64cd\u4f5c\u7cfb\u7edf\u8fd0\u884c\u5728\u4f4e\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u6240\u4ee5\u9875\u673a\u5236\u542f\u7528\u540e\u8981\u4fdd\u6301\u4f4e\u865a\u62df\u5730\u5740\u7684\u5bf9\u7b49\u6620\u5c04\uff0c\u540c\u65f6\u4e5f\u8981\u5c06\u9ad8\u865a\u62df\u5730\u5740\u6620\u5c04\u5230\u4f4e\u7269\u7406\u5730\u5740\uff0c\u5728\u8df3\u8f6c\u5230\u9ad8\u865a\u62df\u5730\u5740\u540e\u5c31\u53ef\u4ee5\u53d6\u6d88\u5bf9\u7b49\u6620\u5c04\u4e86\u3002 \u542f\u52a8\u9875\u673a\u5236\u540e\uff0c\u6620\u5c04\u5173\u7cfb\u4e3a\uff1a \u5176\u4e2d 0xc00000 \u6709\u8bef\uff0c\u5e94\u4e3a 0xc0000000 \u3002 page_init() \u4e0b\u56fe\u4e3a\u6267\u884c page_init() \u540e\u7684\u7269\u7406\u7a7a\u95f4\u3002\u5171128.87M\uff0c struct Page \u4e00\u517132736\u4e2a, \u7cfb\u7edf\u5360\u7528 443\u4e2a\u3002 mem_end ---------> +---------------------------------+ 0x07fe0000 | Empty Memory (*) | freemem_begin ----> +---------------------------------+ 0x001bb000 pages_end --------> +---------------------------------+ 0x001bad80 | pages for free_mem | freepages_begin --> +---------------------------------+ 0x0011d29c | pages for kern + pages_begin ------> +---------------------------------+ 0x0011b000 end --------------> +---------------------------------+ 0x0011af28 | ucore bss | edata ------------> +---------------------------------+ 0x0011a000 | ucore data | boot_pgdir -------> + ------------------------------- + 0x0015ca00 | | etext ------------> +---------------------------------+ 0x00105a94 | | entry-------------> +--- ----+ 0x00100000 | ucore text | | | | | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W) \u5f53kern\u865a\u62df\u5730\u5740\u6269\u5c55\u5230\u6700\u5927\u65f6\uff0cpdt\u4e2d 0xc00>>2 =768\u5230 0xf7f>>2 =991\u9879\u88ab\u586b\u5145\u3002\u7531\u4e8e\u591a\u4e2a\u865a\u62df\u5730\u5740\u53ef\u4ee5\u5bf9\u5e94\u4e00\u4e2a\u7269\u7406\u5730\u5740\uff0c\u9009\u53d6\u7b2c (VPT=0xfac<<20)>>22 =1003\u9879\u8868\u793apdt\u53e6\u4e00\u4e2a\u865a\u62df\u5730\u5740\uff0c\u5373\u4e3avpd= {VPT>>22, VPT>>12, 12{1b'0}} \uff0c\u8fd9\u662f\u4e00\u79cd\u81ea\u6620\u5c04\uff0c\u628apdt\u672c\u8eab\u6620\u5c04\u4e3a\u4e00\u4e2apt\u4e0e\u4e00\u4e2a\u7269\u7406\u9875\u3002\u540c\u7406\u9875\u76ee\u5f55\u8868\u4e2d\u7b2ci\u4e2a\u9875\u8868\u7684\u865a\u62df\u5730\u5740\u5c31\u4e3avpt_i= {VPT>>22, (10-i\u7684\u4f4d\u6570){1b'0}, {i}, 12{1b'0}} \u3002 \u6700\u540e\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e3a\u4e0b\u56fe\u3002 4G ---------------> +---------------------------------+ | | | Empty Memory (*) | | | +---------------------------------+ 0xFB000000 | Cur. Page Table (Kern, RW) | RW/-- PTSIZE VPT --------------> +---------------------------------+ 0xFAC00000 | Invalid Memory (*) | --/-- KERNTOP ----------> +---------------------------------+ 0xF8000000 | | | Remapped Physical Memory | RW/-- KMEMSIZE | | KERNBASE ---------> +---------------------------------+ 0xC0000000 | | | | | | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ boot_map_segment() \u7a7a\u95f2\u7a7a\u95f4\u5f00\u59cb\u4e8e0x001bb000\u5904\uff0c\u57280~4M\u7a7a\u95f4\u5185\uff0c\u6240\u4ee5 boot_map_segment() \u6269\u5c55\u6620\u5c04\u7a7a\u95f4\u65f6\uff0c\u53ef \u4ee5\u4f7f\u7528\u5176\u865a\u62df\u5730\u5740\u6765\u521d\u59cb\u5316\u9875\u8868\uff0c\u4e0b\u56fe\u4e3a\u6267\u884c boot_map_segment() \u540e\u7684\u7269\u7406\u7a7a\u95f4\uff0c\u5171KMEMSIZE / 4M = 224\u4e2a\u9875\u8868\uff0c\u5360\u7528224 * 4K = 0xe0000\u7684\u7269\u7406\u7a7a\u95f4\uff0c0x0029b000\u4e5f\u57280~4M\u7a7a\u95f4\u5185\u3002 mem_end ---------> +---------------------------------+ 0x07fe0000 | Empty Memory (*) | page_table_end ---> +---------------------------------+ 0x0029b000 | page table | page_table_begin -> +---------------------------------+ 0x001bb000 gdt_init() \u5206\u6bb5\uff0ckern\u7684\u5185\u6838\u6808\u4e3a0-2k\u7684\u865a\u62df\u5730\u5740\u3002 ltr\u662f\u5c06gdt\u4e2dtss\u63cf\u8ff0\u7b26\u7d22\u5f15\u503c\u52a0\u8f7d\u5230tr\u4e2d\u3002 print_pgdir() -------------------- BEGIN -------------------- PDE(0e0) c0000000-f8000000 38000000 urw |-- PTE(38000) c0000000-f8000000 38000000 -rw PDE(001) fac00000-fb000000 00400000 -rw |-- PTE(000e0) faf00000-fafe0000 000e0000 urw |-- PTE(00001) fafeb000-fafec000 00001000 -rw --------------------- END --------------------- \u901a\u8fc7 \u9057\u7559\u95ee\u9898 KMEMSIZE \u5b9a\u4e49\u4e3a0x38000000\u7684\u4f9d\u636e\u662f\u4ec0\u4e48\uff1b \u6267\u884c\u5b8c boot_map_segment \u540e\uff0c\u9ad8\u7ebf\u6027\u5730\u5740\u59820xe8000000\u6620\u5c04\u7684\u7269\u7406\u5730\u5740\u5e94\u4e3a0x28000000\uff0c\u4f46\u5b9e\u9645\u63a2\u6d4b\u5230\u7684\u7269\u7406\u5730\u5740\u6700\u5927\u4e3a0x07fdffff\uff0c\u6d4b\u8bd5\u4e2d\u8fd9\u7c7b\u5730\u5740\u8bfb\u4e3a0\uff0c\u5199\u5165\u65e0\u6cd5\u4fdd\u5b58\u3002","title":"My note"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab2/my_note/#_1","text":"probe_memory e820map: memory: 0009fc00, [00000000, 0009fbff], type = 1. memory: 00000400, [0009fc00, 0009ffff], type = 2. memory: 00010000, [000f0000, 000fffff], type = 2. memory: 07ee0000, [00100000, 07fdffff], type = 1. memory: 00020000, [07fe0000, 07ffffff], type = 2. memory: 00040000, [fffc0000, ffffffff], type = 2. kern_entry \u548cgdt\u4e0eidt\u4e0d\u540c\uff0cpdt\u7684\u9996\u5730\u5740\u4fdd\u5b58\u5728cr3\u4e2d\uff0c\u4f7f\u7528movl\u52a0\u8f7d\uff0c\u800cgdt\u4e0eidt\u5206\u522b\u4f7f\u7528lgdt\u4e0elidt\u52a0\u8f7d\u5230gdtr\u4e0eidtr\u4e2d\u3002\u9875\u673a\u5236\u7684\u542f\u52a8\u5bf9\u5e94cr0\u7684bit31\uff0c\u6bb5\u673a\u5236\u662fbit0\u3002 \u9875\u673a\u5236\u542f\u7528\u524d\uff0c\u64cd\u4f5c\u7cfb\u7edf\u8fd0\u884c\u5728\u4f4e\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u6240\u4ee5\u9875\u673a\u5236\u542f\u7528\u540e\u8981\u4fdd\u6301\u4f4e\u865a\u62df\u5730\u5740\u7684\u5bf9\u7b49\u6620\u5c04\uff0c\u540c\u65f6\u4e5f\u8981\u5c06\u9ad8\u865a\u62df\u5730\u5740\u6620\u5c04\u5230\u4f4e\u7269\u7406\u5730\u5740\uff0c\u5728\u8df3\u8f6c\u5230\u9ad8\u865a\u62df\u5730\u5740\u540e\u5c31\u53ef\u4ee5\u53d6\u6d88\u5bf9\u7b49\u6620\u5c04\u4e86\u3002 \u542f\u52a8\u9875\u673a\u5236\u540e\uff0c\u6620\u5c04\u5173\u7cfb\u4e3a\uff1a \u5176\u4e2d 0xc00000 \u6709\u8bef\uff0c\u5e94\u4e3a 0xc0000000 \u3002 page_init() \u4e0b\u56fe\u4e3a\u6267\u884c page_init() \u540e\u7684\u7269\u7406\u7a7a\u95f4\u3002\u5171128.87M\uff0c struct Page \u4e00\u517132736\u4e2a, \u7cfb\u7edf\u5360\u7528 443\u4e2a\u3002 mem_end ---------> +---------------------------------+ 0x07fe0000 | Empty Memory (*) | freemem_begin ----> +---------------------------------+ 0x001bb000 pages_end --------> +---------------------------------+ 0x001bad80 | pages for free_mem | freepages_begin --> +---------------------------------+ 0x0011d29c | pages for kern + pages_begin ------> +---------------------------------+ 0x0011b000 end --------------> +---------------------------------+ 0x0011af28 | ucore bss | edata ------------> +---------------------------------+ 0x0011a000 | ucore data | boot_pgdir -------> + ------------------------------- + 0x0015ca00 | | etext ------------> +---------------------------------+ 0x00105a94 | | entry-------------> +--- ----+ 0x00100000 | ucore text | | | | | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W) \u5f53kern\u865a\u62df\u5730\u5740\u6269\u5c55\u5230\u6700\u5927\u65f6\uff0cpdt\u4e2d 0xc00>>2 =768\u5230 0xf7f>>2 =991\u9879\u88ab\u586b\u5145\u3002\u7531\u4e8e\u591a\u4e2a\u865a\u62df\u5730\u5740\u53ef\u4ee5\u5bf9\u5e94\u4e00\u4e2a\u7269\u7406\u5730\u5740\uff0c\u9009\u53d6\u7b2c (VPT=0xfac<<20)>>22 =1003\u9879\u8868\u793apdt\u53e6\u4e00\u4e2a\u865a\u62df\u5730\u5740\uff0c\u5373\u4e3avpd= {VPT>>22, VPT>>12, 12{1b'0}} \uff0c\u8fd9\u662f\u4e00\u79cd\u81ea\u6620\u5c04\uff0c\u628apdt\u672c\u8eab\u6620\u5c04\u4e3a\u4e00\u4e2apt\u4e0e\u4e00\u4e2a\u7269\u7406\u9875\u3002\u540c\u7406\u9875\u76ee\u5f55\u8868\u4e2d\u7b2ci\u4e2a\u9875\u8868\u7684\u865a\u62df\u5730\u5740\u5c31\u4e3avpt_i= {VPT>>22, (10-i\u7684\u4f4d\u6570){1b'0}, {i}, 12{1b'0}} \u3002 \u6700\u540e\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e3a\u4e0b\u56fe\u3002 4G ---------------> +---------------------------------+ | | | Empty Memory (*) | | | +---------------------------------+ 0xFB000000 | Cur. Page Table (Kern, RW) | RW/-- PTSIZE VPT --------------> +---------------------------------+ 0xFAC00000 | Invalid Memory (*) | --/-- KERNTOP ----------> +---------------------------------+ 0xF8000000 | | | Remapped Physical Memory | RW/-- KMEMSIZE | | KERNBASE ---------> +---------------------------------+ 0xC0000000 | | | | | | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ boot_map_segment() \u7a7a\u95f2\u7a7a\u95f4\u5f00\u59cb\u4e8e0x001bb000\u5904\uff0c\u57280~4M\u7a7a\u95f4\u5185\uff0c\u6240\u4ee5 boot_map_segment() \u6269\u5c55\u6620\u5c04\u7a7a\u95f4\u65f6\uff0c\u53ef \u4ee5\u4f7f\u7528\u5176\u865a\u62df\u5730\u5740\u6765\u521d\u59cb\u5316\u9875\u8868\uff0c\u4e0b\u56fe\u4e3a\u6267\u884c boot_map_segment() \u540e\u7684\u7269\u7406\u7a7a\u95f4\uff0c\u5171KMEMSIZE / 4M = 224\u4e2a\u9875\u8868\uff0c\u5360\u7528224 * 4K = 0xe0000\u7684\u7269\u7406\u7a7a\u95f4\uff0c0x0029b000\u4e5f\u57280~4M\u7a7a\u95f4\u5185\u3002 mem_end ---------> +---------------------------------+ 0x07fe0000 | Empty Memory (*) | page_table_end ---> +---------------------------------+ 0x0029b000 | page table | page_table_begin -> +---------------------------------+ 0x001bb000 gdt_init() \u5206\u6bb5\uff0ckern\u7684\u5185\u6838\u6808\u4e3a0-2k\u7684\u865a\u62df\u5730\u5740\u3002 ltr\u662f\u5c06gdt\u4e2dtss\u63cf\u8ff0\u7b26\u7d22\u5f15\u503c\u52a0\u8f7d\u5230tr\u4e2d\u3002 print_pgdir() -------------------- BEGIN -------------------- PDE(0e0) c0000000-f8000000 38000000 urw |-- PTE(38000) c0000000-f8000000 38000000 -rw PDE(001) fac00000-fb000000 00400000 -rw |-- PTE(000e0) faf00000-fafe0000 000e0000 urw |-- PTE(00001) fafeb000-fafec000 00001000 -rw --------------------- END --------------------- \u901a\u8fc7 \u9057\u7559\u95ee\u9898 KMEMSIZE \u5b9a\u4e49\u4e3a0x38000000\u7684\u4f9d\u636e\u662f\u4ec0\u4e48\uff1b \u6267\u884c\u5b8c boot_map_segment \u540e\uff0c\u9ad8\u7ebf\u6027\u5730\u5740\u59820xe8000000\u6620\u5c04\u7684\u7269\u7406\u5730\u5740\u5e94\u4e3a0x28000000\uff0c\u4f46\u5b9e\u9645\u63a2\u6d4b\u5230\u7684\u7269\u7406\u5730\u5740\u6700\u5927\u4e3a0x07fdffff\uff0c\u6d4b\u8bd5\u4e2d\u8fd9\u7c7b\u5730\u5740\u8bfb\u4e3a0\uff0c\u5199\u5165\u65e0\u6cd5\u4fdd\u5b58\u3002","title":"\u7b14\u8bb0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab3/1/","text":"\u7ec3\u4e601\uff1a\u7ed9\u672a\u88ab\u6620\u5c04\u7684\u5730\u5740\u6620\u5c04\u4e0a\u7269\u7406\u9875 \u5728kern/mm/vmm.c\u4e2d\u5b8c\u6210do_pgfault()\u51fd\u6570\uff0c\u7ed9\u672a\u88ab\u6620\u5c04\u7684\u5730\u5740\u6620\u5c04\u7269\u7406\u9875\u3002\u6dfb\u52a0\u7684\u4ee3\u7801\u4e3a\uff1a ptep = get_pte(mm->pgdir, addr, 1); if(ptep == NULL) { cprintf(\"do_pgfault failed: get_pte error!\\n\"); goto failed; } if(*ptep == 0) { if(pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) { cprintf(\"do_pgfault failed: pgdir_alloc_page failed!\\n\"); goto failed; } } else{ } \u6267\u884c\u8fc7\u7a0b\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u6839\u636e\u865a\u62df\u5730\u5740\u83b7\u5f97pte \u5982\u679cpte\u4e3a\u7a7a\uff0c\u5219\u62a5\u9519 \u5982\u679cpte\u5185\u5bb9\u4e3a0\uff0c\u5219\u5206\u914d\u76f8\u5e94\u7684\u7269\u7406\u9875 \u95ee\u98981.1\uff1a\u8bf7\u63cf\u8ff0\u9875\u76ee\u5f55\u9879\uff08Pag Director Entry\uff09\u548c\u9875\u8868\uff08Page Table Entry\uff09\u4e2d\u7ec4\u6210\u90e8\u5206\u5bf9ucore\u5b9e\u73b0\u9875\u66ff\u6362\u7b97\u6cd5\u7684\u6f5c\u5728\u7528\u5904\u3002 \u63d0\u4f9b\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\u7684\u8f6c\u6362\uff0c\u7528\u4e8e\u5224\u65ad\u76f8\u5e94\u7684\u7269\u7406\u5730\u5740\u662f\u5426\u5408\u6cd5\u3001\u7269\u7406\u9875\u662f\u5426\u5728\u5185\u5b58\u4e2d\u4ee5\u53ca\u76f8\u5e94\u7684\u8bbf\u95ee\u6743\u9650 \u95ee\u98981.2\uff1a\u5982\u679cucore\u7684\u7f3a\u9875\u670d\u52a1\u4f8b\u7a0b\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u8bbf\u95ee\u5185\u5b58\uff0c\u51fa\u73b0\u4e86\u9875\u8bbf\u95ee\u5f02\u5e38\uff0c\u8bf7\u95ee\u786c\u4ef6\u8981\u505a\u54ea\u4e9b\u4e8b\u60c5\uff1f \u786c\u4ef6\u4ea7\u751f\u4e2d\u65ad\uff0c\u518d\u6b21\u6761\u7528\u7f3a\u9875\u670d\u52a1\u4f8b\u7a0b\u3002","title":"1"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab3/1/#1","text":"\u5728kern/mm/vmm.c\u4e2d\u5b8c\u6210do_pgfault()\u51fd\u6570\uff0c\u7ed9\u672a\u88ab\u6620\u5c04\u7684\u5730\u5740\u6620\u5c04\u7269\u7406\u9875\u3002\u6dfb\u52a0\u7684\u4ee3\u7801\u4e3a\uff1a ptep = get_pte(mm->pgdir, addr, 1); if(ptep == NULL) { cprintf(\"do_pgfault failed: get_pte error!\\n\"); goto failed; } if(*ptep == 0) { if(pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) { cprintf(\"do_pgfault failed: pgdir_alloc_page failed!\\n\"); goto failed; } } else{ } \u6267\u884c\u8fc7\u7a0b\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u6839\u636e\u865a\u62df\u5730\u5740\u83b7\u5f97pte \u5982\u679cpte\u4e3a\u7a7a\uff0c\u5219\u62a5\u9519 \u5982\u679cpte\u5185\u5bb9\u4e3a0\uff0c\u5219\u5206\u914d\u76f8\u5e94\u7684\u7269\u7406\u9875 \u95ee\u98981.1\uff1a\u8bf7\u63cf\u8ff0\u9875\u76ee\u5f55\u9879\uff08Pag Director Entry\uff09\u548c\u9875\u8868\uff08Page Table Entry\uff09\u4e2d\u7ec4\u6210\u90e8\u5206\u5bf9ucore\u5b9e\u73b0\u9875\u66ff\u6362\u7b97\u6cd5\u7684\u6f5c\u5728\u7528\u5904\u3002 \u63d0\u4f9b\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\u7684\u8f6c\u6362\uff0c\u7528\u4e8e\u5224\u65ad\u76f8\u5e94\u7684\u7269\u7406\u5730\u5740\u662f\u5426\u5408\u6cd5\u3001\u7269\u7406\u9875\u662f\u5426\u5728\u5185\u5b58\u4e2d\u4ee5\u53ca\u76f8\u5e94\u7684\u8bbf\u95ee\u6743\u9650 \u95ee\u98981.2\uff1a\u5982\u679cucore\u7684\u7f3a\u9875\u670d\u52a1\u4f8b\u7a0b\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u8bbf\u95ee\u5185\u5b58\uff0c\u51fa\u73b0\u4e86\u9875\u8bbf\u95ee\u5f02\u5e38\uff0c\u8bf7\u95ee\u786c\u4ef6\u8981\u505a\u54ea\u4e9b\u4e8b\u60c5\uff1f \u786c\u4ef6\u4ea7\u751f\u4e2d\u65ad\uff0c\u518d\u6b21\u6761\u7528\u7f3a\u9875\u670d\u52a1\u4f8b\u7a0b\u3002","title":"\u7ec3\u4e601\uff1a\u7ed9\u672a\u88ab\u6620\u5c04\u7684\u5730\u5740\u6620\u5c04\u4e0a\u7269\u7406\u9875"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab3/2/","text":"\u7ec3\u4e602\uff1a\u8865\u5145\u5b8c\u6210\u57fa\u4e8eFIFO\u7684\u9875\u9762\u66ff\u6362\u7b97\u6cd5 \u5728do_pgfault()\u51fd\u6570\u4e2d\u589e\u52a0\u4ee5\u4e0b\u4ee3\u7801\uff1a else if ((*ptep & 1) == 0){ // if this pte is a swap entry, then load data from disk to a page with phy addr // and call page_insert to map the phy addr with logical addr if(swap_init_ok) { struct Page *page=NULL; if ((ret = swap_in(mm, addr, &page)) != 0) { cprintf(\"swap_in in do_pgfault failed\\n\"); goto failed; } page_insert(mm->pgdir, page, addr, perm); swap_map_swappable(mm, addr, page, 1); page->pra_vaddr = addr; } else { cprintf(\"no swap_init_ok but ptep is %x, failed\\n\",*ptep); goto failed; } } \u4ee3\u7801\u6267\u884c\u6b65\u9aa4\u4e3a\uff1a \u5982\u679c\u7269\u7406\u9875\u5728\u5916\u5b58\u4e2d\uff0c\u6362\u5165\u76f8\u5e94\u7684\u9875 \u66f4\u65b0\u9875\u8868\u7684\u6620\u5c04\u5173\u7cfb \u8bbe\u7f6e\u9875\u53ef\u4ea4\u6362 \u66f4\u65b0\u9875\u7684\u865a\u62df\u5730\u5740 \u5728\u6267\u884c\u7f3a\u9875\u6362\u5165\u7684FIFO\u7b97\u6cd5\u65f6\uff0c\u5728kern/mm/swap_fifo.c\u4e2d\uff0c\u4fee\u6539_fifo_map_swappable()\u51fd\u6570\u548c_fifo_swap_out_victim()\u51fd\u6570\uff1a static int _fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in) { list_entry_t *head=(list_entry_t*) mm->sm_priv; list_entry_t *entry=&(page->pra_page_link); assert(entry != NULL && head != NULL); //record the page access situlation /*LAB3 EXERCISE 2: YOUR CODE*/ //(1)link the most recent arrival page at the back of the pra_list_head qeueue. list_add(head, entry); return 0; } /* * (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the earliest arrival page in front of pra_list_head qeueue, * then set the addr of addr of this page to ptr_page. */ static int _fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick) { list_entry_t *head=(list_entry_t*) mm->sm_priv; assert(head != NULL); assert(in_tick==0); /* Select the victim */ /*LAB3 EXERCISE 2: YOUR CODE*/ //(1) unlink the earliest arrival page in front of pra_list_head qeueue //(2) set the addr of addr of this page to ptr_page list_entry_t *out = head->prev; assert(out != head); struct Page *page = le2page(out, pra_page_link); list_del(out); assert(page != NULL); *ptr_page = page; return 0; } \u5373\u6bcf\u6b21\u5728\u94fe\u8868\u5934\u90e8\u63d2\u5165\u76f8\u5e94\u7684\u7269\u7406\u9875\uff0c\u5220\u9664\u94fe\u8868\u672b\u5c3e\u7684\u9875\uff0c\u7ef4\u62a4FIFO\u961f\u5217\u3002 \u95ee\u98982.1\uff1a\u5982\u679c\u8981\u5728ucore\u4e0a\u5b9e\u73b0\"extended clock\u9875\u66ff\u6362\u7b97\u6cd5\"\u8bf7\u7ed9\u4f60\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u73b0\u6709\u7684swap_manager\u6846\u67b6\u662f\u5426\u8db3\u4ee5\u652f\u6301\u5728ucore\u4e2d\u5b9e\u73b0\u6b64\u7b97\u6cd5\uff1f\u5982\u679c\u662f\uff0c\u8bf7\u7ed9\u4f60\u7684\u8bbe\u8ba1\u65b9\u6848\u3002\u5982\u679c\u4e0d\u662f\uff0c\u8bf7\u7ed9\u51fa\u4f60\u7684\u65b0\u7684\u6269\u5c55\u548c\u57fa\u6b64\u6269\u5c55\u7684\u8bbe\u8ba1\u65b9\u6848\u3002\u5e76\u9700\u8981\u56de\u7b54\u5982\u4e0b\u95ee\u9898 \u9700\u8981\u88ab\u6362\u51fa\u7684\u9875\u7684\u7279\u5f81\u662f\u4ec0\u4e48\uff1f \u5728ucore\u4e2d\u5982\u4f55\u5224\u65ad\u5177\u6709\u8fd9\u6837\u7279\u5f81\u7684\u9875\uff1f \u4f55\u65f6\u8fdb\u884c\u6362\u5165\u548c\u6362\u51fa\u64cd\u4f5c\uff1f \u73b0\u6709\u7684\u6846\u67b6\u4e0d\u8db3\u4ee5\u652f\u6301extended clock\u66ff\u6362\u7b97\u6cd5\u3002\u539f\u56e0\u5982\u4e0b\uff1a\u73b0\u6709\u7684\u6846\u67b6\u4e2d\u6ca1\u6709\u52a8\u6001\u4fee\u6539\u8bbf\u95ee\u9875\u9762\u7684\u51fd\u6570\u3002\u9700\u8981\u5728\u73b0\u6709\u7684\u6846\u67b6\u4e2d\u52a0\u5165\u8bbf\u95ee\u67d0\u9875\u65f6\u7684\u51fd\u6570\uff0c\u52a8\u6001\u5730\u4fee\u6539\u9875\u9762\u7684\u8bbf\u95ee\u4f4d\u548c\u4fee\u6539\u4f4d\u3002 extended clock\u7b97\u6cd5\u7684\u6267\u884c\u8fc7\u7a0b\u4e3a\uff1a\u5c06\u88ab\u904d\u5386\u7684\u8282\u70b9\u7684\u8bbf\u95ee\u4f4d\u6216\u4fee\u6539\u4f4d\u6e05\u96f6\uff0c\u76f4\u5230\u627e\u5230\u5168\u4e3a0\u7684\u9875\u66ff\u6362\u3002\u88ab\u6362\u51fa\u7684\u9875\u5728\u76f8\u5e94\u7684\u65f6\u95f4\u95f4\u9694\u4e2d\uff0c\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\u6216\u4fee\u6539\u8fc7\u3002\u5982\u679c\u90fd\u88ab\u8bbf\u95ee\u6216\u4fee\u6539\u8fc7\uff0c\u5219extended clock\u7b97\u6cd5\u4f1a\u904d\u5386\u4e00\u904d\u540e\u627e\u5230\u6700\u5f00\u59cb\u7684\u9875 \u5728ucore\u4e2d\uff0c\u901a\u8fc7\u4ece\u5bf9\u5e94\u4f4d\u7f6e\u904d\u5386\uff0c\u5224\u65ad\u76f8\u5e94\u9875\u7684\u6807\u5fd7\u4f4d\u6765\u627e\u5230\u8fd9\u6837\u7684\u9875 \u5728\u7f3a\u9875\u5f02\u5e38\u53d1\u751f\u65f6\u8fdb\u884c\u6362\u5165\u6362\u51fa","title":"2"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab3/2/#2fifo","text":"\u5728do_pgfault()\u51fd\u6570\u4e2d\u589e\u52a0\u4ee5\u4e0b\u4ee3\u7801\uff1a else if ((*ptep & 1) == 0){ // if this pte is a swap entry, then load data from disk to a page with phy addr // and call page_insert to map the phy addr with logical addr if(swap_init_ok) { struct Page *page=NULL; if ((ret = swap_in(mm, addr, &page)) != 0) { cprintf(\"swap_in in do_pgfault failed\\n\"); goto failed; } page_insert(mm->pgdir, page, addr, perm); swap_map_swappable(mm, addr, page, 1); page->pra_vaddr = addr; } else { cprintf(\"no swap_init_ok but ptep is %x, failed\\n\",*ptep); goto failed; } } \u4ee3\u7801\u6267\u884c\u6b65\u9aa4\u4e3a\uff1a \u5982\u679c\u7269\u7406\u9875\u5728\u5916\u5b58\u4e2d\uff0c\u6362\u5165\u76f8\u5e94\u7684\u9875 \u66f4\u65b0\u9875\u8868\u7684\u6620\u5c04\u5173\u7cfb \u8bbe\u7f6e\u9875\u53ef\u4ea4\u6362 \u66f4\u65b0\u9875\u7684\u865a\u62df\u5730\u5740 \u5728\u6267\u884c\u7f3a\u9875\u6362\u5165\u7684FIFO\u7b97\u6cd5\u65f6\uff0c\u5728kern/mm/swap_fifo.c\u4e2d\uff0c\u4fee\u6539_fifo_map_swappable()\u51fd\u6570\u548c_fifo_swap_out_victim()\u51fd\u6570\uff1a static int _fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in) { list_entry_t *head=(list_entry_t*) mm->sm_priv; list_entry_t *entry=&(page->pra_page_link); assert(entry != NULL && head != NULL); //record the page access situlation /*LAB3 EXERCISE 2: YOUR CODE*/ //(1)link the most recent arrival page at the back of the pra_list_head qeueue. list_add(head, entry); return 0; } /* * (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the earliest arrival page in front of pra_list_head qeueue, * then set the addr of addr of this page to ptr_page. */ static int _fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick) { list_entry_t *head=(list_entry_t*) mm->sm_priv; assert(head != NULL); assert(in_tick==0); /* Select the victim */ /*LAB3 EXERCISE 2: YOUR CODE*/ //(1) unlink the earliest arrival page in front of pra_list_head qeueue //(2) set the addr of addr of this page to ptr_page list_entry_t *out = head->prev; assert(out != head); struct Page *page = le2page(out, pra_page_link); list_del(out); assert(page != NULL); *ptr_page = page; return 0; } \u5373\u6bcf\u6b21\u5728\u94fe\u8868\u5934\u90e8\u63d2\u5165\u76f8\u5e94\u7684\u7269\u7406\u9875\uff0c\u5220\u9664\u94fe\u8868\u672b\u5c3e\u7684\u9875\uff0c\u7ef4\u62a4FIFO\u961f\u5217\u3002 \u95ee\u98982.1\uff1a\u5982\u679c\u8981\u5728ucore\u4e0a\u5b9e\u73b0\"extended clock\u9875\u66ff\u6362\u7b97\u6cd5\"\u8bf7\u7ed9\u4f60\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u73b0\u6709\u7684swap_manager\u6846\u67b6\u662f\u5426\u8db3\u4ee5\u652f\u6301\u5728ucore\u4e2d\u5b9e\u73b0\u6b64\u7b97\u6cd5\uff1f\u5982\u679c\u662f\uff0c\u8bf7\u7ed9\u4f60\u7684\u8bbe\u8ba1\u65b9\u6848\u3002\u5982\u679c\u4e0d\u662f\uff0c\u8bf7\u7ed9\u51fa\u4f60\u7684\u65b0\u7684\u6269\u5c55\u548c\u57fa\u6b64\u6269\u5c55\u7684\u8bbe\u8ba1\u65b9\u6848\u3002\u5e76\u9700\u8981\u56de\u7b54\u5982\u4e0b\u95ee\u9898 \u9700\u8981\u88ab\u6362\u51fa\u7684\u9875\u7684\u7279\u5f81\u662f\u4ec0\u4e48\uff1f \u5728ucore\u4e2d\u5982\u4f55\u5224\u65ad\u5177\u6709\u8fd9\u6837\u7279\u5f81\u7684\u9875\uff1f \u4f55\u65f6\u8fdb\u884c\u6362\u5165\u548c\u6362\u51fa\u64cd\u4f5c\uff1f \u73b0\u6709\u7684\u6846\u67b6\u4e0d\u8db3\u4ee5\u652f\u6301extended clock\u66ff\u6362\u7b97\u6cd5\u3002\u539f\u56e0\u5982\u4e0b\uff1a\u73b0\u6709\u7684\u6846\u67b6\u4e2d\u6ca1\u6709\u52a8\u6001\u4fee\u6539\u8bbf\u95ee\u9875\u9762\u7684\u51fd\u6570\u3002\u9700\u8981\u5728\u73b0\u6709\u7684\u6846\u67b6\u4e2d\u52a0\u5165\u8bbf\u95ee\u67d0\u9875\u65f6\u7684\u51fd\u6570\uff0c\u52a8\u6001\u5730\u4fee\u6539\u9875\u9762\u7684\u8bbf\u95ee\u4f4d\u548c\u4fee\u6539\u4f4d\u3002 extended clock\u7b97\u6cd5\u7684\u6267\u884c\u8fc7\u7a0b\u4e3a\uff1a\u5c06\u88ab\u904d\u5386\u7684\u8282\u70b9\u7684\u8bbf\u95ee\u4f4d\u6216\u4fee\u6539\u4f4d\u6e05\u96f6\uff0c\u76f4\u5230\u627e\u5230\u5168\u4e3a0\u7684\u9875\u66ff\u6362\u3002\u88ab\u6362\u51fa\u7684\u9875\u5728\u76f8\u5e94\u7684\u65f6\u95f4\u95f4\u9694\u4e2d\uff0c\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\u6216\u4fee\u6539\u8fc7\u3002\u5982\u679c\u90fd\u88ab\u8bbf\u95ee\u6216\u4fee\u6539\u8fc7\uff0c\u5219extended clock\u7b97\u6cd5\u4f1a\u904d\u5386\u4e00\u904d\u540e\u627e\u5230\u6700\u5f00\u59cb\u7684\u9875 \u5728ucore\u4e2d\uff0c\u901a\u8fc7\u4ece\u5bf9\u5e94\u4f4d\u7f6e\u904d\u5386\uff0c\u5224\u65ad\u76f8\u5e94\u9875\u7684\u6807\u5fd7\u4f4d\u6765\u627e\u5230\u8fd9\u6837\u7684\u9875 \u5728\u7f3a\u9875\u5f02\u5e38\u53d1\u751f\u65f6\u8fdb\u884c\u6362\u5165\u6362\u51fa","title":"\u7ec3\u4e602\uff1a\u8865\u5145\u5b8c\u6210\u57fa\u4e8eFIFO\u7684\u9875\u9762\u66ff\u6362\u7b97\u6cd5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab3/data_struct/","text":"\u6570\u636e\u7ed3\u6784 \u865a\u5b58\u7ba1\u7406 struct vma_struct { // the set of vma using the same PDT struct mm_struct *vm_mm; uintptr_t vm_start; // start addr of vma uintptr_t vm_end; // end addr of vma uint32_t vm_flags; // flags of vma //linear list link which sorted by start addr of vma list_entry_t list_link; }; #define VM_READ 0x00000001 //\u53ea\u8bfb #define VM_WRITE 0x00000002 //\u53ef\u8bfb\u5199 #define VM_EXEC 0x00000004 //\u53ef\u6267\u884c struct mm_struct { // linear list link which sorted by start addr of vma list_entry_t mmap_list; // current accessed vma, used for speed purpose struct vma_struct *mmap_cache; pde_t *pgdir; // the PDT of these vma int map_count; // the count of these vma void *sm_priv; // the private data for swap manager };","title":"Data struct"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab3/data_struct/#_1","text":"\u865a\u5b58\u7ba1\u7406 struct vma_struct { // the set of vma using the same PDT struct mm_struct *vm_mm; uintptr_t vm_start; // start addr of vma uintptr_t vm_end; // end addr of vma uint32_t vm_flags; // flags of vma //linear list link which sorted by start addr of vma list_entry_t list_link; }; #define VM_READ 0x00000001 //\u53ea\u8bfb #define VM_WRITE 0x00000002 //\u53ef\u8bfb\u5199 #define VM_EXEC 0x00000004 //\u53ef\u6267\u884c struct mm_struct { // linear list link which sorted by start addr of vma list_entry_t mmap_list; // current accessed vma, used for speed purpose struct vma_struct *mmap_cache; pde_t *pgdir; // the PDT of these vma int map_count; // the count of these vma void *sm_priv; // the private data for swap manager };","title":"\u6570\u636e\u7ed3\u6784"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab3/my_note/","text":"\u7b14\u8bb0 check_pgfault() \u5728 check_pgfault() \u53ef\u4ee5\u770b\u5230\u4ea7\u751f\u9875\u5f02\u5e38\u65f6\uff0c\u662f\u5bf9\u5168\u5c40\u6307\u9488 check_mm_struct \u8fdb\u884c\u68c0\u67e5\uff0c\u4f46\u662f\u4ea7\u751f\u9875\u5f02\u5e38\u5bf9\u5e94\u7684\u9875\u76ee\u5f55\u5728CR3\u4e2d\uff0c\u6240\u4ee5\u8981\u4fdd\u6301 check_mm_struct->pgdir \u548cCR3\u4e2d\u7684\u9875\u76ee\u5f55\u5730\u5740\u76f8\u7b49\u3002 do_pgfault() \u4e2d\u65ad\u53f7 #define T_PGFLT 14 // page fault \u9519\u8bef\u7801\u7684\u4f4e\u4e09\u4f4d\u7684\u610f\u4e49\u5982\u4e0b\u3002lab3\u4e2d\u53ea\u68c0\u6d4b\u4e86\u6700\u4f4e2\u4f4d\uff0c\u53ea\u6709 (W/R=0, P=1)\u65f6\u76f4\u63a5\u5904\u7406\u5931\u8d25\uff0c\u5176\u4f59\u60c5\u51b5\u5747\u8981\u68c0\u6d4b vma->flags \u662f\u5426\u5141\u8bb8\u8bfb\u6216\u5199\u64cd\u4f5c\u3002 The P flag (bit 0) indicates whether the exception was due to a not-present page (0) or to either an access rights violation or the use of a reserved bit (1). The W/R flag (bit 1) indicates whether the memory access that caused the exception was a read (0) or write (1). The U/S flag (bit 2) indicates whether the processor was executing at user mode (1) or supervisor mode (0) at the time of the exception. \u5f53\u524d\u7269\u7406\u9875\u548c\u865a\u62df\u9875\u4ea7\u751f\u5173\u8054\u5171\u91c7\u7528\u4e86\u4e24\u79cd\u65b9\u6cd5\uff0c\u90fd\u662f\u5148\u901a\u8fc7 ptep = get_pte(pgdir, la, 1) \uff1a \u5728 boot_map_segment() \u4e2d\u7531\u4e8e\u5df2\u77e5pa\u4e0eva\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u4f7f\u7528 *ptep = pa | PTE_P | perm \u5728 page_insert() \u5219\u9700\u8981\u4f20\u5165\u4e00\u4e2a\u7a7a\u95f2pa\u7684\u5730\u5740\uff0c\u6700\u540e\u4e5f\u662f *ptep = page2pa(page) | PTE_P | perm swap_in() \u5f53pte\u8868\u793a\u786c\u76d8\u4e0a\u7684\u4fe1\u606f\u65f6\uff0c\u7ed3\u6784\u5982\u4e0b\u3002\u4e3a\u533a\u5206\u4e0e\u65e0\u6548pte\u7684\u533a\u522b\uff0cswap\u7684\u7b2c\u4e00\u4e2a\u9875\u4e0d\u4f7f\u7528\uff0c\u5373\u5f53pte_p\u4e3a0\u4e14offset\u4e0d\u4e3a0\u65f6\uff0cpte\u8868\u793a\u9875\u5230\u786c\u76d8\u6247\u533a\u7684\u4e00\u4e2a\u6620\u5c04\u3002offset\u8868\u793a\u786c\u76d8\u4e0a\u7684\u7b2coffset\u9875\u3002 swap_entry_t ------------------------- | offset | reserved | 0 | ------------------------- 24 bits 7 bits 1 bit swap_out() \u4f7f\u7528\u7684\u662f\u6d88\u6781\u7684\u6362\u51fa\u7b56\u7565\uff0c\u5728 alloc_pages() \u4e2d\u6709\u7a7a\u95f2\u5757\u4e0d\u591f\u65f6\uff0c\u6362\u51fa\u5df2\u6709\u5757\uff0c\u5982\u679c\u4e00\u76f4\u4e0d\u591f\uff0c\u5c06\u4e00\u76f4\u5faa\u73af\u3002 \u865a\u62df\u5730\u5740\u548c\u5bf9\u5e94\u7684\u786c\u76d8\u6247\u533a\u6709\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb\uff0c\u540e\u7eed\u663e\u7136\u4e0d\u80fd\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u5b58\u5728\u591a\u4e2a\u8fdb\u7a0b\u65f6\uff0c\u82e5\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u548c\u5f53\u524d\u7684\u76f8\u540c\u4e14\u5b58\u5728\u4e8e\u786c\u76d8\u4e2d\uff0c\u5c31\u65e0\u6cd5\u6362\u51fa\u3002 swap_check() \u8c03\u7528mm_create\u5efa\u7acbmm\u53d8\u91cf\uff0c\u5e76\u8c03\u7528vma_create\u521b\u5efavma\u53d8\u91cf\uff0c\u8bbe\u7f6e\u5408\u6cd5\u7684\u8bbf\u95ee\u8303\u56f4\u4e3a4KB\\~24KB\uff1b \u8c03\u7528free_page\u7b49\u64cd\u4f5c\uff0c\u6a21\u62df\u5f62\u6210\u4e00\u4e2a\u53ea\u67094\u4e2a\u7a7a\u95f2 physical page\uff1b\u5e76\u8bbe\u7f6e\u4e86\u4ece4KB\\~24KB\u7684\u8fde\u7eed5\u4e2a\u865a\u62df\u9875\u7684\u8bbf\u95ee\u64cd\u4f5c\uff1b \u8bbe\u7f6e\u8bb0\u5f55\u7f3a\u9875\u6b21\u6570\u7684\u53d8\u91cfpgfault_num=0\uff0c\u6267\u884ccheck_content_set\u51fd\u6570\uff0c\u4f7f\u5f97\u8d77\u59cb\u5730\u5740\u5206\u522b\u5bf9\u8d77\u59cb\u5730\u5740\u4e3a0x1000, 0x2000, 0x3000, 0x4000\u7684\u865a\u62df\u9875\u6309\u65f6\u95f4\u987a\u5e8f\u5148\u540e\u5199\u64cd\u4f5c\u8bbf\u95ee\uff0c\u7531\u4e8e\u4e4b\u524d\u6ca1\u6709\u5efa\u7acb\u9875\u8868\uff0c\u6240\u4ee5\u4f1a\u4ea7\u751fpage fault\u5f02\u5e38\uff0c\u5982\u679c\u5b8c\u6210\u7ec3\u4e601\uff0c\u5219\u8fd9\u4e9b\u4ece4KB\\~20KB\u76844\u865a\u62df\u9875\u4f1a\u4e0eucore\u4fdd\u5b58\u76844\u4e2a\u7269\u7406\u9875\u5e27\u5efa\u7acb\u6620\u5c04\u5173\u7cfb\uff1b \u7136\u540e\u5bf9\u865a\u9875\u5bf9\u5e94\u7684\u65b0\u4ea7\u751f\u7684\u9875\u8868\u9879\u8fdb\u884c\u5408\u6cd5\u6027\u68c0\u67e5\uff1b \u7136\u540e\u8fdb\u5165\u6d4b\u8bd5\u9875\u66ff\u6362\u7b97\u6cd5\u7684\u4e3b\u4f53\uff0c\u6267\u884c\u51fd\u6570check_content_access\uff0c\u5e76\u8fdb\u4e00\u6b65\u8c03\u7528\u5230_fifo_check_swap\u51fd\u6570\uff0c\u5982\u679c\u901a\u8fc7\u4e86\u6240\u6709\u7684assert\u3002\u8fd9\u8fdb\u4e00\u6b65\u8868\u793aFIFO\u9875\u66ff\u6362\u7b97\u6cd5\u57fa\u672c\u6b63\u786e\u5b9e\u73b0\uff1b \u6700\u540e\u6062\u590ducore\u73af\u5883\u3002","title":"My note"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab3/my_note/#_1","text":"check_pgfault() \u5728 check_pgfault() \u53ef\u4ee5\u770b\u5230\u4ea7\u751f\u9875\u5f02\u5e38\u65f6\uff0c\u662f\u5bf9\u5168\u5c40\u6307\u9488 check_mm_struct \u8fdb\u884c\u68c0\u67e5\uff0c\u4f46\u662f\u4ea7\u751f\u9875\u5f02\u5e38\u5bf9\u5e94\u7684\u9875\u76ee\u5f55\u5728CR3\u4e2d\uff0c\u6240\u4ee5\u8981\u4fdd\u6301 check_mm_struct->pgdir \u548cCR3\u4e2d\u7684\u9875\u76ee\u5f55\u5730\u5740\u76f8\u7b49\u3002 do_pgfault() \u4e2d\u65ad\u53f7 #define T_PGFLT 14 // page fault \u9519\u8bef\u7801\u7684\u4f4e\u4e09\u4f4d\u7684\u610f\u4e49\u5982\u4e0b\u3002lab3\u4e2d\u53ea\u68c0\u6d4b\u4e86\u6700\u4f4e2\u4f4d\uff0c\u53ea\u6709 (W/R=0, P=1)\u65f6\u76f4\u63a5\u5904\u7406\u5931\u8d25\uff0c\u5176\u4f59\u60c5\u51b5\u5747\u8981\u68c0\u6d4b vma->flags \u662f\u5426\u5141\u8bb8\u8bfb\u6216\u5199\u64cd\u4f5c\u3002 The P flag (bit 0) indicates whether the exception was due to a not-present page (0) or to either an access rights violation or the use of a reserved bit (1). The W/R flag (bit 1) indicates whether the memory access that caused the exception was a read (0) or write (1). The U/S flag (bit 2) indicates whether the processor was executing at user mode (1) or supervisor mode (0) at the time of the exception. \u5f53\u524d\u7269\u7406\u9875\u548c\u865a\u62df\u9875\u4ea7\u751f\u5173\u8054\u5171\u91c7\u7528\u4e86\u4e24\u79cd\u65b9\u6cd5\uff0c\u90fd\u662f\u5148\u901a\u8fc7 ptep = get_pte(pgdir, la, 1) \uff1a \u5728 boot_map_segment() \u4e2d\u7531\u4e8e\u5df2\u77e5pa\u4e0eva\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u4f7f\u7528 *ptep = pa | PTE_P | perm \u5728 page_insert() \u5219\u9700\u8981\u4f20\u5165\u4e00\u4e2a\u7a7a\u95f2pa\u7684\u5730\u5740\uff0c\u6700\u540e\u4e5f\u662f *ptep = page2pa(page) | PTE_P | perm swap_in() \u5f53pte\u8868\u793a\u786c\u76d8\u4e0a\u7684\u4fe1\u606f\u65f6\uff0c\u7ed3\u6784\u5982\u4e0b\u3002\u4e3a\u533a\u5206\u4e0e\u65e0\u6548pte\u7684\u533a\u522b\uff0cswap\u7684\u7b2c\u4e00\u4e2a\u9875\u4e0d\u4f7f\u7528\uff0c\u5373\u5f53pte_p\u4e3a0\u4e14offset\u4e0d\u4e3a0\u65f6\uff0cpte\u8868\u793a\u9875\u5230\u786c\u76d8\u6247\u533a\u7684\u4e00\u4e2a\u6620\u5c04\u3002offset\u8868\u793a\u786c\u76d8\u4e0a\u7684\u7b2coffset\u9875\u3002 swap_entry_t ------------------------- | offset | reserved | 0 | ------------------------- 24 bits 7 bits 1 bit swap_out() \u4f7f\u7528\u7684\u662f\u6d88\u6781\u7684\u6362\u51fa\u7b56\u7565\uff0c\u5728 alloc_pages() \u4e2d\u6709\u7a7a\u95f2\u5757\u4e0d\u591f\u65f6\uff0c\u6362\u51fa\u5df2\u6709\u5757\uff0c\u5982\u679c\u4e00\u76f4\u4e0d\u591f\uff0c\u5c06\u4e00\u76f4\u5faa\u73af\u3002 \u865a\u62df\u5730\u5740\u548c\u5bf9\u5e94\u7684\u786c\u76d8\u6247\u533a\u6709\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb\uff0c\u540e\u7eed\u663e\u7136\u4e0d\u80fd\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u5b58\u5728\u591a\u4e2a\u8fdb\u7a0b\u65f6\uff0c\u82e5\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u548c\u5f53\u524d\u7684\u76f8\u540c\u4e14\u5b58\u5728\u4e8e\u786c\u76d8\u4e2d\uff0c\u5c31\u65e0\u6cd5\u6362\u51fa\u3002 swap_check() \u8c03\u7528mm_create\u5efa\u7acbmm\u53d8\u91cf\uff0c\u5e76\u8c03\u7528vma_create\u521b\u5efavma\u53d8\u91cf\uff0c\u8bbe\u7f6e\u5408\u6cd5\u7684\u8bbf\u95ee\u8303\u56f4\u4e3a4KB\\~24KB\uff1b \u8c03\u7528free_page\u7b49\u64cd\u4f5c\uff0c\u6a21\u62df\u5f62\u6210\u4e00\u4e2a\u53ea\u67094\u4e2a\u7a7a\u95f2 physical page\uff1b\u5e76\u8bbe\u7f6e\u4e86\u4ece4KB\\~24KB\u7684\u8fde\u7eed5\u4e2a\u865a\u62df\u9875\u7684\u8bbf\u95ee\u64cd\u4f5c\uff1b \u8bbe\u7f6e\u8bb0\u5f55\u7f3a\u9875\u6b21\u6570\u7684\u53d8\u91cfpgfault_num=0\uff0c\u6267\u884ccheck_content_set\u51fd\u6570\uff0c\u4f7f\u5f97\u8d77\u59cb\u5730\u5740\u5206\u522b\u5bf9\u8d77\u59cb\u5730\u5740\u4e3a0x1000, 0x2000, 0x3000, 0x4000\u7684\u865a\u62df\u9875\u6309\u65f6\u95f4\u987a\u5e8f\u5148\u540e\u5199\u64cd\u4f5c\u8bbf\u95ee\uff0c\u7531\u4e8e\u4e4b\u524d\u6ca1\u6709\u5efa\u7acb\u9875\u8868\uff0c\u6240\u4ee5\u4f1a\u4ea7\u751fpage fault\u5f02\u5e38\uff0c\u5982\u679c\u5b8c\u6210\u7ec3\u4e601\uff0c\u5219\u8fd9\u4e9b\u4ece4KB\\~20KB\u76844\u865a\u62df\u9875\u4f1a\u4e0eucore\u4fdd\u5b58\u76844\u4e2a\u7269\u7406\u9875\u5e27\u5efa\u7acb\u6620\u5c04\u5173\u7cfb\uff1b \u7136\u540e\u5bf9\u865a\u9875\u5bf9\u5e94\u7684\u65b0\u4ea7\u751f\u7684\u9875\u8868\u9879\u8fdb\u884c\u5408\u6cd5\u6027\u68c0\u67e5\uff1b \u7136\u540e\u8fdb\u5165\u6d4b\u8bd5\u9875\u66ff\u6362\u7b97\u6cd5\u7684\u4e3b\u4f53\uff0c\u6267\u884c\u51fd\u6570check_content_access\uff0c\u5e76\u8fdb\u4e00\u6b65\u8c03\u7528\u5230_fifo_check_swap\u51fd\u6570\uff0c\u5982\u679c\u901a\u8fc7\u4e86\u6240\u6709\u7684assert\u3002\u8fd9\u8fdb\u4e00\u6b65\u8868\u793aFIFO\u9875\u66ff\u6362\u7b97\u6cd5\u57fa\u672c\u6b63\u786e\u5b9e\u73b0\uff1b \u6700\u540e\u6062\u590ducore\u73af\u5883\u3002","title":"\u7b14\u8bb0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab4/1/","text":"\u7ec3\u4e601\uff1a\u5206\u914d\u5e76\u521d\u59cb\u5316\u4e00\u4e2a\u8fdb\u7a0b\u63a7\u5236\u5757 \u5728kern/process/proc.c\u4e2d\u5b8c\u6210alloc_proc()\u51fd\u6570\u3002\u4ee3\u7801\u4e3a\uff1a proc->state = PROC_UNINIT; proc->pid = -1; proc->runs = 0; proc->kstack = 0; proc->need_resched = 0; proc->parent = NULL; proc->mm = NULL; memset(&(proc->context), 0, sizeof(struct context)); proc->tf = NULL; proc->cr3 = boot_cr3; proc->flags = 0; memset(proc->name, 0, PROC_NAME_LEN); \u8be5\u51fd\u6570\u4e3b\u8981\u5bf9state/pid/runs/kstack/need_resched/parent/mm/context/tf/cr3/flags/name\u7b49\u53d8\u91cf\u8fdb\u884c\u521d\u59cb\u5316\u64cd\u4f5c\u3002 \u95ee\u98981.1\uff1a\u8bf7\u8bf4\u660eproc_struct\u4e2dstruct context context\u548cstruct trapframe *tf\u6210\u5458\u53d8\u91cf\u542b\u4e49\u548c\u5728\u672c\u5b9e\u9a8c\u4e2d\u7684\u4f5c\u7528\u662f\uff1f context\u4f5c\u7528\u65f6\u5728\u8fdb\u884c\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4fdd\u5b58\u5f53\u524d\u5bc4\u5b58\u5668\u7684\u503c\u3002\u5176\u5b9a\u4e49\u5728kern/process/proc.h\u4e2d\uff1a struct context { uint32_t eip; uint32_t esp; uint32_t ebx; uint32_t ecx; uint32_t edx; uint32_t esi; uint32_t edi; uint32_t ebp; }; trapframe *tf\u7528\u4e8e\u8bb0\u5f55\u53d1\u751f\u4e2d\u65ad\u4e4b\u524d\u7684\u6808\u5e27\u7684\u5185\u5bb9\uff0c\u5176\u4e2d\u4e00\u90e8\u5206\u4e3a\u786c\u4ef6\u4fdd\u5b58\u3002\u5b9a\u4e49\u5728kern/trap/trap.h\u4e2d\uff1a struct trapframe { struct pushregs tf_regs; uint16_t tf_gs; uint16_t tf_padding0; uint16_t tf_fs; uint16_t tf_padding1; uint16_t tf_es; uint16_t tf_padding2; uint16_t tf_ds; uint16_t tf_padding3; uint32_t tf_trapno; /* below here defined by x86 hardware */ uint32_t tf_err; uintptr_t tf_eip; uint16_t tf_cs; uint16_t tf_padding4; uint32_t tf_eflags; /* below here only when crossing rings, such as from user to kernel */ uintptr_t tf_esp; uint16_t tf_ss; uint16_t tf_padding5; } __attribute__((packed));","title":"1"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab4/1/#1","text":"\u5728kern/process/proc.c\u4e2d\u5b8c\u6210alloc_proc()\u51fd\u6570\u3002\u4ee3\u7801\u4e3a\uff1a proc->state = PROC_UNINIT; proc->pid = -1; proc->runs = 0; proc->kstack = 0; proc->need_resched = 0; proc->parent = NULL; proc->mm = NULL; memset(&(proc->context), 0, sizeof(struct context)); proc->tf = NULL; proc->cr3 = boot_cr3; proc->flags = 0; memset(proc->name, 0, PROC_NAME_LEN); \u8be5\u51fd\u6570\u4e3b\u8981\u5bf9state/pid/runs/kstack/need_resched/parent/mm/context/tf/cr3/flags/name\u7b49\u53d8\u91cf\u8fdb\u884c\u521d\u59cb\u5316\u64cd\u4f5c\u3002 \u95ee\u98981.1\uff1a\u8bf7\u8bf4\u660eproc_struct\u4e2dstruct context context\u548cstruct trapframe *tf\u6210\u5458\u53d8\u91cf\u542b\u4e49\u548c\u5728\u672c\u5b9e\u9a8c\u4e2d\u7684\u4f5c\u7528\u662f\uff1f context\u4f5c\u7528\u65f6\u5728\u8fdb\u884c\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4fdd\u5b58\u5f53\u524d\u5bc4\u5b58\u5668\u7684\u503c\u3002\u5176\u5b9a\u4e49\u5728kern/process/proc.h\u4e2d\uff1a struct context { uint32_t eip; uint32_t esp; uint32_t ebx; uint32_t ecx; uint32_t edx; uint32_t esi; uint32_t edi; uint32_t ebp; }; trapframe *tf\u7528\u4e8e\u8bb0\u5f55\u53d1\u751f\u4e2d\u65ad\u4e4b\u524d\u7684\u6808\u5e27\u7684\u5185\u5bb9\uff0c\u5176\u4e2d\u4e00\u90e8\u5206\u4e3a\u786c\u4ef6\u4fdd\u5b58\u3002\u5b9a\u4e49\u5728kern/trap/trap.h\u4e2d\uff1a struct trapframe { struct pushregs tf_regs; uint16_t tf_gs; uint16_t tf_padding0; uint16_t tf_fs; uint16_t tf_padding1; uint16_t tf_es; uint16_t tf_padding2; uint16_t tf_ds; uint16_t tf_padding3; uint32_t tf_trapno; /* below here defined by x86 hardware */ uint32_t tf_err; uintptr_t tf_eip; uint16_t tf_cs; uint16_t tf_padding4; uint32_t tf_eflags; /* below here only when crossing rings, such as from user to kernel */ uintptr_t tf_esp; uint16_t tf_ss; uint16_t tf_padding5; } __attribute__((packed));","title":"\u7ec3\u4e601\uff1a\u5206\u914d\u5e76\u521d\u59cb\u5316\u4e00\u4e2a\u8fdb\u7a0b\u63a7\u5236\u5757"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab4/2/","text":"\u7ec3\u4e602\uff1a\u4e3a\u65b0\u521b\u5efa\u7684\u5185\u6838\u7ebf\u7a0b\u5206\u914d\u8d44\u6e90 \u5728kern/process/proc.c\u4e2d\u5b8c\u6210do_fork()\u51fd\u6570\uff0c\u589e\u52a0\u4ee5\u4e0b\u4ee3\u7801\uff1a proc = alloc_proc(); if(proc == NULL) goto fork_out; proc->parent = current; if(setup_kstack(proc) != 0) goto bad_fork_cleanup_proc; if(copy_mm(clone_flags, proc) != 0) goto bad_fork_cleanup_kstack; copy_thread(proc, stack, tf); bool flag; local_intr_save(flag); { proc->pid = get_pid(); hash_proc(proc); list_add(&proc_list, &(proc->list_link)); nr_process++; } local_intr_restore(flag); wakeup_proc(proc); ret = proc->pid; \u4ee3\u7801\u6267\u884c\u6b65\u9aa4\u4e3a\uff1a \u5206\u914d\u5e76\u521d\u59cb\u5316\u8fdb\u7a0b\u63a7\u5236\u5757\uff08alloc_proc\u51fd\u6570\uff09\uff1b \u5206\u914d\u5e76\u521d\u59cb\u5316\u5185\u6838\u6808\uff08setup_stack\u51fd\u6570\uff09\uff1b \u6839\u636eclone_flag\u6807\u5fd7\u590d\u5236\u6216\u5171\u4eab\u8fdb\u7a0b\u5185\u5b58\u7ba1\u7406\u7ed3\u6784\uff08copy_mm\u51fd\u6570\uff09\uff1b \u8bbe\u7f6e\u8fdb\u7a0b\u5728\u5185\u6838\uff08\u5c06\u6765\u4e5f\u5305\u62ec\u7528\u6237\u6001\uff09\u6b63\u5e38\u8fd0\u884c\u548c\u8c03\u5ea6\u6240\u9700\u7684\u4e2d\u65ad\u5e27\u548c\u6267\u884c\u4e0a\u4e0b\u6587\uff08copy_thread\u51fd\u6570\uff09\uff1b \u628a\u8bbe\u7f6e\u597d\u7684\u8fdb\u7a0b\u63a7\u5236\u5757\u653e\u5165hash_list\u548cproc_list\u4e24\u4e2a\u5168\u5c40\u8fdb\u7a0b\u94fe\u8868\u4e2d\uff1b \u81ea\u6b64\uff0c\u8fdb\u7a0b\u5df2\u7ecf\u51c6\u5907\u597d\u6267\u884c\u4e86\uff0c\u628a\u8fdb\u7a0b\u72b6\u6001\u8bbe\u7f6e\u4e3a\u201c\u5c31\u7eea\u201d\u6001\uff1b \u8bbe\u7f6e\u8fd4\u56de\u7801\u4e3a\u5b50\u8fdb\u7a0b\u7684id\u53f7\u3002 \u95ee\u98982.1\uff1a\u8bf7\u8bf4\u660eucore\u662f\u5426\u505a\u5230\u7ed9\u6bcf\u4e2a\u65b0fork\u7684\u7ebf\u7a0b\u4e00\u4e2a\u552f\u4e00\u7684id\uff1f\u8bf7\u8bf4\u660e\u4f60\u7684\u5206\u6790\u548c\u7406\u7531\u3002 \u662f\u3002\u5728do_fork\u51fd\u6570\u4e2d\uff0c\u901a\u8fc7get_pid\u51fd\u6570\u4e3a\u65b0\u8fdb\u7a0b\u5206\u914d\u4e00\u4e2apid\u3002\u800c\u5728get_pid\u7684\u5b9e\u73b0\u4e2d\uff0c\u901a\u8fc7\u904d\u5386\u8fdb\u7a0b\u94fe\u8868\uff0c\u627e\u5230\u4e00\u4e2a\u552f\u4e00\u7684pid\u8fd4\u56de\u3002","title":"2"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab4/2/#2","text":"\u5728kern/process/proc.c\u4e2d\u5b8c\u6210do_fork()\u51fd\u6570\uff0c\u589e\u52a0\u4ee5\u4e0b\u4ee3\u7801\uff1a proc = alloc_proc(); if(proc == NULL) goto fork_out; proc->parent = current; if(setup_kstack(proc) != 0) goto bad_fork_cleanup_proc; if(copy_mm(clone_flags, proc) != 0) goto bad_fork_cleanup_kstack; copy_thread(proc, stack, tf); bool flag; local_intr_save(flag); { proc->pid = get_pid(); hash_proc(proc); list_add(&proc_list, &(proc->list_link)); nr_process++; } local_intr_restore(flag); wakeup_proc(proc); ret = proc->pid; \u4ee3\u7801\u6267\u884c\u6b65\u9aa4\u4e3a\uff1a \u5206\u914d\u5e76\u521d\u59cb\u5316\u8fdb\u7a0b\u63a7\u5236\u5757\uff08alloc_proc\u51fd\u6570\uff09\uff1b \u5206\u914d\u5e76\u521d\u59cb\u5316\u5185\u6838\u6808\uff08setup_stack\u51fd\u6570\uff09\uff1b \u6839\u636eclone_flag\u6807\u5fd7\u590d\u5236\u6216\u5171\u4eab\u8fdb\u7a0b\u5185\u5b58\u7ba1\u7406\u7ed3\u6784\uff08copy_mm\u51fd\u6570\uff09\uff1b \u8bbe\u7f6e\u8fdb\u7a0b\u5728\u5185\u6838\uff08\u5c06\u6765\u4e5f\u5305\u62ec\u7528\u6237\u6001\uff09\u6b63\u5e38\u8fd0\u884c\u548c\u8c03\u5ea6\u6240\u9700\u7684\u4e2d\u65ad\u5e27\u548c\u6267\u884c\u4e0a\u4e0b\u6587\uff08copy_thread\u51fd\u6570\uff09\uff1b \u628a\u8bbe\u7f6e\u597d\u7684\u8fdb\u7a0b\u63a7\u5236\u5757\u653e\u5165hash_list\u548cproc_list\u4e24\u4e2a\u5168\u5c40\u8fdb\u7a0b\u94fe\u8868\u4e2d\uff1b \u81ea\u6b64\uff0c\u8fdb\u7a0b\u5df2\u7ecf\u51c6\u5907\u597d\u6267\u884c\u4e86\uff0c\u628a\u8fdb\u7a0b\u72b6\u6001\u8bbe\u7f6e\u4e3a\u201c\u5c31\u7eea\u201d\u6001\uff1b \u8bbe\u7f6e\u8fd4\u56de\u7801\u4e3a\u5b50\u8fdb\u7a0b\u7684id\u53f7\u3002 \u95ee\u98982.1\uff1a\u8bf7\u8bf4\u660eucore\u662f\u5426\u505a\u5230\u7ed9\u6bcf\u4e2a\u65b0fork\u7684\u7ebf\u7a0b\u4e00\u4e2a\u552f\u4e00\u7684id\uff1f\u8bf7\u8bf4\u660e\u4f60\u7684\u5206\u6790\u548c\u7406\u7531\u3002 \u662f\u3002\u5728do_fork\u51fd\u6570\u4e2d\uff0c\u901a\u8fc7get_pid\u51fd\u6570\u4e3a\u65b0\u8fdb\u7a0b\u5206\u914d\u4e00\u4e2apid\u3002\u800c\u5728get_pid\u7684\u5b9e\u73b0\u4e2d\uff0c\u901a\u8fc7\u904d\u5386\u8fdb\u7a0b\u94fe\u8868\uff0c\u627e\u5230\u4e00\u4e2a\u552f\u4e00\u7684pid\u8fd4\u56de\u3002","title":"\u7ec3\u4e602\uff1a\u4e3a\u65b0\u521b\u5efa\u7684\u5185\u6838\u7ebf\u7a0b\u5206\u914d\u8d44\u6e90"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab4/3/","text":"\u7ec3\u4e603\uff1a\u9605\u8bfb\u4ee3\u7801\uff0c\u7406\u89e3proc_run\u51fd\u6570\u548c\u5b83\u8c03\u7528\u7684\u51fd\u6570\u5982\u4f55\u5b8c\u6210\u8fdb\u7a0b\u5207\u6362\u7684. \u4ee3\u7801\u7684\u6267\u884c\u8fc7\u7a0b\u5982\u4e0b\uff1a \u9996\u5148\u5224\u65ad\u9700\u8981\u5207\u6362\u7684\u8fdb\u7a0b\u662f\u5426\u4e3a\u5f53\u524d\u8fdb\u7a0b \u5173\u4e2d\u65ad \u8bbe\u7f6ecurrent\u4e3a\u9700\u8981\u8fd0\u884c\u7684\u8fdb\u7a0b \u5207\u6362\u6808 \u8bbe\u7f6eCR3\u5bc4\u5b58\u5668 \u4fdd\u5b58\u6062\u590d\u901a\u7528\u5bc4\u5b58\u5668 \u5f00\u4e2d\u65ad \u95ee\u98983.1\uff1a\u5728\u672c\u5b9e\u9a8c\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u521b\u5efa\u4e14\u8fd0\u884c\u4e86\u51e0\u4e2a\u5185\u6838\u7ebf\u7a0b\uff1f \u4e24\u4e2a\u3002\u7b2c\u4e00\u4e2a\u4e3aidle\u7ebf\u7a0b\uff0c\u7b2c\u4e8c\u4e2a\u4e3ainit\u7ebf\u7a0b \u95ee\u98983.2\uff1a\u8bed\u53e5local_intr_save(intr_flag);....local_intr_restore(intr_flag);\u5728\u8fd9\u91cc\u6709\u4f55\u4f5c\u7528?\u8bf7\u8bf4\u660e\u7406\u7531 \u7528\u4e8e\u5173\u4e2d\u65ad\u548c\u5f00\u4e2d\u65ad\u3002\u4f7f\u5728\u5207\u6362\u8fdb\u7a0b\u7684\u8fc7\u7a0b\u4e2d\u4e0d\u88ab\u4e2d\u65ad\u6253\u65ad\u3002","title":"3"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab4/3/#3proc_run","text":"\u4ee3\u7801\u7684\u6267\u884c\u8fc7\u7a0b\u5982\u4e0b\uff1a \u9996\u5148\u5224\u65ad\u9700\u8981\u5207\u6362\u7684\u8fdb\u7a0b\u662f\u5426\u4e3a\u5f53\u524d\u8fdb\u7a0b \u5173\u4e2d\u65ad \u8bbe\u7f6ecurrent\u4e3a\u9700\u8981\u8fd0\u884c\u7684\u8fdb\u7a0b \u5207\u6362\u6808 \u8bbe\u7f6eCR3\u5bc4\u5b58\u5668 \u4fdd\u5b58\u6062\u590d\u901a\u7528\u5bc4\u5b58\u5668 \u5f00\u4e2d\u65ad \u95ee\u98983.1\uff1a\u5728\u672c\u5b9e\u9a8c\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u521b\u5efa\u4e14\u8fd0\u884c\u4e86\u51e0\u4e2a\u5185\u6838\u7ebf\u7a0b\uff1f \u4e24\u4e2a\u3002\u7b2c\u4e00\u4e2a\u4e3aidle\u7ebf\u7a0b\uff0c\u7b2c\u4e8c\u4e2a\u4e3ainit\u7ebf\u7a0b \u95ee\u98983.2\uff1a\u8bed\u53e5local_intr_save(intr_flag);....local_intr_restore(intr_flag);\u5728\u8fd9\u91cc\u6709\u4f55\u4f5c\u7528?\u8bf7\u8bf4\u660e\u7406\u7531 \u7528\u4e8e\u5173\u4e2d\u65ad\u548c\u5f00\u4e2d\u65ad\u3002\u4f7f\u5728\u5207\u6362\u8fdb\u7a0b\u7684\u8fc7\u7a0b\u4e2d\u4e0d\u88ab\u4e2d\u65ad\u6253\u65ad\u3002","title":"\u7ec3\u4e603\uff1a\u9605\u8bfb\u4ee3\u7801\uff0c\u7406\u89e3proc_run\u51fd\u6570\u548c\u5b83\u8c03\u7528\u7684\u51fd\u6570\u5982\u4f55\u5b8c\u6210\u8fdb\u7a0b\u5207\u6362\u7684."},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab4/data_struct/","text":"\u6570\u636e\u7ed3\u6784 PCB struct proc_struct { enum proc_state state; // Process state int pid; // Process ID int runs; // the running times of Proces uintptr_t kstack; // Process kernel stack volatile bool need_resched; // bool value: need to be rescheduled to release CPU? struct proc_struct *parent; // the parent process struct mm_struct *mm; // Process's memory management field struct context context; // Switch here to run process struct trapframe *tf; // Trap frame for current interrupt uintptr_t cr3; // CR3 register: the base addr of Page Directroy Table(PDT) uint32_t flags; // Process flag char name[PROC_NAME_LEN + 1]; // Process name list_entry_t list_link; // Process link list list_entry_t hash_link; // Process hash list }; context struct context { uint32_t eip; uint32_t esp; uint32_t ebx; uint32_t ecx; uint32_t edx; uint32_t esi; uint32_t edi; uint32_t ebp; };","title":"Data struct"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab4/data_struct/#_1","text":"PCB struct proc_struct { enum proc_state state; // Process state int pid; // Process ID int runs; // the running times of Proces uintptr_t kstack; // Process kernel stack volatile bool need_resched; // bool value: need to be rescheduled to release CPU? struct proc_struct *parent; // the parent process struct mm_struct *mm; // Process's memory management field struct context context; // Switch here to run process struct trapframe *tf; // Trap frame for current interrupt uintptr_t cr3; // CR3 register: the base addr of Page Directroy Table(PDT) uint32_t flags; // Process flag char name[PROC_NAME_LEN + 1]; // Process name list_entry_t list_link; // Process link list list_entry_t hash_link; // Process hash list }; context struct context { uint32_t eip; uint32_t esp; uint32_t ebx; uint32_t ecx; uint32_t edx; uint32_t esi; uint32_t edi; uint32_t ebp; };","title":"\u6570\u636e\u7ed3\u6784"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab4/my_note/","text":"\u7b14\u8bb0 kmalloc() \u7531\u539f\u5148\u7684\u63094KB\u7684\u500d\u6570\u5206\u914d\uff0c\u6539\u4e3a\u4f7f\u7528slub\u7b97\u6cd5\u5206\u914d\u66f4\u5c0f\u7c92\u5ea6\u7684\u5185\u5b58\u5757\u3002 copy_thread() \u5185\u6838\u7ebf\u7a0b\u7684 tf->tf_esp \u4e3a0\uff0c\u7531\u6b64cpu\u5728 iret \u65f6\u4e0d\u4f1a\u5207\u6362\u7279\u6743\u7ea7\uff0c\u4ecd\u8fd0\u884c\u5728\u5185\u6838\u6001\u3002 forkrets forkrets \u662f\u5728 forkret() \u4e2d\u8fdb\u884c\u8c03\u7528\u7684\uff0c\u6240\u4ee5\u6709 movl 4(%esp), %esp \u9057\u7559\u95ee\u9898 forkrets \u7ecf forkret() \u8c03\u7528\u6709\u4ec0\u4e48\u610f\u4e49\u3002","title":"My note"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab4/my_note/#_1","text":"kmalloc() \u7531\u539f\u5148\u7684\u63094KB\u7684\u500d\u6570\u5206\u914d\uff0c\u6539\u4e3a\u4f7f\u7528slub\u7b97\u6cd5\u5206\u914d\u66f4\u5c0f\u7c92\u5ea6\u7684\u5185\u5b58\u5757\u3002 copy_thread() \u5185\u6838\u7ebf\u7a0b\u7684 tf->tf_esp \u4e3a0\uff0c\u7531\u6b64cpu\u5728 iret \u65f6\u4e0d\u4f1a\u5207\u6362\u7279\u6743\u7ea7\uff0c\u4ecd\u8fd0\u884c\u5728\u5185\u6838\u6001\u3002 forkrets forkrets \u662f\u5728 forkret() \u4e2d\u8fdb\u884c\u8c03\u7528\u7684\uff0c\u6240\u4ee5\u6709 movl 4(%esp), %esp \u9057\u7559\u95ee\u9898 forkrets \u7ecf forkret() \u8c03\u7528\u6709\u4ec0\u4e48\u610f\u4e49\u3002","title":"\u7b14\u8bb0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/data_struct/","text":"\u6570\u636e\u7ed3\u6784 #define SYS_exit 1 #define SYS_fork 2 #define SYS_wait 3 #define SYS_exec 4 #define SYS_clone 5 #define SYS_yield 10 #define SYS_sleep 11 #define SYS_kill 12 #define SYS_gettime 17 #define SYS_getpid 18 #define SYS_brk 19 #define SYS_mmap 20 #define SYS_munmap 21 #define SYS_shmem 22 #define SYS_putc 30 #define SYS_pgdir 31 struct mm_struct { list_entry_t mmap_list; // linear list link which sorted by start addr of vma struct vma_struct *mmap_cache; // current accessed vma, used for speed purpose pde_t *pgdir; // the PDT of these vma int map_count; // the count of these vma void *sm_priv; // the private data for swap manager int mm_count; // the number ofprocess which shared the mm lock_t mm_lock; // mutex for using dup_mmap fun to duplicat the mm };","title":"Data struct"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/data_struct/#_1","text":"#define SYS_exit 1 #define SYS_fork 2 #define SYS_wait 3 #define SYS_exec 4 #define SYS_clone 5 #define SYS_yield 10 #define SYS_sleep 11 #define SYS_kill 12 #define SYS_gettime 17 #define SYS_getpid 18 #define SYS_brk 19 #define SYS_mmap 20 #define SYS_munmap 21 #define SYS_shmem 22 #define SYS_putc 30 #define SYS_pgdir 31 struct mm_struct { list_entry_t mmap_list; // linear list link which sorted by start addr of vma struct vma_struct *mmap_cache; // current accessed vma, used for speed purpose pde_t *pgdir; // the PDT of these vma int map_count; // the count of these vma void *sm_priv; // the private data for swap manager int mm_count; // the number ofprocess which shared the mm lock_t mm_lock; // mutex for using dup_mmap fun to duplicat the mm };","title":"\u6570\u636e\u7ed3\u6784"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/lab5/","text":"Lab5 Report \u7ec3\u4e601\uff1a\u52a0\u8f7d\u5e94\u7528\u7a0b\u5e8f\u5e76\u6267\u884c \u5728kern/process/proc.c\u4e2d\u8865\u5145load_icode()\u51fd\u6570\u3002\u4ee3\u7801\u4e3a\uff1a tf->tf_cs = USER_CS; tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS; tf->tf_esp = USTACKTOP; tf->tf_eip = elf->e_entry; tf->tf_eflags = FL_IF; \u5b8c\u6210\u5bf9trapframe\u4e2d\u4ee3\u7801\u6bb5\u3001\u6570\u636e\u6bb5\u7684\u521d\u59cb\u5316\u3002 \u95ee\u98981.1\uff1a\u63cf\u8ff0\u5f53\u521b\u5efa\u4e00\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u5e76\u52a0\u8f7d\u4e86\u5e94\u7528\u7a0b\u5e8f\u540e\uff0cCPU\u662f\u5982\u4f55\u8ba9\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u6700\u7ec8\u5728\u7528\u6237\u6001\u6267\u884c\u8d77\u6765\u7684\u3002\u5373\u8fd9\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u88abucore\u9009\u62e9\u5360\u7528CPU\u6267\u884c\uff08RUNNING\u6001\uff09\u5230\u5177\u4f53\u6267\u884c\u5e94\u7528\u7a0b\u5e8f\u7b2c\u4e00\u6761\u6307\u4ee4\u7684\u6574\u4e2a\u7ecf\u8fc7\u3002 \u901a\u8fc7schedule\u627e\u5230\u9700\u8981\u6267\u884c\u7684\u8fdb\u7a0b\u6216\u7ebf\u7a0b \u8c03\u7528proc_run\uff0c\u5207\u6362\u6808\u548c\u9875\u8868\uff0c\u8c03\u7528switch_to\u51fd\u6570\u5207\u6362\u4e0a\u4e0b\u6587 switch_to\u51fd\u6570\u8fd4\u56de\u81f3forkret\uff0c\u8fdb\u800c\u6267\u884cforkrets\u51fd\u6570 \u8bbe\u7f6e\u6808\u6307\u9488\uff0c\u5f39\u51fa\u6bb5\u5bc4\u5b58\u5668\uff0c\u6267\u884ctf->tf_eip\u7684\u6307\u4ee4 \u7531\u4e8etf->tf_eip\u88ab\u8bbe\u7f6e\u4e3a\u4e86elf->e_entry\uff0c\u4ece\u800c\u5f00\u59cb\u6267\u884c\u7528\u6237\u7a0b\u5e8f \u7ec3\u4e602\uff1a\u7236\u8fdb\u7a0b\u590d\u5236\u81ea\u5df1\u7684\u5185\u5b58\u7a7a\u95f4\u7ed9\u5b50\u8fdb\u7a0b \u5728kern/mm/pmm.c\u4e2d\u5b8c\u6210copy_range()\u51fd\u6570\uff0c\u589e\u52a0\u4ee5\u4e0b\u4ee3\u7801\uff1a void *src_kvaddr = page2kva(page); void *dst_kvaddr = page2kva(npage); memcpy(dst_kvaddr, src_kvaddr, PGSIZE); ret = page_insert(to, npage, start, perm); \u4ee3\u7801\u6267\u884c\u6b65\u9aa4\u4e3a\uff1a \u83b7\u5f97\u6e90\u9875\u3001\u76ee\u6807\u9875\u5730\u5740 \u7528memcpy\u8fdb\u884c\u62f7\u8d1d \u8bbe\u7f6e\u4e0e\u7269\u7406\u9875\u7684\u6620\u5c04\u5173\u7cfb \u95ee\u98982.1\uff1a\u8bf7\u5728\u5b9e\u9a8c\u62a5\u544a\u4e2d\u7b80\u8981\u8bf4\u660e\u5982\u4f55\u8bbe\u8ba1\u5b9e\u73b0\u201dCopy on Write \u673a\u5236\u201c\uff0c\u7ed9\u51fa\u6982\u8981\u8bbe\u8ba1\uff0c\u9f13\u52b1\u7ed9\u51fa\u8be6\u7ec6\u8bbe\u8ba1\u3002 \u5728copy_range\u51fd\u6570\u4e2d\uff0c\u4e0d\u76f4\u63a5\u62f7\u8d1d\uff0c\u800c\u662f\u7528\u4e00\u4e2a\u6807\u8bb0\u4e3a\u8868\u793a\u6b64\u9875\u88ab\u591a\u4e2a\u4f7f\u7528\u8005\u8bbf\u95ee\u3002\u5f53\u8fdb\u884c\u8bfb\u64cd\u4f5c\u65f6\uff0c\u53ef\u4ee5\u5171\u4eab\u8d44\u6e90\u3002\u5f53\u8fdb\u884c\u5199\u64cd\u4f5c\u65f6\uff0c\u901a\u8fc7\u5224\u65ad\u6b64\u9875\u662f\u5426\u5171\u4eab\uff0c\u518d\u8fdb\u884c\u62f7\u8d1d\u7684\u64cd\u4f5c\u3002 \u7ec3\u4e603\uff1a\u9605\u8bfb\u5206\u6790\u6e90\u4ee3\u7801\uff0c\u7406\u89e3\u8fdb\u7a0b\u6267\u884c fork/exec/wait/exit \u7684\u5b9e\u73b0\uff0c\u4ee5\u53ca\u7cfb\u7edf\u8c03\u7528\u7684\u5b9e\u73b0 fork: \u901a\u8fc7do_fork\u51fd\u6570\u5b9e\u73b0\uff0c\u5206\u914d\u8fdb\u7a0b\u7684TCB\u548cpid\uff0c\u5728\u94fe\u8868\u4e2d\u52a0\u5165\u6b64\u8fdb\u7a0b\uff0c\u6700\u540e\u901a\u8fc7wakeup_proc\u5524\u9192\u8fdb\u7a0b exec: \u901a\u8fc7do_execve\u51fd\u6570\u5b9e\u73b0\uff0c\u9996\u5148\u4e3a\u52a0\u8f7d\u65b0\u7684\u6267\u884c\u7801\u505a\u597d\u7528\u6237\u6001\u5185\u5b58\u7a7a\u95f4\u6e05\u7a7a\u51c6\u5907\u3002\u5982\u679cmm\u4e0d\u4e3aNULL\uff0c\u5219\u8bbe\u7f6e\u9875\u8868\u4e3a\u5185\u6838\u7a7a\u95f4\u9875\u8868\uff0c\u4e14\u8fdb\u4e00\u6b65\u5224\u65admm\u7684\u5f15\u7528\u8ba1\u6570\u51cf1\u540e\u662f\u5426\u4e3a0\uff0c\u5982\u679c\u4e3a0\uff0c\u5219\u8868\u660e\u6ca1\u6709\u8fdb\u7a0b\u518d\u9700\u8981\u6b64\u8fdb\u7a0b\u6240\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u4e3a\u6b64\u5c06\u6839\u636emm\u4e2d\u7684\u8bb0\u5f55\uff0c\u91ca\u653e\u8fdb\u7a0b\u6240\u5360\u7528\u6237\u7a7a\u95f4\u5185\u5b58\u548c\u8fdb\u7a0b\u9875\u8868\u672c\u8eab\u6240\u5360\u7a7a\u95f4\u3002\u6700\u540e\u628a\u5f53\u524d\u8fdb\u7a0b\u7684mm\u5185\u5b58\u7ba1\u7406\u6307\u9488\u4e3a\u7a7a\u3002\u63a5\u4e0b\u6765\u7684\u4e00\u6b65\u662f\u52a0\u8f7d\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u7801\u5230\u5f53\u524d\u8fdb\u7a0b\u7684\u65b0\u521b\u5efa\u7684\u7528\u6237\u6001\u865a\u62df\u7a7a\u95f4\u4e2d\u3002\u8fd9\u91cc\u6d89\u53ca\u5230\u8bfbELF\u683c\u5f0f\u7684\u6587\u4ef6\uff0c\u7533\u8bf7\u5185\u5b58\u7a7a\u95f4\uff0c\u5efa\u7acb\u7528\u6237\u6001\u865a\u5b58\u7a7a\u95f4\uff0c\u52a0\u8f7d\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u7801\u7b49\u3002load_icode\u51fd\u6570\u5b8c\u6210\u4e86\u6574\u4e2a\u590d\u6742\u7684\u5de5\u4f5c\u3002 wait: \u901a\u8fc7do_wait\u51fd\u6570\u5b9e\u73b0\u3002\u5982\u679cpid!=0\uff0c\u8868\u793a\u53ea\u627e\u4e00\u4e2a\u8fdb\u7a0bid\u53f7\u4e3apid\u7684\u9000\u51fa\u72b6\u6001\u7684\u5b50\u8fdb\u7a0b\uff0c\u5426\u5219\u627e\u4efb\u610f\u4e00\u4e2a\u5904\u4e8e\u9000\u51fa\u72b6\u6001\u7684\u5b50\u8fdb\u7a0b\uff1b\u5982\u679c\u6b64\u5b50\u8fdb\u7a0b\u7684\u6267\u884c\u72b6\u6001\u4e0d\u4e3aPROC_ZOMBIE\uff0c\u8868\u660e\u6b64\u5b50\u8fdb\u7a0b\u8fd8\u6ca1\u6709\u9000\u51fa\uff0c\u5219\u5f53\u524d\u8fdb\u7a0b\u53ea\u597d\u8bbe\u7f6e\u81ea\u5df1\u7684\u6267\u884c\u72b6\u6001\u4e3aPROC_SLEEPING\uff0c\u7761\u7720\u539f\u56e0\u4e3aWT_CHILD\uff08\u5373\u7b49\u5f85\u5b50\u8fdb\u7a0b\u9000\u51fa\uff09\uff0c\u8c03\u7528schedule()\u51fd\u6570\u9009\u62e9\u65b0\u7684\u8fdb\u7a0b\u6267\u884c\uff0c\u81ea\u5df1\u7761\u7720\u7b49\u5f85\uff0c\u5982\u679c\u88ab\u5524\u9192\uff0c\u5219\u91cd\u590d\u8df3\u56de\u6b65\u9aa41\u5904\u6267\u884c\uff1b\u5982\u679c\u6b64\u5b50\u8fdb\u7a0b\u7684\u6267\u884c\u72b6\u6001\u4e3aPROC_ZOMBIE\uff0c\u8868\u660e\u6b64\u5b50\u8fdb\u7a0b\u5904\u4e8e\u9000\u51fa\u72b6\u6001\uff0c\u9700\u8981\u5f53\u524d\u8fdb\u7a0b\uff08\u5373\u5b50\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\uff09\u5b8c\u6210\u5bf9\u5b50\u8fdb\u7a0b\u7684\u6700\u7ec8\u56de\u6536\u5de5\u4f5c\uff0c\u5373\u9996\u5148\u628a\u5b50\u8fdb\u7a0b\u63a7\u5236\u5757\u4ece\u4e24\u4e2a\u8fdb\u7a0b\u961f\u5217proc_list\u548chash_list\u4e2d\u5220\u9664\uff0c\u5e76\u91ca\u653e\u5b50\u8fdb\u7a0b\u7684\u5185\u6838\u5806\u6808\u548c\u8fdb\u7a0b\u63a7\u5236\u5757\u3002\u81ea\u6b64\uff0c\u5b50\u8fdb\u7a0b\u624d\u5f7b\u5e95\u5730\u7ed3\u675f\u4e86\u5b83\u7684\u6267\u884c\u8fc7\u7a0b\uff0c\u6d88\u9664\u4e86\u5b83\u6240\u5360\u7528\u7684\u6240\u6709\u8d44\u6e90\u3002 exit: \u901a\u8fc7do_exit\u51fd\u6570\u5b9e\u73b0\u30021. \u5982\u679ccurrent->mm != NULL\uff0c\u8868\u793a\u662f\u7528\u6237\u8fdb\u7a0b\uff0c\u5219\u5f00\u59cb\u56de\u6536\u6b64\u7528\u6237\u8fdb\u7a0b\u6240\u5360\u7528\u7684\u7528\u6237\u6001\u865a\u62df\u5185\u5b58\u7a7a\u95f4\uff0c\u5305\u62ec\u5207\u6362\u9875\u8868\u548c\u56de\u6536\u8d44\u6e90\u30022. \u8fd9\u65f6\uff0c\u8bbe\u7f6e\u5f53\u524d\u8fdb\u7a0b\u7684\u6267\u884c\u72b6\u6001current->state=PROC_ZOMBIE\uff0c\u5f53\u524d\u8fdb\u7a0b\u7684\u9000\u51fa\u7801current->exit_code=error_code\u3002\u6b64\u65f6\u5f53\u524d\u8fdb\u7a0b\u5df2\u7ecf\u4e0d\u80fd\u88ab\u8c03\u5ea6\u4e86\uff0c\u9700\u8981\u6b64\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u6765\u505a\u6700\u540e\u7684\u56de\u6536\u5de5\u4f5c\uff08\u5373\u56de\u6536\u63cf\u8ff0\u6b64\u8fdb\u7a0b\u7684\u5185\u6838\u6808\u548c\u8fdb\u7a0b\u63a7\u5236\u5757\uff1b3. \u5982\u679c\u5f53\u524d\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0bcurrent->parent\u5904\u4e8e\u7b49\u5f85\u5b50\u8fdb\u7a0b\u72b6\u6001:current->parent->wait_state==WT_CHILD\uff0c\u5219\u5524\u9192\u7236\u8fdb\u7a0b\uff08\u5373\u6267\u884c\u201cwakup_proc(current->parent)\u201d\uff09\uff0c\u8ba9\u7236\u8fdb\u7a0b\u5e2e\u52a9\u81ea\u5df1\u5b8c\u6210\u6700\u540e\u7684\u8d44\u6e90\u56de\u6536\u30024. \u5982\u679c\u5f53\u524d\u8fdb\u7a0b\u8fd8\u6709\u5b50\u8fdb\u7a0b\uff0c\u5219\u9700\u8981\u628a\u8fd9\u4e9b\u5b50\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u6307\u9488\u8bbe\u7f6e\u4e3a\u5185\u6838\u7ebf\u7a0binitproc\uff0c\u4e14\u5404\u4e2a\u5b50\u8fdb\u7a0b\u6307\u9488\u9700\u8981\u63d2\u5165\u5230initproc\u7684\u5b50\u8fdb\u7a0b\u94fe\u8868\u4e2d\u3002\u5982\u679c\u67d0\u4e2a\u5b50\u8fdb\u7a0b\u7684\u6267\u884c\u72b6\u6001\u662fPROC_ZOMBIE\uff0c\u5219\u9700\u8981\u5524\u9192initproc\u6765\u5b8c\u6210\u5bf9\u6b64\u5b50\u8fdb\u7a0b\u7684\u6700\u540e\u56de\u6536\u5de5\u4f5c\u30025. \u6267\u884cschedule()\u51fd\u6570\uff0c\u9009\u62e9\u65b0\u7684\u8fdb\u7a0b\u6267\u884c. \u7cfb\u7edf\u8c03\u7528\uff1a\u9996\u5148\u521d\u59cb\u5316\u7cfb\u7edf\u8c03\u7528\u7684\u4e2d\u65ad\u63cf\u8ff0\u7b26\uff0c\u8bbe\u7f6e\u7279\u6743\u7ea7\u4e3aDPL_USER\uff1b\u7136\u540e\u5efa\u7acb\u7cfb\u7edf\u8c03\u7528\u7684\u7528\u6237\u5e93\u51c6\u5907\uff1b\u5728\u7528\u6237\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u6839\u636e\u7cfb\u7edf\u8c03\u7528\u7f16\u53f7\uff0c\u8df3\u8f6c\u5230\u76f8\u5e94\u7684\u5165\u53e3\u8fdb\u884c\u5904\u7406\u3002 \u95ee\u98983.1\uff1a\u8bf7\u5206\u6790fork/exec/wait/exit\u5728\u5b9e\u73b0\u4e2d\u662f\u5982\u4f55\u5f71\u54cd\u8fdb\u7a0b\u7684\u6267\u884c\u72b6\u6001\u7684\uff1f fork: runnable exec: runnable wait: sleeping exit: zombie \u95ee\u98983.2\uff1a\u8bf7\u7ed9\u51faucore\u4e2d\u4e00\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u7684\u6267\u884c\u72b6\u6001\u751f\u547d\u5468\u671f\u56fe\uff08\u5305\u6267\u884c\u72b6\u6001\uff0c\u6267\u884c\u72b6\u6001\u4e4b\u95f4\u7684\u53d8\u6362\u5173\u7cfb\uff0c\u4ee5\u53ca\u4ea7\u751f\u53d8\u6362\u7684\u4e8b\u4ef6\u6216\u51fd\u6570\u8c03\u7528\uff09\u3002 process state changing: alloc_proc RUNNING + +--<----<--+ + + proc_run + V +-->---->--+ PROC_UNINIT -- proc_init/wakeup_proc --> PROC_RUNNABLE -- try_free_pages/do_wait/do_sleep --> PROC_SLEEPING -- A + + | +--- do_exit --> PROC_ZOMBIE + + + -----------------------wakeup_proc---------------------------------- ----------------------------- \u5217\u51fa\u4f60\u8ba4\u4e3a\u672c\u5b9e\u9a8c\u4e2d\u91cd\u8981\u7684\u77e5\u8bc6\u70b9\uff0c\u4ee5\u53ca\u4e0e\u5bf9\u5e94\u7684OS\u539f\u7406\u4e2d\u7684\u77e5\u8bc6\u70b9\uff0c\u5e76\u7b80\u8981\u8bf4\u660e\u4f60\u5bf9\u4e8c\u8005\u7684\u542b\u4e49\uff0c\u5173\u7cfb\uff0c\u5dee\u5f02\u7b49\u65b9\u9762\u7684\u7406\u89e3\uff08\u4e5f\u53ef\u80fd\u51fa\u73b0\u5b9e\u9a8c\u4e2d\u7684\u77e5\u8bc6\u70b9\u6ca1\u6709\u5bf9\u5e94\u7684\u539f\u7406\u77e5\u8bc6\u70b9\uff09 \u7528\u6237\u8fdb\u7a0b\u7684\u52a0\u8f7d\u4e0e\u6267\u884c \u8fdb\u7a0b\u63a7\u5236\u7684\u5404\u4e2a\u72b6\u6001\u53ca\u5176\u8f6c\u6362","title":"Lab5 Report"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/lab5/#lab5-report","text":"","title":"Lab5 Report"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/lab5/#1","text":"\u5728kern/process/proc.c\u4e2d\u8865\u5145load_icode()\u51fd\u6570\u3002\u4ee3\u7801\u4e3a\uff1a tf->tf_cs = USER_CS; tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS; tf->tf_esp = USTACKTOP; tf->tf_eip = elf->e_entry; tf->tf_eflags = FL_IF; \u5b8c\u6210\u5bf9trapframe\u4e2d\u4ee3\u7801\u6bb5\u3001\u6570\u636e\u6bb5\u7684\u521d\u59cb\u5316\u3002","title":"\u7ec3\u4e601\uff1a\u52a0\u8f7d\u5e94\u7528\u7a0b\u5e8f\u5e76\u6267\u884c"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/lab5/#11cpuucorecpurunning","text":"\u901a\u8fc7schedule\u627e\u5230\u9700\u8981\u6267\u884c\u7684\u8fdb\u7a0b\u6216\u7ebf\u7a0b \u8c03\u7528proc_run\uff0c\u5207\u6362\u6808\u548c\u9875\u8868\uff0c\u8c03\u7528switch_to\u51fd\u6570\u5207\u6362\u4e0a\u4e0b\u6587 switch_to\u51fd\u6570\u8fd4\u56de\u81f3forkret\uff0c\u8fdb\u800c\u6267\u884cforkrets\u51fd\u6570 \u8bbe\u7f6e\u6808\u6307\u9488\uff0c\u5f39\u51fa\u6bb5\u5bc4\u5b58\u5668\uff0c\u6267\u884ctf->tf_eip\u7684\u6307\u4ee4 \u7531\u4e8etf->tf_eip\u88ab\u8bbe\u7f6e\u4e3a\u4e86elf->e_entry\uff0c\u4ece\u800c\u5f00\u59cb\u6267\u884c\u7528\u6237\u7a0b\u5e8f","title":"\u95ee\u98981.1\uff1a\u63cf\u8ff0\u5f53\u521b\u5efa\u4e00\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u5e76\u52a0\u8f7d\u4e86\u5e94\u7528\u7a0b\u5e8f\u540e\uff0cCPU\u662f\u5982\u4f55\u8ba9\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u6700\u7ec8\u5728\u7528\u6237\u6001\u6267\u884c\u8d77\u6765\u7684\u3002\u5373\u8fd9\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u88abucore\u9009\u62e9\u5360\u7528CPU\u6267\u884c\uff08RUNNING\u6001\uff09\u5230\u5177\u4f53\u6267\u884c\u5e94\u7528\u7a0b\u5e8f\u7b2c\u4e00\u6761\u6307\u4ee4\u7684\u6574\u4e2a\u7ecf\u8fc7\u3002"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/lab5/#2","text":"\u5728kern/mm/pmm.c\u4e2d\u5b8c\u6210copy_range()\u51fd\u6570\uff0c\u589e\u52a0\u4ee5\u4e0b\u4ee3\u7801\uff1a void *src_kvaddr = page2kva(page); void *dst_kvaddr = page2kva(npage); memcpy(dst_kvaddr, src_kvaddr, PGSIZE); ret = page_insert(to, npage, start, perm); \u4ee3\u7801\u6267\u884c\u6b65\u9aa4\u4e3a\uff1a \u83b7\u5f97\u6e90\u9875\u3001\u76ee\u6807\u9875\u5730\u5740 \u7528memcpy\u8fdb\u884c\u62f7\u8d1d \u8bbe\u7f6e\u4e0e\u7269\u7406\u9875\u7684\u6620\u5c04\u5173\u7cfb","title":"\u7ec3\u4e602\uff1a\u7236\u8fdb\u7a0b\u590d\u5236\u81ea\u5df1\u7684\u5185\u5b58\u7a7a\u95f4\u7ed9\u5b50\u8fdb\u7a0b"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/lab5/#21copy-on-write","text":"\u5728copy_range\u51fd\u6570\u4e2d\uff0c\u4e0d\u76f4\u63a5\u62f7\u8d1d\uff0c\u800c\u662f\u7528\u4e00\u4e2a\u6807\u8bb0\u4e3a\u8868\u793a\u6b64\u9875\u88ab\u591a\u4e2a\u4f7f\u7528\u8005\u8bbf\u95ee\u3002\u5f53\u8fdb\u884c\u8bfb\u64cd\u4f5c\u65f6\uff0c\u53ef\u4ee5\u5171\u4eab\u8d44\u6e90\u3002\u5f53\u8fdb\u884c\u5199\u64cd\u4f5c\u65f6\uff0c\u901a\u8fc7\u5224\u65ad\u6b64\u9875\u662f\u5426\u5171\u4eab\uff0c\u518d\u8fdb\u884c\u62f7\u8d1d\u7684\u64cd\u4f5c\u3002","title":"\u95ee\u98982.1\uff1a\u8bf7\u5728\u5b9e\u9a8c\u62a5\u544a\u4e2d\u7b80\u8981\u8bf4\u660e\u5982\u4f55\u8bbe\u8ba1\u5b9e\u73b0\u201dCopy on Write \u673a\u5236\u201c\uff0c\u7ed9\u51fa\u6982\u8981\u8bbe\u8ba1\uff0c\u9f13\u52b1\u7ed9\u51fa\u8be6\u7ec6\u8bbe\u8ba1\u3002"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/lab5/#3-forkexecwaitexit","text":"fork: \u901a\u8fc7do_fork\u51fd\u6570\u5b9e\u73b0\uff0c\u5206\u914d\u8fdb\u7a0b\u7684TCB\u548cpid\uff0c\u5728\u94fe\u8868\u4e2d\u52a0\u5165\u6b64\u8fdb\u7a0b\uff0c\u6700\u540e\u901a\u8fc7wakeup_proc\u5524\u9192\u8fdb\u7a0b exec: \u901a\u8fc7do_execve\u51fd\u6570\u5b9e\u73b0\uff0c\u9996\u5148\u4e3a\u52a0\u8f7d\u65b0\u7684\u6267\u884c\u7801\u505a\u597d\u7528\u6237\u6001\u5185\u5b58\u7a7a\u95f4\u6e05\u7a7a\u51c6\u5907\u3002\u5982\u679cmm\u4e0d\u4e3aNULL\uff0c\u5219\u8bbe\u7f6e\u9875\u8868\u4e3a\u5185\u6838\u7a7a\u95f4\u9875\u8868\uff0c\u4e14\u8fdb\u4e00\u6b65\u5224\u65admm\u7684\u5f15\u7528\u8ba1\u6570\u51cf1\u540e\u662f\u5426\u4e3a0\uff0c\u5982\u679c\u4e3a0\uff0c\u5219\u8868\u660e\u6ca1\u6709\u8fdb\u7a0b\u518d\u9700\u8981\u6b64\u8fdb\u7a0b\u6240\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u4e3a\u6b64\u5c06\u6839\u636emm\u4e2d\u7684\u8bb0\u5f55\uff0c\u91ca\u653e\u8fdb\u7a0b\u6240\u5360\u7528\u6237\u7a7a\u95f4\u5185\u5b58\u548c\u8fdb\u7a0b\u9875\u8868\u672c\u8eab\u6240\u5360\u7a7a\u95f4\u3002\u6700\u540e\u628a\u5f53\u524d\u8fdb\u7a0b\u7684mm\u5185\u5b58\u7ba1\u7406\u6307\u9488\u4e3a\u7a7a\u3002\u63a5\u4e0b\u6765\u7684\u4e00\u6b65\u662f\u52a0\u8f7d\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u7801\u5230\u5f53\u524d\u8fdb\u7a0b\u7684\u65b0\u521b\u5efa\u7684\u7528\u6237\u6001\u865a\u62df\u7a7a\u95f4\u4e2d\u3002\u8fd9\u91cc\u6d89\u53ca\u5230\u8bfbELF\u683c\u5f0f\u7684\u6587\u4ef6\uff0c\u7533\u8bf7\u5185\u5b58\u7a7a\u95f4\uff0c\u5efa\u7acb\u7528\u6237\u6001\u865a\u5b58\u7a7a\u95f4\uff0c\u52a0\u8f7d\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u7801\u7b49\u3002load_icode\u51fd\u6570\u5b8c\u6210\u4e86\u6574\u4e2a\u590d\u6742\u7684\u5de5\u4f5c\u3002 wait: \u901a\u8fc7do_wait\u51fd\u6570\u5b9e\u73b0\u3002\u5982\u679cpid!=0\uff0c\u8868\u793a\u53ea\u627e\u4e00\u4e2a\u8fdb\u7a0bid\u53f7\u4e3apid\u7684\u9000\u51fa\u72b6\u6001\u7684\u5b50\u8fdb\u7a0b\uff0c\u5426\u5219\u627e\u4efb\u610f\u4e00\u4e2a\u5904\u4e8e\u9000\u51fa\u72b6\u6001\u7684\u5b50\u8fdb\u7a0b\uff1b\u5982\u679c\u6b64\u5b50\u8fdb\u7a0b\u7684\u6267\u884c\u72b6\u6001\u4e0d\u4e3aPROC_ZOMBIE\uff0c\u8868\u660e\u6b64\u5b50\u8fdb\u7a0b\u8fd8\u6ca1\u6709\u9000\u51fa\uff0c\u5219\u5f53\u524d\u8fdb\u7a0b\u53ea\u597d\u8bbe\u7f6e\u81ea\u5df1\u7684\u6267\u884c\u72b6\u6001\u4e3aPROC_SLEEPING\uff0c\u7761\u7720\u539f\u56e0\u4e3aWT_CHILD\uff08\u5373\u7b49\u5f85\u5b50\u8fdb\u7a0b\u9000\u51fa\uff09\uff0c\u8c03\u7528schedule()\u51fd\u6570\u9009\u62e9\u65b0\u7684\u8fdb\u7a0b\u6267\u884c\uff0c\u81ea\u5df1\u7761\u7720\u7b49\u5f85\uff0c\u5982\u679c\u88ab\u5524\u9192\uff0c\u5219\u91cd\u590d\u8df3\u56de\u6b65\u9aa41\u5904\u6267\u884c\uff1b\u5982\u679c\u6b64\u5b50\u8fdb\u7a0b\u7684\u6267\u884c\u72b6\u6001\u4e3aPROC_ZOMBIE\uff0c\u8868\u660e\u6b64\u5b50\u8fdb\u7a0b\u5904\u4e8e\u9000\u51fa\u72b6\u6001\uff0c\u9700\u8981\u5f53\u524d\u8fdb\u7a0b\uff08\u5373\u5b50\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\uff09\u5b8c\u6210\u5bf9\u5b50\u8fdb\u7a0b\u7684\u6700\u7ec8\u56de\u6536\u5de5\u4f5c\uff0c\u5373\u9996\u5148\u628a\u5b50\u8fdb\u7a0b\u63a7\u5236\u5757\u4ece\u4e24\u4e2a\u8fdb\u7a0b\u961f\u5217proc_list\u548chash_list\u4e2d\u5220\u9664\uff0c\u5e76\u91ca\u653e\u5b50\u8fdb\u7a0b\u7684\u5185\u6838\u5806\u6808\u548c\u8fdb\u7a0b\u63a7\u5236\u5757\u3002\u81ea\u6b64\uff0c\u5b50\u8fdb\u7a0b\u624d\u5f7b\u5e95\u5730\u7ed3\u675f\u4e86\u5b83\u7684\u6267\u884c\u8fc7\u7a0b\uff0c\u6d88\u9664\u4e86\u5b83\u6240\u5360\u7528\u7684\u6240\u6709\u8d44\u6e90\u3002 exit: \u901a\u8fc7do_exit\u51fd\u6570\u5b9e\u73b0\u30021. \u5982\u679ccurrent->mm != NULL\uff0c\u8868\u793a\u662f\u7528\u6237\u8fdb\u7a0b\uff0c\u5219\u5f00\u59cb\u56de\u6536\u6b64\u7528\u6237\u8fdb\u7a0b\u6240\u5360\u7528\u7684\u7528\u6237\u6001\u865a\u62df\u5185\u5b58\u7a7a\u95f4\uff0c\u5305\u62ec\u5207\u6362\u9875\u8868\u548c\u56de\u6536\u8d44\u6e90\u30022. \u8fd9\u65f6\uff0c\u8bbe\u7f6e\u5f53\u524d\u8fdb\u7a0b\u7684\u6267\u884c\u72b6\u6001current->state=PROC_ZOMBIE\uff0c\u5f53\u524d\u8fdb\u7a0b\u7684\u9000\u51fa\u7801current->exit_code=error_code\u3002\u6b64\u65f6\u5f53\u524d\u8fdb\u7a0b\u5df2\u7ecf\u4e0d\u80fd\u88ab\u8c03\u5ea6\u4e86\uff0c\u9700\u8981\u6b64\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u6765\u505a\u6700\u540e\u7684\u56de\u6536\u5de5\u4f5c\uff08\u5373\u56de\u6536\u63cf\u8ff0\u6b64\u8fdb\u7a0b\u7684\u5185\u6838\u6808\u548c\u8fdb\u7a0b\u63a7\u5236\u5757\uff1b3. \u5982\u679c\u5f53\u524d\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0bcurrent->parent\u5904\u4e8e\u7b49\u5f85\u5b50\u8fdb\u7a0b\u72b6\u6001:current->parent->wait_state==WT_CHILD\uff0c\u5219\u5524\u9192\u7236\u8fdb\u7a0b\uff08\u5373\u6267\u884c\u201cwakup_proc(current->parent)\u201d\uff09\uff0c\u8ba9\u7236\u8fdb\u7a0b\u5e2e\u52a9\u81ea\u5df1\u5b8c\u6210\u6700\u540e\u7684\u8d44\u6e90\u56de\u6536\u30024. \u5982\u679c\u5f53\u524d\u8fdb\u7a0b\u8fd8\u6709\u5b50\u8fdb\u7a0b\uff0c\u5219\u9700\u8981\u628a\u8fd9\u4e9b\u5b50\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u6307\u9488\u8bbe\u7f6e\u4e3a\u5185\u6838\u7ebf\u7a0binitproc\uff0c\u4e14\u5404\u4e2a\u5b50\u8fdb\u7a0b\u6307\u9488\u9700\u8981\u63d2\u5165\u5230initproc\u7684\u5b50\u8fdb\u7a0b\u94fe\u8868\u4e2d\u3002\u5982\u679c\u67d0\u4e2a\u5b50\u8fdb\u7a0b\u7684\u6267\u884c\u72b6\u6001\u662fPROC_ZOMBIE\uff0c\u5219\u9700\u8981\u5524\u9192initproc\u6765\u5b8c\u6210\u5bf9\u6b64\u5b50\u8fdb\u7a0b\u7684\u6700\u540e\u56de\u6536\u5de5\u4f5c\u30025. \u6267\u884cschedule()\u51fd\u6570\uff0c\u9009\u62e9\u65b0\u7684\u8fdb\u7a0b\u6267\u884c. \u7cfb\u7edf\u8c03\u7528\uff1a\u9996\u5148\u521d\u59cb\u5316\u7cfb\u7edf\u8c03\u7528\u7684\u4e2d\u65ad\u63cf\u8ff0\u7b26\uff0c\u8bbe\u7f6e\u7279\u6743\u7ea7\u4e3aDPL_USER\uff1b\u7136\u540e\u5efa\u7acb\u7cfb\u7edf\u8c03\u7528\u7684\u7528\u6237\u5e93\u51c6\u5907\uff1b\u5728\u7528\u6237\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u6839\u636e\u7cfb\u7edf\u8c03\u7528\u7f16\u53f7\uff0c\u8df3\u8f6c\u5230\u76f8\u5e94\u7684\u5165\u53e3\u8fdb\u884c\u5904\u7406\u3002","title":"\u7ec3\u4e603\uff1a\u9605\u8bfb\u5206\u6790\u6e90\u4ee3\u7801\uff0c\u7406\u89e3\u8fdb\u7a0b\u6267\u884c fork/exec/wait/exit \u7684\u5b9e\u73b0\uff0c\u4ee5\u53ca\u7cfb\u7edf\u8c03\u7528\u7684\u5b9e\u73b0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/lab5/#31forkexecwaitexit","text":"fork: runnable exec: runnable wait: sleeping exit: zombie","title":"\u95ee\u98983.1\uff1a\u8bf7\u5206\u6790fork/exec/wait/exit\u5728\u5b9e\u73b0\u4e2d\u662f\u5982\u4f55\u5f71\u54cd\u8fdb\u7a0b\u7684\u6267\u884c\u72b6\u6001\u7684\uff1f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/lab5/#32ucore","text":"process state changing: alloc_proc RUNNING + +--<----<--+ + + proc_run + V +-->---->--+ PROC_UNINIT -- proc_init/wakeup_proc --> PROC_RUNNABLE -- try_free_pages/do_wait/do_sleep --> PROC_SLEEPING -- A + + | +--- do_exit --> PROC_ZOMBIE + + + -----------------------wakeup_proc---------------------------------- -----------------------------","title":"\u95ee\u98983.2\uff1a\u8bf7\u7ed9\u51faucore\u4e2d\u4e00\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u7684\u6267\u884c\u72b6\u6001\u751f\u547d\u5468\u671f\u56fe\uff08\u5305\u6267\u884c\u72b6\u6001\uff0c\u6267\u884c\u72b6\u6001\u4e4b\u95f4\u7684\u53d8\u6362\u5173\u7cfb\uff0c\u4ee5\u53ca\u4ea7\u751f\u53d8\u6362\u7684\u4e8b\u4ef6\u6216\u51fd\u6570\u8c03\u7528\uff09\u3002"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/lab5/#os","text":"\u7528\u6237\u8fdb\u7a0b\u7684\u52a0\u8f7d\u4e0e\u6267\u884c \u8fdb\u7a0b\u63a7\u5236\u7684\u5404\u4e2a\u72b6\u6001\u53ca\u5176\u8f6c\u6362","title":"\u5217\u51fa\u4f60\u8ba4\u4e3a\u672c\u5b9e\u9a8c\u4e2d\u91cd\u8981\u7684\u77e5\u8bc6\u70b9\uff0c\u4ee5\u53ca\u4e0e\u5bf9\u5e94\u7684OS\u539f\u7406\u4e2d\u7684\u77e5\u8bc6\u70b9\uff0c\u5e76\u7b80\u8981\u8bf4\u660e\u4f60\u5bf9\u4e8c\u8005\u7684\u542b\u4e49\uff0c\u5173\u7cfb\uff0c\u5dee\u5f02\u7b49\u65b9\u9762\u7684\u7406\u89e3\uff08\u4e5f\u53ef\u80fd\u51fa\u73b0\u5b9e\u9a8c\u4e2d\u7684\u77e5\u8bc6\u70b9\u6ca1\u6709\u5bf9\u5e94\u7684\u539f\u7406\u77e5\u8bc6\u70b9\uff09"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/my_note/","text":"\u7b14\u8bb0 copy_mm() \u5185\u6838\u7ebf\u7a0b\u7684mm\u662f\u7a7a\u6307\u9488\u3002 kernel_execve() T_SYSCALL \uff080x80\uff09\u4e3a\u7cfb\u7edf\u8c03\u7528\u4e2d\u65ad\u53f7\uff0c SYS_exec \uff084\uff09\u5b58\u5165eax\u4e2d\uff0c\u4e3a\u529f\u80fd\u53f7\u3002 kernel_execve() - > syscall() name -> edx -> arg[0] name_size -> ecx -> arg[1] start_address -> ebx -> arg[2] size -> edi -> arg[3] \u7528\u6237\u8fdb\u7a0b\u7684\u865a\u62df\u7a7a\u95f4 KERNBASE ------------> +---------------------------------+ 0xC0000000 | Invalid Memory () | --/-- USERTOP -------------> +---------------------------------+ 0xB0000000 | User stack | +---------------------------------+ | | : : | ~~~~~~~~~~~~~~~~ | : : | | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ | User Program & Heap | UTEXT ---------------> +---------------------------------+ 0x00800000 | Invalid Memory () | --/-- | - - - - - - - - - - - - - - - | | User STAB Data (optional) | USERBASE, USTAB------> +---------------------------------+ 0x00200000 | Invalid Memory () | --/-- 0 -------------------> +---------------------------------+ 0x00000000 \u7ebf\u7a0b\u5207\u6362 \u5f53\u6240\u6709\u8fdb\u7a0b\u90fd\u521b\u5efa\u597d\u540e\uff0c\u5185\u6838\u7ebf\u7a0b\u5207\u6362\u662f\u4e3b\u52a8\u8c03\u7528 schedule() \uff0c\u5c31\u76f4\u63a5\u7ecf\u8fc7 switch_to \uff0ceip\u5c31\u53d8\u6210\u4e86\u4e0b\u4e2a\u7ebf\u7a0b\u8c03\u7528 schedule() \u65f6\u7684\u5730\u5740\u3002\u800c\u6bcf\u4e2a\u7528\u6237\u7ebf\u7a0b\u90fd\u6709\u4e00\u4e2a\u5185\u6838\u6808\u7a7a\u95f4\uff0c\u5229\u7528\u7cfb\u7edf\u8c03\u7528\u53ef\u4ee5\u8fdb\u884c\u5207\u6362\uff0c\u6808\u7a7a\u95f4\u5148\u53d8\u6210\u5185\u6838\u6808\uff0c\u5728\u8c03\u7528 schedule() \u5207\u6362\u5230\u4e0b\u4e00\u4e2a\u7528\u6237\u7ebf\u7a0b\u7684\u5185\u6838\u6808\uff0c\u7531\u4e0a\u4e0b\u6587\u548c\u4e2d\u65ad\u8fd4\u56de\uff0c\u53ef\u4ee5\u8fd4\u56de\u81f3\u4e0b\u4e00\u7528\u6237\u7ebf\u7a0b\u7684\u7528\u6237\u6808\u7a7a\u95f4\u3002","title":"My note"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/my_note/#_1","text":"copy_mm() \u5185\u6838\u7ebf\u7a0b\u7684mm\u662f\u7a7a\u6307\u9488\u3002 kernel_execve() T_SYSCALL \uff080x80\uff09\u4e3a\u7cfb\u7edf\u8c03\u7528\u4e2d\u65ad\u53f7\uff0c SYS_exec \uff084\uff09\u5b58\u5165eax\u4e2d\uff0c\u4e3a\u529f\u80fd\u53f7\u3002 kernel_execve() - > syscall() name -> edx -> arg[0] name_size -> ecx -> arg[1] start_address -> ebx -> arg[2] size -> edi -> arg[3] \u7528\u6237\u8fdb\u7a0b\u7684\u865a\u62df\u7a7a\u95f4 KERNBASE ------------> +---------------------------------+ 0xC0000000 | Invalid Memory () | --/-- USERTOP -------------> +---------------------------------+ 0xB0000000 | User stack | +---------------------------------+ | | : : | ~~~~~~~~~~~~~~~~ | : : | | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ | User Program & Heap | UTEXT ---------------> +---------------------------------+ 0x00800000 | Invalid Memory () | --/-- | - - - - - - - - - - - - - - - | | User STAB Data (optional) | USERBASE, USTAB------> +---------------------------------+ 0x00200000 | Invalid Memory () | --/-- 0 -------------------> +---------------------------------+ 0x00000000 \u7ebf\u7a0b\u5207\u6362 \u5f53\u6240\u6709\u8fdb\u7a0b\u90fd\u521b\u5efa\u597d\u540e\uff0c\u5185\u6838\u7ebf\u7a0b\u5207\u6362\u662f\u4e3b\u52a8\u8c03\u7528 schedule() \uff0c\u5c31\u76f4\u63a5\u7ecf\u8fc7 switch_to \uff0ceip\u5c31\u53d8\u6210\u4e86\u4e0b\u4e2a\u7ebf\u7a0b\u8c03\u7528 schedule() \u65f6\u7684\u5730\u5740\u3002\u800c\u6bcf\u4e2a\u7528\u6237\u7ebf\u7a0b\u90fd\u6709\u4e00\u4e2a\u5185\u6838\u6808\u7a7a\u95f4\uff0c\u5229\u7528\u7cfb\u7edf\u8c03\u7528\u53ef\u4ee5\u8fdb\u884c\u5207\u6362\uff0c\u6808\u7a7a\u95f4\u5148\u53d8\u6210\u5185\u6838\u6808\uff0c\u5728\u8c03\u7528 schedule() \u5207\u6362\u5230\u4e0b\u4e00\u4e2a\u7528\u6237\u7ebf\u7a0b\u7684\u5185\u6838\u6808\uff0c\u7531\u4e0a\u4e0b\u6587\u548c\u4e2d\u65ad\u8fd4\u56de\uff0c\u53ef\u4ee5\u8fd4\u56de\u81f3\u4e0b\u4e00\u7528\u6237\u7ebf\u7a0b\u7684\u7528\u6237\u6808\u7a7a\u95f4\u3002","title":"\u7b14\u8bb0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab6/1/","text":"\u7ec3\u4e601\uff1a\u4f7f\u7528 Round Robin \u8c03\u5ea6\u7b97\u6cd5 \u95ee\u98981.1\uff1a\u8bf7\u7406\u89e3\u5e76\u5206\u6790 sched_calss \u4e2d\u5404\u4e2a\u51fd\u6570\u6307\u9488\u7684\u7528\u6cd5\uff0c\u5e76\u7ed3\u5408Round Robin\u8c03\u5ea6\u7b97\u6cd5\u63cfucore\u7684\u8c03\u5ea6\u6267\u884c\u8fc7\u7a0b\u3002 sched_class \u7684\u5b9a\u4e49\u5728 kern/schedule/sched.h \u4e2d\uff1a struct sched_class { // the name of sched_class const char *name; // Init the run queue void (*init)(struct run_queue *rq); // put the proc into runqueue, and this function must be called with rq_lock void (*enqueue)(struct run_queue *rq, struct proc_struct *proc); // get the proc out runqueue, and this function must be called with rq_lock void (*dequeue)(struct run_queue *rq, struct proc_struct *proc); // choose the next runnable task struct proc_struct *(*pick_next)(struct run_queue *rq); // dealer of the time-tick void (*proc_tick)(struct run_queue *rq, struct proc_struct *proc); /* for SMP support in the future * load_balance * void (*load_balance)(struct rq* rq); * get some proc from this rq, used in load_balance, * return value is the num of gotten proc * int (*get_proc)(struct rq* rq, struct proc* procs_moved[]); */ } \u5728 sched.c \u4e2d\uff0c\u5b9e\u4f8b\u5316\u4e00\u4e2a sched_class \u5bf9\u8c61\u4e3a sched_class = &default_sched_class \uff0c\u5e76\u8fdb\u884c\u521d\u59cb\u5316\u3002\u5728\u540e\u7eed\u8fdb\u884c\u8fdb\u7a0b\u9009\u62e9\u548c\u5207\u6362\u7684\u65f6\u5019\uff0c\u5206\u522b\u8c03\u7528 sched_class_enqueue sched_class_pick_next sched_class_dequeue \u51fd\u6570\u8c03\u7528 sched_class \u7c7b\u4e2d\u7684\u51fd\u6570\u6307\u9488\uff0c\u6267\u884c\u76f8\u5e94\u7684\u529f\u80fd\u3002 \u5728Round Robin\u8c03\u5ea6\u7b97\u6cd5\u4e2d\uff0c\u901a\u8fc7\u5c06 default_sched_class \u6307\u5411\u4e3a\u76f8\u5e94\u7684\u5b9e\u73b0\uff0c\u5373\u53ef\u4f7f\u7528RR\u8c03\u5ea6\u7b97\u6cd5\u3002 struct sched_class default_sched_class = { .name = \"RR_scheduler\", .init = RR_init, .enqueue = RR_enqueue, .dequeue = RR_dequeue, .pick_next = RR_pick_next, .proc_tick = RR_proc_tick, }; \u95ee\u98981.2\uff1a\u8bf7\u5728\u5b9e\u9a8c\u62a5\u544a\u4e2d\u7b80\u8981\u8bf4\u660e\u5982\u4f55\u8bbe\u8ba1\u5b9e\u73b0\u201d\u591a\u7ea7\u53cd\u9988\u961f\u5217\u8c03\u5ea6\u7b97\u6cd5\u201c\uff0c\u7ed9\u51fa\u6982\u8981\u8bbe\u8ba1\uff0c\u9f13\u52b1\u7ed9\u51fa\u8be6\u7ec6\u8bbe\u8ba1 \u9996\u5148\u7ef4\u62a4\u591a\u4e2a\u94fe\u8868\uff0c\u6bcf\u4e2a\u94fe\u8868\u4fdd\u5b58\u4f18\u5148\u7ea7\u4e0d\u540c\u7684\u5c31\u7eea\u961f\u5217 \u8fdb\u7a0b\u5728\u521d\u59cb\u5316\u65f6\u9996\u5148\u63d2\u5165\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u961f\u5217\u7b49\u5f85 \u5728\u8c03\u5ea6\u65f6\uff0c\u4ece\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u961f\u5217\u4e2d\u5f00\u59cb\u5bfb\u627e\u8fdb\u7a0b\uff0c\u82e5\u4e3a\u7a7a\u5219\u8fdb\u5165\u4e0b\u4e00\u4f18\u5148\u7ea7\u961f\u5217\u5bfb\u627e \u5bf9\u4e8e\u67d0\u4e2a\u8fdb\u7a0b\uff0c\u5982\u679c\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u7247\u5185\u6ca1\u6709\u5b8c\u6210\uff0c\u5219\u5c06\u5176\u63d2\u5165\u4e0b\u4e00\u4f18\u5148\u7ea7\u961f\u5217\u7684\u94fe\u8868\u4e2d","title":"1"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab6/1/#1-round-robin","text":"\u95ee\u98981.1\uff1a\u8bf7\u7406\u89e3\u5e76\u5206\u6790 sched_calss \u4e2d\u5404\u4e2a\u51fd\u6570\u6307\u9488\u7684\u7528\u6cd5\uff0c\u5e76\u7ed3\u5408Round Robin\u8c03\u5ea6\u7b97\u6cd5\u63cfucore\u7684\u8c03\u5ea6\u6267\u884c\u8fc7\u7a0b\u3002 sched_class \u7684\u5b9a\u4e49\u5728 kern/schedule/sched.h \u4e2d\uff1a struct sched_class { // the name of sched_class const char *name; // Init the run queue void (*init)(struct run_queue *rq); // put the proc into runqueue, and this function must be called with rq_lock void (*enqueue)(struct run_queue *rq, struct proc_struct *proc); // get the proc out runqueue, and this function must be called with rq_lock void (*dequeue)(struct run_queue *rq, struct proc_struct *proc); // choose the next runnable task struct proc_struct *(*pick_next)(struct run_queue *rq); // dealer of the time-tick void (*proc_tick)(struct run_queue *rq, struct proc_struct *proc); /* for SMP support in the future * load_balance * void (*load_balance)(struct rq* rq); * get some proc from this rq, used in load_balance, * return value is the num of gotten proc * int (*get_proc)(struct rq* rq, struct proc* procs_moved[]); */ } \u5728 sched.c \u4e2d\uff0c\u5b9e\u4f8b\u5316\u4e00\u4e2a sched_class \u5bf9\u8c61\u4e3a sched_class = &default_sched_class \uff0c\u5e76\u8fdb\u884c\u521d\u59cb\u5316\u3002\u5728\u540e\u7eed\u8fdb\u884c\u8fdb\u7a0b\u9009\u62e9\u548c\u5207\u6362\u7684\u65f6\u5019\uff0c\u5206\u522b\u8c03\u7528 sched_class_enqueue sched_class_pick_next sched_class_dequeue \u51fd\u6570\u8c03\u7528 sched_class \u7c7b\u4e2d\u7684\u51fd\u6570\u6307\u9488\uff0c\u6267\u884c\u76f8\u5e94\u7684\u529f\u80fd\u3002 \u5728Round Robin\u8c03\u5ea6\u7b97\u6cd5\u4e2d\uff0c\u901a\u8fc7\u5c06 default_sched_class \u6307\u5411\u4e3a\u76f8\u5e94\u7684\u5b9e\u73b0\uff0c\u5373\u53ef\u4f7f\u7528RR\u8c03\u5ea6\u7b97\u6cd5\u3002 struct sched_class default_sched_class = { .name = \"RR_scheduler\", .init = RR_init, .enqueue = RR_enqueue, .dequeue = RR_dequeue, .pick_next = RR_pick_next, .proc_tick = RR_proc_tick, }; \u95ee\u98981.2\uff1a\u8bf7\u5728\u5b9e\u9a8c\u62a5\u544a\u4e2d\u7b80\u8981\u8bf4\u660e\u5982\u4f55\u8bbe\u8ba1\u5b9e\u73b0\u201d\u591a\u7ea7\u53cd\u9988\u961f\u5217\u8c03\u5ea6\u7b97\u6cd5\u201c\uff0c\u7ed9\u51fa\u6982\u8981\u8bbe\u8ba1\uff0c\u9f13\u52b1\u7ed9\u51fa\u8be6\u7ec6\u8bbe\u8ba1 \u9996\u5148\u7ef4\u62a4\u591a\u4e2a\u94fe\u8868\uff0c\u6bcf\u4e2a\u94fe\u8868\u4fdd\u5b58\u4f18\u5148\u7ea7\u4e0d\u540c\u7684\u5c31\u7eea\u961f\u5217 \u8fdb\u7a0b\u5728\u521d\u59cb\u5316\u65f6\u9996\u5148\u63d2\u5165\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u961f\u5217\u7b49\u5f85 \u5728\u8c03\u5ea6\u65f6\uff0c\u4ece\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u961f\u5217\u4e2d\u5f00\u59cb\u5bfb\u627e\u8fdb\u7a0b\uff0c\u82e5\u4e3a\u7a7a\u5219\u8fdb\u5165\u4e0b\u4e00\u4f18\u5148\u7ea7\u961f\u5217\u5bfb\u627e \u5bf9\u4e8e\u67d0\u4e2a\u8fdb\u7a0b\uff0c\u5982\u679c\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u7247\u5185\u6ca1\u6709\u5b8c\u6210\uff0c\u5219\u5c06\u5176\u63d2\u5165\u4e0b\u4e00\u4f18\u5148\u7ea7\u961f\u5217\u7684\u94fe\u8868\u4e2d","title":"\u7ec3\u4e601\uff1a\u4f7f\u7528 Round Robin \u8c03\u5ea6\u7b97\u6cd5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab6/2/","text":"\u7ec3\u4e602\uff1a\u5b9e\u73b0 Stride Scheduling \u8c03\u5ea6\u7b97\u6cd5 \u5b9e\u73b0\u5728 kern/schedule/default_sched.c \u4e2d\u7684\u4e94\u4e2a\u51fd\u6570\uff0c\u5b9e\u73b0\u5982\u4e0b\uff1a stride_init static void stride_init(struct run_queue *rq) { /* LAB6: YOUR CODE * (1) init the ready process list: rq->run_list * (2) init the run pool: rq->lab6_run_pool * (3) set number of process: rq->proc_num to 0 */ list_init(&(rq->run_list)); rq->lab6_run_pool = NULL; rq->proc_num = 0; } \u8fdb\u884c\u521d\u59cb\u5316\u64cd\u4f5c\uff0c\u5c06\u8fd0\u884c\u961f\u5217\u7f6e\u7a7a\uff0c\u540c\u65f6\u5c06 proc_num \u7f6e\u96f6\u3002 stride_enqueue static void stride_enqueue(struct run_queue *rq, struct proc_struct *proc) { /* LAB6: YOUR CODE * (1) insert the proc into rq correctly * NOTICE: you can use skew_heap or list. Important functions * skew_heap_insert: insert a entry into skew_heap * list_add_before: insert a entry into the last of list * (2) recalculate proc->time_slice * (3) set proc->rq pointer to rq * (4) increase rq->proc_num */ #if USE_SKEW_HEAP rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f); #else list_add_before(&(rq->run_list), &(proc->run_link)); #endif if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) { proc->time_slice = rq->max_time_slice; } proc->rq = rq; rq->proc_num++; } \u8fd9\u91cc\u9700\u8981\u6839\u636e\u662f\u5426\u4f7f\u7528\u4f18\u5148\u7ea7\u961f\u5217\u6765\u8fdb\u884c\u4e0d\u540c\u7684\u64cd\u4f5c\uff0c\u5982\u679c\u4f7f\u7528\uff0c\u76f4\u63a5\u63d2\u5165\uff0c\u5426\u5219\u63d2\u5165\u5230\u94fe\u8868\u672b\u7aef\u3002\u5c06 proc->rq \u7f6e\u4e3a\u5f53\u524d rq \uff0c\u540c\u65f6\u5c06 proc_num \u52a0\u4e00\u3002 stride_dequeue static void stride_dequeue(struct run_queue *rq, struct proc_struct *proc) { /* LAB6: YOUR CODE * (1) remove the proc from rq correctly * NOTICE: you can use skew_heap or list. Important functions * skew_heap_remove: remove a entry from skew_heap * list_del_init: remove a entry from the list */ #if USE_SKEW_HEAP rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f); #else list_del_init(&(proc->run_link)); #endif rq->proc_num--; } \u5c06\u8fdb\u7a0b\u4ece\u6570\u636e\u7ed3\u6784\u4e2d\u5220\u9664\uff0c\u540c\u65f6 proc_num \u51cf\u4e00\u3002 stride_pick_next static struct proc_struct * stride_pick_next(struct run_queue *rq) { /* LAB6: YOUR CODE * (1) get a proc_struct pointer p with the minimum value of stride (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll (1.2) If using list, we have to search list to find the p with minimum stride value * (2) update p;s stride value: p->lab6_stride * (3) return p */ #if USE_SKEW_HEAP if (!rq->lab6_run_pool) { return NULL; } struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool); #else list_entry_t *le = list_next(&(rq->run_list)); if(le == &(rq->run_list)) { return NULL; } struct proc_struct *p = le2proc(le, run_link); for (le = list_next(le); le != &(rq->run_list); le = list_next(le)) { struct proc_struct *p1 = le2proc(le, run_link); if((int32_t)(p->lab6_stride - p1->lab6_stride) < 0) { p = p1; } } #endif if(p->lab6_priority == 0) { p->lab6_stride += BIG_STRIDE; } else { p->lab6_stride += BIG_STRIDE / p->lab6_priority; } return p; } \u9996\u5148\u9700\u8981\u9488\u5bf9\u4e0d\u540c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u627e\u5230\u4e0b\u4e00\u4e2a\u9009\u62e9\u7684\u8fdb\u7a0b\u3002\u5982\u679c\u662f\u4f18\u5148\u7ea7\u961f\u5217\uff0c\u5806\u9876\u7aef\u7684\u8fdb\u7a0b\u5373\u4e3a\u7ed3\u679c\uff0c\u5426\u5219\u9700\u8981\u904d\u5386\u94fe\u8868\uff0c\u627e\u5230 lab6_stride \u6700\u5c0f\u7684\u8fdb\u7a0b\u3002\u7136\u540e\u6839\u636e\u7b97\u6cd5\u5c06 lab6_stride \u52a0\u4e0a BIG_STRIDE / p->lab6_priority . stride_proc_tick static void stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) { /* LAB6: YOUR CODE */ if(proc->time_slice > 0) { proc->time_slice--; } if(proc->time_slice == 0) { proc->need_resched = 1; } } \u5224\u65ad\u5f53\u524d\u8fdb\u7a0b\u7684\u65f6\u95f4\u7247\u4e2a\u6570\u662f\u5426\u5927\u4e8e\u96f6\uff0c\u5982\u679c\u662f\u5219\u51cf\u4e00\uff0c\u5426\u5219\u5c06 need_resched \u7f6e1\uff0c\u5728\u4e0b\u6b21\u65f6\u949f\u4e2d\u65ad\u65f6\u8fdb\u884c\u5207\u6362\u8fdb\u7a0b\u3002 \u6267\u884c make run-priority \uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5982\u4e0b\uff1a kernel_execve: pid = 2, name = \"priority\". main: fork ok,now need to wait pids. child pid 6, acc 740000, time 1001 child pid 7, acc 912000, time 1002 child pid 4, acc 380000, time 1003 child pid 5, acc 560000, time 1003 child pid 3, acc 196000, time 1004 main: pid 3, acc 196000, time 1005 main: pid 4, acc 380000, time 1005 main: pid 5, acc 560000, time 1005 main: pid 6, acc 740000, time 1005 main: pid 7, acc 912000, time 1005 main: wait pids over stride sched correct result: 1 2 3 4 5 all user-mode processes have quit. \u53ef\u4ee5\u770b\u5230\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u3002","title":"2"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab6/2/#2-stride-scheduling","text":"\u5b9e\u73b0\u5728 kern/schedule/default_sched.c \u4e2d\u7684\u4e94\u4e2a\u51fd\u6570\uff0c\u5b9e\u73b0\u5982\u4e0b\uff1a stride_init static void stride_init(struct run_queue *rq) { /* LAB6: YOUR CODE * (1) init the ready process list: rq->run_list * (2) init the run pool: rq->lab6_run_pool * (3) set number of process: rq->proc_num to 0 */ list_init(&(rq->run_list)); rq->lab6_run_pool = NULL; rq->proc_num = 0; } \u8fdb\u884c\u521d\u59cb\u5316\u64cd\u4f5c\uff0c\u5c06\u8fd0\u884c\u961f\u5217\u7f6e\u7a7a\uff0c\u540c\u65f6\u5c06 proc_num \u7f6e\u96f6\u3002 stride_enqueue static void stride_enqueue(struct run_queue *rq, struct proc_struct *proc) { /* LAB6: YOUR CODE * (1) insert the proc into rq correctly * NOTICE: you can use skew_heap or list. Important functions * skew_heap_insert: insert a entry into skew_heap * list_add_before: insert a entry into the last of list * (2) recalculate proc->time_slice * (3) set proc->rq pointer to rq * (4) increase rq->proc_num */ #if USE_SKEW_HEAP rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f); #else list_add_before(&(rq->run_list), &(proc->run_link)); #endif if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) { proc->time_slice = rq->max_time_slice; } proc->rq = rq; rq->proc_num++; } \u8fd9\u91cc\u9700\u8981\u6839\u636e\u662f\u5426\u4f7f\u7528\u4f18\u5148\u7ea7\u961f\u5217\u6765\u8fdb\u884c\u4e0d\u540c\u7684\u64cd\u4f5c\uff0c\u5982\u679c\u4f7f\u7528\uff0c\u76f4\u63a5\u63d2\u5165\uff0c\u5426\u5219\u63d2\u5165\u5230\u94fe\u8868\u672b\u7aef\u3002\u5c06 proc->rq \u7f6e\u4e3a\u5f53\u524d rq \uff0c\u540c\u65f6\u5c06 proc_num \u52a0\u4e00\u3002 stride_dequeue static void stride_dequeue(struct run_queue *rq, struct proc_struct *proc) { /* LAB6: YOUR CODE * (1) remove the proc from rq correctly * NOTICE: you can use skew_heap or list. Important functions * skew_heap_remove: remove a entry from skew_heap * list_del_init: remove a entry from the list */ #if USE_SKEW_HEAP rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f); #else list_del_init(&(proc->run_link)); #endif rq->proc_num--; } \u5c06\u8fdb\u7a0b\u4ece\u6570\u636e\u7ed3\u6784\u4e2d\u5220\u9664\uff0c\u540c\u65f6 proc_num \u51cf\u4e00\u3002 stride_pick_next static struct proc_struct * stride_pick_next(struct run_queue *rq) { /* LAB6: YOUR CODE * (1) get a proc_struct pointer p with the minimum value of stride (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll (1.2) If using list, we have to search list to find the p with minimum stride value * (2) update p;s stride value: p->lab6_stride * (3) return p */ #if USE_SKEW_HEAP if (!rq->lab6_run_pool) { return NULL; } struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool); #else list_entry_t *le = list_next(&(rq->run_list)); if(le == &(rq->run_list)) { return NULL; } struct proc_struct *p = le2proc(le, run_link); for (le = list_next(le); le != &(rq->run_list); le = list_next(le)) { struct proc_struct *p1 = le2proc(le, run_link); if((int32_t)(p->lab6_stride - p1->lab6_stride) < 0) { p = p1; } } #endif if(p->lab6_priority == 0) { p->lab6_stride += BIG_STRIDE; } else { p->lab6_stride += BIG_STRIDE / p->lab6_priority; } return p; } \u9996\u5148\u9700\u8981\u9488\u5bf9\u4e0d\u540c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u627e\u5230\u4e0b\u4e00\u4e2a\u9009\u62e9\u7684\u8fdb\u7a0b\u3002\u5982\u679c\u662f\u4f18\u5148\u7ea7\u961f\u5217\uff0c\u5806\u9876\u7aef\u7684\u8fdb\u7a0b\u5373\u4e3a\u7ed3\u679c\uff0c\u5426\u5219\u9700\u8981\u904d\u5386\u94fe\u8868\uff0c\u627e\u5230 lab6_stride \u6700\u5c0f\u7684\u8fdb\u7a0b\u3002\u7136\u540e\u6839\u636e\u7b97\u6cd5\u5c06 lab6_stride \u52a0\u4e0a BIG_STRIDE / p->lab6_priority . stride_proc_tick static void stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) { /* LAB6: YOUR CODE */ if(proc->time_slice > 0) { proc->time_slice--; } if(proc->time_slice == 0) { proc->need_resched = 1; } } \u5224\u65ad\u5f53\u524d\u8fdb\u7a0b\u7684\u65f6\u95f4\u7247\u4e2a\u6570\u662f\u5426\u5927\u4e8e\u96f6\uff0c\u5982\u679c\u662f\u5219\u51cf\u4e00\uff0c\u5426\u5219\u5c06 need_resched \u7f6e1\uff0c\u5728\u4e0b\u6b21\u65f6\u949f\u4e2d\u65ad\u65f6\u8fdb\u884c\u5207\u6362\u8fdb\u7a0b\u3002 \u6267\u884c make run-priority \uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5982\u4e0b\uff1a kernel_execve: pid = 2, name = \"priority\". main: fork ok,now need to wait pids. child pid 6, acc 740000, time 1001 child pid 7, acc 912000, time 1002 child pid 4, acc 380000, time 1003 child pid 5, acc 560000, time 1003 child pid 3, acc 196000, time 1004 main: pid 3, acc 196000, time 1005 main: pid 4, acc 380000, time 1005 main: pid 5, acc 560000, time 1005 main: pid 6, acc 740000, time 1005 main: pid 7, acc 912000, time 1005 main: wait pids over stride sched correct result: 1 2 3 4 5 all user-mode processes have quit. \u53ef\u4ee5\u770b\u5230\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u3002","title":"\u7ec3\u4e602\uff1a\u5b9e\u73b0 Stride Scheduling \u8c03\u5ea6\u7b97\u6cd5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab7/1/","text":"\u7ec3\u4e601\uff1a\u7406\u89e3\u5185\u6838\u7ea7\u4fe1\u53f7\u91cf\u7684\u5b9e\u73b0\u548c\u57fa\u4e8e\u5185\u6838\u7ea7\u4fe1\u53f7\u91cf\u7684\u54f2\u5b66\u5bb6\u5c31\u9910\u95ee\u9898 \u95ee\u98981.1\uff1a\u7ed9\u51fa\u5185\u6838\u7ea7\u4fe1\u53f7\u91cf\u7684\u8bbe\u8ba1\u63cf\u8ff0\uff0c\u5e76\u8bf4\u5176\u5927\u81f4\u6267\u884c\u6d41\u6d41\u7a0b\u3002 \u5185\u6838\u7ea7\u4fe1\u53f7\u91cf\u7684\u5b9a\u4e49\u5728 kern/sync/sem.h \u4e2d\uff1a typedef struct { int value; wait_queue_t wait_queue; } semaphore_t; value \u7528\u4e8e\u8868\u793a\u4fe1\u53f7\u91cf\u4e2d\u8d44\u6e90\u7684\u6574\u6570\u503c\uff0c wait_queue \u8868\u793a\u7b49\u5f85\u961f\u5217\u3002 \u5bf9\u4e8e\u4fe1\u53f7\u91cf\u5b58\u5728\u4ee5\u4e0b\u51e0\u79cd\u64cd\u4f5c\uff1a sem_init(semaphore_t *sem, int value) : \u521d\u59cb\u5316\u4fe1\u53f7\u91cf\uff0c\u8bbe\u7f6e value \u5e76\u65b0\u5efa\u4e00\u4e2a\u7b49\u5f85\u961f\u5217 void up(semaphore_t *sem) : V\u64cd\u4f5c\uff0c\u8c03\u7528 __up() \u51fd\u6570\u5b9e\u73b0\u3002 void down(semaphore_t *sem) : P\u64cd\u4f5c\uff0c\u8c03\u7528 __down() \u51fd\u6570\u5b9e\u73b0\u3002 bool try_down(semaphore_t *sem) : \u975e\u963b\u585e\u7684P\u64cd\u4f5c\uff0c\u5982\u679c\u4fe1\u53f7\u91cf\u7684 value \u5927\u4e8e0\uff0c\u5219\u76f4\u63a5\u51cf\u4e00\u3002 \u4ece\u4ee5\u4e0a\u7684\u64cd\u4f5c\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u5173\u4e8e\u4fe1\u53f7\u91cf\u7684\u6838\u5fc3\u7684\u5b9e\u73b0\u4e3a __up() \u548c __down() \u51fd\u6570\u3002\u4e0b\u9762\u5bf9\u8fd9\u4e24\u4e2a\u51fd\u6570\u505a\u8fdb\u4e00\u6b65\u5206\u6790\u3002 static __noinline void __up(semaphore_t *sem, uint32_t wait_state) { bool intr_flag; local_intr_save(intr_flag); { wait_t *wait; if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) { sem->value ++; } else { assert(wait->proc->wait_state == wait_state); wakeup_wait(&(sem->wait_queue), wait, wait_state, 1); } } local_intr_restore(intr_flag); } V\u64cd\u4f5c\u7684\u6267\u884c\u8fc7\u7a0b\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u5173\u4e2d\u65ad \u5224\u65ad\u7b49\u5f85\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff0c\u82e5\u4e3a\u7a7a\uff0c\u5c06 value \u503c\u52a0\u4e00 \u5426\u5219\uff0c\u8c03\u7528 wake_up \u5c06\u7761\u7720\u7684\u8fdb\u7a0b\u5524\u9192 \u5f00\u4e2d\u65ad\u8fd4\u56de static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) { bool intr_flag; local_intr_save(intr_flag); if (sem->value > 0) { sem->value --; local_intr_restore(intr_flag); return 0; } wait_t __wait, *wait = &__wait; wait_current_set(&(sem->wait_queue), wait, wait_state); local_intr_restore(intr_flag); schedule(); local_intr_save(intr_flag); wait_current_del(&(sem->wait_queue), wait); local_intr_restore(intr_flag); if (wait->wakeup_flags != wait_state) { return wait->wakeup_flags; } return 0; } P\u64cd\u4f5c\u7684\u6267\u884c\u8fc7\u7a0b\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u5173\u4e2d\u65ad \u5224\u65ad\u4fe1\u53f7\u91cf\u7684 value \u662f\u5426\u5927\u4e8e0\uff0c\u5982\u679c\u662f\uff0c\u5219\u5c06 value \u51cf\u4e00\u540e\u5f00\u4e2d\u65ad\u8fd4\u56de \u5426\u5219\uff0c\u5c06\u5f53\u524d\u8fdb\u7a0b\u52a0\u5165\u5230\u7b49\u5f85\u961f\u5217\uff0c\u5f00\u4e2d\u65ad\u3002\u6267\u884c schedule \u8fdb\u884c\u8fdb\u7a0b\u8c03\u5ea6 \u5982\u679c\u88ab\u5524\u9192\uff0c\u5219\u5173\u4e2d\u65ad \u4ece\u7b49\u5f85\u961f\u5217\u4e2d\u5220\u9664\u6b64\u8fdb\u7a0b \u5f00\u4e2d\u65ad\u5e76\u8fd4\u56de \u95ee\u98981.2\uff1a\u7ed9\u51fa\u7ed9\u7528\u6237\u6001\u8fdb\u7a0b/\u7ebf\u7a0b\u63d0\u4f9b\u4fe1\u53f7\u91cf\u673a\u5236\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5e76\u6bd4\u8f83\u8bf4\u660e\u7ed9\u5185\u6838\u7ea7\u63d0\u4f9b\u4fe1\u53f7\u91cf\u673a\u5236\u7684\u5f02\u540c\u3002 \u7531\u4e8e\u5b9e\u73b0\u4fe1\u53f7\u91cf\u673a\u5236\u9700\u8981\u5305\u542b\u5f00\u5173\u4e2d\u65ad\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u5728\u7528\u6237\u6001\u65e0\u6cd5\u76f4\u63a5\u6267\u884c\uff0c\u9700\u8981\u7cfb\u7edf\u8c03\u7528\u6765\u5b8c\u6210\u7528\u6237\u6001\u7684\u4fe1\u53f7\u91cf\u673a\u5236\u3002\u53ef\u4ee5\u589e\u52a0\u4e0e\u4fe1\u53f7\u91cf\u76f8\u5173\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u6bd4\u5982 SYS_SEMINIT , SYS_UP , SYS_DOWN \u7b49\u3002 \u76f8\u540c\u70b9\uff1a\u5b9e\u73b0\u673a\u5236\u76f8\u540c \u4e0d\u540c\u70b9\uff1a\u7528\u6237\u6001\u9700\u8981\u7cfb\u7edf\u8c03\u7528 \u200b","title":"1"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab7/1/#1","text":"\u95ee\u98981.1\uff1a\u7ed9\u51fa\u5185\u6838\u7ea7\u4fe1\u53f7\u91cf\u7684\u8bbe\u8ba1\u63cf\u8ff0\uff0c\u5e76\u8bf4\u5176\u5927\u81f4\u6267\u884c\u6d41\u6d41\u7a0b\u3002 \u5185\u6838\u7ea7\u4fe1\u53f7\u91cf\u7684\u5b9a\u4e49\u5728 kern/sync/sem.h \u4e2d\uff1a typedef struct { int value; wait_queue_t wait_queue; } semaphore_t; value \u7528\u4e8e\u8868\u793a\u4fe1\u53f7\u91cf\u4e2d\u8d44\u6e90\u7684\u6574\u6570\u503c\uff0c wait_queue \u8868\u793a\u7b49\u5f85\u961f\u5217\u3002 \u5bf9\u4e8e\u4fe1\u53f7\u91cf\u5b58\u5728\u4ee5\u4e0b\u51e0\u79cd\u64cd\u4f5c\uff1a sem_init(semaphore_t *sem, int value) : \u521d\u59cb\u5316\u4fe1\u53f7\u91cf\uff0c\u8bbe\u7f6e value \u5e76\u65b0\u5efa\u4e00\u4e2a\u7b49\u5f85\u961f\u5217 void up(semaphore_t *sem) : V\u64cd\u4f5c\uff0c\u8c03\u7528 __up() \u51fd\u6570\u5b9e\u73b0\u3002 void down(semaphore_t *sem) : P\u64cd\u4f5c\uff0c\u8c03\u7528 __down() \u51fd\u6570\u5b9e\u73b0\u3002 bool try_down(semaphore_t *sem) : \u975e\u963b\u585e\u7684P\u64cd\u4f5c\uff0c\u5982\u679c\u4fe1\u53f7\u91cf\u7684 value \u5927\u4e8e0\uff0c\u5219\u76f4\u63a5\u51cf\u4e00\u3002 \u4ece\u4ee5\u4e0a\u7684\u64cd\u4f5c\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u5173\u4e8e\u4fe1\u53f7\u91cf\u7684\u6838\u5fc3\u7684\u5b9e\u73b0\u4e3a __up() \u548c __down() \u51fd\u6570\u3002\u4e0b\u9762\u5bf9\u8fd9\u4e24\u4e2a\u51fd\u6570\u505a\u8fdb\u4e00\u6b65\u5206\u6790\u3002 static __noinline void __up(semaphore_t *sem, uint32_t wait_state) { bool intr_flag; local_intr_save(intr_flag); { wait_t *wait; if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) { sem->value ++; } else { assert(wait->proc->wait_state == wait_state); wakeup_wait(&(sem->wait_queue), wait, wait_state, 1); } } local_intr_restore(intr_flag); } V\u64cd\u4f5c\u7684\u6267\u884c\u8fc7\u7a0b\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u5173\u4e2d\u65ad \u5224\u65ad\u7b49\u5f85\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff0c\u82e5\u4e3a\u7a7a\uff0c\u5c06 value \u503c\u52a0\u4e00 \u5426\u5219\uff0c\u8c03\u7528 wake_up \u5c06\u7761\u7720\u7684\u8fdb\u7a0b\u5524\u9192 \u5f00\u4e2d\u65ad\u8fd4\u56de static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) { bool intr_flag; local_intr_save(intr_flag); if (sem->value > 0) { sem->value --; local_intr_restore(intr_flag); return 0; } wait_t __wait, *wait = &__wait; wait_current_set(&(sem->wait_queue), wait, wait_state); local_intr_restore(intr_flag); schedule(); local_intr_save(intr_flag); wait_current_del(&(sem->wait_queue), wait); local_intr_restore(intr_flag); if (wait->wakeup_flags != wait_state) { return wait->wakeup_flags; } return 0; } P\u64cd\u4f5c\u7684\u6267\u884c\u8fc7\u7a0b\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u5173\u4e2d\u65ad \u5224\u65ad\u4fe1\u53f7\u91cf\u7684 value \u662f\u5426\u5927\u4e8e0\uff0c\u5982\u679c\u662f\uff0c\u5219\u5c06 value \u51cf\u4e00\u540e\u5f00\u4e2d\u65ad\u8fd4\u56de \u5426\u5219\uff0c\u5c06\u5f53\u524d\u8fdb\u7a0b\u52a0\u5165\u5230\u7b49\u5f85\u961f\u5217\uff0c\u5f00\u4e2d\u65ad\u3002\u6267\u884c schedule \u8fdb\u884c\u8fdb\u7a0b\u8c03\u5ea6 \u5982\u679c\u88ab\u5524\u9192\uff0c\u5219\u5173\u4e2d\u65ad \u4ece\u7b49\u5f85\u961f\u5217\u4e2d\u5220\u9664\u6b64\u8fdb\u7a0b \u5f00\u4e2d\u65ad\u5e76\u8fd4\u56de \u95ee\u98981.2\uff1a\u7ed9\u51fa\u7ed9\u7528\u6237\u6001\u8fdb\u7a0b/\u7ebf\u7a0b\u63d0\u4f9b\u4fe1\u53f7\u91cf\u673a\u5236\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5e76\u6bd4\u8f83\u8bf4\u660e\u7ed9\u5185\u6838\u7ea7\u63d0\u4f9b\u4fe1\u53f7\u91cf\u673a\u5236\u7684\u5f02\u540c\u3002 \u7531\u4e8e\u5b9e\u73b0\u4fe1\u53f7\u91cf\u673a\u5236\u9700\u8981\u5305\u542b\u5f00\u5173\u4e2d\u65ad\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u5728\u7528\u6237\u6001\u65e0\u6cd5\u76f4\u63a5\u6267\u884c\uff0c\u9700\u8981\u7cfb\u7edf\u8c03\u7528\u6765\u5b8c\u6210\u7528\u6237\u6001\u7684\u4fe1\u53f7\u91cf\u673a\u5236\u3002\u53ef\u4ee5\u589e\u52a0\u4e0e\u4fe1\u53f7\u91cf\u76f8\u5173\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u6bd4\u5982 SYS_SEMINIT , SYS_UP , SYS_DOWN \u7b49\u3002 \u76f8\u540c\u70b9\uff1a\u5b9e\u73b0\u673a\u5236\u76f8\u540c \u4e0d\u540c\u70b9\uff1a\u7528\u6237\u6001\u9700\u8981\u7cfb\u7edf\u8c03\u7528 \u200b","title":"\u7ec3\u4e601\uff1a\u7406\u89e3\u5185\u6838\u7ea7\u4fe1\u53f7\u91cf\u7684\u5b9e\u73b0\u548c\u57fa\u4e8e\u5185\u6838\u7ea7\u4fe1\u53f7\u91cf\u7684\u54f2\u5b66\u5bb6\u5c31\u9910\u95ee\u9898"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab7/2/","text":"\u7ec3\u4e602\uff1a\u5b8c\u6210\u5185\u6838\u7ea7\u6761\u4ef6\u53d8\u91cf\u548c\u57fa\u4e8e\u5185\u6838\u7ea7\u6761\u4ef6\u53d8\u91cf\u7684\u54f2\u5b66\u5bb6\u5c31\u9910\u95ee\u9898 \u95ee\u98982.1\uff1a\u7ed9\u51fa\u5185\u6838\u7ea7\u6761\u4ef6\u53d8\u91cf\u7684\u8bbe\u8ba1\u63cf\u8ff0\uff0c\u5e76\u8bf4\u5176\u5927\u81f4\u6267\u884c\u6d41\u6d41\u7a0b\u3002 ucore\u4e2d\u7ba1\u7a0b\u6570\u636e\u7ed3\u6784 monitor_t \u7684\u5b9a\u4e49\u5982\u4e0b\uff1a typedef struct monitor{ semaphore_t mutex; // the mutex lock for going into the routines in monitor, should be initialized to 1 semaphore_t next; // the next semaphore is used to down the signaling proc itself, and the other OR wakeuped waiting proc should wake up the sleeped signaling proc. int next_count; // the number of of sleeped signaling proc condvar_t *cv; // the condvars in monitor } monitor_t; \u5176\u6210\u5458\u53d8\u91cf\u7684\u542b\u4e49\u53ca\u529f\u80fd\u4e3a\uff1a mutex : \u4e8c\u503c\u4fe1\u53f7\u91cf\uff0c\u5b9e\u73b0\u6bcf\u6b21\u53ea\u5141\u8bb8\u4e00\u4e2a\u8fdb\u7a0b\u8fdb\u5165\u7ba1\u7a0b\u7684\u4fe1\u53f7\u91cf\uff0c\u786e\u4fdd\u4e86\u4e92\u65a5\u8bbf\u95ee\u6027\u8d28. cv : \u7ba1\u7a0b\u4e2d\u7684\u6761\u4ef6\u53d8\u91cf cv \u901a\u8fc7\u6267\u884c wait_cv \uff0c\u4f1a\u4f7f\u5f97\u7b49\u5f85\u67d0\u4e2a\u6761\u4ef6C\u4e3a\u771f\u7684\u8fdb\u7a0b\u80fd\u591f\u79bb\u5f00\u7ba1\u7a0b\u5e76\u7761\u7720\uff0c\u4e14\u8ba9\u5176\u4ed6\u8fdb\u7a0b\u8fdb\u5165\u7ba1\u7a0b\u7ee7\u7eed\u6267\u884c\uff1b\u800c\u8fdb\u5165\u7ba1\u7a0b\u7684\u67d0\u8fdb\u7a0b\u8bbe\u7f6e\u6761\u4ef6C\u4e3a\u771f\u5e76\u6267\u884c signal_cv \u65f6\uff0c\u80fd\u591f\u8ba9\u7b49\u5f85\u67d0\u4e2a\u6761\u4ef6C\u4e3a\u771f\u7684\u7761\u7720\u8fdb\u7a0b\u88ab\u5524\u9192\uff0c\u4ece\u800c\u7ee7\u7eed\u8fdb\u5165\u7ba1\u7a0b\u4e2d\u6267\u884c\u3002 next / next_count : \u914d\u5408\u8fdb\u7a0b\u5bf9\u6761\u4ef6\u53d8\u91cf cv \u7684\u64cd\u4f5c\u800c\u8bbe\u7f6e\u7684\uff0c\u8fd9\u662f\u7531\u4e8e\u53d1\u51fa signal_cv \u7684\u8fdb\u7a0bA\u4f1a\u5524\u9192\u7761\u7720\u8fdb\u7a0bB\uff0c\u8fdb\u7a0bB\u6267\u884c\u4f1a\u5bfc\u81f4\u8fdb\u7a0bA\u7761\u7720\uff0c\u76f4\u5230\u8fdb\u7a0bB\u79bb\u5f00\u7ba1\u7a0b\uff0c\u8fdb\u7a0bA\u624d\u80fd\u7ee7\u7eed\u6267\u884c\uff0c\u8fd9\u4e2a\u540c\u6b65\u8fc7\u7a0b\u662f\u901a\u8fc7\u4fe1\u53f7\u91cf next \u5b8c\u6210\u7684\uff1b\u800c next_count \u8868\u793a\u4e86\u7531\u4e8e\u53d1\u51fasingal_cv\u800c\u7761\u7720\u7684\u8fdb\u7a0b\u4e2a\u6570\u3002 \u6761\u4ef6\u53d8\u91cf\u7684\u6570\u636e\u7ed3\u6784 condvar_t \u5b9a\u4e49\u5982\u4e0b\uff1a typedef struct condvar{ semaphore_t sem; // the sem semaphore is used to down the waiting proc, and the signaling proc should up the waiting proc int count; // the number of waiters on condvar monitor_t * owner; // the owner(monitor) of this condvar } condvar_t; \u5176\u6210\u5458\u53d8\u91cf\u7684\u542b\u4e49\u53ca\u529f\u80fd\u4e3a\uff1a sem : \u7528\u4e8e\u8ba9\u53d1\u51fa wait_cv \u64cd\u4f5c\u7684\u7b49\u5f85\u67d0\u4e2a\u6761\u4ef6C\u4e3a\u771f\u7684\u8fdb\u7a0b\u7761\u7720\uff0c\u800c\u8ba9\u53d1\u51fa signal_cv \u64cd\u4f5c\u7684\u8fdb\u7a0b\u901a\u8fc7\u8fd9\u4e2asem\u6765\u5524\u9192\u7761\u7720\u7684\u8fdb\u7a0b\u3002 count : \u8868\u793a\u7b49\u5728\u8fd9\u4e2a\u6761\u4ef6\u53d8\u91cf\u4e0a\u7684\u7761\u7720\u8fdb\u7a0b\u7684\u4e2a\u6570. owner : \u8868\u793a\u6b64\u6761\u4ef6\u53d8\u91cf\u7684\u5bbf\u4e3b\u662f\u54ea\u4e2a\u7ba1\u7a0b\u3002 \u5bf9\u4e8e\u7ba1\u7a0b\u7684\u4e24\u4e2a\u91cd\u8981\u7684\u51fd\u6570\u4e3a cond_wait \u548c cond_signal void cond_wait (condvar_t *cvp) { //LAB7 EXERCISE1: YOUR CODE cprintf(\"cond_wait begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\\n\", cvp, cvp->count, cvp->owner->next_count); /* * cv.count ++; * if(mt.next_count>0) * signal(mt.next) * else * signal(mt.mutex); * wait(cv.sem); * cv.count --; */ cvp->count++; if (cvp->owner->next_count > 0) { up(&(cvp->owner->next)); } else { up(&(cvp->owner->mutex)); } down(&(cvp->sem)); cvp->count--; cprintf(\"cond_wait end: cvp %x, cvp->count %d, cvp->owner->next_count %d\\n\", cvp, cvp->count, cvp->owner->next_count); } \u6267\u884c\u8fc7\u7a0b\u5982\u4e0b\uff1a \u6761\u4ef6\u53d8\u91cf\u7684 count \u52a0\u4e00 \u5982\u679c monitor.next_count \u5927\u4e8e0\uff0c\u8868\u793a\u6709\u8fdb\u7a0b\u6267\u884c cond_signal \u51fd\u6570\u7761\u7720\u4e86\uff0c\u8fd9\u4e9b\u8fdb\u7a0b\u6784\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u9700\u8981\u5524\u9192\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a\u8fdb\u7a0b\u3002 \u5426\u5219\uff0c\u9700\u8981\u5524\u9192\u7531\u4e8e\u4e92\u65a5\u800c\u4e0d\u80fd\u8fdb\u5165\u7ba1\u7a0b\u7684\u8fdb\u7a0b\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a\u8fdb\u7a0b \u5bf9\u6761\u4ef6\u53d8\u91cf\u7684\u4fe1\u53f7\u91cf\u6267\u884cP\u64cd\u4f5c\uff0c\u8bf7\u6c42\u8bbf\u95ee\u8d44\u6e90 \u6761\u4ef6\u53d8\u91cf\u7684 count \u51cf\u4e00 void cond_signal (condvar_t *cvp) { //LAB7 EXERCISE1: YOUR CODE cprintf(\"cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\\n\", cvp, cvp->count, cvp->owner->next_count); /* * cond_signal(cv) { * if(cv.count>0) { * mt.next_count ++; * signal(cv.sem); * wait(mt.next); * mt.next_count--; * } * } */ if (cvp->count > 0) { cvp->owner->next_count++; up(&(cvp->sem)); down(&(cvp->owner->next)); cvp->owner->next_count--; } cprintf(\"cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\\n\", cvp, cvp->count, cvp->owner->next_count); } \u6267\u884c\u8fc7\u7a0b\u5982\u4e0b\uff1a \u5224\u65ad\u662f\u5426\u5b58\u5728\u7b49\u5f85\u6b64\u6761\u4ef6\u7684\u8fdb\u7a0b \u5982\u679c\u6709\uff0c\u5c06\u6b64\u8fdb\u7a0b\u7761\u7720\u5728 cvp->owner->next \u4e0a\uff0c\u7b49\u5f85\u5176\u4ed6\u8fdb\u7a0b\u5c06\u672c\u8fdb\u7a0b\u518d\u6b21\u5524\u9192 \u95ee\u98982.2\uff1a\u7ed9\u51fa\u7ed9\u7528\u6237\u6001\u8fdb\u7a0b/\u7ebf\u7a0b\u63d0\u4f9b\u6761\u4ef6\u53d8\u91cf\u673a\u5236\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5e76\u6bd4\u8f83\u8bf4\u660e\u7ed9\u5185\u6838\u7ea7\u63d0\u4f9b\u6761\u4ef6\u53d8\u91cf\u673a\u5236\u7684\u5f02\u540c\u3002 \u540c\u4fe1\u53f7\u91cf\u4e00\u6837\uff0c\u9700\u8981\u5c01\u88c5\u4e3a\u7cfb\u7edf\u8c03\u7528\u63a5\u53e3\u3002\u5728\u6b64\u4e0d\u518d\u8d58\u8ff0\u3002","title":"2"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab7/2/#2","text":"\u95ee\u98982.1\uff1a\u7ed9\u51fa\u5185\u6838\u7ea7\u6761\u4ef6\u53d8\u91cf\u7684\u8bbe\u8ba1\u63cf\u8ff0\uff0c\u5e76\u8bf4\u5176\u5927\u81f4\u6267\u884c\u6d41\u6d41\u7a0b\u3002 ucore\u4e2d\u7ba1\u7a0b\u6570\u636e\u7ed3\u6784 monitor_t \u7684\u5b9a\u4e49\u5982\u4e0b\uff1a typedef struct monitor{ semaphore_t mutex; // the mutex lock for going into the routines in monitor, should be initialized to 1 semaphore_t next; // the next semaphore is used to down the signaling proc itself, and the other OR wakeuped waiting proc should wake up the sleeped signaling proc. int next_count; // the number of of sleeped signaling proc condvar_t *cv; // the condvars in monitor } monitor_t; \u5176\u6210\u5458\u53d8\u91cf\u7684\u542b\u4e49\u53ca\u529f\u80fd\u4e3a\uff1a mutex : \u4e8c\u503c\u4fe1\u53f7\u91cf\uff0c\u5b9e\u73b0\u6bcf\u6b21\u53ea\u5141\u8bb8\u4e00\u4e2a\u8fdb\u7a0b\u8fdb\u5165\u7ba1\u7a0b\u7684\u4fe1\u53f7\u91cf\uff0c\u786e\u4fdd\u4e86\u4e92\u65a5\u8bbf\u95ee\u6027\u8d28. cv : \u7ba1\u7a0b\u4e2d\u7684\u6761\u4ef6\u53d8\u91cf cv \u901a\u8fc7\u6267\u884c wait_cv \uff0c\u4f1a\u4f7f\u5f97\u7b49\u5f85\u67d0\u4e2a\u6761\u4ef6C\u4e3a\u771f\u7684\u8fdb\u7a0b\u80fd\u591f\u79bb\u5f00\u7ba1\u7a0b\u5e76\u7761\u7720\uff0c\u4e14\u8ba9\u5176\u4ed6\u8fdb\u7a0b\u8fdb\u5165\u7ba1\u7a0b\u7ee7\u7eed\u6267\u884c\uff1b\u800c\u8fdb\u5165\u7ba1\u7a0b\u7684\u67d0\u8fdb\u7a0b\u8bbe\u7f6e\u6761\u4ef6C\u4e3a\u771f\u5e76\u6267\u884c signal_cv \u65f6\uff0c\u80fd\u591f\u8ba9\u7b49\u5f85\u67d0\u4e2a\u6761\u4ef6C\u4e3a\u771f\u7684\u7761\u7720\u8fdb\u7a0b\u88ab\u5524\u9192\uff0c\u4ece\u800c\u7ee7\u7eed\u8fdb\u5165\u7ba1\u7a0b\u4e2d\u6267\u884c\u3002 next / next_count : \u914d\u5408\u8fdb\u7a0b\u5bf9\u6761\u4ef6\u53d8\u91cf cv \u7684\u64cd\u4f5c\u800c\u8bbe\u7f6e\u7684\uff0c\u8fd9\u662f\u7531\u4e8e\u53d1\u51fa signal_cv \u7684\u8fdb\u7a0bA\u4f1a\u5524\u9192\u7761\u7720\u8fdb\u7a0bB\uff0c\u8fdb\u7a0bB\u6267\u884c\u4f1a\u5bfc\u81f4\u8fdb\u7a0bA\u7761\u7720\uff0c\u76f4\u5230\u8fdb\u7a0bB\u79bb\u5f00\u7ba1\u7a0b\uff0c\u8fdb\u7a0bA\u624d\u80fd\u7ee7\u7eed\u6267\u884c\uff0c\u8fd9\u4e2a\u540c\u6b65\u8fc7\u7a0b\u662f\u901a\u8fc7\u4fe1\u53f7\u91cf next \u5b8c\u6210\u7684\uff1b\u800c next_count \u8868\u793a\u4e86\u7531\u4e8e\u53d1\u51fasingal_cv\u800c\u7761\u7720\u7684\u8fdb\u7a0b\u4e2a\u6570\u3002 \u6761\u4ef6\u53d8\u91cf\u7684\u6570\u636e\u7ed3\u6784 condvar_t \u5b9a\u4e49\u5982\u4e0b\uff1a typedef struct condvar{ semaphore_t sem; // the sem semaphore is used to down the waiting proc, and the signaling proc should up the waiting proc int count; // the number of waiters on condvar monitor_t * owner; // the owner(monitor) of this condvar } condvar_t; \u5176\u6210\u5458\u53d8\u91cf\u7684\u542b\u4e49\u53ca\u529f\u80fd\u4e3a\uff1a sem : \u7528\u4e8e\u8ba9\u53d1\u51fa wait_cv \u64cd\u4f5c\u7684\u7b49\u5f85\u67d0\u4e2a\u6761\u4ef6C\u4e3a\u771f\u7684\u8fdb\u7a0b\u7761\u7720\uff0c\u800c\u8ba9\u53d1\u51fa signal_cv \u64cd\u4f5c\u7684\u8fdb\u7a0b\u901a\u8fc7\u8fd9\u4e2asem\u6765\u5524\u9192\u7761\u7720\u7684\u8fdb\u7a0b\u3002 count : \u8868\u793a\u7b49\u5728\u8fd9\u4e2a\u6761\u4ef6\u53d8\u91cf\u4e0a\u7684\u7761\u7720\u8fdb\u7a0b\u7684\u4e2a\u6570. owner : \u8868\u793a\u6b64\u6761\u4ef6\u53d8\u91cf\u7684\u5bbf\u4e3b\u662f\u54ea\u4e2a\u7ba1\u7a0b\u3002 \u5bf9\u4e8e\u7ba1\u7a0b\u7684\u4e24\u4e2a\u91cd\u8981\u7684\u51fd\u6570\u4e3a cond_wait \u548c cond_signal void cond_wait (condvar_t *cvp) { //LAB7 EXERCISE1: YOUR CODE cprintf(\"cond_wait begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\\n\", cvp, cvp->count, cvp->owner->next_count); /* * cv.count ++; * if(mt.next_count>0) * signal(mt.next) * else * signal(mt.mutex); * wait(cv.sem); * cv.count --; */ cvp->count++; if (cvp->owner->next_count > 0) { up(&(cvp->owner->next)); } else { up(&(cvp->owner->mutex)); } down(&(cvp->sem)); cvp->count--; cprintf(\"cond_wait end: cvp %x, cvp->count %d, cvp->owner->next_count %d\\n\", cvp, cvp->count, cvp->owner->next_count); } \u6267\u884c\u8fc7\u7a0b\u5982\u4e0b\uff1a \u6761\u4ef6\u53d8\u91cf\u7684 count \u52a0\u4e00 \u5982\u679c monitor.next_count \u5927\u4e8e0\uff0c\u8868\u793a\u6709\u8fdb\u7a0b\u6267\u884c cond_signal \u51fd\u6570\u7761\u7720\u4e86\uff0c\u8fd9\u4e9b\u8fdb\u7a0b\u6784\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u9700\u8981\u5524\u9192\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a\u8fdb\u7a0b\u3002 \u5426\u5219\uff0c\u9700\u8981\u5524\u9192\u7531\u4e8e\u4e92\u65a5\u800c\u4e0d\u80fd\u8fdb\u5165\u7ba1\u7a0b\u7684\u8fdb\u7a0b\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a\u8fdb\u7a0b \u5bf9\u6761\u4ef6\u53d8\u91cf\u7684\u4fe1\u53f7\u91cf\u6267\u884cP\u64cd\u4f5c\uff0c\u8bf7\u6c42\u8bbf\u95ee\u8d44\u6e90 \u6761\u4ef6\u53d8\u91cf\u7684 count \u51cf\u4e00 void cond_signal (condvar_t *cvp) { //LAB7 EXERCISE1: YOUR CODE cprintf(\"cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\\n\", cvp, cvp->count, cvp->owner->next_count); /* * cond_signal(cv) { * if(cv.count>0) { * mt.next_count ++; * signal(cv.sem); * wait(mt.next); * mt.next_count--; * } * } */ if (cvp->count > 0) { cvp->owner->next_count++; up(&(cvp->sem)); down(&(cvp->owner->next)); cvp->owner->next_count--; } cprintf(\"cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\\n\", cvp, cvp->count, cvp->owner->next_count); } \u6267\u884c\u8fc7\u7a0b\u5982\u4e0b\uff1a \u5224\u65ad\u662f\u5426\u5b58\u5728\u7b49\u5f85\u6b64\u6761\u4ef6\u7684\u8fdb\u7a0b \u5982\u679c\u6709\uff0c\u5c06\u6b64\u8fdb\u7a0b\u7761\u7720\u5728 cvp->owner->next \u4e0a\uff0c\u7b49\u5f85\u5176\u4ed6\u8fdb\u7a0b\u5c06\u672c\u8fdb\u7a0b\u518d\u6b21\u5524\u9192 \u95ee\u98982.2\uff1a\u7ed9\u51fa\u7ed9\u7528\u6237\u6001\u8fdb\u7a0b/\u7ebf\u7a0b\u63d0\u4f9b\u6761\u4ef6\u53d8\u91cf\u673a\u5236\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5e76\u6bd4\u8f83\u8bf4\u660e\u7ed9\u5185\u6838\u7ea7\u63d0\u4f9b\u6761\u4ef6\u53d8\u91cf\u673a\u5236\u7684\u5f02\u540c\u3002 \u540c\u4fe1\u53f7\u91cf\u4e00\u6837\uff0c\u9700\u8981\u5c01\u88c5\u4e3a\u7cfb\u7edf\u8c03\u7528\u63a5\u53e3\u3002\u5728\u6b64\u4e0d\u518d\u8d58\u8ff0\u3002","title":"\u7ec3\u4e602\uff1a\u5b8c\u6210\u5185\u6838\u7ea7\u6761\u4ef6\u53d8\u91cf\u548c\u57fa\u4e8e\u5185\u6838\u7ea7\u6761\u4ef6\u53d8\u91cf\u7684\u54f2\u5b66\u5bb6\u5c31\u9910\u95ee\u9898"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab8/lab8/","text":"Lab8 Report \u7ec3\u4e601\uff1a\u5b8c\u6210\u8bfb\u6587\u4ef6\u64cd\u4f5c\u7684\u5b9e\u73b0 \u5728 kern/fs/sfs/sfs_inode.c \u4e2d\u5b8c\u6210 sys_io_nolock \u51fd\u6570\uff0c\u5b8c\u6210\u8bfb\u53d6\u5199\u5165\u64cd\u4f5c\u3002\u4ee3\u7801\u5982\u4e0b\uff1a static int sfs_io_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, void *buf, off_t offset, size_t *alenp, bool write) { struct sfs_disk_inode *din = sin->din; assert(din->type != SFS_TYPE_DIR); off_t endpos = offset + *alenp, blkoff; *alenp = 0; // calculate the Rd/Wr end position if (offset < 0 || offset >= SFS_MAX_FILE_SIZE || offset > endpos) { return -E_INVAL; } if (offset == endpos) { return 0; } if (endpos > SFS_MAX_FILE_SIZE) { endpos = SFS_MAX_FILE_SIZE; } if (!write) { if (offset >= din->size) { return 0; } if (endpos > din->size) { endpos = din->size; } } int (*sfs_buf_op)(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset); int (*sfs_block_op)(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks); if (write) { sfs_buf_op = sfs_wbuf, sfs_block_op = sfs_wblock; } else { sfs_buf_op = sfs_rbuf, sfs_block_op = sfs_rblock; } int ret = 0; size_t size, alen = 0; uint32_t ino; uint32_t blkno = offset / SFS_BLKSIZE; // The NO. of Rd/Wr begin block uint32_t nblks = endpos / SFS_BLKSIZE - blkno; // The size of Rd/Wr blocks //LAB8:EXERCISE1 YOUR CODE HINT: call sfs_bmap_load_nolock, sfs_rbuf, sfs_rblock,etc. read different kind of blocks in file /* * (1) If offset isn't aligned with the first block, Rd/Wr some content from offset to the end of the first block * NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op * Rd/Wr size = (nblks != 0) ? (SFS_BLKSIZE - blkoff) : (endpos - offset) * (2) Rd/Wr aligned blocks * NOTICE: useful function: sfs_bmap_load_nolock, sfs_block_op * (3) If end position isn't aligned with the last block, Rd/Wr some content from begin to the (endpos % SFS_BLKSIZE) of the last block * NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op */ blkoff = offset % SFS_BLKSIZE; if (blkoff != 0) { size = (nblks != 0) ? (SFS_BLKSIZE - blkoff) : (endpos - offset); if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) { goto out; } if ((ret = sfs_buf_op(sfs, buf, size, ino, blkoff)) != 0) { goto out; } alen += size; if (nblks == 0) { goto out; } buf += size; blkno++; nblks--; } size = SFS_BLKSIZE; while (nblks > 0) { if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) { goto out; } if ((ret = sfs_block_op(sfs, buf, ino, 1)) != 0) { goto out; } alen += size; buf += size; blkno++; nblks--; } blkoff = 0; size = endpos % SFS_BLKSIZE; if (size > 0) { if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) { goto out; } if ((ret = sfs_buf_op(sfs, buf, size, ino, blkoff)) != 0) { goto out; } alen += size; } out: *alenp = alen; if (offset + alen > sin->din->size) { sin->din->size = offset + alen; sin->dirty = 1; } return ret; } \u4ee3\u7801\u7684\u6267\u884c\u6b65\u9aa4\u4e3a\uff1a \u5904\u7406\u8d77\u59cb\u5730\u5740\u6240\u5728\u7684\u5757\u3002\u5224\u65ad\u8d77\u59cb\u5730\u5740\u7684 offset \u662f\u5426\u5bf9\u9f50\uff0c\u5982\u679c\u4e0d\u5bf9\u9f50\uff0c\u8ba1\u7b97\u5757\u5185\u504f\u79fb blkoff \u548c\u5927\u5c0f size \u3002\u8c03\u7528 sfs_bmap_load_nolock \u83b7\u53d6 ino \uff0c\u518d\u8c03\u7528 sfs_buf_op \u5b8c\u6210\u5b9e\u9645\u7684\u8bfb\u5199\u64cd\u4f5c\u3002\u5b8c\u6210\u540e\uff0c\u9700\u8981\u589e\u52a0\u5b8c\u6210\u7684\u5927\u5c0f alen \uff0c\u7f13\u51b2\u533a\u6307\u9488 buf \u524d\u79fb\uff0c\u5e76\u5bf9 blkno \u548c nblks \u66f4\u65b0\u3002 \u5904\u7406\u4e2d\u95f4\u5b8c\u6574\u7684\u5757\u3002\u5bf9\u4e8e\u6bcf\u4e00\u5757\uff0c\u8c03\u7528 sfs_bmap_load_nolock \u83b7\u53d6 ino \uff0c\u518d\u8c03\u7528 sfs_buf_op \u5b8c\u6210\u5b9e\u9645\u7684\u8bfb\u5199\u64cd\u4f5c\u3002\u5bf9\u5176\u4ed6\u53d8\u91cf\u7684\u66f4\u65b0\u4e0e\u6b65\u9aa4\u4e00\u7c7b\u4f3c\u3002 \u5904\u7406\u6700\u540e\u7684\u6ca1\u6709\u5bf9\u9f50\u7684\u5757\u3002\u8fd9\u65f6\uff0c blkoff \u4e3a0\uff0c\u8ba1\u7b97 size \u3002\u8c03\u7528 sfs_bmap_load_nolock \u83b7\u53d6 ino \uff0c\u518d\u8c03\u7528 sfs_buf_op \u5b8c\u6210\u5b9e\u9645\u7684\u8bfb\u5199\u64cd\u4f5c\u3002 \u95ee\u98981.1\uff1a\u7ed9\u51fa\u8bbe\u8ba1\u5b9e\u73b0\u201cUNIX\u7684PIPE\u673a\u5236\u201d\u7684\u6982\u8981\u8bbe\u65b9\u6848\uff0c\u9f13\u52b1\u7ed9\u51fa\u8be6\u7ec6\u8bbe\u8ba1\u65b9\u6848 \u8bbe\u7f6e\u4e00\u4e2a\u94fe\u8868\u7ef4\u62a4\u7f13\u51b2\u533a\u7684\u6570\u636e\u3002\u5f53\u94fe\u8868\u4e3a\u7a7a\u65f6\uff0c\u8868\u793a\u7f13\u51b2\u533a\u5185\u6ca1\u6709\u6570\u636e\u3002\u7f13\u51b2\u533a\u6ca1\u6709\u6ee1\u65f6\uff0c\u8fdb\u7a0b\u53ef\u4ee5\u5199\u6570\u636e\uff0c\u5199\u7684\u6570\u636e\u63d2\u5165\u94fe\u8868\u5c3e\u90e8\uff0c\u5426\u5219\u5c06\u8fdb\u7a0b\u963b\u585e\u3002\u5f53\u7f13\u51b2\u533a\u4e0d\u662f\u7a7a\u65f6\uff0c\u8fdb\u7a0b\u53ef\u4ee5\u8bfb\u6570\u636e\uff0c\u8bfb\u51fa\u7684\u6570\u636e\u4ece\u94fe\u8868\u5934\u90e8\u5220\u9664\uff0c\u5426\u5219\u4e5f\u5c06\u8fdb\u7a0b\u963b\u585e\u3002 \u4e0e\u201c\u8bfb\u8005-\u5199\u8005\u201d\u95ee\u9898\u7c7b\u4f3c\uff0c\u9700\u8981\u8003\u8651\u5230\u4e92\u65a5\u8bbf\u95ee\u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u53ef\u4ee5\u4f7f\u7528\u4fe1\u53f7\u91cf\u6216\u8005\u7ba1\u7a0b\u6765\u5b9e\u73b0\u4e92\u65a5\u64cd\u4f5c\u3002 \u7ec3\u4e602\uff1a\u5b8c\u6210\u57fa\u4e8e\u6587\u4ef6\u7cfb\u7edf\u7684\u6267\u884c\u7a0b\u5e8f\u673a\u5236\u7684\u5b9e\u73b0 \u5728 kern/process/proc.c \u4e2d\u5b8c\u6210 load_icode \u51fd\u6570\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a static int load_icode(int fd, int argc, char **kargv) { /* LAB8:EXERCISE2 YOUR CODE HINT:how to load the file with handler fd in to process's memory? how to setup argc/argv? * MACROs or Functions: * mm_create - create a mm * setup_pgdir - setup pgdir in mm * load_icode_read - read raw data content of program file * mm_map - build new vma * pgdir_alloc_page - allocate new memory for TEXT/DATA/BSS/stack parts * lcr3 - update Page Directory Addr Register -- CR3 */ /* (1) create a new mm for current process * (2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT * (3) copy TEXT/DATA/BSS parts in binary to memory space of process * (3.1) read raw data content in file and resolve elfhdr * (3.2) read raw data content in file and resolve proghdr based on info in elfhdr * (3.3) call mm_map to build vma related to TEXT/DATA * (3.4) callpgdir_alloc_page to allocate page for TEXT/DATA, read contents in file * and copy them into the new allocated pages * (3.5) callpgdir_alloc_page to allocate pages for BSS, memset zero in these pages * (4) call mm_map to setup user stack, and put parameters into user stack * (5) setup current process's mm, cr3, reset pgidr (using lcr3 MARCO) * (6) setup uargc and uargv in user stacks * (7) setup trapframe for user environment * (8) if up steps failed, you should cleanup the env. */ int ret = 0; struct mm_struct *mm = mm_create(); if (!mm) { ret = -E_NO_MEM; goto bad_mm; } if ((ret = setup_pgdir(mm)) != 0) { goto bad_pgdir_cleanup_mm; } struct Page *page; struct elfhdr __elf, *elf = &__elf; if ((ret = load_icode_read(fd, elf, sizeof(struct elfhdr), 0)) != 0) { goto bad_elf_cleanup_pgdir; } if (elf->e_magic != ELF_MAGIC) { ret = -E_INVAL_ELF; goto bad_elf_cleanup_pgdir; } struct proghdr __ph, *ph = &__ph; uint32_t vm_flags, perm, phnum; for (phnum = 0; phnum < elf->e_phnum; phnum ++) { off_t phoff = elf->e_phoff + sizeof(struct proghdr) * phnum; if ((ret = load_icode_read(fd, ph, sizeof(struct proghdr), phoff)) != 0) { goto bad_cleanup_mmap; } if (ph->p_type != ELF_PT_LOAD) { continue; } if (ph->p_filesz > ph->p_memsz) { ret = -E_INVAL_ELF; goto bad_cleanup_mmap; } if (ph->p_filesz == 0) { continue; } vm_flags = 0, perm = PTE_U; if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC; if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE; if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ; if (vm_flags & VM_WRITE) perm |= PTE_W; if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) { goto bad_cleanup_mmap; } off_t offset = ph->p_offset; size_t off, size; uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE); ret = -E_NO_MEM; end = ph->p_va + ph->p_filesz; while (start < end) { if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) { ret = -E_NO_MEM; goto bad_cleanup_mmap; } off = start - la, size = PGSIZE - off, la += PGSIZE; if (end < la) { size -= la - end; } if ((ret = load_icode_read(fd, page2kva(page) + off, size, offset)) != 0) { goto bad_cleanup_mmap; } start += size, offset += size; } end = ph->p_va + ph->p_memsz; if (start < la) { if (start == end) { continue ; } off = start + PGSIZE - la, size = PGSIZE - off; if (end < la) { size -= la - end; } memset(page2kva(page) + off, 0, size); start += size; assert((end < la && start == end) || (end >= la && start == la)); } while (start < end) { if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) { ret = -E_NO_MEM; goto bad_cleanup_mmap; } off = start - la, size = PGSIZE - off, la += PGSIZE; if (end < la) { size -= la - end; } memset(page2kva(page) + off, 0, size); start += size; } } sysfile_close(fd); vm_flags = VM_READ | VM_WRITE | VM_STACK; if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) { goto bad_cleanup_mmap; } assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL); assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL); assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL); assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL); mm_count_inc(mm); current->mm = mm; current->cr3 = PADDR(mm->pgdir); lcr3(PADDR(mm->pgdir)); uint32_t argv_size = 0, i; for (i = 0; i < argc; i ++) { argv_size += strnlen(kargv[i], EXEC_MAX_ARG_LEN + 1) + 1; } uintptr_t stacktop = USTACKTOP - (argv_size / sizeof(long) + 1) * sizeof(long); char** uargv=(char **)(stacktop - argc * sizeof(char *)); argv_size = 0; for (i = 0; i < argc; i ++) { uint32_t _len = strnlen(kargv[i], EXEC_MAX_ARG_LEN); char *_buf = (char *)(stacktop + argv_size); memcpy(_buf, kargv[i], _len); _buf[_len] = '\\0'; argv_size += strnlen(kargv[i], EXEC_MAX_ARG_LEN + 1) + 1; } stacktop = (uintptr_t)uargv - sizeof(int); *(int *)stacktop = argc; struct trapframe *tf = current->tf; memset(tf, 0, sizeof(struct trapframe)); tf->tf_cs = USER_CS; tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS; tf->tf_esp = stacktop; tf->tf_eip = elf->e_entry; tf->tf_eflags = FL_IF; ret = 0; out: return ret; bad_cleanup_mmap: exit_mmap(mm); bad_elf_cleanup_pgdir: put_pgdir(mm); bad_pgdir_cleanup_mm: mm_destroy(mm); bad_mm: goto out; } \u4ee3\u7801\u7684\u6267\u884c\u8fc7\u7a0b\u6309\u7167\u63d0\u793a\u6240\u7ed9\u51fa\u7684\u6d41\u7a0b\u6267\u884c\u3002 \u95ee\u98982.1\uff1a\u7ed9\u51fa\u8bbe\u8ba1\u5b9e\u73b0\u57fa\u4e8e\u201dUNIX\u7684\u786c\u94fe\u63a5\u548c\u8f6f\u94fe\u63a5\u673a\u5236\u201c\u7684\u6982\u8981\u8bbe\u65b9\u6848\uff0c\u9f13\u52b1\u7ed9\u51fa\u8be6\u7ec6\u8bbe\u8ba1\u65b9\u6848 \u786c\u94fe\u63a5\uff1a\u5728\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e2d\u52a0\u5165\u4e00\u4e2a\u6807\u8bb0\u4f4d\u548c\u6307\u9488\uff0c\u5f53\u6587\u4ef6\u4e3a\u786c\u94fe\u63a5\u65f6\uff0c\u6807\u8bb0\u4f4d\u4e3a1\uff0c\u6307\u9488\u6307\u5411\u94fe\u63a5\u7684\u6587\u4ef6 \u8f6f\u94fe\u63a5\uff1a\u76f4\u63a5\u62f7\u8d1d\u6587\u4ef6\u5bf9\u5e94\u7684 inode \u4fe1\u606f\u3002 \u5217\u51fa\u4f60\u8ba4\u4e3a\u672c\u5b9e\u9a8c\u4e2d\u91cd\u8981\u7684\u77e5\u8bc6\u70b9\uff0c\u4ee5\u53ca\u4e0e\u5bf9\u5e94\u7684OS\u539f\u7406\u4e2d\u7684\u77e5\u8bc6\u70b9\uff0c\u5e76\u7b80\u8981\u8bf4\u660e\u4f60\u5bf9\u4e8c\u8005\u7684\u542b\u4e49\uff0c\u5173\u7cfb\uff0c\u5dee\u5f02\u7b49\u65b9\u9762\u7684\u7406\u89e3\uff08\u4e5f\u53ef\u80fd\u51fa\u73b0\u5b9e\u9a8c\u4e2d\u7684\u77e5\u8bc6\u70b9\u6ca1\u6709\u5bf9\u5e94\u7684\u539f\u7406\u77e5\u8bc6\u70b9\uff09 SFS\u7684\u63a5\u53e3\u4e0e\u5b9e\u73b0 VFS\u7684\u63a5\u53e3\u4e0e\u5b9e\u73b0 \u6570\u636e\u7ed3\u6784\u7684\u8bbe\u8ba1","title":"Lab8 Report"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab8/lab8/#lab8-report","text":"","title":"Lab8 Report"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab8/lab8/#1","text":"\u5728 kern/fs/sfs/sfs_inode.c \u4e2d\u5b8c\u6210 sys_io_nolock \u51fd\u6570\uff0c\u5b8c\u6210\u8bfb\u53d6\u5199\u5165\u64cd\u4f5c\u3002\u4ee3\u7801\u5982\u4e0b\uff1a static int sfs_io_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, void *buf, off_t offset, size_t *alenp, bool write) { struct sfs_disk_inode *din = sin->din; assert(din->type != SFS_TYPE_DIR); off_t endpos = offset + *alenp, blkoff; *alenp = 0; // calculate the Rd/Wr end position if (offset < 0 || offset >= SFS_MAX_FILE_SIZE || offset > endpos) { return -E_INVAL; } if (offset == endpos) { return 0; } if (endpos > SFS_MAX_FILE_SIZE) { endpos = SFS_MAX_FILE_SIZE; } if (!write) { if (offset >= din->size) { return 0; } if (endpos > din->size) { endpos = din->size; } } int (*sfs_buf_op)(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset); int (*sfs_block_op)(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks); if (write) { sfs_buf_op = sfs_wbuf, sfs_block_op = sfs_wblock; } else { sfs_buf_op = sfs_rbuf, sfs_block_op = sfs_rblock; } int ret = 0; size_t size, alen = 0; uint32_t ino; uint32_t blkno = offset / SFS_BLKSIZE; // The NO. of Rd/Wr begin block uint32_t nblks = endpos / SFS_BLKSIZE - blkno; // The size of Rd/Wr blocks //LAB8:EXERCISE1 YOUR CODE HINT: call sfs_bmap_load_nolock, sfs_rbuf, sfs_rblock,etc. read different kind of blocks in file /* * (1) If offset isn't aligned with the first block, Rd/Wr some content from offset to the end of the first block * NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op * Rd/Wr size = (nblks != 0) ? (SFS_BLKSIZE - blkoff) : (endpos - offset) * (2) Rd/Wr aligned blocks * NOTICE: useful function: sfs_bmap_load_nolock, sfs_block_op * (3) If end position isn't aligned with the last block, Rd/Wr some content from begin to the (endpos % SFS_BLKSIZE) of the last block * NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op */ blkoff = offset % SFS_BLKSIZE; if (blkoff != 0) { size = (nblks != 0) ? (SFS_BLKSIZE - blkoff) : (endpos - offset); if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) { goto out; } if ((ret = sfs_buf_op(sfs, buf, size, ino, blkoff)) != 0) { goto out; } alen += size; if (nblks == 0) { goto out; } buf += size; blkno++; nblks--; } size = SFS_BLKSIZE; while (nblks > 0) { if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) { goto out; } if ((ret = sfs_block_op(sfs, buf, ino, 1)) != 0) { goto out; } alen += size; buf += size; blkno++; nblks--; } blkoff = 0; size = endpos % SFS_BLKSIZE; if (size > 0) { if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) { goto out; } if ((ret = sfs_buf_op(sfs, buf, size, ino, blkoff)) != 0) { goto out; } alen += size; } out: *alenp = alen; if (offset + alen > sin->din->size) { sin->din->size = offset + alen; sin->dirty = 1; } return ret; } \u4ee3\u7801\u7684\u6267\u884c\u6b65\u9aa4\u4e3a\uff1a \u5904\u7406\u8d77\u59cb\u5730\u5740\u6240\u5728\u7684\u5757\u3002\u5224\u65ad\u8d77\u59cb\u5730\u5740\u7684 offset \u662f\u5426\u5bf9\u9f50\uff0c\u5982\u679c\u4e0d\u5bf9\u9f50\uff0c\u8ba1\u7b97\u5757\u5185\u504f\u79fb blkoff \u548c\u5927\u5c0f size \u3002\u8c03\u7528 sfs_bmap_load_nolock \u83b7\u53d6 ino \uff0c\u518d\u8c03\u7528 sfs_buf_op \u5b8c\u6210\u5b9e\u9645\u7684\u8bfb\u5199\u64cd\u4f5c\u3002\u5b8c\u6210\u540e\uff0c\u9700\u8981\u589e\u52a0\u5b8c\u6210\u7684\u5927\u5c0f alen \uff0c\u7f13\u51b2\u533a\u6307\u9488 buf \u524d\u79fb\uff0c\u5e76\u5bf9 blkno \u548c nblks \u66f4\u65b0\u3002 \u5904\u7406\u4e2d\u95f4\u5b8c\u6574\u7684\u5757\u3002\u5bf9\u4e8e\u6bcf\u4e00\u5757\uff0c\u8c03\u7528 sfs_bmap_load_nolock \u83b7\u53d6 ino \uff0c\u518d\u8c03\u7528 sfs_buf_op \u5b8c\u6210\u5b9e\u9645\u7684\u8bfb\u5199\u64cd\u4f5c\u3002\u5bf9\u5176\u4ed6\u53d8\u91cf\u7684\u66f4\u65b0\u4e0e\u6b65\u9aa4\u4e00\u7c7b\u4f3c\u3002 \u5904\u7406\u6700\u540e\u7684\u6ca1\u6709\u5bf9\u9f50\u7684\u5757\u3002\u8fd9\u65f6\uff0c blkoff \u4e3a0\uff0c\u8ba1\u7b97 size \u3002\u8c03\u7528 sfs_bmap_load_nolock \u83b7\u53d6 ino \uff0c\u518d\u8c03\u7528 sfs_buf_op \u5b8c\u6210\u5b9e\u9645\u7684\u8bfb\u5199\u64cd\u4f5c\u3002","title":"\u7ec3\u4e601\uff1a\u5b8c\u6210\u8bfb\u6587\u4ef6\u64cd\u4f5c\u7684\u5b9e\u73b0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab8/lab8/#11unixpipe","text":"\u8bbe\u7f6e\u4e00\u4e2a\u94fe\u8868\u7ef4\u62a4\u7f13\u51b2\u533a\u7684\u6570\u636e\u3002\u5f53\u94fe\u8868\u4e3a\u7a7a\u65f6\uff0c\u8868\u793a\u7f13\u51b2\u533a\u5185\u6ca1\u6709\u6570\u636e\u3002\u7f13\u51b2\u533a\u6ca1\u6709\u6ee1\u65f6\uff0c\u8fdb\u7a0b\u53ef\u4ee5\u5199\u6570\u636e\uff0c\u5199\u7684\u6570\u636e\u63d2\u5165\u94fe\u8868\u5c3e\u90e8\uff0c\u5426\u5219\u5c06\u8fdb\u7a0b\u963b\u585e\u3002\u5f53\u7f13\u51b2\u533a\u4e0d\u662f\u7a7a\u65f6\uff0c\u8fdb\u7a0b\u53ef\u4ee5\u8bfb\u6570\u636e\uff0c\u8bfb\u51fa\u7684\u6570\u636e\u4ece\u94fe\u8868\u5934\u90e8\u5220\u9664\uff0c\u5426\u5219\u4e5f\u5c06\u8fdb\u7a0b\u963b\u585e\u3002 \u4e0e\u201c\u8bfb\u8005-\u5199\u8005\u201d\u95ee\u9898\u7c7b\u4f3c\uff0c\u9700\u8981\u8003\u8651\u5230\u4e92\u65a5\u8bbf\u95ee\u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u53ef\u4ee5\u4f7f\u7528\u4fe1\u53f7\u91cf\u6216\u8005\u7ba1\u7a0b\u6765\u5b9e\u73b0\u4e92\u65a5\u64cd\u4f5c\u3002","title":"\u95ee\u98981.1\uff1a\u7ed9\u51fa\u8bbe\u8ba1\u5b9e\u73b0\u201cUNIX\u7684PIPE\u673a\u5236\u201d\u7684\u6982\u8981\u8bbe\u65b9\u6848\uff0c\u9f13\u52b1\u7ed9\u51fa\u8be6\u7ec6\u8bbe\u8ba1\u65b9\u6848"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab8/lab8/#2","text":"\u5728 kern/process/proc.c \u4e2d\u5b8c\u6210 load_icode \u51fd\u6570\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a static int load_icode(int fd, int argc, char **kargv) { /* LAB8:EXERCISE2 YOUR CODE HINT:how to load the file with handler fd in to process's memory? how to setup argc/argv? * MACROs or Functions: * mm_create - create a mm * setup_pgdir - setup pgdir in mm * load_icode_read - read raw data content of program file * mm_map - build new vma * pgdir_alloc_page - allocate new memory for TEXT/DATA/BSS/stack parts * lcr3 - update Page Directory Addr Register -- CR3 */ /* (1) create a new mm for current process * (2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT * (3) copy TEXT/DATA/BSS parts in binary to memory space of process * (3.1) read raw data content in file and resolve elfhdr * (3.2) read raw data content in file and resolve proghdr based on info in elfhdr * (3.3) call mm_map to build vma related to TEXT/DATA * (3.4) callpgdir_alloc_page to allocate page for TEXT/DATA, read contents in file * and copy them into the new allocated pages * (3.5) callpgdir_alloc_page to allocate pages for BSS, memset zero in these pages * (4) call mm_map to setup user stack, and put parameters into user stack * (5) setup current process's mm, cr3, reset pgidr (using lcr3 MARCO) * (6) setup uargc and uargv in user stacks * (7) setup trapframe for user environment * (8) if up steps failed, you should cleanup the env. */ int ret = 0; struct mm_struct *mm = mm_create(); if (!mm) { ret = -E_NO_MEM; goto bad_mm; } if ((ret = setup_pgdir(mm)) != 0) { goto bad_pgdir_cleanup_mm; } struct Page *page; struct elfhdr __elf, *elf = &__elf; if ((ret = load_icode_read(fd, elf, sizeof(struct elfhdr), 0)) != 0) { goto bad_elf_cleanup_pgdir; } if (elf->e_magic != ELF_MAGIC) { ret = -E_INVAL_ELF; goto bad_elf_cleanup_pgdir; } struct proghdr __ph, *ph = &__ph; uint32_t vm_flags, perm, phnum; for (phnum = 0; phnum < elf->e_phnum; phnum ++) { off_t phoff = elf->e_phoff + sizeof(struct proghdr) * phnum; if ((ret = load_icode_read(fd, ph, sizeof(struct proghdr), phoff)) != 0) { goto bad_cleanup_mmap; } if (ph->p_type != ELF_PT_LOAD) { continue; } if (ph->p_filesz > ph->p_memsz) { ret = -E_INVAL_ELF; goto bad_cleanup_mmap; } if (ph->p_filesz == 0) { continue; } vm_flags = 0, perm = PTE_U; if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC; if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE; if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ; if (vm_flags & VM_WRITE) perm |= PTE_W; if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) { goto bad_cleanup_mmap; } off_t offset = ph->p_offset; size_t off, size; uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE); ret = -E_NO_MEM; end = ph->p_va + ph->p_filesz; while (start < end) { if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) { ret = -E_NO_MEM; goto bad_cleanup_mmap; } off = start - la, size = PGSIZE - off, la += PGSIZE; if (end < la) { size -= la - end; } if ((ret = load_icode_read(fd, page2kva(page) + off, size, offset)) != 0) { goto bad_cleanup_mmap; } start += size, offset += size; } end = ph->p_va + ph->p_memsz; if (start < la) { if (start == end) { continue ; } off = start + PGSIZE - la, size = PGSIZE - off; if (end < la) { size -= la - end; } memset(page2kva(page) + off, 0, size); start += size; assert((end < la && start == end) || (end >= la && start == la)); } while (start < end) { if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) { ret = -E_NO_MEM; goto bad_cleanup_mmap; } off = start - la, size = PGSIZE - off, la += PGSIZE; if (end < la) { size -= la - end; } memset(page2kva(page) + off, 0, size); start += size; } } sysfile_close(fd); vm_flags = VM_READ | VM_WRITE | VM_STACK; if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) { goto bad_cleanup_mmap; } assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL); assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL); assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL); assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL); mm_count_inc(mm); current->mm = mm; current->cr3 = PADDR(mm->pgdir); lcr3(PADDR(mm->pgdir)); uint32_t argv_size = 0, i; for (i = 0; i < argc; i ++) { argv_size += strnlen(kargv[i], EXEC_MAX_ARG_LEN + 1) + 1; } uintptr_t stacktop = USTACKTOP - (argv_size / sizeof(long) + 1) * sizeof(long); char** uargv=(char **)(stacktop - argc * sizeof(char *)); argv_size = 0; for (i = 0; i < argc; i ++) { uint32_t _len = strnlen(kargv[i], EXEC_MAX_ARG_LEN); char *_buf = (char *)(stacktop + argv_size); memcpy(_buf, kargv[i], _len); _buf[_len] = '\\0'; argv_size += strnlen(kargv[i], EXEC_MAX_ARG_LEN + 1) + 1; } stacktop = (uintptr_t)uargv - sizeof(int); *(int *)stacktop = argc; struct trapframe *tf = current->tf; memset(tf, 0, sizeof(struct trapframe)); tf->tf_cs = USER_CS; tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS; tf->tf_esp = stacktop; tf->tf_eip = elf->e_entry; tf->tf_eflags = FL_IF; ret = 0; out: return ret; bad_cleanup_mmap: exit_mmap(mm); bad_elf_cleanup_pgdir: put_pgdir(mm); bad_pgdir_cleanup_mm: mm_destroy(mm); bad_mm: goto out; } \u4ee3\u7801\u7684\u6267\u884c\u8fc7\u7a0b\u6309\u7167\u63d0\u793a\u6240\u7ed9\u51fa\u7684\u6d41\u7a0b\u6267\u884c\u3002","title":"\u7ec3\u4e602\uff1a\u5b8c\u6210\u57fa\u4e8e\u6587\u4ef6\u7cfb\u7edf\u7684\u6267\u884c\u7a0b\u5e8f\u673a\u5236\u7684\u5b9e\u73b0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab8/lab8/#21unix","text":"\u786c\u94fe\u63a5\uff1a\u5728\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e2d\u52a0\u5165\u4e00\u4e2a\u6807\u8bb0\u4f4d\u548c\u6307\u9488\uff0c\u5f53\u6587\u4ef6\u4e3a\u786c\u94fe\u63a5\u65f6\uff0c\u6807\u8bb0\u4f4d\u4e3a1\uff0c\u6307\u9488\u6307\u5411\u94fe\u63a5\u7684\u6587\u4ef6 \u8f6f\u94fe\u63a5\uff1a\u76f4\u63a5\u62f7\u8d1d\u6587\u4ef6\u5bf9\u5e94\u7684 inode \u4fe1\u606f\u3002","title":"\u95ee\u98982.1\uff1a\u7ed9\u51fa\u8bbe\u8ba1\u5b9e\u73b0\u57fa\u4e8e\u201dUNIX\u7684\u786c\u94fe\u63a5\u548c\u8f6f\u94fe\u63a5\u673a\u5236\u201c\u7684\u6982\u8981\u8bbe\u65b9\u6848\uff0c\u9f13\u52b1\u7ed9\u51fa\u8be6\u7ec6\u8bbe\u8ba1\u65b9\u6848"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab8/lab8/#os","text":"SFS\u7684\u63a5\u53e3\u4e0e\u5b9e\u73b0 VFS\u7684\u63a5\u53e3\u4e0e\u5b9e\u73b0 \u6570\u636e\u7ed3\u6784\u7684\u8bbe\u8ba1","title":"\u5217\u51fa\u4f60\u8ba4\u4e3a\u672c\u5b9e\u9a8c\u4e2d\u91cd\u8981\u7684\u77e5\u8bc6\u70b9\uff0c\u4ee5\u53ca\u4e0e\u5bf9\u5e94\u7684OS\u539f\u7406\u4e2d\u7684\u77e5\u8bc6\u70b9\uff0c\u5e76\u7b80\u8981\u8bf4\u660e\u4f60\u5bf9\u4e8c\u8005\u7684\u542b\u4e49\uff0c\u5173\u7cfb\uff0c\u5dee\u5f02\u7b49\u65b9\u9762\u7684\u7406\u89e3\uff08\u4e5f\u53ef\u80fd\u51fa\u73b0\u5b9e\u9a8c\u4e2d\u7684\u77e5\u8bc6\u70b9\u6ca1\u6709\u5bf9\u5e94\u7684\u539f\u7406\u77e5\u8bc6\u70b9\uff09"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab8/my_note/","text":"\u7b14\u8bb0","title":"\u7b14\u8bb0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab8/my_note/#_1","text":"","title":"\u7b14\u8bb0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/","text":"\u7c7b\u578b\u6a21\u677f \u56fe\u753b\u4f5c\u6587 \u7b2c\u4e00\u6bb5\uff1a\u56fe\u753b\u63cf\u8ff0+\u4e2d\u5fc3\u603b\u7ed3 \u7b2c\u4e00\u4e8c\u53e5\u8bdd\uff1a\u7528\u4e3b\u8bed\u4ece\u53e5\u5f15\u51fa\u63cf\u8ff0\u56fe\u753b What is obvious is that+\u63cf\u8ff0 \u4e00\u5e45\u56fe\u4e00\u4e2a\u4e3b\u4f53\uff0c\u4e24\u4e2a\u52a8\u4f5c in the cartoon,sb(\u5b9a), doing sth \u6b21\u8981\u52a8\u4f5c(\u5b9a \u72b6), is doing sth (\u4e3b\u8981\u52a8\u4f5c)(\u5b9a\u3001\u72b6) \u4e00\u5e45\u56fe\u4e24\u4e2a\u4e3b\u4f53\uff0c\u4e24\u4e2a\u52a8\u4f5c In the cartoon, sb1(\u5b9a) is doing sth1(\u5b9a\u3001\u72b6); and/but sb2(\u5b9a) is doing sth2(\u5b9a/\u72b6) \u4e24\u5e45\u56fe In the former picture, sb1(\u5b9a) is doing sth1(\u5b9a \u72b6); and/but in the latter one,sb2(\u5b9a) is doing sth2(\u5b9a/\u72b6) \u7b2c\u4e09\u53e5\u8bdd\uff1a\u5f15\u51fa\u5bd3\u610f\u7684\u8fc7\u6e21\u8bed It is apparent that the author of the drawing tries to reveal to us: ... \u7b2c\u56db\u53e5\uff1a\u4e2d\u5fc3\u603b\u7ed3 we should do sth we should never do sth sth is very important sth is very serious \u63a8\u8350\u53e5\u578b as ... as \u88ab\u52a8 so ... that \u6bd4\u55bb \u518d\u7528\u5f3a\u8c03\u53e5\u578b\u7a0d\u4f5c\u52a0\u5de5 \u53c2\u8003 \u9009\u62e9 What looks beyond dispute is that a host of graduates young as well as confused, standing on the cross road of their life, are confronted with four choices such as hunting for jobs and going abroad. The symbol meaning of the cartoon is quite conspicuous: it is options that should be argued exceedingly indispensable by children and adults. \u7b2c\u4e8c\u6bb5 \u7b2c\u4e00\u53e5\u8bdd\uff1a\u5f15\u51fa\u539f\u56e0\u5206\u6790\u7684\u603b\u8ff0\u53e5 \u5355\u8bcd\u66ff\u6362\uff0c\u6216\u6539\u5f3a\u8c03\u53e5 However, recognizing a problem is the first step in finding a solution. \u5177\u4f53\u539f\u56e0\u5206\u6790 \uff081-3\uff09\u4e2a\u539f\u56e0 \u9996\u5148 To begin with The main element for the problem is that ... \u5176\u6b21 additionally \u6700\u540e last but not least \u53c2\u8003 \u6ee5\u7528\u624b\u673a\u7684\u7f3a\u70b9 Analyzing the issue proves the first step in finding a solution. The primary element I would like to point out here Is that(\u76f8\u5f53\u4e8e firstly) heavy use of cellphones not only exerts great influence on our good health but also wastes too much precious time of teenagers and youngsters. Thus their academic grades would be affected quickly. Another factor is that(=secondly)the more frequently kids surf on cellphones, the worse their performance will become, which leaves readers quite a deep impression.(\u56e0\u4e3a\u8fd9\u4e2a\u539f\u56e0\u4e0d\u591f\u957f \u6240\u4ee5\u5916\u52a0\u4e86\u4e00\u4e2a\u975e\u9650\u5236\u6027\u5b9a\u8bed\u4ece\u53e5\u6765\u8fdb\u884c\u8865\u5145) In the end, if the tendency continued as it were, the grave consequence would be easy to be predicted The users of cellphones might look like mummies, and consequently, economy would stop moving, how horrible it sounds. \u7b2c\u4e09\u6bb5 \u603b\u7ed3\u63aa\u65bd\u6bb5 \u7b2c\u4e00\u53e5 To sum up, + \u63a8\u8350\u53e5\u578b \u7b2c\u4e8c\uff0c\u7b2c\u4e09\u53e5 \u5177\u4f53\u63aa\u65bd \u63a8\u8350\u53e5\u578b\uff1a can not fail to do It is urgent that \u6700\u540e\uff1a\u558a\u53e3\u53f7 \u603b\u7ed3\u6cd5 l believe that a happy and bright future is awaiting us if we make every effort to promote\uff08\u597d\u4e8b\uff09ban\uff08\u574f\u4e8b\uff09 \u53cd\u95ee\u6cd5 What does the future hold if mankind persists in doing sth?( wasting natural resources) \u5f15\u8bed\u6cd5 \u4e0d\u80fd\u7f16 just as has put it, \"\" \u53c2\u8003 As a consequence, so crucial is respecting parents that it from my perspective, proves to be time to attach great importance to it, The essential action, obviously, is to educate kids to honor elderly when they are still young Apart from this, youngsters could go back to see their parents frequently in spite of busy jobs. In the end, just as an old saying has put it \"Filial piety comes ahead of any other morality\". \u516c\u52a1\u4e66\u4fe1 \u79f0\u547c \u6587\u4e2d\u5df2\u7ed9\u51fa \u6587\u4e2d\u672a\u7ed9\u51fa\uff1aDear Sir or Madam \u7b2c\u4e00\u6bb5 \u81ea\u6211\u4ecb\u7ecd+\u5199\u4f5c\u76ee\u7684 \u81ea\u6211\u4ecb\u7ecd \u6587\u4e2d\u5df2\u7ed9\u51fa\uff1aI am ... \u6587\u4e2d\u672a\u7ed9\u51fa\uff1aI am a senior from the department of Physical Education in the/a university. \u5199\u4f5c\u76ee\u7684 I am writing the letter, to be honest, in order to (\u6587\u4e2d\u4e00\u5b9a\u7ed9\u51fa\uff09 \u7b2c\u4e8c\u6bb5 \uff08\u6587\u4e2d\u4e00\u5b9a\u7ed9\u51fa\uff093 \u4e2a\u539f\u56e0 so ... that It ... that, therefore ... \u72b6\u8bed\u4ece\u53e5 \u53c2\u8003 The salary, to begin with, keeps so low that I fail to support my families any more with prices generally rise. In addition, it has been widely accepted that the company is too faraway from my house. therefore takes me a long time to go to work every day. At last, I am by no means interested in the job although I have tried my best to become involved in it. \u7b2c\u4e09\u6bb5 \u4e24\u53e5 \u7b2c\u4e00\u53e5 \u5df2\u7ecf\u505a\u51fa\u8981\u6c42\uff0c\u4e00\u53e5\u8bdd\u5199\u51fa\u8981\u6c42 \u672a\u7ed9\u51fa\u8981\u6c42\uff0c\u8868\u793a\u611f\u8c22 My thanks to you for your generous assistance are beyond words. \u671f\u5f85\u56de\u4fe1 I am looking forward to your reply. \u843d\u6b3e Yours truly, Li Ming \u79c1\u4eba\u4e66\u4fe1 \u79f0\u547c Dear ... \u7b2c\u4e00\u6bb5 \u95ee\u5019\u8bed+\u5199\u4f5c\u76ee\u7684\uff08\u7ed9\u51fa\uff09 \u7b2c\u4e8c\u6bb5 \u540c\u516c\u52a1\u4e66\u4fe1 \u7b2c\u4e09\u6bb5 \u7ed9\u51fa\u8981\u6c42\uff0c\u8981\u6c42+\u795d\u798f\u8bed \u672a\u7ed9\u51fa\u8981\u6c42\uff0c\u795d\u798f\u8bed+\u671f\u5f85\u56de\u4fe1 Please bring my best wished to your family \u544a\u793a\u7c7b\u6587\u7ae0 \u6807\u9898\uff1a\u5927\u5199Notice \u79f0\u547c\uff0c\u65e0 \u7b2c\u4e00\u6bb5 \u5199\u4f5c\u76ee\u7684+\u5177\u4f53\u8bba\u8ff0 We are to ... \u516c\u52a1\u4e66\u4fe1\u7b2c\u4e8c\u6bb5 \u7b2c\u4e8c\u6bb5 \u6b22\u8fce\u52a0\u5165+\u8054\u7cfb\u65b9\u5f0f Welcome to join us we are waiting for your coming. If you intended to join us, please email us XXX@yahoo.com.cn. \u843d\u6b3e \u5355\u4f4d\u540d\u5b57\uff08\u6587\u4e2d\u7ed9\u51fa\uff09","title":"\u7c7b\u578b\u6a21\u677f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_1","text":"","title":"\u7c7b\u578b\u6a21\u677f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_2","text":"","title":"\u56fe\u753b\u4f5c\u6587"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_3","text":"","title":"\u7b2c\u4e00\u6bb5\uff1a\u56fe\u753b\u63cf\u8ff0+\u4e2d\u5fc3\u603b\u7ed3"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_4","text":"What is obvious is that+\u63cf\u8ff0 \u4e00\u5e45\u56fe\u4e00\u4e2a\u4e3b\u4f53\uff0c\u4e24\u4e2a\u52a8\u4f5c in the cartoon,sb(\u5b9a), doing sth \u6b21\u8981\u52a8\u4f5c(\u5b9a \u72b6), is doing sth (\u4e3b\u8981\u52a8\u4f5c)(\u5b9a\u3001\u72b6) \u4e00\u5e45\u56fe\u4e24\u4e2a\u4e3b\u4f53\uff0c\u4e24\u4e2a\u52a8\u4f5c In the cartoon, sb1(\u5b9a) is doing sth1(\u5b9a\u3001\u72b6); and/but sb2(\u5b9a) is doing sth2(\u5b9a/\u72b6) \u4e24\u5e45\u56fe In the former picture, sb1(\u5b9a) is doing sth1(\u5b9a \u72b6); and/but in the latter one,sb2(\u5b9a) is doing sth2(\u5b9a/\u72b6)","title":"\u7b2c\u4e00\u4e8c\u53e5\u8bdd\uff1a\u7528\u4e3b\u8bed\u4ece\u53e5\u5f15\u51fa\u63cf\u8ff0\u56fe\u753b"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_5","text":"It is apparent that the author of the drawing tries to reveal to us: ...","title":"\u7b2c\u4e09\u53e5\u8bdd\uff1a\u5f15\u51fa\u5bd3\u610f\u7684\u8fc7\u6e21\u8bed"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_6","text":"we should do sth we should never do sth sth is very important sth is very serious","title":"\u7b2c\u56db\u53e5\uff1a\u4e2d\u5fc3\u603b\u7ed3"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_7","text":"as ... as \u88ab\u52a8 so ... that \u6bd4\u55bb \u518d\u7528\u5f3a\u8c03\u53e5\u578b\u7a0d\u4f5c\u52a0\u5de5","title":"\u63a8\u8350\u53e5\u578b"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_8","text":"\u9009\u62e9 What looks beyond dispute is that a host of graduates young as well as confused, standing on the cross road of their life, are confronted with four choices such as hunting for jobs and going abroad. The symbol meaning of the cartoon is quite conspicuous: it is options that should be argued exceedingly indispensable by children and adults.","title":"\u53c2\u8003"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_9","text":"","title":"\u7b2c\u4e8c\u6bb5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_10","text":"\u5355\u8bcd\u66ff\u6362\uff0c\u6216\u6539\u5f3a\u8c03\u53e5 However, recognizing a problem is the first step in finding a solution.","title":"\u7b2c\u4e00\u53e5\u8bdd\uff1a\u5f15\u51fa\u539f\u56e0\u5206\u6790\u7684\u603b\u8ff0\u53e5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_11","text":"\uff081-3\uff09\u4e2a\u539f\u56e0","title":"\u5177\u4f53\u539f\u56e0\u5206\u6790"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_12","text":"To begin with The main element for the problem is that ...","title":"\u9996\u5148"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_13","text":"additionally","title":"\u5176\u6b21"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_14","text":"last but not least","title":"\u6700\u540e"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_15","text":"\u6ee5\u7528\u624b\u673a\u7684\u7f3a\u70b9 Analyzing the issue proves the first step in finding a solution. The primary element I would like to point out here Is that(\u76f8\u5f53\u4e8e firstly) heavy use of cellphones not only exerts great influence on our good health but also wastes too much precious time of teenagers and youngsters. Thus their academic grades would be affected quickly. Another factor is that(=secondly)the more frequently kids surf on cellphones, the worse their performance will become, which leaves readers quite a deep impression.(\u56e0\u4e3a\u8fd9\u4e2a\u539f\u56e0\u4e0d\u591f\u957f \u6240\u4ee5\u5916\u52a0\u4e86\u4e00\u4e2a\u975e\u9650\u5236\u6027\u5b9a\u8bed\u4ece\u53e5\u6765\u8fdb\u884c\u8865\u5145) In the end, if the tendency continued as it were, the grave consequence would be easy to be predicted The users of cellphones might look like mummies, and consequently, economy would stop moving, how horrible it sounds.","title":"\u53c2\u8003"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_16","text":"\u603b\u7ed3\u63aa\u65bd\u6bb5","title":"\u7b2c\u4e09\u6bb5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_17","text":"To sum up, + \u63a8\u8350\u53e5\u578b","title":"\u7b2c\u4e00\u53e5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_18","text":"\u5177\u4f53\u63aa\u65bd \u63a8\u8350\u53e5\u578b\uff1a can not fail to do It is urgent that","title":"\u7b2c\u4e8c\uff0c\u7b2c\u4e09\u53e5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_19","text":"","title":"\u6700\u540e\uff1a\u558a\u53e3\u53f7"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_20","text":"l believe that a happy and bright future is awaiting us if we make every effort to promote\uff08\u597d\u4e8b\uff09ban\uff08\u574f\u4e8b\uff09","title":"\u603b\u7ed3\u6cd5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_21","text":"What does the future hold if mankind persists in doing sth?( wasting natural resources)","title":"\u53cd\u95ee\u6cd5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_22","text":"\u4e0d\u80fd\u7f16 just as has put it, \"\"","title":"\u5f15\u8bed\u6cd5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_23","text":"As a consequence, so crucial is respecting parents that it from my perspective, proves to be time to attach great importance to it, The essential action, obviously, is to educate kids to honor elderly when they are still young Apart from this, youngsters could go back to see their parents frequently in spite of busy jobs. In the end, just as an old saying has put it \"Filial piety comes ahead of any other morality\".","title":"\u53c2\u8003"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_24","text":"\u79f0\u547c \u6587\u4e2d\u5df2\u7ed9\u51fa \u6587\u4e2d\u672a\u7ed9\u51fa\uff1aDear Sir or Madam","title":"\u516c\u52a1\u4e66\u4fe1"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_25","text":"\u81ea\u6211\u4ecb\u7ecd+\u5199\u4f5c\u76ee\u7684 \u81ea\u6211\u4ecb\u7ecd \u6587\u4e2d\u5df2\u7ed9\u51fa\uff1aI am ... \u6587\u4e2d\u672a\u7ed9\u51fa\uff1aI am a senior from the department of Physical Education in the/a university. \u5199\u4f5c\u76ee\u7684 I am writing the letter, to be honest, in order to (\u6587\u4e2d\u4e00\u5b9a\u7ed9\u51fa\uff09","title":"\u7b2c\u4e00\u6bb5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_26","text":"\uff08\u6587\u4e2d\u4e00\u5b9a\u7ed9\u51fa\uff093 \u4e2a\u539f\u56e0 so ... that It ... that, therefore ... \u72b6\u8bed\u4ece\u53e5","title":"\u7b2c\u4e8c\u6bb5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_27","text":"The salary, to begin with, keeps so low that I fail to support my families any more with prices generally rise. In addition, it has been widely accepted that the company is too faraway from my house. therefore takes me a long time to go to work every day. At last, I am by no means interested in the job although I have tried my best to become involved in it.","title":"\u53c2\u8003"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_28","text":"\u4e24\u53e5 \u7b2c\u4e00\u53e5 \u5df2\u7ecf\u505a\u51fa\u8981\u6c42\uff0c\u4e00\u53e5\u8bdd\u5199\u51fa\u8981\u6c42 \u672a\u7ed9\u51fa\u8981\u6c42\uff0c\u8868\u793a\u611f\u8c22 My thanks to you for your generous assistance are beyond words. \u671f\u5f85\u56de\u4fe1 I am looking forward to your reply.","title":"\u7b2c\u4e09\u6bb5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_29","text":"Yours truly, Li Ming","title":"\u843d\u6b3e"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_30","text":"\u79f0\u547c Dear ...","title":"\u79c1\u4eba\u4e66\u4fe1"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_31","text":"\u95ee\u5019\u8bed+\u5199\u4f5c\u76ee\u7684\uff08\u7ed9\u51fa\uff09","title":"\u7b2c\u4e00\u6bb5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_32","text":"\u540c\u516c\u52a1\u4e66\u4fe1","title":"\u7b2c\u4e8c\u6bb5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_33","text":"\u7ed9\u51fa\u8981\u6c42\uff0c\u8981\u6c42+\u795d\u798f\u8bed \u672a\u7ed9\u51fa\u8981\u6c42\uff0c\u795d\u798f\u8bed+\u671f\u5f85\u56de\u4fe1 Please bring my best wished to your family","title":"\u7b2c\u4e09\u6bb5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_34","text":"\u6807\u9898\uff1a\u5927\u5199Notice \u79f0\u547c\uff0c\u65e0","title":"\u544a\u793a\u7c7b\u6587\u7ae0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_35","text":"\u5199\u4f5c\u76ee\u7684+\u5177\u4f53\u8bba\u8ff0 We are to ... \u516c\u52a1\u4e66\u4fe1\u7b2c\u4e8c\u6bb5","title":"\u7b2c\u4e00\u6bb5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_36","text":"\u6b22\u8fce\u52a0\u5165+\u8054\u7cfb\u65b9\u5f0f Welcome to join us we are waiting for your coming. If you intended to join us, please email us XXX@yahoo.com.cn.","title":"\u7b2c\u4e8c\u6bb5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/class/#_37","text":"\u5355\u4f4d\u540d\u5b57\uff08\u6587\u4e2d\u7ed9\u51fa\uff09","title":"\u843d\u6b3e"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/","text":"\u5199\u4f5c\u53e5\u578b \u66ff\u6362 parents superiors the elderly senior citizens should ought to be supposed to be obliged to\uff08\u6cd5\u5f8b\uff09 we us people human beings private individuals the folks/ the masses teenagers and youngsters undergraduates students on campus experts and professors all children and adults men and women in all walks customers not never by no means under no circumstances fail to think contend presume cling to the perspective that very exceedingly extraordinarily more than serious fatal grievous be of great severity many a sea of a host of a multitude of an army of +\u590d\u6570\u540d\u8bcd immense amounts of+\u4e0d\u53ef\u6570\u540d\u8bcd abundant+\u90fd\u53ef reasons causes factors grounds explain account for lead to give rise to idea outlook perspective be look=appear smell taste feel sound important essential crucial play a key role in sth beautiful graceful gorgeous and likewise in the meanwhile but by contrast nevertheless picture cartoon painting pay attention to pour attention into shed light on problem matter subject \u7b80\u5355\u53e5 \u88ab\u52a8 \u7b2c\u4e00\u6bb5\u6700\u540e\u6216\u7b2c\u4e09\u6bb5\u603b\u7ed3 (1)\u65e0\u4e3b\u53e5; (2)\u4eba\u79f0\u4ee3\u8bcd\u505a\u4e3b\u8bed\u7684\u53e5\u5b50 Parents should be respected by us. there be / exist / seem / remain / appear \u7b2c\u4e8c\u6bb5\u7b2c\u4e00\u53e5\u5f15\u51fa\u539f\u56e0\u5206\u6790 There exist many reasons to explain my idea. \u6bd4\u8f83\u7ed3\u6784 as ... as Liu is as beautiful as a white lily, which manages to catch the eyes of a host of teenagers and youngsters. Confidence keeps las important as air and water, which play a key role in the normal growth of all creatures in the and community. Pollution is as serious as earthquakes, which have threatened the health of helpless natives or even take their lives away. the more ... ,the more \u7b2c\u4e8c\u6bb5\u539f\u56e0\u5206\u6790 the + \u6bd4\u8f83\u7ea7 ... , the + \u6bd4\u8f83\u7ea7 The harder children and adults work. the more fortunate they will become. The more frequently cultures are exchanged, the more rapidly Chinese economy will evolve. \u5e76\u5217\u53e5 \u63cf\u8ff0\u56fe\u753b\u7684\u5206\u7c7b \u4e00\u5e45\u56fe \u4e00\u4e2a\u4e3b\u4f53\uff0c\u4e24\u4e2a\u52a8\u4f5c \u4e24\u4e2a\u4e3b\u4f53\uff0c\u4e24\u4e2a\u52a8\u4f5c \u4e24\u5e45\u56fe \u63cf\u8ff0\u56fe\u8868\u5206\u7c7b \u4e24\u4e2a\u4e3b\u4f53\uff0c\u4e24\u4e2a\u52a8\u4f5c and but \u4e00\u5e45\u56fe\uff0c\u4e24\u4e2a\u4e3b\u4f53\uff0c\u4e24\u4e2a\u52a8\u4f5c In the picture, the goal-keeper is imaging himself as small as an ant. On the contrary, the soccer player is assuming his rival strikingly giant. \u52a0\u72b6\u8bed \u4e24\u5e45\u56fe In the former photo, a man is writing the name of Beckham on his face. At the same time, another youngster is spending 300 having his hair cut into the style of Beckham. not only ... but also ... \u5199\u5728\u7b2c\u4e8c\u6bb5\uff0c\u539f\u56e0\u5206\u6790 Raising pets can not only reduce loneliness of senior citizens but also cultivate the loving heart of kids, that is to say, pets could bring much happiness to the young and the old. \u4e3a\u4ec0\u4e48\u5b5d\u656c\u7236\u6bcd Respecting parents not only keeps a Chinese conventional virtue but also proves to be the responsibility of their offspring. \u4e3a\u4ec0\u4e48\u4e0d\u5e94\u8be5\u76f2\u76ee\u8ffd\u661f? Pursuing celebrities blindly not only exerts great influence on the study of teenagers and youngsters but also is a waste of their time and youth. \u590d\u5408\u53e5 \u4e3b\u8bed\u4ece\u53e5 It ... that ... \u4efb\u4f55\u4e00\u53e5\u8bdd\u524d\u90fd\u53ef\u5199\uff0c\u63a8\u8350\u7b2c\u4e00\u6bb5\u7b2c\u4e00\u53e5\u8bdd\u524d\uff0c\u5f15\u51fa\u56fe\u8868\u3002 What is generally agreed is that ... \u540c\u4f4d\u8bed\u548c\u540c\u4f4d\u8bed\u4ece\u53e5 \u540d\u8bcd\u505a\u540c\u4f4d\u8bed \u540d\u8bcd\u90fd\u53ef\u52a0\u5165\u540d\u8bcd\uff0c\u4f5c\u4e3a\u5176\u540c\u4f4d\u8bed Environmental pollution, a hot issue throughout the world, has become increasingly fearful in our contemporary society. \u540c\u4f4d\u8bed\u4ece\u53e5 \u7b2c\u4e8c\u6bb5\uff0c\u539f\u56e0\u5206\u6790\u4f7f\u7528 The truth that + \u539f\u56e0\u53e5 + indicates that + \u7ed3\u8bba\u53e5 The truth that she wears a pair of big eves indicates that she looks like a beauty. The truth that a heaven of bright stars and pure moonlight fail to be detected by urban kids indicates that pollution becomes increasingly fearful/in our contemporary society. \u5b9a\u8bed\u4ece\u53e5 \u540d\u8bcd\u90fd\u53ef\u4ee5\u52a0\u5b9a\u8bed\uff0c\u5728\u7b2c\u4e00\u6bb5\u63cf\u8ff0\u56fe\u753b\u65f6\u63a8\u8350\u90fd\u8981\u52a0\u5b9a\u8bed\u3002 An American girl with a smile on her face) is wearing Chinese costume which keeps popular in the south east of China. A boy young as well as energetic is rushing to the destination which becomes a new start. The eldest son looking rather cruel as well as ugly kicking out his father who trembles on the ground like a fallen leaf in autumn. \u4e07\u80fd\u5b9a\u8bed \u597d\u7684 as well as \u8fde\u63a5\u4e24\u4e2a\u5f62\u5bb9\u8bcd\uff1a cute, lovely; little graceful, elegant; young confident, energetic optimistic, active aggressive, ambitious persistent Who looks distinctly impressive to readers \u574f\uff0c as well as cruel, ugly negative, gloomy short-sighted, double-faced contemptible \u5351\u9119\u7684 hot-tempered \u813e\u6c14\u574f\u7684 terrible, disgusting disgraceful Who looks rather less impressive to readers \u5b9a\u8bed\u4ece\u53e5\u6ee1\u5206\u8868\u8fbe which \u5f15\u5bfc\u7684\u975e\u9650\u5236\u4fee\u9970\u524d\u9762\u7684\u4e00\u53e5\u8bdd\uff0c\u4e07\u80fd\u53e5\u578b\uff0c\u63a8\u8350\u7b2c\u4e8c\u6bb5\u67d0\u4e2a\u77ed\u539f\u56e0\u540e\u9762\u3002 \u597d\uff1a which has provoked widespread concern among people recently. \u574f\uff1a which would give rise to dreadful consequences in the near future. ### \u72b6\u8bed\u548c\u72b6\u8bed\u4ece\u53e5 \u4efb\u4f55\u4e00\u53e5\u8bdd\u7684\u65c1\u8fb9\u90fd\u53ef\u52a0\u72b6\u8bed\uff0c\u7075\u6d3b\uff0c\u63a8\u8350\u4e3b\u8c13\u95f4\u4f5c\u4e3a\u63d2\u5165\u8bed\uff0c\u63cf\u8ff0\u56fe\u753b\u56fe\u8868\u65f6\uff0c\u4e00\u5b9a\u8981\u52a0 \u526f\u8bcd\uff0c \u65f6\u95f4\uff0c \u5730\u70b9\uff0c \u6761\u4ef6\uff0cif \u76ee\u7684\uff0cto do \u8ba9\u6b65\uff0calthough \u4f34\u968f \u65b9\u5f0f\uff0cby the means of \u539f\u56e0\uff0cbecause \u7ed3\u679c\uff0cso ... that \u63cf\u8ff0\u56fe\u753b\u7684\u4e07\u80fd\u72b6\u8bed \u56fe\u8868\u4e00\u5b9a\u7ed9\u51fa\u4e86 in the center of the vivid picture \u5206\u6790\u539f\u56e0\u7684\u4e07\u80fd\u72b6\u8bed in light of the rapid advance of science and technology in the general routine of everyday living although many people fail to pay attention to the problem \u72b6\u4ece\u7684\u6ee1\u5206\u8868\u8fbe although \u53ef\u5199\u5728\u4efb\u4f55\u4e00\u53e5\u8bdd\u65c1\u8fb9\uff0c\u63a8\u8350\u7b2c\u4e8c\u6bb5\uff0c\u5206\u6790\u539f\u56e0 \u4e3a\u4ec0\u4e48\u8bf4\u76f2\u76ee\u8ffd\u661f\u4e0d\u597d\uff1f pursuing celebrities blindly proves to be a waste of time and energy of students on campus although their touching singing could comport the soul of audiences. \u4e3a\u4ec0\u4e48\u519c\u6c11\u6d8c\u5165\u57ce\u5e02\uff1f peasant-workers, in big cities, not only could find more job opportunities but also enable their offspring to enjoy equal education like their peers in urban areas although they might lead a tough life there, rising early and going to bed late so ... that ... \u51fa\u73b0\u5f62\u5bb9\u8bcd\u548c\u526f\u8bcd\u53ef\u4ee5\u7528\uff0c\u7b2c\u4e00\u6bb5\u6700\u540e\uff0c\u7b2c\u4e09\u6bb5\u7b2c\u4e00\u53e5\uff0c\u4e2d\u5fc3\u53e5 that \u540e\u9700\u8981\u51c6\u786e perseverance is so vital that it is good time for youngsters to restrain themselves to insist their dreams. supporting the elderly is so crucial that time is supposed to be spared to accompany their parent. sth proves so significant / fearful that it should have been brought into the limelight under modern conditions. \u5206\u8bcd\u4f5c\u72b6\u8bed\u653e\u5728\u4e3b\u8c13\u4e4b\u95f4\u4f5c\u4e3a\u63d2\u5165\u8bed\u4f7f\u7528 \u63a8\u8350\u5199\u5728\u7b2c\u4e00\u6bb5\uff0c\u4e00\u5e45\u56fe\u4e00\u4e2a\u4e3b\u4f53\u4e24\u4e2a\u52a8\u4f5c\u65f6\u4f7f\u7528\uff0c An American girl young as well as elegant, smiling sweetly on her face, is wearing Chinese costume which is popular in the southeast of China. The hot pot not only delicious but also healthy, smoking in the center of the vivid caricature, is filled with cultures from China and foreign nations. sb(\u5b9a), doing sth1.(\u6b21\u8981)+\u5b9a/\u72b6, is doing sth (\u4e3b\u8981)+\u5b9a\u72b6 \u7279\u6b8a\u7ed3\u6784 \u53cc\u91cd\u5426\u5b9a Can not fail to do sth \u5199\u5728\u7b2c\u4e09\u6bb5\uff0c\u5177\u4f53\u63aa\u65bd\uff0c\u8d8a\u5177\u4f53\u8d8a\u597d University students cannot fail to know S these offer clues for ther future careers. \u4fee\u8f9e \u6bd4\u55bb \u63a8\u8350\u7b2c\u4e00\u6bb5\u6700\u540e\uff0c\u7b2c\u4e09\u6bb5\u7b2c\u4e00\u53e5 sth is to \u4eba as sunshine in spring is to all creatures on the earth. as grave natural disasters are to powerless natives. \u6392\u6bd4 ### \u5f3a\u8c03\u53e5\u578b It is ... that ... \u6240\u6709\u90fd\u53ef\uff0c\u7b2c\u4e00\u6bb5\u6700\u540e\uff0c\u7b2c\u4e8c\uff0c\u7b2c\u4e09\u7b2c\u4e00\u53e5\uff0c\u4e3b\u8bed\u6700\u597d\u3002 It is numerous factors that there exist to account for the phenomenon. \u5012\u88c5 \u628a\u4e00\u53e5\u8bdd\u5199\u6210\u4e00\u822c\u7591\u95ee\u53e5\u7684\u5f62\u5f0f\uff0c\u63d0\u4e2a\u52a9\u52a8\u8bcd\u653e\u5728\u53e5\u9996 \u5426\u5b9a\u8bcd\u653e\u5728\u53e5\u9996\u7528\u5012\u88c5 I am never a woman tough and outgoing. Never am I a ... He not only looks poor but also in fact is needy in his mind. Not only does he look poor ... so ... that ... \u628aso\u5f15\u5bfc\u7684\u90e8\u5206\u653e\u5728\u53e5\u9996\u7528\u5012\u88c5 sth keeps so significant/fearful that ... The issue should have been brought into the limelight under modern conditions. So significant/fearful does sth keep that the issue ... \u865a\u62df\u8bed\u6c14 If \u63a8\u8350\u7b2c\u4e8c\u6bb5\uff0c\u539f\u56e0\u5206\u6790\uff0c\u53cd\u9762\u8bba\u8bc1 If parents failed to be respected by their sons or daughters they would be despised by their own children in the near future. If every university student were indulged in surfing the internet every day, he or she might be confronted with a dim and gloomy future. It is imperative / essential / urgent that that\u540e\u52a8\u8bcd\u539f\u5f62\u8868\u865a\u62df\uff0c\u7b2c\u4e09\u6bb5\u5177\u4f53\u63aa\u65bd It is urgent that Chinese citizens/ undergraduates should ... It is crucial that parents/teachers in primary schools or univeristies / communities should educate / encourage their kids / undergraduates residents to do sth \u6216\u8005 not to do sth \u6bb5\u843d \u7b2c\u4e8c\u6bb5 \u5b9a\u4e49\u548c\u89e3\u91ca \u7b2c\u4e00\u4e2a\u539f\u56e0\u5206\u6790\u65f6\u4f7f\u7528 \u4ec0\u4e48\u662f\u5b5d\u656c\u7236\u6bcd? Respecting parents is a Chinese traditional virtue which means that we buy gifts for them, we wash clothes for them and we cook delicious foods for them when they are in need of us \u4ec0\u4e48\u662f\u4e50\u89c2? Optimism is a positive attitude which means that one fails to be afraid of frustrations, one is brave to face any difficulties, and one smiles at people he meets even when he lives in the gutter currently sth1 is sth2 which means that ... sth2: a severe global issue a Chinese traditional virtue a social pervasive trend an active / negative mentality a hot social subject \u7edf\u8ba1\u548c\u4e8b\u5b9e In line with the proximate data by ... , an increasing number of \u4eba think that ... In light of the latest survey in a university, the majority of undergraduates tend to use mobile phones for reading books including professional and non-professional knowledge. \u5f15\u7528\u540d\u4eba\u540d\u8a00 Once there seemed a writer who has gained great reputation in South Africa named Alan Paton stating that the more; as ... as ...; so ... that ...; if ; \u6bd4\u55bb \u4e3e\u4f8b \u4e3e\u5c0f\u4f8b\u5b50 \u62bd\u8c61\u540d\u8bcd\u6216\u590d\u6570\u540d\u8bcd\uff0c\u53ef\u8ddf such as \u6765\u52a0\u5c0f\u4f8b\u5b50 I love reading masterpieces such as Gone with the Wind, Pride and Prejudice and Little Prince. \u4e3e\u5927\u4f8b\u5b50 Although multitudes of cases can support my simple view, the following one is most favorable. I, the other day, had a high fever because it rained heavily last night. Unfortunately, no families or roommates took care of me during the holiday. At that moment, a dormitory assistant entered to give me some medicines. Then, I recovered the next day. So the story vividly tells us a truth that loving heart seems like a lamp which will become lighter in darkness. \u4e3a\u4ec0\u4e48\u5e74\u9f84\u5927\u6ee1\u610f\u5ea6\u9ad8? Although a sea of cases can clarify my perspective, the following one may be the most typical. I have an uncle who had worked as a teacher in a middle school. When he was about 40 years old, he appeared exceedingly upset almost every day, with a blank face in his class. However, now he has retired and gone to university for the elderly. Every time he comes to my house could find happiness in his eyes. What a pleasant matter. So the story tells us that the elder human beings become, the more delighted they lead their life. \u56e0\u679c\u8bba\u8bc1 \u5927\u5b66\u751f\u4f7f\u7528\u624b\u673a\u6253\u53d1\u65f6\u95f4\uff1f If more students spent more time on cellphones, killing time, their academic performance would be affected. The poorer their academic performance becomes, the more difficultly they will graduate from universities. \u4f53\u80b2\u953b\u70bc\u65b9\u5f0f\u8c03\u67e5\uff1f If more time were spared to engage in various sports activities such as jogging or just walking, their physical health would improve a lot. As we know, fitness is the foundation of any revolution. With good health, we could make greater contribution to our country. \u603b\u7ed3 \u5982\u679c\u80fd\u7528\u4e2d\u6587\u60f3\u5230\u539f\u56e0\uff0c\u5c31\u7528\u4ee5\u4e0b\u6765\u5199\u539f\u56e0\uff1a the more not only although the truth if \u60f3\u4e0d\u5230\uff1a \u5b9a\u4e49 \u6570\u636e \u4e3e\u4f8b \u540d\u8a00 \u56e0\u679c \u63a8\u8350\u90092\u4e2a\u53e5\u578b\uff0c1\u4e2a\u8bba\u8bc1\u65b9\u5f0f","title":"\u5199\u4f5c\u53e5\u578b"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_1","text":"","title":"\u5199\u4f5c\u53e5\u578b"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_2","text":"","title":"\u66ff\u6362"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#parents","text":"superiors the elderly senior citizens","title":"parents"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#should","text":"ought to be supposed to be obliged to\uff08\u6cd5\u5f8b\uff09","title":"should"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#we-us-people","text":"human beings private individuals the folks/ the masses teenagers and youngsters undergraduates students on campus experts and professors all children and adults men and women in all walks customers","title":"we us people"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#not","text":"never by no means under no circumstances fail to","title":"not"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#think","text":"contend presume cling to the perspective that","title":"think"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#very","text":"exceedingly extraordinarily more than","title":"very"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#serious","text":"fatal grievous be of great severity","title":"serious"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#many","text":"a sea of a host of a multitude of an army of +\u590d\u6570\u540d\u8bcd immense amounts of+\u4e0d\u53ef\u6570\u540d\u8bcd abundant+\u90fd\u53ef","title":"many"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#reasons","text":"causes factors grounds","title":"reasons"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#explain","text":"account for lead to give rise to","title":"explain"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#idea","text":"outlook perspective","title":"idea"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#be","text":"look=appear smell taste feel sound","title":"be"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#important","text":"essential crucial play a key role in sth","title":"important"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#beautiful","text":"graceful gorgeous","title":"beautiful"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#and","text":"likewise in the meanwhile","title":"and"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#but","text":"by contrast nevertheless","title":"but"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#picture","text":"cartoon painting","title":"picture"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#pay-attention-to","text":"pour attention into shed light on","title":"pay attention to"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#problem","text":"matter subject","title":"problem"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_3","text":"","title":"\u7b80\u5355\u53e5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_4","text":"\u7b2c\u4e00\u6bb5\u6700\u540e\u6216\u7b2c\u4e09\u6bb5\u603b\u7ed3 (1)\u65e0\u4e3b\u53e5; (2)\u4eba\u79f0\u4ee3\u8bcd\u505a\u4e3b\u8bed\u7684\u53e5\u5b50 Parents should be respected by us.","title":"\u88ab\u52a8"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#there-be-exist-seem-remain-appear","text":"\u7b2c\u4e8c\u6bb5\u7b2c\u4e00\u53e5\u5f15\u51fa\u539f\u56e0\u5206\u6790 There exist many reasons to explain my idea.","title":"there be / exist / seem / remain / appear"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_5","text":"","title":"\u6bd4\u8f83\u7ed3\u6784"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#as-as","text":"Liu is as beautiful as a white lily, which manages to catch the eyes of a host of teenagers and youngsters. Confidence keeps las important as air and water, which play a key role in the normal growth of all creatures in the and community. Pollution is as serious as earthquakes, which have threatened the health of helpless natives or even take their lives away.","title":"as ... as"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#the-more-the-more","text":"\u7b2c\u4e8c\u6bb5\u539f\u56e0\u5206\u6790 the + \u6bd4\u8f83\u7ea7 ... , the + \u6bd4\u8f83\u7ea7 The harder children and adults work. the more fortunate they will become. The more frequently cultures are exchanged, the more rapidly Chinese economy will evolve.","title":"the more ... ,the more"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_6","text":"\u63cf\u8ff0\u56fe\u753b\u7684\u5206\u7c7b \u4e00\u5e45\u56fe \u4e00\u4e2a\u4e3b\u4f53\uff0c\u4e24\u4e2a\u52a8\u4f5c \u4e24\u4e2a\u4e3b\u4f53\uff0c\u4e24\u4e2a\u52a8\u4f5c \u4e24\u5e45\u56fe \u63cf\u8ff0\u56fe\u8868\u5206\u7c7b \u4e24\u4e2a\u4e3b\u4f53\uff0c\u4e24\u4e2a\u52a8\u4f5c","title":"\u5e76\u5217\u53e5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#and-but","text":"\u4e00\u5e45\u56fe\uff0c\u4e24\u4e2a\u4e3b\u4f53\uff0c\u4e24\u4e2a\u52a8\u4f5c In the picture, the goal-keeper is imaging himself as small as an ant. On the contrary, the soccer player is assuming his rival strikingly giant. \u52a0\u72b6\u8bed \u4e24\u5e45\u56fe In the former photo, a man is writing the name of Beckham on his face. At the same time, another youngster is spending 300 having his hair cut into the style of Beckham.","title":"and but"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#not-only-but-also","text":"\u5199\u5728\u7b2c\u4e8c\u6bb5\uff0c\u539f\u56e0\u5206\u6790 Raising pets can not only reduce loneliness of senior citizens but also cultivate the loving heart of kids, that is to say, pets could bring much happiness to the young and the old. \u4e3a\u4ec0\u4e48\u5b5d\u656c\u7236\u6bcd Respecting parents not only keeps a Chinese conventional virtue but also proves to be the responsibility of their offspring. \u4e3a\u4ec0\u4e48\u4e0d\u5e94\u8be5\u76f2\u76ee\u8ffd\u661f? Pursuing celebrities blindly not only exerts great influence on the study of teenagers and youngsters but also is a waste of their time and youth.","title":"not only ... but also ..."},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_7","text":"","title":"\u590d\u5408\u53e5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_8","text":"","title":"\u4e3b\u8bed\u4ece\u53e5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#it-that","text":"\u4efb\u4f55\u4e00\u53e5\u8bdd\u524d\u90fd\u53ef\u5199\uff0c\u63a8\u8350\u7b2c\u4e00\u6bb5\u7b2c\u4e00\u53e5\u8bdd\u524d\uff0c\u5f15\u51fa\u56fe\u8868\u3002 What is generally agreed is that ...","title":"It ... that ..."},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_9","text":"","title":"\u540c\u4f4d\u8bed\u548c\u540c\u4f4d\u8bed\u4ece\u53e5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_10","text":"\u540d\u8bcd\u90fd\u53ef\u52a0\u5165\u540d\u8bcd\uff0c\u4f5c\u4e3a\u5176\u540c\u4f4d\u8bed Environmental pollution, a hot issue throughout the world, has become increasingly fearful in our contemporary society.","title":"\u540d\u8bcd\u505a\u540c\u4f4d\u8bed"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_11","text":"\u7b2c\u4e8c\u6bb5\uff0c\u539f\u56e0\u5206\u6790\u4f7f\u7528 The truth that + \u539f\u56e0\u53e5 + indicates that + \u7ed3\u8bba\u53e5 The truth that she wears a pair of big eves indicates that she looks like a beauty. The truth that a heaven of bright stars and pure moonlight fail to be detected by urban kids indicates that pollution becomes increasingly fearful/in our contemporary society.","title":"\u540c\u4f4d\u8bed\u4ece\u53e5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_12","text":"\u540d\u8bcd\u90fd\u53ef\u4ee5\u52a0\u5b9a\u8bed\uff0c\u5728\u7b2c\u4e00\u6bb5\u63cf\u8ff0\u56fe\u753b\u65f6\u63a8\u8350\u90fd\u8981\u52a0\u5b9a\u8bed\u3002 An American girl with a smile on her face) is wearing Chinese costume which keeps popular in the south east of China. A boy young as well as energetic is rushing to the destination which becomes a new start. The eldest son looking rather cruel as well as ugly kicking out his father who trembles on the ground like a fallen leaf in autumn.","title":"\u5b9a\u8bed\u4ece\u53e5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_13","text":"\u597d\u7684 as well as \u8fde\u63a5\u4e24\u4e2a\u5f62\u5bb9\u8bcd\uff1a cute, lovely; little graceful, elegant; young confident, energetic optimistic, active aggressive, ambitious persistent Who looks distinctly impressive to readers \u574f\uff0c as well as cruel, ugly negative, gloomy short-sighted, double-faced contemptible \u5351\u9119\u7684 hot-tempered \u813e\u6c14\u574f\u7684 terrible, disgusting disgraceful Who looks rather less impressive to readers","title":"\u4e07\u80fd\u5b9a\u8bed"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_14","text":"which \u5f15\u5bfc\u7684\u975e\u9650\u5236\u4fee\u9970\u524d\u9762\u7684\u4e00\u53e5\u8bdd\uff0c\u4e07\u80fd\u53e5\u578b\uff0c\u63a8\u8350\u7b2c\u4e8c\u6bb5\u67d0\u4e2a\u77ed\u539f\u56e0\u540e\u9762\u3002 \u597d\uff1a which has provoked widespread concern among people recently. \u574f\uff1a which would give rise to dreadful consequences in the near future. ### \u72b6\u8bed\u548c\u72b6\u8bed\u4ece\u53e5 \u4efb\u4f55\u4e00\u53e5\u8bdd\u7684\u65c1\u8fb9\u90fd\u53ef\u52a0\u72b6\u8bed\uff0c\u7075\u6d3b\uff0c\u63a8\u8350\u4e3b\u8c13\u95f4\u4f5c\u4e3a\u63d2\u5165\u8bed\uff0c\u63cf\u8ff0\u56fe\u753b\u56fe\u8868\u65f6\uff0c\u4e00\u5b9a\u8981\u52a0 \u526f\u8bcd\uff0c \u65f6\u95f4\uff0c \u5730\u70b9\uff0c \u6761\u4ef6\uff0cif \u76ee\u7684\uff0cto do \u8ba9\u6b65\uff0calthough \u4f34\u968f \u65b9\u5f0f\uff0cby the means of \u539f\u56e0\uff0cbecause \u7ed3\u679c\uff0cso ... that","title":"\u5b9a\u8bed\u4ece\u53e5\u6ee1\u5206\u8868\u8fbe"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_15","text":"\u56fe\u8868\u4e00\u5b9a\u7ed9\u51fa\u4e86 in the center of the vivid picture","title":"\u63cf\u8ff0\u56fe\u753b\u7684\u4e07\u80fd\u72b6\u8bed"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_16","text":"in light of the rapid advance of science and technology in the general routine of everyday living although many people fail to pay attention to the problem","title":"\u5206\u6790\u539f\u56e0\u7684\u4e07\u80fd\u72b6\u8bed"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_17","text":"","title":"\u72b6\u4ece\u7684\u6ee1\u5206\u8868\u8fbe"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#although","text":"\u53ef\u5199\u5728\u4efb\u4f55\u4e00\u53e5\u8bdd\u65c1\u8fb9\uff0c\u63a8\u8350\u7b2c\u4e8c\u6bb5\uff0c\u5206\u6790\u539f\u56e0 \u4e3a\u4ec0\u4e48\u8bf4\u76f2\u76ee\u8ffd\u661f\u4e0d\u597d\uff1f pursuing celebrities blindly proves to be a waste of time and energy of students on campus although their touching singing could comport the soul of audiences. \u4e3a\u4ec0\u4e48\u519c\u6c11\u6d8c\u5165\u57ce\u5e02\uff1f peasant-workers, in big cities, not only could find more job opportunities but also enable their offspring to enjoy equal education like their peers in urban areas although they might lead a tough life there, rising early and going to bed late","title":"although"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#so-that","text":"\u51fa\u73b0\u5f62\u5bb9\u8bcd\u548c\u526f\u8bcd\u53ef\u4ee5\u7528\uff0c\u7b2c\u4e00\u6bb5\u6700\u540e\uff0c\u7b2c\u4e09\u6bb5\u7b2c\u4e00\u53e5\uff0c\u4e2d\u5fc3\u53e5 that \u540e\u9700\u8981\u51c6\u786e perseverance is so vital that it is good time for youngsters to restrain themselves to insist their dreams. supporting the elderly is so crucial that time is supposed to be spared to accompany their parent. sth proves so significant / fearful that it should have been brought into the limelight under modern conditions.","title":"so ... that ..."},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_18","text":"\u63a8\u8350\u5199\u5728\u7b2c\u4e00\u6bb5\uff0c\u4e00\u5e45\u56fe\u4e00\u4e2a\u4e3b\u4f53\u4e24\u4e2a\u52a8\u4f5c\u65f6\u4f7f\u7528\uff0c An American girl young as well as elegant, smiling sweetly on her face, is wearing Chinese costume which is popular in the southeast of China. The hot pot not only delicious but also healthy, smoking in the center of the vivid caricature, is filled with cultures from China and foreign nations. sb(\u5b9a), doing sth1.(\u6b21\u8981)+\u5b9a/\u72b6, is doing sth (\u4e3b\u8981)+\u5b9a\u72b6","title":"\u5206\u8bcd\u4f5c\u72b6\u8bed\u653e\u5728\u4e3b\u8c13\u4e4b\u95f4\u4f5c\u4e3a\u63d2\u5165\u8bed\u4f7f\u7528"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_19","text":"","title":"\u7279\u6b8a\u7ed3\u6784"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_20","text":"","title":"\u53cc\u91cd\u5426\u5b9a"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#can-not-fail-to-do-sth","text":"\u5199\u5728\u7b2c\u4e09\u6bb5\uff0c\u5177\u4f53\u63aa\u65bd\uff0c\u8d8a\u5177\u4f53\u8d8a\u597d University students cannot fail to know S these offer clues for ther future careers.","title":"Can not fail to do sth"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_21","text":"","title":"\u4fee\u8f9e"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_22","text":"\u63a8\u8350\u7b2c\u4e00\u6bb5\u6700\u540e\uff0c\u7b2c\u4e09\u6bb5\u7b2c\u4e00\u53e5 sth is to \u4eba as sunshine in spring is to all creatures on the earth. as grave natural disasters are to powerless natives.","title":"\u6bd4\u55bb"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_23","text":"### \u5f3a\u8c03\u53e5\u578b","title":"\u6392\u6bd4"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#it-is-that","text":"\u6240\u6709\u90fd\u53ef\uff0c\u7b2c\u4e00\u6bb5\u6700\u540e\uff0c\u7b2c\u4e8c\uff0c\u7b2c\u4e09\u7b2c\u4e00\u53e5\uff0c\u4e3b\u8bed\u6700\u597d\u3002 It is numerous factors that there exist to account for the phenomenon.","title":"It is ... that ..."},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_24","text":"\u628a\u4e00\u53e5\u8bdd\u5199\u6210\u4e00\u822c\u7591\u95ee\u53e5\u7684\u5f62\u5f0f\uff0c\u63d0\u4e2a\u52a9\u52a8\u8bcd\u653e\u5728\u53e5\u9996","title":"\u5012\u88c5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_25","text":"I am never a woman tough and outgoing. Never am I a ... He not only looks poor but also in fact is needy in his mind. Not only does he look poor ...","title":"\u5426\u5b9a\u8bcd\u653e\u5728\u53e5\u9996\u7528\u5012\u88c5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#so-that_1","text":"\u628aso\u5f15\u5bfc\u7684\u90e8\u5206\u653e\u5728\u53e5\u9996\u7528\u5012\u88c5 sth keeps so significant/fearful that ... The issue should have been brought into the limelight under modern conditions. So significant/fearful does sth keep that the issue ...","title":"so ... that ..."},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_26","text":"","title":"\u865a\u62df\u8bed\u6c14"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#if","text":"\u63a8\u8350\u7b2c\u4e8c\u6bb5\uff0c\u539f\u56e0\u5206\u6790\uff0c\u53cd\u9762\u8bba\u8bc1 If parents failed to be respected by their sons or daughters they would be despised by their own children in the near future. If every university student were indulged in surfing the internet every day, he or she might be confronted with a dim and gloomy future.","title":"If"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#it-is-imperative-essential-urgent-that","text":"that\u540e\u52a8\u8bcd\u539f\u5f62\u8868\u865a\u62df\uff0c\u7b2c\u4e09\u6bb5\u5177\u4f53\u63aa\u65bd It is urgent that Chinese citizens/ undergraduates should ... It is crucial that parents/teachers in primary schools or univeristies / communities should educate / encourage their kids / undergraduates residents to do sth \u6216\u8005 not to do sth","title":"It is imperative / essential / urgent that"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_27","text":"\u7b2c\u4e8c\u6bb5","title":"\u6bb5\u843d"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_28","text":"\u7b2c\u4e00\u4e2a\u539f\u56e0\u5206\u6790\u65f6\u4f7f\u7528 \u4ec0\u4e48\u662f\u5b5d\u656c\u7236\u6bcd? Respecting parents is a Chinese traditional virtue which means that we buy gifts for them, we wash clothes for them and we cook delicious foods for them when they are in need of us \u4ec0\u4e48\u662f\u4e50\u89c2? Optimism is a positive attitude which means that one fails to be afraid of frustrations, one is brave to face any difficulties, and one smiles at people he meets even when he lives in the gutter currently sth1 is sth2 which means that ... sth2: a severe global issue a Chinese traditional virtue a social pervasive trend an active / negative mentality a hot social subject","title":"\u5b9a\u4e49\u548c\u89e3\u91ca"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_29","text":"In line with the proximate data by ... , an increasing number of \u4eba think that ... In light of the latest survey in a university, the majority of undergraduates tend to use mobile phones for reading books including professional and non-professional knowledge.","title":"\u7edf\u8ba1\u548c\u4e8b\u5b9e"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_30","text":"Once there seemed a writer who has gained great reputation in South Africa named Alan Paton stating that the more; as ... as ...; so ... that ...; if ; \u6bd4\u55bb","title":"\u5f15\u7528\u540d\u4eba\u540d\u8a00"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_31","text":"","title":"\u4e3e\u4f8b"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_32","text":"\u62bd\u8c61\u540d\u8bcd\u6216\u590d\u6570\u540d\u8bcd\uff0c\u53ef\u8ddf such as \u6765\u52a0\u5c0f\u4f8b\u5b50 I love reading masterpieces such as Gone with the Wind, Pride and Prejudice and Little Prince.","title":"\u4e3e\u5c0f\u4f8b\u5b50"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_33","text":"Although multitudes of cases can support my simple view, the following one is most favorable. I, the other day, had a high fever because it rained heavily last night. Unfortunately, no families or roommates took care of me during the holiday. At that moment, a dormitory assistant entered to give me some medicines. Then, I recovered the next day. So the story vividly tells us a truth that loving heart seems like a lamp which will become lighter in darkness. \u4e3a\u4ec0\u4e48\u5e74\u9f84\u5927\u6ee1\u610f\u5ea6\u9ad8? Although a sea of cases can clarify my perspective, the following one may be the most typical. I have an uncle who had worked as a teacher in a middle school. When he was about 40 years old, he appeared exceedingly upset almost every day, with a blank face in his class. However, now he has retired and gone to university for the elderly. Every time he comes to my house could find happiness in his eyes. What a pleasant matter. So the story tells us that the elder human beings become, the more delighted they lead their life.","title":"\u4e3e\u5927\u4f8b\u5b50"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_34","text":"\u5927\u5b66\u751f\u4f7f\u7528\u624b\u673a\u6253\u53d1\u65f6\u95f4\uff1f If more students spent more time on cellphones, killing time, their academic performance would be affected. The poorer their academic performance becomes, the more difficultly they will graduate from universities. \u4f53\u80b2\u953b\u70bc\u65b9\u5f0f\u8c03\u67e5\uff1f If more time were spared to engage in various sports activities such as jogging or just walking, their physical health would improve a lot. As we know, fitness is the foundation of any revolution. With good health, we could make greater contribution to our country.","title":"\u56e0\u679c\u8bba\u8bc1"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD/writing/#_35","text":"\u5982\u679c\u80fd\u7528\u4e2d\u6587\u60f3\u5230\u539f\u56e0\uff0c\u5c31\u7528\u4ee5\u4e0b\u6765\u5199\u539f\u56e0\uff1a the more not only although the truth if \u60f3\u4e0d\u5230\uff1a \u5b9a\u4e49 \u6570\u636e \u4e3e\u4f8b \u540d\u8a00 \u56e0\u679c \u63a8\u8350\u90092\u4e2a\u53e5\u578b\uff0c1\u4e2a\u8bba\u8bc1\u65b9\u5f0f","title":"\u603b\u7ed3"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/","text":"\u786c\u4ef6\u57fa\u7840 \u8ba1\u7b97\u673a\u7684\u6307\u4ee4\u7cfb\u7edf \u6307\u4ee4\u529f\u80fd\uff1a\u6570\u636e\u8fd0\u7b97\u3001\u6570\u636e\u4f20\u8f93\u3001\u8f93\u5165\u8f93\u51fa\u6307\u4ee4\u3001\u63a7\u5236\u6307\u4ee4\u3001\u5176\u4ed6 \u6307\u4ee4\u683c\u5f0f\uff1a\u6307\u4ee4\u5b57(\u64cd\u4f5c\u7801+\u64cd\u4f5c\u6570\u5730\u5740) \u6570\u636e\u8868\u793a\u53ca\u68c0\u9519\u7ea0\u9519 \u5206\u7c7b \u903b\u8f91\u578b \u5b57\u7b26\u578b \u6570\u503c\u578b \u6574\u6570\u7684\u7f16\u7801 \u539f\u7801\u3001\u53cd\u7801\u548c\u8865\u7801(\u6b63\u6570\u4e00\u81f4,\u96f6\u7684\u539f\u7801\u548c\u53cd\u7801\u5747\u6709 2 \u4e2a\u7f16\u7801,\u8865\u7801\u53ea 1 \u4e2a\u7801) \u539f\u7801(Sign Magnitude)\uff1a\u7b26\u53f7\u4f4d||\u6570\u7684\u7edd\u5bf9\u503c \u53cd\u7801(One\u2019s Complement)\uff1a\u7b26\u53f7\u4f4d||\u6570\u503c\u6309\u4f4d\u6c42\u53cd \u8865\u7801(Two\u2019s Complement)\uff1a\u53cd\u7801\u7684\u6700\u4f4e\u4f4d+1(\u4e0d\u540c\u4f4d\u6570\u8865\u7801\u76f8\u52a0\u51cf\u65f6,\u8981\u7b26\u53f7\u6269\u5c55) \u8865\u7801\u52a0\u6cd5\uff1a[x+y]\u8865=[x]\u8865+[y]\u8865 \u8865\u7801\u51cf\u6cd5\uff1a[x-y]\u8865= [x+(-y)]\u8865= [x]\u8865+[-y]\u8865 [-x] \u8865 \uff1a[x] \u8865 \u8fde\u540c\u7b26\u53f7\u4f4d\u5728\u5185,\u9010\u4f4d\u6c42\u53cd,\u518d\u5728\u6700\u4f4e\u4f4d\u52a0 1 [x/2] \u8865 \uff1a[x] \u8865 \u7b97\u672f\u53f3\u79fb 1 \u4f4d \u6570\u636e\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u5b58\u50a8 \u5927\u7aef\uff1a\u6570\u636e\u7684\u4f4e\u4f4d\u4fdd\u5b58\u5728\u5185\u5b58\u7684\u9ad8\u5730\u5740\u5b57\u8282\u4e2d\u3002 \u5c0f\u7aef\uff1a\u6570\u636e\u7684\u4f4e\u4f4d\u4fdd\u5b58\u5728\u5185\u5b58\u7684\u4f4e\u5730\u5740\u5b57\u8282\u4e2d\u3002\uff08\u4ee5\u5c0f\u7aef\u673a\u4e3a\u4e3b\uff09 \u7ea0\u68c0\u9519\u7801 \u5757\u7801\uff0c (n,m) (n,m) \u7801\uff0c\u6570\u636e\u4f4d\u4e3a m m \uff0c\u6821\u9a8c\u4f4d\u4e3a r=n-m r=n-m \u3002 \u53ef\u80fd\u53d1\u751f d d \u4f4d\u9519\uff0c\u9700\u8981\u7801\u8ddd\u4e3a d+1 d+1 \u7684\u68c0\u9519\u7801\u6216 2d+1 2d+1 \u7684\u7ea0\u9519\u7801\u3002 \u5947\u5076\u6821\u9a8c\u7801\uff1a\u7528\u4e8e\u5e76\u884c\u6570\u636e\u4f20\u9001\u4e2d\uff0c\u7801\u8ddd\u4e3a 2 2 \u200b\u3002 \u6c49\u660e\u6821\u9a8c\u7801\uff1a\u7528\u4e8e\u5e76\u884c\u6570\u636e\u4f20\u9001\u4e2d 2^r \\ge m+r+1 2^r \\ge m+r+1 \uff0c\u7801\u8ddd\u4e3a 4 4 \u200b\u200b\uff0c\u5076\u6821\u9a8c\u7f16\u89e3\u7801\u90fd\u76f4\u63a5\u5f02\u6216\u3002 \u82e5\u8981\u5b9e\u73b0\u7ea0\u4e00\u4f4d\u9519\uff0c\u4e14\u540c\u65f6\u53d1\u73b0\u4e24\u4f4d\u9519\uff0c\u53ef\u518d\u52a0\u4e00\u4f4d\u603b\u6821\u9a8c\u4f4d\uff0c\u8bd1\u7801\u540e\u603b\u6821\u9a8c\u4f4d\u4e3a 0 0 \u8bf4\u660e\u6709\u4e24\u4f4d\u9519\u3002 \u5faa\u73af\u5197\u4f59\u6821\u9a8c\u7801\uff1a\u7528\u4e8e\u4e32\u884c\u6570\u636e\u4f20\u9001\u4e2d \u63a5\u53d7\u53cc\u65b9\u5546\u5b9a\u4e00\u4e2a\u751f\u6210\u591a\u9879\u5f0f G(x) G(x) \u200b\uff0c\u5728\u5e27\u7684\u5c3e\u90e8\u9644\u52a0\u4e00\u4e2a\u6821\u9a8c\u548c,\u4f7f\u5f97\u9644\u52a0\u4e4b\u540e\u7684\u5e27\u6240\u5bf9\u5e94\u7684\u591a\u9879\u5f0f\u80fd\u591f\u88ab G(x) G(x) \u9664\u5c3d\u3002\u5f53\u63a5\u6536\u65b9\u6536\u5230\u4e86\u5e26\u6821\u9a8c\u548c\u7684\u5e27\u4e4b\u540e,\u5b83\u8bd5\u7740\u7528 G(x) G(x) \u200b\u53bb\u9664\u5b83\u3002\u5982\u679c\u6709\u4f59\u6570\u7684\u8bdd,\u5219\u8868\u660e\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u6709\u9519\u8bef\u3002 \u5982 G(x)=x^4+x+1 G(x)=x^4+x+1 \u200b\uff0c\u5e27\u4e3a 1101011111 1101011111 \u200b\u200b \u7b97\u672f\u8fd0\u7b97\u53ca\u7535\u8def\u5b9e\u73b0 ALU \u57fa\u4e8e\u4e00\u4f4d\u52a0\u6cd5\u5668\u5b9e\u73b0 \u57fa\u4e8e\u8d85\u524d\u8fdb\u4f4d\u5668 P_i=a_i+b_i P_i=a_i+b_i \uff0c G_i=a_ib_i G_i=a_ib_i \u200b\uff0c P^* P^* \u548c G^* G^* \u7528\u4e8e\u7ea7\u8054\u66f4\u9ad8\u4f4d\u7684\u8fdb\u4f4d\u5668\u3002 \u4e58\u6cd5 \u539f\u7801 \u8865\u7801 dsapp\uff1a\u8865\u7801\u5728\u4e0d\u6ea2\u51fa\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u7528\u76f4\u63a5\u4f7f\u7528\u539f\u7801\u7684\u4e58\u6cd5\u6765\u4ee3\u66ff\u3002 \u5e03\u65af\u7b97\u6cd5\uff1a \u4ee4 [x]_{\\text{\u8865}}=x_{n-1}\\cdots x_0 [x]_{\\text{\u8865}}=x_{n-1}\\cdots x_0 \uff0c [y]_{\\text{\u8865}} [y]_{\\text{\u8865}} \u540c\u7406\uff0c\u5219\uff1a $$ [x\\cdot y] {\\text{\u8865}}=[x] {\\text{\u8865}}\\cdot\\sum_{i=0}^{n-1}(y_{i-1}-y_i) $$ \u5176\u4e2d y_{-1}=0 y_{-1}=0 \uff0c\u5373\u521d\u59cb\u5316\u9644\u52a0\u4f4d\u3002 \u9664\u6cd5 \u539f\u7801 [x/y]_{\\text{\u539f}}=(x\\oplus y)(|x|/|y|) [x/y]_{\\text{\u539f}}=(x\\oplus y)(|x|/|y|) \u6062\u590d\u4f59\u6570\u6cd5\uff1a\u88ab\u9664\u6570-\u9664\u6570,\u82e5\u7ed3\u679c>=0,\u5219\u4e0a\u55461,\u79fb\u4f4d;\u82e5\u7ed3\u679c<0,\u5219\u55460,\u6062\u590d\u4f59\u6570\u540e,\u518d\u79fb\u4f4d; \u52a0\u51cf\u4ea4\u66ff\u9664\u6cd5 x=-0.1101 x=-0.1101 \uff0c y=0.1011 y=0.1011 \u6d6e\u70b9\u6570 IEEE V = (-1)^s \\times M \\times 2^E V = (-1)^s \\times M \\times 2^E // s-exp-frac //Single precision k = 8, n = 23, Bias = 127 //Double precision k = 11, n = 52, Bias = 1023 \u7b49\u4e8e 1 1 \u6307\u5168 1 1 \uff0c\u7b49\u4e8e 0 0 \u6307\u5168 0 0 \u3002 Normalized Values $$ e \\neq 0\\neq 2^k - 1\\ M = 1 + f, E = e - Bias $$ Denormalized Values $$ e = 0\\ M = f, E = 1 - Bias $$ Special Values NaN: e = 1, f \\neq 0\\\\ \\infty: e =1, f = 1 NaN: e = 1, f \\neq 0\\\\ \\infty: e =1, f = 1 \u6d6e\u70b9\u52a0\u3001\u51cf\u6cd5\u4e0d\u6ee1\u8db3\u7ed3\u5408\u5f8b \u6d6e\u70b9\u6570\u52a0\u6cd5\u3001\u51cf\u6cd5\u4e0d\u53ef\u7ed3\u5408 \u6d6e\u70b9\u6570\u4e5f\u4e0d\u80fd\u8fdb\u884c\u76f8\u7b49\u6bd4\u8f83","title":"\u786c\u4ef6\u57fa\u7840"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_1","text":"","title":"\u786c\u4ef6\u57fa\u7840"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_2","text":"\u6307\u4ee4\u529f\u80fd\uff1a\u6570\u636e\u8fd0\u7b97\u3001\u6570\u636e\u4f20\u8f93\u3001\u8f93\u5165\u8f93\u51fa\u6307\u4ee4\u3001\u63a7\u5236\u6307\u4ee4\u3001\u5176\u4ed6 \u6307\u4ee4\u683c\u5f0f\uff1a\u6307\u4ee4\u5b57(\u64cd\u4f5c\u7801+\u64cd\u4f5c\u6570\u5730\u5740)","title":"\u8ba1\u7b97\u673a\u7684\u6307\u4ee4\u7cfb\u7edf"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_3","text":"","title":"\u6570\u636e\u8868\u793a\u53ca\u68c0\u9519\u7ea0\u9519"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_4","text":"\u903b\u8f91\u578b \u5b57\u7b26\u578b \u6570\u503c\u578b","title":"\u5206\u7c7b"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_5","text":"\u539f\u7801\u3001\u53cd\u7801\u548c\u8865\u7801(\u6b63\u6570\u4e00\u81f4,\u96f6\u7684\u539f\u7801\u548c\u53cd\u7801\u5747\u6709 2 \u4e2a\u7f16\u7801,\u8865\u7801\u53ea 1 \u4e2a\u7801) \u539f\u7801(Sign Magnitude)\uff1a\u7b26\u53f7\u4f4d||\u6570\u7684\u7edd\u5bf9\u503c \u53cd\u7801(One\u2019s Complement)\uff1a\u7b26\u53f7\u4f4d||\u6570\u503c\u6309\u4f4d\u6c42\u53cd \u8865\u7801(Two\u2019s Complement)\uff1a\u53cd\u7801\u7684\u6700\u4f4e\u4f4d+1(\u4e0d\u540c\u4f4d\u6570\u8865\u7801\u76f8\u52a0\u51cf\u65f6,\u8981\u7b26\u53f7\u6269\u5c55) \u8865\u7801\u52a0\u6cd5\uff1a[x+y]\u8865=[x]\u8865+[y]\u8865 \u8865\u7801\u51cf\u6cd5\uff1a[x-y]\u8865= [x+(-y)]\u8865= [x]\u8865+[-y]\u8865 [-x] \u8865 \uff1a[x] \u8865 \u8fde\u540c\u7b26\u53f7\u4f4d\u5728\u5185,\u9010\u4f4d\u6c42\u53cd,\u518d\u5728\u6700\u4f4e\u4f4d\u52a0 1 [x/2] \u8865 \uff1a[x] \u8865 \u7b97\u672f\u53f3\u79fb 1 \u4f4d \u6570\u636e\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u5b58\u50a8 \u5927\u7aef\uff1a\u6570\u636e\u7684\u4f4e\u4f4d\u4fdd\u5b58\u5728\u5185\u5b58\u7684\u9ad8\u5730\u5740\u5b57\u8282\u4e2d\u3002 \u5c0f\u7aef\uff1a\u6570\u636e\u7684\u4f4e\u4f4d\u4fdd\u5b58\u5728\u5185\u5b58\u7684\u4f4e\u5730\u5740\u5b57\u8282\u4e2d\u3002\uff08\u4ee5\u5c0f\u7aef\u673a\u4e3a\u4e3b\uff09","title":"\u6574\u6570\u7684\u7f16\u7801"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_6","text":"\u5757\u7801\uff0c (n,m) (n,m) \u7801\uff0c\u6570\u636e\u4f4d\u4e3a m m \uff0c\u6821\u9a8c\u4f4d\u4e3a r=n-m r=n-m \u3002 \u53ef\u80fd\u53d1\u751f d d \u4f4d\u9519\uff0c\u9700\u8981\u7801\u8ddd\u4e3a d+1 d+1 \u7684\u68c0\u9519\u7801\u6216 2d+1 2d+1 \u7684\u7ea0\u9519\u7801\u3002 \u5947\u5076\u6821\u9a8c\u7801\uff1a\u7528\u4e8e\u5e76\u884c\u6570\u636e\u4f20\u9001\u4e2d\uff0c\u7801\u8ddd\u4e3a 2 2 \u200b\u3002 \u6c49\u660e\u6821\u9a8c\u7801\uff1a\u7528\u4e8e\u5e76\u884c\u6570\u636e\u4f20\u9001\u4e2d 2^r \\ge m+r+1 2^r \\ge m+r+1 \uff0c\u7801\u8ddd\u4e3a 4 4 \u200b\u200b\uff0c\u5076\u6821\u9a8c\u7f16\u89e3\u7801\u90fd\u76f4\u63a5\u5f02\u6216\u3002 \u82e5\u8981\u5b9e\u73b0\u7ea0\u4e00\u4f4d\u9519\uff0c\u4e14\u540c\u65f6\u53d1\u73b0\u4e24\u4f4d\u9519\uff0c\u53ef\u518d\u52a0\u4e00\u4f4d\u603b\u6821\u9a8c\u4f4d\uff0c\u8bd1\u7801\u540e\u603b\u6821\u9a8c\u4f4d\u4e3a 0 0 \u8bf4\u660e\u6709\u4e24\u4f4d\u9519\u3002 \u5faa\u73af\u5197\u4f59\u6821\u9a8c\u7801\uff1a\u7528\u4e8e\u4e32\u884c\u6570\u636e\u4f20\u9001\u4e2d \u63a5\u53d7\u53cc\u65b9\u5546\u5b9a\u4e00\u4e2a\u751f\u6210\u591a\u9879\u5f0f G(x) G(x) \u200b\uff0c\u5728\u5e27\u7684\u5c3e\u90e8\u9644\u52a0\u4e00\u4e2a\u6821\u9a8c\u548c,\u4f7f\u5f97\u9644\u52a0\u4e4b\u540e\u7684\u5e27\u6240\u5bf9\u5e94\u7684\u591a\u9879\u5f0f\u80fd\u591f\u88ab G(x) G(x) \u9664\u5c3d\u3002\u5f53\u63a5\u6536\u65b9\u6536\u5230\u4e86\u5e26\u6821\u9a8c\u548c\u7684\u5e27\u4e4b\u540e,\u5b83\u8bd5\u7740\u7528 G(x) G(x) \u200b\u53bb\u9664\u5b83\u3002\u5982\u679c\u6709\u4f59\u6570\u7684\u8bdd,\u5219\u8868\u660e\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u6709\u9519\u8bef\u3002 \u5982 G(x)=x^4+x+1 G(x)=x^4+x+1 \u200b\uff0c\u5e27\u4e3a 1101011111 1101011111 \u200b\u200b","title":"\u7ea0\u68c0\u9519\u7801"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_7","text":"","title":"\u7b97\u672f\u8fd0\u7b97\u53ca\u7535\u8def\u5b9e\u73b0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#alu","text":"","title":"ALU"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_8","text":"","title":"\u57fa\u4e8e\u4e00\u4f4d\u52a0\u6cd5\u5668\u5b9e\u73b0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_9","text":"P_i=a_i+b_i P_i=a_i+b_i \uff0c G_i=a_ib_i G_i=a_ib_i \u200b\uff0c P^* P^* \u548c G^* G^* \u7528\u4e8e\u7ea7\u8054\u66f4\u9ad8\u4f4d\u7684\u8fdb\u4f4d\u5668\u3002","title":"\u57fa\u4e8e\u8d85\u524d\u8fdb\u4f4d\u5668"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_10","text":"","title":"\u4e58\u6cd5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_11","text":"","title":"\u539f\u7801"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_12","text":"dsapp\uff1a\u8865\u7801\u5728\u4e0d\u6ea2\u51fa\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u7528\u76f4\u63a5\u4f7f\u7528\u539f\u7801\u7684\u4e58\u6cd5\u6765\u4ee3\u66ff\u3002 \u5e03\u65af\u7b97\u6cd5\uff1a \u4ee4 [x]_{\\text{\u8865}}=x_{n-1}\\cdots x_0 [x]_{\\text{\u8865}}=x_{n-1}\\cdots x_0 \uff0c [y]_{\\text{\u8865}} [y]_{\\text{\u8865}} \u540c\u7406\uff0c\u5219\uff1a $$ [x\\cdot y] {\\text{\u8865}}=[x] {\\text{\u8865}}\\cdot\\sum_{i=0}^{n-1}(y_{i-1}-y_i) $$ \u5176\u4e2d y_{-1}=0 y_{-1}=0 \uff0c\u5373\u521d\u59cb\u5316\u9644\u52a0\u4f4d\u3002","title":"\u8865\u7801"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_13","text":"","title":"\u9664\u6cd5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_14","text":"[x/y]_{\\text{\u539f}}=(x\\oplus y)(|x|/|y|) [x/y]_{\\text{\u539f}}=(x\\oplus y)(|x|/|y|) \u6062\u590d\u4f59\u6570\u6cd5\uff1a\u88ab\u9664\u6570-\u9664\u6570,\u82e5\u7ed3\u679c>=0,\u5219\u4e0a\u55461,\u79fb\u4f4d;\u82e5\u7ed3\u679c<0,\u5219\u55460,\u6062\u590d\u4f59\u6570\u540e,\u518d\u79fb\u4f4d; \u52a0\u51cf\u4ea4\u66ff\u9664\u6cd5 x=-0.1101 x=-0.1101 \uff0c y=0.1011 y=0.1011","title":"\u539f\u7801"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_15","text":"","title":"\u6d6e\u70b9\u6570"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#ieee","text":"V = (-1)^s \\times M \\times 2^E V = (-1)^s \\times M \\times 2^E // s-exp-frac //Single precision k = 8, n = 23, Bias = 127 //Double precision k = 11, n = 52, Bias = 1023 \u7b49\u4e8e 1 1 \u6307\u5168 1 1 \uff0c\u7b49\u4e8e 0 0 \u6307\u5168 0 0 \u3002 Normalized Values $$ e \\neq 0\\neq 2^k - 1\\ M = 1 + f, E = e - Bias $$ Denormalized Values $$ e = 0\\ M = f, E = 1 - Bias $$ Special Values NaN: e = 1, f \\neq 0\\\\ \\infty: e =1, f = 1 NaN: e = 1, f \\neq 0\\\\ \\infty: e =1, f = 1 \u6d6e\u70b9\u52a0\u3001\u51cf\u6cd5\u4e0d\u6ee1\u8db3\u7ed3\u5408\u5f8b \u6d6e\u70b9\u6570\u52a0\u6cd5\u3001\u51cf\u6cd5\u4e0d\u53ef\u7ed3\u5408 \u6d6e\u70b9\u6570\u4e5f\u4e0d\u80fd\u8fdb\u884c\u76f8\u7b49\u6bd4\u8f83","title":"IEEE"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/","text":"MIPS CPU \u6307\u4ee4 \u7c7b\u578b \u4ee3\u8868\u6307\u4ee4 \u4f5c\u7528 R add $rd, $rs, $rt $rd = $rs + $rt I addi $rt, $rs, imm $rt = $rs + imm I beq if ($rt==$rs) PC+=4+(imm<<2) I lw/sw $rt, imm($rs) J j addr PC=PC&0xf0000000|(addr<<2) \u5355\u5468\u671f \u6307\u4ee4\u5468\u671f\u957f\uff0c\u6240\u6709\u6307\u4ee4\u5fc5\u987b\u4f7f\u7528\u6700\u957f\u5468\u671f(lw) \u5404\u90e8\u4ef6\u5229\u7528\u7387\u4f4e \u63a7\u5236\u5668 \u6570\u636e\u901a\u8def \u5668\u4ef6 \u7aef\u53e3 \u53ef\u80fd\u503c Registers Write reg rt(I), rd(R) Write data $rs+$rt (R), mem data(lw) ALU $rt (R), imm(I) Data memory Address imm+$rs (I) Write data $rt (sw) \u591a\u5468\u671f \u6309\u6307\u4ee4\u7684\u6267\u884c\u5212\u5206\u591a\u4e2a\u5468\u671f\uff0c\u4e0d\u540c\u6307\u4ee4\u5468\u671f\u6570\u4e0d\u540c \u6307\u4ee4\u4e32\u884c\u6267\u884c \u5229\u7528\u7387\u4f9d\u7136\u504f\u4f4e \u6570\u636e\u901a\u8def \u6d41\u6c34\u7ebf\u6280\u672f \u5728\u6d41\u6c34\u7ebf\u7684\u5404\u4e2a\u6d41\u6c34\u6bb5\u4e4b\u95f4\u52a0\u5165\u4e86\u88ab\u79f0\u4e3a\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668(\u6d41\u6c34\u7ebf\u9501\u5b58\u5668)\u7684\u5bc4\u5b58\u5668\u5806\u3002 PC\u503c\u591a\u8def\u9009\u62e9\u5668\u88ab\u79fb\u5230IF\u6bb5\uff0c\u4fdd\u8bc1\u5bf9PC\u503c\u7684\u5199\u64cd\u4f5c\u53ea\u51fa\u73b0\u5728\u4e00\u4e2a\u6d41\u6c34\u6bb5\u5185\u3002 \u6bcf\u6761\u6307\u4ee4\u90fd\u53ea\u5728\u4e00\u4e2a\u6d41\u6c34\u6bb5\u4e0a\u662f\u6d3b\u52a8\u3002 \u7ed3\u6784\u51b2\u7a81 \u56e0\u8d44\u6e90\u51b2\u7a81\u800c\u65e0\u6cd5\u4f7f\u7528\u67d0\u79cd\u6307\u4ee4\u7ec4\u5408 \u6682\u505c\u6d41\u6c34\u7ebf\u6267\u884c,\u63d2\u5165\u7b49\u5f85\u5468\u671f \u589e\u52a0\u8d44\u6e90,\u89e3\u51b3\u8d44\u6e90\u51b2\u7a81 \u6570\u636e\u51b2\u7a81 \u5199\u540e\u8bfb\u51b2\u7a81 \u5199\u540e\u5199\u51b2\u7a81 \u8bfb\u540e\u5199\u51b2\u7a81 MIPS\u6307\u4ee4\u6d41\u6c34\u65e0\u540e\u4e24\u79cd\u51b2\u7a81\uff0c\u5728ID\u6bb5\u5b8c\u6210\u6240\u6709\u8bfb\u64cd\u4f5c\uff0cWB\u6bb5\u6240\u6709\u5199\u64cd\u4f5c\u3002 CC2, CC3\u53d1\u751f\u5199\u540e\u8bfb\u51b2\u7a81\u3002 \u65c1\u8def\u6280\u672f \u68c0\u6d4b Rd\u53ef\u80fd\u662f\u539f\u6307\u4ee4\u7684rt\u6216rd\u503c\u3002 // R\u578b\u6307\u4ee4 1a. EX/MEM.RegisterRd = ID/EX.RegisterRs 1b. EX/MEM.RegisterRd = ID/EX.RegisterRt // R\u578b\u6307\u4ee4\uff0c\u6216lw\u9694\u4e00\u5468\u671f\u540eR\u578b\u6307\u4ee4 2a. MEM/WB.RegisterRd = ID/EX.RegisterRs 2b. MEM/WB.RegisterRd = ID/EX.RegisterRt \u65c1\u8def\u5355\u5143 EX hazard: if (EX/MEM.RegWrite and (EX/MEM.RegisterRd \u2260 0) and (EX/MEM.RegisterRd = ID/EX.RegisterRs)) ForwardA = 10 if (EX/MEM.RegWrite and (EX/MEM.RegisterRd \u2260 0) and (EX/MEM.RegisterRd = ID/EX.RegisterRt)) ForwardB = 10 MEM hazard: if (MEM/WB.RegWrite and (MEM/WB.RegisterRd \u2260 0) and not(EX/MEM.RegWrite and (EX/MEM.RegisterRd \u2260 0) and (EX/MEM.RegisterRd \u2260 ID/EX.RegisterRs)) and (MEM/WB.RegisterRd = ID/EX.RegisterRs)) ForwardA = 01 if (MEM/WB.RegWrite and (MEM/WB.RegisterRd \u2260 0) and not(EX/MEM.RegWrite and (EX/MEM.RegisterRd \u2260 0) and (EX/MEM.RegisterRd \u2260 ID/EX.RegisterRt)) and (MEM/WB.RegisterRd = ID/EX.RegisterRt)) ForwardB = 01 \u6682\u505c if (ID/EX.MemRead and ((ID/EX.RegisterRt = IF/ID.RegisterRs) or (ID/EX.RegisterRt = IF/ID.RegisterRt))) stall the pipeline \u6682\u505c\uff1a \u5f53\u524d\u6307\u4ee4\u63a7\u5236\u4fe1\u53f7\u4e3a\uff10 PC\uff0cIF/ID\u503c\u4e0d\u53d8 \u9759\u6001\u8c03\u5ea6\u4e0e\u52a8\u6001\u8c03\u5ea6 \u52a8\u6001\u8c03\u5ea6\u5e76\u4e0d\u80fd\u771f\u6b63\u6d88\u9664\u6570\u636e\u51b2\u7a81\uff0c\u4f46\u5b83\u80fd\u5728\u51fa\u73b0\u6570\u636e\u51b2\u7a81\u65f6\u5c3d\u91cf\u907f\u514d\u51fa\u73b0\u5904\u7406\u5668\u6682\u505c\u3002\u800c\u9759\u6001\u8c03\u5ea6\u65b9\u6cd5 \u5219\u662f\u5c3d\u91cf\u901a\u8fc7\u5206\u79bb\u6709\u51b2\u7a81\u95ee\u9898\u7684\u6307\u4ee4\u4f7f\u5b83\u4eec\u4e0d\u4f1a\u5bfc\u81f4\u51b2\u7a81\uff0c\u4ece\u800c\u51cf\u5c11\u6682\u505c\u7684\u5f71\u54cd\u3002 \u6570\u636e\u901a\u8def \u63a7\u5236\u51b2\u7a81 \u6682\u505c\u6d41\u6c34\u7ebf \u5c3d\u65e9\u5224\u65ad\u5206\u652f\u8f6c\u79fb\u662f\u5426\u6210\u529f\uff0c\u5c3d\u65e9\u8ba1\u7b97\u6210\u529f\u8f6c\u79fb\u7684PC\u503c \u6570\u636e\u901a\u8def \u5728ID\u6bb5\u589e\u52a0\u6bd4\u8f83\u5668\uff0c\u5b8c\u6210\u6e90\u64cd\u4f5c\u6570\u7684\u6bd4\u8f83\uff0c\u8c03\u6574\u52a0\u6cd5\u5668\u5230ID\u6bb5\uff0c\u5b8c\u6210\u8f6c\u79fb\u5730\u5740\u7684\u8ba1\u7b97\u3002 \u82e5\u76f8\u7b49\u5219\u8f6c\u79fb PCsrc\u9009\u62e9\u8f6c\u79fb\u76ee\u6807\u5730\u5740(PC=\u76ee\u7684\u5730\u5740) \u6e05\u9664IF/ID\u6bb5\u5bc4\u5b58\u5668\u7684\u503c(IF/ID\u5bc4\u5b58\u5668=NOP) \u5f53\u524d\u6307\u4ee4\u7684\u63a7\u5236\u4fe1\u53f7\u4e3a0(ID/EX\u5bc4\u5b58\u5668=0) \u82e5\u4e0d\u7b49\uff0c\u5219\u987a\u5e8f\u6267\u884c PCsrc\u9009\u62e9\u987a\u5e8f\u6267\u884c(PC=PC+4) \u4fdd\u7559IF/ID\u6bb5\u5bc4\u5b58\u5668\u7684\u503c(IF/ID\u5bc4\u5b58\u5668=BEQ\u7684\u540e\u4e00\u6761\u6307\u4ee4) \u5f53\u524d\u6307\u4ee4\u7684\u63a7\u5236\u4fe1\u53f7\u4e3a0(ID/EX\u5bc4\u5b58\u5668=0) \u7531\u4e8ebeq\u548c\u524d\u4e00\u6761\u6307\u4ee4\u53ef\u80fd\u5b58\u5728\u6570\u636e\u51b2\u7a81\uff0c\u6240\u4ee5\u6570\u636e\u65c1\u8def\u8fd8\u9700\u8981\u63d0\u524d\u3002 \u5206\u652f\u9884\u6d4b \u9884\u6d4b\u6210\u529f\uff0c\u9884\u6d4b\u4e0d\u6210\u529f \u4e0a\u56fe\u5b9e\u9645\u4e0a\u662f\u9884\u6d4b\u4e0d\u6210\u529f\u7684\u4e00\u79cd\u5b9e\u73b0\u3002 \u52a8\u6001\u9884\u6d4b \u786c\u4ef6\u6839\u636e\u4e0a\u6b21\u5206\u652f\u7684\u7ed3\u679c\u8fdb\u884c\u672c\u6b21\u9884\u6d4b \u53ef\u589e\u52a0\u81f3\uff12\u4f4d\u9884\u6d4b\u4f4d\u3002 \u7f16\u8bd1\u5668\u5904\u7406 \u5ef6\u8fdf\u69fd \u5f02\u5e38 \u589e\u52a0\u5f02\u5e38\u539f\u56e0\u5bc4\u5b58\u5668\uff0c\u4fdd\u5b58\u5f02\u5e38\u7684\u539f\u56e0 \u53d1\u73b0\u5f02\u5e38 \u5355\u5468\u671f\uff0c\u591a\u5468\u671f \u5728\u6bcf\u6761\u6307\u4ee4\u7ed3\u675f\u65f6\uff0c\u589e\u52a0\u4e00\u4e2a\u68c0\u67e5\u5f02\u5e38\uff08\u4e2d\u65ad\uff09\u662f\u5426\u53d1\u751f\u7684\u6b65\u9aa4 \u6d41\u6c34 \u5904\u7406\u8981\u6c42 \u6307\u4ee4\u6d41\u6c34\u7ebf\u4e2d\u67095\u6761\u6307\u4ee4\u6b63\u5728\u6267\u884c \u5224\u65ad\u53d1\u751f\u5f02\u5e38\u7684\u4f4d\u7f6e \u4fdd\u7559\u53d1\u751f\u5f02\u5e38\u7684\u73b0\u573a \u6267\u884c\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f \u786c\u4ef6 EPC Cause MIPS CP0 \u5982\u4e0b\u56fe\u4e3a\u5728EX\u9636\u6bb5\u589e\u52a0\u4e00\u4e2a\u5f02\u5e38\u68c0\u6d4b\u7684\u6570\u636e\u901a\u8def\uff0c\u82e5\u53d1\u751f\u5f02\u5e38\uff0c\u8fd8\u9700\u5c06IF/ID\u5199\u5165nop\uff0cID/EX\uff0cEX/MEM\u7684\u63a7\u5236\u4fe1\u53f7\u51990\u3002","title":"MIPS CPU"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#mips-cpu","text":"","title":"MIPS CPU"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_1","text":"\u7c7b\u578b \u4ee3\u8868\u6307\u4ee4 \u4f5c\u7528 R add $rd, $rs, $rt $rd = $rs + $rt I addi $rt, $rs, imm $rt = $rs + imm I beq if ($rt==$rs) PC+=4+(imm<<2) I lw/sw $rt, imm($rs) J j addr PC=PC&0xf0000000|(addr<<2)","title":"\u6307\u4ee4"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_2","text":"\u6307\u4ee4\u5468\u671f\u957f\uff0c\u6240\u6709\u6307\u4ee4\u5fc5\u987b\u4f7f\u7528\u6700\u957f\u5468\u671f(lw) \u5404\u90e8\u4ef6\u5229\u7528\u7387\u4f4e","title":"\u5355\u5468\u671f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_3","text":"","title":"\u63a7\u5236\u5668"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_4","text":"\u5668\u4ef6 \u7aef\u53e3 \u53ef\u80fd\u503c Registers Write reg rt(I), rd(R) Write data $rs+$rt (R), mem data(lw) ALU $rt (R), imm(I) Data memory Address imm+$rs (I) Write data $rt (sw)","title":"\u6570\u636e\u901a\u8def"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_5","text":"\u6309\u6307\u4ee4\u7684\u6267\u884c\u5212\u5206\u591a\u4e2a\u5468\u671f\uff0c\u4e0d\u540c\u6307\u4ee4\u5468\u671f\u6570\u4e0d\u540c \u6307\u4ee4\u4e32\u884c\u6267\u884c \u5229\u7528\u7387\u4f9d\u7136\u504f\u4f4e","title":"\u591a\u5468\u671f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_6","text":"","title":"\u6570\u636e\u901a\u8def"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_7","text":"\u5728\u6d41\u6c34\u7ebf\u7684\u5404\u4e2a\u6d41\u6c34\u6bb5\u4e4b\u95f4\u52a0\u5165\u4e86\u88ab\u79f0\u4e3a\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668(\u6d41\u6c34\u7ebf\u9501\u5b58\u5668)\u7684\u5bc4\u5b58\u5668\u5806\u3002 PC\u503c\u591a\u8def\u9009\u62e9\u5668\u88ab\u79fb\u5230IF\u6bb5\uff0c\u4fdd\u8bc1\u5bf9PC\u503c\u7684\u5199\u64cd\u4f5c\u53ea\u51fa\u73b0\u5728\u4e00\u4e2a\u6d41\u6c34\u6bb5\u5185\u3002 \u6bcf\u6761\u6307\u4ee4\u90fd\u53ea\u5728\u4e00\u4e2a\u6d41\u6c34\u6bb5\u4e0a\u662f\u6d3b\u52a8\u3002","title":"\u6d41\u6c34\u7ebf\u6280\u672f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_8","text":"\u56e0\u8d44\u6e90\u51b2\u7a81\u800c\u65e0\u6cd5\u4f7f\u7528\u67d0\u79cd\u6307\u4ee4\u7ec4\u5408 \u6682\u505c\u6d41\u6c34\u7ebf\u6267\u884c,\u63d2\u5165\u7b49\u5f85\u5468\u671f \u589e\u52a0\u8d44\u6e90,\u89e3\u51b3\u8d44\u6e90\u51b2\u7a81","title":"\u7ed3\u6784\u51b2\u7a81"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_9","text":"\u5199\u540e\u8bfb\u51b2\u7a81 \u5199\u540e\u5199\u51b2\u7a81 \u8bfb\u540e\u5199\u51b2\u7a81 MIPS\u6307\u4ee4\u6d41\u6c34\u65e0\u540e\u4e24\u79cd\u51b2\u7a81\uff0c\u5728ID\u6bb5\u5b8c\u6210\u6240\u6709\u8bfb\u64cd\u4f5c\uff0cWB\u6bb5\u6240\u6709\u5199\u64cd\u4f5c\u3002 CC2, CC3\u53d1\u751f\u5199\u540e\u8bfb\u51b2\u7a81\u3002","title":"\u6570\u636e\u51b2\u7a81"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_10","text":"\u68c0\u6d4b Rd\u53ef\u80fd\u662f\u539f\u6307\u4ee4\u7684rt\u6216rd\u503c\u3002 // R\u578b\u6307\u4ee4 1a. EX/MEM.RegisterRd = ID/EX.RegisterRs 1b. EX/MEM.RegisterRd = ID/EX.RegisterRt // R\u578b\u6307\u4ee4\uff0c\u6216lw\u9694\u4e00\u5468\u671f\u540eR\u578b\u6307\u4ee4 2a. MEM/WB.RegisterRd = ID/EX.RegisterRs 2b. MEM/WB.RegisterRd = ID/EX.RegisterRt \u65c1\u8def\u5355\u5143 EX hazard: if (EX/MEM.RegWrite and (EX/MEM.RegisterRd \u2260 0) and (EX/MEM.RegisterRd = ID/EX.RegisterRs)) ForwardA = 10 if (EX/MEM.RegWrite and (EX/MEM.RegisterRd \u2260 0) and (EX/MEM.RegisterRd = ID/EX.RegisterRt)) ForwardB = 10 MEM hazard: if (MEM/WB.RegWrite and (MEM/WB.RegisterRd \u2260 0) and not(EX/MEM.RegWrite and (EX/MEM.RegisterRd \u2260 0) and (EX/MEM.RegisterRd \u2260 ID/EX.RegisterRs)) and (MEM/WB.RegisterRd = ID/EX.RegisterRs)) ForwardA = 01 if (MEM/WB.RegWrite and (MEM/WB.RegisterRd \u2260 0) and not(EX/MEM.RegWrite and (EX/MEM.RegisterRd \u2260 0) and (EX/MEM.RegisterRd \u2260 ID/EX.RegisterRt)) and (MEM/WB.RegisterRd = ID/EX.RegisterRt)) ForwardB = 01","title":"\u65c1\u8def\u6280\u672f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_11","text":"if (ID/EX.MemRead and ((ID/EX.RegisterRt = IF/ID.RegisterRs) or (ID/EX.RegisterRt = IF/ID.RegisterRt))) stall the pipeline \u6682\u505c\uff1a \u5f53\u524d\u6307\u4ee4\u63a7\u5236\u4fe1\u53f7\u4e3a\uff10 PC\uff0cIF/ID\u503c\u4e0d\u53d8","title":"\u6682\u505c"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_12","text":"\u52a8\u6001\u8c03\u5ea6\u5e76\u4e0d\u80fd\u771f\u6b63\u6d88\u9664\u6570\u636e\u51b2\u7a81\uff0c\u4f46\u5b83\u80fd\u5728\u51fa\u73b0\u6570\u636e\u51b2\u7a81\u65f6\u5c3d\u91cf\u907f\u514d\u51fa\u73b0\u5904\u7406\u5668\u6682\u505c\u3002\u800c\u9759\u6001\u8c03\u5ea6\u65b9\u6cd5 \u5219\u662f\u5c3d\u91cf\u901a\u8fc7\u5206\u79bb\u6709\u51b2\u7a81\u95ee\u9898\u7684\u6307\u4ee4\u4f7f\u5b83\u4eec\u4e0d\u4f1a\u5bfc\u81f4\u51b2\u7a81\uff0c\u4ece\u800c\u51cf\u5c11\u6682\u505c\u7684\u5f71\u54cd\u3002","title":"\u9759\u6001\u8c03\u5ea6\u4e0e\u52a8\u6001\u8c03\u5ea6"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_13","text":"","title":"\u6570\u636e\u901a\u8def"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_14","text":"","title":"\u63a7\u5236\u51b2\u7a81"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_15","text":"\u5c3d\u65e9\u5224\u65ad\u5206\u652f\u8f6c\u79fb\u662f\u5426\u6210\u529f\uff0c\u5c3d\u65e9\u8ba1\u7b97\u6210\u529f\u8f6c\u79fb\u7684PC\u503c","title":"\u6682\u505c\u6d41\u6c34\u7ebf"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_16","text":"\u5728ID\u6bb5\u589e\u52a0\u6bd4\u8f83\u5668\uff0c\u5b8c\u6210\u6e90\u64cd\u4f5c\u6570\u7684\u6bd4\u8f83\uff0c\u8c03\u6574\u52a0\u6cd5\u5668\u5230ID\u6bb5\uff0c\u5b8c\u6210\u8f6c\u79fb\u5730\u5740\u7684\u8ba1\u7b97\u3002 \u82e5\u76f8\u7b49\u5219\u8f6c\u79fb PCsrc\u9009\u62e9\u8f6c\u79fb\u76ee\u6807\u5730\u5740(PC=\u76ee\u7684\u5730\u5740) \u6e05\u9664IF/ID\u6bb5\u5bc4\u5b58\u5668\u7684\u503c(IF/ID\u5bc4\u5b58\u5668=NOP) \u5f53\u524d\u6307\u4ee4\u7684\u63a7\u5236\u4fe1\u53f7\u4e3a0(ID/EX\u5bc4\u5b58\u5668=0) \u82e5\u4e0d\u7b49\uff0c\u5219\u987a\u5e8f\u6267\u884c PCsrc\u9009\u62e9\u987a\u5e8f\u6267\u884c(PC=PC+4) \u4fdd\u7559IF/ID\u6bb5\u5bc4\u5b58\u5668\u7684\u503c(IF/ID\u5bc4\u5b58\u5668=BEQ\u7684\u540e\u4e00\u6761\u6307\u4ee4) \u5f53\u524d\u6307\u4ee4\u7684\u63a7\u5236\u4fe1\u53f7\u4e3a0(ID/EX\u5bc4\u5b58\u5668=0) \u7531\u4e8ebeq\u548c\u524d\u4e00\u6761\u6307\u4ee4\u53ef\u80fd\u5b58\u5728\u6570\u636e\u51b2\u7a81\uff0c\u6240\u4ee5\u6570\u636e\u65c1\u8def\u8fd8\u9700\u8981\u63d0\u524d\u3002","title":"\u6570\u636e\u901a\u8def"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_17","text":"","title":"\u5206\u652f\u9884\u6d4b"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_18","text":"\u4e0a\u56fe\u5b9e\u9645\u4e0a\u662f\u9884\u6d4b\u4e0d\u6210\u529f\u7684\u4e00\u79cd\u5b9e\u73b0\u3002","title":"\u9884\u6d4b\u6210\u529f\uff0c\u9884\u6d4b\u4e0d\u6210\u529f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_19","text":"\u786c\u4ef6\u6839\u636e\u4e0a\u6b21\u5206\u652f\u7684\u7ed3\u679c\u8fdb\u884c\u672c\u6b21\u9884\u6d4b \u53ef\u589e\u52a0\u81f3\uff12\u4f4d\u9884\u6d4b\u4f4d\u3002","title":"\u52a8\u6001\u9884\u6d4b"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_20","text":"\u5ef6\u8fdf\u69fd","title":"\u7f16\u8bd1\u5668\u5904\u7406"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_21","text":"\u589e\u52a0\u5f02\u5e38\u539f\u56e0\u5bc4\u5b58\u5668\uff0c\u4fdd\u5b58\u5f02\u5e38\u7684\u539f\u56e0 \u53d1\u73b0\u5f02\u5e38","title":"\u5f02\u5e38"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_22","text":"\u5728\u6bcf\u6761\u6307\u4ee4\u7ed3\u675f\u65f6\uff0c\u589e\u52a0\u4e00\u4e2a\u68c0\u67e5\u5f02\u5e38\uff08\u4e2d\u65ad\uff09\u662f\u5426\u53d1\u751f\u7684\u6b65\u9aa4","title":"\u5355\u5468\u671f\uff0c\u591a\u5468\u671f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_23","text":"\u5904\u7406\u8981\u6c42 \u6307\u4ee4\u6d41\u6c34\u7ebf\u4e2d\u67095\u6761\u6307\u4ee4\u6b63\u5728\u6267\u884c \u5224\u65ad\u53d1\u751f\u5f02\u5e38\u7684\u4f4d\u7f6e \u4fdd\u7559\u53d1\u751f\u5f02\u5e38\u7684\u73b0\u573a \u6267\u884c\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f \u786c\u4ef6 EPC Cause MIPS CP0 \u5982\u4e0b\u56fe\u4e3a\u5728EX\u9636\u6bb5\u589e\u52a0\u4e00\u4e2a\u5f02\u5e38\u68c0\u6d4b\u7684\u6570\u636e\u901a\u8def\uff0c\u82e5\u53d1\u751f\u5f02\u5e38\uff0c\u8fd8\u9700\u5c06IF/ID\u5199\u5165nop\uff0cID/EX\uff0cEX/MEM\u7684\u63a7\u5236\u4fe1\u53f7\u51990\u3002","title":"\u6d41\u6c34"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/","text":"\u5b58\u50a8\u5668\u4e0eIO \u5c42\u6b21\u5b58\u50a8\u5668\u7cfb\u7edf \u7a0b\u5e8f\u8fd0\u884c\u7684\u5c40\u90e8\u6027\u539f\u7406 \u65f6\u95f4\u5c40\u90e8\u6027:\u6700\u8fd1\u88ab\u8bbf\u95ee\u8fc7\u7684\u7a0b\u5e8f\u548c\u6570\u636e\u5f88\u53ef\u80fd\u518d\u6b21\u88ab\u8bbf\u95ee \u7a7a\u95f4\u5c40\u90e8\u6027:CPU \u5f88\u53ef\u80fd\u8bbf\u95ee\u6700\u8fd1\u88ab\u8bbf\u95ee\u8fc7\u7684\u5730\u5740\u5355\u5143\u9644\u8fd1\u7684\u5730\u5740\u5355\u5143\u3002 \u5c42\u6b21\u4e4b\u95f4\u5e94\u6ee1\u8db3\u7684\u539f\u5219: \u4e00\u81f4\u6027\u539f\u5219:\u5904\u5728\u4e0d\u540c\u5c42\u6b21\u5b58\u50a8\u5668\u4e2d\u7684\u540c\u4e00\u4e2a\u4fe1\u606f\u5e94\u4fdd\u6301\u76f8\u540c\u7684\u503c\u3002 \u5305\u542b\u6027\u539f\u5219:\u5904\u5728\u5185\u5c42\u7684\u4fe1\u606f\u4e00\u5b9a\u88ab\u5305\u542b\u5728\u5176\u5916\u5c42\u7684\u5b58\u50a8\u5668\u4e2d,\u53cd\u4e4b\u5219\u4e0d\u6210\u7acb\u3002 \u603b\u7ebf\uff1a \u5730\u5740\u603b\u7ebf\u7528\u4e8e\u9009\u62e9\u4e3b\u5b58\u50a8\u5668\u7684\u4e00\u4e2a\u5b58\u50a8\u5355\u5143(\u5b57\u6216\u5b57\u8282),\u5176\u4f4d\u6570\u51b3\u5b9a\u4e86\u80fd\u591f\u8bbf\u95ee\u7684\u5b58\u50a8\u5355\u5143\u7684\u6700\u5927\u6570\u76ee,\u79f0\u4e3a\u6700\u5927\u53ef\u5bfb\u5740\u7a7a\u95f4\u3002 \u6570\u636e\u603b\u7ebf\u7528\u4e8e\u5728\u8ba1\u7b97\u673a\u5404\u529f\u80fd\u90e8\u4ef6\u4e4b\u95f4\u4f20\u9001\u6570\u636e,\u5176\u4f4d\u6570(\u603b\u7ebf\u7684\u5bbd\u5ea6)\u4e0e\u603b\u7ebf\u65f6\u949f\u9891\u7387\u7684\u4e58\u79ef,\u4e0e\u8be5\u603b\u7ebf\u6240\u652f\u6301\u7684\u6700\u9ad8\u6570\u636e\u541e\u5410(\u8f93\u5165/\u8f93\u51fa)\u80fd\u529b\u6210\u6b63\u6bd4\u3002 \u63a7\u5236\u603b\u7ebf\u7528\u4e8e\u6307\u660e\u603b\u7ebf\u7684\u5de5\u4f5c\u5468\u671f\u7c7b\u578b\u548c\u672c\u6b21\u5165/\u51fa\u5b8c\u6210\u7684\u65f6\u523b\u3002 \u52a8\u6001\u5b58\u50a8\u5668 DRAM\uff0c\u9759\u6001\u5b58\u50a8\u5668 \u52a8\u6001\u5b58\u50a8\u5668\uff1a\u7528\u91d1\u5c5e\u6c27\u5316\u7269\u534a\u5bfc\u4f53(MOS)\u7684\u5355\u4e2a MOS \u7ba1\u5b58\u50a8\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d(bit)\u4fe1\u606f\u3002\u4fe1\u606f\u88ab\u5b58\u50a8\u5728 MOS \u7ba1 T \u7684\u6e90\u6781\u7684\u5bc4\u751f\u7535\u5bb9 C S \u4e2d,\u6709\u7535\u8377\u8868\u793a 1,\u65e0\u7535\u8377\u8868\u793a 0\u3002 \u5b58\u50a8\u4fe1\u606f \u9001\u884c\u5217\u5730\u5740 \u96c6\u6210\u5ea6 \u53d1\u70ed\u91cf SRAM \u89e6\u53d1\u5668 \u540c\u65f6 \u4f4e \u5927 DRAM \u7535\u5bb9 \u5206\u4e24\u6b21 \u9ad8 \u5c0f \u9ad8\u901f\u7f13\u51b2\u5b58\u50a8\u5668 Cache \u4e3b\u5b58\u548c CPU \u4e4b\u95f4\u7684\u5b58\u50a8\u5668,\u7528\u9ad8\u901f\u7684\u9759\u6001\u5b58\u50a8\u5668\u5b9e\u73b0,\u7f13\u5b58\u4e86CPU \u9891\u7e41\u8bbf\u95ee\u7684\u4fe1\u606f\u3002\u9ad8\u901f,\u900f\u660e\u3002 Cache \u63a5\u5165\u7cfb\u7edf\u7684\u4f53\u7cfb\u7ed3\u6784\uff1a\u4fa7\u63a5\u6cd5\uff0c\u9694\u65ad\u6cd5 \u8981\u89e3\u51b3\u7684\u95ee\u9898 \u5730\u5740\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb:\u5982\u4f55\u6839\u636e\u4e3b\u5b58\u5730\u5740\u5f97\u5230 Cache \u4e2d\u7684\u6570\u636e? \u6570\u636e\u4e4b\u95f4\u4e00\u81f4\u6027:Cache \u4e2d\u7684\u5185\u5bb9\u662f\u5426\u5df2\u7ecf\u662f\u4e3b\u5b58\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9? \u6570\u636e\u4ea4\u6362\u7684\u7c92\u5ea6:Cache \u4e2d\u7684\u5185\u5bb9\u4e0e\u4e3b\u5b58\u5185\u5bb9\u4ee5\u591a\u5927\u7684\u7c92\u5ea6\u4ea4\u6362? Cache \u5185\u5bb9\u88c5\u5165\u548c\u66ff\u6362\u7b56\u7565:\u5982\u4f55\u63d0\u9ad8 Cache \u7684\u547d\u4e2d\u7387? \\text{\u5e73\u5747\u8bbf\u95ee\u65f6\u95f4}=HR*\\text{\u547d\u4e2d\u65f6\u95f4}+(1-HR)*\\text{\u5931\u6548\u635f\u5931} \\text{\u5e73\u5747\u8bbf\u95ee\u65f6\u95f4}=HR*\\text{\u547d\u4e2d\u65f6\u95f4}+(1-HR)*\\text{\u5931\u6548\u635f\u5931} HR HR \u4e3a\u547d\u4e2d\u7387\u3002 \u5730\u5740\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb \u5168\u76f8\u8054\u65b9\u5f0f \u76f4\u63a5\u6620\u5c04 \u591a\u8def\u7ec4\u76f8\u8054 \u4e00\u81f4\u6027\u4fdd\u8bc1 Cache\uff08\u4e0d\u547d\u4e2d\uff09\u5199 \u63d0\u9ad8 Cache \u7684\u547d\u4e2d\u7387 \u5fc5\u7136\u7f3a\u5931 Compulsory Miss(\u5f00\u673a\u6216\u8005\u662f\u8fdb\u7a0b\u5207\u6362\u3001\u9996\u6b21\u8bbf\u95ee \u6570\u636e\u5757) \u5bb9\u91cf\u7f3a\u5931 Capacity Miss(\u6d3b\u52a8\u6570\u636e\u96c6\u8d85\u51fa\u4e86 Cache \u7684\u5927\u5c0f) \u51b2\u7a81\u7f3a\u5931 Conflict Miss (\u591a\u4e2a\u5185\u5b58\u5757\u6620\u5c04\u5230\u540c\u4e00 Cache \u5757\u3001\u67d0\u4e00 Cache \u7ec4\u5757\u5df2\u6ee1\u4f46\u7a7a\u95f2\u7684 Cache \u5757\u5728\u5176\u4ed6 \u7ec4) \u65e0\u6548\u7f3a\u5931(\u5176\u4ed6\u8fdb\u7a0b\u4fee\u6539\u4e86\u4e3b\u5b58\u6570\u636e) \u66ff\u6362\u7b97\u6cd5:\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u7684(LRU)\u3001\u5148\u8fdb\u5148\u51fa(FIFO)\u3001\u968f\u673a\u66ff\u6362(RAND) \u865a\u62df\u5b58\u50a8\u5668 \u865a\u5b58 Cache \u4e3b\u8981\u76ee\u7684\u662f\u5b9e\u73b0\u5b58\u50a8\u7ba1\u7406,\u5e2e\u52a9\u89e3\u51b3\u5b58\u50a8\u5bb9\u91cf\u7684\u95ee\u9898\u3002 \u4e3b\u8981\u76ee\u7684\u662f\u89e3\u51b3\u5b58\u50a8\u901f\u5ea6\u95ee\u9898,\u4f7f\u5b58\u50a8\u5668\u8bbf\u95ee\u901f\u5ea6\u4e0d\u592a\u5f71\u54cd CPU \u7684\u8fd0\u884c\u901f\u5ea6\u3002 \u5355\u4f4d\u65f6\u95f4\u5185\u6570\u636e\u4ea4\u6362\u6b21\u6570\u5c11,\u6bcf\u6b21\u4ea4\u6362\u6570\u636e\u91cf\u5927 \u5355\u4f4d\u65f6\u95f4\u5185\u6570\u636e\u4ea4\u6362\u7684\u6b21\u6570\u591a,\u6bcf\u6b21\u4ea4\u6362\u6570\u636e\u91cf\u5c0f \u7531\u64cd\u4f5c\u7cfb\u7edf\u7ba1\u7406 \u7531\u786c\u4ef6\u5b9e\u73b0 \u865a\u62df\u5b58\u50a8\u5668\u7ba1\u7406 \u6bb5\u5f0f\u5b58\u50a8\u7ba1\u7406 \u4ee5\u6bb5\u4f5c\u4e3a\u5b58\u50a8\u7ba1\u7406\u7684\u5bf9\u8c61,\u6bb5\u957f\u52a8\u6001\u53ef\u53d8,\u6bb5\u8d77\u70b9\u3001\u7ec8\u70b9\u4e0d\u5b9a\u3002\u6613\u4e8e\u7f16\u8bd1\u3001\u7ba1\u7406\u3001\u4fee\u6539\u3001\u4fdd\u62a4\u548c\u5171\u4eab,\u7a7a\u95f4\u5206\u914d\u56f0\u96be,\u5bb9\u6613\u4ea7\u751f\u788e\u7247\u3002 \u6bb5(Segment)\u7a0b\u5e8f\u6a21\u5757\u5316\u8bbe\u8ba1\u7684\u7ed3\u679c(\u8fc7\u7a0b\u3001\u51fd\u6570\u3001\u6570\u7ec4\u3001...),\u903b\u8f91\u4e0a\u76f8\u5bf9\u72ec\u7acb,\u662f\u5171\u4eab\u548c\u4fdd\u62a4\u7684\u6700\u5c0f\u5355\u5143\u3002 \u5b9e\u73b0:\u8bbe\u7f6e\u6bb5\u8868\u8fdb\u884c\u7ba1\u7406,\u6bb5\u8868\u57fa\u5730\u5740,\u6bb5\u8d77\u59cb\u5730\u5740,\u6bb5\u957f,\u88c5\u5165\u4f4d,\u4fdd\u62a4\u3001\u5171\u4eab\u7b49\u6807\u5fd7\u3002 \u9875\u5f0f\u5b58\u50a8\u7ba1\u7406 \u5c06\u4e3b\u5b58\u548c\u865a\u5b58\u5212\u5206\u4e3a\u56fa\u5b9a\u5927\u5c0f\u7684\u9875,\u4ee5\u9875\u4e3a\u5355\u4f4d\u8fdb\u884c\u7ba1\u7406\u548c\u6570\u636e\u4ea4\u6362\u3002 \u865a\u5730\u5740=\u865a\u9875\u53f7+\u9875\u5185\u5730\u5740;\u5b9e\u5730\u5740=\u5b9e\u9875\u53f7+\u9875\u5185\u5730\u5740\u3002 \u5b9e\u73b0:\u901a\u8fc7\u9875\u8868\u8fdb\u884c\u7ba1\u7406,\u9875\u8868\u57fa\u5730\u5740\u5bc4\u5b58\u5668,\u5b9e\u9875\u53f7,\u63a7\u5236\u4f4d\u3002 \u9875\u5f0f\u865a\u62df\u5b58\u50a8\u5668\u7684\u8bbf\u95ee\u8fc7\u7a0b: \u5f97\u5230\u7a0b\u5e8f\u7ed9\u51fa\u7684\u865a\u5730\u5740; \u7531\u865a\u5730\u5740\u5f97\u5230\u865a\u9875\u53f7; \u8bbf\u95ee\u9875\u8868,\u5f97\u5230\u5bf9\u5e94\u7684\u5b9e\u9875\u53f7; \u82e5\u8be5\u9875\u5df2\u5728\u5185\u5b58\u4e2d,\u5219\u6839\u636e\u5b9e\u9875\u53f7\u5f97\u5230\u5b9e\u5730\u5740,\u8bbf\u95ee\u5185\u5b58; \u5426\u5219,\u542f\u52a8\u8f93\u5165\u8f93\u51fa\u7cfb\u7edf,\u8bfb\u51fa\u5bf9\u5e94\u9875\u88c5\u5165\u4e3b\u5b58,\u518d\u8fdb\u884c\u8bbf\u95ee\u3002 \u8f6c\u6362\u65c1\u8def\u7f13\u51b2(TLB) \u4e3a\u9875\u8868\u8bbe\u7f6e\u7684\u4e13\u7528 Cache,\u9ad8\u6548\u5b9e\u73b0\u865a\u9875\u53f7\u5230\u5b9e\u9875\u53f7\u7684\u8f6c\u6362,\u5bb9\u91cf\u8f83\u5c0f,128~256 \u4e2a\u8868\u9879\u3002 TLB \u7f3a\u5931:\u6d41\u6c34\u7ebf\u505c,\u901a\u77e5\u64cd\u4f5c\u7cfb\u7edf,\u8bfb\u9875\u8868,\u5c06\u8868\u9879\u5199\u5165 TLB,\u8fd4\u56de\u7528\u6237\u7a0b\u5e8f,\u91cd\u65b0\u8bbf\u95ee\u3002 \u9875\u9762\u5927\u5c0f:\u7f29\u5c0f\u9875\u9762\u5927\u5c0f\u53ef\u51cf\u5c11\u5185\u90e8\u788e\u7247,\u4f46\u9700\u66f4\u5927\u7684\u9875\u8868\u3002 \u9875\u9762\u66ff\u6362\u7b97\u6cd5:\u6700\u8fd1\u6700\u5c11\u4f7f\u7528(LRU) Pentium \u7684\u865a\u5b58\u7ba1\u7406 \u7a0b\u5e8f\u5458\u7ed9\u51fa\u7684\u865a\u62df\u5730\u5740,\u683c\u5f0f\u4e3a\u6bb5\u53f7+\u6bb5\u5185\u504f\u79fb(16\u4f4d+32\u4f4d),\u6bcf\u6bb5\u5927\u5c0f\u4e0d\u8d85\u8fc74GB\u3002 \u78c1\u8868\u9762\u5b58\u50a8\u8bbe\u5907 \u5bb9\u91cf\u5927,\u6210\u672c\u4f4e,\u65ad\u7535\u4fdd\u5b58,\u8131\u673a\u4fdd\u5b58,\u4e32\u884c\u8bbf\u95ee,\u6570\u636e\u4ea4\u6362\u9891\u7387\u4f4e,\u6570 \u636e\u4ea4\u6362\u91cf\u5927\u3002\u4e00\u822c\u4e3a\u78c1\u76d8\u3001\u5149\u76d8\u7b49\u3002 \u968f\u673a\u8bbf\u95ee \u968f\u673a\u8bbf\u95ee\u4efb\u4f55\u5355\u5143,\u8bbf\u95ee\u65f6\u95f4\u4e0e\u5b58\u653e\u4f4d\u7f6e\u65e0\u5173,\u6bcf\u4e00\u4f4d\u90fd\u6709\u5404\u81ea\u7684\u8bfb\u5199\u8bbe\u5907\u3002 \u4e32\u884c\u8bbf\u95ee \u987a\u5e8f\u6309\u4f4d\u8fdb\u884c,\u8bbf\u95ee\u65f6\u95f4\u4e0e\u5b58\u50a8\u4f4d\u7684\u7269\u7406\u4f4d\u7f6e\u6709\u5173,\u5171\u7528\u4e00\u4e2a\u8bfb\u5199\u8bbe\u5907\u3002 \u4e3b\u8981\u6307\u6807 \u5b58\u50a8\u5bc6\u5ea6,\u5b58\u50a8\u5bb9\u91cf,\u5bfb\u5740\u65f6\u95f4,\u6570\u636e\u4f20\u8f93\u7387,\u8bef\u7801\u7387,\u4ef7\u683c\u3002 \u78c1\u8bb0\u5f55\u65b9\u5f0f \u4e00\u79cd\u7f16\u7801\u65b9\u6cd5,\u5373\u5982\u4f55\u5c06\u4e00\u4e32\u4e8c\u8fdb\u5236\u4fe1\u606f,\u901a\u8fc7\u8bfb\u5199\u7535\u8def\u53d8\u6362\u6210\u78c1\u5c42\u4ecb\u8d28\u4e2d\u7684\u78c1\u5316\u7ffb\u8f6c\u5e8f\u5217\u3002(\u7f16\u7801\u6548\u7387,\u81ea\u540c\u6b65\u80fd\u529b,\u8bfb\u5199\u53ef\u9760\u6027) \u5f52\u96f6\u5236(RZ),\u4e0d\u5f52\u96f6\u5236(NRZ),\u89c1 1 \u7ffb\u8f6c\u7684\u4e0d\u5f52\u96f6\u5236(NRZ1),\u8c03\u76f8\u5236(PM),\u8c03\u9891\u5236(FM),\u6539\u8fdb\u7684\u8c03\u9891\u5236(MFM) \u78c1\u76d8 \u78c1\u76d8\u8bbf\u95ee\u65f6\u95f4= \u5bfb\u9053\u65f6\u95f4+ \u5e73\u5747\u65cb\u8f6c\u5ef6\u8fdf+ \u4f20\u8f93\u65f6\u95f4+ \u78c1\u76d8\u63a7\u5236\u5668\u5ef6\u8fdf \u4f8b:\u5e73\u5747\u5bfb\u9053\u65f6\u95f4= 12ms,\u65cb\u8f6c\u901f\u5ea6= 5400rpm,\u78c1\u76d8\u63a7\u5236\u5668\u5ef6\u8fdf=2ms,\u4f20\u8f93\u901f\u5ea6=5MB,\u6247\u533a\u5927\u5c0f= 512 bytes,\u9875\u5927\u5c0f 8KB\u3002 \u65cb\u8f6c 1 \u5468: 1/5400 minutes = 11.1ms => 1/2 \u5468:5.6 ms \u8bfb 1 \u4e2a\u6247\u533a:12ms + 5.6ms + .5K/5MB s+ 2ms = 12 + 5.6 + .1ms + 2ms = 19.7ms \u8bfb 1 \u9875\u7684\u65f6\u95f4:12 ms + 5.6ms + 8K/5MB s + 2ms = 12ms + 5.6ms + 1.6ms + 2ms = 21.2 ms \u91c7\u7528\u6d41\u6c34\u65b9\u5f0f\u548c\u5927\u5bb9\u91cf\u4f20\u8f93\u65b9\u5f0f(\u6bcf\u6b21\u8bfb\u53d6\u591a\u4e2a\u6247\u533a)\u514b\u670d\u78c1\u76d8\u63a7\u5236\u5668\u5ef6\u8fdf\u3002 \u989d\u5916\u5f00\u9500\u5728\u603b\u5f00\u9500\u4e2d\u6bd4\u4f8b\u8f83\u5927 => \u4e00\u6b21\u4f20\u8f93\u5927\u91cf\u6570\u636e\u6bd4\u8f83\u6709\u6548\u3002 \u5c06\u9875\u9762\u5b58\u653e\u5728\u76f8\u90bb\u6247\u533a\u4e2d\u53ef\u4ee5\u907f\u514d\u989d\u5916\u7684\u5bfb\u9053\u5f00\u9500\u3002 RAID \u6280\u672f \u53ef\u9760\u6027(reliability):\u8bbe\u5907\u51fa\u73b0\u6545\u969c\u7684\u51e0\u7387\u6765\u8861\u91cf\u3002 \u53ef\u7528\u6027(availability):\u7cfb\u7edf\u80fd\u6b63\u5e38\u8fd0\u884c\u7684\u51e0\u7387\u6765\u8861\u91cf\u3002 \u51fa\u6545\u969c\u540e\u4ecd\u80fd\u8fd0\u884c\u3002 \u76ee\u6807: N \u4e2a\u78c1\u76d8\u7684\u5bb9\u91cf, 1/N \u7684\u8bbf\u95ee\u65f6\u95f4,\u66f4\u9ad8\u7684\u6027\u4ef7\u6bd4,\u7528\u5197\u4f59\u6280\u672f\u63d0\u9ad8\u5b58\u50a8\u4fe1\u606f\u53ef\u7528\u6027\u3002\u63d0\u9ad8\u78c1\u76d8\u7684\u53ef\u7528\u6027\u548c\u6027\u80fd raid0 raid1 raid2 raid3 raid4 raid5 \u8f93\u5165/\u8f93\u51fa\u7cfb\u7edf \u8981\u89e3\u51b3\u7684\u95ee\u9898 \u63a7\u5236\u65b9\u5f0f:CPU \u5982\u4f55\u63a7\u5236\u8f93\u5165/\u8f93\u51fa?(\u8f93\u5165/\u8f93\u51fa\u65b9\u5f0f) \u4f20\u8f93\u65b9\u5f0f:\u4f20\u8f93\u901a\u9053\u3001\u65b9\u5f0f\u3001\u901f\u7387\u7b49(\u603b\u7ebf\u3001\u63a5\u53e3) \u6570\u636e\u8bc6\u522b\u548c\u8f6c\u6362:\u6570/\u6a21\u8f6c\u6362\u3001\u8bed\u97f3\u8bc6\u522b\u7b49,\u8f6c\u4e3a\u5b57\u7b26\u3001\u6570\u636e\u7b49\u8ba1\u7b97\u673a\u80fd\u8bc6\u522b\u7684\u683c\u5f0f(\u8bbe\u5907)\u3002 \u8f93\u5165/\u8f93\u51fa\u65b9\u5f0f \u7a0b\u5e8f\u76f4\u63a5\u63a7\u5236 CPU \u76f4\u63a5\u4f7f\u7528\u8f93\u5165/\u8f93\u51fa\u6307\u4ee4\u6765\u63a7\u5236\u5916\u90e8\u8bbe\u5907\u3002 CPU \u65b9\u67e5\u8be2\u63a5\u53e3\u72b6\u6001(\u5faa\u73af\u7b49\u5f85),\u76f4\u5230\u5916\u8bbe\u5df2\u7ecf\u63a5\u6536\u5230\u8be5\u5b57\u7b26,\u8bfb\u5b57\u7b26;\u5916\u8bbe\u65b9\u5f80\u63a5\u53e3\u6570\u636e\u7f13\u51b2\u4e2d\u9001\u5b57\u7b26,\u5904\u7406\u5b8c\u540e,\u7f6e\u72b6\u6001\u5bc4\u5b58\u5668,\u7b49\u5f85\u4e0b\u4e00\u4e2a\u5b57\u7b26\u3002 \u7a0b\u5e8f\u4e2d\u65ad \u5916\u90e8\u8bbe\u5907\u8bf7\u6c42,CPU \u6682\u505c\u6b63\u5728\u6267\u884c\u7684\u7a0b\u5e8f\u5e76\u54cd\u5e94,CPU \u4e0e\u5916\u8bbe\u5e76\u884c\u5de5\u4f5c,\u5b8c\u6210\u540e\u7ee7\u7eed\u6267\u884c\u539f\u6765\u7684\u7a0b\u5e8f\u3002\u6709\u4e2d\u65ad\u4f18\u5148\u7ea7\u3002 \u4e2d\u65ad\u6e90:\u5916\u4e2d\u65ad(I/O \u8bbe\u5907\u7b49),\u5f02\u5e38(\u5185\u4e2d\u65ad:\u5904\u7406\u5668\u786c\u4ef6\u6545\u969c\u3001\u7a0b\u5e8f\u201c\u51fa\u9519\u201d,Trap),\u4e2d\u65ad\u89e6\u53d1\u5668,\u4e2d\u65ad\u72b6\u6001\u5bc4\u5b58\u5668\u3002 \u5b8c\u6574\u8fc7\u7a0b:\u4e2d\u65ad\u8bf7\u6c42(\u4e2d\u65ad\u6e90\u8bbe\u5907\u8bbe\u7f6e\u4e2d\u65ad\u89e6\u53d1\u5668),\u4e2d\u65ad\u54cd\u5e94(\u54cd\u5e94\u6761\u4ef6:\u5141\u8bb8\u4e2d\u65ad\u3001\u5f53\u524d\u6307\u4ee4\u7ed3\u675f\u3001\u4f18\u5148\u7ea7,\u54cd\u5e94\u5b9e\u73b0:\u786c\u4ef6\u5b9e\u73b0\u7684\u4e2d\u65ad\u9690\u6307\u4ee4,\u4fdd\u5b58\u65ad\u70b9),\u4e2d\u65ad\u5904\u7406(\u4fdd\u5b58\u73b0\u573a\u4fe1\u606f,\u8fd0\u884c\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f,\u4e2d\u65ad\u8fd4\u56de)\u3002 \u5173\u4e2d\u65ad;\u4fdd\u5b58\u65ad\u70b9;\u5224\u4e2d\u65ad\u6e90,\u8f6c\u4e2d\u65ad\u670d\u52a1;\u5f00\u4e2d\u65ad;\u6267\u884c\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f;\u5173\u4e2d\u65ad;\u6062\u590d\u65ad\u70b9;\u5f00\u4e2d\u65ad;\u8fd4\u56de\u65ad\u70b9 \u76f4\u63a5\u5b58\u50a8\u8bbf\u95ee(DMA) I/O \u8bbe\u5907\u548c\u4e3b\u5b58\u50a8\u5668\u4e4b\u95f4\u7684\u76f4\u63a5\u6570\u636e\u901a\u8def,\u4e3a\u4e13\u8bbe\u7684\u786c\u4ef6,\u7528\u4e8e\u9ad8\u901f I/O \u8bbe\u5907\u548c\u4e3b\u5b58\u50a8\u5668\u4e4b\u95f4\u6210\u7ec4\u4f20\u9001\u6570\u636e\u3002 \u6570\u636e\u4f20\u9001\u5f00\u59cb\u524d\u548c\u7ed3\u675f\u540e\u901a\u8fc7\u7a0b\u5e8f\u6216\u4e2d\u65ad\u65b9\u5f0f\u5bf9 DMA \u8fdb\u884c\u9884\u5904\u7406\u548c\u540e\u5904\u7406\u3002 DMA \u5de5\u4f5c\u65b9\u5f0f:\u72ec\u5360\u603b\u7ebf\u65b9\u5f0f,\u5468\u671f\u7a83\u53d6\u65b9\u5f0f\u3002 Cache \u4e00\u81f4\u6027:\u4e3b\u5b58\u4e2d\u7684\u6570\u636e\u53ef\u80fd\u4e0d\u662f\u6700\u65b0\u7684,\u91c7\u7528\u76f4\u63a5\u5199\u4f1a\u5e26\u6765\u6027\u80fd\u7684\u964d\u4f4e,DMA \u67e5\u8be2Cache \u4f1a\u964d\u4f4e\u6027\u80fd,\u76f4\u63a5\u8bbe\u8ba1\u786c\u4ef6\u63a7\u5236\u3002 \u901a\u9053 I/O \u901a\u9053\u662f\u7cfb\u7edf\u4e2d\u4ee3\u66ff CPU \u7ba1\u7406\u63a7\u5236\u5916\u8bbe\u7684\u72ec\u7acb\u90e8\u4ef6,\u80fd\u6267\u884c\u6709\u9650 I/O \u6307\u4ee4\u96c6\u5408\u3002 \u901a\u9053\u7c7b\u578b:\u5b57\u8282\u591a\u8def\u901a\u9053(\u7b80\u5355\u7684\u5171\u4eab\u901a\u9053,\u5206\u65f6\u5904\u7406,\u9762\u5411\u4f4e\u3001\u4e2d\u901f\u5b57\u7b26\u8bbe\u5907);\u9009\u62e9\u901a\u9053(\u9009\u62e9\u4e00\u53f0\u5916\u8bbe\u72ec\u5360\u6574\u4e2a\u901a\u9053,\u4ee5\u6210\u7ec4\u4f20\u9001\u65b9\u5f0f\u4f20\u9001\u6570\u636e\u5757,\u6548\u7387\u9ad8,\u9002\u5408\u5feb\u901f\u8bbe\u5907);\u6570\u7ec4\u591a\u8def\u901a\u9053(\u4e0a\u4e24\u79cd\u65b9\u5f0f\u7684\u7ed3\u5408,\u6548\u7387\u9ad8,\u63a7\u5236\u590d\u6742) \u5916\u56f4\u5904\u7406\u673a \u901a\u9053\u578b\u5904\u7406\u673a:\u5171\u4eab\u5185\u5b58 \u603b\u7ebf \u5206\u7c7b \u5904\u7406\u5668-\u4e3b\u5b58\u603b\u7ebf(\u4e13\u7528) \u4f20\u8f93\u8ddd\u79bb\u77ed\u3001\u901f\u5ea6\u9ad8,\u4e3b\u5b58\u50a8\u5668\u4e13\u7528 \u76f4\u63a5\u548c\u5904\u7406\u5668\u8fde\u63a5 \u76f4\u63a5\u548c\u5904\u7406\u5668\u8fde\u63a5 \u8f93\u5165 / \u8f93\u51fa\u603b\u7ebf(\u884c\u4e1a\u6807\u51c6) \u901a\u5e38\u8ddd\u79bb\u8f83\u957f,\u901f\u5ea6\u8f83\u6162 \u9700\u8981\u9002\u5e94\u591a\u79cd\u8f93\u5165/\u8f93\u51fa\u8bbe\u5907 \u548c\u5904\u7406\u5668-\u4e3b\u5b58\u603b\u7ebf\u901a\u8fc7\u6865\u8fde\u63a5(\u6216\u901a\u8fc7\u4e3b\u677f\u603b\u7ebf) \u4e3b\u677f\u603b\u7ebf(\u884c\u4e1a\u6807\u51c6\u6216\u4e13\u95e8\u8bbe\u8ba1) \u4e3b\u677f:\u8fde\u63a5\u5404\u90e8\u4ef6\u5668\u4ef6\u7684\u5e95\u76d8 \u5e94\u5141\u8bb8\u5904\u7406\u5668\u3001\u4e3b\u5b58\u50a8\u5668\u548c\u8f93\u5165/\u8f93\u51fa\u8bbe\u5907\u4e92\u8fde \u5e94\u6709\u4ef7\u683c\u4f18\u52bf:\u6240\u6709\u7ec4\u4ef6\u8fde\u63a5\u5728\u4e00\u6761\u603b\u7ebf\u4e0a \u7ec4\u6210 \u63a7\u5236\u7ebf:\u6807\u8bb0\u603b\u7ebf\u4e8b\u52a1\u7684\u5f00\u59cb\u548c\u7ed3\u675f,\u6307\u660e\u6570\u636e\u7ebf\u4e0a\u4f20\u8f93\u4fe1\u606f\u7684\u7c7b\u578b\u3002 \u6570\u636e\u7ebf:\u5728\u6e90\u8bbe\u5907\u548c\u76ee\u6807\u8bbe\u5907\u95f4\u4f20\u9001\u4fe1\u606f\u3002 \u76f8\u5173\u6982\u5ff5: \u603b\u7ebf\u4e3b\u8bbe\u5907:\u6709\u80fd\u529b\u63a7\u5236\u603b\u7ebf,\u53d1\u8d77\u603b\u7ebf\u4e8b\u52a1 \u603b\u7ebf\u4ece\u8bbe\u5907:\u54cd\u5e94\u4e3b\u8bbe\u5907\u8bf7\u6c42 \u603b\u7ebf\u901a\u4fe1\u534f\u8bae:\u5b9a\u4e49\u603b\u7ebf\u4f20\u8f93\u4e2d\u7684\u4e8b\u4ef6\u987a\u5e8f\u548c\u65f6\u5e8f\u8981\u6c42 \u5f02\u6b65\u603b\u7ebf\u4f20\u8f93:\u63a7\u5236\u4fe1\u53f7(\u8bf7\u6c42,\u5e94\u7b54)\u4f5c\u4e3a\u603b\u63a7\u4fe1\u53f7 \u540c\u6b65\u603b\u7ebf\u4f20\u8f93:\u4f7f\u7528\u5171\u540c\u7684\u65f6\u949f\u4fe1\u53f7 \u603b\u7ebf\u4e8b\u52a1:\u53d1\u8d77\u547d\u4ee4(\u548c\u5730\u5740),\u4f20\u8f93\u6570\u636e\u3002 \u603b\u7ebf\u4ef2\u88c1 \u95ee\u9898:\u5982\u4f55\u4e3a\u9700\u8981\u4f7f\u7528\u603b\u7ebf\u7684\u8bbe\u5907\u5b89\u6392\u603b\u7ebf? \u53ef\u901a\u8fc7\u4e3b\u2014\u4ece\u8bbe\u5907\u7684\u5b89\u6392\u6765\u907f\u514d\u51b2\u7a81:\u53ea\u5141\u8bb8\u4e3b\u8bbe\u5907\u53d1\u8d77\u603b\u7ebf\u4e8b\u52a1,\u63a7\u5236\u6240\u6709\u603b\u7ebf\u8bf7\u6c42,\u4ece\u8bbe\u5907\u54cd\u5e94\u4e3b\u8bbe\u5907\u7684\u8bfb\u5199\u8bf7\u6c42\u3002 \u6700\u7b80\u5355\u7684\u8bbe\u8ba1:\u5904\u7406\u5668\u4f5c\u4e3a\u552f\u4e00\u7684\u603b\u7ebf\u4e3b\u8bbe\u5907,\u6240\u6709\u603b\u7ebf\u8bf7\u6c42\u5747\u7531\u5904\u7406\u5668\u63a7\u5236,\u4e3b\u8981\u7f3a\u70b9\u662f\u5904\u7406\u5668\u88ab\u5377\u5165\u5230\u6bcf\u4e00\u4e2a\u603b\u7ebf\u4e8b\u52a1\u4e2d\u3002 \u603b\u7ebf\u4ef2\u88c1\u7684\u57fa\u672c\u8981\u6c42:\u67d0\u603b\u7ebf\u4e3b\u8bbe\u5907\u4f7f\u7528\u603b\u7ebf\u524d\u5e94\u53d1\u51fa\u603b\u7ebf\u8bf7\u6c42,\u53ea\u6709\u5f97\u5230\u6388\u6743\u540e,\u4e3b\u8bbe\u5907\u624d\u80fd\u4f7f\u7528\u603b\u7ebf,\u4f7f\u7528\u5b8c\u6bd5\u540e,\u4e3b\u8bbe\u5907\u5e94\u901a\u77e5\u4ef2\u88c1\u5668\u3002 \u603b\u7ebf\u4ef2\u88c1\u65b9\u5f0f: \u96c6\u4e2d\u4ef2\u88c1 \u83ca\u94fe\u4ef2\u88c1(\u6240\u6709\u8bbe\u5907\u5171\u7528\u4e00\u4e2a\u603b\u7ebf\u8bf7\u6c42\u4fe1\u53f7) \u7b80\u5355 \u65e0\u6cd5\u4fdd\u8bc1\u516c\u5e73\u6027,\u4f4e\u4f18\u5148\u7ea7\u8bbe\u5907\u53ef\u80fd\u5f97\u4e0d\u5230\u603b\u7ebf\u4f7f\u7528\u6743 \u603b\u7ebf\u6388\u6743\u4fe1\u53f7\u7684\u9010\u7ea7\u4f20\u9012\u9650\u5236\u4e86\u7533\u8bf7\u603b\u7ebf\u7684\u901f\u5ea6\u3002 \u96c6\u4e2d\u5e73\u884c\u4ef2\u88c1(\u901a\u8fc7\u96c6\u4e2d\u7684\u4ef2\u88c1\u5668\u8fdb\u884c) \u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u5904\u7406\u5668-\u4e3b\u5b58\u603b\u7ebf\u548c\u4e00\u4e9b\u9ad8\u901f\u8f93\u5165/\u8f93\u51fa\u603b\u7ebf\u3002 \u5206\u5e03\u4ef2\u88c1 \u901a\u8fc7\u81ea\u6211\u9009\u62e9\u8fdb\u884c\u5206\u5e03\u5f0f\u4ef2\u88c1(\u6bcf\u4e2a\u8981\u4f7f\u7528\u603b\u7ebf\u7684\u8bbe\u5907\u5c06\u81ea\u5df1\u7684\u6807\u8bc6\u653e\u5728\u603b\u7ebf\u4e0a)\u3002 \u78b0\u649e\u68c0\u6d4b(\u4ee5\u592a\u7f51) \u901a\u4fe1\u65b9\u5f0f \u540c\u6b65\u603b\u7ebf:\u63a7\u5236\u7ebf\u4e2d\u5305\u542b\u6709\u4e00\u6839\u65f6\u949f\u4fe1\u53f7\u7ebf,\u4f20\u8f93\u534f\u8bae\u6839\u636e\u65f6\u949f\u4fe1\u53f7\u5236\u5b9a\u3002 \u4f8b\u5982:\u4e3b\u8bbe\u5907\u63d0\u51fa\u603b\u7ebf\u8bf7\u6c42\u540e 5 \u4e2a\u65f6\u949f\u5468\u671f,\u53ef\u4ee5\u83b7\u5f97\u80fd\u5426\u4f7f\u7528\u603b\u7ebf\u7684\u4fe1\u53f7\u3002 \u4f18\u70b9:\u903b\u8f91\u7b80\u5355\u3001\u9ad8\u901f\u3002\u7f3a\u70b9:\u603b\u7ebf\u4e0a\u8bbe\u5907\u987b\u6309\u65f6\u949f\u9891\u7387\u5de5\u4f5c,\u4e3a\u9632\u6b62\u65f6\u949f\u4fe1\u53f7\u626d\u66f2,\u9ad8\u901f\u5de5\u4f5c\u65f6\u603b\u7ebf\u8ddd\u79bb\u987b\u591f\u77ed\u3002 \u5f02\u6b65\u603b\u7ebf:\u4e0d\u4f7f\u7528\u7edf\u4e00\u7684\u65f6\u949f,\u53ef\u9002\u5e94\u8bbe\u5907\u7684\u4e0d\u540c\u901f\u5ea6,\u4e0d\u7528\u62c5\u5fc3\u65f6\u949f\u4fe1\u53f7\u626d\u66f2,\u8ddd\u79bb\u53ef\u8f83\u957f,\u4f7f\u7528\u63e1\u624b\u534f\u8bae\u3002 \u589e\u52a0\u603b\u7ebf\u5e26\u5bbd \u589e\u52a0\u603b\u7ebf\u7684\u5bbd\u5ea6:\u53ef\u589e\u52a0\u6bcf\u4e2a\u5468\u671f\u4f20\u9001\u6570\u636e\u7684\u91cf,\u63d0\u9ad8\u4e86\u6210\u672c\u3002 \u5206\u522b\u8bbe\u7f6e\u6570\u636e\u603b\u7ebf\u548c\u5730\u5740\u603b\u7ebf:\u53ef\u540c\u65f6\u4f20\u9001\u6570\u636e\u548c\u5730\u5740,\u63d0\u9ad8\u4e86\u6210\u672c\u3002 \u91c7\u7528\u6210\u7ec4\u4f20\u9001\u65b9\u5f0f:\u4e00\u4e2a\u603b\u7ebf\u4e8b\u52a1\u4f20\u9001\u591a\u4e2a\u6570\u636e,\u6bcf\u6b21\u53ea\u9700\u8981\u5728\u5f00\u59cb\u7684\u65f6\u5019\u4f20\u9001\u4e00\u4e2a\u5730\u5740,\u76f4\u5230\u6570\u636e\u4f20\u9001\u5b8c\u6bd5\u624d\u91ca\u653e\u603b\u7ebf,\u590d\u6742\u5ea6\u63d0\u9ad8,\u5ef6\u957f\u540e\u7eed\u603b\u7ebf\u8bf7\u6c42\u7684\u7b49\u5f85\u65f6\u95f4\u3002 \u591a\u4e3b\u8bbe\u5907\u603b\u7ebf\u63d0\u9ad8\u4e8b\u52a1\u6570\u91cf \u4ef2\u88c1\u91cd\u53e0:\u5728\u5f53\u524d\u4e8b\u52a1\u65f6,\u4e3a\u4e0b\u4e00\u603b\u7ebf\u4e8b\u52a1\u8fdb\u884c\u4ef2\u88c1\u3002 \u603b\u7ebf\u5360\u7528:\u6ca1\u6709\u5176\u4ed6\u4e3b\u8bbe\u5907\u8bf7\u6c42\u603b\u7ebf\u7684\u60c5\u51b5\u4e0b,\u67d0\u4e3b\u8bbe\u5907\u4e00\u76f4\u5360\u7528\u603b\u7ebf,\u5b8c\u6210\u591a\u4e2a\u603b\u7ebf\u4e8b\u52a1\u3002 \u5730\u5740\u3001\u6570\u636e\u4f20\u9001\u91cd\u53e0\u3002 \u63a5\u53e3\u7535\u8def\u548c\u5916\u90e8\u8bbe\u5907 \u63d0\u4f9b\u4e3b\u673a\u8bc6\u522b(\u6307\u5b9a\u3001\u627e\u5230)\u4f7f\u7528\u7684 I/O \u8bbe\u5907\u7684\u652f\u6301:\u4e3a\u6bcf\u4e2a\u8bbe\u5907\u89c4\u5b9a\u51e0\u4e2a\u5730\u5740\u7801\u6216\u7f16\u53f7\u3002 \u5efa\u7acb\u4e3b\u673a\u548c\u8bbe\u5907\u4e4b\u95f4\u7684\u63a7\u5236\u4e0e\u901a\u4fe1\u673a\u5236:\u63a5\u6536\u5904\u7406\u5668(\u4e3b\u8bbe\u5907)\u7684\u547d\u4ee4,\u5e76\u63d0\u4ea4\u7ed9\u5916\u90e8\u8bbe\u5907,\u540c\u65f6,\u4e3a\u4e3b\u8bbe\u5907\u63d0\u4f9b\u5916\u90e8\u8bbe\u5907\u7684\u72b6\u6001\u3002 \u63d0\u4f9b\u4e3b\u673a\u548c\u8bbe\u5907\u4e4b\u95f4\u4fe1\u606f\u4ea4\u6362\u8fc7\u7a0b\u4e2d\u7684\u6570\u636e\u7f13\u51b2\u673a\u6784\u3002 \u63d0\u4f9b\u4e3b\u673a\u548c\u8bbe\u5907\u4e4b\u95f4\u4fe1\u606f\u4ea4\u6362\u8fc7\u7a0b\u4e2d\u7684\u5176\u4ed6\u7279\u522b\u9700\u6c42\u652f\u6301:\u5c4f\u853d\u5916\u90e8\u8bbe\u5907\u7684\u5dee\u5f02\u3002","title":"\u5b58\u50a8\u5668\u4e0eIO"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#io","text":"","title":"\u5b58\u50a8\u5668\u4e0eIO"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_1","text":"\u7a0b\u5e8f\u8fd0\u884c\u7684\u5c40\u90e8\u6027\u539f\u7406 \u65f6\u95f4\u5c40\u90e8\u6027:\u6700\u8fd1\u88ab\u8bbf\u95ee\u8fc7\u7684\u7a0b\u5e8f\u548c\u6570\u636e\u5f88\u53ef\u80fd\u518d\u6b21\u88ab\u8bbf\u95ee \u7a7a\u95f4\u5c40\u90e8\u6027:CPU \u5f88\u53ef\u80fd\u8bbf\u95ee\u6700\u8fd1\u88ab\u8bbf\u95ee\u8fc7\u7684\u5730\u5740\u5355\u5143\u9644\u8fd1\u7684\u5730\u5740\u5355\u5143\u3002 \u5c42\u6b21\u4e4b\u95f4\u5e94\u6ee1\u8db3\u7684\u539f\u5219: \u4e00\u81f4\u6027\u539f\u5219:\u5904\u5728\u4e0d\u540c\u5c42\u6b21\u5b58\u50a8\u5668\u4e2d\u7684\u540c\u4e00\u4e2a\u4fe1\u606f\u5e94\u4fdd\u6301\u76f8\u540c\u7684\u503c\u3002 \u5305\u542b\u6027\u539f\u5219:\u5904\u5728\u5185\u5c42\u7684\u4fe1\u606f\u4e00\u5b9a\u88ab\u5305\u542b\u5728\u5176\u5916\u5c42\u7684\u5b58\u50a8\u5668\u4e2d,\u53cd\u4e4b\u5219\u4e0d\u6210\u7acb\u3002 \u603b\u7ebf\uff1a \u5730\u5740\u603b\u7ebf\u7528\u4e8e\u9009\u62e9\u4e3b\u5b58\u50a8\u5668\u7684\u4e00\u4e2a\u5b58\u50a8\u5355\u5143(\u5b57\u6216\u5b57\u8282),\u5176\u4f4d\u6570\u51b3\u5b9a\u4e86\u80fd\u591f\u8bbf\u95ee\u7684\u5b58\u50a8\u5355\u5143\u7684\u6700\u5927\u6570\u76ee,\u79f0\u4e3a\u6700\u5927\u53ef\u5bfb\u5740\u7a7a\u95f4\u3002 \u6570\u636e\u603b\u7ebf\u7528\u4e8e\u5728\u8ba1\u7b97\u673a\u5404\u529f\u80fd\u90e8\u4ef6\u4e4b\u95f4\u4f20\u9001\u6570\u636e,\u5176\u4f4d\u6570(\u603b\u7ebf\u7684\u5bbd\u5ea6)\u4e0e\u603b\u7ebf\u65f6\u949f\u9891\u7387\u7684\u4e58\u79ef,\u4e0e\u8be5\u603b\u7ebf\u6240\u652f\u6301\u7684\u6700\u9ad8\u6570\u636e\u541e\u5410(\u8f93\u5165/\u8f93\u51fa)\u80fd\u529b\u6210\u6b63\u6bd4\u3002 \u63a7\u5236\u603b\u7ebf\u7528\u4e8e\u6307\u660e\u603b\u7ebf\u7684\u5de5\u4f5c\u5468\u671f\u7c7b\u578b\u548c\u672c\u6b21\u5165/\u51fa\u5b8c\u6210\u7684\u65f6\u523b\u3002","title":"\u5c42\u6b21\u5b58\u50a8\u5668\u7cfb\u7edf"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#dram","text":"\u52a8\u6001\u5b58\u50a8\u5668\uff1a\u7528\u91d1\u5c5e\u6c27\u5316\u7269\u534a\u5bfc\u4f53(MOS)\u7684\u5355\u4e2a MOS \u7ba1\u5b58\u50a8\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d(bit)\u4fe1\u606f\u3002\u4fe1\u606f\u88ab\u5b58\u50a8\u5728 MOS \u7ba1 T \u7684\u6e90\u6781\u7684\u5bc4\u751f\u7535\u5bb9 C S \u4e2d,\u6709\u7535\u8377\u8868\u793a 1,\u65e0\u7535\u8377\u8868\u793a 0\u3002 \u5b58\u50a8\u4fe1\u606f \u9001\u884c\u5217\u5730\u5740 \u96c6\u6210\u5ea6 \u53d1\u70ed\u91cf SRAM \u89e6\u53d1\u5668 \u540c\u65f6 \u4f4e \u5927 DRAM \u7535\u5bb9 \u5206\u4e24\u6b21 \u9ad8 \u5c0f","title":"\u52a8\u6001\u5b58\u50a8\u5668 DRAM\uff0c\u9759\u6001\u5b58\u50a8\u5668"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#cache","text":"\u4e3b\u5b58\u548c CPU \u4e4b\u95f4\u7684\u5b58\u50a8\u5668,\u7528\u9ad8\u901f\u7684\u9759\u6001\u5b58\u50a8\u5668\u5b9e\u73b0,\u7f13\u5b58\u4e86CPU \u9891\u7e41\u8bbf\u95ee\u7684\u4fe1\u606f\u3002\u9ad8\u901f,\u900f\u660e\u3002 Cache \u63a5\u5165\u7cfb\u7edf\u7684\u4f53\u7cfb\u7ed3\u6784\uff1a\u4fa7\u63a5\u6cd5\uff0c\u9694\u65ad\u6cd5 \u8981\u89e3\u51b3\u7684\u95ee\u9898 \u5730\u5740\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb:\u5982\u4f55\u6839\u636e\u4e3b\u5b58\u5730\u5740\u5f97\u5230 Cache \u4e2d\u7684\u6570\u636e? \u6570\u636e\u4e4b\u95f4\u4e00\u81f4\u6027:Cache \u4e2d\u7684\u5185\u5bb9\u662f\u5426\u5df2\u7ecf\u662f\u4e3b\u5b58\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9? \u6570\u636e\u4ea4\u6362\u7684\u7c92\u5ea6:Cache \u4e2d\u7684\u5185\u5bb9\u4e0e\u4e3b\u5b58\u5185\u5bb9\u4ee5\u591a\u5927\u7684\u7c92\u5ea6\u4ea4\u6362? Cache \u5185\u5bb9\u88c5\u5165\u548c\u66ff\u6362\u7b56\u7565:\u5982\u4f55\u63d0\u9ad8 Cache \u7684\u547d\u4e2d\u7387? \\text{\u5e73\u5747\u8bbf\u95ee\u65f6\u95f4}=HR*\\text{\u547d\u4e2d\u65f6\u95f4}+(1-HR)*\\text{\u5931\u6548\u635f\u5931} \\text{\u5e73\u5747\u8bbf\u95ee\u65f6\u95f4}=HR*\\text{\u547d\u4e2d\u65f6\u95f4}+(1-HR)*\\text{\u5931\u6548\u635f\u5931} HR HR \u4e3a\u547d\u4e2d\u7387\u3002","title":"\u9ad8\u901f\u7f13\u51b2\u5b58\u50a8\u5668 Cache"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_2","text":"\u5168\u76f8\u8054\u65b9\u5f0f \u76f4\u63a5\u6620\u5c04 \u591a\u8def\u7ec4\u76f8\u8054","title":"\u5730\u5740\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_3","text":"Cache\uff08\u4e0d\u547d\u4e2d\uff09\u5199","title":"\u4e00\u81f4\u6027\u4fdd\u8bc1"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#cache_1","text":"\u5fc5\u7136\u7f3a\u5931 Compulsory Miss(\u5f00\u673a\u6216\u8005\u662f\u8fdb\u7a0b\u5207\u6362\u3001\u9996\u6b21\u8bbf\u95ee \u6570\u636e\u5757) \u5bb9\u91cf\u7f3a\u5931 Capacity Miss(\u6d3b\u52a8\u6570\u636e\u96c6\u8d85\u51fa\u4e86 Cache \u7684\u5927\u5c0f) \u51b2\u7a81\u7f3a\u5931 Conflict Miss (\u591a\u4e2a\u5185\u5b58\u5757\u6620\u5c04\u5230\u540c\u4e00 Cache \u5757\u3001\u67d0\u4e00 Cache \u7ec4\u5757\u5df2\u6ee1\u4f46\u7a7a\u95f2\u7684 Cache \u5757\u5728\u5176\u4ed6 \u7ec4) \u65e0\u6548\u7f3a\u5931(\u5176\u4ed6\u8fdb\u7a0b\u4fee\u6539\u4e86\u4e3b\u5b58\u6570\u636e) \u66ff\u6362\u7b97\u6cd5:\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u7684(LRU)\u3001\u5148\u8fdb\u5148\u51fa(FIFO)\u3001\u968f\u673a\u66ff\u6362(RAND)","title":"\u63d0\u9ad8 Cache \u7684\u547d\u4e2d\u7387"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_4","text":"\u865a\u5b58 Cache \u4e3b\u8981\u76ee\u7684\u662f\u5b9e\u73b0\u5b58\u50a8\u7ba1\u7406,\u5e2e\u52a9\u89e3\u51b3\u5b58\u50a8\u5bb9\u91cf\u7684\u95ee\u9898\u3002 \u4e3b\u8981\u76ee\u7684\u662f\u89e3\u51b3\u5b58\u50a8\u901f\u5ea6\u95ee\u9898,\u4f7f\u5b58\u50a8\u5668\u8bbf\u95ee\u901f\u5ea6\u4e0d\u592a\u5f71\u54cd CPU \u7684\u8fd0\u884c\u901f\u5ea6\u3002 \u5355\u4f4d\u65f6\u95f4\u5185\u6570\u636e\u4ea4\u6362\u6b21\u6570\u5c11,\u6bcf\u6b21\u4ea4\u6362\u6570\u636e\u91cf\u5927 \u5355\u4f4d\u65f6\u95f4\u5185\u6570\u636e\u4ea4\u6362\u7684\u6b21\u6570\u591a,\u6bcf\u6b21\u4ea4\u6362\u6570\u636e\u91cf\u5c0f \u7531\u64cd\u4f5c\u7cfb\u7edf\u7ba1\u7406 \u7531\u786c\u4ef6\u5b9e\u73b0","title":"\u865a\u62df\u5b58\u50a8\u5668"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_5","text":"\u6bb5\u5f0f\u5b58\u50a8\u7ba1\u7406 \u4ee5\u6bb5\u4f5c\u4e3a\u5b58\u50a8\u7ba1\u7406\u7684\u5bf9\u8c61,\u6bb5\u957f\u52a8\u6001\u53ef\u53d8,\u6bb5\u8d77\u70b9\u3001\u7ec8\u70b9\u4e0d\u5b9a\u3002\u6613\u4e8e\u7f16\u8bd1\u3001\u7ba1\u7406\u3001\u4fee\u6539\u3001\u4fdd\u62a4\u548c\u5171\u4eab,\u7a7a\u95f4\u5206\u914d\u56f0\u96be,\u5bb9\u6613\u4ea7\u751f\u788e\u7247\u3002 \u6bb5(Segment)\u7a0b\u5e8f\u6a21\u5757\u5316\u8bbe\u8ba1\u7684\u7ed3\u679c(\u8fc7\u7a0b\u3001\u51fd\u6570\u3001\u6570\u7ec4\u3001...),\u903b\u8f91\u4e0a\u76f8\u5bf9\u72ec\u7acb,\u662f\u5171\u4eab\u548c\u4fdd\u62a4\u7684\u6700\u5c0f\u5355\u5143\u3002 \u5b9e\u73b0:\u8bbe\u7f6e\u6bb5\u8868\u8fdb\u884c\u7ba1\u7406,\u6bb5\u8868\u57fa\u5730\u5740,\u6bb5\u8d77\u59cb\u5730\u5740,\u6bb5\u957f,\u88c5\u5165\u4f4d,\u4fdd\u62a4\u3001\u5171\u4eab\u7b49\u6807\u5fd7\u3002 \u9875\u5f0f\u5b58\u50a8\u7ba1\u7406 \u5c06\u4e3b\u5b58\u548c\u865a\u5b58\u5212\u5206\u4e3a\u56fa\u5b9a\u5927\u5c0f\u7684\u9875,\u4ee5\u9875\u4e3a\u5355\u4f4d\u8fdb\u884c\u7ba1\u7406\u548c\u6570\u636e\u4ea4\u6362\u3002 \u865a\u5730\u5740=\u865a\u9875\u53f7+\u9875\u5185\u5730\u5740;\u5b9e\u5730\u5740=\u5b9e\u9875\u53f7+\u9875\u5185\u5730\u5740\u3002 \u5b9e\u73b0:\u901a\u8fc7\u9875\u8868\u8fdb\u884c\u7ba1\u7406,\u9875\u8868\u57fa\u5730\u5740\u5bc4\u5b58\u5668,\u5b9e\u9875\u53f7,\u63a7\u5236\u4f4d\u3002 \u9875\u5f0f\u865a\u62df\u5b58\u50a8\u5668\u7684\u8bbf\u95ee\u8fc7\u7a0b: \u5f97\u5230\u7a0b\u5e8f\u7ed9\u51fa\u7684\u865a\u5730\u5740; \u7531\u865a\u5730\u5740\u5f97\u5230\u865a\u9875\u53f7; \u8bbf\u95ee\u9875\u8868,\u5f97\u5230\u5bf9\u5e94\u7684\u5b9e\u9875\u53f7; \u82e5\u8be5\u9875\u5df2\u5728\u5185\u5b58\u4e2d,\u5219\u6839\u636e\u5b9e\u9875\u53f7\u5f97\u5230\u5b9e\u5730\u5740,\u8bbf\u95ee\u5185\u5b58; \u5426\u5219,\u542f\u52a8\u8f93\u5165\u8f93\u51fa\u7cfb\u7edf,\u8bfb\u51fa\u5bf9\u5e94\u9875\u88c5\u5165\u4e3b\u5b58,\u518d\u8fdb\u884c\u8bbf\u95ee\u3002","title":"\u865a\u62df\u5b58\u50a8\u5668\u7ba1\u7406"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#tlb","text":"\u4e3a\u9875\u8868\u8bbe\u7f6e\u7684\u4e13\u7528 Cache,\u9ad8\u6548\u5b9e\u73b0\u865a\u9875\u53f7\u5230\u5b9e\u9875\u53f7\u7684\u8f6c\u6362,\u5bb9\u91cf\u8f83\u5c0f,128~256 \u4e2a\u8868\u9879\u3002 TLB \u7f3a\u5931:\u6d41\u6c34\u7ebf\u505c,\u901a\u77e5\u64cd\u4f5c\u7cfb\u7edf,\u8bfb\u9875\u8868,\u5c06\u8868\u9879\u5199\u5165 TLB,\u8fd4\u56de\u7528\u6237\u7a0b\u5e8f,\u91cd\u65b0\u8bbf\u95ee\u3002 \u9875\u9762\u5927\u5c0f:\u7f29\u5c0f\u9875\u9762\u5927\u5c0f\u53ef\u51cf\u5c11\u5185\u90e8\u788e\u7247,\u4f46\u9700\u66f4\u5927\u7684\u9875\u8868\u3002 \u9875\u9762\u66ff\u6362\u7b97\u6cd5:\u6700\u8fd1\u6700\u5c11\u4f7f\u7528(LRU)","title":"\u8f6c\u6362\u65c1\u8def\u7f13\u51b2(TLB)"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#pentium","text":"\u7a0b\u5e8f\u5458\u7ed9\u51fa\u7684\u865a\u62df\u5730\u5740,\u683c\u5f0f\u4e3a\u6bb5\u53f7+\u6bb5\u5185\u504f\u79fb(16\u4f4d+32\u4f4d),\u6bcf\u6bb5\u5927\u5c0f\u4e0d\u8d85\u8fc74GB\u3002","title":"Pentium \u7684\u865a\u5b58\u7ba1\u7406"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_6","text":"\u5bb9\u91cf\u5927,\u6210\u672c\u4f4e,\u65ad\u7535\u4fdd\u5b58,\u8131\u673a\u4fdd\u5b58,\u4e32\u884c\u8bbf\u95ee,\u6570\u636e\u4ea4\u6362\u9891\u7387\u4f4e,\u6570 \u636e\u4ea4\u6362\u91cf\u5927\u3002\u4e00\u822c\u4e3a\u78c1\u76d8\u3001\u5149\u76d8\u7b49\u3002 \u968f\u673a\u8bbf\u95ee \u968f\u673a\u8bbf\u95ee\u4efb\u4f55\u5355\u5143,\u8bbf\u95ee\u65f6\u95f4\u4e0e\u5b58\u653e\u4f4d\u7f6e\u65e0\u5173,\u6bcf\u4e00\u4f4d\u90fd\u6709\u5404\u81ea\u7684\u8bfb\u5199\u8bbe\u5907\u3002 \u4e32\u884c\u8bbf\u95ee \u987a\u5e8f\u6309\u4f4d\u8fdb\u884c,\u8bbf\u95ee\u65f6\u95f4\u4e0e\u5b58\u50a8\u4f4d\u7684\u7269\u7406\u4f4d\u7f6e\u6709\u5173,\u5171\u7528\u4e00\u4e2a\u8bfb\u5199\u8bbe\u5907\u3002 \u4e3b\u8981\u6307\u6807 \u5b58\u50a8\u5bc6\u5ea6,\u5b58\u50a8\u5bb9\u91cf,\u5bfb\u5740\u65f6\u95f4,\u6570\u636e\u4f20\u8f93\u7387,\u8bef\u7801\u7387,\u4ef7\u683c\u3002","title":"\u78c1\u8868\u9762\u5b58\u50a8\u8bbe\u5907"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_7","text":"\u4e00\u79cd\u7f16\u7801\u65b9\u6cd5,\u5373\u5982\u4f55\u5c06\u4e00\u4e32\u4e8c\u8fdb\u5236\u4fe1\u606f,\u901a\u8fc7\u8bfb\u5199\u7535\u8def\u53d8\u6362\u6210\u78c1\u5c42\u4ecb\u8d28\u4e2d\u7684\u78c1\u5316\u7ffb\u8f6c\u5e8f\u5217\u3002(\u7f16\u7801\u6548\u7387,\u81ea\u540c\u6b65\u80fd\u529b,\u8bfb\u5199\u53ef\u9760\u6027) \u5f52\u96f6\u5236(RZ),\u4e0d\u5f52\u96f6\u5236(NRZ),\u89c1 1 \u7ffb\u8f6c\u7684\u4e0d\u5f52\u96f6\u5236(NRZ1),\u8c03\u76f8\u5236(PM),\u8c03\u9891\u5236(FM),\u6539\u8fdb\u7684\u8c03\u9891\u5236(MFM)","title":"\u78c1\u8bb0\u5f55\u65b9\u5f0f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_8","text":"\u78c1\u76d8\u8bbf\u95ee\u65f6\u95f4= \u5bfb\u9053\u65f6\u95f4+ \u5e73\u5747\u65cb\u8f6c\u5ef6\u8fdf+ \u4f20\u8f93\u65f6\u95f4+ \u78c1\u76d8\u63a7\u5236\u5668\u5ef6\u8fdf \u4f8b:\u5e73\u5747\u5bfb\u9053\u65f6\u95f4= 12ms,\u65cb\u8f6c\u901f\u5ea6= 5400rpm,\u78c1\u76d8\u63a7\u5236\u5668\u5ef6\u8fdf=2ms,\u4f20\u8f93\u901f\u5ea6=5MB,\u6247\u533a\u5927\u5c0f= 512 bytes,\u9875\u5927\u5c0f 8KB\u3002 \u65cb\u8f6c 1 \u5468: 1/5400 minutes = 11.1ms => 1/2 \u5468:5.6 ms \u8bfb 1 \u4e2a\u6247\u533a:12ms + 5.6ms + .5K/5MB s+ 2ms = 12 + 5.6 + .1ms + 2ms = 19.7ms \u8bfb 1 \u9875\u7684\u65f6\u95f4:12 ms + 5.6ms + 8K/5MB s + 2ms = 12ms + 5.6ms + 1.6ms + 2ms = 21.2 ms \u91c7\u7528\u6d41\u6c34\u65b9\u5f0f\u548c\u5927\u5bb9\u91cf\u4f20\u8f93\u65b9\u5f0f(\u6bcf\u6b21\u8bfb\u53d6\u591a\u4e2a\u6247\u533a)\u514b\u670d\u78c1\u76d8\u63a7\u5236\u5668\u5ef6\u8fdf\u3002 \u989d\u5916\u5f00\u9500\u5728\u603b\u5f00\u9500\u4e2d\u6bd4\u4f8b\u8f83\u5927 => \u4e00\u6b21\u4f20\u8f93\u5927\u91cf\u6570\u636e\u6bd4\u8f83\u6709\u6548\u3002 \u5c06\u9875\u9762\u5b58\u653e\u5728\u76f8\u90bb\u6247\u533a\u4e2d\u53ef\u4ee5\u907f\u514d\u989d\u5916\u7684\u5bfb\u9053\u5f00\u9500\u3002","title":"\u78c1\u76d8"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#raid","text":"\u53ef\u9760\u6027(reliability):\u8bbe\u5907\u51fa\u73b0\u6545\u969c\u7684\u51e0\u7387\u6765\u8861\u91cf\u3002 \u53ef\u7528\u6027(availability):\u7cfb\u7edf\u80fd\u6b63\u5e38\u8fd0\u884c\u7684\u51e0\u7387\u6765\u8861\u91cf\u3002 \u51fa\u6545\u969c\u540e\u4ecd\u80fd\u8fd0\u884c\u3002 \u76ee\u6807: N \u4e2a\u78c1\u76d8\u7684\u5bb9\u91cf, 1/N \u7684\u8bbf\u95ee\u65f6\u95f4,\u66f4\u9ad8\u7684\u6027\u4ef7\u6bd4,\u7528\u5197\u4f59\u6280\u672f\u63d0\u9ad8\u5b58\u50a8\u4fe1\u606f\u53ef\u7528\u6027\u3002\u63d0\u9ad8\u78c1\u76d8\u7684\u53ef\u7528\u6027\u548c\u6027\u80fd raid0 raid1 raid2 raid3 raid4 raid5","title":"RAID \u6280\u672f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_9","text":"\u8981\u89e3\u51b3\u7684\u95ee\u9898 \u63a7\u5236\u65b9\u5f0f:CPU \u5982\u4f55\u63a7\u5236\u8f93\u5165/\u8f93\u51fa?(\u8f93\u5165/\u8f93\u51fa\u65b9\u5f0f) \u4f20\u8f93\u65b9\u5f0f:\u4f20\u8f93\u901a\u9053\u3001\u65b9\u5f0f\u3001\u901f\u7387\u7b49(\u603b\u7ebf\u3001\u63a5\u53e3) \u6570\u636e\u8bc6\u522b\u548c\u8f6c\u6362:\u6570/\u6a21\u8f6c\u6362\u3001\u8bed\u97f3\u8bc6\u522b\u7b49,\u8f6c\u4e3a\u5b57\u7b26\u3001\u6570\u636e\u7b49\u8ba1\u7b97\u673a\u80fd\u8bc6\u522b\u7684\u683c\u5f0f(\u8bbe\u5907)\u3002","title":"\u8f93\u5165/\u8f93\u51fa\u7cfb\u7edf"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_10","text":"\u7a0b\u5e8f\u76f4\u63a5\u63a7\u5236 CPU \u76f4\u63a5\u4f7f\u7528\u8f93\u5165/\u8f93\u51fa\u6307\u4ee4\u6765\u63a7\u5236\u5916\u90e8\u8bbe\u5907\u3002 CPU \u65b9\u67e5\u8be2\u63a5\u53e3\u72b6\u6001(\u5faa\u73af\u7b49\u5f85),\u76f4\u5230\u5916\u8bbe\u5df2\u7ecf\u63a5\u6536\u5230\u8be5\u5b57\u7b26,\u8bfb\u5b57\u7b26;\u5916\u8bbe\u65b9\u5f80\u63a5\u53e3\u6570\u636e\u7f13\u51b2\u4e2d\u9001\u5b57\u7b26,\u5904\u7406\u5b8c\u540e,\u7f6e\u72b6\u6001\u5bc4\u5b58\u5668,\u7b49\u5f85\u4e0b\u4e00\u4e2a\u5b57\u7b26\u3002 \u7a0b\u5e8f\u4e2d\u65ad \u5916\u90e8\u8bbe\u5907\u8bf7\u6c42,CPU \u6682\u505c\u6b63\u5728\u6267\u884c\u7684\u7a0b\u5e8f\u5e76\u54cd\u5e94,CPU \u4e0e\u5916\u8bbe\u5e76\u884c\u5de5\u4f5c,\u5b8c\u6210\u540e\u7ee7\u7eed\u6267\u884c\u539f\u6765\u7684\u7a0b\u5e8f\u3002\u6709\u4e2d\u65ad\u4f18\u5148\u7ea7\u3002 \u4e2d\u65ad\u6e90:\u5916\u4e2d\u65ad(I/O \u8bbe\u5907\u7b49),\u5f02\u5e38(\u5185\u4e2d\u65ad:\u5904\u7406\u5668\u786c\u4ef6\u6545\u969c\u3001\u7a0b\u5e8f\u201c\u51fa\u9519\u201d,Trap),\u4e2d\u65ad\u89e6\u53d1\u5668,\u4e2d\u65ad\u72b6\u6001\u5bc4\u5b58\u5668\u3002 \u5b8c\u6574\u8fc7\u7a0b:\u4e2d\u65ad\u8bf7\u6c42(\u4e2d\u65ad\u6e90\u8bbe\u5907\u8bbe\u7f6e\u4e2d\u65ad\u89e6\u53d1\u5668),\u4e2d\u65ad\u54cd\u5e94(\u54cd\u5e94\u6761\u4ef6:\u5141\u8bb8\u4e2d\u65ad\u3001\u5f53\u524d\u6307\u4ee4\u7ed3\u675f\u3001\u4f18\u5148\u7ea7,\u54cd\u5e94\u5b9e\u73b0:\u786c\u4ef6\u5b9e\u73b0\u7684\u4e2d\u65ad\u9690\u6307\u4ee4,\u4fdd\u5b58\u65ad\u70b9),\u4e2d\u65ad\u5904\u7406(\u4fdd\u5b58\u73b0\u573a\u4fe1\u606f,\u8fd0\u884c\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f,\u4e2d\u65ad\u8fd4\u56de)\u3002 \u5173\u4e2d\u65ad;\u4fdd\u5b58\u65ad\u70b9;\u5224\u4e2d\u65ad\u6e90,\u8f6c\u4e2d\u65ad\u670d\u52a1;\u5f00\u4e2d\u65ad;\u6267\u884c\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f;\u5173\u4e2d\u65ad;\u6062\u590d\u65ad\u70b9;\u5f00\u4e2d\u65ad;\u8fd4\u56de\u65ad\u70b9 \u76f4\u63a5\u5b58\u50a8\u8bbf\u95ee(DMA) I/O \u8bbe\u5907\u548c\u4e3b\u5b58\u50a8\u5668\u4e4b\u95f4\u7684\u76f4\u63a5\u6570\u636e\u901a\u8def,\u4e3a\u4e13\u8bbe\u7684\u786c\u4ef6,\u7528\u4e8e\u9ad8\u901f I/O \u8bbe\u5907\u548c\u4e3b\u5b58\u50a8\u5668\u4e4b\u95f4\u6210\u7ec4\u4f20\u9001\u6570\u636e\u3002 \u6570\u636e\u4f20\u9001\u5f00\u59cb\u524d\u548c\u7ed3\u675f\u540e\u901a\u8fc7\u7a0b\u5e8f\u6216\u4e2d\u65ad\u65b9\u5f0f\u5bf9 DMA \u8fdb\u884c\u9884\u5904\u7406\u548c\u540e\u5904\u7406\u3002 DMA \u5de5\u4f5c\u65b9\u5f0f:\u72ec\u5360\u603b\u7ebf\u65b9\u5f0f,\u5468\u671f\u7a83\u53d6\u65b9\u5f0f\u3002 Cache \u4e00\u81f4\u6027:\u4e3b\u5b58\u4e2d\u7684\u6570\u636e\u53ef\u80fd\u4e0d\u662f\u6700\u65b0\u7684,\u91c7\u7528\u76f4\u63a5\u5199\u4f1a\u5e26\u6765\u6027\u80fd\u7684\u964d\u4f4e,DMA \u67e5\u8be2Cache \u4f1a\u964d\u4f4e\u6027\u80fd,\u76f4\u63a5\u8bbe\u8ba1\u786c\u4ef6\u63a7\u5236\u3002 \u901a\u9053 I/O \u901a\u9053\u662f\u7cfb\u7edf\u4e2d\u4ee3\u66ff CPU \u7ba1\u7406\u63a7\u5236\u5916\u8bbe\u7684\u72ec\u7acb\u90e8\u4ef6,\u80fd\u6267\u884c\u6709\u9650 I/O \u6307\u4ee4\u96c6\u5408\u3002 \u901a\u9053\u7c7b\u578b:\u5b57\u8282\u591a\u8def\u901a\u9053(\u7b80\u5355\u7684\u5171\u4eab\u901a\u9053,\u5206\u65f6\u5904\u7406,\u9762\u5411\u4f4e\u3001\u4e2d\u901f\u5b57\u7b26\u8bbe\u5907);\u9009\u62e9\u901a\u9053(\u9009\u62e9\u4e00\u53f0\u5916\u8bbe\u72ec\u5360\u6574\u4e2a\u901a\u9053,\u4ee5\u6210\u7ec4\u4f20\u9001\u65b9\u5f0f\u4f20\u9001\u6570\u636e\u5757,\u6548\u7387\u9ad8,\u9002\u5408\u5feb\u901f\u8bbe\u5907);\u6570\u7ec4\u591a\u8def\u901a\u9053(\u4e0a\u4e24\u79cd\u65b9\u5f0f\u7684\u7ed3\u5408,\u6548\u7387\u9ad8,\u63a7\u5236\u590d\u6742) \u5916\u56f4\u5904\u7406\u673a \u901a\u9053\u578b\u5904\u7406\u673a:\u5171\u4eab\u5185\u5b58","title":"\u8f93\u5165/\u8f93\u51fa\u65b9\u5f0f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_11","text":"","title":"\u603b\u7ebf"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_12","text":"\u5904\u7406\u5668-\u4e3b\u5b58\u603b\u7ebf(\u4e13\u7528) \u4f20\u8f93\u8ddd\u79bb\u77ed\u3001\u901f\u5ea6\u9ad8,\u4e3b\u5b58\u50a8\u5668\u4e13\u7528 \u76f4\u63a5\u548c\u5904\u7406\u5668\u8fde\u63a5 \u76f4\u63a5\u548c\u5904\u7406\u5668\u8fde\u63a5 \u8f93\u5165 / \u8f93\u51fa\u603b\u7ebf(\u884c\u4e1a\u6807\u51c6) \u901a\u5e38\u8ddd\u79bb\u8f83\u957f,\u901f\u5ea6\u8f83\u6162 \u9700\u8981\u9002\u5e94\u591a\u79cd\u8f93\u5165/\u8f93\u51fa\u8bbe\u5907 \u548c\u5904\u7406\u5668-\u4e3b\u5b58\u603b\u7ebf\u901a\u8fc7\u6865\u8fde\u63a5(\u6216\u901a\u8fc7\u4e3b\u677f\u603b\u7ebf) \u4e3b\u677f\u603b\u7ebf(\u884c\u4e1a\u6807\u51c6\u6216\u4e13\u95e8\u8bbe\u8ba1) \u4e3b\u677f:\u8fde\u63a5\u5404\u90e8\u4ef6\u5668\u4ef6\u7684\u5e95\u76d8 \u5e94\u5141\u8bb8\u5904\u7406\u5668\u3001\u4e3b\u5b58\u50a8\u5668\u548c\u8f93\u5165/\u8f93\u51fa\u8bbe\u5907\u4e92\u8fde \u5e94\u6709\u4ef7\u683c\u4f18\u52bf:\u6240\u6709\u7ec4\u4ef6\u8fde\u63a5\u5728\u4e00\u6761\u603b\u7ebf\u4e0a","title":"\u5206\u7c7b"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_13","text":"\u63a7\u5236\u7ebf:\u6807\u8bb0\u603b\u7ebf\u4e8b\u52a1\u7684\u5f00\u59cb\u548c\u7ed3\u675f,\u6307\u660e\u6570\u636e\u7ebf\u4e0a\u4f20\u8f93\u4fe1\u606f\u7684\u7c7b\u578b\u3002 \u6570\u636e\u7ebf:\u5728\u6e90\u8bbe\u5907\u548c\u76ee\u6807\u8bbe\u5907\u95f4\u4f20\u9001\u4fe1\u606f\u3002 \u76f8\u5173\u6982\u5ff5: \u603b\u7ebf\u4e3b\u8bbe\u5907:\u6709\u80fd\u529b\u63a7\u5236\u603b\u7ebf,\u53d1\u8d77\u603b\u7ebf\u4e8b\u52a1 \u603b\u7ebf\u4ece\u8bbe\u5907:\u54cd\u5e94\u4e3b\u8bbe\u5907\u8bf7\u6c42 \u603b\u7ebf\u901a\u4fe1\u534f\u8bae:\u5b9a\u4e49\u603b\u7ebf\u4f20\u8f93\u4e2d\u7684\u4e8b\u4ef6\u987a\u5e8f\u548c\u65f6\u5e8f\u8981\u6c42 \u5f02\u6b65\u603b\u7ebf\u4f20\u8f93:\u63a7\u5236\u4fe1\u53f7(\u8bf7\u6c42,\u5e94\u7b54)\u4f5c\u4e3a\u603b\u63a7\u4fe1\u53f7 \u540c\u6b65\u603b\u7ebf\u4f20\u8f93:\u4f7f\u7528\u5171\u540c\u7684\u65f6\u949f\u4fe1\u53f7 \u603b\u7ebf\u4e8b\u52a1:\u53d1\u8d77\u547d\u4ee4(\u548c\u5730\u5740),\u4f20\u8f93\u6570\u636e\u3002","title":"\u7ec4\u6210"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_14","text":"\u95ee\u9898:\u5982\u4f55\u4e3a\u9700\u8981\u4f7f\u7528\u603b\u7ebf\u7684\u8bbe\u5907\u5b89\u6392\u603b\u7ebf? \u53ef\u901a\u8fc7\u4e3b\u2014\u4ece\u8bbe\u5907\u7684\u5b89\u6392\u6765\u907f\u514d\u51b2\u7a81:\u53ea\u5141\u8bb8\u4e3b\u8bbe\u5907\u53d1\u8d77\u603b\u7ebf\u4e8b\u52a1,\u63a7\u5236\u6240\u6709\u603b\u7ebf\u8bf7\u6c42,\u4ece\u8bbe\u5907\u54cd\u5e94\u4e3b\u8bbe\u5907\u7684\u8bfb\u5199\u8bf7\u6c42\u3002 \u6700\u7b80\u5355\u7684\u8bbe\u8ba1:\u5904\u7406\u5668\u4f5c\u4e3a\u552f\u4e00\u7684\u603b\u7ebf\u4e3b\u8bbe\u5907,\u6240\u6709\u603b\u7ebf\u8bf7\u6c42\u5747\u7531\u5904\u7406\u5668\u63a7\u5236,\u4e3b\u8981\u7f3a\u70b9\u662f\u5904\u7406\u5668\u88ab\u5377\u5165\u5230\u6bcf\u4e00\u4e2a\u603b\u7ebf\u4e8b\u52a1\u4e2d\u3002 \u603b\u7ebf\u4ef2\u88c1\u7684\u57fa\u672c\u8981\u6c42:\u67d0\u603b\u7ebf\u4e3b\u8bbe\u5907\u4f7f\u7528\u603b\u7ebf\u524d\u5e94\u53d1\u51fa\u603b\u7ebf\u8bf7\u6c42,\u53ea\u6709\u5f97\u5230\u6388\u6743\u540e,\u4e3b\u8bbe\u5907\u624d\u80fd\u4f7f\u7528\u603b\u7ebf,\u4f7f\u7528\u5b8c\u6bd5\u540e,\u4e3b\u8bbe\u5907\u5e94\u901a\u77e5\u4ef2\u88c1\u5668\u3002 \u603b\u7ebf\u4ef2\u88c1\u65b9\u5f0f: \u96c6\u4e2d\u4ef2\u88c1 \u83ca\u94fe\u4ef2\u88c1(\u6240\u6709\u8bbe\u5907\u5171\u7528\u4e00\u4e2a\u603b\u7ebf\u8bf7\u6c42\u4fe1\u53f7) \u7b80\u5355 \u65e0\u6cd5\u4fdd\u8bc1\u516c\u5e73\u6027,\u4f4e\u4f18\u5148\u7ea7\u8bbe\u5907\u53ef\u80fd\u5f97\u4e0d\u5230\u603b\u7ebf\u4f7f\u7528\u6743 \u603b\u7ebf\u6388\u6743\u4fe1\u53f7\u7684\u9010\u7ea7\u4f20\u9012\u9650\u5236\u4e86\u7533\u8bf7\u603b\u7ebf\u7684\u901f\u5ea6\u3002 \u96c6\u4e2d\u5e73\u884c\u4ef2\u88c1(\u901a\u8fc7\u96c6\u4e2d\u7684\u4ef2\u88c1\u5668\u8fdb\u884c) \u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u5904\u7406\u5668-\u4e3b\u5b58\u603b\u7ebf\u548c\u4e00\u4e9b\u9ad8\u901f\u8f93\u5165/\u8f93\u51fa\u603b\u7ebf\u3002 \u5206\u5e03\u4ef2\u88c1 \u901a\u8fc7\u81ea\u6211\u9009\u62e9\u8fdb\u884c\u5206\u5e03\u5f0f\u4ef2\u88c1(\u6bcf\u4e2a\u8981\u4f7f\u7528\u603b\u7ebf\u7684\u8bbe\u5907\u5c06\u81ea\u5df1\u7684\u6807\u8bc6\u653e\u5728\u603b\u7ebf\u4e0a)\u3002 \u78b0\u649e\u68c0\u6d4b(\u4ee5\u592a\u7f51)","title":"\u603b\u7ebf\u4ef2\u88c1"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_15","text":"\u540c\u6b65\u603b\u7ebf:\u63a7\u5236\u7ebf\u4e2d\u5305\u542b\u6709\u4e00\u6839\u65f6\u949f\u4fe1\u53f7\u7ebf,\u4f20\u8f93\u534f\u8bae\u6839\u636e\u65f6\u949f\u4fe1\u53f7\u5236\u5b9a\u3002 \u4f8b\u5982:\u4e3b\u8bbe\u5907\u63d0\u51fa\u603b\u7ebf\u8bf7\u6c42\u540e 5 \u4e2a\u65f6\u949f\u5468\u671f,\u53ef\u4ee5\u83b7\u5f97\u80fd\u5426\u4f7f\u7528\u603b\u7ebf\u7684\u4fe1\u53f7\u3002 \u4f18\u70b9:\u903b\u8f91\u7b80\u5355\u3001\u9ad8\u901f\u3002\u7f3a\u70b9:\u603b\u7ebf\u4e0a\u8bbe\u5907\u987b\u6309\u65f6\u949f\u9891\u7387\u5de5\u4f5c,\u4e3a\u9632\u6b62\u65f6\u949f\u4fe1\u53f7\u626d\u66f2,\u9ad8\u901f\u5de5\u4f5c\u65f6\u603b\u7ebf\u8ddd\u79bb\u987b\u591f\u77ed\u3002 \u5f02\u6b65\u603b\u7ebf:\u4e0d\u4f7f\u7528\u7edf\u4e00\u7684\u65f6\u949f,\u53ef\u9002\u5e94\u8bbe\u5907\u7684\u4e0d\u540c\u901f\u5ea6,\u4e0d\u7528\u62c5\u5fc3\u65f6\u949f\u4fe1\u53f7\u626d\u66f2,\u8ddd\u79bb\u53ef\u8f83\u957f,\u4f7f\u7528\u63e1\u624b\u534f\u8bae\u3002 \u589e\u52a0\u603b\u7ebf\u5e26\u5bbd \u589e\u52a0\u603b\u7ebf\u7684\u5bbd\u5ea6:\u53ef\u589e\u52a0\u6bcf\u4e2a\u5468\u671f\u4f20\u9001\u6570\u636e\u7684\u91cf,\u63d0\u9ad8\u4e86\u6210\u672c\u3002 \u5206\u522b\u8bbe\u7f6e\u6570\u636e\u603b\u7ebf\u548c\u5730\u5740\u603b\u7ebf:\u53ef\u540c\u65f6\u4f20\u9001\u6570\u636e\u548c\u5730\u5740,\u63d0\u9ad8\u4e86\u6210\u672c\u3002 \u91c7\u7528\u6210\u7ec4\u4f20\u9001\u65b9\u5f0f:\u4e00\u4e2a\u603b\u7ebf\u4e8b\u52a1\u4f20\u9001\u591a\u4e2a\u6570\u636e,\u6bcf\u6b21\u53ea\u9700\u8981\u5728\u5f00\u59cb\u7684\u65f6\u5019\u4f20\u9001\u4e00\u4e2a\u5730\u5740,\u76f4\u5230\u6570\u636e\u4f20\u9001\u5b8c\u6bd5\u624d\u91ca\u653e\u603b\u7ebf,\u590d\u6742\u5ea6\u63d0\u9ad8,\u5ef6\u957f\u540e\u7eed\u603b\u7ebf\u8bf7\u6c42\u7684\u7b49\u5f85\u65f6\u95f4\u3002 \u591a\u4e3b\u8bbe\u5907\u603b\u7ebf\u63d0\u9ad8\u4e8b\u52a1\u6570\u91cf \u4ef2\u88c1\u91cd\u53e0:\u5728\u5f53\u524d\u4e8b\u52a1\u65f6,\u4e3a\u4e0b\u4e00\u603b\u7ebf\u4e8b\u52a1\u8fdb\u884c\u4ef2\u88c1\u3002 \u603b\u7ebf\u5360\u7528:\u6ca1\u6709\u5176\u4ed6\u4e3b\u8bbe\u5907\u8bf7\u6c42\u603b\u7ebf\u7684\u60c5\u51b5\u4e0b,\u67d0\u4e3b\u8bbe\u5907\u4e00\u76f4\u5360\u7528\u603b\u7ebf,\u5b8c\u6210\u591a\u4e2a\u603b\u7ebf\u4e8b\u52a1\u3002 \u5730\u5740\u3001\u6570\u636e\u4f20\u9001\u91cd\u53e0\u3002","title":"\u901a\u4fe1\u65b9\u5f0f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_16","text":"\u63d0\u4f9b\u4e3b\u673a\u8bc6\u522b(\u6307\u5b9a\u3001\u627e\u5230)\u4f7f\u7528\u7684 I/O \u8bbe\u5907\u7684\u652f\u6301:\u4e3a\u6bcf\u4e2a\u8bbe\u5907\u89c4\u5b9a\u51e0\u4e2a\u5730\u5740\u7801\u6216\u7f16\u53f7\u3002 \u5efa\u7acb\u4e3b\u673a\u548c\u8bbe\u5907\u4e4b\u95f4\u7684\u63a7\u5236\u4e0e\u901a\u4fe1\u673a\u5236:\u63a5\u6536\u5904\u7406\u5668(\u4e3b\u8bbe\u5907)\u7684\u547d\u4ee4,\u5e76\u63d0\u4ea4\u7ed9\u5916\u90e8\u8bbe\u5907,\u540c\u65f6,\u4e3a\u4e3b\u8bbe\u5907\u63d0\u4f9b\u5916\u90e8\u8bbe\u5907\u7684\u72b6\u6001\u3002 \u63d0\u4f9b\u4e3b\u673a\u548c\u8bbe\u5907\u4e4b\u95f4\u4fe1\u606f\u4ea4\u6362\u8fc7\u7a0b\u4e2d\u7684\u6570\u636e\u7f13\u51b2\u673a\u6784\u3002 \u63d0\u4f9b\u4e3b\u673a\u548c\u8bbe\u5907\u4e4b\u95f4\u4fe1\u606f\u4ea4\u6362\u8fc7\u7a0b\u4e2d\u7684\u5176\u4ed6\u7279\u522b\u9700\u6c42\u652f\u6301:\u5c4f\u853d\u5916\u90e8\u8bbe\u5907\u7684\u5dee\u5f02\u3002","title":"\u63a5\u53e3\u7535\u8def\u548c\u5916\u90e8\u8bbe\u5907"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/DigitalSignalProcessing/","text":"\u6570\u5b57\u4fe1\u53f7\u5904\u7406 \u5085\u91cc\u53f6\u53d8\u6362 \u8fde\u7eed\u4fe1\u53f7\u9891\u8c31\u975e\u5468\u671f\uff0c\u79bb\u6563\u4fe1\u53f7\u9891\u8c31\u5468\u671f \u79bb\u6563\u5468\u671f\u4fe1\u53f7\u9891\u8c31\u79bb\u6563\u5468\u671f \u5e38\u7528\u7684z\u53d8\u6362 a^n u(n) a^n u(n) \\frac{1}{1-az^{-1}} \\frac{1}{1-az^{-1}} \\lvert z\\rvert >\\lvert a \\rvert \\lvert z\\rvert >\\lvert a \\rvert a^n u(-n-1) a^n u(-n-1) \\frac{-1}{1-a^{-1}} \\frac{-1}{1-a^{-1}} \\lvert z\\rvert < \\lvert a \\rvert \\lvert z\\rvert < \\lvert a \\rvert \u5185\u63d2\u516c\u5f0f \u65f6\u57df\u91c7\u6837\uff1a x_a(t) = \\sum_{n = -\\infty}^{\\infty} x_a(nT)h(t-nT) = \\sum_{n = -\\infty}^{\\infty} x_a(nT)\\frac{sin[\\pi(t-nT)/T]}{\\pi(t-nT)/T} x_a(t) = \\sum_{n = -\\infty}^{\\infty} x_a(nT)h(t-nT) = \\sum_{n = -\\infty}^{\\infty} x_a(nT)\\frac{sin[\\pi(t-nT)/T]}{\\pi(t-nT)/T} \u9891\u57df\u91c7\u6837\uff1a H(z) = \\frac{1-z^{-N}}{N}\\sum_{k = 0}^{N-1} \\frac{H(k)}{1-W_N^{-k}z^{-1}} H(z) = \\frac{1-z^{-N}}{N}\\sum_{k = 0}^{N-1} \\frac{H(k)}{1-W_N^{-k}z^{-1}} H(e^{j\\omega}) = \\sum_{k = 0}^{N-1}\\phi(\\omega-\\frac{2\\pi}{N}k) H(e^{j\\omega}) = \\sum_{k = 0}^{N-1}\\phi(\\omega-\\frac{2\\pi}{N}k) \u5f0f\u4e2d \\phi(\\omega) \\phi(\\omega) \u4e3a\u5185\u63d2\u51fd\u6570\uff1a \\phi(\\omega) = \\frac{1}{N}\\sum_{k = 0}^{N-1} \\frac{sin(N\\omega/2)}{\\omega/2} e^{j\\omega(\\frac{N-1}{2})} \\phi(\\omega) = \\frac{1}{N}\\sum_{k = 0}^{N-1} \\frac{sin(N\\omega/2)}{\\omega/2} e^{j\\omega(\\frac{N-1}{2})} IIR\u6570\u5b57\u6ee4\u6ce2\u5668 \u8109\u51b2\u54cd\u5e94\u4e0d\u53d8\u6cd5 H_a(s) = \\sum_{k = 1}^N \\frac{A_k}{s-s_k} \\rightarrow H(z) = \\sum_{k = 1}^N \\frac{TA_k}{1-e^{s_kT}z^{-1}} H_a(s) = \\sum_{k = 1}^N \\frac{A_k}{s-s_k} \\rightarrow H(z) = \\sum_{k = 1}^N \\frac{TA_k}{1-e^{s_kT}z^{-1}} \u53cc\u7ebf\u6027\u53d8\u6362\u6cd5 \u538b\u7f29\uff1a \\Omega = c \\cdot tan(\\frac{\\omega_1 T}{2}) \\Omega = c \\cdot tan(\\frac{\\omega_1 T}{2}) s\u5e73\u9762\u5230z\u5e73\u9762\u5355\u503c\u6620\u5c04\uff1a s = \\frac{1-z^{-1}}{1+z^{-1}} s = \\frac{1-z^{-1}}{1+z^{-1}} FIR\u6570\u5b57\u6ee4\u6ce2\u5668\u8bbe\u8ba1\u65b9\u6cd5 \u7a97\u51fd\u6570\u6cd5\uff1b\u4ece\u65f6\u57df\u51fa\u53d1\uff0c\u628a\u7406\u60f3\u7684 h_d(n) h_d(n) \u7528\u4e00\u5b9a\u5f62\u72b6\u7684\u7a97\u51fd\u6570\u622a\u53d6\u6210\u6709\u9650\u957f\u7684 h(n) h(n) \uff0c\u4ee5\u6b64\u6765\u903c\u8fd1\u7406\u60f3\u7684 h_d(n) h_d(n) \uff0c\u5f97\u5230\u7684\u9891\u7387\u54cd\u5e94\u903c\u8fd1\u7406\u60f3\u7684 H_d(e^{j\\omega}) H_d(e^{j\\omega}) \u9891\u7387\u91c7\u6837\u6cd5\uff1a\u4ece\u9891\u57df\u51fa\u53d1\uff0c\u628a\u7ed9\u5b9a\u7684 H_d(e^{j\\omega}) H_d(e^{j\\omega}) \u7b49\u95f4\u9694\u91c7\u6837\uff0c\u5373 H_d(e^{j\\omega})|_{\\omega = \\frac{2\\pi k}{N}} = H_d(k) H_d(e^{j\\omega})|_{\\omega = \\frac{2\\pi k}{N}} = H_d(k) \u7136\u540e\u4ee5\u6b64 H_d(k) H_d(k) \u4f5c\u4e3a\u5b9e\u9645FIR\u6570\u5b57\u6ee4\u6ce2\u5668\u7684\u9891\u7387\u7279\u6027\u91c7\u6837\u503c H(k) H(k) \uff0c\u5373\u4ee4 H(k) = H_d(k)\\qquad,k = 0,1,\\cdots ,N-1 H(k) = H_d(k)\\qquad,k = 0,1,\\cdots ,N-1 \u518d\u5229\u7528\u5185\u63d2\u516c\u5f0f\u4f7f H(z) H(z) \u903c\u8fd1 H_d(z) H_d(z) \u7a97\u51fd\u6570\u6cd5 \u7a97\u51fd\u6570\u8981\u6c42\uff1a 1. \u4e3b\u74e3\u5c3d\u53ef\u80fd\u7a84\uff0c\u4ee5\u83b7\u5f97\u8f83\u9661\u7684\u8fc7\u6e21\u5e26 2. \u5c3d\u91cf\u51cf\u5c11\u7a97\u8c31\u6700\u5927\u65c1\u74e3\u7684\u76f8\u5bf9\u5e45\u5ea6\uff0c\u4f7f\u80fd\u91cf\u5c3d\u91cf\u96c6\u4e2d\u4e8e\u4e3b\u74e3 \u56db\u79cd\u7ebf\u6027\u76f8\u4f4d\u7684FIR\u6ee4\u6ce2\u5668\uff1a 1. h(n) h(n) \u4e3a\u5947\uff08\u5076\uff09\u5bf9\u79f0\uff0c H(\\omega) H(\\omega) \u5173\u4e8e 0 ,2\\pi 0 ,2\\pi \u5947\uff08\u5076\uff09\u5bf9\u79f0 2. N N \u4e3a\u57fa\u6570\uff0c\u4e0d\u5f71\u54cd \\pi \\pi \u5bf9\u79f0\u6027\uff0c\u5076\u6570\u5f71\u54cd \u591a\u91c7\u6837\u7387\u6570\u5b57\u4fe1\u53f7\u5904\u7406 \u62bd\u53d6\uff1a Y(z) = \\frac{1}{M} \\sum_{k = 0}^{M-1}X(e^{j\\frac{2\\pi k}{M}}z^{-M}) Y(z) = \\frac{1}{M} \\sum_{k = 0}^{M-1}X(e^{j\\frac{2\\pi k}{M}}z^{-M}) \u5185\u63d2\uff1a Y(z) = X(z^L) Y(z) = X(z^L)","title":"\u6570\u5b57\u4fe1\u53f7\u5904\u7406"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/DigitalSignalProcessing/#_1","text":"","title":"\u6570\u5b57\u4fe1\u53f7\u5904\u7406"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/DigitalSignalProcessing/#_2","text":"\u8fde\u7eed\u4fe1\u53f7\u9891\u8c31\u975e\u5468\u671f\uff0c\u79bb\u6563\u4fe1\u53f7\u9891\u8c31\u5468\u671f \u79bb\u6563\u5468\u671f\u4fe1\u53f7\u9891\u8c31\u79bb\u6563\u5468\u671f","title":"\u5085\u91cc\u53f6\u53d8\u6362"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/DigitalSignalProcessing/#z","text":"a^n u(n) a^n u(n) \\frac{1}{1-az^{-1}} \\frac{1}{1-az^{-1}} \\lvert z\\rvert >\\lvert a \\rvert \\lvert z\\rvert >\\lvert a \\rvert a^n u(-n-1) a^n u(-n-1) \\frac{-1}{1-a^{-1}} \\frac{-1}{1-a^{-1}} \\lvert z\\rvert < \\lvert a \\rvert \\lvert z\\rvert < \\lvert a \\rvert","title":"\u5e38\u7528\u7684z\u53d8\u6362"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/DigitalSignalProcessing/#_3","text":"\u65f6\u57df\u91c7\u6837\uff1a x_a(t) = \\sum_{n = -\\infty}^{\\infty} x_a(nT)h(t-nT) = \\sum_{n = -\\infty}^{\\infty} x_a(nT)\\frac{sin[\\pi(t-nT)/T]}{\\pi(t-nT)/T} x_a(t) = \\sum_{n = -\\infty}^{\\infty} x_a(nT)h(t-nT) = \\sum_{n = -\\infty}^{\\infty} x_a(nT)\\frac{sin[\\pi(t-nT)/T]}{\\pi(t-nT)/T} \u9891\u57df\u91c7\u6837\uff1a H(z) = \\frac{1-z^{-N}}{N}\\sum_{k = 0}^{N-1} \\frac{H(k)}{1-W_N^{-k}z^{-1}} H(z) = \\frac{1-z^{-N}}{N}\\sum_{k = 0}^{N-1} \\frac{H(k)}{1-W_N^{-k}z^{-1}} H(e^{j\\omega}) = \\sum_{k = 0}^{N-1}\\phi(\\omega-\\frac{2\\pi}{N}k) H(e^{j\\omega}) = \\sum_{k = 0}^{N-1}\\phi(\\omega-\\frac{2\\pi}{N}k) \u5f0f\u4e2d \\phi(\\omega) \\phi(\\omega) \u4e3a\u5185\u63d2\u51fd\u6570\uff1a \\phi(\\omega) = \\frac{1}{N}\\sum_{k = 0}^{N-1} \\frac{sin(N\\omega/2)}{\\omega/2} e^{j\\omega(\\frac{N-1}{2})} \\phi(\\omega) = \\frac{1}{N}\\sum_{k = 0}^{N-1} \\frac{sin(N\\omega/2)}{\\omega/2} e^{j\\omega(\\frac{N-1}{2})}","title":"\u5185\u63d2\u516c\u5f0f"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/DigitalSignalProcessing/#iir","text":"","title":"IIR\u6570\u5b57\u6ee4\u6ce2\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/DigitalSignalProcessing/#_4","text":"H_a(s) = \\sum_{k = 1}^N \\frac{A_k}{s-s_k} \\rightarrow H(z) = \\sum_{k = 1}^N \\frac{TA_k}{1-e^{s_kT}z^{-1}} H_a(s) = \\sum_{k = 1}^N \\frac{A_k}{s-s_k} \\rightarrow H(z) = \\sum_{k = 1}^N \\frac{TA_k}{1-e^{s_kT}z^{-1}}","title":"\u8109\u51b2\u54cd\u5e94\u4e0d\u53d8\u6cd5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/DigitalSignalProcessing/#_5","text":"\u538b\u7f29\uff1a \\Omega = c \\cdot tan(\\frac{\\omega_1 T}{2}) \\Omega = c \\cdot tan(\\frac{\\omega_1 T}{2}) s\u5e73\u9762\u5230z\u5e73\u9762\u5355\u503c\u6620\u5c04\uff1a s = \\frac{1-z^{-1}}{1+z^{-1}} s = \\frac{1-z^{-1}}{1+z^{-1}}","title":"\u53cc\u7ebf\u6027\u53d8\u6362\u6cd5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/DigitalSignalProcessing/#fir","text":"\u7a97\u51fd\u6570\u6cd5\uff1b\u4ece\u65f6\u57df\u51fa\u53d1\uff0c\u628a\u7406\u60f3\u7684 h_d(n) h_d(n) \u7528\u4e00\u5b9a\u5f62\u72b6\u7684\u7a97\u51fd\u6570\u622a\u53d6\u6210\u6709\u9650\u957f\u7684 h(n) h(n) \uff0c\u4ee5\u6b64\u6765\u903c\u8fd1\u7406\u60f3\u7684 h_d(n) h_d(n) \uff0c\u5f97\u5230\u7684\u9891\u7387\u54cd\u5e94\u903c\u8fd1\u7406\u60f3\u7684 H_d(e^{j\\omega}) H_d(e^{j\\omega}) \u9891\u7387\u91c7\u6837\u6cd5\uff1a\u4ece\u9891\u57df\u51fa\u53d1\uff0c\u628a\u7ed9\u5b9a\u7684 H_d(e^{j\\omega}) H_d(e^{j\\omega}) \u7b49\u95f4\u9694\u91c7\u6837\uff0c\u5373 H_d(e^{j\\omega})|_{\\omega = \\frac{2\\pi k}{N}} = H_d(k) H_d(e^{j\\omega})|_{\\omega = \\frac{2\\pi k}{N}} = H_d(k) \u7136\u540e\u4ee5\u6b64 H_d(k) H_d(k) \u4f5c\u4e3a\u5b9e\u9645FIR\u6570\u5b57\u6ee4\u6ce2\u5668\u7684\u9891\u7387\u7279\u6027\u91c7\u6837\u503c H(k) H(k) \uff0c\u5373\u4ee4 H(k) = H_d(k)\\qquad,k = 0,1,\\cdots ,N-1 H(k) = H_d(k)\\qquad,k = 0,1,\\cdots ,N-1 \u518d\u5229\u7528\u5185\u63d2\u516c\u5f0f\u4f7f H(z) H(z) \u903c\u8fd1 H_d(z) H_d(z)","title":"FIR\u6570\u5b57\u6ee4\u6ce2\u5668\u8bbe\u8ba1\u65b9\u6cd5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/DigitalSignalProcessing/#_6","text":"\u7a97\u51fd\u6570\u8981\u6c42\uff1a 1. \u4e3b\u74e3\u5c3d\u53ef\u80fd\u7a84\uff0c\u4ee5\u83b7\u5f97\u8f83\u9661\u7684\u8fc7\u6e21\u5e26 2. \u5c3d\u91cf\u51cf\u5c11\u7a97\u8c31\u6700\u5927\u65c1\u74e3\u7684\u76f8\u5bf9\u5e45\u5ea6\uff0c\u4f7f\u80fd\u91cf\u5c3d\u91cf\u96c6\u4e2d\u4e8e\u4e3b\u74e3 \u56db\u79cd\u7ebf\u6027\u76f8\u4f4d\u7684FIR\u6ee4\u6ce2\u5668\uff1a 1. h(n) h(n) \u4e3a\u5947\uff08\u5076\uff09\u5bf9\u79f0\uff0c H(\\omega) H(\\omega) \u5173\u4e8e 0 ,2\\pi 0 ,2\\pi \u5947\uff08\u5076\uff09\u5bf9\u79f0 2. N N \u4e3a\u57fa\u6570\uff0c\u4e0d\u5f71\u54cd \\pi \\pi \u5bf9\u79f0\u6027\uff0c\u5076\u6570\u5f71\u54cd","title":"\u7a97\u51fd\u6570\u6cd5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/DigitalSignalProcessing/#_7","text":"\u62bd\u53d6\uff1a Y(z) = \\frac{1}{M} \\sum_{k = 0}^{M-1}X(e^{j\\frac{2\\pi k}{M}}z^{-M}) Y(z) = \\frac{1}{M} \\sum_{k = 0}^{M-1}X(e^{j\\frac{2\\pi k}{M}}z^{-M}) \u5185\u63d2\uff1a Y(z) = X(z^L) Y(z) = X(z^L)","title":"\u591a\u91c7\u6837\u7387\u6570\u5b57\u4fe1\u53f7\u5904\u7406"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/EMC/","text":"EMC \u4ea7\u751f\u7535\u78c1\u5e72\u6270\u7684\u6839\u672c\u539f\u56e0\uff1a\u5e72\u6270\u6e90\u548c\u654f\u611f\u8bbe\u5907\u5de5\u4f5c\u9891\u7387\uff08\u6bb5\uff09\u4e0a\u6240\u4ea7\u751f\u7684\u540c\u9891\u7387\uff08\u6bb5\uff09\u7684\u80fd\u91cf\u8026\u5408\uff0c\u4ece\u800c\u4f7f\u654f\u611f\u8bbe\u5907\u65e0\u6cd5\u5de5\u4f5c\u3002 EMC\u9886\u57df\u7684\u9891\u7387\u662f\u6307\u9891\u57df\u4e2d\u7684\u9891\u7387\uff0c\u5373\u5bf9\u5e94\u7b80\u8c10\u6ce2\u7684\u9891\u7387\u3002 \u6807\u51c6\uff1a 1. \u57fa\u7840\u6807\u51c6\uff1a\u662f\u5176\u4ed6\u7535\u78c1\u517c\u5bb9\u6807\u51c6\u7684\u57fa\u7840\uff0c\u4e00\u822c\u4e0d\u6d89\u53ca\u5177\u4f53\u7684\u4ea7\u54c1\uff0c\u5b83\u89c4\u5b9a\u4e86\u73b0\u8c61\uff0c\u73af\u5883\u7279\u5f81\uff0c\u8bd5\u9a8c\u548c\u6d4b\u8bd5\u65b9\u6cd5\uff0c\u8bd5\u9a8c\u4eea\u5668\u548c\u57fa\u672c\u8bd5\u9a8c\u88c5\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u89c4\u5b9a\u4e0d\u540c\u7684\u8bd5\u9a8c\u7535\u5e73\u8303\u56f4 2. \u901a\u7528\u6807\u51c6\uff1a\u89c4\u5b9a\u4e86\u4e00\u7cfb\u5217\u6807\u51c6\u5316\u5b9e\u9a8c\u65b9\u6cd5\u548c\u8981\u6c42\uff08\u9650\u503c\uff09\uff0c\u5e76\u7ed9\u51fa\u4e86\u8fd9\u4e9b\u65b9\u6cd5\u9002\u7528\u7684\u73af\u5883\uff0c\u5982\u679c\u67d0\u79cd\u4ea7\u54c1\u6ca1\u6709\u4ea7\u54c1\u7c7b\u6807\u51c6\u6216\u4ea7\u54c1\u6807\u51c6\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u901a\u7528\u6807\u51c6 3. \u4ea7\u54c1\u7c7b\u6807\u51c6\uff1a\u9488\u5bf9\u67d0\u7c7b\u4ea7\u54c1\u89c4\u5b9a\u4e86\u7279\u6b8a\u7684\u7535\u78c1\u517c\u5bb9\u8981\u6c42\uff08\u53d1\u5c04\u548c\u6297\u6270\u5ea6\uff09\uff0c\u4ee5\u53ca\u8be6\u7ec6\u7684\u6d4b\u91cf\u7a0b\u5e8f 4. \u4e13\u7528\u4ea7\u54c1\u6807\u51c6\uff1a\u901a\u5e38\u4e13\u7528\u4ea7\u54c1EMC\u6807\u51c6\u5305\u542b\u5728\u67d0\u79cd\u7279\u5b9a\u4ea7\u54c1\u4e2d\u7684\u4e00\u822c\u7528\u9014\u6807\u51c6\u4e2d\uff0c\u800c\u4e0d\u80fd\u5f62\u6210\u5355\u72ec\u7684\u6807\u51c6 LISN\u4f5c\u7528\uff1a 1. \u572810KHz-30MHz\u5185\uff0c\u7ed9\u76f8\u7ebf\u4e0e\u5730\u7ebf\u548c\u4e2d\u7ebf\u4e0e\u5730\u7ebf\u4e4b\u95f4\u63d0\u4f9b50 \\Omega \\Omega \u7684\u6052\u5b9a\u7535\u963b 2. \u4f7f50Hz\u621660Hz\u7684\u6709\u7528\u4fe1\u53f7\u5438\u6536\u901a\u8fc7 3. \u7ed9\u88ab\u6d4b\u8bbe\u5907\u63d0\u4f9b\u4f20\u5bfc\u5e72\u6270\u901a\u9053\u5e76\u963b\u6b62\u7535\u6e90\u4fa7\u7684\u4f20\u5bfc\u5e72\u6270 \u6d4b\u8bd5\u573a\u5730\uff1a\u51e1\u662f\u53ef\u4ee5\u8fdb\u884c\u8f90\u5c04\u53d1\u5c04\u548c\u8f90\u5c04\u6297\u6270\u5ea6\u6d4b\u8bd5\u7684\u8bbe\u65bd \u5206\u4e3a\uff1a\u7535\u78c1\u5c4f\u853d\u5ba4\uff0c\u5f00\u9614\u8bd5\u9a8c\u573a\uff0c\u534a\u7535\u6ce2\u6697\u5ba4\uff0c\u5168\u7535\u6ce2\u6697\u5ba4 \u5c4f\u853d\u6548\u80fd\uff1a\u5728\u65e0\u5c4f\u853d\u6761\u4ef6\u4e0b\u4ece\u4e00\u53d1\u5c04\u6e90\u63a5\u6536\u4fe1\u53f7\u7684\u5f3a\u5ea6\u548c\u5c4f\u853d\u5ba4\u5185\u63a5\u6536\u7684\u4fe1\u53f7\u5f3a\u5ea6\u7684\u6bd4\u503c SE_H = 20lg \\frac{H_1}{H_2} SE_H = 20lg \\frac{H_1}{H_2} \u89d2\u9525\u7684\u957f\u5ea6\u6700\u597d\u80fd\u957f\u8fc7\u6ce2\u957f\u7684 \\frac{1}{4} \\frac{1}{4} \uff0c\u9002\u5408\u9ad8\u9891 \u5bf9\u6570\u5468\u671f\u5929\u7ebf\uff1a \\alpha \\alpha \u8d8a\u5c0f\uff0c\u5438\u6536\u8d8a\u6162\uff0c\u5e26\u5bbd\u8d8a\u5927 \u6ee4\u6ce2\uff1a\u6ee4\u6ce2\u662f\u6307\u5c06\u5404\u7c7b\u4fe1\u53f7\u6309\u9891\u7387\u7279\u6027\u5206\u7c7b\u5e76\u63a7\u5236\u5b83\u4eec\u7684\u65b9\u5411\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u9891\u7387\u70b9\u8303\u56f4\u7c7b\u7684\u4fe1\u53f7\u63d0\u4f9b\u901a\u8def\uff0c\u800c\u5bf9\u53e6\u4e00\u4e9b\u9891\u7387\u70b9\u8303\u56f4\u5185\u7684\u4fe1\u53f7\u63d0\u4f9b\u963b\u65ad\u7684\u6280\u672f \u53cd\u5c04\u5f0f\u6ee4\u6ce2\u5668\uff1a\u5c06\u4e0d\u9700\u8981\u9891\u7387\u5206\u91cf\u7684\u80fd\u91cf\u53cd\u5c04\u56de\u4fe1\u53f7\u6e90\u6216\u9a9a\u6270\u6e90\uff0c\u800c\u8ba9\u9700\u8981\u9891\u7387\u5206\u91cf\u7684\u80fd\u91cf\u901a\u8fc7\u6ee4\u6ce2\u5668\u65bd\u52a0\u4e8e\u8d1f\u8f7d\uff0c\u4ece\u800c\u8fbe\u5230\u9009\u62e9\u548c\u6291\u5236\u4fe1\u53f7\u7684\u76ee\u7684 \u5438\u6536\u5f0f\u6ee4\u6ce2\u5668\uff1a\u5c06\u4e0d\u9700\u8981\u9891\u7387\u5206\u91cf\u7684\u80fd\u91cf\u6d88\u8017\u5728\u6ee4\u6ce2\u5668\u4e2d\uff0c\u5141\u8bb8\u9700\u8981\u9891\u7387\u5206\u91cf\u7684\u80fd\u91cf\u901a\u8fc7\uff0c\u8fbe\u5230\u6291\u5236\u5e72\u6270\u7684\u76ee\u7684 \u63d2\u5165\u635f\u8017\uff1a\u6ee4\u6ce2\u5668\u6ca1\u6709\u63a5\u5165\u7535\u8def\u65f6\u548c\u63a5\u5165\u7535\u8def\u65f6\uff0c\u7531\u6e90\u4f20\u9001\u7ed9\u8d1f\u8f7d\u7684\u529f\u7387\u4e4b\u6bd4\uff0c\u7531\u5206\u8d1d\u8868\u793a I_L = 10lg\\frac{P_1}{P_2} I_L = 10lg\\frac{P_1}{P_2} \u8d8a\u5927\u8d8a\u597d \u622a\u6b62\u9891\u7387\uff1a\u4fe1\u53f7\u632f\u5e45\u4e0b\u964d\u7684\u6700\u5927\u503c0.707\u500d\u7684\u9891\u7387 \u5171\u6a21\u627c\u6d41\u5708\uff1a 1. \u6291\u5236\u5171\u6a21\u5e72\u6270\u4fe1\u53f7\uff1a\u5171\u6a21\u7535\u6d41\u65b9\u5411\u76f8\u540c\uff0c\u4f20\u9012\u8fc7\u7a0b\u4e2d\uff0c\u4ea7\u751f\u5f88\u5927\u7684 \\phi \\phi \uff0c\u4e14\u4e92\u76f8\u589e\u5f3a\uff0c\u4ea7\u751f\u5f88\u5927\u7684 L_{cm} L_{cm} \uff0c z_{cm} z_{cm} \u5f88\u5927 2. \u4f7f\u5dee\u6a21\u4fe1\u53f7\u987a\u5229\u901a\u8fc7\uff1a\u5dee\u6a21\u7535\u6d41\u65b9\u5411\u76f8\u53cd\uff0c\u4ea7\u751f\u7684 \\phi \\phi \uff0c\u4e92\u76f8\u62b5\u6d88\uff0c\u5dee\u6a21\u963b\u6297\u51e0\u4e4e\u4e3a0 \u9759\u7535\u5c4f\u853d\u539f\u7406\uff1a\u5229\u7528\u5bfc\u4f53\u5728\u7535\u573a\u4e2d\u7684\u9759\u7535\u611f\u5e94\u73b0\u8c61\uff0c\u4f7f\u5bfc\u4f53\u5904\u4e8e\u9759\u7535\u5e73\u8861\u72b6\u6001\uff0c\u800c\u5904\u4e8e\u9759\u7535\u5e73\u8861\u72b6\u6001\u7684\u5bfc\u4f53\u5185\u90e8\u573a\u5f3a\u5904\u5904\u4e3a0\uff0c\u9759\u7535\u8377\u5168\u90e8\u5206\u5e03\u5728\u5bfc\u4f53\u8868\u9762\uff0c\u5185\u90e8\u6ca1\u6709\u9759\u7535\u8377 \u6750\u6599\uff1a\u7535\u826f\u5bfc\u4f53 \u5b8c\u5168\u9759\u7535\u5c4f\u853d\u5fc5\u8981\u6761\u4ef6\uff1a\u5b8c\u6574\u7684\u5bfc\u4f53\uff0c\u63a5\u5730 \u4ea4\u53d8\u7535\u573a\u5c4f\u853d\u539f\u7406\uff0c\u6750\u6599\u540c\u4e0a \u4ea4\u53d8\u78c1\u573a\u5c4f\u853d\u539f\u7406\uff1a 1. \u4f4e\u9891\uff1a\u5229\u7528\u9ad8\u78c1\u5bfc\u7684\u94c1\u78c1\u6750\u6599\uff0c\u5bf9\u9a9a\u6270\u78c1\u573a\u8fdb\u884c\u5206\u8def\uff0c\u628a\u78c1\u529b\u7ebf\u96c6\u4e2d\u5728\u5176\u5185\u90e8\u901a\u8fc7\uff0c\u9650\u5236\u5728\u7a7a\u6c14\u4e2d\u7684\u53d1\u6563 \u6750\u6599\uff1a\u9ad8\u78c1\u5bfc\u7684\u94c1\u78c1\u6750\u6599 \u9ad8\u9891\uff1a\u5229\u7528\u7535\u78c1\u611f\u5e94\u73b0\u8c61\u4ea7\u751f\u7684\u6da1\u6d41\u7684\u53cd\u78c1\u573a\u6765\u8fbe\u5230\u5c4f\u853d\u7684\u76ee\u7684\uff0c\u5373\u5229\u7528\u4e86\u6da1\u6d41\u53cd\u78c1\u573a\u5bf9\u539f\u9a9a\u6270\u78c1\u573a\u7684\u6392\u65a5\u4f5c\u7528\uff0c\u6291\u5236\u6216\u62b5\u6d88\u5c4f\u853d\u4f53\u5916\u7684\u78c1\u573a \u6750\u6599\uff1a\u4f4e\u7535\u963b\u7387\u7684\u826f\u5bfc\u4f53 \u89e3\u51b3\u5730\u73af\u8def\u5e72\u6270\u7684\u65b9\u6cd5\uff1a\u9694\u79bb\u53d8\u538b\u5668\uff0c\u5149\u8026\u5408\uff0c\u5171\u6a21\u627c\u6d41\u5708\uff0c\u5e73\u8861\u7535\u8def \u4e32\u8054\u5355\u70b9\uff1a\u4f18\uff1a\u65b9\u6cd5\u7b80\u5355\uff1b\u7f3a\uff1a\u901a\u8fc7\u516c\u5171\u7ebf\u963b\u6297\u4ea7\u751f\u76f4\u63a5\u4f20\u5bfc\u8026\u5408 \u5e76\u8054\u5355\u70b9\uff1a\u4f18\uff1a\u907f\u514d\u516c\u5171\u963b\u6297\u8026\u5408\uff1b\u7f3a\uff1a\u63a5\u5730\u7ebf\u8fc7\u591a \u591a\u70b9\u63a5\u5730\uff1a\u4f18\uff1a\u5730\u7ebf\u77ed\uff0c\u9002\u7528\u4e8e\u9ad8\u9891\uff1b\u7f3a\uff1a\u5f62\u6210\u5730\u7ebf\u56de\u8def\uff0c\u9020\u6210\u5730\u73af\u8def\u5e72\u6270","title":"EMC"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/EMC/#emc","text":"\u4ea7\u751f\u7535\u78c1\u5e72\u6270\u7684\u6839\u672c\u539f\u56e0\uff1a\u5e72\u6270\u6e90\u548c\u654f\u611f\u8bbe\u5907\u5de5\u4f5c\u9891\u7387\uff08\u6bb5\uff09\u4e0a\u6240\u4ea7\u751f\u7684\u540c\u9891\u7387\uff08\u6bb5\uff09\u7684\u80fd\u91cf\u8026\u5408\uff0c\u4ece\u800c\u4f7f\u654f\u611f\u8bbe\u5907\u65e0\u6cd5\u5de5\u4f5c\u3002 EMC\u9886\u57df\u7684\u9891\u7387\u662f\u6307\u9891\u57df\u4e2d\u7684\u9891\u7387\uff0c\u5373\u5bf9\u5e94\u7b80\u8c10\u6ce2\u7684\u9891\u7387\u3002 \u6807\u51c6\uff1a 1. \u57fa\u7840\u6807\u51c6\uff1a\u662f\u5176\u4ed6\u7535\u78c1\u517c\u5bb9\u6807\u51c6\u7684\u57fa\u7840\uff0c\u4e00\u822c\u4e0d\u6d89\u53ca\u5177\u4f53\u7684\u4ea7\u54c1\uff0c\u5b83\u89c4\u5b9a\u4e86\u73b0\u8c61\uff0c\u73af\u5883\u7279\u5f81\uff0c\u8bd5\u9a8c\u548c\u6d4b\u8bd5\u65b9\u6cd5\uff0c\u8bd5\u9a8c\u4eea\u5668\u548c\u57fa\u672c\u8bd5\u9a8c\u88c5\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u89c4\u5b9a\u4e0d\u540c\u7684\u8bd5\u9a8c\u7535\u5e73\u8303\u56f4 2. \u901a\u7528\u6807\u51c6\uff1a\u89c4\u5b9a\u4e86\u4e00\u7cfb\u5217\u6807\u51c6\u5316\u5b9e\u9a8c\u65b9\u6cd5\u548c\u8981\u6c42\uff08\u9650\u503c\uff09\uff0c\u5e76\u7ed9\u51fa\u4e86\u8fd9\u4e9b\u65b9\u6cd5\u9002\u7528\u7684\u73af\u5883\uff0c\u5982\u679c\u67d0\u79cd\u4ea7\u54c1\u6ca1\u6709\u4ea7\u54c1\u7c7b\u6807\u51c6\u6216\u4ea7\u54c1\u6807\u51c6\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u901a\u7528\u6807\u51c6 3. \u4ea7\u54c1\u7c7b\u6807\u51c6\uff1a\u9488\u5bf9\u67d0\u7c7b\u4ea7\u54c1\u89c4\u5b9a\u4e86\u7279\u6b8a\u7684\u7535\u78c1\u517c\u5bb9\u8981\u6c42\uff08\u53d1\u5c04\u548c\u6297\u6270\u5ea6\uff09\uff0c\u4ee5\u53ca\u8be6\u7ec6\u7684\u6d4b\u91cf\u7a0b\u5e8f 4. \u4e13\u7528\u4ea7\u54c1\u6807\u51c6\uff1a\u901a\u5e38\u4e13\u7528\u4ea7\u54c1EMC\u6807\u51c6\u5305\u542b\u5728\u67d0\u79cd\u7279\u5b9a\u4ea7\u54c1\u4e2d\u7684\u4e00\u822c\u7528\u9014\u6807\u51c6\u4e2d\uff0c\u800c\u4e0d\u80fd\u5f62\u6210\u5355\u72ec\u7684\u6807\u51c6 LISN\u4f5c\u7528\uff1a 1. \u572810KHz-30MHz\u5185\uff0c\u7ed9\u76f8\u7ebf\u4e0e\u5730\u7ebf\u548c\u4e2d\u7ebf\u4e0e\u5730\u7ebf\u4e4b\u95f4\u63d0\u4f9b50 \\Omega \\Omega \u7684\u6052\u5b9a\u7535\u963b 2. \u4f7f50Hz\u621660Hz\u7684\u6709\u7528\u4fe1\u53f7\u5438\u6536\u901a\u8fc7 3. \u7ed9\u88ab\u6d4b\u8bbe\u5907\u63d0\u4f9b\u4f20\u5bfc\u5e72\u6270\u901a\u9053\u5e76\u963b\u6b62\u7535\u6e90\u4fa7\u7684\u4f20\u5bfc\u5e72\u6270 \u6d4b\u8bd5\u573a\u5730\uff1a\u51e1\u662f\u53ef\u4ee5\u8fdb\u884c\u8f90\u5c04\u53d1\u5c04\u548c\u8f90\u5c04\u6297\u6270\u5ea6\u6d4b\u8bd5\u7684\u8bbe\u65bd \u5206\u4e3a\uff1a\u7535\u78c1\u5c4f\u853d\u5ba4\uff0c\u5f00\u9614\u8bd5\u9a8c\u573a\uff0c\u534a\u7535\u6ce2\u6697\u5ba4\uff0c\u5168\u7535\u6ce2\u6697\u5ba4 \u5c4f\u853d\u6548\u80fd\uff1a\u5728\u65e0\u5c4f\u853d\u6761\u4ef6\u4e0b\u4ece\u4e00\u53d1\u5c04\u6e90\u63a5\u6536\u4fe1\u53f7\u7684\u5f3a\u5ea6\u548c\u5c4f\u853d\u5ba4\u5185\u63a5\u6536\u7684\u4fe1\u53f7\u5f3a\u5ea6\u7684\u6bd4\u503c SE_H = 20lg \\frac{H_1}{H_2} SE_H = 20lg \\frac{H_1}{H_2} \u89d2\u9525\u7684\u957f\u5ea6\u6700\u597d\u80fd\u957f\u8fc7\u6ce2\u957f\u7684 \\frac{1}{4} \\frac{1}{4} \uff0c\u9002\u5408\u9ad8\u9891 \u5bf9\u6570\u5468\u671f\u5929\u7ebf\uff1a \\alpha \\alpha \u8d8a\u5c0f\uff0c\u5438\u6536\u8d8a\u6162\uff0c\u5e26\u5bbd\u8d8a\u5927 \u6ee4\u6ce2\uff1a\u6ee4\u6ce2\u662f\u6307\u5c06\u5404\u7c7b\u4fe1\u53f7\u6309\u9891\u7387\u7279\u6027\u5206\u7c7b\u5e76\u63a7\u5236\u5b83\u4eec\u7684\u65b9\u5411\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u9891\u7387\u70b9\u8303\u56f4\u7c7b\u7684\u4fe1\u53f7\u63d0\u4f9b\u901a\u8def\uff0c\u800c\u5bf9\u53e6\u4e00\u4e9b\u9891\u7387\u70b9\u8303\u56f4\u5185\u7684\u4fe1\u53f7\u63d0\u4f9b\u963b\u65ad\u7684\u6280\u672f \u53cd\u5c04\u5f0f\u6ee4\u6ce2\u5668\uff1a\u5c06\u4e0d\u9700\u8981\u9891\u7387\u5206\u91cf\u7684\u80fd\u91cf\u53cd\u5c04\u56de\u4fe1\u53f7\u6e90\u6216\u9a9a\u6270\u6e90\uff0c\u800c\u8ba9\u9700\u8981\u9891\u7387\u5206\u91cf\u7684\u80fd\u91cf\u901a\u8fc7\u6ee4\u6ce2\u5668\u65bd\u52a0\u4e8e\u8d1f\u8f7d\uff0c\u4ece\u800c\u8fbe\u5230\u9009\u62e9\u548c\u6291\u5236\u4fe1\u53f7\u7684\u76ee\u7684 \u5438\u6536\u5f0f\u6ee4\u6ce2\u5668\uff1a\u5c06\u4e0d\u9700\u8981\u9891\u7387\u5206\u91cf\u7684\u80fd\u91cf\u6d88\u8017\u5728\u6ee4\u6ce2\u5668\u4e2d\uff0c\u5141\u8bb8\u9700\u8981\u9891\u7387\u5206\u91cf\u7684\u80fd\u91cf\u901a\u8fc7\uff0c\u8fbe\u5230\u6291\u5236\u5e72\u6270\u7684\u76ee\u7684 \u63d2\u5165\u635f\u8017\uff1a\u6ee4\u6ce2\u5668\u6ca1\u6709\u63a5\u5165\u7535\u8def\u65f6\u548c\u63a5\u5165\u7535\u8def\u65f6\uff0c\u7531\u6e90\u4f20\u9001\u7ed9\u8d1f\u8f7d\u7684\u529f\u7387\u4e4b\u6bd4\uff0c\u7531\u5206\u8d1d\u8868\u793a I_L = 10lg\\frac{P_1}{P_2} I_L = 10lg\\frac{P_1}{P_2} \u8d8a\u5927\u8d8a\u597d \u622a\u6b62\u9891\u7387\uff1a\u4fe1\u53f7\u632f\u5e45\u4e0b\u964d\u7684\u6700\u5927\u503c0.707\u500d\u7684\u9891\u7387 \u5171\u6a21\u627c\u6d41\u5708\uff1a 1. \u6291\u5236\u5171\u6a21\u5e72\u6270\u4fe1\u53f7\uff1a\u5171\u6a21\u7535\u6d41\u65b9\u5411\u76f8\u540c\uff0c\u4f20\u9012\u8fc7\u7a0b\u4e2d\uff0c\u4ea7\u751f\u5f88\u5927\u7684 \\phi \\phi \uff0c\u4e14\u4e92\u76f8\u589e\u5f3a\uff0c\u4ea7\u751f\u5f88\u5927\u7684 L_{cm} L_{cm} \uff0c z_{cm} z_{cm} \u5f88\u5927 2. \u4f7f\u5dee\u6a21\u4fe1\u53f7\u987a\u5229\u901a\u8fc7\uff1a\u5dee\u6a21\u7535\u6d41\u65b9\u5411\u76f8\u53cd\uff0c\u4ea7\u751f\u7684 \\phi \\phi \uff0c\u4e92\u76f8\u62b5\u6d88\uff0c\u5dee\u6a21\u963b\u6297\u51e0\u4e4e\u4e3a0 \u9759\u7535\u5c4f\u853d\u539f\u7406\uff1a\u5229\u7528\u5bfc\u4f53\u5728\u7535\u573a\u4e2d\u7684\u9759\u7535\u611f\u5e94\u73b0\u8c61\uff0c\u4f7f\u5bfc\u4f53\u5904\u4e8e\u9759\u7535\u5e73\u8861\u72b6\u6001\uff0c\u800c\u5904\u4e8e\u9759\u7535\u5e73\u8861\u72b6\u6001\u7684\u5bfc\u4f53\u5185\u90e8\u573a\u5f3a\u5904\u5904\u4e3a0\uff0c\u9759\u7535\u8377\u5168\u90e8\u5206\u5e03\u5728\u5bfc\u4f53\u8868\u9762\uff0c\u5185\u90e8\u6ca1\u6709\u9759\u7535\u8377 \u6750\u6599\uff1a\u7535\u826f\u5bfc\u4f53 \u5b8c\u5168\u9759\u7535\u5c4f\u853d\u5fc5\u8981\u6761\u4ef6\uff1a\u5b8c\u6574\u7684\u5bfc\u4f53\uff0c\u63a5\u5730 \u4ea4\u53d8\u7535\u573a\u5c4f\u853d\u539f\u7406\uff0c\u6750\u6599\u540c\u4e0a \u4ea4\u53d8\u78c1\u573a\u5c4f\u853d\u539f\u7406\uff1a 1. \u4f4e\u9891\uff1a\u5229\u7528\u9ad8\u78c1\u5bfc\u7684\u94c1\u78c1\u6750\u6599\uff0c\u5bf9\u9a9a\u6270\u78c1\u573a\u8fdb\u884c\u5206\u8def\uff0c\u628a\u78c1\u529b\u7ebf\u96c6\u4e2d\u5728\u5176\u5185\u90e8\u901a\u8fc7\uff0c\u9650\u5236\u5728\u7a7a\u6c14\u4e2d\u7684\u53d1\u6563 \u6750\u6599\uff1a\u9ad8\u78c1\u5bfc\u7684\u94c1\u78c1\u6750\u6599 \u9ad8\u9891\uff1a\u5229\u7528\u7535\u78c1\u611f\u5e94\u73b0\u8c61\u4ea7\u751f\u7684\u6da1\u6d41\u7684\u53cd\u78c1\u573a\u6765\u8fbe\u5230\u5c4f\u853d\u7684\u76ee\u7684\uff0c\u5373\u5229\u7528\u4e86\u6da1\u6d41\u53cd\u78c1\u573a\u5bf9\u539f\u9a9a\u6270\u78c1\u573a\u7684\u6392\u65a5\u4f5c\u7528\uff0c\u6291\u5236\u6216\u62b5\u6d88\u5c4f\u853d\u4f53\u5916\u7684\u78c1\u573a \u6750\u6599\uff1a\u4f4e\u7535\u963b\u7387\u7684\u826f\u5bfc\u4f53 \u89e3\u51b3\u5730\u73af\u8def\u5e72\u6270\u7684\u65b9\u6cd5\uff1a\u9694\u79bb\u53d8\u538b\u5668\uff0c\u5149\u8026\u5408\uff0c\u5171\u6a21\u627c\u6d41\u5708\uff0c\u5e73\u8861\u7535\u8def \u4e32\u8054\u5355\u70b9\uff1a\u4f18\uff1a\u65b9\u6cd5\u7b80\u5355\uff1b\u7f3a\uff1a\u901a\u8fc7\u516c\u5171\u7ebf\u963b\u6297\u4ea7\u751f\u76f4\u63a5\u4f20\u5bfc\u8026\u5408 \u5e76\u8054\u5355\u70b9\uff1a\u4f18\uff1a\u907f\u514d\u516c\u5171\u963b\u6297\u8026\u5408\uff1b\u7f3a\uff1a\u63a5\u5730\u7ebf\u8fc7\u591a \u591a\u70b9\u63a5\u5730\uff1a\u4f18\uff1a\u5730\u7ebf\u77ed\uff0c\u9002\u7528\u4e8e\u9ad8\u9891\uff1b\u7f3a\uff1a\u5f62\u6210\u5730\u7ebf\u56de\u8def\uff0c\u9020\u6210\u5730\u73af\u8def\u5e72\u6270","title":"EMC"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/","text":"\u901a\u4fe1\u7535\u5b50\u7ebf\u8def \u7eea\u8bba \u901a\u4fe1\u7cfb\u7edf \u5b9a\u4e49\uff1a\u5b9e\u73b0\u4fe1\u606f\u7684\u4f20\u8f93\u6240\u9700\u8bbe\u5907\u7efc\u5408 graph LR; \u4fe1\u606f-->\u8f93\u5165\u53d8\u6362\u5668; \u8f93\u5165\u53d8\u6362\u5668-->\u53d1\u9001\u8bbe\u5907; \u53d1\u9001\u8bbe\u5907-->\u4f20\u8f93\u4fe1\u9053; \u4f20\u8f93\u4fe1\u9053-->\u63a5\u53d7\u8bbe\u5907; \u63a5\u53d7\u8bbe\u5907-->\u8f93\u51fa\u53d8\u6362\u5668; \u8f93\u51fa\u53d8\u6362\u5668-->\u53d7\u4fe1\u8005; \u566a\u58f0-->\u4f20\u8f93\u4fe1\u9053; \u7ec4\u6210\uff1a\u4ee5\u4e0a5\u4e2a\u57fa\u672c\u90e8\u5206 \u8f93\u5165\u53d8\u6362\u5668\uff1a\u975e\u7535\u91cf\u8f6c\u6362\u4e3a\u57fa\u5e26\u4fe1\u53f7\u3002 \u53d1\u9001\u8bbe\u5907\uff1a\u57fa\u5e26\u4fe1\u53f7\u53d8\u6362\u4e3a\u9002\u5408\u4fe1\u9053\u4f20\u8f93\u7684\u4fe1\u53f7 \u4e24\u5927\u4efb\u52a1\uff1a 1. \u4fe1\u53f7\u53d8\u6362\uff08\u8c03\u5236\uff09 2. \u4fe1\u53f7\u653e\u5927\uff08\u7535\u538b\u548c\u529f\u7387\uff09 \u63a5\u6536\u8bbe\u5907\uff1a 1. \u89e3\u8c03 2. \u9009\u62e9\u6709\u7528\u4fe1\u53f7\uff0c\u6291\u5236\u5e72\u6270\u4fe1\u53f7 \u5206\u7c7b\uff1a\u6309\u4fe1\u9053\uff0c\u901a\u4fe1\u65b9\u5f0f\uff0c\u4f20\u8f93\u7684\u57fa\u5e26\u4fe1\u53f7\u5206 \u65e0\u7ebf\u4fe1\u9053\u53ca\u4f20\u64ad\u65b9\u5f0f \u9891\u6bb5\u7684\u5212\u5206 \u4f20\u64ad\u65b9\u5f0f\uff1a\u5730\u6ce2\uff08\u7ed5\u5c04\uff09\uff0c\u5929\u6ce2\uff08\u6298\u5c04\u548c\u53cd\u5c04\uff09\uff0c\u76f4\u7ebf\uff08\u89c6\u8ddd\uff09\u4f20\u64ad\uff0c\u51b3\u5b9a\u65b9\u5f0f\u4e3a\u4fe1\u53f7\u7684\u6ce2\u957f\uff0c\u957f\u4e2d\u6ce2\u5730\u6ce2\uff0c\u77ed\u6ce2\u5929\u6ce2\uff0c\u8d85\u77ed\u6ce2\u76f4\u7ebf \u65e0\u7ebf\u7535\u53d1\u9001\u8bbe\u5907 \u57fa\u672c\u4efb\u52a1\uff1a\u4ee5\u81ea\u7531\u7a7a\u95f4\u4e3a\u4fe1\u9053\uff0c\u628a\u4fe1\u606f\u53d8\u6362\u4e3a\u65e0\u7ebf\u7535\u6ce2\u4f20\u9001\u5230\u8fdc\u65b9 \u8981\u6c42\uff1a\u8fdc\uff0c\u591a\u8def\u4f20\u8f93 \u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u53d1\u9001\u57fa\u5e26\u4fe1\u53f7\uff1a 1. \u57fa\u5e26\u4fe1\u53f7\u662f\u4f4e\u9891\u4fe1\u53f7\uff0c\u8981\u7528\u5f88\u957f\u7684\u5929\u7ebf 2. \u5e26\u5bbd\u4e0d\u540c\uff0c\u591a\u8def\u901a\u4fe1\u56f0\u96be \u8f7d\u6ce2\u8c03\u5236\uff1a\u7528\u57fa\u5e26\u4fe1\u53f7\u53bb\u63a7\u5236\u9ad8\u9891\u8f7d\u6ce2\u4fe1\u53f7\u7684\u4e09\u53c2\u91cf\u4e4b\u4e00\uff0c\u4f7f\u5176\u968f\u57fa\u6ce2\u7ebf\u6027\u53d8\u5316 \u65b9\u5f0f\uff1a 1. \u6a21\u62df\u8c03\u5236 2. \u6570\u5b57\u8c03\u5236 graph LR; \u4e3b\u632f\u5668-->\u7f13\u51b2\u5668; \u7f13\u51b2\u5668-->\u9ad8\u9891\u653e\u5927; \u9ad8\u9891\u653e\u5927-->\u8c03\u5236\u5668; \u8c03\u5236\u5668-->\u529f\u7387\u653e\u5927; \u529f\u7387\u653e\u5927-->\u5929\u7ebf; \u8c03\u5236\u4fe1\u53f7-->\u8c03\u5236\u5668; \u8c03\u5e45\u5e7f\u64ad\u4e3a\u4f8b\uff0c\u53d8\u5316\u4e3a\uff1a graph LR; \u58f0\u7535\u53d8\u6362\u5668-->\u524d\u7f6e\u653e\u5927\u5668; \u524d\u7f6e\u653e\u5927\u5668-->\u4f4e\u9891\u529f\u7387\u653e\u5927; \u4f4e\u9891\u529f\u7387\u653e\u5927-->AM\u8c03\u5236\u5668; \u4f4e\u9891\u90e8\u5206+\u9ad8\u9891\u90e8\u5206+\u5929\u7ebf \u65e0\u7ebf\u7535\u63a5\u53d7\u8bbe\u5907 \u89e3\u8c03\uff1a\u68c0\u6ce2\uff0c\u9274\u9891\u548c\u9274\u76f8 \u76f4\u63a5\u68c0\u6ce2\u5f0f\u63a5\u6536\u673a\uff0c\u7075\u654f\u5ea6\uff0c\u9009\u62e9\u6027\u4f4e \u76f4\u63a5\u653e\u5927\u5f0f\u63a5\u6536\u673a\uff1a\u9002\u7528\u4e8e\u56fa\u5b9a\u9891\u7387\u7684\u63a5\u6536 \u8d85\u5916\u5dee\u63a5\u6536\u673a\uff0c\u540c\u65f6\u517c\u987e\u9ad8\u7075\u654f\u5ea6\u548c\u9ad8\u9009\u62e9\u6027\uff0c\u8c03\u5e45\u5e7f\u64ad\u4e3a\u4f8b\uff1a graph LR; \u5929\u7ebf-->\u9ad8\u9891\u5c0f\u4fe1\u53f7\u653e\u5927\u5668; \u9ad8\u9891\u5c0f\u4fe1\u53f7\u653e\u5927\u5668-->\u6df7\u9891\u5668; \u6df7\u9891\u5668-->\u4e2d\u9891\u653e\u5927; \u4e2d\u9891\u653e\u5927-->\u68c0\u6ce2\u5668; \u68c0\u6ce2\u5668-->\u4f4e\u9891\u7535\u538b\u653e\u5927; \u4f4e\u9891\u7535\u538b\u653e\u5927-->\u4f4e\u9891\u529f\u7387\u653e\u5927; \u672c\u673a\u632f\u8361-->\u6df7\u9891\u5668; \u901a\u4fe1\u7535\u5b50\u7ebf\u8def\u7814\u7a76\u5bf9\u8c61 \u53d1\u5c04\u8bbe\u5907\u548c\u63a5\u6536\u8bbe\u5907\u7684\u5404\u79cd\u9ad8\u9891\u7535\u8def \u9ad8\u9891\uff1a\u51e0\u767eKHz\u5230\u51e0\u767eMHz \u9ad8\u9891\u57fa\u7840\u7535\u8def LC\u4e32\u5e76\u8054\u8c10\u632f\u56de\u8def \u9ad8\u9891\u7b49\u6548\uff1a \u7535\u611f\uff1a\u7406\u60f3\u7535\u611f\u4e0e\u635f\u8017\u7535\u963b\u4e32\u8054\u6216\u635f\u8017\u7535\u5bfc\u5e76\u8054\u3002 Q_0 Q_0 \u4e3a\u7406\u60f3\u54c1\u8d28\u56e0\u6570\uff0c\u53ef\u5728\u5de5\u4f5c\u9891\u7387\u4e0b\u901a\u8fc7Q\u8868\u76f4\u63a5\u6d4b\u5f97\uff0c Q_0 \\gg 1 Q_0 \\gg 1 \u65f6\uff0c r_0=\\frac{\\omega_0L}{Q_0} r_0=\\frac{\\omega_0L}{Q_0} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">r_0=\\frac{\\omega_0L}{Q_0}</span><script type=\"math/tex\">r_0=\\frac{\\omega_0L}{Q_0} g_0=\\frac{1}{\\omega_0LQ_0} g_0=\\frac{1}{\\omega_0LQ_0} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">g_0=\\frac{1}{\\omega_0LQ_0}</span><script type=\"math/tex\">g_0=\\frac{1}{\\omega_0LQ_0} \u7535\u5bb9\uff1a\u7b49\u6548\u4e3a\u7406\u60f3\u7535\u5bb9 Q=\\frac{\\omega L}{R} Q=\\frac{\\omega L}{R} \uff0c\u5e76\u8054\u8c10\u632f\u56de\u8def Q=\\frac{R}{\\omega L}= Q=\\frac{R}{\\omega L}= \u4e32\u8054\u8c10\u632f\u56de\u8def \u8c10\u632f\u65f6\u7535\u6d41\u6700\u5927\uff0c\u963b\u6297\u6700\u5c0f\uff0c\u56de\u8def\u54c1\u8d28\u56e0\u7d20\u8d8a\u5927\uff0c\u76f8\u5bf9\u5e45\u9891\u7279\u6027\uff0c\u76f8\u5bf9\u76f8\u9891\u7279\u6027\u8d8a\u9661\uff0c\u968f \\omega \\omega \u589e\u52a0\uff0c\u963b\u6297\u7531\u5bb9\u6297\u5411\u611f\u6297\u8f6c\u5316 \u5e76\u8054\u8c10\u632f\u56de\u8def\uff1a \u7a7a\u8f7d\u65f6 \u8c10\u632f\u9891\u7387:\\omega_p=\\omega_0\\sqrt{1-\\frac{1}{Q_0^2}} \u8c10\u632f\u9891\u7387:\\omega_p=\\omega_0\\sqrt{1-\\frac{1}{Q_0^2}} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">\u8c10\u632f\u9891\u7387:\\omega_p=\\omega_0\\sqrt{1-\\frac{1}{Q_0^2}}</span><script type=\"math/tex\">\u8c10\u632f\u9891\u7387:\\omega_p=\\omega_0\\sqrt{1-\\frac{1}{Q_0^2}} Q_0 \\gg 1 Q_0 \\gg 1 \u65f6\uff0c \\omega_p=\\omega_0 \\omega_p=\\omega_0 \uff0c\u4e14\u6b64\u65f6\u6709\u56de\u8def\u7535\u963b R_p=Q_0^2r_0 R_p=Q_0^2r_0 \u5e26\u8f7d \u52a0\u4e00\u8d1f\u8f7d\uff0c\u4e0d\u5f71\u54cd\u8c10\u632f\u9891\u7387\uff0c\u8c10\u632f\u65f6\uff0c\u7535\u963b\u51cf\u5c0f\uff0c\u54c1\u8d28\u56e0\u7d20\u51cf\u5c0f\u3002 \u8c10\u632f\u65f6\u7535\u538b\u6700\u5927\uff0c\u963b\u6297\u6700\u5927\uff0c\u56de\u8def\u54c1\u8d28\u56e0\u7d20\u8d8a\u5927\uff0c\u76f8\u5bf9\u5e45\u9891\u7279\u6027\uff0c\u76f8\u5bf9\u76f8\u9891\u7279\u6027\u8d8a\u9661\uff0c\u968f \\omega \\omega \u589e\u52a0\uff0c\u963b\u6297\u7531\u611f\u6297\u5411\u5bb9\u6297\u8f6c\u5316 \u63a5\u5165\u7cfb\u6570\u4e0e\u53d8\u5316\u5173\u7cfb \u963b\u6297\u53d8\u6362\u4e3a\u9664\u4ee5 p^2 p^2 \uff0c\u5bfc\u7eb3\u53d8\u6362\u4e3a\u4e58\u4ee5 p^2 p^2 \uff0c\u7535\u538b\u6e90\u4e3a\u9664\uff0c\u7535\u6d41\u6e90\u4e3a\u4e58\u3002 \u9ad8\u9891\u5c0f\u4fe1\u53f7\u653e\u5927\u5668 \u529f\u80fd\uff1a\u5bf9\u5fae\u5f31\u9ad8\u9891\u4fe1\u53f7\u7684\u4e0d\u5931\u771f\u653e\u5927\u548c\u9009\u9891\u6ee4\u6ce2 \u7279\u70b9\uff1a 1. \u9891\u7387\u9ad8\uff0c\u4e09\u6781\u7ba1\u6781\u95f4\u7535\u5bb9\u4e0d\u80fd\u5ffd\u7565 2. \u8f93\u5165\u4fe1\u53f7\u5c0f\uff0c\u6676\u4f53\u7ba1\u5de5\u4f5c\u5728\u7ebf\u6027\u8303\u56f4 \u5206\u7c7b\uff1a\u6309\u653e\u5927\u4fe1\u53f7\u7684\u5e26\u5bbd\uff0c\u6309\u8d1f\u8f7d\u6027\u8d28 \u6280\u672f\u6307\u6807\uff1a A_u,A_p,2\\triangle f_{0.7},K_{r0.1},N_F=\\frac{P_{si}/P_{ni}}{P_{so}/P_{no}} A_u,A_p,2\\triangle f_{0.7},K_{r0.1},N_F=\\frac{P_{si}/P_{ni}}{P_{so}/P_{no}} \u5b9e\u9645\u653e\u5927\u5668\u77e9\u5f62\u7cfb\u6570\u6052\u5927\u4e8e1\uff0c\u8d8a\u5c0f\u8d8a\u597d\uff0c\u566a\u58f0\u7cfb\u6570\u63a5\u8fd1\u4e8e1\u597d \u6676\u4f53\u7ba1\u9ad8\u9891\u53c2\u6570 \u622a\u81f3\u9891\u7387 f_\\beta f_\\beta \uff0c\u7279\u5f81\u9891\u7387 f_T f_T \uff0c\u6700\u9ad8\u632f\u8361\u9891\u7387 f_{max} f_{max} |\\beta |=\\frac{\\beta_0}{\\sqrt{1-(\\frac{f}{f_\\beta})^2}} |\\beta |=\\frac{\\beta_0}{\\sqrt{1-(\\frac{f}{f_\\beta})^2}} \u5f53 \\beta \\gg 1 \\beta \\gg 1 \u65f6\uff0c f_T=\\beta_0 f_b f_T=\\beta_0 f_b \u5355\u8c03\u8c10\u56de\u8def\u8c10\u632f\u653e\u5927\u5668 \u5206\u4e3aY\u53c2\u6570\u7b49\u6548\u7535\u8def\u548c\u6df7\u5408 \\pi \\pi \u578b\u7b49\u6548\u7535\u8def Y\u53c2\u6570\u7b49\u6548\u7535\u8def y_i=\\dot{I_1}/\\dot{U_1}|_{U_2=0} y_i=\\dot{I_1}/\\dot{U_1}|_{U_2=0} \uff0c\u8f93\u51fa\u77ed\u8def\u8f93\u5165\u5bfc\u7eb3\uff0c y_o y_o \uff0c\u8f93\u51fa\u5bfc\u7eb3\uff0c y_r y_r \uff0c\u53cd\u5411\u4f20\u8f93\u5bfc\u7eb3\uff0c y_f y_f \uff0c\u6b63\u5411\u4f20\u8f93\u5bfc\u7eb3 \u5171\u5c04\u7535\u8def\uff0c\u7b80\u5316\u4e3a\uff0c y_{re}=0 y_{re}=0 \u6bcf\u7ea7\u4e09\u6781\u7ba1\u53c2\u6570\u90fd\u76f8\u540c\u65f6\uff0c\u7b49\u6548\u5230\u8c10\u632f\u56de\u8def\uff1a 1. \u5de6\u8fb9\uff1a p_1\\dot{U_i}y_{fe},p_1^2g_{oe},p_1^2C_{oe} p_1\\dot{U_i}y_{fe},p_1^2g_{oe},p_1^2C_{oe} 2. \u4e2d\u95f4\uff1a C,g_0,L C,g_0,L 3. \u53f3\u8fb9\uff1a p_2^2g_{ie},p_2^2C_{ie},\\frac{\\dot{U_o}}{p_2} p_2^2g_{ie},p_2^2C_{ie},\\frac{\\dot{U_o}}{p_2} \u7531 \\dot{U_o}=-\\frac{p_1\\dot{U_i}y_{fe}}{Y_{\\Sigma}} \\dot{U_o}=-\\frac{p_1\\dot{U_i}y_{fe}}{Y_{\\Sigma}} \u5f97\uff1a \\dot{A_u}=-\\frac{p_1p_2y_{fe}}{Y_\\Sigma} \\dot{A_u}=-\\frac{p_1p_2y_{fe}}{Y_\\Sigma} \u8c10\u632f\u65f6\u6700\u5927\uff0c\u5176\u4e2d Y_{\\Sigma}=g_{\\Sigma} Y_{\\Sigma}=g_{\\Sigma} \u76f8\u5bf9\u7535\u538b\u589e\u76ca\uff1a \\frac{\\dot{A_u}}{\\dot{A_{u0}}}=\\frac{1}{1+jQ_L2\\triangle f/f_0} \\frac{\\dot{A_u}}{\\dot{A_{u0}}}=\\frac{1}{1+jQ_L2\\triangle f/f_0} \u5176\u4e2d Q_L=1/(\\omega_0 g_{\\Sigma} L) Q_L=1/(\\omega_0 g_{\\Sigma} L) \uff0c\u82e5 \\xi=Q_L 2\\triangle f/f_0 \\xi=Q_L 2\\triangle f/f_0 \uff0c\u79f0\u4e3a\u5e7f\u4e49\u5931\u8c10 \u901a\u9891\u5e26\uff1a \\triangle 2f_{0.7} = f_0/Q_L \\triangle 2f_{0.7} = f_0/Q_L \uff0c\u77e9\u5f62\u7cfb\u6570\uff1a K_{r0.1}=\\sqrt{99} \\gg 1 K_{r0.1}=\\sqrt{99} \\gg 1 \u9009\u62e9\u6027\u5dee \u901a\u9891\u5e26\u548c\u8c10\u632f\u7535\u538b\u589e\u76ca\u4e3a\u5e38\u6570 \u591a\u7ea7\u5355\u8c03\u8c10\u56de\u8def\u8c10\u632f\u653e\u5927\u5668 A_m=(A_{u1})^m A_m=(A_{u1})^m \\frac{A_m}{A_{mo}} = \\frac{1}{(1+(Q_L 2 \\triangle f/f_0)^2)^{m/2}} \\frac{A_m}{A_{mo}} = \\frac{1}{(1+(Q_L 2 \\triangle f/f_0)^2)^{m/2}} (2 \\triangle f_{0.7})_m = \\sqrt{2^{1/m}-1} (2 \\triangle f_{0.7})_1 (2 \\triangle f_{0.7})_m = \\sqrt{2^{1/m}-1} (2 \\triangle f_{0.7})_1 \u7ea7\u6570\u8d8a\u591a\uff0c\u901a\u9891\u5e26\u8d8a\u7a84\uff0c\u77e9\u5f62\u7cfb\u6570\u8d8a\u5c0f \u7a33\u5b9a\u6027 \u5f15\u8d77\u4e0d\u7a33\u5b9a\u7684\u539f\u56e0\uff1a y_{re} \\neq 0 y_{re} \\neq 0 \uff0c\u53ef\u80fd\u6784\u6210\u6b63\u53cd\u9988 \u7a33\u5b9a\u7cfb\u6570\uff1a S = \\dot{U_i}/\\dot{U_i'} S = \\dot{U_i}/\\dot{U_i'} \uff0c\u5176\u4e2d \\dot{U_i'} \\dot{U_i'} \u4e3a\u6b63\u53cd\u9988\u7535\u538b S\u8d8a\u5927\uff0c\u8d8a\u7a33\u5b9a\uff0c\u4e00\u822c\u8981\u6c42 \\ge 5 \\ge 5 \u7a33\u5b9a\u7535\u538b\u589e\u76ca\uff1a\u4e0d\u52a0\u7a33\u5b9a\u63aa\u65bd\uff0c\u5e76\u6ee1\u8db3S\u7684\u5de5\u4f5c\u4e8e\u8c10\u632f\u9891\u7387\u7684\u6700\u5927\u7535\u538b\u589e\u76ca |A_{u0}|=\\sqrt{\\frac{2|y_{fe|}}{S|y_{re}|(1+cos(\\phi_{re}+\\phi_{fe}))}} |A_{u0}|=\\sqrt{\\frac{2|y_{fe|}}{S|y_{re}|(1+cos(\\phi_{re}+\\phi_{fe}))}} \u63d0\u9ad8\u7a33\u5b9a\u6027\u63aa\u65bd\uff1a 1. \u4e2d\u548c\u6cd5\uff1a\u7535\u6d41\u5927\u5c0f\u76f8\u540c\uff0c\u65b9\u5411\u76f8\u53cd \u53ea\u80fd\u5bf9\u4e00\u4e2a\u9891\u7387\u70b9\u8d77\u5230\u5b8c\u5168\u4e2d\u548c\u4f5c\u7528 2. \u5931\u914d\u6cd5\uff1a\u5b9e\u8d28\u662f\u964d\u4f4e\u7535\u538b\u589e\u76ca \u9ad8\u9891\u529f\u7387\u653e\u5927\u5668 \u529f\u80fd\uff1a\u7528\u5c0f\u529f\u7387\u7684\u9ad8\u9891\u8f93\u5165\u4fe1\u53f7\u53bb\u63a7\u5236\u9ad8\u9891\u529f\u7387\u653e\u5927\u5668\u5c06\u76f4\u6d41\u7535\u6e90\u4f9b\u7ed9\u7684\u80fd\u91cf\u8f6c\u5316\u4e3a\u5927\u529f\u7387\u9ad8\u9891\u80fd\u91cf\u8f93\u51fa \u5206\u7c7b\uff1a\u6309\u5de5\u4f5c\u9891\u7387\uff0c\u6309\u5de5\u4f5c\u7c7b\u578b \u6280\u672f\u6307\u6807\uff1a\u8f93\u51fa\u529f\u7387\uff0c\u6548\u7387\uff0c\u529f\u7387\u589e\u76ca\uff0c\u8c10\u6ce2\u6291\u5236\u5ea6\uff08\u975e\u7ebf\u6027\u529f\u653e\uff09 \u4e2d\u95f4\u7ea7\u548c\u8f93\u51fa\u7ea7\u90fd\u53ef\u7b49\u6548\u4e3a\u8f93\u5165\u56de\u8def\uff0c\u975e\u7ebf\u6027\u5668\u4ef6\uff0c\u5e26\u901a\u6ee4\u6ce2 \u7279\u70b9\uff1a 1. \u653e\u5927\u5668\uff1a\u9759\u6001\u622a\u6b62\uff0c\u52a8\u6001\u5bfc\u901a\u548c\u622a\u6b62 2. \u8c10\u632f\u56de\u8def\uff1a\u9009\u9891\uff0c\u963b\u6297\u5339\u914d \u6298\u7ebf\u5206\u6790\u6cd5 \u4e09\u6781\u7ba1\u7684\u4e09\u79cd\u7279\u6027\u66f2\u7ebf\uff1a\u8f93\u5165\u7279\u6027\uff0c\u8f93\u51fa\u7279\u6027\uff0c\u6b63\u5411\u4f20\u8f93\u7279\u6027 g_r g_r \u4e3a\u6b63\u5411\u4f20\u8f93\u7279\u6027\u66f2\u7ebf\u659c\u7387\uff0c g_{cr} g_{cr} \u8f93\u51fa\u7279\u6027\u66f2\u7ebf\u9971\u548c\u533a\u7684\u659c\u7387\uff0c\u5176\u653e\u5927\u533a\u95f4\u9694\u9664\u4ee5 u_{be} u_{be} \u53d8\u6362\u5e94\u4e3a g_r g_r \u8f93\u5165\u4fe1\u53f7 u_{bm}cos(\\omega t) u_{bm}cos(\\omega t) \uff0c \\omega t = 0 \\omega t = 0 \u65f6\uff0c i_c i_c \u6700\u5927\uff0c \\omega t = \\theta_c \\omega t = \\theta_c \u65f6\uff0c i_c i_c \u4e3a0\uff0c \\theta_c \\theta_c \u5373\u4e3a\u5bfc\u901a\u89d2 cos \\theta_c = \\frac{U_{BZ}-V_{BB}}{U_{bm}} cos \\theta_c = \\frac{U_{BZ}-V_{BB}}{U_{bm}} i_c = I_{cM}\\frac{cos(\\omega t)-cos\\theta_c}{1-cos\\theta_c} i_c = I_{cM}\\frac{cos(\\omega t)-cos\\theta_c}{1-cos\\theta_c} \u4ee4\u96c6\u7535\u6781\u7535\u538b\u5229\u7528\u7cfb\u6570 \\xi = U_{cm}/V_{cc} \\xi = U_{cm}/V_{cc} \uff0c\u6ce2\u5f62\u7cfb\u6570 g_1 = \\alpha_1/\\alpha_0 g_1 = \\alpha_1/\\alpha_0 \uff0c U_{cm}=I_{c1m}R_P U_{cm}=I_{c1m}R_P \\eta = \\frac{P_o}{P_=} = \\frac{1}{2} \\frac{U_{cm}I_{c1m}}{V_{cc}I_{c0}} = \\frac{1}{2} \\xi g_1(\\theta_c) \\eta = \\frac{P_o}{P_=} = \\frac{1}{2} \\frac{U_{cm}I_{c1m}}{V_{cc}I_{c0}} = \\frac{1}{2} \\xi g_1(\\theta_c) \u517c\u987e\u6548\u7387\u548c\u8f93\u51fa\u529f\u7387\uff1a \\theta_c \\theta_c \u4e00\u822c\u53d660-80\u00b0 \u52a8\u6001\u7279\u6027 \u6676\u4f53\u7ba1\uff0c\u7535\u6e90\u53c2\u6570\u786e\u5b9a\u6761\u4ef6\u4e0b\uff0c\u4fe1\u53f7\u632f\u5e45\u4e00\u5b9a\uff0c i_c = f(u_{be},u{ce}) i_c = f(u_{be},u{ce}) \u7684\u5173\u7cfb \u622a\u8ddd\u6cd5\uff1a\u659c\u7387+\u622a\u8ddd+ (u_{cemax},0) (u_{cemax},0) i_c = g_d(u_{ce}-U_0) i_c = g_d(u_{ce}-U_0) \u5f0f\u4e2d g_d = -g_c \\frac{u_{bm}}{u_{cm}} g_d = -g_c \\frac{u_{bm}}{u_{cm}} \uff0c U_0 = V_{cc}-u_{cm}cos\\theta_c U_0 = V_{cc}-u_{cm}cos\\theta_c \u865a\u62df\u7535\u6d41\u6cd5\uff1a (u_{cemin},u_{bemax}) (u_{cemin},u_{bemax}) + (V_{cc},I_Q) (V_{cc},I_Q) + (u_{cemax},0) (u_{cemax},0) I_Q = -g_c (U_{BZ}-V_{BB}) I_Q = -g_c (U_{BZ}-V_{BB}) \u5de5\u4f5c\u72b6\u6001\uff1a\u6b20\u538b\uff0c\u4e34\u754c\u548c\u8fc7\u538b \u8d1f\u8f7d\u7279\u6027 \u7535\u6e90\uff0c\u4e09\u6781\u7ba1\u53c2\u6570\uff0c U_{bm} U_{bm} \u4e00\u5b9a\uff0c\u6539\u53d8 R_P R_P \u5de5\u4f5c\u72b6\u6001\uff0c\u7535\u538b\uff0c\u7535\u6d41\uff0c\u529f\u7387\uff0c\u6548\u7387\u7684\u53d8\u5316 \u7528\u52a8\u6001\u7279\u6027\u5206\u6790\uff1a\u968f R_P R_P \u589e\u5927\uff0c I_Q ,u_{bemin} ,\\theta_c ,I_{cM} I_Q ,u_{bemin} ,\\theta_c ,I_{cM} \u4e0d\u53d8\uff0c u_{cm} u_{cm} \u589e\u5927\uff0c\u659c\u7387\u51cf\u5c0f\uff0c\u5de5\u4f5c\u72b6\u6001\u7531\u6b20\u538b\u5411\u8fc7\u538b\u8f6c\u5316\u3002 \u4f46\u5728\u8fc7\u538b\u533a\uff0c\u7535\u6d41\u4e0d\u518d\u662f\u5c16\u9876\u8109\u51b2\uff0c\u5206\u89e3\u7cfb\u6570\u6539\u53d8\uff0c\u7535\u6d41\u51cf\u5c0f\uff0c\u4f46 u_{cm} u_{cm} \u589e\u957f\u51cf\u7f13 \u8f93\u51fa\u529f\u7387\u5728\u4e34\u754c\u72b6\u6001\u8fbe\u5230\u5cf0\u503c\uff0c\u7528\u4e8e\u672b\u7ea7\uff0c\u6548\u7387\u5728\u5f31\u8fc7\u538b\u533a\u8fbe\u5230\u5cf0\u503c\uff0c\u968f\u540e\u4e0b\u964d\uff0c\u7528\u4e8e\u4e2d\u95f4\u653e\u5927\u7ea7 \u6b64\u5916 R_P R_P \u4e00\u5b9a\u4e0d\u8981\u4e3a0 \u5404\u7ea7\u7535\u538b\u5f71\u54cd \u7528\u52a8\u6001\u7279\u6027\u5206\u6790\u5373\u53ef \u4e19\u7c7b\u529f\u653e\u7535\u8def \u8f93\u5165\u8f93\u51fa\u56de\u8def\u529f\u80fd\uff1a 1. \u6b63\u5e38\u504f\u7f6e 2. \u9009\u9891 3. \u963b\u6297\u5339\u914d \u96c6\u7535\u6781\u9988\u7535\uff1a\u4e32\u8054\u9988\u7535\uff0c\u5e76\u8054\u9988\u7535 \u57fa\u6781\u9988\u7535\uff1a\u3010\u4e32\u8054\u9988\u7535\uff0c\u5e76\u8054\u9988\u7535\u3011\u3010\u5916\u52a0\u504f\u538b\uff0c\u81ea\u7ed9\u504f\u538b\u3011 \u5339\u914d\u7f51\u7edc \u5bbd\u9891\u5e26\u529f\u653e \u4f20\u8f93\u7ebf\u53d8\u538b\u5668\uff1a\u4f20\u9012\u80fd\u91cf\u7684\u4e24\u79cd\u65b9\u5f0f 1:1\u4f20\u8f93\u7ebf\u53d8\u538b\u5668\u6700\u4f73\u5339\u914d\u6761\u4ef6\uff1a Z_C = R_S = R_L Z_C = R_S = R_L \uff0c\u7528\u4f5c\u5012\u76f8\u5668 \u963b\u6297\u53d8\u6362\u4f20\u8f93\u7ebf\u53d8\u538b\u5668\uff0c Z_i/Z_o Z_i/Z_o \u5c31\u662f\u51e0\u6bd4\u51e0\u7684\u963b\u6297\u53d8\u6362 \u529f\u7387\u5408\u6210 \u7531\u529f\u7387\u653e\u5927\u5668\uff0c\u529f\u7387\u5206\u914d\u5668\uff0c\u529f\u7387\u5408\u6210\u7f51\u7edc\u7ec4\u6210 \u539f\u7406\uff1aN\u4e2a\u529f\u653e\uff0c\u901a\u8fc7\u6df7\u5408\u7535\u8def\u4f7f\u8f93\u51fa\u529f\u7387\u5728\u516c\u5171\u8d1f\u8f7d\u4e0a\u53e0\u52a0\u8d77\u6765 \u6b63\u5f26\u6ce2\u632f\u8361\u5668 \u5206\u7c7b\uff1a\u6309\u6ce2\u5f62\uff0c\u6309\u539f\u7406\uff0c\u6309\u5143\u4ef6 \u4e3b\u8981\u6280\u672f\u6307\u6807\uff1a\u632f\u8361\u9891\u7387\uff0c\u9891\u7387\u7a33\u5b9a\u5ea6\uff0c\u632f\u8361\u5e45\u5ea6\uff0c\u632f\u8361\u6ce2\u5f62 \u53cd\u9988\u578bLC\u632f\u8361 \u8c03\u8c10\u653e\u5927\u5668+\u6b63\u53cd\u9988\u7f51\u7edc \u8d77\u632f\u6761\u4ef6\uff1a\u589e\u5e45\u632f\u8361 1. \u632f\u5e45\u8d77\u632f\uff1a A_0 F > 1 A_0 F > 1 2. \u76f8\u4f4d\u8d77\u632f\uff1a \\phi_A + \\phi_F = 2n\\pi \\phi_A + \\phi_F = 2n\\pi \u5e73\u8861\u6761\u4ef6\uff1a\u7b49\u5e45\u632f\u8361 A = g_c R_P (1-cos\\theta_c)\\alpha_1(\\theta_c) = A_0v(\\theta_c) A = g_c R_P (1-cos\\theta_c)\\alpha_1(\\theta_c) = A_0v(\\theta_c) \u6700\u540e\u5de5\u4f5c\u72b6\u6001\u7531 A_0 F A_0 F \u51b3\u5b9a\uff0c\u4e5f\u51b3\u5b9a\u4e86\u632f\u5e45 \\dot{U_i}\\xrightarrow[\\phi_Y]{Y_{fe}} \\dot{I_c}\\xrightarrow[\\phi_z]{Z_{p1}} \\dot{U_{c1}}\\xrightarrow[\\phi_F]{F} \\dot{U_F} \\dot{U_i}\\xrightarrow[\\phi_Y]{Y_{fe}} \\dot{I_c}\\xrightarrow[\\phi_z]{Z_{p1}} \\dot{U_{c1}}\\xrightarrow[\\phi_F]{F} \\dot{U_F} \\phi_F + \\phi_Y \\neq 0 \\phi_F + \\phi_Y \\neq 0 \uff0c\u56de\u8def\u5fae\u5c0f\u5931\u8c03\uff0c\u4f46\u8fd1\u4f3c\u4e3a\u56de\u8def\u8c10\u632f\u9891\u7387 \u7a33\u5b9a\u6761\u4ef6\uff1a 1. \u632f\u5e45\u7a33\u5b9a\uff1a \\frac{\\partial A}{\\partial U_c}|_{U_c = U_{cQ}} < 0 \\frac{\\partial A}{\\partial U_c}|_{U_c = U_{cQ}} < 0 <span class=\"arithmatex\"><span class=\"MathJax_Preview\">\\frac{\\partial A}{\\partial U_c}|_{U_c = U_{cQ}} &lt; 0</span><script type=\"math/tex\">\\frac{\\partial A}{\\partial U_c}|_{U_c = U_{cQ}} < 0 \u63aa\u65bd\uff1a\u8c03\u8282\u9759\u6001\u5de5\u4f5c\u70b9\uff0c\u5373 A_0 A_0 \uff1b\u8c03\u8282F 2. \u76f8\u4f4d\u7a33\u5b9a\uff1a \\frac{\\partial \\phi_Z}{\\partial \\omega} < 0 \\frac{\\partial \\phi_Z}{\\partial \\omega} < 0 <span class=\"arithmatex\"><span class=\"MathJax_Preview\">\\frac{\\partial \\phi_Z}{\\partial \\omega} &lt; 0</span><script type=\"math/tex\">\\frac{\\partial \\phi_Z}{\\partial \\omega} < 0 \u6309\u53cd\u9988\u8026\u5408\u5143\u4ef6\u5206\uff1a\u4e92\u611f\u8026\u5408\u632f\u8361\u5668\uff0c\u7535\u5bb9\u53cd\u9988\u5f0f\u632f\u8361\u5668\uff0c\u7535\u611f\u53cd\u9988\u5f0f\u632f\u8361\u5668 \u4e92\u611f\u8026\u5408\u632f\u8361\u7535\u8def \u5171\u3010\u3011\u8c03\u3010\u3011\u578b\uff0c\u77ac\u65f6\u6781\u6027\u6cd5\u5224\u65ad\uff0c f_0 = \\frac{1}{2\\pi\\sqrt{L_1 C}} f_0 = \\frac{1}{2\\pi\\sqrt{L_1 C}} \u4f18\u70b9\uff1a\u8c03\u6574\u53cd\u9988\u65f6\uff0c\u4e0d\u4f1a\u5f71\u54cd\u632f\u8361\u9891\u7387 \u7f3a\u70b9\uff1a\u9891\u7387\u4e0d\u5b9c\u8fc7\u9ad8 \u8003\u6bd4\u5179\u632f\u8361\u5668 \u5171\u5c04\u65f6\uff1a A_0 = \\frac{|y_{fe}|}{g_\\Sigma} ,F = \\frac{c_1'}{c_2'} A_0 = \\frac{|y_{fe}|}{g_\\Sigma} ,F = \\frac{c_1'}{c_2'} \u5f0f\u4e2d g_\\Sigma = g_{oe}+g_0 p_1^2+g_{ie} p^2+g_L g_\\Sigma = g_{oe}+g_0 p_1^2+g_{ie} p^2+g_L \u8d77\u632f\u6761\u4ef6\uff1a\u4e09\u6781\u7ba1\u9009\u5b9a\u540e\uff0c\u66f4\u6539F\u548c g_L g_L \u7684\u503c \u8c10\u632f\u9891\u7387\uff1a \\omega_0 = 1/\\sqrt{C_\\Sigma L} \\omega_0 = 1/\\sqrt{C_\\Sigma L} \u54c8\u83b1\u7279\u632f\u8361\u5668 \u5171\u5c04\uff1a F = \\frac{L_2+M}{L_1+M} F = \\frac{L_2+M}{L_1+M} \u8d77\u632f\u6761\u4ef6\u548c\u8003\u6bd4\u5179\u76f8\u540c\uff0c\u4f46 g_0' g_0' \u4e0d\u540c \u632f\u8361\u9891\u7387\uff1a \\omega_0 = \\frac{1}{\\sqrt{LC}} \\omega_0 = \\frac{1}{\\sqrt{LC}} \uff0c L = L_1+L_2+2M L = L_1+L_2+2M \u4e24\u79cd\u7535\u8def\u6bd4\u8f83\uff1a\u611f\u89c9\u7535\u5bb9\u4e09\u70b9\u5f0f\u597d\u70b9 \u5224\u65ad\u51c6\u5219 \u6ce8\u610f\uff1ac ,e ,b \u5bf9\u4e8e\u632f\u8361\u9891\u7387\uff1a X_{ce}+X_{eb}+X_{cb}=0 X_{ce}+X_{eb}+X_{cb}=0 \u9891\u7387\u7a33\u5b9a\u539f\u7406 \u7edd\u5bf9\u9891\u7387\u504f\u5dee\uff0c\u76f8\u5bf9\u9891\u7387\u504f\u5dee \u7a33\u5b9a\u5ea6\uff1a\u4e00\u5b9a\u65f6\u95f4\u95f4\u9694\u5185\uff0c\u76f8\u5bf9\u9891\u7387\u504f\u5dee\u6700\u5927\u503c\uff0c\u957f\uff0c\u77ed\uff0c\u77ac\u65f6 \\omega_0 ,\\phi_{YF} ,Q_L \\omega_0 ,\\phi_{YF} ,Q_L \u53d8\u6362\uff0c\u4f1a\u5f15\u8d77\u7a33\u5b9a\u5ea6\u53d8\u5316 \u5916\u56e0\u4f1a\u5f15\u8d77\u8fd9\u4e09\u8005\u53d8\u5316 \u63aa\u65bd\uff1a\u51cf\u5c0f\u5916\u56e0\uff0c\u63d0\u9ad8\u53c2\u6570\u6297\u5916\u56e0\u80fd\u529b \u9ad8\u7a33\u5b9a\u5ea6LC\u632f\u8361\u5668 \u4e00\u822c\u7684 \\triangle C_\\Sigma = p_1^2 \\triangle C_o+p_2^2 \\triangle C_i \\triangle C_\\Sigma = p_1^2 \\triangle C_o+p_2^2 \\triangle C_i p_1 ,p_2 p_1 ,p_2 \u4e0d\u53ef\u80fd\u540c\u65f6\u51cf\u5c0f\uff0c\u6545\u7a33\u5b9a\u5ea6\u4e0d\u9ad8 Clapp \u4e32\u4e00\u4e2a C_3 C_3 \uff0c\u6ee1\u8db3\u4e8e C_3 \\ll C_1 ,C_3 \\ll C_2 C_3 \\ll C_1 ,C_3 \\ll C_2 \uff0c \u5c31\u6709 C_\\Sigma \\approx C_3 C_\\Sigma \\approx C_3 p_1 \\approx \\frac{C_3}{C_1'} p_1 \\approx \\frac{C_3}{C_1'} \uff0c P_2 \\approx \\frac{C_3}{C_2'} P_2 \\approx \\frac{C_3}{C_2'} p_1 ,p_2 p_1 ,p_2 \u53ef\u4ee5\u540c\u65f6\u51cf\u5c0f\uff0c\u4f46\u53d7\u8d77\u632f\u6761\u4ef6\u7684\u9650\u5236\uff0c\u7528\u4f5c\u56fa\u5b9a\u9891\u7387\u632f\u8361\u5668 Siler \u5728Clapp\u57fa\u7840\u4e0a\u5728L\u4e0a\u5e76\u4e00\u4e2a C_4 C_4 \uff0c\u548c C_3 C_3 \u4e00\u4e2a\u6570\u91cf\u7ea7 \u7528\u4f5c\u53d8\u9891\u632f\u8361\u5668 \u6676\u4f53\u632f\u8361\u7535\u8def \u538b\u7535\u6548\u5e94 \u7b49\u6548\u4e3a L_q ,C_q ,r_q ,C_0 L_q ,C_q ,r_q ,C_0 \uff0c\u5176 Q_q Q_q \u5f88\u9ad8 \\omega_p - \\omega_q \\omega_p - \\omega_q \u5f88\u5c0f \u4e24\u79cd\u6a21\u5f0f\uff1a \\omega = \\omega_q \\omega = \\omega_q \uff0c\u77ed\u8def\u7ebf\uff0c \\omega_q < \\omega < \\omega_p \\omega_q < \\omega < \\omega_p \uff0c\u7535\u611f \u632f\u5e45\u8c03\u5236\u7535\u8def \u666e\u901a\u8c03\u5e45\u6ce2\uff08AM\uff09 u(t) = U_{cm}(1+m_a cos(\\Omega t))cos(\\omega_c t) u(t) = U_{cm}(1+m_a cos(\\Omega t))cos(\\omega_c t) \u5f0f\u4e2d m_a = \\frac{K_a U_{\\Omega m}}{U_{cm}} m_a = \\frac{K_a U_{\\Omega m}}{U_{cm}} \u4e3a\u8c03\u5e45\u6307\u6570 \u9891\u8c31\uff1a\u8fb9\u9891\u5e45\u5ea6\u4e3a \\frac{1}{2} m_a U_{cm} \\frac{1}{2} m_a U_{cm} \uff0c\u8f7d\u9891\u5e45\u5ea6\u4e3a U_{cm} U_{cm} \u52a0\u5728R\u4e24\u7aef\u529f\u7387\uff1a 1. \u8f7d\u6ce2\u529f\u7387 P_{OT} P_{OT} 2. \u8fb9\u9891\u529f\u7387 \\frac{1}{4} m_a^2 P_{OT} \\frac{1}{4} m_a^2 P_{OT} DSB\u6ce2 AM\u6ce2\u57fa\u7840\u4e0a\u53bb\u6389\u8f7d\u6ce2\u9891\u6bb5 \u5b9e\u8d28\u5c31\u662f\u8f7d\u6ce2\u632f\u8361\u4fe1\u53f7\u76f4\u63a5\u4e58\u4ee5\u8c03\u5236\u4fe1\u53f7 u(t) = \\frac{1}{2}U_{cm}U_{\\Omega m}(\\cdots) u(t) = \\frac{1}{2}U_{cm}U_{\\Omega m}(\\cdots) \u6ce8\u610f\u4e0b\uff1a\u8f7d\u6ce2\u76f8\u4f4d\u5728\u8c03\u5236\u7535\u538b\u96f6\u70b9\u7a81\u53d8180\u00b0 SSB\u6ce2 \u53bb\u6389DSB\u6ce2\u7684\u67d0\u4e00\u8fb9\u9891 \u7535\u8def \u5206\u7c7b\uff1a 1. \u4f4e\u7535\u9891\u8c03\u5236 \u91cd\u70b9\u662f\u63d0\u9ad8\u8c03\u5236\u7684\u7ebf\u6027 2. \u9ad8\u7535\u5e73\u8c03\u5236 \u8981\u517c\u987e\u8f93\u51fa\u529f\u7387\uff0c\u6548\u7387\u548c\u8c03\u5236\u7ebf\u6027 \u7ec4\u6210\uff1a\u8f93\u5165\u56de\u8def\uff0c\u975e\u7ebf\u6027\u5668\u4ef6\u548c\u5e26\u901a\u6ee4\u6ce2\u5668 \u4f4e\u7535\u5e73\u8c03\u5e45\u7535\u8def \u7b97\u51fa\u7ecf\u8fc7\u8d1f\u8f7d\u7684\u7535\u6d41\uff0c\u5e26\u901a\u6ee4\u6ce2\u53d6\u5176\u4e0a\u7684\u7535\u538b \u5f00\u5173\u51fd\u6570\u542b\u76f4\u6d41\u548c\u9891\u7387\u7684\u5947\u6570\u5206\u91cf\uff0c\u53bb\u6389\u76f4\u6d41\u5206\u91cf\uff0c\u5176\u5076\u6570\u9879\u4e3a\u8d1f \u5355\u4e8c\u6781\u7ba1\u5f00\u5173\u8c03\u5e45\u7535\u8def\uff1a U_{cm} \\gg U_{\\Omega m} U_{cm} \\gg U_{\\Omega m} \uff0c U_{cm} U_{cm} \u63a7\u5236\u4e8c\u6781\u7ba1\u7684\u5f00\u5173\u72b6\u6001 \u53ea\u80fd\u5b9e\u73b0AM\u6ce2 \u4e8c\u6781\u7ba1\u5e73\u8861\u8c03\u5e45\u7535\u8def \u6ce8\u610f\u4e0b\u531d\u6570\u6bd4\uff0c\u5373\u8d1f\u8f7d\u503c \u8ba1\u7b97\u5148\u5224\u65ad\u4e8c\u6781\u7ba1\u5728\u8f7d\u6ce2\u6b63\u8d1f\u5468\u671f\u7684\u5de5\u4f5c\u72b6\u6001\uff0c\u6b63\u8d1f\u5468\u671f\u7535\u6d41\u5206\u5f00\u8ba1\u7b97\uff0c\u6b64\u7535\u8def\u90fd\u662f\u6b63\u5468\u671f\u5bfc\u901a \u7136\u540e\u6839\u636e\u4e8c\u6781\u7ba1\u5bfc\u901a\u6807\u7535\u6d41\u65b9\u5411\uff0c\u6309\u7535\u6d41\u65b9\u5411\u786e\u5b9a\u7535\u538b\u6b63\u8d1f \u53ef\u4ee5DSB\u6ce2 \u4e8c\u6781\u7ba1\u73af\u5f62\u8c03\u5e45\u7535\u8def \u6ce8\u610f\u5224\u65ad\u4e8c\u6781\u7ba1\u5bfc\u901a\u53cd\u5411\uff0c\u6b64\u5916\u8f7d\u6ce2\u8d1f\u534a\u5468\u671f\u5f00\u5173\u51fd\u6570\u5947\u6570\u9879\u4e3a\u8d1f DSB\u6ce2\uff0c\u6bd4\u8d77\u5e73\u8861\u8c03\u5e45\uff0c\u8fdb\u4e00\u6b65\u6291\u5236\u4e86 \\Omega \\Omega \u5206\u91cf\uff0c\u4e14\u5e45\u5ea6\u662f\u5176\u4e8c\u500d \u6a21\u62df\u4e58\u6cd5\u5668\u8c03\u5e45\u7535\u8def\uff08\u53cc\u5dee\u5206\u5bf9\u7ba1\u632f\u5e45\u8c03\u5236\u7535\u8def\uff09 i = I_0 th(\\frac{qu_1}{2kT}) th(\\frac{qu_2}{2kT}) i = I_0 th(\\frac{qu_1}{2kT}) th(\\frac{qu_2}{2kT}) <span class=\"arithmatex\"><span class=\"MathJax_Preview\">i = I_0 th(\\frac{qu_1}{2kT}) th(\\frac{qu_2}{2kT})</span><script type=\"math/tex\">i = I_0 th(\\frac{qu_1}{2kT}) th(\\frac{qu_2}{2kT}) \u5c06\u6052\u6d41\u6e90\u5206\u4e3a\u4e24\u4e2a\u540e\uff0c\u63a5\u5165\u8d1f\u53cd\u9988\u7535\u963b\uff0c\u53d8\u4e3a\uff1a i = \\frac{2 u_2}{R_y} th(\\frac{qu_1}{2kT}) i = \\frac{2 u_2}{R_y} th(\\frac{qu_1}{2kT}) <span class=\"arithmatex\"><span class=\"MathJax_Preview\">i = \\frac{2 u_2}{R_y} th(\\frac{qu_1}{2kT})</span><script type=\"math/tex\">i = \\frac{2 u_2}{R_y} th(\\frac{qu_1}{2kT}) \u5f0f\u4e2d -I_0/2 \\le u_2/R_y \\le I_0/2 -I_0/2 \\le u_2/R_y \\le I_0/2 \u9ad8\u7535\u5e73\u8c03\u5e45\u7535\u8def \u53ea\u80fd\u8c03AM\u6ce2 \u96c6\u7535\u6781\u8c03\u5e45\u7535\u8def\uff1a \u4e19\u7c7b\u529f\u653e\u8fc7\u538b\u533a\u5177\u6709\u8c03\u5e45\u7279\u6027\uff0c I_{c0} ,I_{c1m} I_{c0} ,I_{c1m} \u968f V_{cc} V_{cc} \u7ebf\u6027\u53d8\u5316 V_{cc} = V_{CT}(1+m_a cos(\\Omega t)) V_{cc} = V_{CT}(1+m_a cos(\\Omega t)) \u8c03\u5236\u4fe1\u53f7\u4e00\u5468\u5e73\u5747\u72b6\u6001\u4e0b\uff0c P_{= av} = P_{=} + P_{\\omega} = (1+(\\frac{m_a}{2})^2)P_{=T} P_{= av} = P_{=} + P_{\\omega} = (1+(\\frac{m_a}{2})^2)P_{=T} \\eta_c = constant \\eta_c = constant \u6ce8\u610f\uff1a\u9009\u62e9\u6676\u4f53\u7ba1\u662f P_{CM} > P_{=av} P_{CM} > P_{=av} \uff0c\u8c03\u5236\u4fe1\u53f7\u6e90\u5fc5\u987b\u662f\u529f\u7387\u6e90 \u57fa\u6781\u8c03\u5e45\u7535\u8def\uff1a \u6b20\u538b\u533a\uff0c\u6548\u7387\u53d8\u5316\uff0c\u8f93\u51fa\u529f\u7387\u90fd\u662f\u76f4\u6d41\u7535\u6e90\u63d0\u4f9b\uff0c\u7ebf\u6027\u8303\u56f4\u5c0f \u5355\u8fb9\u5e26\u4fe1\u53f7\u4ea7\u751f \u6ee4\u6ce2\u6cd5\u548c\u79fb\u5411\u6cd5 \u6ee4\u6ce2\u6cd5 \u76f4\u63a5\u6ee4\u6ce2\u56f0\u96be\uff0c\u76f8\u5bf9\u5e26\u5bbd\u5f88\u5c0f\uff0c\u5b9e\u9645\u4e2d\u964d\u4f4e\u6bcf\u6b21\u7684\u8f7d\u6ce2\u9891\u7387\uff0c\u589e\u5927\u76f8\u5bf9\u5e26\u5bbd\uff0c\u8fdb\u884c\u591a\u6b21\u8c03\u5236 \u79fb\u76f8\u6cd5 cos()cos()-sin()sin() cos()cos()-sin()sin() \u8981\u6c42\u51c6\u786e\u79fb90\u00b0 \u68c0\u6ce2\u5668 \u7ec4\u6210\uff1a\u8f93\u5165\u56de\u8def\uff0c\u975e\u7ebf\u6027\u5668\u4ef6\uff0c\u4f4e\u901a\u6ee4\u6ce2 \u5206\u7c7b\uff1a 1. \u5305\u7edc\u68c0\u6ce2\uff0c\u666e\u901a\u8c03\u5e45\u6ce2\u548c\u9ad8\u9891\u7b49\u5e45\u6ce2 2. \u540c\u6b65\u68c0\u6ce2\uff0c\u53cc\u8fb9\u5e26\u548c\u5355\u8fb9\u5e26\u68c0\u6ce2 \u6307\u6807\uff1a\u7535\u538b\u4f20\u8f93\u7cfb\u6570\uff0c\u7b49\u6548\u8f93\u5165\u7535\u963b\uff0c\u975e\u7ebf\u6027\u5931\u771f\u7cfb\u6570 \u4e8c\u6781\u7ba1\u5927\u4fe1\u53f7\u68c0\u6ce2\u7535\u8def \u8f93\u5165\u4fe1\u53f7\u5927\u4e8e0.5V\uff0c\u8c03\u597d\u53c2\u6570\uff0c\u4e8c\u6781\u7ba1\u5145\u653e\u7535\u66f2\u7ebf\u548c\u5305\u7edc\u76f8\u5339\u914d \u68c0\u6ce2\u4e8c\u6781\u7ba1\u5bfc\u901a\u89d2\uff1a U_{BZ} = 0 ,\\theta < \\pi/6 U_{BZ} = 0 ,\\theta < \\pi/6 \u4e0b\uff0c \\theta \\approx \\sqrt[3]{\\frac{3 \\pi r_d}{R}} \\theta \\approx \\sqrt[3]{\\frac{3 \\pi r_d}{R}} \u7ed9\u68c0\u6ce2\u7535\u8def\u52a0\u56fa\u5b9a\u504f\u538b\u53ef\u6ee1\u8db3 U_{BZ} = 0 U_{BZ} = 0 \uff0c R R \u5927\uff0c r_d r_d \u5c0f\u53ef\u6ee1\u8db3 \\theta < \\pi/6 \\theta < \\pi/6 \u6b64\u65f6 u_o u_o \u4e3a\u8f93\u5165\u7684\u9ad8\u9891\u632f\u5e45\u4e58\u4ee5 cos\\theta cos\\theta \uff0c\u5bf9\u4e8eAM\u6ce2\uff0c\u518d\u52a0\u4e00\u4e2a\u9694\u503c\u7535\u5bb9\u540e\uff0c\u53ef\u53d6\u51fa\u539f\u8c03\u5236\u4fe1\u53f7\uff0c\u7b49\u4e8e\u9ad8\u9891\u7b49\u5e45\u6ce2\u7684 K_d K_d \\theta \\theta \u5f88\u5c0f\u65f6\uff0c R_{id} \\approx \\frac{1}{2} R R_{id} \\approx \\frac{1}{2} R \u9891\u7387\u5931\u771f \\frac{1}{\\omega_i C} \\ll R ,\\frac{1}{\\Omega_{max} \\gg R} ,\\frac{1}{\\Omega_{min} C_c} \\ll R \\frac{1}{\\omega_i C} \\ll R ,\\frac{1}{\\Omega_{max} \\gg R} ,\\frac{1}{\\Omega_{min} C_c} \\ll R <span class=\"arithmatex\"><span class=\"MathJax_Preview\">\\frac{1}{\\omega_i C} \\ll R ,\\frac{1}{\\Omega_{max} \\gg R} ,\\frac{1}{\\Omega_{min} C_c} \\ll R</span><script type=\"math/tex\">\\frac{1}{\\omega_i C} \\ll R ,\\frac{1}{\\Omega_{max} \\gg R} ,\\frac{1}{\\Omega_{min} C_c} \\ll R \u975e\u7ebf\u6027\u5931\u771f\u5c0f \u60f0\u6027\u5931\u771f RC\u592a\u5927\uff0c\u653e\u7535\u8ddf\u4e0d\u4e0a\u5305\u7edc \u591a\u9891\u4e0d\u4ea7\u751f\u6761\u4ef6\uff1a RC\\Omega_{max} \\le \\frac{\\sqrt{1-m_a}}{m_a} RC\\Omega_{max} \\le \\frac{\\sqrt{1-m_a}}{m_a} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">RC\\Omega_{max} \\le \\frac{\\sqrt{1-m_a}}{m_a}</span><script type=\"math/tex\">RC\\Omega_{max} \\le \\frac{\\sqrt{1-m_a}}{m_a} \u8d1f\u5cf0\u5207\u5272\u5931\u771f \u4e0d\u4ea7\u751f\u6761\u4ef6\uff1a U_{im}(1-m_a) \\ge U_{im} \\frac{R}{R_L + R} U_{im}(1-m_a) \\ge U_{im} \\frac{R}{R_L + R} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">U_{im}(1-m_a) \\ge U_{im} \\frac{R}{R_L + R}</span><script type=\"math/tex\">U_{im}(1-m_a) \\ge U_{im} \\frac{R}{R_L + R} \u4ea4\u76f4\u6d41\u7535\u963b\u5dee\u503c\u8d8a\u5c0f\uff0c\u8d8a\u4e0d\u5bb9\u6613\u4ea7\u751f \u5c0f\u4fe1\u53f7\u68c0\u6ce2 \u5c0f\u4e8e0.2V\uff0c\u5728\u5927\u4fe1\u53f7\u68c0\u6ce2\u57fa\u7840\u4e0a\u52a0\u4ee5\u504f\u7f6e\uff0c\u4f7f\u4e8c\u6781\u7ba1\u9759\u6001\u5de5\u4f5c\u70b9\u4f4d\u4e8e\u66f2\u7ebf\u7684\u5f2f\u66f2\u90e8\u5206 \u540c\u6b65\u68c0\u6ce2\u5668 \u7528\u672c\u5730\u8f7d\u9891\u4e58\u4ee5\u8c03\u5e45\u6ce2\uff0c\u518d\u901a\u8fc7\u4f4e\u901a\u6ee4\u6ce2 \u9891\u7387\uff0c\u76f8\u4f4d\u4e0d\u540c\u6b65\u65f6\uff0c\u4f1a\u5931\u771f \u89d2\u5ea6\u8c03\u5236\u7535\u8def \u5206\u7c7b\uff1a 1. \u76f8\u4f4d\u8c03\u5236\uff0c\u77ac\u65f6\u76f8\u4f4d\u968f u_\\omega (t) u_\\omega (t) \u7ebf\u6027\u53d8\u5316 2. \u9891\u7387\u8c03\u5236 \u4e00\u822c\u6570\u5b66\u8868\u8fbe\u5f0f\uff1a 1. \u8c03\u76f8\u6ce2\uff1a U_m cos(\\omega_c t+K_p u_\\Omega(t)) U_m cos(\\omega_c t+K_p u_\\Omega(t)) <span class=\"arithmatex\"><span class=\"MathJax_Preview\">U_m cos(\\omega_c t+K_p u_\\Omega(t))</span><script type=\"math/tex\">U_m cos(\\omega_c t+K_p u_\\Omega(t)) 2. \u8c03\u9891\u6ce2\uff1a U_m cos(\\omega_c t+k_f\\int_0^t u_\\Omega(t)) U_m cos(\\omega_c t+k_f\\int_0^t u_\\Omega(t)) <span class=\"arithmatex\"><span class=\"MathJax_Preview\">U_m cos(\\omega_c t+k_f\\int_0^t u_\\Omega(t))</span><script type=\"math/tex\">U_m cos(\\omega_c t+k_f\\int_0^t u_\\Omega(t)) \u8c03\u89d2\u6ce2\u7684\u8c03\u5236\u6307\u6570\u5b9a\u4e49\u4e3a\u6700\u5927\u76f8\u79fb\uff0c m_p = K_p U_{\\Omega m} \\qquad m_f = \\frac{K_f U_{\\Omega m}}{\\Omega} m_p = K_p U_{\\Omega m} \\qquad m_f = \\frac{K_f U_{\\Omega m}}{\\Omega} \u800c\u6700\u5927\u9891\u79fb\u7b49\u4e8e\u8c03\u5236\u6307\u6570\u4e0e\u8c03\u5236\u4fe1\u53f7\u9891\u7387\u7684\u4e58\u79ef \u4e09\u4e2a\u9891\u7387\u53c2\u6570 \u9891\u8c31\uff1a\u7531\u8f7d\u9891\u4e3a\u4e2d\u5fc3\uff0c\u65e0\u6570\u8fb9\u9891\u7ec4\u6210 \u4e2d\u7b49\u8d28\u91cf\u901a\u4fe1\u7cfb\u7edf\uff0c B_{CR} = 2(m+1)F B_{CR} = 2(m+1)F \uff0cm\u4e3a\u5c0f\u6570\u65f6\uff0c7\u820d8\u5165 \u8c03\u9891\u6ce2 B_{CR} B_{CR} \u57fa\u672c\u4e0d\u53d8\uff0c\u8c03\u76f8\u6ce2 B_{CR} B_{CR} \u53d8\u5316\u5927 \u8c03\u9891\u7535\u8def \u76f4\u63a5\u8c03\u5236\uff1a\u7528\u8c03\u5236\u4fe1\u53f7\u63a7\u5236\u51b3\u5b9a\u632f\u8361\u5668\u7684\u9891\u7387\u7684\u53ef\u53d8\u7535\u6297\u7684\u503c \u95f4\u63a5\u8c03\u5236\uff1a\u5148\u901a\u8fc7\u79ef\u5206\u7535\u8def\uff0c\u518d\u901a\u8fc7\u76f8\u4f4d\u8c03\u5236 \u53d8\u5bb9\u4e8c\u6781\u7ba1\u76f4\u63a5\u8c03\u9891\u7535\u8def \u53ea\u80fd\u52a0\u53cd\u5411\u7535\u538b\uff0c\u548cPN\u7ed3\u7ed3\u7535\u5bb9\u6709\u4e00\u5b9a\u5173\u7cfb C_j = \\frac{C_{j0}}{(1+\\frac{u_r}{U_D})^\\gamma} = \\frac{C_{jQ}}{(1+m cos(\\Omega t))^\\gamma} C_j = \\frac{C_{j0}}{(1+\\frac{u_r}{U_D})^\\gamma} = \\frac{C_{jQ}}{(1+m cos(\\Omega t))^\\gamma} \u5f0f\u4e2d m = U_{\\Omega m}/(V_Q+U_D) m = U_{\\Omega m}/(V_Q+U_D) \uff0c\u4e3a\u7535\u5bb9\u8c03\u5236\u5ea6 \u4f5c\u4e3a\u56de\u8def\u603b\u7535\u5bb9\u65f6\uff0c\u5b9e\u73b0\u7ebf\u6027\u8c03\u9891\u7684\u6761\u4ef6\u662f \\gamma = 2 \\gamma = 2 \uff0c\u6b64\u65f6 \\omega_c = \\omega_c + \\frac{\\omega_c}{U_D + V_Q} u_{\\Omega m}(t) \\omega_c = \\omega_c + \\frac{\\omega_c}{U_D + V_Q} u_{\\Omega m}(t) \u82e5 \\gamma \\neq 2 \\gamma \\neq 2 \uff0c\u5219\u4f1a\u4ea7\u751f\u4e2d\u5fc3\u9891\u7387\u504f\u79fb\u548c\u7ebf\u6027\u5931\u771f \u7279\u70b9\uff1a\u7075\u654f\u5ea6\u9ad8\uff0c\u9891\u504f\u5927\uff0c\u9891\u7387\u7a33\u5b9a\u5ea6\u4e0d\u597d \u6676\u4f53\u632f\u8361\u5668\u76f4\u63a5\u8c03\u9891 \u8c03\u76f8\u7535\u8def \u53ef\u53d8\u79fb\u76f8\u6cd5 \u53d8\u5bb9\u4e8c\u6781\u7ba1\u8c03\u76f8\u7f51\u7edc\uff1a\u5b9e\u8d28\u548c\u76f4\u63a5\u8c03\u9891\u4e00\u6837\uff0c\u90fd\u662f\u79fb\u52a8\u4e86\u4e2d\u5fc3\u9891\u7387\uff0c\u53ea\u4e0d\u8fc7\u5206\u6790\u65f6\u4f7f\u7528\u4e86\u8c10\u632f\u56de\u8def\u7684\u76f8\u9891\u7279\u6027\u66f2\u7ebf \u82e5\u8c03\u5236\u4fe1\u53f7\u7684\u9694\u76f4\u7535\u5bb9\u9009\u5927\u4e86\uff0c\u5c31\u53d8\u6210\u79ef\u5206\u7535\u8def\uff0c\u53ef\u5b9e\u73b0\u95f4\u63a5\u8c03\u9891 \u53ef\u53d8\u65f6\u5ef6\u6cd5 \u77e2\u91cf\u5408\u6210\u6cd5 \u9274\u9891\u5668\u548c\u9274\u76f8\u5668 \u6280\u672f\u6307\u6807\uff1a 1. \u9274\u76f8\u5668\uff1a\u9274\u76f8\u7279\u6027\u66f2\u7ebf\uff0c\u9274\u76f8\u8de8\u5bfc\uff0c\u9274\u76f8\u7ebf\u6027\u8303\u56f4\uff0c\u975e\u7ebf\u6027\u5931\u771f 2. \u9274\u9891\u5668\uff1a\u540c\u7406 \u9274\u76f8\u5668 \u5206\u7c7b\uff1a\u6a21\u62df\u7535\u8def\u578b\uff08\u4e58\u79ef\u578b\uff09\uff0c\u6570\u5b57\u7535\u8def\u578b\uff08\u95e8\u7535\u8def\uff09 \u4e58\u79ef\u578b \u6a21\u62df\u4e58\u6cd5\u5668\u76f8\u4e58\uff0c\u518d\u7531\u4f4e\u901a\u53d6\u51fa u_1 u_1 \u9700\u8981\u89e3\u8c03\u4fe1\u53f7\uff0c u_2 u_2 \u8981\u4e0e u_1 u_1 \u6b63\u4ea4\uff0c\u5206\u4e09\u79cd\u60c5\u51b5\u8ba8\u8bba\uff1a\u4e24\u4e2a\u90fd\u662f\u5c0f\u4fe1\u53f7\u6216\u5927\u4fe1\u53f7\u4ee5\u53ca u_1 u_1 \u5c0f\u4fe1\u53f7\uff0c u_2 u_2 \u5927\u4fe1\u53f7 \u9274\u76f8\u7279\u6027\uff1a\u6b63\u5f26\u5f62 \u8303\u56f4 \\phi_{emax} = \\pm \\frac{\\pi}{6} rad \\phi_{emax} = \\pm \\frac{\\pi}{6} rad \u4e09\u89d2\u6ce2\u5f62 \\phi_{emax} = \\pm \\frac{\\pi}{2} rad \\phi_{emax} = \\pm \\frac{\\pi}{2} rad \u6b63\u5f26\u5f62 \\phi_{emax} = \\pm \\frac{\\pi}{6} rad \\phi_{emax} = \\pm \\frac{\\pi}{6} rad \u9274\u9891\u5668 \u5206\u7c7b\uff1a\u8c03\u9891-\u8c03\u5e45\u8c03\u9891\u53d8\u6362\u578b\uff0c\u76f8\u79fb\u4e58\u6cd5\u9274\u9891\u578b\uff0c\u8109\u51b2\u5747\u503c\u578b \u8c03\u9891-\u8c03\u5e45\u8c03\u9891\u53d8\u6362\u578b \u53cc\u5931\u8c10\u56de\u8def\u9274\u9891\u5668 \u5229\u7528\u4e24\u4e2a\u5931\u8c10\u56de\u8def\u548c\u4e24\u4e2a\u68c0\u6ce2\u5668 \u76f8\u4f4d\u9274\u9891\u5668 \u53cc\u8026\u5408\u56de\u8def\u548c\u4e24\u4e2a\u68c0\u6ce2\u5668 \u6ce8\u610f\uff1a\u521d\u7ea7\u56de\u8def\u8c10\u632f\u9891\u7387\u4e0e\u5bf9\u79f0\u6027\u6709\u5173\uff0c\u4e8c\u7ea7\u56de\u8def\u548c\u4e2d\u5fc3\u9891\u7387\u6709\u5173 \u9274\u9891\u7279\u6027\u66f2\u7ebf\u7531\u8026\u5408\u56e0\u6570 \\eta = kQ_L \\eta = kQ_L \u51b3\u5b9a\uff0c \\eta \\eta \u4e00\u5b9a\u65f6\uff0c\u5bbd\u5ea6\u7531\u8026\u5408\u7cfb\u6570 k = \\frac{M}{\\sqrt{L_1 L_2}} k = \\frac{M}{\\sqrt{L_1 L_2}} \u51b3\u5b9a \u6bd4\u4f8b\u9274\u9891\u5668 \u5728\u76f8\u4f4d\u9274\u9891\u5668\u5373\u57fa\u7840\u4e0a\u66f4\u6539\uff0c\u727a\u7272\u8f93\u51fa\u7535\u538b\u7684\u5e45\u5ea6\u6765\u6362\u53d6\u6291\u5236\u5bc4\u751f\u8c03\u5e45\u7684\u80fd\u529b\uff0c\u539f\u7406\u662f\u5e45\u5ea6\u53d8\u5316\u65f6\uff0c |U_{D1}| ,|U_{D2}| |U_{D1}| ,|U_{D2}| \u6bd4\u503c\u4e0d\u53d8\uff0c U_o U_o \u4e0d\u53d8 \u6df7\u9891\u5668 \u5e72\u6270\u4e0e\u5931\u771f \u4fe1\u53f7\u4e0e\u672c\u632f\u9891\u7387\u5e72\u6270\uff08\u5e72\u6270\u54e8\u58f0\uff09 pf_L - qf_s = f_I \\pm F \\qquad qf_s - pf_L = f_I \\pm F pf_L - qf_s = f_I \\pm F \\qquad qf_s - pf_L = f_I \\pm F <span class=\"arithmatex\"><span class=\"MathJax_Preview\">pf_L - qf_s = f_I \\pm F \\qquad qf_s - pf_L = f_I \\pm F</span><script type=\"math/tex\">pf_L - qf_s = f_I \\pm F \\qquad qf_s - pf_L = f_I \\pm F \u5916\u6765\u5e72\u6270\u548c\u672c\u632f\u9891\u7387\uff08\u526f\u6ce2\u9053\u5e72\u6270\uff09 f_n = \\frac{p}{q}f_L \\pm \\frac{f_I}{q} f_n = \\frac{p}{q}f_L \\pm \\frac{f_I}{q} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">f_n = \\frac{p}{q}f_L \\pm \\frac{f_I}{q}</span><script type=\"math/tex\">f_n = \\frac{p}{q}f_L \\pm \\frac{f_I}{q} q = 1 ,p = 0 q = 1 ,p = 0 \u65f6\u79f0\u4e3a\u4e2d\u9891\u5e72\u6270 q = 1 ,p = 1 q = 1 ,p = 1 \u65f6\u79f0\u4e3a\u955c\u50cf\u9891\u7387\u5e72\u6270\uff0c\u5e38\u7528 f_n = 2f_I + f_s f_n = 2f_I + f_s \u8ba1\u7b97 \u53cd\u9988\u63a7\u5236\u7535\u8def\u4e0e\u9891\u7387\u5408\u6210 \u7ec4\u6210\uff1a\u9274\u76f8\u5668\uff0c\u73af\u8def\u6ee4\u6ce2\u5668\uff0c\u538b\u63a7\u632f\u8361\u5668 p\\theta_e + K_dK_p(p)K_v sin(\\theta_e) = p\\theta_1 p\\theta_e + K_dK_p(p)K_v sin(\\theta_e) = p\\theta_1","title":"\u901a\u4fe1\u7535\u5b50\u7ebf\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_1","text":"","title":"\u901a\u4fe1\u7535\u5b50\u7ebf\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_2","text":"","title":"\u7eea\u8bba"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_3","text":"\u5b9a\u4e49\uff1a\u5b9e\u73b0\u4fe1\u606f\u7684\u4f20\u8f93\u6240\u9700\u8bbe\u5907\u7efc\u5408 graph LR; \u4fe1\u606f-->\u8f93\u5165\u53d8\u6362\u5668; \u8f93\u5165\u53d8\u6362\u5668-->\u53d1\u9001\u8bbe\u5907; \u53d1\u9001\u8bbe\u5907-->\u4f20\u8f93\u4fe1\u9053; \u4f20\u8f93\u4fe1\u9053-->\u63a5\u53d7\u8bbe\u5907; \u63a5\u53d7\u8bbe\u5907-->\u8f93\u51fa\u53d8\u6362\u5668; \u8f93\u51fa\u53d8\u6362\u5668-->\u53d7\u4fe1\u8005; \u566a\u58f0-->\u4f20\u8f93\u4fe1\u9053; \u7ec4\u6210\uff1a\u4ee5\u4e0a5\u4e2a\u57fa\u672c\u90e8\u5206 \u8f93\u5165\u53d8\u6362\u5668\uff1a\u975e\u7535\u91cf\u8f6c\u6362\u4e3a\u57fa\u5e26\u4fe1\u53f7\u3002 \u53d1\u9001\u8bbe\u5907\uff1a\u57fa\u5e26\u4fe1\u53f7\u53d8\u6362\u4e3a\u9002\u5408\u4fe1\u9053\u4f20\u8f93\u7684\u4fe1\u53f7 \u4e24\u5927\u4efb\u52a1\uff1a 1. \u4fe1\u53f7\u53d8\u6362\uff08\u8c03\u5236\uff09 2. \u4fe1\u53f7\u653e\u5927\uff08\u7535\u538b\u548c\u529f\u7387\uff09 \u63a5\u6536\u8bbe\u5907\uff1a 1. \u89e3\u8c03 2. \u9009\u62e9\u6709\u7528\u4fe1\u53f7\uff0c\u6291\u5236\u5e72\u6270\u4fe1\u53f7 \u5206\u7c7b\uff1a\u6309\u4fe1\u9053\uff0c\u901a\u4fe1\u65b9\u5f0f\uff0c\u4f20\u8f93\u7684\u57fa\u5e26\u4fe1\u53f7\u5206","title":"\u901a\u4fe1\u7cfb\u7edf"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_4","text":"\u9891\u6bb5\u7684\u5212\u5206 \u4f20\u64ad\u65b9\u5f0f\uff1a\u5730\u6ce2\uff08\u7ed5\u5c04\uff09\uff0c\u5929\u6ce2\uff08\u6298\u5c04\u548c\u53cd\u5c04\uff09\uff0c\u76f4\u7ebf\uff08\u89c6\u8ddd\uff09\u4f20\u64ad\uff0c\u51b3\u5b9a\u65b9\u5f0f\u4e3a\u4fe1\u53f7\u7684\u6ce2\u957f\uff0c\u957f\u4e2d\u6ce2\u5730\u6ce2\uff0c\u77ed\u6ce2\u5929\u6ce2\uff0c\u8d85\u77ed\u6ce2\u76f4\u7ebf","title":"\u65e0\u7ebf\u4fe1\u9053\u53ca\u4f20\u64ad\u65b9\u5f0f"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_5","text":"\u57fa\u672c\u4efb\u52a1\uff1a\u4ee5\u81ea\u7531\u7a7a\u95f4\u4e3a\u4fe1\u9053\uff0c\u628a\u4fe1\u606f\u53d8\u6362\u4e3a\u65e0\u7ebf\u7535\u6ce2\u4f20\u9001\u5230\u8fdc\u65b9 \u8981\u6c42\uff1a\u8fdc\uff0c\u591a\u8def\u4f20\u8f93 \u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u53d1\u9001\u57fa\u5e26\u4fe1\u53f7\uff1a 1. \u57fa\u5e26\u4fe1\u53f7\u662f\u4f4e\u9891\u4fe1\u53f7\uff0c\u8981\u7528\u5f88\u957f\u7684\u5929\u7ebf 2. \u5e26\u5bbd\u4e0d\u540c\uff0c\u591a\u8def\u901a\u4fe1\u56f0\u96be \u8f7d\u6ce2\u8c03\u5236\uff1a\u7528\u57fa\u5e26\u4fe1\u53f7\u53bb\u63a7\u5236\u9ad8\u9891\u8f7d\u6ce2\u4fe1\u53f7\u7684\u4e09\u53c2\u91cf\u4e4b\u4e00\uff0c\u4f7f\u5176\u968f\u57fa\u6ce2\u7ebf\u6027\u53d8\u5316 \u65b9\u5f0f\uff1a 1. \u6a21\u62df\u8c03\u5236 2. \u6570\u5b57\u8c03\u5236 graph LR; \u4e3b\u632f\u5668-->\u7f13\u51b2\u5668; \u7f13\u51b2\u5668-->\u9ad8\u9891\u653e\u5927; \u9ad8\u9891\u653e\u5927-->\u8c03\u5236\u5668; \u8c03\u5236\u5668-->\u529f\u7387\u653e\u5927; \u529f\u7387\u653e\u5927-->\u5929\u7ebf; \u8c03\u5236\u4fe1\u53f7-->\u8c03\u5236\u5668; \u8c03\u5e45\u5e7f\u64ad\u4e3a\u4f8b\uff0c\u53d8\u5316\u4e3a\uff1a graph LR; \u58f0\u7535\u53d8\u6362\u5668-->\u524d\u7f6e\u653e\u5927\u5668; \u524d\u7f6e\u653e\u5927\u5668-->\u4f4e\u9891\u529f\u7387\u653e\u5927; \u4f4e\u9891\u529f\u7387\u653e\u5927-->AM\u8c03\u5236\u5668; \u4f4e\u9891\u90e8\u5206+\u9ad8\u9891\u90e8\u5206+\u5929\u7ebf","title":"\u65e0\u7ebf\u7535\u53d1\u9001\u8bbe\u5907"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_6","text":"\u89e3\u8c03\uff1a\u68c0\u6ce2\uff0c\u9274\u9891\u548c\u9274\u76f8 \u76f4\u63a5\u68c0\u6ce2\u5f0f\u63a5\u6536\u673a\uff0c\u7075\u654f\u5ea6\uff0c\u9009\u62e9\u6027\u4f4e \u76f4\u63a5\u653e\u5927\u5f0f\u63a5\u6536\u673a\uff1a\u9002\u7528\u4e8e\u56fa\u5b9a\u9891\u7387\u7684\u63a5\u6536 \u8d85\u5916\u5dee\u63a5\u6536\u673a\uff0c\u540c\u65f6\u517c\u987e\u9ad8\u7075\u654f\u5ea6\u548c\u9ad8\u9009\u62e9\u6027\uff0c\u8c03\u5e45\u5e7f\u64ad\u4e3a\u4f8b\uff1a graph LR; \u5929\u7ebf-->\u9ad8\u9891\u5c0f\u4fe1\u53f7\u653e\u5927\u5668; \u9ad8\u9891\u5c0f\u4fe1\u53f7\u653e\u5927\u5668-->\u6df7\u9891\u5668; \u6df7\u9891\u5668-->\u4e2d\u9891\u653e\u5927; \u4e2d\u9891\u653e\u5927-->\u68c0\u6ce2\u5668; \u68c0\u6ce2\u5668-->\u4f4e\u9891\u7535\u538b\u653e\u5927; \u4f4e\u9891\u7535\u538b\u653e\u5927-->\u4f4e\u9891\u529f\u7387\u653e\u5927; \u672c\u673a\u632f\u8361-->\u6df7\u9891\u5668;","title":"\u65e0\u7ebf\u7535\u63a5\u53d7\u8bbe\u5907"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_7","text":"\u53d1\u5c04\u8bbe\u5907\u548c\u63a5\u6536\u8bbe\u5907\u7684\u5404\u79cd\u9ad8\u9891\u7535\u8def \u9ad8\u9891\uff1a\u51e0\u767eKHz\u5230\u51e0\u767eMHz","title":"\u901a\u4fe1\u7535\u5b50\u7ebf\u8def\u7814\u7a76\u5bf9\u8c61"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_8","text":"","title":"\u9ad8\u9891\u57fa\u7840\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#lc","text":"","title":"LC\u4e32\u5e76\u8054\u8c10\u632f\u56de\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_9","text":"\u7535\u611f\uff1a\u7406\u60f3\u7535\u611f\u4e0e\u635f\u8017\u7535\u963b\u4e32\u8054\u6216\u635f\u8017\u7535\u5bfc\u5e76\u8054\u3002 Q_0 Q_0 \u4e3a\u7406\u60f3\u54c1\u8d28\u56e0\u6570\uff0c\u53ef\u5728\u5de5\u4f5c\u9891\u7387\u4e0b\u901a\u8fc7Q\u8868\u76f4\u63a5\u6d4b\u5f97\uff0c Q_0 \\gg 1 Q_0 \\gg 1 \u65f6\uff0c r_0=\\frac{\\omega_0L}{Q_0} r_0=\\frac{\\omega_0L}{Q_0} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">r_0=\\frac{\\omega_0L}{Q_0}</span><script type=\"math/tex\">r_0=\\frac{\\omega_0L}{Q_0} g_0=\\frac{1}{\\omega_0LQ_0} g_0=\\frac{1}{\\omega_0LQ_0} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">g_0=\\frac{1}{\\omega_0LQ_0}</span><script type=\"math/tex\">g_0=\\frac{1}{\\omega_0LQ_0} \u7535\u5bb9\uff1a\u7b49\u6548\u4e3a\u7406\u60f3\u7535\u5bb9 Q=\\frac{\\omega L}{R} Q=\\frac{\\omega L}{R} \uff0c\u5e76\u8054\u8c10\u632f\u56de\u8def Q=\\frac{R}{\\omega L}= Q=\\frac{R}{\\omega L}=","title":"\u9ad8\u9891\u7b49\u6548\uff1a"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_10","text":"\u8c10\u632f\u65f6\u7535\u6d41\u6700\u5927\uff0c\u963b\u6297\u6700\u5c0f\uff0c\u56de\u8def\u54c1\u8d28\u56e0\u7d20\u8d8a\u5927\uff0c\u76f8\u5bf9\u5e45\u9891\u7279\u6027\uff0c\u76f8\u5bf9\u76f8\u9891\u7279\u6027\u8d8a\u9661\uff0c\u968f \\omega \\omega \u589e\u52a0\uff0c\u963b\u6297\u7531\u5bb9\u6297\u5411\u611f\u6297\u8f6c\u5316","title":"\u4e32\u8054\u8c10\u632f\u56de\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_11","text":"\u7a7a\u8f7d\u65f6 \u8c10\u632f\u9891\u7387:\\omega_p=\\omega_0\\sqrt{1-\\frac{1}{Q_0^2}} \u8c10\u632f\u9891\u7387:\\omega_p=\\omega_0\\sqrt{1-\\frac{1}{Q_0^2}} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">\u8c10\u632f\u9891\u7387:\\omega_p=\\omega_0\\sqrt{1-\\frac{1}{Q_0^2}}</span><script type=\"math/tex\">\u8c10\u632f\u9891\u7387:\\omega_p=\\omega_0\\sqrt{1-\\frac{1}{Q_0^2}} Q_0 \\gg 1 Q_0 \\gg 1 \u65f6\uff0c \\omega_p=\\omega_0 \\omega_p=\\omega_0 \uff0c\u4e14\u6b64\u65f6\u6709\u56de\u8def\u7535\u963b R_p=Q_0^2r_0 R_p=Q_0^2r_0 \u5e26\u8f7d \u52a0\u4e00\u8d1f\u8f7d\uff0c\u4e0d\u5f71\u54cd\u8c10\u632f\u9891\u7387\uff0c\u8c10\u632f\u65f6\uff0c\u7535\u963b\u51cf\u5c0f\uff0c\u54c1\u8d28\u56e0\u7d20\u51cf\u5c0f\u3002 \u8c10\u632f\u65f6\u7535\u538b\u6700\u5927\uff0c\u963b\u6297\u6700\u5927\uff0c\u56de\u8def\u54c1\u8d28\u56e0\u7d20\u8d8a\u5927\uff0c\u76f8\u5bf9\u5e45\u9891\u7279\u6027\uff0c\u76f8\u5bf9\u76f8\u9891\u7279\u6027\u8d8a\u9661\uff0c\u968f \\omega \\omega \u589e\u52a0\uff0c\u963b\u6297\u7531\u611f\u6297\u5411\u5bb9\u6297\u8f6c\u5316","title":"\u5e76\u8054\u8c10\u632f\u56de\u8def\uff1a"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_12","text":"\u963b\u6297\u53d8\u6362\u4e3a\u9664\u4ee5 p^2 p^2 \uff0c\u5bfc\u7eb3\u53d8\u6362\u4e3a\u4e58\u4ee5 p^2 p^2 \uff0c\u7535\u538b\u6e90\u4e3a\u9664\uff0c\u7535\u6d41\u6e90\u4e3a\u4e58\u3002","title":"\u63a5\u5165\u7cfb\u6570\u4e0e\u53d8\u5316\u5173\u7cfb"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_13","text":"\u529f\u80fd\uff1a\u5bf9\u5fae\u5f31\u9ad8\u9891\u4fe1\u53f7\u7684\u4e0d\u5931\u771f\u653e\u5927\u548c\u9009\u9891\u6ee4\u6ce2 \u7279\u70b9\uff1a 1. \u9891\u7387\u9ad8\uff0c\u4e09\u6781\u7ba1\u6781\u95f4\u7535\u5bb9\u4e0d\u80fd\u5ffd\u7565 2. \u8f93\u5165\u4fe1\u53f7\u5c0f\uff0c\u6676\u4f53\u7ba1\u5de5\u4f5c\u5728\u7ebf\u6027\u8303\u56f4 \u5206\u7c7b\uff1a\u6309\u653e\u5927\u4fe1\u53f7\u7684\u5e26\u5bbd\uff0c\u6309\u8d1f\u8f7d\u6027\u8d28 \u6280\u672f\u6307\u6807\uff1a A_u,A_p,2\\triangle f_{0.7},K_{r0.1},N_F=\\frac{P_{si}/P_{ni}}{P_{so}/P_{no}} A_u,A_p,2\\triangle f_{0.7},K_{r0.1},N_F=\\frac{P_{si}/P_{ni}}{P_{so}/P_{no}} \u5b9e\u9645\u653e\u5927\u5668\u77e9\u5f62\u7cfb\u6570\u6052\u5927\u4e8e1\uff0c\u8d8a\u5c0f\u8d8a\u597d\uff0c\u566a\u58f0\u7cfb\u6570\u63a5\u8fd1\u4e8e1\u597d","title":"\u9ad8\u9891\u5c0f\u4fe1\u53f7\u653e\u5927\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_14","text":"\u622a\u81f3\u9891\u7387 f_\\beta f_\\beta \uff0c\u7279\u5f81\u9891\u7387 f_T f_T \uff0c\u6700\u9ad8\u632f\u8361\u9891\u7387 f_{max} f_{max} |\\beta |=\\frac{\\beta_0}{\\sqrt{1-(\\frac{f}{f_\\beta})^2}} |\\beta |=\\frac{\\beta_0}{\\sqrt{1-(\\frac{f}{f_\\beta})^2}} \u5f53 \\beta \\gg 1 \\beta \\gg 1 \u65f6\uff0c f_T=\\beta_0 f_b f_T=\\beta_0 f_b","title":"\u6676\u4f53\u7ba1\u9ad8\u9891\u53c2\u6570"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_15","text":"\u5206\u4e3aY\u53c2\u6570\u7b49\u6548\u7535\u8def\u548c\u6df7\u5408 \\pi \\pi \u578b\u7b49\u6548\u7535\u8def","title":"\u5355\u8c03\u8c10\u56de\u8def\u8c10\u632f\u653e\u5927\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#y","text":"y_i=\\dot{I_1}/\\dot{U_1}|_{U_2=0} y_i=\\dot{I_1}/\\dot{U_1}|_{U_2=0} \uff0c\u8f93\u51fa\u77ed\u8def\u8f93\u5165\u5bfc\u7eb3\uff0c y_o y_o \uff0c\u8f93\u51fa\u5bfc\u7eb3\uff0c y_r y_r \uff0c\u53cd\u5411\u4f20\u8f93\u5bfc\u7eb3\uff0c y_f y_f \uff0c\u6b63\u5411\u4f20\u8f93\u5bfc\u7eb3 \u5171\u5c04\u7535\u8def\uff0c\u7b80\u5316\u4e3a\uff0c y_{re}=0 y_{re}=0 \u6bcf\u7ea7\u4e09\u6781\u7ba1\u53c2\u6570\u90fd\u76f8\u540c\u65f6\uff0c\u7b49\u6548\u5230\u8c10\u632f\u56de\u8def\uff1a 1. \u5de6\u8fb9\uff1a p_1\\dot{U_i}y_{fe},p_1^2g_{oe},p_1^2C_{oe} p_1\\dot{U_i}y_{fe},p_1^2g_{oe},p_1^2C_{oe} 2. \u4e2d\u95f4\uff1a C,g_0,L C,g_0,L 3. \u53f3\u8fb9\uff1a p_2^2g_{ie},p_2^2C_{ie},\\frac{\\dot{U_o}}{p_2} p_2^2g_{ie},p_2^2C_{ie},\\frac{\\dot{U_o}}{p_2} \u7531 \\dot{U_o}=-\\frac{p_1\\dot{U_i}y_{fe}}{Y_{\\Sigma}} \\dot{U_o}=-\\frac{p_1\\dot{U_i}y_{fe}}{Y_{\\Sigma}} \u5f97\uff1a \\dot{A_u}=-\\frac{p_1p_2y_{fe}}{Y_\\Sigma} \\dot{A_u}=-\\frac{p_1p_2y_{fe}}{Y_\\Sigma} \u8c10\u632f\u65f6\u6700\u5927\uff0c\u5176\u4e2d Y_{\\Sigma}=g_{\\Sigma} Y_{\\Sigma}=g_{\\Sigma} \u76f8\u5bf9\u7535\u538b\u589e\u76ca\uff1a \\frac{\\dot{A_u}}{\\dot{A_{u0}}}=\\frac{1}{1+jQ_L2\\triangle f/f_0} \\frac{\\dot{A_u}}{\\dot{A_{u0}}}=\\frac{1}{1+jQ_L2\\triangle f/f_0} \u5176\u4e2d Q_L=1/(\\omega_0 g_{\\Sigma} L) Q_L=1/(\\omega_0 g_{\\Sigma} L) \uff0c\u82e5 \\xi=Q_L 2\\triangle f/f_0 \\xi=Q_L 2\\triangle f/f_0 \uff0c\u79f0\u4e3a\u5e7f\u4e49\u5931\u8c10 \u901a\u9891\u5e26\uff1a \\triangle 2f_{0.7} = f_0/Q_L \\triangle 2f_{0.7} = f_0/Q_L \uff0c\u77e9\u5f62\u7cfb\u6570\uff1a K_{r0.1}=\\sqrt{99} \\gg 1 K_{r0.1}=\\sqrt{99} \\gg 1 \u9009\u62e9\u6027\u5dee \u901a\u9891\u5e26\u548c\u8c10\u632f\u7535\u538b\u589e\u76ca\u4e3a\u5e38\u6570","title":"Y\u53c2\u6570\u7b49\u6548\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_16","text":"A_m=(A_{u1})^m A_m=(A_{u1})^m \\frac{A_m}{A_{mo}} = \\frac{1}{(1+(Q_L 2 \\triangle f/f_0)^2)^{m/2}} \\frac{A_m}{A_{mo}} = \\frac{1}{(1+(Q_L 2 \\triangle f/f_0)^2)^{m/2}} (2 \\triangle f_{0.7})_m = \\sqrt{2^{1/m}-1} (2 \\triangle f_{0.7})_1 (2 \\triangle f_{0.7})_m = \\sqrt{2^{1/m}-1} (2 \\triangle f_{0.7})_1 \u7ea7\u6570\u8d8a\u591a\uff0c\u901a\u9891\u5e26\u8d8a\u7a84\uff0c\u77e9\u5f62\u7cfb\u6570\u8d8a\u5c0f","title":"\u591a\u7ea7\u5355\u8c03\u8c10\u56de\u8def\u8c10\u632f\u653e\u5927\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_17","text":"\u5f15\u8d77\u4e0d\u7a33\u5b9a\u7684\u539f\u56e0\uff1a y_{re} \\neq 0 y_{re} \\neq 0 \uff0c\u53ef\u80fd\u6784\u6210\u6b63\u53cd\u9988 \u7a33\u5b9a\u7cfb\u6570\uff1a S = \\dot{U_i}/\\dot{U_i'} S = \\dot{U_i}/\\dot{U_i'} \uff0c\u5176\u4e2d \\dot{U_i'} \\dot{U_i'} \u4e3a\u6b63\u53cd\u9988\u7535\u538b S\u8d8a\u5927\uff0c\u8d8a\u7a33\u5b9a\uff0c\u4e00\u822c\u8981\u6c42 \\ge 5 \\ge 5 \u7a33\u5b9a\u7535\u538b\u589e\u76ca\uff1a\u4e0d\u52a0\u7a33\u5b9a\u63aa\u65bd\uff0c\u5e76\u6ee1\u8db3S\u7684\u5de5\u4f5c\u4e8e\u8c10\u632f\u9891\u7387\u7684\u6700\u5927\u7535\u538b\u589e\u76ca |A_{u0}|=\\sqrt{\\frac{2|y_{fe|}}{S|y_{re}|(1+cos(\\phi_{re}+\\phi_{fe}))}} |A_{u0}|=\\sqrt{\\frac{2|y_{fe|}}{S|y_{re}|(1+cos(\\phi_{re}+\\phi_{fe}))}} \u63d0\u9ad8\u7a33\u5b9a\u6027\u63aa\u65bd\uff1a 1. \u4e2d\u548c\u6cd5\uff1a\u7535\u6d41\u5927\u5c0f\u76f8\u540c\uff0c\u65b9\u5411\u76f8\u53cd \u53ea\u80fd\u5bf9\u4e00\u4e2a\u9891\u7387\u70b9\u8d77\u5230\u5b8c\u5168\u4e2d\u548c\u4f5c\u7528 2. \u5931\u914d\u6cd5\uff1a\u5b9e\u8d28\u662f\u964d\u4f4e\u7535\u538b\u589e\u76ca","title":"\u7a33\u5b9a\u6027"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_18","text":"\u529f\u80fd\uff1a\u7528\u5c0f\u529f\u7387\u7684\u9ad8\u9891\u8f93\u5165\u4fe1\u53f7\u53bb\u63a7\u5236\u9ad8\u9891\u529f\u7387\u653e\u5927\u5668\u5c06\u76f4\u6d41\u7535\u6e90\u4f9b\u7ed9\u7684\u80fd\u91cf\u8f6c\u5316\u4e3a\u5927\u529f\u7387\u9ad8\u9891\u80fd\u91cf\u8f93\u51fa \u5206\u7c7b\uff1a\u6309\u5de5\u4f5c\u9891\u7387\uff0c\u6309\u5de5\u4f5c\u7c7b\u578b \u6280\u672f\u6307\u6807\uff1a\u8f93\u51fa\u529f\u7387\uff0c\u6548\u7387\uff0c\u529f\u7387\u589e\u76ca\uff0c\u8c10\u6ce2\u6291\u5236\u5ea6\uff08\u975e\u7ebf\u6027\u529f\u653e\uff09 \u4e2d\u95f4\u7ea7\u548c\u8f93\u51fa\u7ea7\u90fd\u53ef\u7b49\u6548\u4e3a\u8f93\u5165\u56de\u8def\uff0c\u975e\u7ebf\u6027\u5668\u4ef6\uff0c\u5e26\u901a\u6ee4\u6ce2 \u7279\u70b9\uff1a 1. \u653e\u5927\u5668\uff1a\u9759\u6001\u622a\u6b62\uff0c\u52a8\u6001\u5bfc\u901a\u548c\u622a\u6b62 2. \u8c10\u632f\u56de\u8def\uff1a\u9009\u9891\uff0c\u963b\u6297\u5339\u914d","title":"\u9ad8\u9891\u529f\u7387\u653e\u5927\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_19","text":"\u4e09\u6781\u7ba1\u7684\u4e09\u79cd\u7279\u6027\u66f2\u7ebf\uff1a\u8f93\u5165\u7279\u6027\uff0c\u8f93\u51fa\u7279\u6027\uff0c\u6b63\u5411\u4f20\u8f93\u7279\u6027 g_r g_r \u4e3a\u6b63\u5411\u4f20\u8f93\u7279\u6027\u66f2\u7ebf\u659c\u7387\uff0c g_{cr} g_{cr} \u8f93\u51fa\u7279\u6027\u66f2\u7ebf\u9971\u548c\u533a\u7684\u659c\u7387\uff0c\u5176\u653e\u5927\u533a\u95f4\u9694\u9664\u4ee5 u_{be} u_{be} \u53d8\u6362\u5e94\u4e3a g_r g_r \u8f93\u5165\u4fe1\u53f7 u_{bm}cos(\\omega t) u_{bm}cos(\\omega t) \uff0c \\omega t = 0 \\omega t = 0 \u65f6\uff0c i_c i_c \u6700\u5927\uff0c \\omega t = \\theta_c \\omega t = \\theta_c \u65f6\uff0c i_c i_c \u4e3a0\uff0c \\theta_c \\theta_c \u5373\u4e3a\u5bfc\u901a\u89d2 cos \\theta_c = \\frac{U_{BZ}-V_{BB}}{U_{bm}} cos \\theta_c = \\frac{U_{BZ}-V_{BB}}{U_{bm}} i_c = I_{cM}\\frac{cos(\\omega t)-cos\\theta_c}{1-cos\\theta_c} i_c = I_{cM}\\frac{cos(\\omega t)-cos\\theta_c}{1-cos\\theta_c} \u4ee4\u96c6\u7535\u6781\u7535\u538b\u5229\u7528\u7cfb\u6570 \\xi = U_{cm}/V_{cc} \\xi = U_{cm}/V_{cc} \uff0c\u6ce2\u5f62\u7cfb\u6570 g_1 = \\alpha_1/\\alpha_0 g_1 = \\alpha_1/\\alpha_0 \uff0c U_{cm}=I_{c1m}R_P U_{cm}=I_{c1m}R_P \\eta = \\frac{P_o}{P_=} = \\frac{1}{2} \\frac{U_{cm}I_{c1m}}{V_{cc}I_{c0}} = \\frac{1}{2} \\xi g_1(\\theta_c) \\eta = \\frac{P_o}{P_=} = \\frac{1}{2} \\frac{U_{cm}I_{c1m}}{V_{cc}I_{c0}} = \\frac{1}{2} \\xi g_1(\\theta_c) \u517c\u987e\u6548\u7387\u548c\u8f93\u51fa\u529f\u7387\uff1a \\theta_c \\theta_c \u4e00\u822c\u53d660-80\u00b0","title":"\u6298\u7ebf\u5206\u6790\u6cd5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_20","text":"\u6676\u4f53\u7ba1\uff0c\u7535\u6e90\u53c2\u6570\u786e\u5b9a\u6761\u4ef6\u4e0b\uff0c\u4fe1\u53f7\u632f\u5e45\u4e00\u5b9a\uff0c i_c = f(u_{be},u{ce}) i_c = f(u_{be},u{ce}) \u7684\u5173\u7cfb \u622a\u8ddd\u6cd5\uff1a\u659c\u7387+\u622a\u8ddd+ (u_{cemax},0) (u_{cemax},0) i_c = g_d(u_{ce}-U_0) i_c = g_d(u_{ce}-U_0) \u5f0f\u4e2d g_d = -g_c \\frac{u_{bm}}{u_{cm}} g_d = -g_c \\frac{u_{bm}}{u_{cm}} \uff0c U_0 = V_{cc}-u_{cm}cos\\theta_c U_0 = V_{cc}-u_{cm}cos\\theta_c \u865a\u62df\u7535\u6d41\u6cd5\uff1a (u_{cemin},u_{bemax}) (u_{cemin},u_{bemax}) + (V_{cc},I_Q) (V_{cc},I_Q) + (u_{cemax},0) (u_{cemax},0) I_Q = -g_c (U_{BZ}-V_{BB}) I_Q = -g_c (U_{BZ}-V_{BB}) \u5de5\u4f5c\u72b6\u6001\uff1a\u6b20\u538b\uff0c\u4e34\u754c\u548c\u8fc7\u538b","title":"\u52a8\u6001\u7279\u6027"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_21","text":"\u7535\u6e90\uff0c\u4e09\u6781\u7ba1\u53c2\u6570\uff0c U_{bm} U_{bm} \u4e00\u5b9a\uff0c\u6539\u53d8 R_P R_P \u5de5\u4f5c\u72b6\u6001\uff0c\u7535\u538b\uff0c\u7535\u6d41\uff0c\u529f\u7387\uff0c\u6548\u7387\u7684\u53d8\u5316 \u7528\u52a8\u6001\u7279\u6027\u5206\u6790\uff1a\u968f R_P R_P \u589e\u5927\uff0c I_Q ,u_{bemin} ,\\theta_c ,I_{cM} I_Q ,u_{bemin} ,\\theta_c ,I_{cM} \u4e0d\u53d8\uff0c u_{cm} u_{cm} \u589e\u5927\uff0c\u659c\u7387\u51cf\u5c0f\uff0c\u5de5\u4f5c\u72b6\u6001\u7531\u6b20\u538b\u5411\u8fc7\u538b\u8f6c\u5316\u3002 \u4f46\u5728\u8fc7\u538b\u533a\uff0c\u7535\u6d41\u4e0d\u518d\u662f\u5c16\u9876\u8109\u51b2\uff0c\u5206\u89e3\u7cfb\u6570\u6539\u53d8\uff0c\u7535\u6d41\u51cf\u5c0f\uff0c\u4f46 u_{cm} u_{cm} \u589e\u957f\u51cf\u7f13 \u8f93\u51fa\u529f\u7387\u5728\u4e34\u754c\u72b6\u6001\u8fbe\u5230\u5cf0\u503c\uff0c\u7528\u4e8e\u672b\u7ea7\uff0c\u6548\u7387\u5728\u5f31\u8fc7\u538b\u533a\u8fbe\u5230\u5cf0\u503c\uff0c\u968f\u540e\u4e0b\u964d\uff0c\u7528\u4e8e\u4e2d\u95f4\u653e\u5927\u7ea7 \u6b64\u5916 R_P R_P \u4e00\u5b9a\u4e0d\u8981\u4e3a0","title":"\u8d1f\u8f7d\u7279\u6027"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_22","text":"\u7528\u52a8\u6001\u7279\u6027\u5206\u6790\u5373\u53ef","title":"\u5404\u7ea7\u7535\u538b\u5f71\u54cd"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_23","text":"\u8f93\u5165\u8f93\u51fa\u56de\u8def\u529f\u80fd\uff1a 1. \u6b63\u5e38\u504f\u7f6e 2. \u9009\u9891 3. \u963b\u6297\u5339\u914d \u96c6\u7535\u6781\u9988\u7535\uff1a\u4e32\u8054\u9988\u7535\uff0c\u5e76\u8054\u9988\u7535 \u57fa\u6781\u9988\u7535\uff1a\u3010\u4e32\u8054\u9988\u7535\uff0c\u5e76\u8054\u9988\u7535\u3011\u3010\u5916\u52a0\u504f\u538b\uff0c\u81ea\u7ed9\u504f\u538b\u3011","title":"\u4e19\u7c7b\u529f\u653e\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_24","text":"","title":"\u5339\u914d\u7f51\u7edc"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_25","text":"\u4f20\u8f93\u7ebf\u53d8\u538b\u5668\uff1a\u4f20\u9012\u80fd\u91cf\u7684\u4e24\u79cd\u65b9\u5f0f 1:1\u4f20\u8f93\u7ebf\u53d8\u538b\u5668\u6700\u4f73\u5339\u914d\u6761\u4ef6\uff1a Z_C = R_S = R_L Z_C = R_S = R_L \uff0c\u7528\u4f5c\u5012\u76f8\u5668 \u963b\u6297\u53d8\u6362\u4f20\u8f93\u7ebf\u53d8\u538b\u5668\uff0c Z_i/Z_o Z_i/Z_o \u5c31\u662f\u51e0\u6bd4\u51e0\u7684\u963b\u6297\u53d8\u6362","title":"\u5bbd\u9891\u5e26\u529f\u653e"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_26","text":"\u7531\u529f\u7387\u653e\u5927\u5668\uff0c\u529f\u7387\u5206\u914d\u5668\uff0c\u529f\u7387\u5408\u6210\u7f51\u7edc\u7ec4\u6210 \u539f\u7406\uff1aN\u4e2a\u529f\u653e\uff0c\u901a\u8fc7\u6df7\u5408\u7535\u8def\u4f7f\u8f93\u51fa\u529f\u7387\u5728\u516c\u5171\u8d1f\u8f7d\u4e0a\u53e0\u52a0\u8d77\u6765","title":"\u529f\u7387\u5408\u6210"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_27","text":"\u5206\u7c7b\uff1a\u6309\u6ce2\u5f62\uff0c\u6309\u539f\u7406\uff0c\u6309\u5143\u4ef6 \u4e3b\u8981\u6280\u672f\u6307\u6807\uff1a\u632f\u8361\u9891\u7387\uff0c\u9891\u7387\u7a33\u5b9a\u5ea6\uff0c\u632f\u8361\u5e45\u5ea6\uff0c\u632f\u8361\u6ce2\u5f62","title":"\u6b63\u5f26\u6ce2\u632f\u8361\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#lc_1","text":"\u8c03\u8c10\u653e\u5927\u5668+\u6b63\u53cd\u9988\u7f51\u7edc \u8d77\u632f\u6761\u4ef6\uff1a\u589e\u5e45\u632f\u8361 1. \u632f\u5e45\u8d77\u632f\uff1a A_0 F > 1 A_0 F > 1 2. \u76f8\u4f4d\u8d77\u632f\uff1a \\phi_A + \\phi_F = 2n\\pi \\phi_A + \\phi_F = 2n\\pi \u5e73\u8861\u6761\u4ef6\uff1a\u7b49\u5e45\u632f\u8361 A = g_c R_P (1-cos\\theta_c)\\alpha_1(\\theta_c) = A_0v(\\theta_c) A = g_c R_P (1-cos\\theta_c)\\alpha_1(\\theta_c) = A_0v(\\theta_c) \u6700\u540e\u5de5\u4f5c\u72b6\u6001\u7531 A_0 F A_0 F \u51b3\u5b9a\uff0c\u4e5f\u51b3\u5b9a\u4e86\u632f\u5e45 \\dot{U_i}\\xrightarrow[\\phi_Y]{Y_{fe}} \\dot{I_c}\\xrightarrow[\\phi_z]{Z_{p1}} \\dot{U_{c1}}\\xrightarrow[\\phi_F]{F} \\dot{U_F} \\dot{U_i}\\xrightarrow[\\phi_Y]{Y_{fe}} \\dot{I_c}\\xrightarrow[\\phi_z]{Z_{p1}} \\dot{U_{c1}}\\xrightarrow[\\phi_F]{F} \\dot{U_F} \\phi_F + \\phi_Y \\neq 0 \\phi_F + \\phi_Y \\neq 0 \uff0c\u56de\u8def\u5fae\u5c0f\u5931\u8c03\uff0c\u4f46\u8fd1\u4f3c\u4e3a\u56de\u8def\u8c10\u632f\u9891\u7387 \u7a33\u5b9a\u6761\u4ef6\uff1a 1. \u632f\u5e45\u7a33\u5b9a\uff1a \\frac{\\partial A}{\\partial U_c}|_{U_c = U_{cQ}} < 0 \\frac{\\partial A}{\\partial U_c}|_{U_c = U_{cQ}} < 0 <span class=\"arithmatex\"><span class=\"MathJax_Preview\">\\frac{\\partial A}{\\partial U_c}|_{U_c = U_{cQ}} &lt; 0</span><script type=\"math/tex\">\\frac{\\partial A}{\\partial U_c}|_{U_c = U_{cQ}} < 0 \u63aa\u65bd\uff1a\u8c03\u8282\u9759\u6001\u5de5\u4f5c\u70b9\uff0c\u5373 A_0 A_0 \uff1b\u8c03\u8282F 2. \u76f8\u4f4d\u7a33\u5b9a\uff1a \\frac{\\partial \\phi_Z}{\\partial \\omega} < 0 \\frac{\\partial \\phi_Z}{\\partial \\omega} < 0 <span class=\"arithmatex\"><span class=\"MathJax_Preview\">\\frac{\\partial \\phi_Z}{\\partial \\omega} &lt; 0</span><script type=\"math/tex\">\\frac{\\partial \\phi_Z}{\\partial \\omega} < 0 \u6309\u53cd\u9988\u8026\u5408\u5143\u4ef6\u5206\uff1a\u4e92\u611f\u8026\u5408\u632f\u8361\u5668\uff0c\u7535\u5bb9\u53cd\u9988\u5f0f\u632f\u8361\u5668\uff0c\u7535\u611f\u53cd\u9988\u5f0f\u632f\u8361\u5668","title":"\u53cd\u9988\u578bLC\u632f\u8361"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_28","text":"\u5171\u3010\u3011\u8c03\u3010\u3011\u578b\uff0c\u77ac\u65f6\u6781\u6027\u6cd5\u5224\u65ad\uff0c f_0 = \\frac{1}{2\\pi\\sqrt{L_1 C}} f_0 = \\frac{1}{2\\pi\\sqrt{L_1 C}} \u4f18\u70b9\uff1a\u8c03\u6574\u53cd\u9988\u65f6\uff0c\u4e0d\u4f1a\u5f71\u54cd\u632f\u8361\u9891\u7387 \u7f3a\u70b9\uff1a\u9891\u7387\u4e0d\u5b9c\u8fc7\u9ad8","title":"\u4e92\u611f\u8026\u5408\u632f\u8361\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_29","text":"\u5171\u5c04\u65f6\uff1a A_0 = \\frac{|y_{fe}|}{g_\\Sigma} ,F = \\frac{c_1'}{c_2'} A_0 = \\frac{|y_{fe}|}{g_\\Sigma} ,F = \\frac{c_1'}{c_2'} \u5f0f\u4e2d g_\\Sigma = g_{oe}+g_0 p_1^2+g_{ie} p^2+g_L g_\\Sigma = g_{oe}+g_0 p_1^2+g_{ie} p^2+g_L \u8d77\u632f\u6761\u4ef6\uff1a\u4e09\u6781\u7ba1\u9009\u5b9a\u540e\uff0c\u66f4\u6539F\u548c g_L g_L \u7684\u503c \u8c10\u632f\u9891\u7387\uff1a \\omega_0 = 1/\\sqrt{C_\\Sigma L} \\omega_0 = 1/\\sqrt{C_\\Sigma L}","title":"\u8003\u6bd4\u5179\u632f\u8361\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_30","text":"\u5171\u5c04\uff1a F = \\frac{L_2+M}{L_1+M} F = \\frac{L_2+M}{L_1+M} \u8d77\u632f\u6761\u4ef6\u548c\u8003\u6bd4\u5179\u76f8\u540c\uff0c\u4f46 g_0' g_0' \u4e0d\u540c \u632f\u8361\u9891\u7387\uff1a \\omega_0 = \\frac{1}{\\sqrt{LC}} \\omega_0 = \\frac{1}{\\sqrt{LC}} \uff0c L = L_1+L_2+2M L = L_1+L_2+2M \u4e24\u79cd\u7535\u8def\u6bd4\u8f83\uff1a\u611f\u89c9\u7535\u5bb9\u4e09\u70b9\u5f0f\u597d\u70b9","title":"\u54c8\u83b1\u7279\u632f\u8361\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_31","text":"\u6ce8\u610f\uff1ac ,e ,b \u5bf9\u4e8e\u632f\u8361\u9891\u7387\uff1a X_{ce}+X_{eb}+X_{cb}=0 X_{ce}+X_{eb}+X_{cb}=0","title":"\u5224\u65ad\u51c6\u5219"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_32","text":"\u7edd\u5bf9\u9891\u7387\u504f\u5dee\uff0c\u76f8\u5bf9\u9891\u7387\u504f\u5dee \u7a33\u5b9a\u5ea6\uff1a\u4e00\u5b9a\u65f6\u95f4\u95f4\u9694\u5185\uff0c\u76f8\u5bf9\u9891\u7387\u504f\u5dee\u6700\u5927\u503c\uff0c\u957f\uff0c\u77ed\uff0c\u77ac\u65f6 \\omega_0 ,\\phi_{YF} ,Q_L \\omega_0 ,\\phi_{YF} ,Q_L \u53d8\u6362\uff0c\u4f1a\u5f15\u8d77\u7a33\u5b9a\u5ea6\u53d8\u5316 \u5916\u56e0\u4f1a\u5f15\u8d77\u8fd9\u4e09\u8005\u53d8\u5316 \u63aa\u65bd\uff1a\u51cf\u5c0f\u5916\u56e0\uff0c\u63d0\u9ad8\u53c2\u6570\u6297\u5916\u56e0\u80fd\u529b","title":"\u9891\u7387\u7a33\u5b9a\u539f\u7406"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#lc_2","text":"","title":"\u9ad8\u7a33\u5b9a\u5ea6LC\u632f\u8361\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_33","text":"\\triangle C_\\Sigma = p_1^2 \\triangle C_o+p_2^2 \\triangle C_i \\triangle C_\\Sigma = p_1^2 \\triangle C_o+p_2^2 \\triangle C_i p_1 ,p_2 p_1 ,p_2 \u4e0d\u53ef\u80fd\u540c\u65f6\u51cf\u5c0f\uff0c\u6545\u7a33\u5b9a\u5ea6\u4e0d\u9ad8","title":"\u4e00\u822c\u7684"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#clapp","text":"\u4e32\u4e00\u4e2a C_3 C_3 \uff0c\u6ee1\u8db3\u4e8e C_3 \\ll C_1 ,C_3 \\ll C_2 C_3 \\ll C_1 ,C_3 \\ll C_2 \uff0c \u5c31\u6709 C_\\Sigma \\approx C_3 C_\\Sigma \\approx C_3 p_1 \\approx \\frac{C_3}{C_1'} p_1 \\approx \\frac{C_3}{C_1'} \uff0c P_2 \\approx \\frac{C_3}{C_2'} P_2 \\approx \\frac{C_3}{C_2'} p_1 ,p_2 p_1 ,p_2 \u53ef\u4ee5\u540c\u65f6\u51cf\u5c0f\uff0c\u4f46\u53d7\u8d77\u632f\u6761\u4ef6\u7684\u9650\u5236\uff0c\u7528\u4f5c\u56fa\u5b9a\u9891\u7387\u632f\u8361\u5668","title":"Clapp"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#siler","text":"\u5728Clapp\u57fa\u7840\u4e0a\u5728L\u4e0a\u5e76\u4e00\u4e2a C_4 C_4 \uff0c\u548c C_3 C_3 \u4e00\u4e2a\u6570\u91cf\u7ea7 \u7528\u4f5c\u53d8\u9891\u632f\u8361\u5668","title":"Siler"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_34","text":"\u538b\u7535\u6548\u5e94 \u7b49\u6548\u4e3a L_q ,C_q ,r_q ,C_0 L_q ,C_q ,r_q ,C_0 \uff0c\u5176 Q_q Q_q \u5f88\u9ad8 \\omega_p - \\omega_q \\omega_p - \\omega_q \u5f88\u5c0f \u4e24\u79cd\u6a21\u5f0f\uff1a \\omega = \\omega_q \\omega = \\omega_q \uff0c\u77ed\u8def\u7ebf\uff0c \\omega_q < \\omega < \\omega_p \\omega_q < \\omega < \\omega_p \uff0c\u7535\u611f","title":"\u6676\u4f53\u632f\u8361\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_35","text":"","title":"\u632f\u5e45\u8c03\u5236\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#am","text":"u(t) = U_{cm}(1+m_a cos(\\Omega t))cos(\\omega_c t) u(t) = U_{cm}(1+m_a cos(\\Omega t))cos(\\omega_c t) \u5f0f\u4e2d m_a = \\frac{K_a U_{\\Omega m}}{U_{cm}} m_a = \\frac{K_a U_{\\Omega m}}{U_{cm}} \u4e3a\u8c03\u5e45\u6307\u6570 \u9891\u8c31\uff1a\u8fb9\u9891\u5e45\u5ea6\u4e3a \\frac{1}{2} m_a U_{cm} \\frac{1}{2} m_a U_{cm} \uff0c\u8f7d\u9891\u5e45\u5ea6\u4e3a U_{cm} U_{cm} \u52a0\u5728R\u4e24\u7aef\u529f\u7387\uff1a 1. \u8f7d\u6ce2\u529f\u7387 P_{OT} P_{OT} 2. \u8fb9\u9891\u529f\u7387 \\frac{1}{4} m_a^2 P_{OT} \\frac{1}{4} m_a^2 P_{OT}","title":"\u666e\u901a\u8c03\u5e45\u6ce2\uff08AM\uff09"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#dsb","text":"AM\u6ce2\u57fa\u7840\u4e0a\u53bb\u6389\u8f7d\u6ce2\u9891\u6bb5 \u5b9e\u8d28\u5c31\u662f\u8f7d\u6ce2\u632f\u8361\u4fe1\u53f7\u76f4\u63a5\u4e58\u4ee5\u8c03\u5236\u4fe1\u53f7 u(t) = \\frac{1}{2}U_{cm}U_{\\Omega m}(\\cdots) u(t) = \\frac{1}{2}U_{cm}U_{\\Omega m}(\\cdots) \u6ce8\u610f\u4e0b\uff1a\u8f7d\u6ce2\u76f8\u4f4d\u5728\u8c03\u5236\u7535\u538b\u96f6\u70b9\u7a81\u53d8180\u00b0","title":"DSB\u6ce2"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#ssb","text":"\u53bb\u6389DSB\u6ce2\u7684\u67d0\u4e00\u8fb9\u9891","title":"SSB\u6ce2"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_36","text":"\u5206\u7c7b\uff1a 1. \u4f4e\u7535\u9891\u8c03\u5236 \u91cd\u70b9\u662f\u63d0\u9ad8\u8c03\u5236\u7684\u7ebf\u6027 2. \u9ad8\u7535\u5e73\u8c03\u5236 \u8981\u517c\u987e\u8f93\u51fa\u529f\u7387\uff0c\u6548\u7387\u548c\u8c03\u5236\u7ebf\u6027 \u7ec4\u6210\uff1a\u8f93\u5165\u56de\u8def\uff0c\u975e\u7ebf\u6027\u5668\u4ef6\u548c\u5e26\u901a\u6ee4\u6ce2\u5668","title":"\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_37","text":"\u7b97\u51fa\u7ecf\u8fc7\u8d1f\u8f7d\u7684\u7535\u6d41\uff0c\u5e26\u901a\u6ee4\u6ce2\u53d6\u5176\u4e0a\u7684\u7535\u538b \u5f00\u5173\u51fd\u6570\u542b\u76f4\u6d41\u548c\u9891\u7387\u7684\u5947\u6570\u5206\u91cf\uff0c\u53bb\u6389\u76f4\u6d41\u5206\u91cf\uff0c\u5176\u5076\u6570\u9879\u4e3a\u8d1f \u5355\u4e8c\u6781\u7ba1\u5f00\u5173\u8c03\u5e45\u7535\u8def\uff1a U_{cm} \\gg U_{\\Omega m} U_{cm} \\gg U_{\\Omega m} \uff0c U_{cm} U_{cm} \u63a7\u5236\u4e8c\u6781\u7ba1\u7684\u5f00\u5173\u72b6\u6001 \u53ea\u80fd\u5b9e\u73b0AM\u6ce2 \u4e8c\u6781\u7ba1\u5e73\u8861\u8c03\u5e45\u7535\u8def \u6ce8\u610f\u4e0b\u531d\u6570\u6bd4\uff0c\u5373\u8d1f\u8f7d\u503c \u8ba1\u7b97\u5148\u5224\u65ad\u4e8c\u6781\u7ba1\u5728\u8f7d\u6ce2\u6b63\u8d1f\u5468\u671f\u7684\u5de5\u4f5c\u72b6\u6001\uff0c\u6b63\u8d1f\u5468\u671f\u7535\u6d41\u5206\u5f00\u8ba1\u7b97\uff0c\u6b64\u7535\u8def\u90fd\u662f\u6b63\u5468\u671f\u5bfc\u901a \u7136\u540e\u6839\u636e\u4e8c\u6781\u7ba1\u5bfc\u901a\u6807\u7535\u6d41\u65b9\u5411\uff0c\u6309\u7535\u6d41\u65b9\u5411\u786e\u5b9a\u7535\u538b\u6b63\u8d1f \u53ef\u4ee5DSB\u6ce2 \u4e8c\u6781\u7ba1\u73af\u5f62\u8c03\u5e45\u7535\u8def \u6ce8\u610f\u5224\u65ad\u4e8c\u6781\u7ba1\u5bfc\u901a\u53cd\u5411\uff0c\u6b64\u5916\u8f7d\u6ce2\u8d1f\u534a\u5468\u671f\u5f00\u5173\u51fd\u6570\u5947\u6570\u9879\u4e3a\u8d1f DSB\u6ce2\uff0c\u6bd4\u8d77\u5e73\u8861\u8c03\u5e45\uff0c\u8fdb\u4e00\u6b65\u6291\u5236\u4e86 \\Omega \\Omega \u5206\u91cf\uff0c\u4e14\u5e45\u5ea6\u662f\u5176\u4e8c\u500d \u6a21\u62df\u4e58\u6cd5\u5668\u8c03\u5e45\u7535\u8def\uff08\u53cc\u5dee\u5206\u5bf9\u7ba1\u632f\u5e45\u8c03\u5236\u7535\u8def\uff09 i = I_0 th(\\frac{qu_1}{2kT}) th(\\frac{qu_2}{2kT}) i = I_0 th(\\frac{qu_1}{2kT}) th(\\frac{qu_2}{2kT}) <span class=\"arithmatex\"><span class=\"MathJax_Preview\">i = I_0 th(\\frac{qu_1}{2kT}) th(\\frac{qu_2}{2kT})</span><script type=\"math/tex\">i = I_0 th(\\frac{qu_1}{2kT}) th(\\frac{qu_2}{2kT}) \u5c06\u6052\u6d41\u6e90\u5206\u4e3a\u4e24\u4e2a\u540e\uff0c\u63a5\u5165\u8d1f\u53cd\u9988\u7535\u963b\uff0c\u53d8\u4e3a\uff1a i = \\frac{2 u_2}{R_y} th(\\frac{qu_1}{2kT}) i = \\frac{2 u_2}{R_y} th(\\frac{qu_1}{2kT}) <span class=\"arithmatex\"><span class=\"MathJax_Preview\">i = \\frac{2 u_2}{R_y} th(\\frac{qu_1}{2kT})</span><script type=\"math/tex\">i = \\frac{2 u_2}{R_y} th(\\frac{qu_1}{2kT}) \u5f0f\u4e2d -I_0/2 \\le u_2/R_y \\le I_0/2 -I_0/2 \\le u_2/R_y \\le I_0/2","title":"\u4f4e\u7535\u5e73\u8c03\u5e45\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_38","text":"\u53ea\u80fd\u8c03AM\u6ce2","title":"\u9ad8\u7535\u5e73\u8c03\u5e45\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_39","text":"\u4e19\u7c7b\u529f\u653e\u8fc7\u538b\u533a\u5177\u6709\u8c03\u5e45\u7279\u6027\uff0c I_{c0} ,I_{c1m} I_{c0} ,I_{c1m} \u968f V_{cc} V_{cc} \u7ebf\u6027\u53d8\u5316 V_{cc} = V_{CT}(1+m_a cos(\\Omega t)) V_{cc} = V_{CT}(1+m_a cos(\\Omega t)) \u8c03\u5236\u4fe1\u53f7\u4e00\u5468\u5e73\u5747\u72b6\u6001\u4e0b\uff0c P_{= av} = P_{=} + P_{\\omega} = (1+(\\frac{m_a}{2})^2)P_{=T} P_{= av} = P_{=} + P_{\\omega} = (1+(\\frac{m_a}{2})^2)P_{=T} \\eta_c = constant \\eta_c = constant \u6ce8\u610f\uff1a\u9009\u62e9\u6676\u4f53\u7ba1\u662f P_{CM} > P_{=av} P_{CM} > P_{=av} \uff0c\u8c03\u5236\u4fe1\u53f7\u6e90\u5fc5\u987b\u662f\u529f\u7387\u6e90","title":"\u96c6\u7535\u6781\u8c03\u5e45\u7535\u8def\uff1a"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_40","text":"\u6b20\u538b\u533a\uff0c\u6548\u7387\u53d8\u5316\uff0c\u8f93\u51fa\u529f\u7387\u90fd\u662f\u76f4\u6d41\u7535\u6e90\u63d0\u4f9b\uff0c\u7ebf\u6027\u8303\u56f4\u5c0f","title":"\u57fa\u6781\u8c03\u5e45\u7535\u8def\uff1a"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_41","text":"\u6ee4\u6ce2\u6cd5\u548c\u79fb\u5411\u6cd5","title":"\u5355\u8fb9\u5e26\u4fe1\u53f7\u4ea7\u751f"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_42","text":"\u76f4\u63a5\u6ee4\u6ce2\u56f0\u96be\uff0c\u76f8\u5bf9\u5e26\u5bbd\u5f88\u5c0f\uff0c\u5b9e\u9645\u4e2d\u964d\u4f4e\u6bcf\u6b21\u7684\u8f7d\u6ce2\u9891\u7387\uff0c\u589e\u5927\u76f8\u5bf9\u5e26\u5bbd\uff0c\u8fdb\u884c\u591a\u6b21\u8c03\u5236","title":"\u6ee4\u6ce2\u6cd5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_43","text":"cos()cos()-sin()sin() cos()cos()-sin()sin() \u8981\u6c42\u51c6\u786e\u79fb90\u00b0","title":"\u79fb\u76f8\u6cd5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_44","text":"\u7ec4\u6210\uff1a\u8f93\u5165\u56de\u8def\uff0c\u975e\u7ebf\u6027\u5668\u4ef6\uff0c\u4f4e\u901a\u6ee4\u6ce2 \u5206\u7c7b\uff1a 1. \u5305\u7edc\u68c0\u6ce2\uff0c\u666e\u901a\u8c03\u5e45\u6ce2\u548c\u9ad8\u9891\u7b49\u5e45\u6ce2 2. \u540c\u6b65\u68c0\u6ce2\uff0c\u53cc\u8fb9\u5e26\u548c\u5355\u8fb9\u5e26\u68c0\u6ce2 \u6307\u6807\uff1a\u7535\u538b\u4f20\u8f93\u7cfb\u6570\uff0c\u7b49\u6548\u8f93\u5165\u7535\u963b\uff0c\u975e\u7ebf\u6027\u5931\u771f\u7cfb\u6570","title":"\u68c0\u6ce2\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_45","text":"\u8f93\u5165\u4fe1\u53f7\u5927\u4e8e0.5V\uff0c\u8c03\u597d\u53c2\u6570\uff0c\u4e8c\u6781\u7ba1\u5145\u653e\u7535\u66f2\u7ebf\u548c\u5305\u7edc\u76f8\u5339\u914d \u68c0\u6ce2\u4e8c\u6781\u7ba1\u5bfc\u901a\u89d2\uff1a U_{BZ} = 0 ,\\theta < \\pi/6 U_{BZ} = 0 ,\\theta < \\pi/6 \u4e0b\uff0c \\theta \\approx \\sqrt[3]{\\frac{3 \\pi r_d}{R}} \\theta \\approx \\sqrt[3]{\\frac{3 \\pi r_d}{R}} \u7ed9\u68c0\u6ce2\u7535\u8def\u52a0\u56fa\u5b9a\u504f\u538b\u53ef\u6ee1\u8db3 U_{BZ} = 0 U_{BZ} = 0 \uff0c R R \u5927\uff0c r_d r_d \u5c0f\u53ef\u6ee1\u8db3 \\theta < \\pi/6 \\theta < \\pi/6 \u6b64\u65f6 u_o u_o \u4e3a\u8f93\u5165\u7684\u9ad8\u9891\u632f\u5e45\u4e58\u4ee5 cos\\theta cos\\theta \uff0c\u5bf9\u4e8eAM\u6ce2\uff0c\u518d\u52a0\u4e00\u4e2a\u9694\u503c\u7535\u5bb9\u540e\uff0c\u53ef\u53d6\u51fa\u539f\u8c03\u5236\u4fe1\u53f7\uff0c\u7b49\u4e8e\u9ad8\u9891\u7b49\u5e45\u6ce2\u7684 K_d K_d \\theta \\theta \u5f88\u5c0f\u65f6\uff0c R_{id} \\approx \\frac{1}{2} R R_{id} \\approx \\frac{1}{2} R \u9891\u7387\u5931\u771f \\frac{1}{\\omega_i C} \\ll R ,\\frac{1}{\\Omega_{max} \\gg R} ,\\frac{1}{\\Omega_{min} C_c} \\ll R \\frac{1}{\\omega_i C} \\ll R ,\\frac{1}{\\Omega_{max} \\gg R} ,\\frac{1}{\\Omega_{min} C_c} \\ll R <span class=\"arithmatex\"><span class=\"MathJax_Preview\">\\frac{1}{\\omega_i C} \\ll R ,\\frac{1}{\\Omega_{max} \\gg R} ,\\frac{1}{\\Omega_{min} C_c} \\ll R</span><script type=\"math/tex\">\\frac{1}{\\omega_i C} \\ll R ,\\frac{1}{\\Omega_{max} \\gg R} ,\\frac{1}{\\Omega_{min} C_c} \\ll R \u975e\u7ebf\u6027\u5931\u771f\u5c0f \u60f0\u6027\u5931\u771f RC\u592a\u5927\uff0c\u653e\u7535\u8ddf\u4e0d\u4e0a\u5305\u7edc \u591a\u9891\u4e0d\u4ea7\u751f\u6761\u4ef6\uff1a RC\\Omega_{max} \\le \\frac{\\sqrt{1-m_a}}{m_a} RC\\Omega_{max} \\le \\frac{\\sqrt{1-m_a}}{m_a} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">RC\\Omega_{max} \\le \\frac{\\sqrt{1-m_a}}{m_a}</span><script type=\"math/tex\">RC\\Omega_{max} \\le \\frac{\\sqrt{1-m_a}}{m_a} \u8d1f\u5cf0\u5207\u5272\u5931\u771f \u4e0d\u4ea7\u751f\u6761\u4ef6\uff1a U_{im}(1-m_a) \\ge U_{im} \\frac{R}{R_L + R} U_{im}(1-m_a) \\ge U_{im} \\frac{R}{R_L + R} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">U_{im}(1-m_a) \\ge U_{im} \\frac{R}{R_L + R}</span><script type=\"math/tex\">U_{im}(1-m_a) \\ge U_{im} \\frac{R}{R_L + R} \u4ea4\u76f4\u6d41\u7535\u963b\u5dee\u503c\u8d8a\u5c0f\uff0c\u8d8a\u4e0d\u5bb9\u6613\u4ea7\u751f","title":"\u4e8c\u6781\u7ba1\u5927\u4fe1\u53f7\u68c0\u6ce2\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_46","text":"\u5c0f\u4e8e0.2V\uff0c\u5728\u5927\u4fe1\u53f7\u68c0\u6ce2\u57fa\u7840\u4e0a\u52a0\u4ee5\u504f\u7f6e\uff0c\u4f7f\u4e8c\u6781\u7ba1\u9759\u6001\u5de5\u4f5c\u70b9\u4f4d\u4e8e\u66f2\u7ebf\u7684\u5f2f\u66f2\u90e8\u5206","title":"\u5c0f\u4fe1\u53f7\u68c0\u6ce2"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_47","text":"\u7528\u672c\u5730\u8f7d\u9891\u4e58\u4ee5\u8c03\u5e45\u6ce2\uff0c\u518d\u901a\u8fc7\u4f4e\u901a\u6ee4\u6ce2 \u9891\u7387\uff0c\u76f8\u4f4d\u4e0d\u540c\u6b65\u65f6\uff0c\u4f1a\u5931\u771f","title":"\u540c\u6b65\u68c0\u6ce2\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_48","text":"\u5206\u7c7b\uff1a 1. \u76f8\u4f4d\u8c03\u5236\uff0c\u77ac\u65f6\u76f8\u4f4d\u968f u_\\omega (t) u_\\omega (t) \u7ebf\u6027\u53d8\u5316 2. \u9891\u7387\u8c03\u5236 \u4e00\u822c\u6570\u5b66\u8868\u8fbe\u5f0f\uff1a 1. \u8c03\u76f8\u6ce2\uff1a U_m cos(\\omega_c t+K_p u_\\Omega(t)) U_m cos(\\omega_c t+K_p u_\\Omega(t)) <span class=\"arithmatex\"><span class=\"MathJax_Preview\">U_m cos(\\omega_c t+K_p u_\\Omega(t))</span><script type=\"math/tex\">U_m cos(\\omega_c t+K_p u_\\Omega(t)) 2. \u8c03\u9891\u6ce2\uff1a U_m cos(\\omega_c t+k_f\\int_0^t u_\\Omega(t)) U_m cos(\\omega_c t+k_f\\int_0^t u_\\Omega(t)) <span class=\"arithmatex\"><span class=\"MathJax_Preview\">U_m cos(\\omega_c t+k_f\\int_0^t u_\\Omega(t))</span><script type=\"math/tex\">U_m cos(\\omega_c t+k_f\\int_0^t u_\\Omega(t)) \u8c03\u89d2\u6ce2\u7684\u8c03\u5236\u6307\u6570\u5b9a\u4e49\u4e3a\u6700\u5927\u76f8\u79fb\uff0c m_p = K_p U_{\\Omega m} \\qquad m_f = \\frac{K_f U_{\\Omega m}}{\\Omega} m_p = K_p U_{\\Omega m} \\qquad m_f = \\frac{K_f U_{\\Omega m}}{\\Omega} \u800c\u6700\u5927\u9891\u79fb\u7b49\u4e8e\u8c03\u5236\u6307\u6570\u4e0e\u8c03\u5236\u4fe1\u53f7\u9891\u7387\u7684\u4e58\u79ef \u4e09\u4e2a\u9891\u7387\u53c2\u6570 \u9891\u8c31\uff1a\u7531\u8f7d\u9891\u4e3a\u4e2d\u5fc3\uff0c\u65e0\u6570\u8fb9\u9891\u7ec4\u6210 \u4e2d\u7b49\u8d28\u91cf\u901a\u4fe1\u7cfb\u7edf\uff0c B_{CR} = 2(m+1)F B_{CR} = 2(m+1)F \uff0cm\u4e3a\u5c0f\u6570\u65f6\uff0c7\u820d8\u5165 \u8c03\u9891\u6ce2 B_{CR} B_{CR} \u57fa\u672c\u4e0d\u53d8\uff0c\u8c03\u76f8\u6ce2 B_{CR} B_{CR} \u53d8\u5316\u5927","title":"\u89d2\u5ea6\u8c03\u5236\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_49","text":"\u76f4\u63a5\u8c03\u5236\uff1a\u7528\u8c03\u5236\u4fe1\u53f7\u63a7\u5236\u51b3\u5b9a\u632f\u8361\u5668\u7684\u9891\u7387\u7684\u53ef\u53d8\u7535\u6297\u7684\u503c \u95f4\u63a5\u8c03\u5236\uff1a\u5148\u901a\u8fc7\u79ef\u5206\u7535\u8def\uff0c\u518d\u901a\u8fc7\u76f8\u4f4d\u8c03\u5236","title":"\u8c03\u9891\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_50","text":"\u53ea\u80fd\u52a0\u53cd\u5411\u7535\u538b\uff0c\u548cPN\u7ed3\u7ed3\u7535\u5bb9\u6709\u4e00\u5b9a\u5173\u7cfb C_j = \\frac{C_{j0}}{(1+\\frac{u_r}{U_D})^\\gamma} = \\frac{C_{jQ}}{(1+m cos(\\Omega t))^\\gamma} C_j = \\frac{C_{j0}}{(1+\\frac{u_r}{U_D})^\\gamma} = \\frac{C_{jQ}}{(1+m cos(\\Omega t))^\\gamma} \u5f0f\u4e2d m = U_{\\Omega m}/(V_Q+U_D) m = U_{\\Omega m}/(V_Q+U_D) \uff0c\u4e3a\u7535\u5bb9\u8c03\u5236\u5ea6 \u4f5c\u4e3a\u56de\u8def\u603b\u7535\u5bb9\u65f6\uff0c\u5b9e\u73b0\u7ebf\u6027\u8c03\u9891\u7684\u6761\u4ef6\u662f \\gamma = 2 \\gamma = 2 \uff0c\u6b64\u65f6 \\omega_c = \\omega_c + \\frac{\\omega_c}{U_D + V_Q} u_{\\Omega m}(t) \\omega_c = \\omega_c + \\frac{\\omega_c}{U_D + V_Q} u_{\\Omega m}(t) \u82e5 \\gamma \\neq 2 \\gamma \\neq 2 \uff0c\u5219\u4f1a\u4ea7\u751f\u4e2d\u5fc3\u9891\u7387\u504f\u79fb\u548c\u7ebf\u6027\u5931\u771f \u7279\u70b9\uff1a\u7075\u654f\u5ea6\u9ad8\uff0c\u9891\u504f\u5927\uff0c\u9891\u7387\u7a33\u5b9a\u5ea6\u4e0d\u597d","title":"\u53d8\u5bb9\u4e8c\u6781\u7ba1\u76f4\u63a5\u8c03\u9891\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_51","text":"","title":"\u6676\u4f53\u632f\u8361\u5668\u76f4\u63a5\u8c03\u9891"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_52","text":"","title":"\u8c03\u76f8\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_53","text":"\u53d8\u5bb9\u4e8c\u6781\u7ba1\u8c03\u76f8\u7f51\u7edc\uff1a\u5b9e\u8d28\u548c\u76f4\u63a5\u8c03\u9891\u4e00\u6837\uff0c\u90fd\u662f\u79fb\u52a8\u4e86\u4e2d\u5fc3\u9891\u7387\uff0c\u53ea\u4e0d\u8fc7\u5206\u6790\u65f6\u4f7f\u7528\u4e86\u8c10\u632f\u56de\u8def\u7684\u76f8\u9891\u7279\u6027\u66f2\u7ebf \u82e5\u8c03\u5236\u4fe1\u53f7\u7684\u9694\u76f4\u7535\u5bb9\u9009\u5927\u4e86\uff0c\u5c31\u53d8\u6210\u79ef\u5206\u7535\u8def\uff0c\u53ef\u5b9e\u73b0\u95f4\u63a5\u8c03\u9891","title":"\u53ef\u53d8\u79fb\u76f8\u6cd5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_54","text":"","title":"\u53ef\u53d8\u65f6\u5ef6\u6cd5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_55","text":"","title":"\u77e2\u91cf\u5408\u6210\u6cd5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_56","text":"\u6280\u672f\u6307\u6807\uff1a 1. \u9274\u76f8\u5668\uff1a\u9274\u76f8\u7279\u6027\u66f2\u7ebf\uff0c\u9274\u76f8\u8de8\u5bfc\uff0c\u9274\u76f8\u7ebf\u6027\u8303\u56f4\uff0c\u975e\u7ebf\u6027\u5931\u771f 2. \u9274\u9891\u5668\uff1a\u540c\u7406","title":"\u9274\u9891\u5668\u548c\u9274\u76f8\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_57","text":"\u5206\u7c7b\uff1a\u6a21\u62df\u7535\u8def\u578b\uff08\u4e58\u79ef\u578b\uff09\uff0c\u6570\u5b57\u7535\u8def\u578b\uff08\u95e8\u7535\u8def\uff09","title":"\u9274\u76f8\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_58","text":"\u6a21\u62df\u4e58\u6cd5\u5668\u76f8\u4e58\uff0c\u518d\u7531\u4f4e\u901a\u53d6\u51fa u_1 u_1 \u9700\u8981\u89e3\u8c03\u4fe1\u53f7\uff0c u_2 u_2 \u8981\u4e0e u_1 u_1 \u6b63\u4ea4\uff0c\u5206\u4e09\u79cd\u60c5\u51b5\u8ba8\u8bba\uff1a\u4e24\u4e2a\u90fd\u662f\u5c0f\u4fe1\u53f7\u6216\u5927\u4fe1\u53f7\u4ee5\u53ca u_1 u_1 \u5c0f\u4fe1\u53f7\uff0c u_2 u_2 \u5927\u4fe1\u53f7 \u9274\u76f8\u7279\u6027\uff1a\u6b63\u5f26\u5f62 \u8303\u56f4 \\phi_{emax} = \\pm \\frac{\\pi}{6} rad \\phi_{emax} = \\pm \\frac{\\pi}{6} rad \u4e09\u89d2\u6ce2\u5f62 \\phi_{emax} = \\pm \\frac{\\pi}{2} rad \\phi_{emax} = \\pm \\frac{\\pi}{2} rad \u6b63\u5f26\u5f62 \\phi_{emax} = \\pm \\frac{\\pi}{6} rad \\phi_{emax} = \\pm \\frac{\\pi}{6} rad","title":"\u4e58\u79ef\u578b"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_59","text":"\u5206\u7c7b\uff1a\u8c03\u9891-\u8c03\u5e45\u8c03\u9891\u53d8\u6362\u578b\uff0c\u76f8\u79fb\u4e58\u6cd5\u9274\u9891\u578b\uff0c\u8109\u51b2\u5747\u503c\u578b","title":"\u9274\u9891\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#-","text":"\u53cc\u5931\u8c10\u56de\u8def\u9274\u9891\u5668 \u5229\u7528\u4e24\u4e2a\u5931\u8c10\u56de\u8def\u548c\u4e24\u4e2a\u68c0\u6ce2\u5668 \u76f8\u4f4d\u9274\u9891\u5668 \u53cc\u8026\u5408\u56de\u8def\u548c\u4e24\u4e2a\u68c0\u6ce2\u5668 \u6ce8\u610f\uff1a\u521d\u7ea7\u56de\u8def\u8c10\u632f\u9891\u7387\u4e0e\u5bf9\u79f0\u6027\u6709\u5173\uff0c\u4e8c\u7ea7\u56de\u8def\u548c\u4e2d\u5fc3\u9891\u7387\u6709\u5173 \u9274\u9891\u7279\u6027\u66f2\u7ebf\u7531\u8026\u5408\u56e0\u6570 \\eta = kQ_L \\eta = kQ_L \u51b3\u5b9a\uff0c \\eta \\eta \u4e00\u5b9a\u65f6\uff0c\u5bbd\u5ea6\u7531\u8026\u5408\u7cfb\u6570 k = \\frac{M}{\\sqrt{L_1 L_2}} k = \\frac{M}{\\sqrt{L_1 L_2}} \u51b3\u5b9a \u6bd4\u4f8b\u9274\u9891\u5668 \u5728\u76f8\u4f4d\u9274\u9891\u5668\u5373\u57fa\u7840\u4e0a\u66f4\u6539\uff0c\u727a\u7272\u8f93\u51fa\u7535\u538b\u7684\u5e45\u5ea6\u6765\u6362\u53d6\u6291\u5236\u5bc4\u751f\u8c03\u5e45\u7684\u80fd\u529b\uff0c\u539f\u7406\u662f\u5e45\u5ea6\u53d8\u5316\u65f6\uff0c |U_{D1}| ,|U_{D2}| |U_{D1}| ,|U_{D2}| \u6bd4\u503c\u4e0d\u53d8\uff0c U_o U_o \u4e0d\u53d8","title":"\u8c03\u9891-\u8c03\u5e45\u8c03\u9891\u53d8\u6362\u578b"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_60","text":"","title":"\u6df7\u9891\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_61","text":"\u4fe1\u53f7\u4e0e\u672c\u632f\u9891\u7387\u5e72\u6270\uff08\u5e72\u6270\u54e8\u58f0\uff09 pf_L - qf_s = f_I \\pm F \\qquad qf_s - pf_L = f_I \\pm F pf_L - qf_s = f_I \\pm F \\qquad qf_s - pf_L = f_I \\pm F <span class=\"arithmatex\"><span class=\"MathJax_Preview\">pf_L - qf_s = f_I \\pm F \\qquad qf_s - pf_L = f_I \\pm F</span><script type=\"math/tex\">pf_L - qf_s = f_I \\pm F \\qquad qf_s - pf_L = f_I \\pm F \u5916\u6765\u5e72\u6270\u548c\u672c\u632f\u9891\u7387\uff08\u526f\u6ce2\u9053\u5e72\u6270\uff09 f_n = \\frac{p}{q}f_L \\pm \\frac{f_I}{q} f_n = \\frac{p}{q}f_L \\pm \\frac{f_I}{q} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">f_n = \\frac{p}{q}f_L \\pm \\frac{f_I}{q}</span><script type=\"math/tex\">f_n = \\frac{p}{q}f_L \\pm \\frac{f_I}{q} q = 1 ,p = 0 q = 1 ,p = 0 \u65f6\u79f0\u4e3a\u4e2d\u9891\u5e72\u6270 q = 1 ,p = 1 q = 1 ,p = 1 \u65f6\u79f0\u4e3a\u955c\u50cf\u9891\u7387\u5e72\u6270\uff0c\u5e38\u7528 f_n = 2f_I + f_s f_n = 2f_I + f_s \u8ba1\u7b97","title":"\u5e72\u6270\u4e0e\u5931\u771f"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_62","text":"\u7ec4\u6210\uff1a\u9274\u76f8\u5668\uff0c\u73af\u8def\u6ee4\u6ce2\u5668\uff0c\u538b\u63a7\u632f\u8361\u5668 p\\theta_e + K_dK_p(p)K_v sin(\\theta_e) = p\\theta_1 p\\theta_e + K_dK_p(p)K_v sin(\\theta_e) = p\\theta_1","title":"\u53cd\u9988\u63a7\u5236\u7535\u8def\u4e0e\u9891\u7387\u5408\u6210"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/","text":"\u4fe1\u606f\u8bba \u7eea\u8bba \u4fe1\u606f\u7684\u57fa\u672c\u6982\u5ff5 \u4e09\u5927\u8981\u7d20\uff1a\u7269\u8d28\uff0c\u80fd\u91cf\uff0c\u4fe1\u606f \u901a\u4fe1\u7684\u57fa\u672c\u95ee\u9898\uff1a\u5728\u4e00\u70b9\u7cbe\u786e\u7684\u6216\u8fd1\u4f3c\u5730\u6062\u590d\u53e6\u4e00\u70b9\u7684\u4fe1\u606f \u901a\u4fe1\u7cfb\u7edf\u4e09\u9879\u6307\u6807\uff1a \u6709\u6548\u6027\uff1a\u5feb \u53ef\u9760\u6027\uff1a\u51c6\uff0c\u8bef\u7801\u7387\u4f4e \u5b89\u5168\u6027 \u4e09\u9879\u6307\u6807\u5bf9\u5e94\u7684\u6280\u672f\uff1a \u6570\u636e\u538b\u7f29 \u6570\u636e\u7ea0\u9519 \u6570\u636e\u52a0\u5bc6 \u7814\u7a76\u5185\u5bb9 \u901a\u4fe1\u7cfb\u7edf\u662f\u4ece\u7a7a\u95f4\u7684\u4e00\u70b9\u5230\u53e6\u4e00\u70b9\u4f20\u9001\u4fe1\u606f\u7684\uff0c \u800c\u5b58\u50a8\u7cfb\u7edf\u662f\u4ece\u65f6\u95f4\u7684\u4e00\u70b9\u5230\u53e6\u4e00\u70b9\u4f20\u9001\u4fe1\u606f\u7684 \u6a21\u578b\uff1a - \u4fe1\u6e90 - \u79bb\u6563\u4fe1\u6e90 - \u8fde\u7eed\u4fe1\u6e90 - \u79bb\u6563\u65f6\u95f4\u8fde\u7eed\u4fe1\u6e90 - \u6a21\u62df\u4fe1\u6e90 - \u7f16\u7801\u5668 - \u4fe1\u6e90\u7f16\u7801\u5668\uff1a\u63d0\u9ad8\u4f20\u8f93\u6709\u6548\u6027 - \u4fe1\u9053\u7f16\u7801\u5668\uff1a\u63d0\u9ad8\u4f20\u8f93\u53ef\u9760\u6027 - \u8c03\u5236\u5668\uff1a\u5c06\u7b26\u53f7\u53d8\u6210\u9002\u5408\u4fe1\u9053\u4f20\u8f93\u7684\u4fe1\u53f7 - \u4fe1\u9053 - \u65e0\u566a\u58f0 - \u6709\u566a\u58f0 - \u52a0\u6027 - \u4e58\u6027 - \u6309\u79bb\u6563\u8fd8\u662f\u8fde\u7eed\uff0c\u6309\u6709\u8bb0\u5fc6\u8fd8\u662f\u65e0\u8bb0\u5fc6 - \u8bd1\u7801\u5668\uff1a\u89e3\u8c03\u5668\uff0c\u4fe1\u9053\u8bd1\u7801\u5668\uff0c\u4fe1\u6e90\u8bd1\u7801\u5668 - \u4fe1\u5bbf \u6027\u80fd\u8bc4\u4ef7\uff1a \u6709\u6548\u6027\uff1a\u9891\u8c31\u5229\u7528\u7387 \u53ef\u9760\u6027\uff1a\u4f20\u8f93\u9519\u8bef\u7387 \u5b89\u5168\u6027\uff1a\u52a0\u5bc6\u5f3a\u5ea6 shannong\u4fe1\u606f\u8bba \u4e00\u4e2a\u6982\u5ff5\uff0c\u4e09\u4e2a\u5b9a\u7406 \u4fe1\u606f\u71b5\u7684\u6982\u5ff5 \u5b9a\u7406\uff1a 1. \u65e0\u5931\u771f\u4fe1\u6e90\u7f16\u7801\u5b9a\u7406\uff1a R \\ge H R \\ge H \u6709\u566a\u4fe1\u9053\u7f16\u7801\u5b9a\u7406\uff1a R \\le C R \\le C \u9650\u5931\u771f\u4fe1\u6e90\u7f16\u7801\u5b9a\u7406\uff1a R \\ge R(D) \\Leftrightarrow R \\ge R(D) \\Leftrightarrow \u5b58\u5728\u5e73\u5747\u5931\u771f \\le D \\le D \u79bb\u6563\u4fe1\u606f\u7684\u5ea6\u91cf \u81ea\u4fe1\u606f\u548c\u4e92\u4fe1\u606f \u81ea\u4fe1\u606f I(x) = -log(p(x)) I(x) = -log(p(x)) \u610f\u4e49\uff1a\u4e8b\u4ef6\u53d1\u751f\u524d\uff1a\u4e8b\u4ef6\u53d1\u751f\u7684\u4e0d\u786e\u5b9a\u6027\uff0c\u4e8b\u4ef6\u53d1\u751f\u540e\uff1a\u4e8b\u4ef6\u5305\u542b\u7684\u4fe1\u606f\u91cf I(xy) = -log(p(xy)) I(xy) = -log(p(xy)) \u5728 y = b_i y = b_i \u7ed9\u5b9a\u4e0b\uff1a I(x|y) = -log(p(x|y)) = I(xy) - I(y) I(x|y) = -log(p(x|y)) = I(xy) - I(y) \u4e92\u4fe1\u606f I(x;y) = log\\frac{p(x|y)}{p(x)} = I(x) - I(x|y) = I(y;x) I(x;y) = log\\frac{p(x|y)}{p(x)} = I(x) - I(x|y) = I(y;x) \u8868\u793a\u5f53 y y \u53d1\u751f\u540e\uff0c x x \u4e0d\u786e\u5b9a\u6027\u7684\u53d8\u5316\uff0c\u53cd\u6620\u4e24\u4e2a\u968f\u673a\u4e8b\u4ef6 x,y x,y \u4e4b\u95f4\u7684\u7edf\u8ba1\u5173\u8054\u7a0b\u5ea6 I(x;y|z) = log(\\frac{p(x|yz)}{p(x|z)}) I(x;y|z) = log(\\frac{p(x|yz)}{p(x|z)}) \u4fe1\u606f\u71b5 H(X) = E[I(x)] = -\\sum_x p(x)logp(x) H(X) = E[I(x)] = -\\sum_x p(x)logp(x) \u4fe1\u6e90\u8f93\u51fa\u524d\uff1a\u4fe1\u6e90\u7684\u7684\u5e73\u5747\u4e0d\u7a33\u5b9a\u6027\uff0c\u8f93\u51fa\u540e\uff1a\u4e00\u4e2a\u4fe1\u6e90\u7b26\u53f7\u6240\u63d0\u4f9b\u7684\u5e73\u5747\u4fe1\u606f\u91cf \u6709\u6839\u6982\u7387\u6811\uff1a H(X) = \\sum_i q(u_i)H(u_i) H(X) = \\sum_i q(u_i)H(u_i) \u6761\u4ef6\u71b5\uff1a H(Y|X) = -\\sum_x p(x)H(Y|x) H(Y|X) = -\\sum_x p(x)H(Y|x) \u5f0f\u4e2d H(Y|x) H(Y|x) \u4e3a\u53d6\u67d0\u4e00\u503c\u662f Y Y \u7684\u71b5\uff0c H(Y|x) = -\\sum_y p(y|x)log p(y|x) H(Y|x) = -\\sum_y p(y|x)log p(y|x) \u8054\u5408\u71b5\uff1a H(XY) = -\\sum_x \\sum_y p(xy)log p(xy) H(XY) = -\\sum_x \\sum_y p(xy)log p(xy) \u6563\u5ea6\uff1a D(P//Q) = \\sum_x P(x)log \\frac{P(x)}{Q(x)} \\ge 0 D(P//Q) = \\sum_x P(x)log \\frac{P(x)}{Q(x)} \\ge 0 \u71b5\u7684\u57fa\u672c\u6027\u8d28\uff1a \u5bf9\u79f0\uff0c\u975e\u8d1f\uff0c\u6269\u5c55\uff0c\u53ef\u52a0 \u6781\u503c\u6027\uff08\u79bb\u6563\u6700\u5927\u71b5\u5b9a\u7406\uff09\uff1a H(X) \\le log n H(X) \\le log n \uff0c\u6563\u5ea6\u5b9a\u7406\u53ef\u8bc1 \u4e0a\u51f8\u6027\uff0c\u786e\u5b9a\u6027 \u5404\u7c7b\u71b5\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a H(Y|X) \\le H(Y) H(Y|X) \\le H(Y) H(X_1 X_2 \\cdots X_N) \\le H(X_1)H(X_2)\\cdots H(X_N) H(X_1 X_2 \\cdots X_N) \\le H(X_1)H(X_2)\\cdots H(X_N) \u5e73\u5747\u4e92\u4fe1\u606f \u96c6\u5408\u4e0e\u4e8b\u4ef6\uff1a I(x;Y) = \\sum_y p(y|x) log \\frac{p(y|x)}{p(y)} I(x;Y) = \\sum_y p(y|x) log \\frac{p(y|x)}{p(y)} \u96c6\u5408\u4e8e\u96c6\u5408\uff1a I(X;Y) = \\sum_{x,y} p(xy) I(x;y) I(X;Y) = \\sum_{x,y} p(xy) I(x;y) \u5e73\u5747\u4e92\u4fe1\u606f\u4e0e\u71b5\u7684\u5173\u7cfb\uff1a I(X;Y) = H(X) - H(X|Y) = H(X)+H(Y)-H(XY) I(X;Y) = H(X) - H(X|Y) = H(X)+H(Y)-H(XY) \u6027\u8d28\uff1a \u975e\u8d1f\uff0c\u5bf9\u79f0 \u6781\u503c\uff1a I(X;Y) \\le H(X) and H(Y) I(X;Y) \\le H(X) and H(Y) \u4e3a p(x) p(x) \u7684\u4e0a\u51f8\u51fd\u6570\uff0c p(y|x) p(y|x) \u7684\u4e0b\u51f8\u51fd\u6570 \u79bb\u6563\u4fe1\u6e90 \u5206\u7c7b\u4e0e\u6a21\u578b \u5206\u7c7b\uff1a\u6309\u7b26\u53f7\u53d6\u503c\uff0c\u6309\u7b26\u53f7\u95f4\u4f9d\u8d56\u5173\u7cfb\uff0c\u72b6\u6001\u96c6\u5408\u662f\u5426\u6709\u9650\uff0c\u662f\u5426\u5e73\u7a33 \u79bb\u6563\u65e0\u8bb0\u5fc6\u4fe1\u6e90\u6570\u5b66\u6a21\u578b\uff1a \\begin{bmatrix} X \\\\ P \\\\ \\end{bmatrix} = \\begin{bmatrix} a_1 & a_2 & \\dotsb & a_n \\\\ p(a_1) & p(a_2) & \\dotsb & p(a_n)\\\\ \\end{bmatrix} \\begin{bmatrix} X \\\\ P \\\\ \\end{bmatrix} = \\begin{bmatrix} a_1 & a_2 & \\dotsb & a_n \\\\ p(a_1) & p(a_2) & \\dotsb & p(a_n)\\\\ \\end{bmatrix} \u591a\u7ef4\uff0cN\u6b21\u6269\u5c55\u6e90 \u79bb\u6563\u6709\u8bb0\u5fc6\u4fe1\u6e90\uff1a \u9a6c\u6c0f\u4fe1\u6e90 \u79bb\u6563\u65e0\u8bb0\u5fc6\u4fe1\u6e90\u7684\u71b5 \u5355\u7b26\u53f7\u6027\u8d28\uff1a \u4e0a\u51f8\u51fd\u6570\uff1a p = 0.5 p = 0.5 \u65f6\uff0c\u6700\u5927 \u5177\u6709\u71b5\u7684\u4e00\u5207\u6027\u8d28 N\u6b21\u6269\u5c55\u71b5\uff1a H(X^N) = NX(X) H(X^N) = NX(X) \u79bb\u6563\u5e73\u7a33\u4fe1\u6e90\u7684\u71b5 \u7edf\u8ba1\u7279\u6027\uff0c\u6761\u4ef6\u6982\u7387\uff0c\u4fe1\u606f\u71b5\uff0c\u6761\u4ef6\u71b5\u4e0e\u65f6\u95f4\u7684\u63a8\u79fb\u65e0\u5173 \u79bb\u6563\u6709\u8bb0\u5fc6\u5e73\u7a33\u4fe1\u6e90\uff1a H(X^N) \\le NH(X_1) H(X^N) \\le NH(X_1) \u5e73\u5747\u7b26\u53f7\u71b5\uff1a H_N(X) = \\frac{1}{N} H(X^N) H_N(X) = \\frac{1}{N} H(X^N) \u6781\u9650\u7b26\u53f7\u71b5\uff1a H_\\infty = \\lim_{N \\rightarrow \\infty}H_N(X) H_\\infty = \\lim_{N \\rightarrow \\infty}H_N(X) \u6027\u8d28\uff1a H(X_N|X_1X_2\\cdots X_{N-1}) \\ge H(X_{N+1}|X_1X_2\\cdots X_{N}) H(X_N|X_1X_2\\cdots X_{N-1}) \\ge H(X_{N+1}|X_1X_2\\cdots X_{N}) H_N(X) \\ge H(X_N|X_1X_2\\cdots X_{N-1}) H_N(X) \\ge H(X_N|X_1X_2\\cdots X_{N-1}) H_N(X) \\ge H_{N+1}(X) H_N(X) \\ge H_{N+1}(X) H_\\infty(X) = H(X_N|X_1X_2\\cdots X_{N-1}) H_\\infty(X) = H(X_N|X_1X_2\\cdots X_{N-1}) \u6709\u9650\u72b6\u6001\u9a6c\u5c14\u53ef\u592b\u94fe \u65f6\u95f4\u79bb\u6563\uff0c\u72b6\u6001\u79bb\u6563\uff0cn\u9636\u9a6c\u6c0f\u94fe\u53ea\u4e0e\u524dn\u4e2a\u72b6\u6001\u6709\u5173 \u72b6\u6001\u8f6c\u79fb\u6982\u7387\uff1a p(x_n = j|x_m = i) = p_{ij}(m,n) p(x_n = j|x_m = i) = p_{ij}(m,n) \u9f50\u6b21\uff08\u5e73\u7a33\uff09k\u6b65\uff0c\u4e00\u6b65\u65f6\u7701\u7565k\uff1a p_{ij}^{(k)} p_{ij}^{(k)} \u8868\u793a\u65b9\u6cd5\uff1a\u8f6c\u79fb\u6982\u7387\u56fe\uff0c\u7f51\u683c\u56fe\uff0c\u72b6\u6001\u8f6c\u79fb\u56fe kolmogorov-chapman \u65b9\u7a0b\uff1a p^{(k)} = p^{(0)}P^k p^{(k)} = p^{(0)}P^k \u5206\u7c7b\uff1a\u5e38\u8fd4\u6001\uff0c\u8fc7\u6e21\u6001 \u82e5\u5e38\u8fd4\u6001 \\{n:n\\le 1 ,p_{ii}^{n} > 0\\} \\{n:n\\le 1 ,p_{ii}^{n} > 0\\} \u7684\u6700\u5927\u516c\u7ea6\u6570\u4e3a d_i d_i \uff0c d_i = 1 d_i = 1 \u904d\u5386\uff0c d_i > 1 d_i > 1 \u5468\u671f \u540c\u4e00\u7c7b\u6240\u6709\u5468\u671f\u76f8\u7b49 \u9a6c\u6c0f\u94fe\u7684\u5e73\u7a33\u5206\u5e03\uff1a \\pi^T = \\pi^T P \\pi^T = \\pi^T P \\lim_{k \\rightarrow \\infty} P^k = e\\pi^T \\lim_{k \\rightarrow \\infty} P^k = e\\pi^T \u5bf9\u4e8e\u6709\u9650\u72b6\u6001\u7684\u9a6c\u6c0f\u94fe\uff0c\u5e73\u7a33\u5206\u5e03\u6052\u5b58\u5728\uff0c\u6709\u51e0\u4e2a\u904d\u5386\u5e38\u8fd4\u7c7b\u5c31\u6709\u51e0\u4e2a\u89e3\uff0c\u5bf9\u4e8e\u53ea\u6709\u5468\u671f\u5e38\u8fd4\u7c7b\u7684\u9a6c\u6c0f\u94fe\uff0c\u4e0a\u5f0f\u4e0d\u6536\u655b \u9a6c\u5c14\u53ef\u592b\u4fe1\u6e90 \u5f53\u524d\u65f6\u523b\u8f93\u51fa\u7b26\u53f7\u53ea\u4e0e\u5f53\u524d\u65f6\u523b\u72b6\u6001\u6709\u5173 \u4ea7\u751f\u6a21\u578b \u9a6c\u6c0f\u94feN\u6b21\u6269\u5c55\u6e90\u7684\u8ba1\u7b97 \u5bf9\u4e8em\u9636\u7684\u8d77\u59cb\u72b6\u6001\u5e73\u7a33\u9a6c\u6c0f\u94fe\uff1a H(X_1X_2 \\cdots X_N) = H([\\pi]) + (N-m)[\\pi]^T[h] H(X_1X_2 \\cdots X_N) = H([\\pi]) + (N-m)[\\pi]^T[h] \u5f0f\u4e2d [h] [h] \u4e3a\u8f6c\u79fb\u6982\u7387\u6bcf\u884c\u7684\u71b5 \u82e5\u72b6\u6001\u4e0e\u7b26\u53f7\u4e00\u4e00\u5bf9\u5e94\uff1a H(X)_\\infty = [\\pi]^T[h] H(X)_\\infty = [\\pi]^T[h] \u5426\u5219\uff1a H(X)_\\infty = \\sum_{i=1}^J \\pi_iH(X|s=i) H(X)_\\infty = \\sum_{i=1}^J \\pi_iH(X|s=i) \u5f0f\u4e2d H(X|s=i) = -\\sum_{i=1}^n p_j(a_i)log p_j(a_i) H(X|s=i) = -\\sum_{i=1}^n p_j(a_i)log p_j(a_i) \u4fe1\u6e90\u76f8\u5173\u6027\u4e0e\u5269\u4f59\u5ea6 \u76f8\u5173\u6027\u5373\u4fe1\u6e90\u7b26\u53f7\u95f4\u7684\u4f9d\u8d56\u7a0b\u5ea6 \u4fe1\u6e90\u6548\u7387\uff1a \\eta = \\frac{H_\\infty}{H_0} \\eta = \\frac{H_\\infty}{H_0} \u5269\u4f59\u5ea6\uff1a \\gamma = 1-\\eta \\gamma = 1-\\eta \u5f0f\u4e2d H_0 = logq H_0 = logq \u4e3a\u7b26\u53f7\u72ec\u7acb\u7b49\u6982\u65f6\u7684\u4fe1\u6e90\u71b5 \u8fde\u7eed\u968f\u673a\u53d8\u91cf\u96c6\u5408\u71b5 \u8fde\u7eed\u4fe1\u6e90\u71b5\u4e24\u90e8\u5206\uff1a\u7edd\u5bf9\u71b5\u65e0\u9650\u5927\uff0c\u5dee\u71b5\u4e3a h(X) = -\\int p(x)log p(x) \\mathrm{d} x h(X) = -\\int p(x)log p(x) \\mathrm{d} x \uff0c\u5355\u4f4d\u4e3abit/\u81ea\u7531\u5ea6 \u6761\u4ef6\u71b5\uff1a h(X|Y) = -\\iint p(xy) log p(x|y) \\mathrm{d} x \\mathrm{d} y h(X|Y) = -\\iint p(xy) log p(x|y) \\mathrm{d} x \\mathrm{d} y \u8054\u5408\u71b5\uff1a h(\\boldsymbol{X}^N) = -\\int p(\\boldsymbol{x}) log p(\\boldsymbol{x}) h(\\boldsymbol{X}^N) = -\\int p(\\boldsymbol{x}) log p(\\boldsymbol{x}) \u71b5\u7387\uff08\u7c7b\u4f3c\u79bb\u6563\u4fe1\u6e90\u7684\u6781\u9650\u7b26\u53f7\u71b5\uff09\uff1a h(X) = \\lim_{N\\rightarrow \\infty} \\frac{h(X_1X_2\\cdots X_N)}{N} h(X) = \\lim_{N\\rightarrow \\infty} \\frac{h(X_1X_2\\cdots X_N)}{N} \u82e5 \\boldsymbol{y} = \\boldsymbol{A}\\boldsymbol{x} + \\boldsymbol{\\alpha} \\boldsymbol{y} = \\boldsymbol{A}\\boldsymbol{x} + \\boldsymbol{\\alpha} \uff1a h(\\boldsymbol{Y}^N) = h(\\boldsymbol{X}^N) + log (det|\\boldsymbol{A}|) h(\\boldsymbol{Y}^N) = h(\\boldsymbol{X}^N) + log (det|\\boldsymbol{A}|) \u5e73\u5747\u81ea\u4fe1\u606f\uff1a I([X]_P;[Y]_Q) = \\sum_{i,j} p(u_iv_j)log \\frac{p(u_iv_j)}{p(u_i)q(v_j)} I([X]_P;[Y]_Q) = \\sum_{i,j} p(u_iv_j)log \\frac{p(u_iv_j)}{p(u_i)q(v_j)} \\boldsymbol{U}^N \\boldsymbol{U}^N \uff0c \\boldsymbol{V}^N \\boldsymbol{V}^N \u5206\u522b\u4e3a \\boldsymbol{X}^N \\boldsymbol{X}^N \uff0c \\boldsymbol{Y}^N \\boldsymbol{Y}^N \u7684\u53ef\u9006\u7ebf\u6027\u53d8\u6362\uff0c\u5219 I(\\boldsymbol{U}^N;\\boldsymbol{V}^N) = I(\\boldsymbol{X}^N;\\boldsymbol{Y}^N) I(\\boldsymbol{U}^N;\\boldsymbol{V}^N) = I(\\boldsymbol{X}^N;\\boldsymbol{Y}^N) \u79bb\u6563\u65f6\u95f4\u9ad8\u65af\u4fe1\u6e90\u7684\u71b5 N\u7ef4\u72ec\u7acb\uff1a h(\\boldsymbol{X}) = \\frac{N}{2} log[2\\pi e (\\sigma_1^2 \\sigma_2^2\\cdots \\sigma_n^2)^{\\frac{1}{N}}] h(\\boldsymbol{X}) = \\frac{N}{2} log[2\\pi e (\\sigma_1^2 \\sigma_2^2\\cdots \\sigma_n^2)^{\\frac{1}{N}}] \u6700\u5927\u71b5\u5b9a\u7406 \u9650\u5cf0\u503c\uff1a\u6700\u5927\u4e3a\u5747\u5300\u5206\u5e03\u65f6\uff0c \\sum_{i = 1}^N log(b_i-a_i) \\sum_{i = 1}^N log(b_i-a_i) \u9650\u529f\u7387\uff1a\u6700\u5927\u4e3a\u9ad8\u65af\u5206\u5e03 \u65e0\u5931\u771f\u4fe1\u6e90\u7f16\u7801 \u4fe1\u6e90\u7f16\u7801\uff1a\u5c06\u4fe1\u6e90\u7b26\u53f7\u5e8f\u5217\u6309\u4e00\u5b9a\u7684\u6570\u5b66\u89c4\u5f8b\u6620\u5c04\u6210\u7531\u7801\u7b26\u53f7\u7ec4\u6210\u7684\u7801\u5e8f\u5217\u7684\u8fc7\u7a0b \u76ee\u7684\uff1a\u63d0\u9ad8\u4f20\u8f93\u6709\u6548\u6027 \u5206\u7c7b\uff1a 1. \u6982\u7387\u5339\u914d\u7f16\u7801\uff0c\u6309\u4fe1\u6e90\u5e8f\u5217\u548c\u7f16\u7801\u5668\u8f93\u51fa\u7684\u5173\u7cfb 1. \u5206\u7ec4\u7801\uff0c\u53d8/\u5b9a\u957f\uff0c\u5947\u5f02/\u975e\u5947\u5f02\uff0c\u5373\u65f6/\u975e\u5373\u65f6\uff0c\u5f02\u524d\u7f6e\u7801\uff0c\u9017\u53f7\u7801 2. \u975e\u5206\u7ec4\u7801 2. \u901a\u7528\u7f16\u7801 \u5b9a\u957f\u7801 \u65e0\u5931\u771f\u7f16\u7801\u6761\u4ef6: q^N \\le r^l q^N \\le r^l \u4fe1\u6e90\u5e8f\u5217\u5206\u7ec4\u5b9a\u7406\uff1a |\\frac{1}{N}log p(x) + H(X)| < \\delta |\\frac{1}{N}log p(x) + H(X)| < \\delta N \\ge N_0 = \\frac{\\sigma^2}{\\varepsilon \\delta^2} N \\ge N_0 = \\frac{\\sigma^2}{\\varepsilon \\delta^2} \uff0c\u4e14\u6ee1\u8db3\u4e0a\u5f0f\u7684\u5e8f\u5217\u79f0\u4e3a\u5178\u578b\u5e8f\u5217 \u5178\u578b\u5e8f\u5217\u6982\u7387\uff1a p(x) = 2^{-N(H(X)\\pm \\delta)} p(x) = 2^{-N(H(X)\\pm \\delta)} \u4e2a\u6570\uff1a (1-\\varepsilon)2^{N(H(X)-\\delta)} < N_G < 2^{N(H(X)+\\delta)} (1-\\varepsilon)2^{N(H(X)-\\delta)} < N_G < 2^{N(H(X)+\\delta)} \u6e10\u8fdb\u5747\u5206\u7279\u6027 \u5b9a\u957f\u7801\u4fe1\u6e90\u7f16\u7801\u5b9a\u7406 \u5b9a\u957f\u7801\u4fe1\u6e90\u7f16\u7801\u5b9a\u7406\uff08N\u8db3\u591f\u5927\u65f6\uff0c\u53ea\u4fdd\u8bc1\u5178\u578b\u5e8f\u5217\u4e0d\u5931\u771f\uff09\uff1a r^l \\ge 2^{N(H(X)+\\delta)} \\Rightarrow r\\frac{l}{N}log r \\ge H(X)+\\delta r^l \\ge 2^{N(H(X)+\\delta)} \\Rightarrow r\\frac{l}{N}log r \\ge H(X)+\\delta \u7f16\u7801\u901f\u7387\uff08\u7f16\u7801\u540e\u4e00\u4e2a\u4fe1\u6e90\u7b26\u53f7\u4ee3\u8868\u7684\u6700\u5927\u4fe1\u606f\u91cf\uff09\uff1a R' = \\frac{l logr}{N} R' = \\frac{l logr}{N} \uff0c\u5355\u4f4d\uff08\u6bd4\u7279/\u4fe1\u6e90\u7b26\u53f7\uff09 \u7f16\u7801\u6548\u7387\uff1a \\eta = \\frac{H(X)}{R'} = \\frac{NH((X))}{l logr} \\eta = \\frac{H(X)}{R'} = \\frac{NH((X))}{l logr} \u4fe1\u606f\u4f20\u8f93\u6548\u7387\uff1a R = \\frac{NH((X))}{l} R = \\frac{NH((X))}{l} \uff0c\u5f53 r = 2 r = 2 \u65f6\uff0c\u4e0e\u7f16\u7801\u6548\u7387\u6570\u503c\u76f8\u7b49\uff0c\u5355\u4f4d\uff08\u6bd4\u7279/\u7801\u7b26\u53f7\uff09 \u65e0\u5931\u771f\u7f16\u7801\uff1a R' > H(X) R' > H(X) \u7f16\u7801\u6548\u7387\u4e0e\u71b5\uff1a N \\ge \\frac{\\sigma^2}{\\varepsilon \\delta^2} N \\ge \\frac{\\sigma^2}{\\varepsilon \\delta^2} \uff0c\u5176\u4e2d \\delta = \\frac{1-\\eta}{\\eta}H(X) \\delta = \\frac{1-\\eta}{\\eta}H(X) \u53d8\u957f\u7801 \u5f02\u524d\u7f6e\u7801\u6027\u8d28\uff08\u7528\u7801\u6811\u63cf\u8ff0\u53ef\u63a8\uff09\uff1a Kraft \u5b9a\u7406 \\sum_{i = 1}^q r^{-l_i} \\le 1 \\sum_{i = 1}^q r^{-l_i} \\le 1 \u4e5f\u662f\u552f\u4e00\u53ef\u8bd1\u7801\u7684\u6761\u4ef6\uff0c\u4efb\u610f\u552f\u4e00\u53ef\u8bd1\u7801\u53ef\u8f6c\u5316\u4e3a\u5f02\u524d\u7f6e\u7801 \u5355\u4fe1\u6e90\u7b26\u53f7\u5e73\u5747\u7801\u957f\uff1a \\bar{l} = \\sum_{k = 1}^q p_k l_k \\bar{l} = \\sum_{k = 1}^q p_k l_k N\u6b21\u6269\u5c55\u6e90\uff1a \\bar{l} = \\frac{1}{N}\\sum_{k = 1}^q p_k l_k \\bar{l} = \\frac{1}{N}\\sum_{k = 1}^q p_k l_k \u53d8\u957f\u7801\u4fe1\u6e90\u7f16\u7801\u5b9a\u7406 \u5355\u4fe1\u6e90\u7b26\u53f7\uff1a \\frac{H(X)}{log r} \\le \\bar{l} < \\frac{H(X)}{log r}+1 \\frac{H(X)}{log r} \\le \\bar{l} < \\frac{H(X)}{log r}+1 shannong\u7b2c\u4e00\u5b9a\u7406\uff1a\u4efb\u610f\u4fe1\u6e90X\u7684\uff0cN\u6b21\u6269\u5c55\u6e90\u7f16\u7801\uff0cN\u8db3\u591f\u5927\u65f6\uff0c \\bar{l} \\bar{l} \u53ef\u4efb\u610f\u63a5\u8fd1 H_r(X) H_r(X) huffman\u7f16\u7801 \u5bf9\u4e8e\u5b58\u5728\u6700\u4f18\u7f16\u7801\u7684\u4fe1\u6e90\uff0c\u5176\u6700\u5c11\u6709\u4e24\u4e2a\u7801\u957f\u76f8\u540c\u7684\u7801\uff0c\u4ec5\u6700\u540e\u4e00\u4f4d\u4e0d\u540c \u5c3d\u91cf\u9ad8\u4f4d\u5408\u5e76\uff0c\u51cf\u5c11\u7801\u957f\u65b9\u5dee\uff0c\u51cf\u5c11\u7801\u957f\u7f13\u51b2\u5668\u5bb9\u91cf r r \u5143huffman\u7f16\u7801\u65f6\uff0c\u4ee5 s = r+(r-1)m s = r+(r-1)m \uff0c\u6765\u589e\u8865\u96f6\u6982\u7387\u7b26\u53f7 \u9a6c\u6c0f\u6e90\u7f16\u7801\uff1a\u4ee5\u8f6c\u79fb\u6982\u7387\u8fdb\u884c\u7f16\u7801\u6bd4\u5e73\u7a33\u5206\u5e03\u7f16\u7801\u6548\u7387\u9ad8 \u7b97\u672f\u7f16\u7801 \u79ef\u7d2f\u6982\u7387\uff1a 1. \u5355\u4fe1\u6e90\u7b26\u53f7\uff1a P(a_k) = \\sum_{i=1}^{k-1} p_i P(a_k) = \\sum_{i=1}^{k-1} p_i 2. \u4fe1\u6e90\u7b26\u53f7\u5e8f\u5217\uff1a\u5bf9\u540c\u957f\u5ea6\u7684\u5e8f\u5217\u5c0f\u7684\u6982\u7387\u6c42\u548c \u7f16\u7801\uff1a L_{j+1} = L_j + \\triangle_j P(j+1) L_{j+1} = L_j + \\triangle_j P(j+1) \u8bd1\u7801\uff1a (c-L_{j-1})/\\triangle_{j-1} ?> P(x=1) (c-L_{j-1})/\\triangle_{j-1} ?> P(x=1) \u79bb\u6563\u4fe1\u9053\u53ca\u5176\u5bb9\u91cf \u6982\u8ff0 \u5206\u7c7b\uff1a 1. \u6309\u8f93\u5165\uff0c\u8f93\u51fa\u53d6\u503c\u5206\u7c7b\uff1a\u79bb\u6563\uff0c\u8fde\u7eed\uff0c\u534a\u79bb\u6563\uff0c\u65f6\u95f4\u79bb\u6563\u8fde\u7eed 2. \u6309\u8f93\u5165\uff0c\u8f93\u51fa\u4e2a\u6570\uff1a\u5355\u7528\u6237\uff0c\u591a\u7528\u6237 3. \u6309\u8f6c\u79fb\u6982\u7387\u6027\u8d28\u5206\uff1a 1. \u65e0\u566a\u58f0\u4fe1\u9053\uff1a\u65e0\u635f\u4fe1\u9053\uff08\u4e00\u5bf9\u591a\uff09\uff0c\u786e\u5b9a\u4fe1\u9053\uff08\u591a\u5bf9\u4e00\uff09\uff0c\u65e0\u6270\u4fe1\u9053\uff08\u4e00\u5bf9\u4e00\uff09 2. \u6709\u566a\u58f0\u4fe1\u9053\uff1a\u65e0\u8bb0\u5fc6\u4fe1\u9053\uff0c\u6709\u8bb0\u5fc6\u4fe1\u9053 \u6309\u4fe1\u9053\u7edf\u8ba1\u7279\u6027\u5206\uff1a\u6052\u53c2\u4fe1\u9053\uff0c\u53d8\u53c2\u4fe1\u9053 \u6309\u4fe1\u9053\u566a\u58f0\u6027\u8d28\u5206\uff1a\u9ad8\u65af\u566a\u58f0\u4fe1\u9053\uff0c\u975e\u9ad8\u65af\u566a\u58f0\u4fe1\u9053 \u6570\u5b66\u6a21\u578b\uff1a\u79bb\u6563\u65e0\u8bb0\u5fc6\u4fe1\u9053\uff0c\u5e73\u7a33\u4fe1\u9053\uff0c\u5355\u7b26\u53f7\u79bb\u6563\u4fe1\u9053 \u4fe1\u9053\u5bb9\u91cf\uff1a 1. \u5355\u7b26\u53f7\u79bb\u6563\u4fe1\u9053\uff1a C = max_{p(x)}I(X;Y) C = max_{p(x)}I(X;Y) 2. \u591a\u7ef4\u77e2\u91cf\u4fe1\u9053\uff1a C = max_{p(x_1x_2\\cdots x_N)}I(X^N;Y^N) C = max_{p(x_1x_2\\cdots x_N)}I(X^N;Y^N) \u5355\u7b26\u53f7\u79bb\u6563\u4fe1\u9053\u53ca\u5176\u5bb9\u91cf \u79bb\u6563\u65e0\u566a\u58f0\u4fe1\u9053\uff1a r r \u4e3a\u8f93\u5165\u7b26\u53f7\u96c6\u7684\u5927\u5c0f\uff0c s s \u4e3a\u8f93\u51fa\u7b26\u53f7\u96c6\u7684\u5927\u5c0f 1. \u65e0\u635f\u4fe1\u9053\uff1a C = log r C = log r 2. \u786e\u5b9a\u4fe1\u9053\uff1a C = log s C = log s 3. \u65e0\u6270\u4fe1\u9053\uff1a C = log r = log s C = log r = log s \u79bb\u6563\u5bf9\u79f0\u4fe1\u9053\uff1a\u8f93\u5165\u7b49\u6982\u7387\u65f6\u8fbe\u5230\u4fe1\u9053\u5bb9\u91cf C = H(Y) - H(p_{11},p_{12},\\cdots ,p_{1s}) C = H(Y) - H(p_{11},p_{12},\\cdots ,p_{1s}) \u5bf9\u4e8e\u5f3a\u5bf9\u79f0\u4fe1\u9053\uff1a C = log s - H(p_{11},p_{12},\\cdots ,p_{1s}) C = log s - H(p_{11},p_{12},\\cdots ,p_{1s}) \u4e00\u822c\u79bb\u6563\u4fe1\u9053\uff1a 1. \u8f6c\u79fb\u6982\u7387\u77e9\u9635\u9006 P^{-1} P^{-1} \u5b58\u5728\u65f6\uff1a C = log_2 \\sum_{k = 1}^r 2^{\\beta_k} C = log_2 \\sum_{k = 1}^r 2^{\\beta_k} \u5f0f\u4e2d \\beta = -P^{-1}h \\beta = -P^{-1}h \u79bb\u6563\u65e0\u8bb0\u5fc6\u4fe1\u9053\uff1a I(a_i;Y) = C \\qquad ,p_i > 0 I(a_i;Y) = C \\qquad ,p_i > 0 I(a_i;Y) \\le C \\qquad ,p_i = 0 I(a_i;Y) \\le C \\qquad ,p_i = 0 \u4fe1\u9053\u7ea7\u8054\uff1a\u4fe1\u606f\u4e22\u5931 \u79bb\u6563\u65e0\u8bb0\u5fc6\u4fe1\u9053\uff1a I(\\boldsymbol{X}^N;\\boldsymbol{Y}^N) \\le \\sum_{i = 1}^N (\\boldsymbol{X_i};\\boldsymbol{Y_i}) I(\\boldsymbol{X}^N;\\boldsymbol{Y}^N) \\le \\sum_{i = 1}^N (\\boldsymbol{X_i};\\boldsymbol{Y_i}) \u65e0\u8bb0\u5fc6\u4fe1\u6e90\uff1a I(\\boldsymbol{X}^N;\\boldsymbol{Y}^N) \\le \\sum_{i = 1}^N (\\boldsymbol{X_i};\\boldsymbol{Y_i}) I(\\boldsymbol{X}^N;\\boldsymbol{Y}^N) \\le \\sum_{i = 1}^N (\\boldsymbol{X_i};\\boldsymbol{Y_i}) 1. \u4fe1\u606f\u8bba\u57fa\u672c\u6982\u5ff5 2. \u4fe1\u6e90\u4e0e\u4fe1\u6e90\u65e0\u5931\u771f\u7f16\u7801 3. \u4fe1\u9053\u53ca\u5176\u5bb9\u91cf","title":"\u4fe1\u606f\u8bba"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_1","text":"","title":"\u4fe1\u606f\u8bba"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_2","text":"","title":"\u7eea\u8bba"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_3","text":"\u4e09\u5927\u8981\u7d20\uff1a\u7269\u8d28\uff0c\u80fd\u91cf\uff0c\u4fe1\u606f \u901a\u4fe1\u7684\u57fa\u672c\u95ee\u9898\uff1a\u5728\u4e00\u70b9\u7cbe\u786e\u7684\u6216\u8fd1\u4f3c\u5730\u6062\u590d\u53e6\u4e00\u70b9\u7684\u4fe1\u606f \u901a\u4fe1\u7cfb\u7edf\u4e09\u9879\u6307\u6807\uff1a \u6709\u6548\u6027\uff1a\u5feb \u53ef\u9760\u6027\uff1a\u51c6\uff0c\u8bef\u7801\u7387\u4f4e \u5b89\u5168\u6027 \u4e09\u9879\u6307\u6807\u5bf9\u5e94\u7684\u6280\u672f\uff1a \u6570\u636e\u538b\u7f29 \u6570\u636e\u7ea0\u9519 \u6570\u636e\u52a0\u5bc6","title":"\u4fe1\u606f\u7684\u57fa\u672c\u6982\u5ff5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_4","text":"\u901a\u4fe1\u7cfb\u7edf\u662f\u4ece\u7a7a\u95f4\u7684\u4e00\u70b9\u5230\u53e6\u4e00\u70b9\u4f20\u9001\u4fe1\u606f\u7684\uff0c \u800c\u5b58\u50a8\u7cfb\u7edf\u662f\u4ece\u65f6\u95f4\u7684\u4e00\u70b9\u5230\u53e6\u4e00\u70b9\u4f20\u9001\u4fe1\u606f\u7684 \u6a21\u578b\uff1a - \u4fe1\u6e90 - \u79bb\u6563\u4fe1\u6e90 - \u8fde\u7eed\u4fe1\u6e90 - \u79bb\u6563\u65f6\u95f4\u8fde\u7eed\u4fe1\u6e90 - \u6a21\u62df\u4fe1\u6e90 - \u7f16\u7801\u5668 - \u4fe1\u6e90\u7f16\u7801\u5668\uff1a\u63d0\u9ad8\u4f20\u8f93\u6709\u6548\u6027 - \u4fe1\u9053\u7f16\u7801\u5668\uff1a\u63d0\u9ad8\u4f20\u8f93\u53ef\u9760\u6027 - \u8c03\u5236\u5668\uff1a\u5c06\u7b26\u53f7\u53d8\u6210\u9002\u5408\u4fe1\u9053\u4f20\u8f93\u7684\u4fe1\u53f7 - \u4fe1\u9053 - \u65e0\u566a\u58f0 - \u6709\u566a\u58f0 - \u52a0\u6027 - \u4e58\u6027 - \u6309\u79bb\u6563\u8fd8\u662f\u8fde\u7eed\uff0c\u6309\u6709\u8bb0\u5fc6\u8fd8\u662f\u65e0\u8bb0\u5fc6 - \u8bd1\u7801\u5668\uff1a\u89e3\u8c03\u5668\uff0c\u4fe1\u9053\u8bd1\u7801\u5668\uff0c\u4fe1\u6e90\u8bd1\u7801\u5668 - \u4fe1\u5bbf \u6027\u80fd\u8bc4\u4ef7\uff1a \u6709\u6548\u6027\uff1a\u9891\u8c31\u5229\u7528\u7387 \u53ef\u9760\u6027\uff1a\u4f20\u8f93\u9519\u8bef\u7387 \u5b89\u5168\u6027\uff1a\u52a0\u5bc6\u5f3a\u5ea6","title":"\u7814\u7a76\u5185\u5bb9"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#shannong","text":"\u4e00\u4e2a\u6982\u5ff5\uff0c\u4e09\u4e2a\u5b9a\u7406 \u4fe1\u606f\u71b5\u7684\u6982\u5ff5 \u5b9a\u7406\uff1a 1. \u65e0\u5931\u771f\u4fe1\u6e90\u7f16\u7801\u5b9a\u7406\uff1a R \\ge H R \\ge H \u6709\u566a\u4fe1\u9053\u7f16\u7801\u5b9a\u7406\uff1a R \\le C R \\le C \u9650\u5931\u771f\u4fe1\u6e90\u7f16\u7801\u5b9a\u7406\uff1a R \\ge R(D) \\Leftrightarrow R \\ge R(D) \\Leftrightarrow \u5b58\u5728\u5e73\u5747\u5931\u771f \\le D \\le D","title":"shannong\u4fe1\u606f\u8bba"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_5","text":"","title":"\u79bb\u6563\u4fe1\u606f\u7684\u5ea6\u91cf"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_6","text":"","title":"\u81ea\u4fe1\u606f\u548c\u4e92\u4fe1\u606f"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_7","text":"I(x) = -log(p(x)) I(x) = -log(p(x)) \u610f\u4e49\uff1a\u4e8b\u4ef6\u53d1\u751f\u524d\uff1a\u4e8b\u4ef6\u53d1\u751f\u7684\u4e0d\u786e\u5b9a\u6027\uff0c\u4e8b\u4ef6\u53d1\u751f\u540e\uff1a\u4e8b\u4ef6\u5305\u542b\u7684\u4fe1\u606f\u91cf I(xy) = -log(p(xy)) I(xy) = -log(p(xy)) \u5728 y = b_i y = b_i \u7ed9\u5b9a\u4e0b\uff1a I(x|y) = -log(p(x|y)) = I(xy) - I(y) I(x|y) = -log(p(x|y)) = I(xy) - I(y)","title":"\u81ea\u4fe1\u606f"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_8","text":"I(x;y) = log\\frac{p(x|y)}{p(x)} = I(x) - I(x|y) = I(y;x) I(x;y) = log\\frac{p(x|y)}{p(x)} = I(x) - I(x|y) = I(y;x) \u8868\u793a\u5f53 y y \u53d1\u751f\u540e\uff0c x x \u4e0d\u786e\u5b9a\u6027\u7684\u53d8\u5316\uff0c\u53cd\u6620\u4e24\u4e2a\u968f\u673a\u4e8b\u4ef6 x,y x,y \u4e4b\u95f4\u7684\u7edf\u8ba1\u5173\u8054\u7a0b\u5ea6 I(x;y|z) = log(\\frac{p(x|yz)}{p(x|z)}) I(x;y|z) = log(\\frac{p(x|yz)}{p(x|z)})","title":"\u4e92\u4fe1\u606f"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_9","text":"H(X) = E[I(x)] = -\\sum_x p(x)logp(x) H(X) = E[I(x)] = -\\sum_x p(x)logp(x) \u4fe1\u6e90\u8f93\u51fa\u524d\uff1a\u4fe1\u6e90\u7684\u7684\u5e73\u5747\u4e0d\u7a33\u5b9a\u6027\uff0c\u8f93\u51fa\u540e\uff1a\u4e00\u4e2a\u4fe1\u6e90\u7b26\u53f7\u6240\u63d0\u4f9b\u7684\u5e73\u5747\u4fe1\u606f\u91cf \u6709\u6839\u6982\u7387\u6811\uff1a H(X) = \\sum_i q(u_i)H(u_i) H(X) = \\sum_i q(u_i)H(u_i) \u6761\u4ef6\u71b5\uff1a H(Y|X) = -\\sum_x p(x)H(Y|x) H(Y|X) = -\\sum_x p(x)H(Y|x) \u5f0f\u4e2d H(Y|x) H(Y|x) \u4e3a\u53d6\u67d0\u4e00\u503c\u662f Y Y \u7684\u71b5\uff0c H(Y|x) = -\\sum_y p(y|x)log p(y|x) H(Y|x) = -\\sum_y p(y|x)log p(y|x) \u8054\u5408\u71b5\uff1a H(XY) = -\\sum_x \\sum_y p(xy)log p(xy) H(XY) = -\\sum_x \\sum_y p(xy)log p(xy) \u6563\u5ea6\uff1a D(P//Q) = \\sum_x P(x)log \\frac{P(x)}{Q(x)} \\ge 0 D(P//Q) = \\sum_x P(x)log \\frac{P(x)}{Q(x)} \\ge 0 \u71b5\u7684\u57fa\u672c\u6027\u8d28\uff1a \u5bf9\u79f0\uff0c\u975e\u8d1f\uff0c\u6269\u5c55\uff0c\u53ef\u52a0 \u6781\u503c\u6027\uff08\u79bb\u6563\u6700\u5927\u71b5\u5b9a\u7406\uff09\uff1a H(X) \\le log n H(X) \\le log n \uff0c\u6563\u5ea6\u5b9a\u7406\u53ef\u8bc1 \u4e0a\u51f8\u6027\uff0c\u786e\u5b9a\u6027 \u5404\u7c7b\u71b5\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a H(Y|X) \\le H(Y) H(Y|X) \\le H(Y) H(X_1 X_2 \\cdots X_N) \\le H(X_1)H(X_2)\\cdots H(X_N) H(X_1 X_2 \\cdots X_N) \\le H(X_1)H(X_2)\\cdots H(X_N)","title":"\u4fe1\u606f\u71b5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_10","text":"\u96c6\u5408\u4e0e\u4e8b\u4ef6\uff1a I(x;Y) = \\sum_y p(y|x) log \\frac{p(y|x)}{p(y)} I(x;Y) = \\sum_y p(y|x) log \\frac{p(y|x)}{p(y)} \u96c6\u5408\u4e8e\u96c6\u5408\uff1a I(X;Y) = \\sum_{x,y} p(xy) I(x;y) I(X;Y) = \\sum_{x,y} p(xy) I(x;y) \u5e73\u5747\u4e92\u4fe1\u606f\u4e0e\u71b5\u7684\u5173\u7cfb\uff1a I(X;Y) = H(X) - H(X|Y) = H(X)+H(Y)-H(XY) I(X;Y) = H(X) - H(X|Y) = H(X)+H(Y)-H(XY) \u6027\u8d28\uff1a \u975e\u8d1f\uff0c\u5bf9\u79f0 \u6781\u503c\uff1a I(X;Y) \\le H(X) and H(Y) I(X;Y) \\le H(X) and H(Y) \u4e3a p(x) p(x) \u7684\u4e0a\u51f8\u51fd\u6570\uff0c p(y|x) p(y|x) \u7684\u4e0b\u51f8\u51fd\u6570","title":"\u5e73\u5747\u4e92\u4fe1\u606f"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_11","text":"","title":"\u79bb\u6563\u4fe1\u6e90"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_12","text":"\u5206\u7c7b\uff1a\u6309\u7b26\u53f7\u53d6\u503c\uff0c\u6309\u7b26\u53f7\u95f4\u4f9d\u8d56\u5173\u7cfb\uff0c\u72b6\u6001\u96c6\u5408\u662f\u5426\u6709\u9650\uff0c\u662f\u5426\u5e73\u7a33 \u79bb\u6563\u65e0\u8bb0\u5fc6\u4fe1\u6e90\u6570\u5b66\u6a21\u578b\uff1a \\begin{bmatrix} X \\\\ P \\\\ \\end{bmatrix} = \\begin{bmatrix} a_1 & a_2 & \\dotsb & a_n \\\\ p(a_1) & p(a_2) & \\dotsb & p(a_n)\\\\ \\end{bmatrix} \\begin{bmatrix} X \\\\ P \\\\ \\end{bmatrix} = \\begin{bmatrix} a_1 & a_2 & \\dotsb & a_n \\\\ p(a_1) & p(a_2) & \\dotsb & p(a_n)\\\\ \\end{bmatrix} \u591a\u7ef4\uff0cN\u6b21\u6269\u5c55\u6e90 \u79bb\u6563\u6709\u8bb0\u5fc6\u4fe1\u6e90\uff1a \u9a6c\u6c0f\u4fe1\u6e90","title":"\u5206\u7c7b\u4e0e\u6a21\u578b"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_13","text":"\u5355\u7b26\u53f7\u6027\u8d28\uff1a \u4e0a\u51f8\u51fd\u6570\uff1a p = 0.5 p = 0.5 \u65f6\uff0c\u6700\u5927 \u5177\u6709\u71b5\u7684\u4e00\u5207\u6027\u8d28 N\u6b21\u6269\u5c55\u71b5\uff1a H(X^N) = NX(X) H(X^N) = NX(X)","title":"\u79bb\u6563\u65e0\u8bb0\u5fc6\u4fe1\u6e90\u7684\u71b5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_14","text":"\u7edf\u8ba1\u7279\u6027\uff0c\u6761\u4ef6\u6982\u7387\uff0c\u4fe1\u606f\u71b5\uff0c\u6761\u4ef6\u71b5\u4e0e\u65f6\u95f4\u7684\u63a8\u79fb\u65e0\u5173","title":"\u79bb\u6563\u5e73\u7a33\u4fe1\u6e90\u7684\u71b5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_15","text":"H(X^N) \\le NH(X_1) H(X^N) \\le NH(X_1) \u5e73\u5747\u7b26\u53f7\u71b5\uff1a H_N(X) = \\frac{1}{N} H(X^N) H_N(X) = \\frac{1}{N} H(X^N) \u6781\u9650\u7b26\u53f7\u71b5\uff1a H_\\infty = \\lim_{N \\rightarrow \\infty}H_N(X) H_\\infty = \\lim_{N \\rightarrow \\infty}H_N(X) \u6027\u8d28\uff1a H(X_N|X_1X_2\\cdots X_{N-1}) \\ge H(X_{N+1}|X_1X_2\\cdots X_{N}) H(X_N|X_1X_2\\cdots X_{N-1}) \\ge H(X_{N+1}|X_1X_2\\cdots X_{N}) H_N(X) \\ge H(X_N|X_1X_2\\cdots X_{N-1}) H_N(X) \\ge H(X_N|X_1X_2\\cdots X_{N-1}) H_N(X) \\ge H_{N+1}(X) H_N(X) \\ge H_{N+1}(X) H_\\infty(X) = H(X_N|X_1X_2\\cdots X_{N-1}) H_\\infty(X) = H(X_N|X_1X_2\\cdots X_{N-1})","title":"\u79bb\u6563\u6709\u8bb0\u5fc6\u5e73\u7a33\u4fe1\u6e90\uff1a"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_16","text":"\u65f6\u95f4\u79bb\u6563\uff0c\u72b6\u6001\u79bb\u6563\uff0cn\u9636\u9a6c\u6c0f\u94fe\u53ea\u4e0e\u524dn\u4e2a\u72b6\u6001\u6709\u5173 \u72b6\u6001\u8f6c\u79fb\u6982\u7387\uff1a p(x_n = j|x_m = i) = p_{ij}(m,n) p(x_n = j|x_m = i) = p_{ij}(m,n) \u9f50\u6b21\uff08\u5e73\u7a33\uff09k\u6b65\uff0c\u4e00\u6b65\u65f6\u7701\u7565k\uff1a p_{ij}^{(k)} p_{ij}^{(k)} \u8868\u793a\u65b9\u6cd5\uff1a\u8f6c\u79fb\u6982\u7387\u56fe\uff0c\u7f51\u683c\u56fe\uff0c\u72b6\u6001\u8f6c\u79fb\u56fe kolmogorov-chapman \u65b9\u7a0b\uff1a p^{(k)} = p^{(0)}P^k p^{(k)} = p^{(0)}P^k \u5206\u7c7b\uff1a\u5e38\u8fd4\u6001\uff0c\u8fc7\u6e21\u6001 \u82e5\u5e38\u8fd4\u6001 \\{n:n\\le 1 ,p_{ii}^{n} > 0\\} \\{n:n\\le 1 ,p_{ii}^{n} > 0\\} \u7684\u6700\u5927\u516c\u7ea6\u6570\u4e3a d_i d_i \uff0c d_i = 1 d_i = 1 \u904d\u5386\uff0c d_i > 1 d_i > 1 \u5468\u671f \u540c\u4e00\u7c7b\u6240\u6709\u5468\u671f\u76f8\u7b49 \u9a6c\u6c0f\u94fe\u7684\u5e73\u7a33\u5206\u5e03\uff1a \\pi^T = \\pi^T P \\pi^T = \\pi^T P \\lim_{k \\rightarrow \\infty} P^k = e\\pi^T \\lim_{k \\rightarrow \\infty} P^k = e\\pi^T \u5bf9\u4e8e\u6709\u9650\u72b6\u6001\u7684\u9a6c\u6c0f\u94fe\uff0c\u5e73\u7a33\u5206\u5e03\u6052\u5b58\u5728\uff0c\u6709\u51e0\u4e2a\u904d\u5386\u5e38\u8fd4\u7c7b\u5c31\u6709\u51e0\u4e2a\u89e3\uff0c\u5bf9\u4e8e\u53ea\u6709\u5468\u671f\u5e38\u8fd4\u7c7b\u7684\u9a6c\u6c0f\u94fe\uff0c\u4e0a\u5f0f\u4e0d\u6536\u655b","title":"\u6709\u9650\u72b6\u6001\u9a6c\u5c14\u53ef\u592b\u94fe"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_17","text":"\u5f53\u524d\u65f6\u523b\u8f93\u51fa\u7b26\u53f7\u53ea\u4e0e\u5f53\u524d\u65f6\u523b\u72b6\u6001\u6709\u5173 \u4ea7\u751f\u6a21\u578b","title":"\u9a6c\u5c14\u53ef\u592b\u4fe1\u6e90"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#n","text":"\u5bf9\u4e8em\u9636\u7684\u8d77\u59cb\u72b6\u6001\u5e73\u7a33\u9a6c\u6c0f\u94fe\uff1a H(X_1X_2 \\cdots X_N) = H([\\pi]) + (N-m)[\\pi]^T[h] H(X_1X_2 \\cdots X_N) = H([\\pi]) + (N-m)[\\pi]^T[h] \u5f0f\u4e2d [h] [h] \u4e3a\u8f6c\u79fb\u6982\u7387\u6bcf\u884c\u7684\u71b5 \u82e5\u72b6\u6001\u4e0e\u7b26\u53f7\u4e00\u4e00\u5bf9\u5e94\uff1a H(X)_\\infty = [\\pi]^T[h] H(X)_\\infty = [\\pi]^T[h] \u5426\u5219\uff1a H(X)_\\infty = \\sum_{i=1}^J \\pi_iH(X|s=i) H(X)_\\infty = \\sum_{i=1}^J \\pi_iH(X|s=i) \u5f0f\u4e2d H(X|s=i) = -\\sum_{i=1}^n p_j(a_i)log p_j(a_i) H(X|s=i) = -\\sum_{i=1}^n p_j(a_i)log p_j(a_i)","title":"\u9a6c\u6c0f\u94feN\u6b21\u6269\u5c55\u6e90\u7684\u8ba1\u7b97"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_18","text":"\u76f8\u5173\u6027\u5373\u4fe1\u6e90\u7b26\u53f7\u95f4\u7684\u4f9d\u8d56\u7a0b\u5ea6 \u4fe1\u6e90\u6548\u7387\uff1a \\eta = \\frac{H_\\infty}{H_0} \\eta = \\frac{H_\\infty}{H_0} \u5269\u4f59\u5ea6\uff1a \\gamma = 1-\\eta \\gamma = 1-\\eta \u5f0f\u4e2d H_0 = logq H_0 = logq \u4e3a\u7b26\u53f7\u72ec\u7acb\u7b49\u6982\u65f6\u7684\u4fe1\u6e90\u71b5","title":"\u4fe1\u6e90\u76f8\u5173\u6027\u4e0e\u5269\u4f59\u5ea6"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_19","text":"\u8fde\u7eed\u4fe1\u6e90\u71b5\u4e24\u90e8\u5206\uff1a\u7edd\u5bf9\u71b5\u65e0\u9650\u5927\uff0c\u5dee\u71b5\u4e3a h(X) = -\\int p(x)log p(x) \\mathrm{d} x h(X) = -\\int p(x)log p(x) \\mathrm{d} x \uff0c\u5355\u4f4d\u4e3abit/\u81ea\u7531\u5ea6 \u6761\u4ef6\u71b5\uff1a h(X|Y) = -\\iint p(xy) log p(x|y) \\mathrm{d} x \\mathrm{d} y h(X|Y) = -\\iint p(xy) log p(x|y) \\mathrm{d} x \\mathrm{d} y \u8054\u5408\u71b5\uff1a h(\\boldsymbol{X}^N) = -\\int p(\\boldsymbol{x}) log p(\\boldsymbol{x}) h(\\boldsymbol{X}^N) = -\\int p(\\boldsymbol{x}) log p(\\boldsymbol{x}) \u71b5\u7387\uff08\u7c7b\u4f3c\u79bb\u6563\u4fe1\u6e90\u7684\u6781\u9650\u7b26\u53f7\u71b5\uff09\uff1a h(X) = \\lim_{N\\rightarrow \\infty} \\frac{h(X_1X_2\\cdots X_N)}{N} h(X) = \\lim_{N\\rightarrow \\infty} \\frac{h(X_1X_2\\cdots X_N)}{N} \u82e5 \\boldsymbol{y} = \\boldsymbol{A}\\boldsymbol{x} + \\boldsymbol{\\alpha} \\boldsymbol{y} = \\boldsymbol{A}\\boldsymbol{x} + \\boldsymbol{\\alpha} \uff1a h(\\boldsymbol{Y}^N) = h(\\boldsymbol{X}^N) + log (det|\\boldsymbol{A}|) h(\\boldsymbol{Y}^N) = h(\\boldsymbol{X}^N) + log (det|\\boldsymbol{A}|) \u5e73\u5747\u81ea\u4fe1\u606f\uff1a I([X]_P;[Y]_Q) = \\sum_{i,j} p(u_iv_j)log \\frac{p(u_iv_j)}{p(u_i)q(v_j)} I([X]_P;[Y]_Q) = \\sum_{i,j} p(u_iv_j)log \\frac{p(u_iv_j)}{p(u_i)q(v_j)} \\boldsymbol{U}^N \\boldsymbol{U}^N \uff0c \\boldsymbol{V}^N \\boldsymbol{V}^N \u5206\u522b\u4e3a \\boldsymbol{X}^N \\boldsymbol{X}^N \uff0c \\boldsymbol{Y}^N \\boldsymbol{Y}^N \u7684\u53ef\u9006\u7ebf\u6027\u53d8\u6362\uff0c\u5219 I(\\boldsymbol{U}^N;\\boldsymbol{V}^N) = I(\\boldsymbol{X}^N;\\boldsymbol{Y}^N) I(\\boldsymbol{U}^N;\\boldsymbol{V}^N) = I(\\boldsymbol{X}^N;\\boldsymbol{Y}^N)","title":"\u8fde\u7eed\u968f\u673a\u53d8\u91cf\u96c6\u5408\u71b5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_20","text":"N\u7ef4\u72ec\u7acb\uff1a h(\\boldsymbol{X}) = \\frac{N}{2} log[2\\pi e (\\sigma_1^2 \\sigma_2^2\\cdots \\sigma_n^2)^{\\frac{1}{N}}] h(\\boldsymbol{X}) = \\frac{N}{2} log[2\\pi e (\\sigma_1^2 \\sigma_2^2\\cdots \\sigma_n^2)^{\\frac{1}{N}}]","title":"\u79bb\u6563\u65f6\u95f4\u9ad8\u65af\u4fe1\u6e90\u7684\u71b5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_21","text":"\u9650\u5cf0\u503c\uff1a\u6700\u5927\u4e3a\u5747\u5300\u5206\u5e03\u65f6\uff0c \\sum_{i = 1}^N log(b_i-a_i) \\sum_{i = 1}^N log(b_i-a_i) \u9650\u529f\u7387\uff1a\u6700\u5927\u4e3a\u9ad8\u65af\u5206\u5e03","title":"\u6700\u5927\u71b5\u5b9a\u7406"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_22","text":"\u4fe1\u6e90\u7f16\u7801\uff1a\u5c06\u4fe1\u6e90\u7b26\u53f7\u5e8f\u5217\u6309\u4e00\u5b9a\u7684\u6570\u5b66\u89c4\u5f8b\u6620\u5c04\u6210\u7531\u7801\u7b26\u53f7\u7ec4\u6210\u7684\u7801\u5e8f\u5217\u7684\u8fc7\u7a0b \u76ee\u7684\uff1a\u63d0\u9ad8\u4f20\u8f93\u6709\u6548\u6027 \u5206\u7c7b\uff1a 1. \u6982\u7387\u5339\u914d\u7f16\u7801\uff0c\u6309\u4fe1\u6e90\u5e8f\u5217\u548c\u7f16\u7801\u5668\u8f93\u51fa\u7684\u5173\u7cfb 1. \u5206\u7ec4\u7801\uff0c\u53d8/\u5b9a\u957f\uff0c\u5947\u5f02/\u975e\u5947\u5f02\uff0c\u5373\u65f6/\u975e\u5373\u65f6\uff0c\u5f02\u524d\u7f6e\u7801\uff0c\u9017\u53f7\u7801 2. \u975e\u5206\u7ec4\u7801 2. \u901a\u7528\u7f16\u7801","title":"\u65e0\u5931\u771f\u4fe1\u6e90\u7f16\u7801"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_23","text":"\u65e0\u5931\u771f\u7f16\u7801\u6761\u4ef6: q^N \\le r^l q^N \\le r^l","title":"\u5b9a\u957f\u7801"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_24","text":"|\\frac{1}{N}log p(x) + H(X)| < \\delta |\\frac{1}{N}log p(x) + H(X)| < \\delta N \\ge N_0 = \\frac{\\sigma^2}{\\varepsilon \\delta^2} N \\ge N_0 = \\frac{\\sigma^2}{\\varepsilon \\delta^2} \uff0c\u4e14\u6ee1\u8db3\u4e0a\u5f0f\u7684\u5e8f\u5217\u79f0\u4e3a\u5178\u578b\u5e8f\u5217 \u5178\u578b\u5e8f\u5217\u6982\u7387\uff1a p(x) = 2^{-N(H(X)\\pm \\delta)} p(x) = 2^{-N(H(X)\\pm \\delta)} \u4e2a\u6570\uff1a (1-\\varepsilon)2^{N(H(X)-\\delta)} < N_G < 2^{N(H(X)+\\delta)} (1-\\varepsilon)2^{N(H(X)-\\delta)} < N_G < 2^{N(H(X)+\\delta)} \u6e10\u8fdb\u5747\u5206\u7279\u6027","title":"\u4fe1\u6e90\u5e8f\u5217\u5206\u7ec4\u5b9a\u7406\uff1a"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_25","text":"\u5b9a\u957f\u7801\u4fe1\u6e90\u7f16\u7801\u5b9a\u7406\uff08N\u8db3\u591f\u5927\u65f6\uff0c\u53ea\u4fdd\u8bc1\u5178\u578b\u5e8f\u5217\u4e0d\u5931\u771f\uff09\uff1a r^l \\ge 2^{N(H(X)+\\delta)} \\Rightarrow r\\frac{l}{N}log r \\ge H(X)+\\delta r^l \\ge 2^{N(H(X)+\\delta)} \\Rightarrow r\\frac{l}{N}log r \\ge H(X)+\\delta \u7f16\u7801\u901f\u7387\uff08\u7f16\u7801\u540e\u4e00\u4e2a\u4fe1\u6e90\u7b26\u53f7\u4ee3\u8868\u7684\u6700\u5927\u4fe1\u606f\u91cf\uff09\uff1a R' = \\frac{l logr}{N} R' = \\frac{l logr}{N} \uff0c\u5355\u4f4d\uff08\u6bd4\u7279/\u4fe1\u6e90\u7b26\u53f7\uff09 \u7f16\u7801\u6548\u7387\uff1a \\eta = \\frac{H(X)}{R'} = \\frac{NH((X))}{l logr} \\eta = \\frac{H(X)}{R'} = \\frac{NH((X))}{l logr} \u4fe1\u606f\u4f20\u8f93\u6548\u7387\uff1a R = \\frac{NH((X))}{l} R = \\frac{NH((X))}{l} \uff0c\u5f53 r = 2 r = 2 \u65f6\uff0c\u4e0e\u7f16\u7801\u6548\u7387\u6570\u503c\u76f8\u7b49\uff0c\u5355\u4f4d\uff08\u6bd4\u7279/\u7801\u7b26\u53f7\uff09 \u65e0\u5931\u771f\u7f16\u7801\uff1a R' > H(X) R' > H(X) \u7f16\u7801\u6548\u7387\u4e0e\u71b5\uff1a N \\ge \\frac{\\sigma^2}{\\varepsilon \\delta^2} N \\ge \\frac{\\sigma^2}{\\varepsilon \\delta^2} \uff0c\u5176\u4e2d \\delta = \\frac{1-\\eta}{\\eta}H(X) \\delta = \\frac{1-\\eta}{\\eta}H(X)","title":"\u5b9a\u957f\u7801\u4fe1\u6e90\u7f16\u7801\u5b9a\u7406"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_26","text":"\u5f02\u524d\u7f6e\u7801\u6027\u8d28\uff08\u7528\u7801\u6811\u63cf\u8ff0\u53ef\u63a8\uff09\uff1a Kraft \u5b9a\u7406 \\sum_{i = 1}^q r^{-l_i} \\le 1 \\sum_{i = 1}^q r^{-l_i} \\le 1 \u4e5f\u662f\u552f\u4e00\u53ef\u8bd1\u7801\u7684\u6761\u4ef6\uff0c\u4efb\u610f\u552f\u4e00\u53ef\u8bd1\u7801\u53ef\u8f6c\u5316\u4e3a\u5f02\u524d\u7f6e\u7801 \u5355\u4fe1\u6e90\u7b26\u53f7\u5e73\u5747\u7801\u957f\uff1a \\bar{l} = \\sum_{k = 1}^q p_k l_k \\bar{l} = \\sum_{k = 1}^q p_k l_k N\u6b21\u6269\u5c55\u6e90\uff1a \\bar{l} = \\frac{1}{N}\\sum_{k = 1}^q p_k l_k \\bar{l} = \\frac{1}{N}\\sum_{k = 1}^q p_k l_k","title":"\u53d8\u957f\u7801"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_27","text":"\u5355\u4fe1\u6e90\u7b26\u53f7\uff1a \\frac{H(X)}{log r} \\le \\bar{l} < \\frac{H(X)}{log r}+1 \\frac{H(X)}{log r} \\le \\bar{l} < \\frac{H(X)}{log r}+1 shannong\u7b2c\u4e00\u5b9a\u7406\uff1a\u4efb\u610f\u4fe1\u6e90X\u7684\uff0cN\u6b21\u6269\u5c55\u6e90\u7f16\u7801\uff0cN\u8db3\u591f\u5927\u65f6\uff0c \\bar{l} \\bar{l} \u53ef\u4efb\u610f\u63a5\u8fd1 H_r(X) H_r(X)","title":"\u53d8\u957f\u7801\u4fe1\u6e90\u7f16\u7801\u5b9a\u7406"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#huffman","text":"\u5bf9\u4e8e\u5b58\u5728\u6700\u4f18\u7f16\u7801\u7684\u4fe1\u6e90\uff0c\u5176\u6700\u5c11\u6709\u4e24\u4e2a\u7801\u957f\u76f8\u540c\u7684\u7801\uff0c\u4ec5\u6700\u540e\u4e00\u4f4d\u4e0d\u540c \u5c3d\u91cf\u9ad8\u4f4d\u5408\u5e76\uff0c\u51cf\u5c11\u7801\u957f\u65b9\u5dee\uff0c\u51cf\u5c11\u7801\u957f\u7f13\u51b2\u5668\u5bb9\u91cf r r \u5143huffman\u7f16\u7801\u65f6\uff0c\u4ee5 s = r+(r-1)m s = r+(r-1)m \uff0c\u6765\u589e\u8865\u96f6\u6982\u7387\u7b26\u53f7 \u9a6c\u6c0f\u6e90\u7f16\u7801\uff1a\u4ee5\u8f6c\u79fb\u6982\u7387\u8fdb\u884c\u7f16\u7801\u6bd4\u5e73\u7a33\u5206\u5e03\u7f16\u7801\u6548\u7387\u9ad8","title":"huffman\u7f16\u7801"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_28","text":"\u79ef\u7d2f\u6982\u7387\uff1a 1. \u5355\u4fe1\u6e90\u7b26\u53f7\uff1a P(a_k) = \\sum_{i=1}^{k-1} p_i P(a_k) = \\sum_{i=1}^{k-1} p_i 2. \u4fe1\u6e90\u7b26\u53f7\u5e8f\u5217\uff1a\u5bf9\u540c\u957f\u5ea6\u7684\u5e8f\u5217\u5c0f\u7684\u6982\u7387\u6c42\u548c \u7f16\u7801\uff1a L_{j+1} = L_j + \\triangle_j P(j+1) L_{j+1} = L_j + \\triangle_j P(j+1) \u8bd1\u7801\uff1a (c-L_{j-1})/\\triangle_{j-1} ?> P(x=1) (c-L_{j-1})/\\triangle_{j-1} ?> P(x=1)","title":"\u7b97\u672f\u7f16\u7801"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_29","text":"","title":"\u79bb\u6563\u4fe1\u9053\u53ca\u5176\u5bb9\u91cf"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_30","text":"\u5206\u7c7b\uff1a 1. \u6309\u8f93\u5165\uff0c\u8f93\u51fa\u53d6\u503c\u5206\u7c7b\uff1a\u79bb\u6563\uff0c\u8fde\u7eed\uff0c\u534a\u79bb\u6563\uff0c\u65f6\u95f4\u79bb\u6563\u8fde\u7eed 2. \u6309\u8f93\u5165\uff0c\u8f93\u51fa\u4e2a\u6570\uff1a\u5355\u7528\u6237\uff0c\u591a\u7528\u6237 3. \u6309\u8f6c\u79fb\u6982\u7387\u6027\u8d28\u5206\uff1a 1. \u65e0\u566a\u58f0\u4fe1\u9053\uff1a\u65e0\u635f\u4fe1\u9053\uff08\u4e00\u5bf9\u591a\uff09\uff0c\u786e\u5b9a\u4fe1\u9053\uff08\u591a\u5bf9\u4e00\uff09\uff0c\u65e0\u6270\u4fe1\u9053\uff08\u4e00\u5bf9\u4e00\uff09 2. \u6709\u566a\u58f0\u4fe1\u9053\uff1a\u65e0\u8bb0\u5fc6\u4fe1\u9053\uff0c\u6709\u8bb0\u5fc6\u4fe1\u9053 \u6309\u4fe1\u9053\u7edf\u8ba1\u7279\u6027\u5206\uff1a\u6052\u53c2\u4fe1\u9053\uff0c\u53d8\u53c2\u4fe1\u9053 \u6309\u4fe1\u9053\u566a\u58f0\u6027\u8d28\u5206\uff1a\u9ad8\u65af\u566a\u58f0\u4fe1\u9053\uff0c\u975e\u9ad8\u65af\u566a\u58f0\u4fe1\u9053 \u6570\u5b66\u6a21\u578b\uff1a\u79bb\u6563\u65e0\u8bb0\u5fc6\u4fe1\u9053\uff0c\u5e73\u7a33\u4fe1\u9053\uff0c\u5355\u7b26\u53f7\u79bb\u6563\u4fe1\u9053 \u4fe1\u9053\u5bb9\u91cf\uff1a 1. \u5355\u7b26\u53f7\u79bb\u6563\u4fe1\u9053\uff1a C = max_{p(x)}I(X;Y) C = max_{p(x)}I(X;Y) 2. \u591a\u7ef4\u77e2\u91cf\u4fe1\u9053\uff1a C = max_{p(x_1x_2\\cdots x_N)}I(X^N;Y^N) C = max_{p(x_1x_2\\cdots x_N)}I(X^N;Y^N)","title":"\u6982\u8ff0"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_31","text":"\u79bb\u6563\u65e0\u566a\u58f0\u4fe1\u9053\uff1a r r \u4e3a\u8f93\u5165\u7b26\u53f7\u96c6\u7684\u5927\u5c0f\uff0c s s \u4e3a\u8f93\u51fa\u7b26\u53f7\u96c6\u7684\u5927\u5c0f 1. \u65e0\u635f\u4fe1\u9053\uff1a C = log r C = log r 2. \u786e\u5b9a\u4fe1\u9053\uff1a C = log s C = log s 3. \u65e0\u6270\u4fe1\u9053\uff1a C = log r = log s C = log r = log s \u79bb\u6563\u5bf9\u79f0\u4fe1\u9053\uff1a\u8f93\u5165\u7b49\u6982\u7387\u65f6\u8fbe\u5230\u4fe1\u9053\u5bb9\u91cf C = H(Y) - H(p_{11},p_{12},\\cdots ,p_{1s}) C = H(Y) - H(p_{11},p_{12},\\cdots ,p_{1s}) \u5bf9\u4e8e\u5f3a\u5bf9\u79f0\u4fe1\u9053\uff1a C = log s - H(p_{11},p_{12},\\cdots ,p_{1s}) C = log s - H(p_{11},p_{12},\\cdots ,p_{1s}) \u4e00\u822c\u79bb\u6563\u4fe1\u9053\uff1a 1. \u8f6c\u79fb\u6982\u7387\u77e9\u9635\u9006 P^{-1} P^{-1} \u5b58\u5728\u65f6\uff1a C = log_2 \\sum_{k = 1}^r 2^{\\beta_k} C = log_2 \\sum_{k = 1}^r 2^{\\beta_k} \u5f0f\u4e2d \\beta = -P^{-1}h \\beta = -P^{-1}h \u79bb\u6563\u65e0\u8bb0\u5fc6\u4fe1\u9053\uff1a I(a_i;Y) = C \\qquad ,p_i > 0 I(a_i;Y) = C \\qquad ,p_i > 0 I(a_i;Y) \\le C \\qquad ,p_i = 0 I(a_i;Y) \\le C \\qquad ,p_i = 0 \u4fe1\u9053\u7ea7\u8054\uff1a\u4fe1\u606f\u4e22\u5931 \u79bb\u6563\u65e0\u8bb0\u5fc6\u4fe1\u9053\uff1a I(\\boldsymbol{X}^N;\\boldsymbol{Y}^N) \\le \\sum_{i = 1}^N (\\boldsymbol{X_i};\\boldsymbol{Y_i}) I(\\boldsymbol{X}^N;\\boldsymbol{Y}^N) \\le \\sum_{i = 1}^N (\\boldsymbol{X_i};\\boldsymbol{Y_i}) \u65e0\u8bb0\u5fc6\u4fe1\u6e90\uff1a I(\\boldsymbol{X}^N;\\boldsymbol{Y}^N) \\le \\sum_{i = 1}^N (\\boldsymbol{X_i};\\boldsymbol{Y_i}) I(\\boldsymbol{X}^N;\\boldsymbol{Y}^N) \\le \\sum_{i = 1}^N (\\boldsymbol{X_i};\\boldsymbol{Y_i})","title":"\u5355\u7b26\u53f7\u79bb\u6563\u4fe1\u9053\u53ca\u5176\u5bb9\u91cf"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#1","text":"","title":"1. \u4fe1\u606f\u8bba\u57fa\u672c\u6982\u5ff5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#2","text":"","title":"2. \u4fe1\u6e90\u4e0e\u4fe1\u6e90\u65e0\u5931\u771f\u7f16\u7801"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#3","text":"","title":"3. \u4fe1\u9053\u53ca\u5176\u5bb9\u91cf"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/","text":"\u57fa\u4e8e51\u7684\u5b9a\u65f6\u95f9\u949f \u300a\u5355\u7247\u673a\u5e94\u7528\u8bbe\u8ba1\u300b\u8bfe\u7a0b\u8bbe\u8ba1\u603b\u7ed3\u62a5\u544a \u8bfe\u7a0b\u8bbe\u8ba1\u540d\u79f0 \uff1a\u5b9a\u65f6\u95f9\u949f \u5b66\u751f\u59d3\u540d \uff1a \u73ed\u7ea7 \uff1a \u5b66\u53f7 \uff1a \u7814\u7a76\u610f\u4e49\u548c\u5b9e\u73b0\u529f\u80fd\u6307\u6807 \u7814\u7a76\u610f\u4e49 \u968f\u7740\u4eba\u4eec\u7269\u8d28\u751f\u6d3b\u6c34\u5e73\u7684\u63d0\u9ad8\uff0c\u5404\u79cd\u667a\u80fd\u5bb6\u5c45\u8fdb\u5165\u4eba\u4eec\u7684\u65e5\u5e38\u751f\u6d3b\u5f53\u4e2d\u3002\u5728\u65e5\u5e38\u751f\u6d3b\u5f53\u4e2d\uff0c\u6211\u4eec\u4e0d\u4ec5\u9700\u8981\u95f9\u949f\u7ed9\u6211\u4eec\u5b9a\u65f6\u63d0\u9192\uff0c\u8fd8\u9700\u8981\u4f7f\u7528\u4f5c\u4e3a\u5b9a\u65f6\u5668\u63a7\u5236\u4e00\u4e9b\u4e0d\u5177\u5907\u5b9a\u65f6\u529f\u80fd\u7684\u5bb6\u7535\u7684\u4f7f\u7528\uff0c\u4ece\u800c\u63d0\u9ad8\u751f\u6d3b\u7684\u4fbf\u5229\u6027\uff0c\u8fd9\u6837\u7684\u7814\u7a76\u662f\u5177\u6709\u610f\u4e49\u7684\u3002 \u8bfe\u7a0b\u8bbe\u8ba1\u8981\u6c42 \u5229\u75283\u4e2a\u6309\u952e\u8c03\u6574\u73b0\u5728\u65f6\u95f4\uff0c\u95f9\u94c3\u65f6\u95f4\u4ee5\u53ca\u95f9\u949f\u7684\u5f00\u5173\u3002 \u4f7f\u7528LCD12864\u663e\u793a\u73b0\u5728\u65f6\u95f4\uff0c\u95f9\u94c3\u65f6\u95f4\u4ee5\u53ca\u95f9\u949f\u7684\u72b6\u6001\u3002 \u5587\u53ed\u64ad\u653e\u95f9\u94c3\u97f3\u4e50\uff0c\u7ee7\u7535\u5668\u5b9a\u65f6\u63a7\u5236\u5bb6\u7535\u7684\u5f00\u5173\u3002 \u8bbe\u8ba1\u7279\u8272\u5206\u6790 \u7075\u6d3b\u6027\u597d\uff0c\u53ef\u79fb\u690d\u6027\u9ad8\uff0c\u53ea\u9700\u8981\u7ecf\u8fc7\u6781\u5c11\u91cf\u7684\u6539\u52a8\uff0c\u53ef\u9002\u5e94\u5927\u591a\u6570\u4f20\u7edf\u5bb6\u7535\u7684\u667a\u80fd\u5316\u4f7f\u7528\u3002 \u5177\u6709\u5b9e\u65f6\u663e\u793a\uff0c\u591c\u95f4\u4f7f\u7528\u7684\u80fd\u529b\u3002 \u5587\u53ed\u53ef\u81ea\u5b9a\u4e49\u97f3\u4e50\u64ad\u653e\u3002 \u6210\u672c\u6781\u4f4e\u3002 \u4f7f\u7528\u65b9\u6cd5 \u7a0b\u5e8f\u6267\u884c\u540e\u5de5\u4f5c\u6307\u793a\u706fLED\u95ea\u52a8\uff0c\u8868\u793a\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\uff0c\u73b0\u5728\u548c\u95f9\u94c3\u65f6\u95f4\u90fd\u663e\u793a\u4e3a\u201c00\uff1a00\u201d\uff0c\u6309\u4e0b\u64cd\u4f5c\u952eK1-K3\u52a8\u4f5c\u5982\u4e0b\uff1a 1. K1\u2014\u8bbe\u7f6e\u73b0\u5728\u7684\u65f6\u95f4\u3002 2. K2\u2014\u8bbe\u7f6e\u95f9\u94c3\u7684\u65f6\u95f4\u3002 3. K3\u2014\u95f9\u94c3ON/OFF\u7684\u72b6\u6001\u8bbe\u7f6e\uff0c\u95f9\u949f\u54cd\u94c3\u65f6\uff0c\u53ef\u901a\u8fc7\u6b64\u6309\u952e\u5173\u95ed\u3002 \u5f53\u8bbe\u7f6e\u65f6\u95f4\u65f6\uff0c\u95f9\u949f\u6682\u505c\u8ba1\u65f6\uff0c\u8bbe\u7f6e\u5f53\u524d\u65f6\u95f4\u6216\u95f9\u94c3\u65f6\u95f4\u5982\u4e0b\u3002 1. K1\u2014\u65f6\u8c03\u6574\u3002 2. K2\u2014\u5206\u8c03\u6574\u3002 3. K3\u2014\u8bbe\u7f6e\u5b8c\u6210 \u6280\u672f\u6307\u6807 \u65f6\u95f4\u51c6\u786e\u5ea6 \u7535\u8def\u529f\u8017\uff0c\u7535\u6c60\u7eed\u822a\u80fd\u529b \u603b\u8bbe\u8ba1\u6846\u56fe \u6309\u7167\u7cfb\u7edf\u8bbe\u8ba1\u529f\u80fd\u7684\u8981\u6c42\uff0c\u786e\u5b9a\u7cfb\u7edf\u75316\u4e2a\u6a21\u5757\u7ec4\u6210\uff1a\u4e3b\u63a7\u5236\u5668\u3001\u95f9\u94c3\u7535\u8def\u3001\u7535\u6e90\u7535\u8def\u3001\u6309\u952e\u7535\u8def\u3001\u663e\u793a\u7535\u8def\u548c\u7ee7\u7535\u5668\u5f00\u5173\u7535\u8def\uff0c\u7ed3\u6784\u6846\u56fe\u5982\u56fe\u6240\u793a\u3002 LCD1264\u8bf4\u660e \u5176\u4e2dLCD12864\u4f7f\u7528ST7920\u63a7\u5236\u5668\uff0c\u81ea\u5e26\u4e2d\u6587\u5b57\u5e93\uff0c\u53ef\u663e\u793a\u6c49\u5b57\u53ca\u56fe\u5f62\uff0c\u5185\u7f6e8192\u4e2a\u4e2d\u6587\u6c49\u5b57\uff0816X16\u70b9\u9635\uff09\u3001128\u4e2a\u5b57\u7b26\uff088X16\u70b9\u9635\uff09\u53ca64X256\u70b9\u9635\u663e\u793aRAM\uff08GDRAM\uff09\u3002 \u4e3b\u8981\u6280\u672f\u53c2\u6570\u548c\u663e\u793a\u7279\u6027: \u7535\u6e90\uff1aVDD 3.3V~+5V(\u5185\u7f6e\u5347\u538b\u7535\u8def\uff0c\u65e0\u9700\u8d1f\u538b)\uff1b \u663e\u793a\u5185\u5bb9\uff1a128\u5217\u00d7 64\u884c \u663e\u793a\u989c\u8272\uff1a\u9ec4\u7eff LCD\u7c7b\u578b\uff1aSTN \u4e0eMCU\u63a5\u53e3\uff1a8\u4f4d\u62164\u4f4d\u5e76\u884c/3\u4f4d\u4e32\u884c \u914d\u7f6eLED\u80cc\u5149 \u591a\u79cd\u8f6f\u4ef6\u529f\u80fd\uff1a\u5149\u6807\u663e\u793a\u3001\u753b\u9762\u79fb\u4f4d\u3001\u81ea\u5b9a\u4e49\u5b57\u7b26\u3001\u7761\u7720\u6a21\u5f0f\u7b49 \u5e76\u884c\u5199\u65f6\u5e8f \u5e76\u884c\u8bfb\u65f6\u5e8f GDRAM\u5730\u5740 \u786c\u4ef6\u7535\u8def\u8bbe\u8ba1\u5b9e\u73b0 \u539f\u7406\u56fe \u6a21\u5757\u8bf4\u660e \u6309\u952e\u6a21\u5757 \u6309\u952eK1-K3\u5206\u522b\u8fde\u63a5\u81f3P3.0-P3.2\u53e3\uff0c\u7136\u540e\u5e76\u8054\u63a5\u5730\uff0c\u6bcf\u5f53\u76f8\u5e94\u6309\u952e\u6309\u4e0b\u65f6\uff0c\u5bf9\u5e94I/O\u53e3\u63a5\u53d7\u5230\u4f4e\u7535\u5e73\uff0c\u5b8c\u6210\u76f8\u5e94\u529f\u80fd\u3002 \u95f9\u94c3\uff0c\u7ee7\u7535\u5668\u6a21\u5757 \u5355\u7247\u673a\u4e0a\u7535I/O\u53e3\u4e3a\u9ad8\u7535\u5e73\uff0c\u5176\u76f8\u5e94\u7684PNP\u7ba1\u5de5\u4f5c\u5728\u622a\u6b62\u72b6\u6001\uff0c\u95f9\u94c3\u89e6\u53d1\u540e\uff0cI/O\u53e3\u62c9\u4f4ePNP\u7ba1\u5de5\u4f5c\u5728\u653e\u5927\u72b6\u6001\uff0c\u5587\u53ed\u548c\u7ee7\u7535\u5668\u5c31\u5f00\u59cb\u5de5\u4f5c\u3002 \u8f6f\u4ef6\u8bbe\u8ba1 \u4e3b\u8981\u6570\u636e\u7ed3\u6784 \u51fd\u6570\u8c03\u7528\u5173\u7cfb\u56fe \u5176\u4e2d init \u4e3a\u521d\u59cb\u5316\u51fd\u6570\uff0c keyscan \u4e3a\u6309\u952e\u626b\u63cf\u51fd\u6570\uff0c play_song \u4e3a\u97f3\u4e50\u64ad\u653e\u51fd\u6570\uff0c clock_cmp \u4e3a\u65f6\u95f4\u5bf9\u6bd4\u51fd\u6570\uff0c time_adjust \u4e3a\u65f6\u95f4\u8c03\u6574\u51fd\u6570\uff0c clock_display \u4e3a\u65f6\u949f\u663e\u793a\u51fd\u6570\u3002 \u4e3b\u8981\u51fd\u6570\u7684\u63a7\u5236\u6d41\u7a0b\u56fe main \u51fd\u6570 init \u51fd\u6570 \u5bf9LCD12864\uff0c\u5b9a\u65f6\u56680\uff0c1\uff0c\u5587\u53ed\u4ee5\u53ca\u7ee7\u7535\u5668I/O\u53e3\u7684\u521d\u59cb\u5316\uff0c wela \u548c dula \u4ec5\u5728\u8c03\u8bd5\u4e2d\u4f7f\u7528\u3002 keyscan \u51fd\u6570 \u6309\u987a\u5e8f\u5bf9\u4e09\u4e2a\u6309\u952e\u8fdb\u884c\u626b\u63cf\u3002 play_song \u51fd\u6570 song[] \u4e3a\u6b4c\u66f2\u5b58\u653e\u7684\u6570\u7ec4\uff0c\u5176\u5076\u6570\u4f4d\u4e3a\u95f9\u94c3\u9891\u7387\uff0c\u5947\u6570\u4f4d\u4e3a\u5bf9\u5e94\u9891\u7387\u7684\u64ad\u653e\u65f6\u95f4\u3002 clock_cmp \u51fd\u6570 time_adjust \u51fd\u6570 clock_display \u51fd\u6570 \u8c03\u8bd5\u8fc7\u7a0b\u548c\u8bbe\u8ba1\u6548\u679c \u8c03\u8bd5\u8fc7\u7a0b \u5728 protues \u4e2d\u5b8c\u6210\u7535\u8def\u539f\u7406\u56fe\u7684\u7ed8\u5236 \u5199\u597d\u4e3b\u8981\u4ee3\u7801\u6846\u67b6 \u5728 protues \u5b8c\u6210\u4e3b\u8981\u529f\u80fd\u7684\u4eff\u771f \u5b8c\u6210\u5355\u7247\u673a\u6700\u5c0f\u7cfb\u7edf\uff0c\u6309\u952e\u548c lcd \u63a5\u53e3\u7684\u710a\u63a5 \u7528 led \u706f\u6d4b\u8bd5 STC89C52 \u662f\u5426\u5de5\u4f5c \u68c0\u9a8c lcd12864 \u663e\u793a\u65e0\u8bef \u68c0\u9a8c3\u4e2a\u6309\u952e\u63a7\u5236\u65e0\u8bef \u710a\u63a5\u4e09\u6781\u7ba1\u4e0e\u5587\u53ed \u68c0\u9a8c\u95f9\u94c3\u529f\u80fd\u5b9e\u73b0 \u710a\u63a5\u4e09\u6781\u7ba1\u4e0e\u7ee7\u7535\u5668 \u68c0\u9a8c\u7ee7\u7535\u5668\u63a7\u5236\u529f\u80fd\u7684\u5b9e\u73b0 \u6574\u4f53\u68c0\u9a8c\u65e0\u8bef \u8bbe\u8ba1\u6548\u679c lcd12864 \u663e\u793a\u6548\u679c\uff1a \u7b2c\u4e00\u884c\u4e3a\u95f9\u94c3\u65f6\u95f4\uff0c\u7b2c\u4e8c\u884c\u4e3a\u73b0\u5728\u65f6\u95f4\uff0c\u53f3\u4e0b\u89d2\u4e3a\u95f9\u949f\u72b6\u6001 \u6309\u952e1,2\u8c03\u6574\u95f9\u94c3\u65f6\u95f4\uff0c\u6309\u952e3\u5f00\u542f\u95f9\u94c3\uff1a \u95f9\u94c3\u65f6\u95f4\u548c\u73b0\u5728\u65f6\u95f4\u76f8\u7b49\u4e14\u95f9\u949f\u4e3a\u5f00\u542f\u72b6\u6001\u65f6\uff0c\u7ee7\u7535\u5668\u5207\u6362\u72b6\u6001\uff0c\u7eff\u706f\u4eae\uff0c\u5587\u53ed\u64ad\u653e\u4e00\u6bb5\u97f3\u4e50\uff1a \u518d\u6309\u6309\u952e3\uff0c\u95f9\u949f\u5173\u95ed\uff0c\u5587\u53ed\u505c\u6b62\u64ad\u653e\uff0c\u4f46\u7ee7\u7535\u5668\u7ee7\u7eed\u5de5\u4f5c\u76f4\u5230\u4e0b\u6b21\u95f9\u94c3\uff1a \u4f5c\u8005\u4e0e\u4f5c\u54c1 \u5143\u5668\u4ef6\u8868\u548c\u6210\u672c\u6838\u7b97 \u5e8f\u53f7 \u5668\u4ef6\u540d\u79f0 \u578b\u53f7\u89c4\u683c \u6570\u91cf \u4ef7\u683c 1 STC89C52 40\u811a\u76f4\u63d2 1\u4e2a 3.13*1\u5143 2 \u6676\u632f 11.0592MHz 1\u4e2a 0.225*1\u5143 3 \u7535\u5bb9 33pf 2\u4e2a 0.024*2\u5143 4 \u7535\u5bb9 10uf 1\u4e2a 0.261*1\u5143 5 \u7535\u963b 200 1K 510K 10K 4\u4e2a 0.12*5\u5143 6 S9012 \u76f4\u63d2 2\u4e2a 0.0402*2\u5143 7 \u7ee7\u7535\u5668 5\u811a\u76f4\u63d2 1\u4e2a 2.00*1\u5143 8 \u5587\u53ed 8\u6b270.5w 1\u4e2a 1.21*1\u5143 9 \u8f7b\u89e6\u5f00\u5173 6*6*5 4\u4e2a 0.042*4\u5143 10 led 5mm\u7ea2\uff0c\u7eff\u76f4\u63d2 3\u4e2a 0.0364*3\u5143 11 \u4e07\u7528\u677f 10*10cm 1\u4e2a 2.28*1\u5143 12 LCD12864 \u84dd\u5c4f 1\u4e2a 25.8*1\u5143 13 \u675c\u90a6\u7ebf 10cm 12\u6839 0.01*12\u5143 14 \u6392\u9488 \u76f4\u63d2 2\u6392 0.20*2\u5143 15 \u5355\u7247\u673a\u6d4b\u8bd5\u6d3b\u52a8\u5e95\u5ea7 40\u811a 1\u4e2a 3.03*1\u5143 \u603b\u8ba1 39.642\u5143 \u4f5c\u54c1\u6210\u672c\u6838\u7b97\uff1a \u672c\u7cfb\u7edf\u7684\u8bbe\u8ba1\u6210\u672c\u662f39.642\u5143\uff0c\u4ef7\u683c\u8f83\u4f4e\uff0c\u5176\u4e2dLCD12864\u7684\u6210\u672c\u4e3a25.8\u5143\uff0c\u5360\u4e00\u534a\u4ee5\u4e0a\uff0c\u53ef\u4ee5\u4f7f\u7528\u8f83\u4e3a\u4fbf\u5b9c\u7684LCD1608\uff0c\u82e5\u518d\u8ffd\u6c42\u6027\u4ef7\u6bd4\uff0c\u53ef\u5c06LCD\u66f4\u6362\u4e3a\u6570\u7801\u7ba1\u663e\u793a\uff0c\u518d\u53bb\u6389\u4e00\u4e9b\u8c03\u8bd5\u7528\u7684\u6392\u9488\uff0c\u5e95\u5ea7\uff0c\u675c\u90a6\u7ebf\uff0c\u53ef\u5c06\u6210\u672c\u63a7\u5236\u518d15\u5143\u4ee5\u4e0b\u3002 \u540c\u7c7b\u578b\u4ea7\u54c1\u6210\u672c\u6bd4\u8f83 \u76f8\u6bd4\u4e8e\u540c\u7c7b\u4ea7\u54c1\uff0c\u6bd4\u8d77\u771f\u6b63\u5546\u4e1a\u5316\u7684\u6210\u54c1\u663e\u7136\u6ca1\u6709\u4f18\u52bf\uff08\u90fd\u662f\u4f7f\u7528\u4e13\u7528\u82af\u7247\uff0c\u6210\u672c\u53ea\u6709\u51e0\u5143\uff09\uff0c\u4f46\u6dd8\u5b9d\u4e0a51\u5355\u7247\u673a\u7684\u6210\u54c1\u90fd\u572860\u5143\u4ee5\u4e0a\uff0c\u800c\u672c\u7cfb\u7edf\u7684\u6210\u672c\u4ec5\u4ec5\u670939.522\u5143\uff0c\u5982\u53bb\u9664\u4e0d\u5fc5\u8981\u7684\u5143\u4ef6\uff0c\u53ef\u5c06\u6210\u672c\u63a7\u5236\u518d15\u5143\u4ee5\u4e0b\uff0c\u56e0\u6b64\u5728\u4ef7\u683c\u4e0a\u66f4\u52a0\u5177\u6709\u5e02\u573a\u7ade\u4e89\u529b\uff1b\u540c\u65f6\uff0c\u672c\u7cfb\u7edf\u5177\u6709\u66f4\u591a\u7684\u529f\u80fd\u9009\u62e9\uff0c\u6bd4\u5982\u7ee7\u7535\u5668\u63a7\u5236\u5bb6\u7535\u7684\u4f5c\u7528\uff0c\u4f46\u5728\u6027\u80fd\u65b9\u9762\uff0c\u7531\u4e8e\u5b9a\u65f6\u5668\u4f7f\u7528\u5355\u7247\u673a\u5185\u90e8\u5b9a\u65f6\u5668\uff0c\u800c\u5e02\u573a\u4e0a\u7684\u5927\u591a\u7531DS12C887\u5b8c\u6210\u5b9a\u65f6\uff0c\u6240\u4ee5\u65f6\u95f4\u51c6\u786e\u5ea6\u5ea6\u4e0d\u5982\u5e02\u573a\u4e0a\u7684\u3002","title":"\u57fa\u4e8e51\u7684\u5b9a\u65f6\u95f9\u949f"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#51","text":"","title":"\u57fa\u4e8e51\u7684\u5b9a\u65f6\u95f9\u949f"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_1","text":"\u8bfe\u7a0b\u8bbe\u8ba1\u540d\u79f0 \uff1a\u5b9a\u65f6\u95f9\u949f \u5b66\u751f\u59d3\u540d \uff1a \u73ed\u7ea7 \uff1a \u5b66\u53f7 \uff1a","title":"\u300a\u5355\u7247\u673a\u5e94\u7528\u8bbe\u8ba1\u300b\u8bfe\u7a0b\u8bbe\u8ba1\u603b\u7ed3\u62a5\u544a"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_2","text":"","title":"\u7814\u7a76\u610f\u4e49\u548c\u5b9e\u73b0\u529f\u80fd\u6307\u6807"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_3","text":"\u968f\u7740\u4eba\u4eec\u7269\u8d28\u751f\u6d3b\u6c34\u5e73\u7684\u63d0\u9ad8\uff0c\u5404\u79cd\u667a\u80fd\u5bb6\u5c45\u8fdb\u5165\u4eba\u4eec\u7684\u65e5\u5e38\u751f\u6d3b\u5f53\u4e2d\u3002\u5728\u65e5\u5e38\u751f\u6d3b\u5f53\u4e2d\uff0c\u6211\u4eec\u4e0d\u4ec5\u9700\u8981\u95f9\u949f\u7ed9\u6211\u4eec\u5b9a\u65f6\u63d0\u9192\uff0c\u8fd8\u9700\u8981\u4f7f\u7528\u4f5c\u4e3a\u5b9a\u65f6\u5668\u63a7\u5236\u4e00\u4e9b\u4e0d\u5177\u5907\u5b9a\u65f6\u529f\u80fd\u7684\u5bb6\u7535\u7684\u4f7f\u7528\uff0c\u4ece\u800c\u63d0\u9ad8\u751f\u6d3b\u7684\u4fbf\u5229\u6027\uff0c\u8fd9\u6837\u7684\u7814\u7a76\u662f\u5177\u6709\u610f\u4e49\u7684\u3002","title":"\u7814\u7a76\u610f\u4e49"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_4","text":"\u5229\u75283\u4e2a\u6309\u952e\u8c03\u6574\u73b0\u5728\u65f6\u95f4\uff0c\u95f9\u94c3\u65f6\u95f4\u4ee5\u53ca\u95f9\u949f\u7684\u5f00\u5173\u3002 \u4f7f\u7528LCD12864\u663e\u793a\u73b0\u5728\u65f6\u95f4\uff0c\u95f9\u94c3\u65f6\u95f4\u4ee5\u53ca\u95f9\u949f\u7684\u72b6\u6001\u3002 \u5587\u53ed\u64ad\u653e\u95f9\u94c3\u97f3\u4e50\uff0c\u7ee7\u7535\u5668\u5b9a\u65f6\u63a7\u5236\u5bb6\u7535\u7684\u5f00\u5173\u3002","title":"\u8bfe\u7a0b\u8bbe\u8ba1\u8981\u6c42"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_5","text":"\u7075\u6d3b\u6027\u597d\uff0c\u53ef\u79fb\u690d\u6027\u9ad8\uff0c\u53ea\u9700\u8981\u7ecf\u8fc7\u6781\u5c11\u91cf\u7684\u6539\u52a8\uff0c\u53ef\u9002\u5e94\u5927\u591a\u6570\u4f20\u7edf\u5bb6\u7535\u7684\u667a\u80fd\u5316\u4f7f\u7528\u3002 \u5177\u6709\u5b9e\u65f6\u663e\u793a\uff0c\u591c\u95f4\u4f7f\u7528\u7684\u80fd\u529b\u3002 \u5587\u53ed\u53ef\u81ea\u5b9a\u4e49\u97f3\u4e50\u64ad\u653e\u3002 \u6210\u672c\u6781\u4f4e\u3002","title":"\u8bbe\u8ba1\u7279\u8272\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_6","text":"\u7a0b\u5e8f\u6267\u884c\u540e\u5de5\u4f5c\u6307\u793a\u706fLED\u95ea\u52a8\uff0c\u8868\u793a\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\uff0c\u73b0\u5728\u548c\u95f9\u94c3\u65f6\u95f4\u90fd\u663e\u793a\u4e3a\u201c00\uff1a00\u201d\uff0c\u6309\u4e0b\u64cd\u4f5c\u952eK1-K3\u52a8\u4f5c\u5982\u4e0b\uff1a 1. K1\u2014\u8bbe\u7f6e\u73b0\u5728\u7684\u65f6\u95f4\u3002 2. K2\u2014\u8bbe\u7f6e\u95f9\u94c3\u7684\u65f6\u95f4\u3002 3. K3\u2014\u95f9\u94c3ON/OFF\u7684\u72b6\u6001\u8bbe\u7f6e\uff0c\u95f9\u949f\u54cd\u94c3\u65f6\uff0c\u53ef\u901a\u8fc7\u6b64\u6309\u952e\u5173\u95ed\u3002 \u5f53\u8bbe\u7f6e\u65f6\u95f4\u65f6\uff0c\u95f9\u949f\u6682\u505c\u8ba1\u65f6\uff0c\u8bbe\u7f6e\u5f53\u524d\u65f6\u95f4\u6216\u95f9\u94c3\u65f6\u95f4\u5982\u4e0b\u3002 1. K1\u2014\u65f6\u8c03\u6574\u3002 2. K2\u2014\u5206\u8c03\u6574\u3002 3. K3\u2014\u8bbe\u7f6e\u5b8c\u6210","title":"\u4f7f\u7528\u65b9\u6cd5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_7","text":"\u65f6\u95f4\u51c6\u786e\u5ea6 \u7535\u8def\u529f\u8017\uff0c\u7535\u6c60\u7eed\u822a\u80fd\u529b","title":"\u6280\u672f\u6307\u6807"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_8","text":"\u6309\u7167\u7cfb\u7edf\u8bbe\u8ba1\u529f\u80fd\u7684\u8981\u6c42\uff0c\u786e\u5b9a\u7cfb\u7edf\u75316\u4e2a\u6a21\u5757\u7ec4\u6210\uff1a\u4e3b\u63a7\u5236\u5668\u3001\u95f9\u94c3\u7535\u8def\u3001\u7535\u6e90\u7535\u8def\u3001\u6309\u952e\u7535\u8def\u3001\u663e\u793a\u7535\u8def\u548c\u7ee7\u7535\u5668\u5f00\u5173\u7535\u8def\uff0c\u7ed3\u6784\u6846\u56fe\u5982\u56fe\u6240\u793a\u3002","title":"\u603b\u8bbe\u8ba1\u6846\u56fe"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#lcd1264","text":"\u5176\u4e2dLCD12864\u4f7f\u7528ST7920\u63a7\u5236\u5668\uff0c\u81ea\u5e26\u4e2d\u6587\u5b57\u5e93\uff0c\u53ef\u663e\u793a\u6c49\u5b57\u53ca\u56fe\u5f62\uff0c\u5185\u7f6e8192\u4e2a\u4e2d\u6587\u6c49\u5b57\uff0816X16\u70b9\u9635\uff09\u3001128\u4e2a\u5b57\u7b26\uff088X16\u70b9\u9635\uff09\u53ca64X256\u70b9\u9635\u663e\u793aRAM\uff08GDRAM\uff09\u3002 \u4e3b\u8981\u6280\u672f\u53c2\u6570\u548c\u663e\u793a\u7279\u6027: \u7535\u6e90\uff1aVDD 3.3V~+5V(\u5185\u7f6e\u5347\u538b\u7535\u8def\uff0c\u65e0\u9700\u8d1f\u538b)\uff1b \u663e\u793a\u5185\u5bb9\uff1a128\u5217\u00d7 64\u884c \u663e\u793a\u989c\u8272\uff1a\u9ec4\u7eff LCD\u7c7b\u578b\uff1aSTN \u4e0eMCU\u63a5\u53e3\uff1a8\u4f4d\u62164\u4f4d\u5e76\u884c/3\u4f4d\u4e32\u884c \u914d\u7f6eLED\u80cc\u5149 \u591a\u79cd\u8f6f\u4ef6\u529f\u80fd\uff1a\u5149\u6807\u663e\u793a\u3001\u753b\u9762\u79fb\u4f4d\u3001\u81ea\u5b9a\u4e49\u5b57\u7b26\u3001\u7761\u7720\u6a21\u5f0f\u7b49","title":"LCD1264\u8bf4\u660e"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_9","text":"","title":"\u5e76\u884c\u5199\u65f6\u5e8f"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_10","text":"","title":"\u5e76\u884c\u8bfb\u65f6\u5e8f"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#gdram","text":"","title":"GDRAM\u5730\u5740"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_11","text":"","title":"\u786c\u4ef6\u7535\u8def\u8bbe\u8ba1\u5b9e\u73b0"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_12","text":"","title":"\u539f\u7406\u56fe"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_13","text":"","title":"\u6a21\u5757\u8bf4\u660e"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_14","text":"\u6309\u952eK1-K3\u5206\u522b\u8fde\u63a5\u81f3P3.0-P3.2\u53e3\uff0c\u7136\u540e\u5e76\u8054\u63a5\u5730\uff0c\u6bcf\u5f53\u76f8\u5e94\u6309\u952e\u6309\u4e0b\u65f6\uff0c\u5bf9\u5e94I/O\u53e3\u63a5\u53d7\u5230\u4f4e\u7535\u5e73\uff0c\u5b8c\u6210\u76f8\u5e94\u529f\u80fd\u3002","title":"\u6309\u952e\u6a21\u5757"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_15","text":"\u5355\u7247\u673a\u4e0a\u7535I/O\u53e3\u4e3a\u9ad8\u7535\u5e73\uff0c\u5176\u76f8\u5e94\u7684PNP\u7ba1\u5de5\u4f5c\u5728\u622a\u6b62\u72b6\u6001\uff0c\u95f9\u94c3\u89e6\u53d1\u540e\uff0cI/O\u53e3\u62c9\u4f4ePNP\u7ba1\u5de5\u4f5c\u5728\u653e\u5927\u72b6\u6001\uff0c\u5587\u53ed\u548c\u7ee7\u7535\u5668\u5c31\u5f00\u59cb\u5de5\u4f5c\u3002","title":"\u95f9\u94c3\uff0c\u7ee7\u7535\u5668\u6a21\u5757"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_16","text":"","title":"\u8f6f\u4ef6\u8bbe\u8ba1"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_17","text":"","title":"\u4e3b\u8981\u6570\u636e\u7ed3\u6784"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_18","text":"\u5176\u4e2d init \u4e3a\u521d\u59cb\u5316\u51fd\u6570\uff0c keyscan \u4e3a\u6309\u952e\u626b\u63cf\u51fd\u6570\uff0c play_song \u4e3a\u97f3\u4e50\u64ad\u653e\u51fd\u6570\uff0c clock_cmp \u4e3a\u65f6\u95f4\u5bf9\u6bd4\u51fd\u6570\uff0c time_adjust \u4e3a\u65f6\u95f4\u8c03\u6574\u51fd\u6570\uff0c clock_display \u4e3a\u65f6\u949f\u663e\u793a\u51fd\u6570\u3002","title":"\u51fd\u6570\u8c03\u7528\u5173\u7cfb\u56fe"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_19","text":"","title":"\u4e3b\u8981\u51fd\u6570\u7684\u63a7\u5236\u6d41\u7a0b\u56fe"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#main","text":"","title":"main\u51fd\u6570"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#init","text":"\u5bf9LCD12864\uff0c\u5b9a\u65f6\u56680\uff0c1\uff0c\u5587\u53ed\u4ee5\u53ca\u7ee7\u7535\u5668I/O\u53e3\u7684\u521d\u59cb\u5316\uff0c wela \u548c dula \u4ec5\u5728\u8c03\u8bd5\u4e2d\u4f7f\u7528\u3002","title":"init\u51fd\u6570"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#keyscan","text":"\u6309\u987a\u5e8f\u5bf9\u4e09\u4e2a\u6309\u952e\u8fdb\u884c\u626b\u63cf\u3002","title":"keyscan\u51fd\u6570"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#play_song","text":"song[] \u4e3a\u6b4c\u66f2\u5b58\u653e\u7684\u6570\u7ec4\uff0c\u5176\u5076\u6570\u4f4d\u4e3a\u95f9\u94c3\u9891\u7387\uff0c\u5947\u6570\u4f4d\u4e3a\u5bf9\u5e94\u9891\u7387\u7684\u64ad\u653e\u65f6\u95f4\u3002","title":"play_song\u51fd\u6570"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#clock_cmp","text":"","title":"clock_cmp\u51fd\u6570"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#time_adjust","text":"","title":"time_adjust\u51fd\u6570"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#clock_display","text":"","title":"clock_display\u51fd\u6570"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_20","text":"","title":"\u8c03\u8bd5\u8fc7\u7a0b\u548c\u8bbe\u8ba1\u6548\u679c"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_21","text":"\u5728 protues \u4e2d\u5b8c\u6210\u7535\u8def\u539f\u7406\u56fe\u7684\u7ed8\u5236 \u5199\u597d\u4e3b\u8981\u4ee3\u7801\u6846\u67b6 \u5728 protues \u5b8c\u6210\u4e3b\u8981\u529f\u80fd\u7684\u4eff\u771f \u5b8c\u6210\u5355\u7247\u673a\u6700\u5c0f\u7cfb\u7edf\uff0c\u6309\u952e\u548c lcd \u63a5\u53e3\u7684\u710a\u63a5 \u7528 led \u706f\u6d4b\u8bd5 STC89C52 \u662f\u5426\u5de5\u4f5c \u68c0\u9a8c lcd12864 \u663e\u793a\u65e0\u8bef \u68c0\u9a8c3\u4e2a\u6309\u952e\u63a7\u5236\u65e0\u8bef \u710a\u63a5\u4e09\u6781\u7ba1\u4e0e\u5587\u53ed \u68c0\u9a8c\u95f9\u94c3\u529f\u80fd\u5b9e\u73b0 \u710a\u63a5\u4e09\u6781\u7ba1\u4e0e\u7ee7\u7535\u5668 \u68c0\u9a8c\u7ee7\u7535\u5668\u63a7\u5236\u529f\u80fd\u7684\u5b9e\u73b0 \u6574\u4f53\u68c0\u9a8c\u65e0\u8bef","title":"\u8c03\u8bd5\u8fc7\u7a0b"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_22","text":"lcd12864 \u663e\u793a\u6548\u679c\uff1a \u7b2c\u4e00\u884c\u4e3a\u95f9\u94c3\u65f6\u95f4\uff0c\u7b2c\u4e8c\u884c\u4e3a\u73b0\u5728\u65f6\u95f4\uff0c\u53f3\u4e0b\u89d2\u4e3a\u95f9\u949f\u72b6\u6001 \u6309\u952e1,2\u8c03\u6574\u95f9\u94c3\u65f6\u95f4\uff0c\u6309\u952e3\u5f00\u542f\u95f9\u94c3\uff1a \u95f9\u94c3\u65f6\u95f4\u548c\u73b0\u5728\u65f6\u95f4\u76f8\u7b49\u4e14\u95f9\u949f\u4e3a\u5f00\u542f\u72b6\u6001\u65f6\uff0c\u7ee7\u7535\u5668\u5207\u6362\u72b6\u6001\uff0c\u7eff\u706f\u4eae\uff0c\u5587\u53ed\u64ad\u653e\u4e00\u6bb5\u97f3\u4e50\uff1a \u518d\u6309\u6309\u952e3\uff0c\u95f9\u949f\u5173\u95ed\uff0c\u5587\u53ed\u505c\u6b62\u64ad\u653e\uff0c\u4f46\u7ee7\u7535\u5668\u7ee7\u7eed\u5de5\u4f5c\u76f4\u5230\u4e0b\u6b21\u95f9\u94c3\uff1a \u4f5c\u8005\u4e0e\u4f5c\u54c1","title":"\u8bbe\u8ba1\u6548\u679c"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_23","text":"\u5e8f\u53f7 \u5668\u4ef6\u540d\u79f0 \u578b\u53f7\u89c4\u683c \u6570\u91cf \u4ef7\u683c 1 STC89C52 40\u811a\u76f4\u63d2 1\u4e2a 3.13*1\u5143 2 \u6676\u632f 11.0592MHz 1\u4e2a 0.225*1\u5143 3 \u7535\u5bb9 33pf 2\u4e2a 0.024*2\u5143 4 \u7535\u5bb9 10uf 1\u4e2a 0.261*1\u5143 5 \u7535\u963b 200 1K 510K 10K 4\u4e2a 0.12*5\u5143 6 S9012 \u76f4\u63d2 2\u4e2a 0.0402*2\u5143 7 \u7ee7\u7535\u5668 5\u811a\u76f4\u63d2 1\u4e2a 2.00*1\u5143 8 \u5587\u53ed 8\u6b270.5w 1\u4e2a 1.21*1\u5143 9 \u8f7b\u89e6\u5f00\u5173 6*6*5 4\u4e2a 0.042*4\u5143 10 led 5mm\u7ea2\uff0c\u7eff\u76f4\u63d2 3\u4e2a 0.0364*3\u5143 11 \u4e07\u7528\u677f 10*10cm 1\u4e2a 2.28*1\u5143 12 LCD12864 \u84dd\u5c4f 1\u4e2a 25.8*1\u5143 13 \u675c\u90a6\u7ebf 10cm 12\u6839 0.01*12\u5143 14 \u6392\u9488 \u76f4\u63d2 2\u6392 0.20*2\u5143 15 \u5355\u7247\u673a\u6d4b\u8bd5\u6d3b\u52a8\u5e95\u5ea7 40\u811a 1\u4e2a 3.03*1\u5143 \u603b\u8ba1 39.642\u5143","title":"\u5143\u5668\u4ef6\u8868\u548c\u6210\u672c\u6838\u7b97"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_24","text":"\u672c\u7cfb\u7edf\u7684\u8bbe\u8ba1\u6210\u672c\u662f39.642\u5143\uff0c\u4ef7\u683c\u8f83\u4f4e\uff0c\u5176\u4e2dLCD12864\u7684\u6210\u672c\u4e3a25.8\u5143\uff0c\u5360\u4e00\u534a\u4ee5\u4e0a\uff0c\u53ef\u4ee5\u4f7f\u7528\u8f83\u4e3a\u4fbf\u5b9c\u7684LCD1608\uff0c\u82e5\u518d\u8ffd\u6c42\u6027\u4ef7\u6bd4\uff0c\u53ef\u5c06LCD\u66f4\u6362\u4e3a\u6570\u7801\u7ba1\u663e\u793a\uff0c\u518d\u53bb\u6389\u4e00\u4e9b\u8c03\u8bd5\u7528\u7684\u6392\u9488\uff0c\u5e95\u5ea7\uff0c\u675c\u90a6\u7ebf\uff0c\u53ef\u5c06\u6210\u672c\u63a7\u5236\u518d15\u5143\u4ee5\u4e0b\u3002","title":"\u4f5c\u54c1\u6210\u672c\u6838\u7b97\uff1a"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_25","text":"\u76f8\u6bd4\u4e8e\u540c\u7c7b\u4ea7\u54c1\uff0c\u6bd4\u8d77\u771f\u6b63\u5546\u4e1a\u5316\u7684\u6210\u54c1\u663e\u7136\u6ca1\u6709\u4f18\u52bf\uff08\u90fd\u662f\u4f7f\u7528\u4e13\u7528\u82af\u7247\uff0c\u6210\u672c\u53ea\u6709\u51e0\u5143\uff09\uff0c\u4f46\u6dd8\u5b9d\u4e0a51\u5355\u7247\u673a\u7684\u6210\u54c1\u90fd\u572860\u5143\u4ee5\u4e0a\uff0c\u800c\u672c\u7cfb\u7edf\u7684\u6210\u672c\u4ec5\u4ec5\u670939.522\u5143\uff0c\u5982\u53bb\u9664\u4e0d\u5fc5\u8981\u7684\u5143\u4ef6\uff0c\u53ef\u5c06\u6210\u672c\u63a7\u5236\u518d15\u5143\u4ee5\u4e0b\uff0c\u56e0\u6b64\u5728\u4ef7\u683c\u4e0a\u66f4\u52a0\u5177\u6709\u5e02\u573a\u7ade\u4e89\u529b\uff1b\u540c\u65f6\uff0c\u672c\u7cfb\u7edf\u5177\u6709\u66f4\u591a\u7684\u529f\u80fd\u9009\u62e9\uff0c\u6bd4\u5982\u7ee7\u7535\u5668\u63a7\u5236\u5bb6\u7535\u7684\u4f5c\u7528\uff0c\u4f46\u5728\u6027\u80fd\u65b9\u9762\uff0c\u7531\u4e8e\u5b9a\u65f6\u5668\u4f7f\u7528\u5355\u7247\u673a\u5185\u90e8\u5b9a\u65f6\u5668\uff0c\u800c\u5e02\u573a\u4e0a\u7684\u5927\u591a\u7531DS12C887\u5b8c\u6210\u5b9a\u65f6\uff0c\u6240\u4ee5\u65f6\u95f4\u51c6\u786e\u5ea6\u5ea6\u4e0d\u5982\u5e02\u573a\u4e0a\u7684\u3002","title":"\u540c\u7c7b\u578b\u4ea7\u54c1\u6210\u672c\u6bd4\u8f83"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/","text":"\u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362 1. \u5b9e\u9a8c\u9879\u76ee\u540d\u79f0 \u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362 2.\u5b9e\u9a8c\u76ee\u7684 \u52a0\u6df1\u5bf9DFT\u6027\u8d28\u7684\u7406\u89e3\uff0c\u62d3\u5c55\u5b83\u4eec\u5728DSP\u4e2d\u7684\u4f7f\u7528\uff0c\u8981\u6c421\u4eba1\u7ec4\uff0c2\u5b66\u65f6\u3002 3. \u5b9e\u9a8c\u5185\u5bb9\u4e0e\u6b65\u9aa4 \u5b9e\u9a8c\u5185\u5bb9\uff1a 1. \u7531DFT\u5b9a\u4e49\u5f0f\uff1a X(k)=DFT[x(t)]=\\sum_{n=0}^{N-1}x(n)W_N^{kn} X(k)=DFT[x(t)]=\\sum_{n=0}^{N-1}x(n)W_N^{kn} \u5c06\u5176\u5199\u6210\u77e9\u9635\u65b9\u7a0b\u8868\u793a\u4e3a\uff1a X=W_Nx X=W_Nx \u5176\u4e2d\uff0c x=\\begin{bmatrix} x(0)\\\\ x(1)\\\\ \\vdots\\\\ x(N-1) \\end{bmatrix}\\ X=\\begin{bmatrix} X(0)\\\\ X(1)\\\\ \\vdots\\\\ X(N-1) \\end{bmatrix} x=\\begin{bmatrix} x(0)\\\\ x(1)\\\\ \\vdots\\\\ x(N-1) \\end{bmatrix}\\ X=\\begin{bmatrix} X(0)\\\\ X(1)\\\\ \\vdots\\\\ X(N-1) \\end{bmatrix} W_N=\\begin{bmatrix} 1 & 1 & 1 & \\dotsb & 1\\\\ 1 & W_N^1 & W_N^2 & \\dotsb & W_N^{N-1}\\\\ 1 & W_N^2 & W_N^4 & \\dotsb & W_N^{2(N-1)}\\\\ \\vdots & \\vdots & \\vdots & \\ddots & \\vdots\\\\ 1 & W_N^{(N-1)} & W_N^{2(N-1)} & \\dotsb & W_N^{(N-1)\\times(N-1)} \\end{bmatrix} W_N=\\begin{bmatrix} 1 & 1 & 1 & \\dotsb & 1\\\\ 1 & W_N^1 & W_N^2 & \\dotsb & W_N^{N-1}\\\\ 1 & W_N^2 & W_N^4 & \\dotsb & W_N^{2(N-1)}\\\\ \\vdots & \\vdots & \\vdots & \\ddots & \\vdots\\\\ 1 & W_N^{(N-1)} & W_N^{2(N-1)} & \\dotsb & W_N^{(N-1)\\times(N-1)} \\end{bmatrix} \u5229\u7528Matlab\u7684\u77e9\u9635\u8fd0\u7b97\u529f\u80fd\uff0c\u53ef\u7f16\u5199\u51fa\u8ba1\u7b97DFT\u7684\u51fd\u6570\u6587\u4ef6\u3002 function [ Xk ] = dft( xn,N ) %DFT Xk = dft(xn,N) %Xk = \u57280<=k<=N-1 \u95f4\u7684DFT\u7cfb\u6570\u6570\u7ec4 %xn = N\u70b9\u6709\u9650\u957f\u5ea6\u5e8f\u5217 %N = DFT\u7684\u957f\u5ea6 n = [0:1:N-1]; k = [0:1:N-1]; WN = exp(-j*2*pi/N); nk = n'*k; WNnk = WN.^nk; Xk = xn * WNnk; \u8bf7\u7f16\u5199\u8ba1\u7b97\u79bb\u6563\u5085\u91cc\u53f6\u53cd\u53d8\u6362\u7684\u51fd\u6570\u6587\u4ef6\u3002 \u5229\u7528DFT\u505a\u8fde\u7eed\u4fe1\u53f7\u7684\u9891\u8c31\u5206\u6790 DFT(\u5b9e\u9645\u4e2d\u7528FFT\u8ba1\u7b97)\u53ef\u7528\u6765\u5bf9\u8fde\u7eed\u4fe1\u53f7\u548c\u6570\u5b57\u4fe1\u53f7\u8fdb\u884c\u8c31\u5206\u6790\u3002\u5728\u5b9e\u9645\u5206\u6790\u8fc7\u7a0b\u4e2d\uff0c\u8981\u5bf9\u8fde\u7eed\u4fe1\u53f7\u91c7\u6837\u548c\u622a\u65ad\uff0c\u7531\u6b64\u53ef\u80fd\u5f15\u8d77\u5206\u6790\u8bef\u5dee\u3002 \u6df7\u53e0\u6548\u5e94 \u5bf9\u8fde\u7eed\u4fe1\u53f7\u8fdb\u884c\u9891\u8c31\u5206\u6790\u65f6\uff0c\u9996\u5148\u8981\u5bf9\u5176\u91c7\u6837\uff0c\u53d8\u6210\u65f6\u57df\u79bb\u6563\u4fe1\u53f7\u540e\u624d\u80fd\u7528DFT\uff08FFT\uff09\u8fdb\u884c\u8c31\u5206\u6790\u3002\u91c7\u6837\u901f\u7387fs\u5fc5\u987b\u6ee1\u8db3\u91c7\u6837\u5b9a\u7406\uff0c\u5426\u5219\u4f1a\u5728w= \\pi \\pi \uff08\u5bf9\u5e94\u6a21\u62df\u9891\u7387f=fs/2\uff09\u9644\u8fd1\u53d1\u751f\u9891\u8c31\u6df7\u53e0\u73b0\u8c61\u3002 \u622a\u65ad\u6548\u5e94 \u5904\u7406\u5b9e\u9645\u4fe1\u53f7\u5e8f\u5217x(n)\u65f6\uff0c\u4e00\u822c\u603b\u8981\u5c06\u5b83\u622a\u65ad\u4e3a\u4e00\u6709\u9650\u957f\u5e8f\u5217\uff0c\u957f\u4e3aN\u70b9\uff0c\u76f8\u5f53\u4e8e\u4e58\u4ee5\u4e00\u4e2a\u77e9\u5f62\u7a97\u5f62\u6210\u6709\u9650\u957f\u5e8f\u5217y(n)=x(n)w(n)\u3002\u77e9\u5f62\u7a97\u51fd\u6570\u5176\u9891\u8c31\u6709\u4e3b\u74e3\uff0c\u4e5f\u8bb8\u8bb8\u591a\u526f\u74e3\uff0c\u7a97\u53e3\u8d8a\u5927\uff0c\u4e3b\u74e3\u8d8a\u7a84\uff0c\u5f53\u7a97\u53e3\u8d8b\u4e8e\u65e0\u7a77\u5927\u65f6\uff0c\u5c31\u662f\u4e00\u4e2a\u51b2\u51fb\u51fd\u6570\u3002\u65f6\u57df\u7684\u4e58\u79ef\u5bf9\u5e94\u4e8e\u9891\u57df\u7684\u5377\u79ef\uff0c\u6240\u4ee5\uff0c\u52a0\u7a97\u540e\u7684\u9891\u57df\u5b9e\u9645\u662f\u539f\u4fe1\u53f7\u9891\u8c31\u4e0e\u77e9\u5f62\u7a97\u51fd\u6570\u9891\u8c31\u7684\u5377\u79ef\uff0c\u5377\u79ef\u7684\u7ed3\u679c\u4f7f\u9891\u8c31\u5ef6\u4f38\u5230\u4e86\u4e3b\u74e3\u4ee5\u5916\uff0c\u4e14\u4e00\u76f4\u5ef6\u65f6\u5230\u65e0\u7a77\u3002\u5f53\u7a97\u53e3\u65e0\u7a77\u5927\u65f6\uff0c\u4e0e\u51b2\u51fb\u51fd\u6570\u7684\u5377\u79ef\u624d\u662f\u5176\u672c\u8eab\uff0c\u8fd9\u65f6\u65e0\u7578\u53d8\u3002\u8fd9\u79cd\u5dee\u522b\u8868\u73b0\u5bf9\u9891\u8c31\u5206\u6790\u7684\u5f71\u54cd\u4e3b\u8981\u8868\u73b0\u5728\u5982\u4e0b\u4e24\u4e2a\u65b9\u9762\uff1a \u9891\u8c31\u6cc4\u9732:\u539f\u6765\u5e8f\u5217x(n)\u7684\u9891\u8c31\u662f\u79bb\u6563\u8c31\u7ebf\uff0c\u7ecf\u622a\u65ad\u540e\uff0c\u539f\u6765\u79bb\u6563\u8c31\u7ebf\u5411\u9644\u8fd1\u5c55\u5bbd\u6cc4\u9732\u3002\u663e\u7136\uff0c\u6cc4\u9732\u4f7f\u9891\u8c31\u53d8\u6a21\u7cca\uff0c\u4f7f\u8c31\u5206\u8fa8\u7387\u964d\u4f4e\u3002 \u8c31\u95f4\u5e72\u6270:\u4e3b\u8c31\u7ebf\u4e24\u8fb9\u53c8\u5f88\u591a\u65c1\u8c31\uff0c\u5f15\u8d77\u4e0d\u540c\u9891\u7387\u5206\u91cf\u95f4\u5e72\u6270\uff0c\u8fd9\u4f7f\u8c31\u5206\u6790\u4ea7\u751f\u8f83\u5927\u504f\u5dee\u3002\u7a0b\u5ea6\u4e0e\u7a97\u51fd\u6570\u5e45\u5ea6\u8c31\u4e3b\u74e3\u5bbd\u5ea6\u76f4\u63a5\u76f8\u5173\u3002 \u6805\u680f\u6548\u5e94 \u6211\u4eec\u77e5\u9053\uff0cN\u70b9DFT\u662f\u9891\u7387\u533a\u95f4[0,2\u03c0]\u4e0a\u5bf9\u65f6\u57df\u79bb\u6563\u4fe1\u53f7\u7684\u9891\u8c31\u8fdb\u884cN\u70b9\u7b49\u95f4\u9694\u91c7\u6837\uff0c\u800c\u91c7\u6837\u70b9\u4e4b\u95f4\u7684\u9891\u8c31\u51fd\u6570\u662f\u770b\u4e0d\u89c1\u7684\u3002 4. \u5b9e\u9a8c\u73af\u5883 MATLAB R2019b 5. \u5b9e\u9a8c\u8fc7\u7a0b\u4e0e\u5206\u6790\u7a0b\u5e8f\u6587\u672c 1. IDFT\u51fd\u6570 function [ xn ] = idft( Xk,N ) %xn = N\u70b9\u6709\u9650\u957f\u5ea6\u5e8f\u5217 %N = DFT\u7684\u957f\u5ea6 n = [0:1:N-1]; %n\u7684\u884c\u5411\u91cf k = [0:1:N-1]; %k\u7684\u884c\u5411\u91cf WN = exp(j*2*pi/N); %Wn\u56e0\u5b50 nk = n'*k; %\u4ea7\u751f\u4e00\u4e2a\u542bnk\u503c\u7684N\u4e58N\u7ef4\u77e9\u9635 WNnk = WN.^nk; %IDFT\u77e9\u9635 xn = 1/N*Xk * WNnk; 2. \u5229\u7528DFT\u505a\u8fde\u7eed\u4fe1\u53f7\u7684\u9891\u8c31\u5206\u6790 \u5df2\u77e5\u8fde\u7eed\u5468\u671f\u4fe1\u53f7 x(t)=cos(10\\pi t)+2sin(18\\pi t) x(t)=cos(10\\pi t)+2sin(18\\pi t) \u786e\u5b9a\u4fe1\u53f7\u7684\u57fa\u9891 \\Omega \\Omega \u548c\u57fa\u672c\u5468\u671f \u57fa\u9891\u4e3a \\Omega=2\\pi \\Omega=2\\pi rad/s\uff0c\u57fa\u672c\u5468\u671f\u4e3a 2\\pi/2\\pi = 1 2\\pi/2\\pi = 1 s \u5206\u6790\u957f\u5ea6\u5206\u522b\u53d6 0.5T_p,1.5T_p,2T_p 0.5T_p,1.5T_p,2T_p \u65f6\uff0c\u5229\u7528FFT\u8ba1\u7b97\u5176\u5e45\u5ea6\u8c31\uff1a\u5bf9\u6240\u5f97\u7ed3\u679c\u8fdb\u884c\u6bd4\u8f83\uff0c\u603b\u7ed3\u5e94\u5982\u4f55\u9009\u53d6\u5206\u6790\u957f\u5ea6\u3002 matlab f1 = 5;%cos\u51fd\u6570\u7684\u9891\u7387 f2 = 9;%sin\u51fd\u6570\u7684\u9891\u7387 dt=1/100; t=[0:dt:1]; x1=cos(2*pi*f1*t)+2*sin(2*pi*f2*t); figure(1) subplot(211); plot(t,x1);%\u6837\u672c\u4fe1\u53f7\u7684\u5468\u671f\u4e3a1 title('\u56fe1.1\uff1a\u5b9e\u9a8c\u6837\u672c\u4fe1\u53f7'); xlabel('\u65f6\u95f4\uff08\u5355\u4f4d\uff1a\u79d2\uff09'),ylabel('\u5e45\u5ea6'); subplot(212); xk1 = fft(x1); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 stem(2*t,abs(xk1)); title('1Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684FFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); fs=10*f2;%\u4ee5\u6700\u5927\u9891\u7387\u768410\u500d\u4f5c\u4e3a\u91c7\u6837\u9891\u7387 n0=0.5,n1=1.5,n2=2;%\u8bbe\u5b9a\u5206\u6790\u957f\u5ea6 figure(2); L = fs*n0; n = 0:L-1; x = cos(2*pi*n*f1/fs)+2*sin(2*pi*n*f2/fs); xk1 = fft(x); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 subplot(211); stem(n/fs,x); title('\u56fe1.2\uff1a0.5Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684\u91c7\u6837\u7ed3\u679c'),xlabel('\u65f6\u95f4\uff08\u5355\u4f4d\uff1a\u79d2\uff09'); subplot(212); stem(2*n/L,abs(xk1)); title('0.5Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684FFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); figure(3); L = fs*n1; n = 0:L-1; x = cos(2*pi*n*f1/fs)+2*sin(2*pi*n*f2/fs); xk1 = fft(x); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 subplot(211); stem(n/fs,x); title('\u56fe1.3\uff1a1.5Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684\u91c7\u6837\u7ed3\u679c'),xlabel('\u65f6\u95f4\uff08\u5355\u4f4d\uff1a\u79d2\uff09'); subplot(212); stem(2*n/L,abs(xk1)); title('1.5Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684FFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); figure(4); L = fs*n2; n = 0:L-1; x = cos(2*pi*n*f1/fs)+2*sin(2*pi*n*f2/fs); xk1 = fft(x); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 subplot(211); stem(n/fs,x); title('\u56fe1.4\uff1a2Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684\u91c7\u6837\u7ed3\u679c'),xlabel('\u65f6\u95f4\uff08\u5355\u4f4d\uff1a\u79d2\uff09'); subplot(212); stem(2*n/L,abs(xk1)); title('2Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684FFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); \u7ed3\u679c\u5982\u56fe1.1-1.4. \u5bf9\u6a21\u62df\u4fe1\u53f7 x_a(t)=2sin(4\\pi t)+5cos(8\\pi t) x_a(t)=2sin(4\\pi t)+5cos(8\\pi t) ,\u4ee5\u91c7\u6837T=0.01\u79d2\u91c7\u6837\uff0c\u5206\u522b\u9009\u53d6N=40\uff0cN=50\uff0cN=60\u5f97\u5230x(n),\u7528N\u70b9DFT\u5f97\u5230\u5bf9 x_a(t) x_a(t) \u5e45\u5ea6\u8c31\u7684\u4f30\u8ba1\u5e76\u6bd4\u8f83\u7ed3\u679c\u3002 dt=1/100; t=[0:dt:0.5];%\u6837\u672c\u4fe1\u53f7\u7684\u5468\u671f\u4e3a1 f1=2; f2=4; xt=2*sin(2*pi*f1*t)+5*cos(2*pi*f2*t); %\u753b\u5e03\u5206\u5272 figure(1); stem(t,xt) title('\u56fe2.1\uff1a\u91c7\u6837\u4fe1\u53f7\u4fe1\u53f7'); xlabel('\u65f6\u95f4\uff08\u5355\u4f4d\uff1a\u79d2\uff09'),ylabel('\u5e45\u5ea6'); %\u753b\u5e03\u5206\u5272 figure(2); subplot(311); xk1 = fft(xt,40); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 n=[0:1:40-1] L=length(n); stem(n/L,abs(xk1)); title('\u56fe2.2.1\uff1a40\u4e2a\u91c7\u6837\u70b9\u7684DFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); subplot(312); xk1 = fft(xt,50); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 n=[0:1:50-1] L=length(n); stem(n/L,abs(xk1)); title('\u56fe2.2.2\uff1a50\u4e2a\u91c7\u6837\u70b9\u7684DFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); subplot(313); xk1 = fft(xt,60); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 n=[0:1:60-1] L=length(n); stem(n/L,abs(xk1)); title('\u56fe2.2.3\uff1a60\u4e2a\u91c7\u6837\u70b9\u7684DFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); \u7ed3\u679c\u5982\u56fe2.1-2.2 6. \u5b9e\u9a8c\u7ed3\u679c\u603b\u7ed3 7. \u7ed3\u679c\u5206\u6790 1. IDFT\u51fd\u6570 \u53ea\u9700\u8981\u5728DFT\u51fd\u6570\u57fa\u7840\u4e0a\u628a\u5355\u4f4d\u590d\u6570\u6839\u6539\u4e3a wN=exp(1j*2*pi/N) \uff0c\u6700\u540e\u7ed3\u679c\u518d\u4e581/N\u3002 2. \u5229\u7528DFT\u505a\u8fde\u7eed\u4fe1\u53f7\u7684\u9891\u8c31\u5206\u6790 \u5f53\u622a\u53d6\u957f\u5ea6\u4e3a 1T_p 1T_p \u4e0e 2T_p 2T_p \u65f6\uff0c\u53ef\u5f97\u5230\u5355\u4e00\u8c31\u7ebf\u7684\u9891\u8c31\uff0c\u800c\u957f\u5ea6\u4e3a 0.5T_p 0.5T_p \u548c 1.5T_p 1.5T_p \u65f6\u51fa\u73b0\u4e86\u9891\u8c31\u6cc4\u6f0f\u73b0\u8c61\u3002\u56e0\u800c\u5f53\u5206\u6790\u957f\u5ea6\u4e0d\u4e3a\u6837\u672c\u5468\u671f\u7684\u6574\u6570\u500d\u65f6\uff0c\u5c06\u4f1a\u51fa\u73b0\u9891\u7387\u6cc4\u9732\u73b0\u8c61\uff0c\u65e0\u6cd5\u5f97\u5230\u5355\u4e00\u8c31\u7ebf\u7684\u9891\u8c31\u3002 \u53ea\u6709\u5f53\u622a\u65ad\u70b9\u6570\u4e3a\u6837\u672c\u4fe1\u53f7\u5b8c\u6574\u5468\u671f\u7684\u91c7\u6837\u70b9\u6570\u7684\u6574\u6570\u500d\u65f6\uff0c\u624d\u4e0d\u4f1a\u53d1\u751f\u9891\u7387\u6cc4\u9732\u73b0\u8c61\uff0c\u800c\u672c\u9898\u7684\u57fa\u672c\u5468\u671f\u4e3a T=0.5s T=0.5s \uff0c\u6240\u4ee5\u53ea\u6709\u5f53 N=50 N=50 \u65f6\uff0c\u6240\u5f97\u9891\u8c31\u56fe\u50cf\u4e3a\u5355\u4e00\u7684\u8c31\u7ebf\u3002 8.\u5fc3\u5f97\u4f53\u4f1a \u52a8\u624b\u5b9e\u73b0\u4e86IDFT\uff0c\u5bf9\u5176\u8bb0\u5fc6\u52a0\u6df1\u3002 \u4e86\u89e3\u5230\u4e86\u9891\u8c31\u6cc4\u9732\u73b0\u8c61\uff0c\u4ee5\u53ca\u907f\u514d\u5176\u53d1\u751f\u7684\u65b9\u6cd5\u3002","title":"\u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/#_1","text":"","title":"\u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/#1","text":"\u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362","title":"1. \u5b9e\u9a8c\u9879\u76ee\u540d\u79f0"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/#2","text":"\u52a0\u6df1\u5bf9DFT\u6027\u8d28\u7684\u7406\u89e3\uff0c\u62d3\u5c55\u5b83\u4eec\u5728DSP\u4e2d\u7684\u4f7f\u7528\uff0c\u8981\u6c421\u4eba1\u7ec4\uff0c2\u5b66\u65f6\u3002","title":"2.\u5b9e\u9a8c\u76ee\u7684"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/#3","text":"\u5b9e\u9a8c\u5185\u5bb9\uff1a 1. \u7531DFT\u5b9a\u4e49\u5f0f\uff1a X(k)=DFT[x(t)]=\\sum_{n=0}^{N-1}x(n)W_N^{kn} X(k)=DFT[x(t)]=\\sum_{n=0}^{N-1}x(n)W_N^{kn} \u5c06\u5176\u5199\u6210\u77e9\u9635\u65b9\u7a0b\u8868\u793a\u4e3a\uff1a X=W_Nx X=W_Nx \u5176\u4e2d\uff0c x=\\begin{bmatrix} x(0)\\\\ x(1)\\\\ \\vdots\\\\ x(N-1) \\end{bmatrix}\\ X=\\begin{bmatrix} X(0)\\\\ X(1)\\\\ \\vdots\\\\ X(N-1) \\end{bmatrix} x=\\begin{bmatrix} x(0)\\\\ x(1)\\\\ \\vdots\\\\ x(N-1) \\end{bmatrix}\\ X=\\begin{bmatrix} X(0)\\\\ X(1)\\\\ \\vdots\\\\ X(N-1) \\end{bmatrix} W_N=\\begin{bmatrix} 1 & 1 & 1 & \\dotsb & 1\\\\ 1 & W_N^1 & W_N^2 & \\dotsb & W_N^{N-1}\\\\ 1 & W_N^2 & W_N^4 & \\dotsb & W_N^{2(N-1)}\\\\ \\vdots & \\vdots & \\vdots & \\ddots & \\vdots\\\\ 1 & W_N^{(N-1)} & W_N^{2(N-1)} & \\dotsb & W_N^{(N-1)\\times(N-1)} \\end{bmatrix} W_N=\\begin{bmatrix} 1 & 1 & 1 & \\dotsb & 1\\\\ 1 & W_N^1 & W_N^2 & \\dotsb & W_N^{N-1}\\\\ 1 & W_N^2 & W_N^4 & \\dotsb & W_N^{2(N-1)}\\\\ \\vdots & \\vdots & \\vdots & \\ddots & \\vdots\\\\ 1 & W_N^{(N-1)} & W_N^{2(N-1)} & \\dotsb & W_N^{(N-1)\\times(N-1)} \\end{bmatrix} \u5229\u7528Matlab\u7684\u77e9\u9635\u8fd0\u7b97\u529f\u80fd\uff0c\u53ef\u7f16\u5199\u51fa\u8ba1\u7b97DFT\u7684\u51fd\u6570\u6587\u4ef6\u3002 function [ Xk ] = dft( xn,N ) %DFT Xk = dft(xn,N) %Xk = \u57280<=k<=N-1 \u95f4\u7684DFT\u7cfb\u6570\u6570\u7ec4 %xn = N\u70b9\u6709\u9650\u957f\u5ea6\u5e8f\u5217 %N = DFT\u7684\u957f\u5ea6 n = [0:1:N-1]; k = [0:1:N-1]; WN = exp(-j*2*pi/N); nk = n'*k; WNnk = WN.^nk; Xk = xn * WNnk; \u8bf7\u7f16\u5199\u8ba1\u7b97\u79bb\u6563\u5085\u91cc\u53f6\u53cd\u53d8\u6362\u7684\u51fd\u6570\u6587\u4ef6\u3002 \u5229\u7528DFT\u505a\u8fde\u7eed\u4fe1\u53f7\u7684\u9891\u8c31\u5206\u6790 DFT(\u5b9e\u9645\u4e2d\u7528FFT\u8ba1\u7b97)\u53ef\u7528\u6765\u5bf9\u8fde\u7eed\u4fe1\u53f7\u548c\u6570\u5b57\u4fe1\u53f7\u8fdb\u884c\u8c31\u5206\u6790\u3002\u5728\u5b9e\u9645\u5206\u6790\u8fc7\u7a0b\u4e2d\uff0c\u8981\u5bf9\u8fde\u7eed\u4fe1\u53f7\u91c7\u6837\u548c\u622a\u65ad\uff0c\u7531\u6b64\u53ef\u80fd\u5f15\u8d77\u5206\u6790\u8bef\u5dee\u3002 \u6df7\u53e0\u6548\u5e94 \u5bf9\u8fde\u7eed\u4fe1\u53f7\u8fdb\u884c\u9891\u8c31\u5206\u6790\u65f6\uff0c\u9996\u5148\u8981\u5bf9\u5176\u91c7\u6837\uff0c\u53d8\u6210\u65f6\u57df\u79bb\u6563\u4fe1\u53f7\u540e\u624d\u80fd\u7528DFT\uff08FFT\uff09\u8fdb\u884c\u8c31\u5206\u6790\u3002\u91c7\u6837\u901f\u7387fs\u5fc5\u987b\u6ee1\u8db3\u91c7\u6837\u5b9a\u7406\uff0c\u5426\u5219\u4f1a\u5728w= \\pi \\pi \uff08\u5bf9\u5e94\u6a21\u62df\u9891\u7387f=fs/2\uff09\u9644\u8fd1\u53d1\u751f\u9891\u8c31\u6df7\u53e0\u73b0\u8c61\u3002 \u622a\u65ad\u6548\u5e94 \u5904\u7406\u5b9e\u9645\u4fe1\u53f7\u5e8f\u5217x(n)\u65f6\uff0c\u4e00\u822c\u603b\u8981\u5c06\u5b83\u622a\u65ad\u4e3a\u4e00\u6709\u9650\u957f\u5e8f\u5217\uff0c\u957f\u4e3aN\u70b9\uff0c\u76f8\u5f53\u4e8e\u4e58\u4ee5\u4e00\u4e2a\u77e9\u5f62\u7a97\u5f62\u6210\u6709\u9650\u957f\u5e8f\u5217y(n)=x(n)w(n)\u3002\u77e9\u5f62\u7a97\u51fd\u6570\u5176\u9891\u8c31\u6709\u4e3b\u74e3\uff0c\u4e5f\u8bb8\u8bb8\u591a\u526f\u74e3\uff0c\u7a97\u53e3\u8d8a\u5927\uff0c\u4e3b\u74e3\u8d8a\u7a84\uff0c\u5f53\u7a97\u53e3\u8d8b\u4e8e\u65e0\u7a77\u5927\u65f6\uff0c\u5c31\u662f\u4e00\u4e2a\u51b2\u51fb\u51fd\u6570\u3002\u65f6\u57df\u7684\u4e58\u79ef\u5bf9\u5e94\u4e8e\u9891\u57df\u7684\u5377\u79ef\uff0c\u6240\u4ee5\uff0c\u52a0\u7a97\u540e\u7684\u9891\u57df\u5b9e\u9645\u662f\u539f\u4fe1\u53f7\u9891\u8c31\u4e0e\u77e9\u5f62\u7a97\u51fd\u6570\u9891\u8c31\u7684\u5377\u79ef\uff0c\u5377\u79ef\u7684\u7ed3\u679c\u4f7f\u9891\u8c31\u5ef6\u4f38\u5230\u4e86\u4e3b\u74e3\u4ee5\u5916\uff0c\u4e14\u4e00\u76f4\u5ef6\u65f6\u5230\u65e0\u7a77\u3002\u5f53\u7a97\u53e3\u65e0\u7a77\u5927\u65f6\uff0c\u4e0e\u51b2\u51fb\u51fd\u6570\u7684\u5377\u79ef\u624d\u662f\u5176\u672c\u8eab\uff0c\u8fd9\u65f6\u65e0\u7578\u53d8\u3002\u8fd9\u79cd\u5dee\u522b\u8868\u73b0\u5bf9\u9891\u8c31\u5206\u6790\u7684\u5f71\u54cd\u4e3b\u8981\u8868\u73b0\u5728\u5982\u4e0b\u4e24\u4e2a\u65b9\u9762\uff1a \u9891\u8c31\u6cc4\u9732:\u539f\u6765\u5e8f\u5217x(n)\u7684\u9891\u8c31\u662f\u79bb\u6563\u8c31\u7ebf\uff0c\u7ecf\u622a\u65ad\u540e\uff0c\u539f\u6765\u79bb\u6563\u8c31\u7ebf\u5411\u9644\u8fd1\u5c55\u5bbd\u6cc4\u9732\u3002\u663e\u7136\uff0c\u6cc4\u9732\u4f7f\u9891\u8c31\u53d8\u6a21\u7cca\uff0c\u4f7f\u8c31\u5206\u8fa8\u7387\u964d\u4f4e\u3002 \u8c31\u95f4\u5e72\u6270:\u4e3b\u8c31\u7ebf\u4e24\u8fb9\u53c8\u5f88\u591a\u65c1\u8c31\uff0c\u5f15\u8d77\u4e0d\u540c\u9891\u7387\u5206\u91cf\u95f4\u5e72\u6270\uff0c\u8fd9\u4f7f\u8c31\u5206\u6790\u4ea7\u751f\u8f83\u5927\u504f\u5dee\u3002\u7a0b\u5ea6\u4e0e\u7a97\u51fd\u6570\u5e45\u5ea6\u8c31\u4e3b\u74e3\u5bbd\u5ea6\u76f4\u63a5\u76f8\u5173\u3002 \u6805\u680f\u6548\u5e94 \u6211\u4eec\u77e5\u9053\uff0cN\u70b9DFT\u662f\u9891\u7387\u533a\u95f4[0,2\u03c0]\u4e0a\u5bf9\u65f6\u57df\u79bb\u6563\u4fe1\u53f7\u7684\u9891\u8c31\u8fdb\u884cN\u70b9\u7b49\u95f4\u9694\u91c7\u6837\uff0c\u800c\u91c7\u6837\u70b9\u4e4b\u95f4\u7684\u9891\u8c31\u51fd\u6570\u662f\u770b\u4e0d\u89c1\u7684\u3002","title":"3. \u5b9e\u9a8c\u5185\u5bb9\u4e0e\u6b65\u9aa4"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/#4","text":"MATLAB R2019b","title":"4. \u5b9e\u9a8c\u73af\u5883"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/#5","text":"","title":"5. \u5b9e\u9a8c\u8fc7\u7a0b\u4e0e\u5206\u6790\u7a0b\u5e8f\u6587\u672c"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/#1-idft","text":"function [ xn ] = idft( Xk,N ) %xn = N\u70b9\u6709\u9650\u957f\u5ea6\u5e8f\u5217 %N = DFT\u7684\u957f\u5ea6 n = [0:1:N-1]; %n\u7684\u884c\u5411\u91cf k = [0:1:N-1]; %k\u7684\u884c\u5411\u91cf WN = exp(j*2*pi/N); %Wn\u56e0\u5b50 nk = n'*k; %\u4ea7\u751f\u4e00\u4e2a\u542bnk\u503c\u7684N\u4e58N\u7ef4\u77e9\u9635 WNnk = WN.^nk; %IDFT\u77e9\u9635 xn = 1/N*Xk * WNnk;","title":"1. IDFT\u51fd\u6570"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/#2-dft","text":"\u5df2\u77e5\u8fde\u7eed\u5468\u671f\u4fe1\u53f7 x(t)=cos(10\\pi t)+2sin(18\\pi t) x(t)=cos(10\\pi t)+2sin(18\\pi t) \u786e\u5b9a\u4fe1\u53f7\u7684\u57fa\u9891 \\Omega \\Omega \u548c\u57fa\u672c\u5468\u671f \u57fa\u9891\u4e3a \\Omega=2\\pi \\Omega=2\\pi rad/s\uff0c\u57fa\u672c\u5468\u671f\u4e3a 2\\pi/2\\pi = 1 2\\pi/2\\pi = 1 s \u5206\u6790\u957f\u5ea6\u5206\u522b\u53d6 0.5T_p,1.5T_p,2T_p 0.5T_p,1.5T_p,2T_p \u65f6\uff0c\u5229\u7528FFT\u8ba1\u7b97\u5176\u5e45\u5ea6\u8c31\uff1a\u5bf9\u6240\u5f97\u7ed3\u679c\u8fdb\u884c\u6bd4\u8f83\uff0c\u603b\u7ed3\u5e94\u5982\u4f55\u9009\u53d6\u5206\u6790\u957f\u5ea6\u3002 matlab f1 = 5;%cos\u51fd\u6570\u7684\u9891\u7387 f2 = 9;%sin\u51fd\u6570\u7684\u9891\u7387 dt=1/100; t=[0:dt:1]; x1=cos(2*pi*f1*t)+2*sin(2*pi*f2*t); figure(1) subplot(211); plot(t,x1);%\u6837\u672c\u4fe1\u53f7\u7684\u5468\u671f\u4e3a1 title('\u56fe1.1\uff1a\u5b9e\u9a8c\u6837\u672c\u4fe1\u53f7'); xlabel('\u65f6\u95f4\uff08\u5355\u4f4d\uff1a\u79d2\uff09'),ylabel('\u5e45\u5ea6'); subplot(212); xk1 = fft(x1); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 stem(2*t,abs(xk1)); title('1Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684FFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); fs=10*f2;%\u4ee5\u6700\u5927\u9891\u7387\u768410\u500d\u4f5c\u4e3a\u91c7\u6837\u9891\u7387 n0=0.5,n1=1.5,n2=2;%\u8bbe\u5b9a\u5206\u6790\u957f\u5ea6 figure(2); L = fs*n0; n = 0:L-1; x = cos(2*pi*n*f1/fs)+2*sin(2*pi*n*f2/fs); xk1 = fft(x); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 subplot(211); stem(n/fs,x); title('\u56fe1.2\uff1a0.5Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684\u91c7\u6837\u7ed3\u679c'),xlabel('\u65f6\u95f4\uff08\u5355\u4f4d\uff1a\u79d2\uff09'); subplot(212); stem(2*n/L,abs(xk1)); title('0.5Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684FFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); figure(3); L = fs*n1; n = 0:L-1; x = cos(2*pi*n*f1/fs)+2*sin(2*pi*n*f2/fs); xk1 = fft(x); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 subplot(211); stem(n/fs,x); title('\u56fe1.3\uff1a1.5Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684\u91c7\u6837\u7ed3\u679c'),xlabel('\u65f6\u95f4\uff08\u5355\u4f4d\uff1a\u79d2\uff09'); subplot(212); stem(2*n/L,abs(xk1)); title('1.5Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684FFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); figure(4); L = fs*n2; n = 0:L-1; x = cos(2*pi*n*f1/fs)+2*sin(2*pi*n*f2/fs); xk1 = fft(x); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 subplot(211); stem(n/fs,x); title('\u56fe1.4\uff1a2Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684\u91c7\u6837\u7ed3\u679c'),xlabel('\u65f6\u95f4\uff08\u5355\u4f4d\uff1a\u79d2\uff09'); subplot(212); stem(2*n/L,abs(xk1)); title('2Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684FFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); \u7ed3\u679c\u5982\u56fe1.1-1.4. \u5bf9\u6a21\u62df\u4fe1\u53f7 x_a(t)=2sin(4\\pi t)+5cos(8\\pi t) x_a(t)=2sin(4\\pi t)+5cos(8\\pi t) ,\u4ee5\u91c7\u6837T=0.01\u79d2\u91c7\u6837\uff0c\u5206\u522b\u9009\u53d6N=40\uff0cN=50\uff0cN=60\u5f97\u5230x(n),\u7528N\u70b9DFT\u5f97\u5230\u5bf9 x_a(t) x_a(t) \u5e45\u5ea6\u8c31\u7684\u4f30\u8ba1\u5e76\u6bd4\u8f83\u7ed3\u679c\u3002 dt=1/100; t=[0:dt:0.5];%\u6837\u672c\u4fe1\u53f7\u7684\u5468\u671f\u4e3a1 f1=2; f2=4; xt=2*sin(2*pi*f1*t)+5*cos(2*pi*f2*t); %\u753b\u5e03\u5206\u5272 figure(1); stem(t,xt) title('\u56fe2.1\uff1a\u91c7\u6837\u4fe1\u53f7\u4fe1\u53f7'); xlabel('\u65f6\u95f4\uff08\u5355\u4f4d\uff1a\u79d2\uff09'),ylabel('\u5e45\u5ea6'); %\u753b\u5e03\u5206\u5272 figure(2); subplot(311); xk1 = fft(xt,40); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 n=[0:1:40-1] L=length(n); stem(n/L,abs(xk1)); title('\u56fe2.2.1\uff1a40\u4e2a\u91c7\u6837\u70b9\u7684DFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); subplot(312); xk1 = fft(xt,50); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 n=[0:1:50-1] L=length(n); stem(n/L,abs(xk1)); title('\u56fe2.2.2\uff1a50\u4e2a\u91c7\u6837\u70b9\u7684DFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); subplot(313); xk1 = fft(xt,60); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 n=[0:1:60-1] L=length(n); stem(n/L,abs(xk1)); title('\u56fe2.2.3\uff1a60\u4e2a\u91c7\u6837\u70b9\u7684DFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); \u7ed3\u679c\u5982\u56fe2.1-2.2","title":"2. \u5229\u7528DFT\u505a\u8fde\u7eed\u4fe1\u53f7\u7684\u9891\u8c31\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/#6","text":"","title":"6. \u5b9e\u9a8c\u7ed3\u679c\u603b\u7ed3"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/#7","text":"","title":"7. \u7ed3\u679c\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/#1-idft_1","text":"\u53ea\u9700\u8981\u5728DFT\u51fd\u6570\u57fa\u7840\u4e0a\u628a\u5355\u4f4d\u590d\u6570\u6839\u6539\u4e3a wN=exp(1j*2*pi/N) \uff0c\u6700\u540e\u7ed3\u679c\u518d\u4e581/N\u3002","title":"1. IDFT\u51fd\u6570"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/#2-dft_1","text":"\u5f53\u622a\u53d6\u957f\u5ea6\u4e3a 1T_p 1T_p \u4e0e 2T_p 2T_p \u65f6\uff0c\u53ef\u5f97\u5230\u5355\u4e00\u8c31\u7ebf\u7684\u9891\u8c31\uff0c\u800c\u957f\u5ea6\u4e3a 0.5T_p 0.5T_p \u548c 1.5T_p 1.5T_p \u65f6\u51fa\u73b0\u4e86\u9891\u8c31\u6cc4\u6f0f\u73b0\u8c61\u3002\u56e0\u800c\u5f53\u5206\u6790\u957f\u5ea6\u4e0d\u4e3a\u6837\u672c\u5468\u671f\u7684\u6574\u6570\u500d\u65f6\uff0c\u5c06\u4f1a\u51fa\u73b0\u9891\u7387\u6cc4\u9732\u73b0\u8c61\uff0c\u65e0\u6cd5\u5f97\u5230\u5355\u4e00\u8c31\u7ebf\u7684\u9891\u8c31\u3002 \u53ea\u6709\u5f53\u622a\u65ad\u70b9\u6570\u4e3a\u6837\u672c\u4fe1\u53f7\u5b8c\u6574\u5468\u671f\u7684\u91c7\u6837\u70b9\u6570\u7684\u6574\u6570\u500d\u65f6\uff0c\u624d\u4e0d\u4f1a\u53d1\u751f\u9891\u7387\u6cc4\u9732\u73b0\u8c61\uff0c\u800c\u672c\u9898\u7684\u57fa\u672c\u5468\u671f\u4e3a T=0.5s T=0.5s \uff0c\u6240\u4ee5\u53ea\u6709\u5f53 N=50 N=50 \u65f6\uff0c\u6240\u5f97\u9891\u8c31\u56fe\u50cf\u4e3a\u5355\u4e00\u7684\u8c31\u7ebf\u3002","title":"2. \u5229\u7528DFT\u505a\u8fde\u7eed\u4fe1\u53f7\u7684\u9891\u8c31\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/#8","text":"\u52a8\u624b\u5b9e\u73b0\u4e86IDFT\uff0c\u5bf9\u5176\u8bb0\u5fc6\u52a0\u6df1\u3002 \u4e86\u89e3\u5230\u4e86\u9891\u8c31\u6cc4\u9732\u73b0\u8c61\uff0c\u4ee5\u53ca\u907f\u514d\u5176\u53d1\u751f\u7684\u65b9\u6cd5\u3002","title":"8.\u5fc3\u5f97\u4f53\u4f1a"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/","text":"\u97f3\u9891\u9891\u8c31\u5206\u6790\u4eea\u8bbe\u8ba1\u4e0e\u5b9e\u73b0 1. \u5b9e\u9a8c\u9879\u76ee\u540d\u79f0 \u97f3\u9891\u9891\u8c31\u5206\u6790\u4eea\u8bbe\u8ba1\u4e0e\u5b9e\u73b0\u3002 2. \u5b9e\u9a8c\u76ee\u7684 \u6784\u5efa\u4ea4\u4e92\u754c\u9762\uff0c\u5177\u6709\u64ad\u653e\u58f0\u97f3\u6587\u4ef6\uff0c\u663e\u793a\u6ce2\u5f62\u4e0e\u9891\u8c31\uff0c\u5e76\u53ef\u6d4b\u91cf\u58f0\u97f3\u65f6\u57df\u53c2\u6570\u3002 3. \u5b9e\u9a8c\u5185\u5bb9\u4e0e\u6b65\u9aa4 \u5b9e\u9a8c\u5185\u5bb9\uff1a MATLAB\u662f\u4e00\u4e2a\u6570\u636e\u5206\u6790\u548c\u5904\u7406\u529f\u80fd\u5341\u5206\u5f3a\u5927\u7684\u5de5\u7a0b\u5b9e\u7528\u8f6f\u4ef6\uff0c\u5176\u6570\u636e\u91c7\u96c6\u5de5\u5177\u7bb1\u4e3a\u5b9e\u73b0\u6570\u636e\u7684\u8f93\u5165\u548c\u8f93\u51fa\u63d0\u4f9b\u4e86\u5341\u5206\u65b9\u4fbf\u7684\u51fd\u6570\u548c\u547d\u4ee4\u3002\u672c\u5b9e\u9a8c\u8981\u6c42\u57fa\u4e8e\u58f0\u5361\u4e0eMATLAB\u5b9e\u73b0\u97f3\u9891\u4fe1\u53f7\u9891\u8c31\u5206\u6790\u4eea\u7684\u8bbe\u8ba1\u539f\u7406\u4e0e\u5b9e\u73b0\uff0c\u529f\u80fd\u5305\u62ec\uff1a (1) \u97f3\u9891\u4fe1\u53f7\u8f93\u5165\uff0c\u4ece\u58f0\u5361\u8f93\u5165\u3001\u4eceWAV\u6587\u4ef6\u8f93\u5165\u3001\u4ece\u6807\u51c6\u4fe1\u53f7\u53d1\u751f\u5668\u8f93\u5165\u3002 (2) \u4fe1\u53f7\u6ce2\u5f62\u5206\u6790\uff0c\u5305\u62ec\u5e45\u503c\u3001\u9891\u7387\u3001\u5468\u671f\u3001\u76f8\u4f4d\u7684\u4f30\u8ba1\uff0c\u4ee5\u53ca\u7edf\u8ba1\u91cf\u5cf0\u503c\u3001\u5747\u503c\u3001\u5747\u65b9\u503c\u548c\u65b9\u5dee\u7684\u8ba1\u7b97\u3002 (3) \u4fe1\u53f7\u9891\u8c31\u5206\u6790\uff0c\u9891\u7387\u3001\u5468\u671f\u7684\u4f30\u8ba1\uff0c\u56fe\u5f62\u663e\u793a\u5e45\u503c\u8c31\u3001\u76f8\u4f4d\u8c31\u3001\u5b9e\u9891\u8c31\u3001\u865a\u9891\u8c31\u548c\u529f\u7387\u8c31\u7684\u66f2\u7ebf\u3002 \u9891\u7387\uff08\u5468\u671f\uff09\u68c0\u6d4b \u5bf9\u5468\u671f\u4fe1\u53f7\u6765\u8bf4\uff0c\u53ef\u4ee5\u7528\u65f6\u57df\u6ce2\u5f62\u5206\u6790\u6765\u786e\u5b9a\u4fe1\u53f7\u7684\u5468\u671f\uff0c\u4e5f\u5c31\u662f\u8ba1\u7b97\u76f8 \u90bb\u7684\u4e24\u4e2a\u4fe1\u53f7\u6ce2\u5cf0\u7684\u65f6\u95f4\u5dee\uff0c\u6216\u8fc7\u96f6\u70b9\u7684\u65f6\u95f4\u5dee\u3002\u8fd9\u91cc\u91c7\u7528\u8fc7\u96f6\u70b9( t_s t_s )\u7684\u65f6\u95f4\u5dee T T (\u5468\u671f)\u3002\u9891\u7387\u5373\u4e3a f = 1/T f = 1/T \uff0c\u7531\u4e8e\u80fd\u591f\u6c42\u5f97\u591a\u4e2a T T \u503c( t_i t_i \u6709\u591a\u4e2a)\uff0c\u6545\u91c7\u7528\u5b83\u4eec\u7684\u5e73\u5747\u503c\u4f5c\u4e3a\u5468\u671f\u7684\u4f30\u8ba1\u503c\u3002 \u5e45\u503c\u68c0\u6d4b \u5728\u4e00\u4e2a\u5468\u671f\u5185\uff0c\u6c42\u51fa\u4fe1\u53f7\u6700\u5927\u503c y_{max} y_{max} \u4e0e\u6700\u5c0f\u503c y_{min} y_{min} \u7684\u5dee\u7684\u4e00\u534a\uff0c\u5373 A = (y_{max}-y_{min})/2 A = (y_{max}-y_{min})/2 ,\u540c\u6837\uff0c\u4e5f\u4f1a\u6c42\u51fa\u591a\u4e2a A A \u503c\uff0c\u4f46\u7b2c\u4e00\u4e2a A A \u503c\u5bf9\u5e94\u7684 y_{max} y_{max} \u548c y_{min} y_{min} \u4e0d\u662f\u5728\u4e00\u4e2a\u5468\u671f\u5185\u641c\u7d22\u5f97\u5230\u7684\uff0c\u6545\u4ee5\u9664\u7b2c\u4e00\u4e2a\u4ee5\u5916\u7684 A A \u503c\u7684\u5e73\u5747\u503c\u4f5c\u4e3a\u5e45\u503c\u7684\u4f30\u8ba1\u503c\u3002 \u76f8\u4f4d\u68c0\u6d4b \u91c7\u7528\u8fc7\u96f6\u6cd5\uff0c\u5373\u901a\u8fc7\u5224\u65ad\u4e0e\u540c\u9891\u7387\u96f6\u76f8\u4f4d\u4fe1\u53f7\u8fc7\u96f6\u70b9\u65f6\u523b\uff0c\u8ba1\u7b97\u5176\u65f6\u95f4\u5dee\uff0c\u7136\u540e\u6362\u6210\u76f8\u5e94\u7684\u76f8\u4f4d\u5dee\u3002 \\phi = 2\\pi(1-t_i/T) \\phi = 2\\pi(1-t_i/T) \uff0c\u540c\u6837\uff0c\u4ee5 \\phi \\phi \u7684\u5e73\u5747\u503c\u4f5c\u4e3a\u76f8\u4f4d\u7684\u4f30\u8ba1\u503c\u3002 \u6570\u5b57\u4fe1\u53f7\u7edf\u8ba1\u91cf\u4f30\u8ba1 \u5cf0\u503cP\u7684\u4f30\u8ba1\uff1a\u5728\u6837\u672c\u6570\u636ex\u4e2d\u627e\u51fa\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\uff0c\u5176\u5dee\u503c\u4e3a\u53cc\u5cf0\u503c\uff0c\u53cc\u5cf0\u503c\u7684\u4e00\u534a\u5373\u4e3a\u5cf0\u503c\u3002 P = 0.5[max(y_i)-min(y_i)] P = 0.5[max(y_i)-min(y_i)] \u5747\u503c\u4f30\u8ba1\uff1a $$ E(y) = \\frac{1}{N}\\sum_{i=0}^N y_i $$ \u5f0f\u4e2d\uff0cN\u4e3a\u6837\u672c\u5bb9\u91cf\uff0c\u4e0b\u540c\u3002 \u5747\u65b9\u503c\u4f30\u8ba1 E(y^2) = \\frac{1}{N}\\sum_{i=0}^N y_i^2 E(y^2) = \\frac{1}{N}\\sum_{i=0}^N y_i^2 \u65b9\u5dee\u4f30\u8ba1 D(y) = \\frac{1}{N}\\sum_{i=0}^N [y_i-E(y)]^2 D(y) = \\frac{1}{N}\\sum_{i=0}^N [y_i-E(y)]^2 \u9891\u8c31\u5206\u6790\u539f\u7406 \u65f6\u57df\u5206\u6790\u53ea\u80fd\u53cd\u6620\u4fe1\u53f7\u7684\u5e45\u503c\u968f\u65f6\u95f4\u7684\u53d8\u5316\u60c5\u51b5\uff0c\u9664\u5355\u9891\u7387\u5206\u91cf\u7684\u7b80\u5355\u6ce2 \u5f62\u5916\uff0c\u5f88\u96be\u660e\u786e\u63d0\u793a\u4fe1\u53f7\u7684\u9891\u7387\u7ec4\u6210\u548c\u5404\u9891\u7387\u5206\u91cf\u5927\u5c0f\uff0c\u800c\u9891\u8c31\u5206\u6790\u80fd\u5f88\u597d\u7684\u89e3\u51b3\u6b64\u95ee\u9898\u3002 DFT\u4e0eFFT \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u65f6\u57df\u4fe1\u53f7 y y \uff0c\u53ef\u4ee5\u901a\u8fc7 Fourier \u53d8\u6362\u5f97\u5230\u9891\u57df\u4fe1\u606f Y Y \u3002 \u91c7\u6837\u4fe1\u53f7\u7684\u9891\u8c31\u662f\u4e00\u4e2a\u8fde\u7eed\u7684\u9891\u8c31\uff0c\u4e0d\u53ef\u80fd\u8ba1\u7b97\u51fa\u6240\u6709\u7684\u70b9\u7684\u503c\uff0c\u6545\u91c7\u7528\u79bb\u6563 Fourier \u53d8\u6362(DFT)\u3002\u4f46\u8ba1\u7b97\u6548\u7387\u5f88\u4f4e\uff0c\u56e0\u4e3a\u6709\u5927\u91cf\u7684\u6307\u6570(\u7b49\u4ef7\u4e8e\u4e09\u89d2\u51fd\u6570)\u8fd0\u7b97\uff0c\u6545\u5b9e\u9645\u4e2d\u591a\u91c7\u7528\u5feb\u901f Fourier \u53d8\u6362(FFT)\u3002\u5176\u539f\u7406\u5373\u662f\u5c06\u91cd\u590d\u7684\u4e09\u89d2\u51fd\u6570\u7b97\u8ba1\u7684\u4e2d\u95f4\u7ed3\u679c\u4fdd\u5b58\u8d77\u6765\uff0c\u4ee5\u51cf\u5c11\u91cd\u590d\u4e09\u89d2\u51fd\u6570\u8ba1\u7b97\u5e26\u6765\u7684\u65f6\u95f4\u6d6a\u8d39\u3002\u7531\u4e8e\u4e09\u89d2\u51fd\u6570\u8ba1\u7b97\u7684\u91cd\u590d\u91cf\u76f8\u5f53\u5927\uff0c\u6545FFT\u80fd\u6781\u5927\u5730\u63d0\u9ad8\u8fd0\u7b97\u6548\u7387\u3002 \u9891\u7387\u3001\u5468\u671f\u7684\u4f30\u8ba1 \u5bf9\u4e8e Y(k\\triangle f) Y(k\\triangle f) \uff0c\u5982\u679c\u5f53 \\triangle f = \\tilde{f} \\triangle f = \\tilde{f} \u65f6\uff0c Y(k\\triangle f) Y(k\\triangle f) \u53d6\u6700\u5927\u503c\uff0c\u5219 \\tilde{f} \\tilde{f} \u4e3a\u9891\u7387\u7684\u4f30\u8ba1\u503c\uff0c\u7531\u4e8e\u91c7\u6837\u95f4\u9694\u7684\u8bef\u5dee\uff0c \\tilde{f} \\tilde{f} \u4e5f\u5b58\u5728\u8bef\u5dee\uff0c\u5176\u8bef\u5dee\u6700\u5927\u4e3a \\triangle f/2 \\triangle f/2 \u3002 \u5468\u671f T=1/f T=1/f \u3002 \u4ece\u539f\u7406\u4e0a\u53ef\u4ee5\u770b\u51fa\uff0c\u5982\u679c\u5728\u6807\u51c6\u4fe1\u53f7\u4e2d\u6df7\u6709\u566a\u58f0\uff0c\u7528\u4e0a\u8ff0\u65b9\u6cd5\u4ecd\u80fd\u591f\u7cbe\u786e\u5730\u4f30\u8ba1\u51fa\u539f\u6807\u51c6\u4fe1\u53f7\u7684\u9891\u7387\u548c\u5468\u671f\u3002 \u9891\u8c31\u56fe \u4e3a\u4e86\u76f4\u89c2\u5730\u8868\u793a\u4fe1\u53f7\u7684\u9891\u7387\u7279\u6027\uff0c\u5de5\u7a0b\u4e0a\u5e38\u5e38\u5c06Fourier\u53d8\u6362\u7684\u7ed3\u679c\u7528\u56fe\u5f62\u7684\u65b9\u5f0f\u8868\u793a\uff0c\u5373\u9891\u8c31\u56fe\u3002 \u4ee5\u9891\u7387 f f \u4e3a\u6a2a\u5750\u6807\uff0c |Y(f)| |Y(f)| \u4e3a\u7eb5\u5750\u6807\uff0c\u53ef\u4ee5\u5f97\u5230\u5e45\u503c\u8c31\uff1b \u4ee5\u9891\u7387 f f \u4e3a\u6a2a\u5750\u6807\uff0c arg Y(f) arg Y(f) \u4e3a\u7eb5\u5750\u6807\uff0c\u53ef\u4ee5\u5f97\u5230\u76f8\u4f4d\u8c31\uff1b \u4ee5\u9891\u7387 f f \u4e3a\u6a2a\u5750\u6807\uff0c Re Y(f) Re Y(f) \u4e3a\u7eb5\u5750\u6807\uff0c\u53ef\u4ee5\u5f97\u5230\u5b9e\u9891\u8c31\uff1b \u4ee5\u9891\u7387 f f \u4e3a\u6a2a\u5750\u6807\uff0c Im Y(f) Im Y(f) \u4e3a\u7eb5\u5750\u6807\uff0c\u53ef\u4ee5\u5f97\u5230\u865a\u9891\u8c31\u3002 \u6839\u636e\u91c7\u6837\u5b9a\u7406\uff0c\u53ea\u6709\u9891\u7387\u4e0d\u8d85\u8fc7 F_s/2 F_s/2 \u7684\u4fe1\u53f7\u624d\u80fd\u88ab\u6b63\u786e\u91c7\u96c6\uff0c\u5373 Fourier \u53d8\u6362\u7684\u7ed3\u679c\u4e2d\u9891\u7387\u5927\u4e8e F_s/2 F_s/2 \u7684\u90e8\u5206\u662f\u4e0d\u6b63\u786e\u7684\u90e8\u5206\uff0c\u6545\u4e0d\u5728\u9891\u8c31\u56fe\u4e2d\u663e\u793a\u3002\u5373\u6a2a\u5750\u6807 f \\in [0 ,F_s/2] f \\in [0 ,F_s/2] \u3002 \u6a21\u5757\u5212\u5206 \u6a21\u5757\u5316\u5c31\u662f\u628a\u7a0b\u5e8f\u5212\u5206\u6210\u72ec\u7acb\u547d\u540d\u4e14\u53ef\u72ec\u7acb\u8bbf\u95ee\u7684\u6a21\u5757\uff0c\u6bcf\u4e2a\u6a21\u5757\u5b8c\u6210\u4e00\u4e2a\u5b50\u529f\u80fd\uff0c\u628a\u8fd9\u4e9b\u6a21\u5757\u96c6\u6210\u8d77\u6765\u6784\u6210\u4e00\u4e2a\u6574\u4f53\uff0c\u53ef\u4ee5\u5b8c\u6210\u6307\u5b9a\u7684\u529f\u80fd\u6ee1\u8db3\u7528\u6237\u9700\u6c42\u3002\u6839\u636e\u4eba\u7c7b\u89e3\u51b3\u4e00\u822c\u95ee\u9898\u7684\u7ecf\u9a8c\uff0c\u5982\u679c\u4e00\u4e2a\u95ee\u9898\u7531\u4e24\u4e2a\u95ee\u9898\u7ec4\u5408\u800c\u6210\uff0c\u90a3\u4e48\u5b83\u7684\u590d\u6742\u7a0b\u5ea6\u5927\u4e8e\u5206\u522b\u8003\u8651\u6bcf\u4e2a\u95ee\u9898\u65f6\u7684\u590d\u6742\u7a0b\u5ea6\u4e4b\u548c\uff0c\u4e5f\u5c31\u662f\u8bf4\u628a\u590d\u6742\u7684\u95ee\u9898\u5206\u89e3\u6210\u8bb8\u591a\u5bb9\u6613\u89e3\u51b3\u7684\u5c0f\u95ee\u9898\uff0c\u539f\u6765\u7684\u95ee\u9898\u4e5f\u5c31\u5bb9\u6613\u89e3\u51b3\u4e86\u3002\u8fd9\u5c31\u662f\u6a21\u5757\u5316\u7684\u6839\u636e\u3002 \u5728\u6a21\u5757\u5212\u5206\u65f6\u5e94\u9075\u5faa\u5982\u4e0b\u89c4\u5219\uff1a\u6539\u8fdb\u8f6f\u4ef6\u7ed3\u6784\u63d0\u9ad8\u6a21\u5757\u72ec\u7acb\u6027\uff1b\u6a21\u5757\u89c4\u6a21\u5e94\u8be5\u9002\u4e2d\uff1b\u6df1\u5ea6\u3001\u5bbd\u5ea6\u3001\u6247\u51fa\u548c\u6247\u5165\u90fd\u5e94\u9002\u5f53\uff1b\u6a21\u5757\u7684\u4f5c\u7528\u57df\u5e94\u8be5\u5728\u63a7\u5236\u57df\u4e4b\u5185\uff1b\u529b\u4e89\u964d\u4f4e\u6a21\u5757\u63a5\u53e3\u7684\u590d\u6742\u7a0b\u5ea6\uff1b\u8bbe\u8ba1\u5355\u5165\u53e3\u5355\u51fa\u53e3\u7684\u6a21\u5757\uff1b\u6a21\u5757\u529f\u80fd\u5e94\u8be5\u53ef\u4ee5\u9884\u6d4b\u3002 4. \u5b9e\u9a8c\u73af\u5883 MATLAB R2019b 5. \u5b9e\u9a8c\u8fc7\u7a0b\u4e0e\u5206\u6790\u7a0b\u5e8f\u6587\u672c \u97f3\u9891\u4fe1\u53f7\u8f93\u5165 \u58f0\u5361\u8f93\u5165 function button_recording_Callback(hObject, eventdata, handles)%\u5f00\u59cb\u5f55\u97f3\u6309\u94ae if (get(handles.radio_audio,'Value')==1)%\u5f53\u9009\u62e9\u58f0\u5361\u65f6\uff0c\u624d\u80fd\u8fdb\u884c\u76f8\u5e94\u64cd\u4f5c\uff0c\u5426\u5219\u63d0\u793a\u9519\u8bef\u4fe1\u606f if(isempty(get(handles.input_fs_fre,'String'))==0)%\u5224\u65ad\u8bbe\u5b9a\u7684\u91c7\u6837\u9891\u7387\u662f\u5426\u4e3a\u7a7a recordtime=str2double(get(handles.recording_time,'String'));%\u8bfb\u53d6\u5f55\u97f3\u65f6\u95f4\u6570\u636e if(recordtime>0) handles.fs=str2double(get(handles.input_fs_fre,'String'));%\u83b7\u53d6\u8bbe\u5b9a\u7684\u91c7\u6837\u9891\u7387\uff0c\u8f6c\u4e3a\u6570\u5b57\u683c\u5f0f sound_length=round(recordtime*handles.fs);%\u5f55\u97f3\u70b9\u6570 record=audiorecorder(handles.fs,24,1);%\u4f9d\u636e\u91c7\u6837\u9891\u7387\u521b\u5efa\u5f55\u97f3\u5e8f\u5217\uff0c\u4f4d\u6570\u4e3a24\uff0c\u5355\u58f0\u9053 recordblocking(record,recordtime);%\u8f93\u5165\u5f55\u97f3\u5e8f\u5217\uff0c\u957f\u5ea6\u4fe1\u606f=\u65f6\u95f4 msgbox('Recording complete','Tip'); handles.sound=getaudiodata(record);%\u521b\u5efa\u83b7\u53d6\u5f55\u97f3\u6570\u636e\u7684\u6570\u7ec4 n=0:1:sound_length-1; time=n/handles.fs;%\u521b\u5efa\u663e\u793a\u7528\u7684\u65f6\u95f4\u5e8f\u5217 plot(handles.axes_analysis,time,handles.sound);%\u5728\u5206\u6790\u5bf9\u8c61\u533a\u57df\u6253\u5370\u51fa\u91c7\u96c6\u5230\u7684\u4fe1\u53f7\u7ed3\u679c title('Waveform of the Acquisition Signal'); set(handles.input_fs_num,'String',num2str(sound_length));%\u5728\u91c7\u6837\u70b9\u6570\u91cf\u7684\u6846\u5185\u663e\u793a\u5f53\u524d\u91c7\u6837\u9891\u7387\u4e0b\u5bf9\u6837\u672c\u4fe1\u53f7\u7684\u91c7\u6837\u70b9\u6570 handles.complete=1;%\u8868\u660e\u4e3a\u58f0\u5361\u91c7\u96c6\u5b8c\u6210 guidata(handles.button_recording,handles);%\u50a8\u5b58handles\u7ed3\u6784\u4f53\uff0c\u50a8\u5b58sound\u4fe1\u53f7,fs\u6570\u503c else errordlg('No recording time set','Enter error');%\u63d0\u793a\u672a\u8bbe\u5b9a\u5f55\u97f3\u65f6\u95f4 end else errordlg('Sample frequency not set','Enter error');%\u63d0\u793a\u672a\u8bbe\u5b9a\u91c7\u6837\u9891\u7387 end else errordlg('Sound card button not enabled','Choose error');%\u63d0\u793a\u672a\u9009\u62e9\u58f0\u5361 end end \u7ed3\u679c\u5982\u56fe1.1 WAV\u6587\u4ef6\u8f93\u5165 function choice_files_Callback(hObject, eventdata, handles)%\u624b\u52a8\u9009\u62e9\u6587\u4ef6\u6309\u94ae [filename, pathname] = uigetfile('*', '\u8bfb\u53d6\u97f3\u9891\u6587\u4ef6') if([pathname,filename]~=0) set(handles.filename,'String',[pathname,filename]); end end function button_open_file_Callback(hObject, eventdata, handles)%\u6253\u5f00\u6587\u4ef6\u6309\u94ae if (get(handles.radio_wav,'Value')==1)%\u5f53\u9009\u62e9\u6587\u4ef6\u8bfb\u53d6\u65f6\uff0c\u624d\u80fd\u8fdb\u884c\u76f8\u5e94\u64cd\u4f5c\uff0c\u5426\u5219\u63d0\u793a\u9519\u8bef\u4fe1\u606f if((isempty(get(handles.filename,'String'))==0))%\u5224\u65ad\u6587\u4ef6\u540d\u8f93\u5165\u662f\u5426\u4e3a\u7a7a [y,Fs] =audioread(get(handles.filename,'String'));%\u83b7\u53d6\u6240\u9009\u6587\u4ef6\u7684\u58f0\u97f3\u4fe1\u53f7\uff0c\u5f97\u5230\u4fe1\u53f7\u77e9\u9635\u548c\u4fe1\u53f7\u9891\u7387 [leng,channel]=size(y);%\u5bf9y\u8fdb\u884c\u5217\u6570\u5224\u65ad\uff0c\u6c42\u5f97\u58f0\u9053\u6570\u76ee,\u4ee5\u53ca\u6240\u5f97\u5230\u7684\u6570\u636e\u70b9\u7684\u6570\u76ee set(handles.input_fs_fre,'String',num2str(Fs)); set(handles.input_fs_num,'String',num2str(leng));%\u8bbe\u7f6e\u91c7\u6837\u9891\u7387\u548c\u70b9\u6570 switch (channel) case 1%\u5355\u58f0\u9053 set(handles.sound_channel,'Value',1); set(handles.sound_channel,'Enable','off'); msgbox('\u8f93\u5165\u7684\u662f\u5355\u58f0\u9053\u6587\u4ef6','Tip'); handles.fs=Fs; handles.sound=y(:,channel);%\u77e9\u9635\u7ef4\u5ea6\u4e00\u81f4\uff0c\u5747\u4e3a\u591a\u884c\u5355\u5217 guidata(handles.button_open_file,handles);%\u50a8\u5b58sound\u4fe1\u606f time=0:1/handles.fs:(leng-1)/handles.fs; plot(handles.axes_analysis,time,handles.sound);%\u5728\u5206\u6790\u5bf9\u8c61\u533a\u57df\u6253\u5370\u51fa\u91c7\u96c6\u5230\u7684\u4fe1\u53f7\u7ed3\u679c title('\u97f3\u9891\u4fe1\u53f7\u7684\u6ce2\u5f62'); otherwise set(handles.sound_channel,'Value',2); msgbox('\u58f0\u9053\u6570\u76ee\u8d85\u8fc7\u4e00\u4e2a\uff0c\u8bf7\u9009\u62e9\u6240\u9009\u53d6\u7684\u58f0\u9053\uff0c\u9ed8\u8ba4\u9009\u53d6\u5de6\u58f0\u9053','Tip'); handles.fs=Fs; handles.sound=y(:,:); guidata(handles.button_open_file,handles); set(handles.filename,'Enable','off'); set(handles.choice_files,'Enable','off'); set(handles.button_open_file,'Enable','off'); end else errordlg('\u672a\u8bbe\u7f6e\u6587\u4ef6\u76ee\u5f55','Enter error');%\u63d0\u793a\u672a\u8bbe\u7f6e\u6587\u4ef6\u76ee\u5f55 end else errordlg('\u672a\u542f\u7528\u6587\u4ef6\u8bfb\u53d6\u6309\u94ae','Choose error');%\u63d0\u793a\u672a\u9009\u62e9\u6587\u4ef6\u8bfb\u53d6 end end function sound_channel_Callback(hObject, eventdata, handles) choice_channel=get(handles.sound_channel,'Value'); if(choice_channel>1) choice_channel=choice_channel-1; end handles.sound=handles.sound(:,choice_channel); leng=length(handles.sound); guidata(handles.button_open_file,handles);%\u50a8\u5b58sound\u4fe1\u606f time=0:1/handles.fs:(leng-1)/handles.fs; plot(handles.axes_analysis,time,handles.sound);%\u5728\u5206\u6790\u5bf9\u8c61\u533a\u57df\u6253\u5370\u51fa\u91c7\u96c6\u5230\u7684\u4fe1\u53f7\u7ed3\u679c title('\u97f3\u9891\u4fe1\u53f7\u7684\u6ce2\u5f62'); set(handles.filename,'Enable','on'); set(handles.choice_files,'Enable','on'); set(handles.button_open_file,'Enable','on'); end function sound_channel_CreateFcn(hObject, eventdata, handles) if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor')) set(hObject,'BackgroundColor','white'); end end \u7ed3\u679c\u5982\u56fe1.2 \u4fe1\u53f7\u53d1\u751f\u5668\u8f93\u5165 function button_signal_Callback(hObject, eventdata, handles) %\u751f\u6210\u6ce2\u5f62\u6309\u94ae if ((get(handles.radio_signal,'Value')+get(handles.check_mixing,'Value'))==1) if(isempty(get(handles.input_fs_fre,'String'))==0)%\u5224\u65ad\u8bbe\u5b9a\u7684\u91c7\u6837\u9891\u7387\u662f\u5426\u4e3a\u7a7a if((isempty(get(handles.input_am,'String'))==0)&&(isempty(get(handles.input_vlotage,'String'))==0)&&(isempty(get(handles.input_phase,'String'))==0)) handles.fs=str2double(get(handles.input_fs_fre,'String'));%\u83b7\u53d6\u8bbe\u5b9a\u7684\u91c7\u6837\u9891\u7387\uff0c\u8f6c\u4e3a\u6570\u5b57\u683c\u5f0f signal_soundtype=get(handles.signal_choice,'Value');%\u83b7\u53d6\u4fe1\u53f7\u53d1\u751f\u5668\u533a\u57df\u7684\u6570\u636e signal_fre=str2double(get(handles.input_am,'String'));%\u83b7\u53d6\u4fe1\u53f7\u53d1\u751f\u5668\u7684\u4e09\u4e2a\u6d6e\u70b9\u6570\u6570\u636e\uff0c\u7528\u4e8e\u4ea7\u751f\u4fe1\u53f7\u4f7f\u7528 signal_vlotage=str2double(get(handles.input_vlotage,'String')); signal_phase=str2double(get(handles.input_phase,'String'))/180*pi;%\u8f6c\u6362\u4e3api if (get(handles.radio_signal,'Value')==1)%\u5982\u679c\u4e0d\u9009\u62e9\u6df7\u53e0\uff0c\u6309\u7167\u9891\u7387\u8fdb\u884c\u91c7\u6837\u64cd\u4f5c signal_time=str2double(get(handles.signal_nmix_time,'String'));%\u83b7\u53d6\u975e\u6df7\u53e0\u60c5\u51b5\u4e0b\u751f\u6210\u4fe1\u53f7\u7684\u65f6\u95f4 if(signal_time==0) errordlg('\u975e\u6df7\u53e0\u60c5\u51b5\u4e0b\u9700\u8bbe\u7f6e\u53d1\u751f\u5668\u65f6\u95f4','error'); return; end number=round(handles.fs*signal_time); t=(0:1.0/handles.fs:(number-1)/handles.fs);%\u91c7\u6837\u65f6\u95f4\u5e8f\u5217 else%\u5982\u679c\u4ea7\u751f\u6df7\u53e0\uff0c\u5219\u8bfb\u53d6\u5df2\u7ecf\u6709\u7684\u6570\u636e\u7684\u91c7\u6837\u70b9\u6570 number=str2double(get(handles.input_fs_num,'String'));%\u83b7\u53d6\u91c7\u6837\u70b9\u6570 t=(0:1.0/handles.fs:(number-1)/handles.fs);%\u91c7\u6837\u65f6\u95f4\u5e8f\u5217 end%\u521b\u5efa\u65f6\u95f4\u5e8f\u5217 switch signal_soundtype%\u4e0d\u9700\u8981\u52a0\u5165break case 1%\u6807\u51c6\u6b63\u5f26\u6ce2 y=signal_vlotage*sin(2*pi*t*signal_fre+signal_phase); case 2%\u65b9\u6ce2 y=signal_vlotage*sign(sin(2*pi*t*signal_fre+signal_phase)); case 3%\u4e09\u89d2\u6ce2 y=signal_vlotage*sawtooth(2*pi*t*signal_fre+signal_phase,0.5); case 4%\u952f\u9f7f\u6ce2 y=signal_vlotage*sawtooth(2*pi*t*signal_fre+signal_phase); case 5%\u767d\u566a\u58f0 y=signal_vlotage*sin(2*rand(size(t))-1); otherwise%\u4e0d\u6ee1\u8db3\u5219\u62a5\u9519 errordlg('\u6ce2\u5f62\u7c7b\u578b\u9009\u62e9\u51fa\u9519','Choose error'); end if (get(handles.radio_signal,'Value')==1)%\u5982\u679c\u6ca1\u6709\u9009\u62e9\u6df7\u53e0\u6309\u94ae\uff0c\u5219\u4e0d\u4e0e\u53e6\u5916\u4e24\u4e2a\u4fe1\u53f7\u76f8\u53e0\u52a0 handles.sound=y'; else%sound\u4e0ey\u957f\u5ea6\u76f8\u540c\uff0c\u4f46\u77e9\u9635\u7ef4\u5ea6\u4e0d\u540c size(y'); handles.sound=handles.sound+y'; size(handles.sound); end n=0:1:number-1; time=n/handles.fs;%\u521b\u5efa\u663e\u793a\u7528\u7684\u65f6\u95f4\u5e8f\u5217 plot(handles.axes_analysis,time,handles.sound);%\u5728\u5206\u6790\u5bf9\u8c61\u533a\u57df\u6253\u5370\u51fa\u91c7\u96c6\u5230\u7684\u4fe1\u53f7\u7ed3\u679c title('\u91c7\u96c6\u4fe1\u53f7\u7684\u6ce2\u5f62'); set(handles.input_fs_num,'String',num2str(number));%\u5728\u91c7\u6837\u70b9\u6570\u91cf\u7684\u6846\u5185\u663e\u793a\u5f53\u524d\u91c7\u6837\u9891\u7387\u4e0b\u5bf9\u6837\u672c\u4fe1\u53f7\u7684\u91c7\u6837\u70b9\u6570 guidata(handles.button_signal,handles);%\u50a8\u5b58\u6570\u636e else errordlg('\u672a\u8bbe\u5b9a\u53d1\u751f\u5668\u914d\u7f6e','Enter error');%\u63d0\u793a\u672a\u8bbe\u5b9a\u53d1\u751f\u5668\u914d\u7f6e\u4fe1\u606f end else errordlg('\u672a\u8bbe\u5b9a\u91c7\u6837\u9891\u7387','Enter error');%\u63d0\u793a\u672a\u8bbe\u5b9a\u91c7\u6837\u9891\u7387 end else errordlg('\u5fc5\u987b\u9009\u62e9\u4fe1\u53f7\u53d1\u751f\u5668\u548c\u6df7\u53e0\u6309\u94ae\u4e4b\u4e2d\u7684\u4e00\u4e2a','Choose error'); end end \u7ed3\u679c\u5982\u56fe1.3.1-1.3.4\uff0c\u5176\u4e2d\u59821.3.4\u4e3a\u5e45\u503c\u4e3a1\uff0c\u9891\u7387\u5206\u522b\u4e3a1Hz\u548c2Hz\u6b63\u5f26\u7684\u6df7\u53e0 \u65f6\u57df\u5206\u6790 function button_time_Callback(hObject, eventdata, handles)%\u65f6\u57df\u5206\u6790\u6309\u94ae n=1; ymax=0;ymin=0; i=3;%\u521d\u59cb\u5316\u76f8\u5e94\u53d8\u91cf N=length(handles.sound);%\u83b7\u53d6\u58f0\u97f3\u4fe1\u53f7\u7684\u957f\u5ea6 ti=0; while(1) if((handles.sound(i-1)<0)&&(handles.sound(i-2)<0)&&(handles.sound(i)>=0)&&(handles.sound(i+1)>0)) if(handles.sound(i)>0) ti(n)=i/handles.fs; else ti(n)=(i-handles.sound(i)/(handles.sound(i)-handles.sound(i-1)))/handles.fs; end A(n)=(ymax-ymin)/2; ymax=0;ymin=0; n=n+1; else if(ymax<handles.sound(i)) ymax=handles.sound(i); end if(ymin>handles.sound(i)) ymin=handles.sound(i); end end i=i+1; if(i>N-1) break; end end len_ti=length(ti); if(len_ti<2) errordlg('\u8fc7\u96f6\u70b9\u4e2a\u6570\u4e0d\u8db3\uff0c\u65e0\u6cd5\u8fdb\u884c\u5206\u6790','error');%\u63d0\u793a\u672a\u9009\u62e9\u58f0\u5361 return; end for temp=2:1:len_ti T(temp-1)=(ti(temp)-ti(temp-1)); end freq=1/mean(T)%\u8ba1\u7b97\u9891\u7387 set(handles.analysis_cycle,'String',num2str(1/freq)); set(handles.analysis_fre,'String',num2str(freq));%\u8f93\u51fa\u9891\u7387\u4f30\u8ba1\u503c set(handles.analysis_vlotage,'String',num2str(mean(A(2:n-1)))); if (get(handles.check_point,'Value')==1) from=1; to=str2double(get(handles.input_fs_num,'String')); else from=str2num(get(handles.first_point,'String')); to=str2num(get(handles.last_point,'String')); end phase=2*180*(1-(ti(2:n-1)-1)./T+floor((ti(2:n-1)-1)./T)); set(handles.analysis_phase,'String',num2str(mean(phase)));%\u76f8\u4f4d set(handles.analysis_high,'String',(max(handles.sound(from:to))-min(handles.sound(from:to)))/2);%\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u7684\u4e00\u534a\u5373\u4e3a\u5cf0\u503c set(handles.analysis_mean,'String',mean(handles.sound(from:to)));%\u5747\u503c set(handles.analysis_square,'String',mean(handles.sound(from:to).^2));%\u5747\u65b9\u503c set(handles.analysis_variance,'String',std(handles.sound(from:to))^2);%\u8f93\u51fa\u65b9\u5dee end \u7ed3\u679c\u5982\u56fe2 \u9891\u57df\u5206\u6790 function button_fre_Callback(hObject, eventdata, handles)%\u9891\u57df\u5206\u6790\u6309\u94ae if (get(handles.check_point,'Value')==1) from=1; to=str2double(get(handles.input_fs_num,'String')); else from=str2num(get(handles.first_point,'String')); to=str2num(get(handles.last_point,'String')); end sample=handles.sound(from:to);%\u53d6\u51fasound\u4fe1\u53f7\u7684\u6570\u636e\uff0c\u5b58\u653e\u5230\u4e34\u65f6\u7a7a\u95f4\u4e2d f=linspace(0,handles.fs/2,(to-from+1)/2);%\u751f\u6210\u79bb\u6563\u5316\u7684\u9891\u7387\u70b9\uff0c\u4ee5\u91c7\u6837\u9891\u7387\u4f5c\u4e3a\u79bb\u6563\u5316\u65f6\u95f4\u95f4\u9694 Y=fft(sample,to-from+1);%\u5bf9\u79bb\u6563\u4fe1\u53f7\u8fdb\u884c\u5085\u91cc\u53f6\u53d8\u6362 [C,I]=max(abs(Y));%\u6c42\u7684\u5e45\u503c\u6700\u5927\u7684\u70b9\u53ca\u5176\u4e0b\u6807 set(handles.fre_cycle,'String',1/f(I));%\u8ba1\u7b97\u5e76\u8f93\u51fa\u5468\u671f set(handles.fre_fre,'String',f(I));%\u8f93\u51fa\u9891\u7387 Y=Y(1:(to-from+1)/2); plot(handles.axes_fre,f,2*sqrt(Y.*conj(Y))); plot(handles.axes_time,f,angle(Y)); plot(handles.axes_real,f,real(Y)); plot(handles.axes_img,f,imag(Y)); plot(handles.axes_power,f,abs(Y)); end \u7ed3\u679c\u5982\u56fe3 6. \u5b9e\u9a8c\u7ed3\u679c\u603b\u7ed3 \u56fe1.1 \u56fe1.2 \u56fe1.3.1 \u56fe1.3.2 \u56fe1.3.3 \u56fe1.3.4 \u56fe2 \u56fe3 7. \u7ed3\u679c\u5206\u6790 \u97f3\u9891\u4fe1\u53f7\u8f93\u5165 \u5b9e\u73b0\u5f55\u97f3\uff0c\u6587\u4ef6\uff0c\u4ee5\u53ca\u76f4\u63a5\u751f\u6210\u6b63\u5f26\u6ce2\u3001\u65b9\u6ce2\u3001\u4e09\u89d2\u6ce2\u3001\u952f\u9f7f\u6ce2\u3001\u767d\u566a\u58f0\u7684\u65b9\u5f0f\u8f93\u5165\u3002 \u65f6\u57df\u5206\u6790 \u7ed3\u679c\u5927\u81f4\u51c6\u786e\uff0c\u4f46\u5b58\u5728\u4e9b\u8bb8\u8bef\u5dee\u3002\u8fd9\u662f\u7531\u4e8e\u8fc7\u96f6\u68c0\u6d4b\u65e0\u6cd5\u5305\u62ec\u6240\u6709\u70b9\u3002 \u9891\u57df\u5206\u6790 \u7ed3\u679c\u5927\u81f4\u6b63\u786e\uff0c\u7a97\u51fd\u6570\u7684\u9009\u53d6\u8bef\u5dee\u5bfc\u81f4\u6709\u9891\u8c31\u6cc4\u9732\u7684\u73b0\u8c61\u53d1\u751f\u3002 8.\u5fc3\u5f97\u4f53\u4f1a \u5b66\u4f1a\u4e86guide\u5de5\u5177\u7bb1\u7684\u4f7f\u7528\uff0c\u5b66\u4f1a\u4e86\u7f16\u5199\u7b80\u5355\u4ea4\u4e92\u5f0f\u754c\u9762\u3002 \u5b66\u4f1a\u4e86\u6a21\u5757\u5316\u8bbe\u8ba1\u3002 \u7531matlab\u9762\u5411\u8fc7\u7a0b\u7f16\u7a0b\u8f6c\u53d8\u4e3a\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u3002","title":"\u97f3\u9891\u9891\u8c31\u5206\u6790\u4eea\u8bbe\u8ba1\u4e0e\u5b9e\u73b0"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#_1","text":"","title":"\u97f3\u9891\u9891\u8c31\u5206\u6790\u4eea\u8bbe\u8ba1\u4e0e\u5b9e\u73b0"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#1","text":"\u97f3\u9891\u9891\u8c31\u5206\u6790\u4eea\u8bbe\u8ba1\u4e0e\u5b9e\u73b0\u3002","title":"1. \u5b9e\u9a8c\u9879\u76ee\u540d\u79f0"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#2","text":"\u6784\u5efa\u4ea4\u4e92\u754c\u9762\uff0c\u5177\u6709\u64ad\u653e\u58f0\u97f3\u6587\u4ef6\uff0c\u663e\u793a\u6ce2\u5f62\u4e0e\u9891\u8c31\uff0c\u5e76\u53ef\u6d4b\u91cf\u58f0\u97f3\u65f6\u57df\u53c2\u6570\u3002","title":"2. \u5b9e\u9a8c\u76ee\u7684"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#3","text":"\u5b9e\u9a8c\u5185\u5bb9\uff1a MATLAB\u662f\u4e00\u4e2a\u6570\u636e\u5206\u6790\u548c\u5904\u7406\u529f\u80fd\u5341\u5206\u5f3a\u5927\u7684\u5de5\u7a0b\u5b9e\u7528\u8f6f\u4ef6\uff0c\u5176\u6570\u636e\u91c7\u96c6\u5de5\u5177\u7bb1\u4e3a\u5b9e\u73b0\u6570\u636e\u7684\u8f93\u5165\u548c\u8f93\u51fa\u63d0\u4f9b\u4e86\u5341\u5206\u65b9\u4fbf\u7684\u51fd\u6570\u548c\u547d\u4ee4\u3002\u672c\u5b9e\u9a8c\u8981\u6c42\u57fa\u4e8e\u58f0\u5361\u4e0eMATLAB\u5b9e\u73b0\u97f3\u9891\u4fe1\u53f7\u9891\u8c31\u5206\u6790\u4eea\u7684\u8bbe\u8ba1\u539f\u7406\u4e0e\u5b9e\u73b0\uff0c\u529f\u80fd\u5305\u62ec\uff1a (1) \u97f3\u9891\u4fe1\u53f7\u8f93\u5165\uff0c\u4ece\u58f0\u5361\u8f93\u5165\u3001\u4eceWAV\u6587\u4ef6\u8f93\u5165\u3001\u4ece\u6807\u51c6\u4fe1\u53f7\u53d1\u751f\u5668\u8f93\u5165\u3002 (2) \u4fe1\u53f7\u6ce2\u5f62\u5206\u6790\uff0c\u5305\u62ec\u5e45\u503c\u3001\u9891\u7387\u3001\u5468\u671f\u3001\u76f8\u4f4d\u7684\u4f30\u8ba1\uff0c\u4ee5\u53ca\u7edf\u8ba1\u91cf\u5cf0\u503c\u3001\u5747\u503c\u3001\u5747\u65b9\u503c\u548c\u65b9\u5dee\u7684\u8ba1\u7b97\u3002 (3) \u4fe1\u53f7\u9891\u8c31\u5206\u6790\uff0c\u9891\u7387\u3001\u5468\u671f\u7684\u4f30\u8ba1\uff0c\u56fe\u5f62\u663e\u793a\u5e45\u503c\u8c31\u3001\u76f8\u4f4d\u8c31\u3001\u5b9e\u9891\u8c31\u3001\u865a\u9891\u8c31\u548c\u529f\u7387\u8c31\u7684\u66f2\u7ebf\u3002 \u9891\u7387\uff08\u5468\u671f\uff09\u68c0\u6d4b \u5bf9\u5468\u671f\u4fe1\u53f7\u6765\u8bf4\uff0c\u53ef\u4ee5\u7528\u65f6\u57df\u6ce2\u5f62\u5206\u6790\u6765\u786e\u5b9a\u4fe1\u53f7\u7684\u5468\u671f\uff0c\u4e5f\u5c31\u662f\u8ba1\u7b97\u76f8 \u90bb\u7684\u4e24\u4e2a\u4fe1\u53f7\u6ce2\u5cf0\u7684\u65f6\u95f4\u5dee\uff0c\u6216\u8fc7\u96f6\u70b9\u7684\u65f6\u95f4\u5dee\u3002\u8fd9\u91cc\u91c7\u7528\u8fc7\u96f6\u70b9( t_s t_s )\u7684\u65f6\u95f4\u5dee T T (\u5468\u671f)\u3002\u9891\u7387\u5373\u4e3a f = 1/T f = 1/T \uff0c\u7531\u4e8e\u80fd\u591f\u6c42\u5f97\u591a\u4e2a T T \u503c( t_i t_i \u6709\u591a\u4e2a)\uff0c\u6545\u91c7\u7528\u5b83\u4eec\u7684\u5e73\u5747\u503c\u4f5c\u4e3a\u5468\u671f\u7684\u4f30\u8ba1\u503c\u3002 \u5e45\u503c\u68c0\u6d4b \u5728\u4e00\u4e2a\u5468\u671f\u5185\uff0c\u6c42\u51fa\u4fe1\u53f7\u6700\u5927\u503c y_{max} y_{max} \u4e0e\u6700\u5c0f\u503c y_{min} y_{min} \u7684\u5dee\u7684\u4e00\u534a\uff0c\u5373 A = (y_{max}-y_{min})/2 A = (y_{max}-y_{min})/2 ,\u540c\u6837\uff0c\u4e5f\u4f1a\u6c42\u51fa\u591a\u4e2a A A \u503c\uff0c\u4f46\u7b2c\u4e00\u4e2a A A \u503c\u5bf9\u5e94\u7684 y_{max} y_{max} \u548c y_{min} y_{min} \u4e0d\u662f\u5728\u4e00\u4e2a\u5468\u671f\u5185\u641c\u7d22\u5f97\u5230\u7684\uff0c\u6545\u4ee5\u9664\u7b2c\u4e00\u4e2a\u4ee5\u5916\u7684 A A \u503c\u7684\u5e73\u5747\u503c\u4f5c\u4e3a\u5e45\u503c\u7684\u4f30\u8ba1\u503c\u3002 \u76f8\u4f4d\u68c0\u6d4b \u91c7\u7528\u8fc7\u96f6\u6cd5\uff0c\u5373\u901a\u8fc7\u5224\u65ad\u4e0e\u540c\u9891\u7387\u96f6\u76f8\u4f4d\u4fe1\u53f7\u8fc7\u96f6\u70b9\u65f6\u523b\uff0c\u8ba1\u7b97\u5176\u65f6\u95f4\u5dee\uff0c\u7136\u540e\u6362\u6210\u76f8\u5e94\u7684\u76f8\u4f4d\u5dee\u3002 \\phi = 2\\pi(1-t_i/T) \\phi = 2\\pi(1-t_i/T) \uff0c\u540c\u6837\uff0c\u4ee5 \\phi \\phi \u7684\u5e73\u5747\u503c\u4f5c\u4e3a\u76f8\u4f4d\u7684\u4f30\u8ba1\u503c\u3002 \u6570\u5b57\u4fe1\u53f7\u7edf\u8ba1\u91cf\u4f30\u8ba1 \u5cf0\u503cP\u7684\u4f30\u8ba1\uff1a\u5728\u6837\u672c\u6570\u636ex\u4e2d\u627e\u51fa\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\uff0c\u5176\u5dee\u503c\u4e3a\u53cc\u5cf0\u503c\uff0c\u53cc\u5cf0\u503c\u7684\u4e00\u534a\u5373\u4e3a\u5cf0\u503c\u3002 P = 0.5[max(y_i)-min(y_i)] P = 0.5[max(y_i)-min(y_i)] \u5747\u503c\u4f30\u8ba1\uff1a $$ E(y) = \\frac{1}{N}\\sum_{i=0}^N y_i $$ \u5f0f\u4e2d\uff0cN\u4e3a\u6837\u672c\u5bb9\u91cf\uff0c\u4e0b\u540c\u3002 \u5747\u65b9\u503c\u4f30\u8ba1 E(y^2) = \\frac{1}{N}\\sum_{i=0}^N y_i^2 E(y^2) = \\frac{1}{N}\\sum_{i=0}^N y_i^2 \u65b9\u5dee\u4f30\u8ba1 D(y) = \\frac{1}{N}\\sum_{i=0}^N [y_i-E(y)]^2 D(y) = \\frac{1}{N}\\sum_{i=0}^N [y_i-E(y)]^2 \u9891\u8c31\u5206\u6790\u539f\u7406 \u65f6\u57df\u5206\u6790\u53ea\u80fd\u53cd\u6620\u4fe1\u53f7\u7684\u5e45\u503c\u968f\u65f6\u95f4\u7684\u53d8\u5316\u60c5\u51b5\uff0c\u9664\u5355\u9891\u7387\u5206\u91cf\u7684\u7b80\u5355\u6ce2 \u5f62\u5916\uff0c\u5f88\u96be\u660e\u786e\u63d0\u793a\u4fe1\u53f7\u7684\u9891\u7387\u7ec4\u6210\u548c\u5404\u9891\u7387\u5206\u91cf\u5927\u5c0f\uff0c\u800c\u9891\u8c31\u5206\u6790\u80fd\u5f88\u597d\u7684\u89e3\u51b3\u6b64\u95ee\u9898\u3002 DFT\u4e0eFFT \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u65f6\u57df\u4fe1\u53f7 y y \uff0c\u53ef\u4ee5\u901a\u8fc7 Fourier \u53d8\u6362\u5f97\u5230\u9891\u57df\u4fe1\u606f Y Y \u3002 \u91c7\u6837\u4fe1\u53f7\u7684\u9891\u8c31\u662f\u4e00\u4e2a\u8fde\u7eed\u7684\u9891\u8c31\uff0c\u4e0d\u53ef\u80fd\u8ba1\u7b97\u51fa\u6240\u6709\u7684\u70b9\u7684\u503c\uff0c\u6545\u91c7\u7528\u79bb\u6563 Fourier \u53d8\u6362(DFT)\u3002\u4f46\u8ba1\u7b97\u6548\u7387\u5f88\u4f4e\uff0c\u56e0\u4e3a\u6709\u5927\u91cf\u7684\u6307\u6570(\u7b49\u4ef7\u4e8e\u4e09\u89d2\u51fd\u6570)\u8fd0\u7b97\uff0c\u6545\u5b9e\u9645\u4e2d\u591a\u91c7\u7528\u5feb\u901f Fourier \u53d8\u6362(FFT)\u3002\u5176\u539f\u7406\u5373\u662f\u5c06\u91cd\u590d\u7684\u4e09\u89d2\u51fd\u6570\u7b97\u8ba1\u7684\u4e2d\u95f4\u7ed3\u679c\u4fdd\u5b58\u8d77\u6765\uff0c\u4ee5\u51cf\u5c11\u91cd\u590d\u4e09\u89d2\u51fd\u6570\u8ba1\u7b97\u5e26\u6765\u7684\u65f6\u95f4\u6d6a\u8d39\u3002\u7531\u4e8e\u4e09\u89d2\u51fd\u6570\u8ba1\u7b97\u7684\u91cd\u590d\u91cf\u76f8\u5f53\u5927\uff0c\u6545FFT\u80fd\u6781\u5927\u5730\u63d0\u9ad8\u8fd0\u7b97\u6548\u7387\u3002 \u9891\u7387\u3001\u5468\u671f\u7684\u4f30\u8ba1 \u5bf9\u4e8e Y(k\\triangle f) Y(k\\triangle f) \uff0c\u5982\u679c\u5f53 \\triangle f = \\tilde{f} \\triangle f = \\tilde{f} \u65f6\uff0c Y(k\\triangle f) Y(k\\triangle f) \u53d6\u6700\u5927\u503c\uff0c\u5219 \\tilde{f} \\tilde{f} \u4e3a\u9891\u7387\u7684\u4f30\u8ba1\u503c\uff0c\u7531\u4e8e\u91c7\u6837\u95f4\u9694\u7684\u8bef\u5dee\uff0c \\tilde{f} \\tilde{f} \u4e5f\u5b58\u5728\u8bef\u5dee\uff0c\u5176\u8bef\u5dee\u6700\u5927\u4e3a \\triangle f/2 \\triangle f/2 \u3002 \u5468\u671f T=1/f T=1/f \u3002 \u4ece\u539f\u7406\u4e0a\u53ef\u4ee5\u770b\u51fa\uff0c\u5982\u679c\u5728\u6807\u51c6\u4fe1\u53f7\u4e2d\u6df7\u6709\u566a\u58f0\uff0c\u7528\u4e0a\u8ff0\u65b9\u6cd5\u4ecd\u80fd\u591f\u7cbe\u786e\u5730\u4f30\u8ba1\u51fa\u539f\u6807\u51c6\u4fe1\u53f7\u7684\u9891\u7387\u548c\u5468\u671f\u3002 \u9891\u8c31\u56fe \u4e3a\u4e86\u76f4\u89c2\u5730\u8868\u793a\u4fe1\u53f7\u7684\u9891\u7387\u7279\u6027\uff0c\u5de5\u7a0b\u4e0a\u5e38\u5e38\u5c06Fourier\u53d8\u6362\u7684\u7ed3\u679c\u7528\u56fe\u5f62\u7684\u65b9\u5f0f\u8868\u793a\uff0c\u5373\u9891\u8c31\u56fe\u3002 \u4ee5\u9891\u7387 f f \u4e3a\u6a2a\u5750\u6807\uff0c |Y(f)| |Y(f)| \u4e3a\u7eb5\u5750\u6807\uff0c\u53ef\u4ee5\u5f97\u5230\u5e45\u503c\u8c31\uff1b \u4ee5\u9891\u7387 f f \u4e3a\u6a2a\u5750\u6807\uff0c arg Y(f) arg Y(f) \u4e3a\u7eb5\u5750\u6807\uff0c\u53ef\u4ee5\u5f97\u5230\u76f8\u4f4d\u8c31\uff1b \u4ee5\u9891\u7387 f f \u4e3a\u6a2a\u5750\u6807\uff0c Re Y(f) Re Y(f) \u4e3a\u7eb5\u5750\u6807\uff0c\u53ef\u4ee5\u5f97\u5230\u5b9e\u9891\u8c31\uff1b \u4ee5\u9891\u7387 f f \u4e3a\u6a2a\u5750\u6807\uff0c Im Y(f) Im Y(f) \u4e3a\u7eb5\u5750\u6807\uff0c\u53ef\u4ee5\u5f97\u5230\u865a\u9891\u8c31\u3002 \u6839\u636e\u91c7\u6837\u5b9a\u7406\uff0c\u53ea\u6709\u9891\u7387\u4e0d\u8d85\u8fc7 F_s/2 F_s/2 \u7684\u4fe1\u53f7\u624d\u80fd\u88ab\u6b63\u786e\u91c7\u96c6\uff0c\u5373 Fourier \u53d8\u6362\u7684\u7ed3\u679c\u4e2d\u9891\u7387\u5927\u4e8e F_s/2 F_s/2 \u7684\u90e8\u5206\u662f\u4e0d\u6b63\u786e\u7684\u90e8\u5206\uff0c\u6545\u4e0d\u5728\u9891\u8c31\u56fe\u4e2d\u663e\u793a\u3002\u5373\u6a2a\u5750\u6807 f \\in [0 ,F_s/2] f \\in [0 ,F_s/2] \u3002 \u6a21\u5757\u5212\u5206 \u6a21\u5757\u5316\u5c31\u662f\u628a\u7a0b\u5e8f\u5212\u5206\u6210\u72ec\u7acb\u547d\u540d\u4e14\u53ef\u72ec\u7acb\u8bbf\u95ee\u7684\u6a21\u5757\uff0c\u6bcf\u4e2a\u6a21\u5757\u5b8c\u6210\u4e00\u4e2a\u5b50\u529f\u80fd\uff0c\u628a\u8fd9\u4e9b\u6a21\u5757\u96c6\u6210\u8d77\u6765\u6784\u6210\u4e00\u4e2a\u6574\u4f53\uff0c\u53ef\u4ee5\u5b8c\u6210\u6307\u5b9a\u7684\u529f\u80fd\u6ee1\u8db3\u7528\u6237\u9700\u6c42\u3002\u6839\u636e\u4eba\u7c7b\u89e3\u51b3\u4e00\u822c\u95ee\u9898\u7684\u7ecf\u9a8c\uff0c\u5982\u679c\u4e00\u4e2a\u95ee\u9898\u7531\u4e24\u4e2a\u95ee\u9898\u7ec4\u5408\u800c\u6210\uff0c\u90a3\u4e48\u5b83\u7684\u590d\u6742\u7a0b\u5ea6\u5927\u4e8e\u5206\u522b\u8003\u8651\u6bcf\u4e2a\u95ee\u9898\u65f6\u7684\u590d\u6742\u7a0b\u5ea6\u4e4b\u548c\uff0c\u4e5f\u5c31\u662f\u8bf4\u628a\u590d\u6742\u7684\u95ee\u9898\u5206\u89e3\u6210\u8bb8\u591a\u5bb9\u6613\u89e3\u51b3\u7684\u5c0f\u95ee\u9898\uff0c\u539f\u6765\u7684\u95ee\u9898\u4e5f\u5c31\u5bb9\u6613\u89e3\u51b3\u4e86\u3002\u8fd9\u5c31\u662f\u6a21\u5757\u5316\u7684\u6839\u636e\u3002 \u5728\u6a21\u5757\u5212\u5206\u65f6\u5e94\u9075\u5faa\u5982\u4e0b\u89c4\u5219\uff1a\u6539\u8fdb\u8f6f\u4ef6\u7ed3\u6784\u63d0\u9ad8\u6a21\u5757\u72ec\u7acb\u6027\uff1b\u6a21\u5757\u89c4\u6a21\u5e94\u8be5\u9002\u4e2d\uff1b\u6df1\u5ea6\u3001\u5bbd\u5ea6\u3001\u6247\u51fa\u548c\u6247\u5165\u90fd\u5e94\u9002\u5f53\uff1b\u6a21\u5757\u7684\u4f5c\u7528\u57df\u5e94\u8be5\u5728\u63a7\u5236\u57df\u4e4b\u5185\uff1b\u529b\u4e89\u964d\u4f4e\u6a21\u5757\u63a5\u53e3\u7684\u590d\u6742\u7a0b\u5ea6\uff1b\u8bbe\u8ba1\u5355\u5165\u53e3\u5355\u51fa\u53e3\u7684\u6a21\u5757\uff1b\u6a21\u5757\u529f\u80fd\u5e94\u8be5\u53ef\u4ee5\u9884\u6d4b\u3002","title":"3. \u5b9e\u9a8c\u5185\u5bb9\u4e0e\u6b65\u9aa4"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#4","text":"MATLAB R2019b","title":"4. \u5b9e\u9a8c\u73af\u5883"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#5","text":"","title":"5. \u5b9e\u9a8c\u8fc7\u7a0b\u4e0e\u5206\u6790\u7a0b\u5e8f\u6587\u672c"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#_2","text":"","title":"\u97f3\u9891\u4fe1\u53f7\u8f93\u5165"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#_3","text":"function button_recording_Callback(hObject, eventdata, handles)%\u5f00\u59cb\u5f55\u97f3\u6309\u94ae if (get(handles.radio_audio,'Value')==1)%\u5f53\u9009\u62e9\u58f0\u5361\u65f6\uff0c\u624d\u80fd\u8fdb\u884c\u76f8\u5e94\u64cd\u4f5c\uff0c\u5426\u5219\u63d0\u793a\u9519\u8bef\u4fe1\u606f if(isempty(get(handles.input_fs_fre,'String'))==0)%\u5224\u65ad\u8bbe\u5b9a\u7684\u91c7\u6837\u9891\u7387\u662f\u5426\u4e3a\u7a7a recordtime=str2double(get(handles.recording_time,'String'));%\u8bfb\u53d6\u5f55\u97f3\u65f6\u95f4\u6570\u636e if(recordtime>0) handles.fs=str2double(get(handles.input_fs_fre,'String'));%\u83b7\u53d6\u8bbe\u5b9a\u7684\u91c7\u6837\u9891\u7387\uff0c\u8f6c\u4e3a\u6570\u5b57\u683c\u5f0f sound_length=round(recordtime*handles.fs);%\u5f55\u97f3\u70b9\u6570 record=audiorecorder(handles.fs,24,1);%\u4f9d\u636e\u91c7\u6837\u9891\u7387\u521b\u5efa\u5f55\u97f3\u5e8f\u5217\uff0c\u4f4d\u6570\u4e3a24\uff0c\u5355\u58f0\u9053 recordblocking(record,recordtime);%\u8f93\u5165\u5f55\u97f3\u5e8f\u5217\uff0c\u957f\u5ea6\u4fe1\u606f=\u65f6\u95f4 msgbox('Recording complete','Tip'); handles.sound=getaudiodata(record);%\u521b\u5efa\u83b7\u53d6\u5f55\u97f3\u6570\u636e\u7684\u6570\u7ec4 n=0:1:sound_length-1; time=n/handles.fs;%\u521b\u5efa\u663e\u793a\u7528\u7684\u65f6\u95f4\u5e8f\u5217 plot(handles.axes_analysis,time,handles.sound);%\u5728\u5206\u6790\u5bf9\u8c61\u533a\u57df\u6253\u5370\u51fa\u91c7\u96c6\u5230\u7684\u4fe1\u53f7\u7ed3\u679c title('Waveform of the Acquisition Signal'); set(handles.input_fs_num,'String',num2str(sound_length));%\u5728\u91c7\u6837\u70b9\u6570\u91cf\u7684\u6846\u5185\u663e\u793a\u5f53\u524d\u91c7\u6837\u9891\u7387\u4e0b\u5bf9\u6837\u672c\u4fe1\u53f7\u7684\u91c7\u6837\u70b9\u6570 handles.complete=1;%\u8868\u660e\u4e3a\u58f0\u5361\u91c7\u96c6\u5b8c\u6210 guidata(handles.button_recording,handles);%\u50a8\u5b58handles\u7ed3\u6784\u4f53\uff0c\u50a8\u5b58sound\u4fe1\u53f7,fs\u6570\u503c else errordlg('No recording time set','Enter error');%\u63d0\u793a\u672a\u8bbe\u5b9a\u5f55\u97f3\u65f6\u95f4 end else errordlg('Sample frequency not set','Enter error');%\u63d0\u793a\u672a\u8bbe\u5b9a\u91c7\u6837\u9891\u7387 end else errordlg('Sound card button not enabled','Choose error');%\u63d0\u793a\u672a\u9009\u62e9\u58f0\u5361 end end \u7ed3\u679c\u5982\u56fe1.1","title":"\u58f0\u5361\u8f93\u5165"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#wav","text":"function choice_files_Callback(hObject, eventdata, handles)%\u624b\u52a8\u9009\u62e9\u6587\u4ef6\u6309\u94ae [filename, pathname] = uigetfile('*', '\u8bfb\u53d6\u97f3\u9891\u6587\u4ef6') if([pathname,filename]~=0) set(handles.filename,'String',[pathname,filename]); end end function button_open_file_Callback(hObject, eventdata, handles)%\u6253\u5f00\u6587\u4ef6\u6309\u94ae if (get(handles.radio_wav,'Value')==1)%\u5f53\u9009\u62e9\u6587\u4ef6\u8bfb\u53d6\u65f6\uff0c\u624d\u80fd\u8fdb\u884c\u76f8\u5e94\u64cd\u4f5c\uff0c\u5426\u5219\u63d0\u793a\u9519\u8bef\u4fe1\u606f if((isempty(get(handles.filename,'String'))==0))%\u5224\u65ad\u6587\u4ef6\u540d\u8f93\u5165\u662f\u5426\u4e3a\u7a7a [y,Fs] =audioread(get(handles.filename,'String'));%\u83b7\u53d6\u6240\u9009\u6587\u4ef6\u7684\u58f0\u97f3\u4fe1\u53f7\uff0c\u5f97\u5230\u4fe1\u53f7\u77e9\u9635\u548c\u4fe1\u53f7\u9891\u7387 [leng,channel]=size(y);%\u5bf9y\u8fdb\u884c\u5217\u6570\u5224\u65ad\uff0c\u6c42\u5f97\u58f0\u9053\u6570\u76ee,\u4ee5\u53ca\u6240\u5f97\u5230\u7684\u6570\u636e\u70b9\u7684\u6570\u76ee set(handles.input_fs_fre,'String',num2str(Fs)); set(handles.input_fs_num,'String',num2str(leng));%\u8bbe\u7f6e\u91c7\u6837\u9891\u7387\u548c\u70b9\u6570 switch (channel) case 1%\u5355\u58f0\u9053 set(handles.sound_channel,'Value',1); set(handles.sound_channel,'Enable','off'); msgbox('\u8f93\u5165\u7684\u662f\u5355\u58f0\u9053\u6587\u4ef6','Tip'); handles.fs=Fs; handles.sound=y(:,channel);%\u77e9\u9635\u7ef4\u5ea6\u4e00\u81f4\uff0c\u5747\u4e3a\u591a\u884c\u5355\u5217 guidata(handles.button_open_file,handles);%\u50a8\u5b58sound\u4fe1\u606f time=0:1/handles.fs:(leng-1)/handles.fs; plot(handles.axes_analysis,time,handles.sound);%\u5728\u5206\u6790\u5bf9\u8c61\u533a\u57df\u6253\u5370\u51fa\u91c7\u96c6\u5230\u7684\u4fe1\u53f7\u7ed3\u679c title('\u97f3\u9891\u4fe1\u53f7\u7684\u6ce2\u5f62'); otherwise set(handles.sound_channel,'Value',2); msgbox('\u58f0\u9053\u6570\u76ee\u8d85\u8fc7\u4e00\u4e2a\uff0c\u8bf7\u9009\u62e9\u6240\u9009\u53d6\u7684\u58f0\u9053\uff0c\u9ed8\u8ba4\u9009\u53d6\u5de6\u58f0\u9053','Tip'); handles.fs=Fs; handles.sound=y(:,:); guidata(handles.button_open_file,handles); set(handles.filename,'Enable','off'); set(handles.choice_files,'Enable','off'); set(handles.button_open_file,'Enable','off'); end else errordlg('\u672a\u8bbe\u7f6e\u6587\u4ef6\u76ee\u5f55','Enter error');%\u63d0\u793a\u672a\u8bbe\u7f6e\u6587\u4ef6\u76ee\u5f55 end else errordlg('\u672a\u542f\u7528\u6587\u4ef6\u8bfb\u53d6\u6309\u94ae','Choose error');%\u63d0\u793a\u672a\u9009\u62e9\u6587\u4ef6\u8bfb\u53d6 end end function sound_channel_Callback(hObject, eventdata, handles) choice_channel=get(handles.sound_channel,'Value'); if(choice_channel>1) choice_channel=choice_channel-1; end handles.sound=handles.sound(:,choice_channel); leng=length(handles.sound); guidata(handles.button_open_file,handles);%\u50a8\u5b58sound\u4fe1\u606f time=0:1/handles.fs:(leng-1)/handles.fs; plot(handles.axes_analysis,time,handles.sound);%\u5728\u5206\u6790\u5bf9\u8c61\u533a\u57df\u6253\u5370\u51fa\u91c7\u96c6\u5230\u7684\u4fe1\u53f7\u7ed3\u679c title('\u97f3\u9891\u4fe1\u53f7\u7684\u6ce2\u5f62'); set(handles.filename,'Enable','on'); set(handles.choice_files,'Enable','on'); set(handles.button_open_file,'Enable','on'); end function sound_channel_CreateFcn(hObject, eventdata, handles) if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor')) set(hObject,'BackgroundColor','white'); end end \u7ed3\u679c\u5982\u56fe1.2","title":"WAV\u6587\u4ef6\u8f93\u5165"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#_4","text":"function button_signal_Callback(hObject, eventdata, handles) %\u751f\u6210\u6ce2\u5f62\u6309\u94ae if ((get(handles.radio_signal,'Value')+get(handles.check_mixing,'Value'))==1) if(isempty(get(handles.input_fs_fre,'String'))==0)%\u5224\u65ad\u8bbe\u5b9a\u7684\u91c7\u6837\u9891\u7387\u662f\u5426\u4e3a\u7a7a if((isempty(get(handles.input_am,'String'))==0)&&(isempty(get(handles.input_vlotage,'String'))==0)&&(isempty(get(handles.input_phase,'String'))==0)) handles.fs=str2double(get(handles.input_fs_fre,'String'));%\u83b7\u53d6\u8bbe\u5b9a\u7684\u91c7\u6837\u9891\u7387\uff0c\u8f6c\u4e3a\u6570\u5b57\u683c\u5f0f signal_soundtype=get(handles.signal_choice,'Value');%\u83b7\u53d6\u4fe1\u53f7\u53d1\u751f\u5668\u533a\u57df\u7684\u6570\u636e signal_fre=str2double(get(handles.input_am,'String'));%\u83b7\u53d6\u4fe1\u53f7\u53d1\u751f\u5668\u7684\u4e09\u4e2a\u6d6e\u70b9\u6570\u6570\u636e\uff0c\u7528\u4e8e\u4ea7\u751f\u4fe1\u53f7\u4f7f\u7528 signal_vlotage=str2double(get(handles.input_vlotage,'String')); signal_phase=str2double(get(handles.input_phase,'String'))/180*pi;%\u8f6c\u6362\u4e3api if (get(handles.radio_signal,'Value')==1)%\u5982\u679c\u4e0d\u9009\u62e9\u6df7\u53e0\uff0c\u6309\u7167\u9891\u7387\u8fdb\u884c\u91c7\u6837\u64cd\u4f5c signal_time=str2double(get(handles.signal_nmix_time,'String'));%\u83b7\u53d6\u975e\u6df7\u53e0\u60c5\u51b5\u4e0b\u751f\u6210\u4fe1\u53f7\u7684\u65f6\u95f4 if(signal_time==0) errordlg('\u975e\u6df7\u53e0\u60c5\u51b5\u4e0b\u9700\u8bbe\u7f6e\u53d1\u751f\u5668\u65f6\u95f4','error'); return; end number=round(handles.fs*signal_time); t=(0:1.0/handles.fs:(number-1)/handles.fs);%\u91c7\u6837\u65f6\u95f4\u5e8f\u5217 else%\u5982\u679c\u4ea7\u751f\u6df7\u53e0\uff0c\u5219\u8bfb\u53d6\u5df2\u7ecf\u6709\u7684\u6570\u636e\u7684\u91c7\u6837\u70b9\u6570 number=str2double(get(handles.input_fs_num,'String'));%\u83b7\u53d6\u91c7\u6837\u70b9\u6570 t=(0:1.0/handles.fs:(number-1)/handles.fs);%\u91c7\u6837\u65f6\u95f4\u5e8f\u5217 end%\u521b\u5efa\u65f6\u95f4\u5e8f\u5217 switch signal_soundtype%\u4e0d\u9700\u8981\u52a0\u5165break case 1%\u6807\u51c6\u6b63\u5f26\u6ce2 y=signal_vlotage*sin(2*pi*t*signal_fre+signal_phase); case 2%\u65b9\u6ce2 y=signal_vlotage*sign(sin(2*pi*t*signal_fre+signal_phase)); case 3%\u4e09\u89d2\u6ce2 y=signal_vlotage*sawtooth(2*pi*t*signal_fre+signal_phase,0.5); case 4%\u952f\u9f7f\u6ce2 y=signal_vlotage*sawtooth(2*pi*t*signal_fre+signal_phase); case 5%\u767d\u566a\u58f0 y=signal_vlotage*sin(2*rand(size(t))-1); otherwise%\u4e0d\u6ee1\u8db3\u5219\u62a5\u9519 errordlg('\u6ce2\u5f62\u7c7b\u578b\u9009\u62e9\u51fa\u9519','Choose error'); end if (get(handles.radio_signal,'Value')==1)%\u5982\u679c\u6ca1\u6709\u9009\u62e9\u6df7\u53e0\u6309\u94ae\uff0c\u5219\u4e0d\u4e0e\u53e6\u5916\u4e24\u4e2a\u4fe1\u53f7\u76f8\u53e0\u52a0 handles.sound=y'; else%sound\u4e0ey\u957f\u5ea6\u76f8\u540c\uff0c\u4f46\u77e9\u9635\u7ef4\u5ea6\u4e0d\u540c size(y'); handles.sound=handles.sound+y'; size(handles.sound); end n=0:1:number-1; time=n/handles.fs;%\u521b\u5efa\u663e\u793a\u7528\u7684\u65f6\u95f4\u5e8f\u5217 plot(handles.axes_analysis,time,handles.sound);%\u5728\u5206\u6790\u5bf9\u8c61\u533a\u57df\u6253\u5370\u51fa\u91c7\u96c6\u5230\u7684\u4fe1\u53f7\u7ed3\u679c title('\u91c7\u96c6\u4fe1\u53f7\u7684\u6ce2\u5f62'); set(handles.input_fs_num,'String',num2str(number));%\u5728\u91c7\u6837\u70b9\u6570\u91cf\u7684\u6846\u5185\u663e\u793a\u5f53\u524d\u91c7\u6837\u9891\u7387\u4e0b\u5bf9\u6837\u672c\u4fe1\u53f7\u7684\u91c7\u6837\u70b9\u6570 guidata(handles.button_signal,handles);%\u50a8\u5b58\u6570\u636e else errordlg('\u672a\u8bbe\u5b9a\u53d1\u751f\u5668\u914d\u7f6e','Enter error');%\u63d0\u793a\u672a\u8bbe\u5b9a\u53d1\u751f\u5668\u914d\u7f6e\u4fe1\u606f end else errordlg('\u672a\u8bbe\u5b9a\u91c7\u6837\u9891\u7387','Enter error');%\u63d0\u793a\u672a\u8bbe\u5b9a\u91c7\u6837\u9891\u7387 end else errordlg('\u5fc5\u987b\u9009\u62e9\u4fe1\u53f7\u53d1\u751f\u5668\u548c\u6df7\u53e0\u6309\u94ae\u4e4b\u4e2d\u7684\u4e00\u4e2a','Choose error'); end end \u7ed3\u679c\u5982\u56fe1.3.1-1.3.4\uff0c\u5176\u4e2d\u59821.3.4\u4e3a\u5e45\u503c\u4e3a1\uff0c\u9891\u7387\u5206\u522b\u4e3a1Hz\u548c2Hz\u6b63\u5f26\u7684\u6df7\u53e0","title":"\u4fe1\u53f7\u53d1\u751f\u5668\u8f93\u5165"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#_5","text":"function button_time_Callback(hObject, eventdata, handles)%\u65f6\u57df\u5206\u6790\u6309\u94ae n=1; ymax=0;ymin=0; i=3;%\u521d\u59cb\u5316\u76f8\u5e94\u53d8\u91cf N=length(handles.sound);%\u83b7\u53d6\u58f0\u97f3\u4fe1\u53f7\u7684\u957f\u5ea6 ti=0; while(1) if((handles.sound(i-1)<0)&&(handles.sound(i-2)<0)&&(handles.sound(i)>=0)&&(handles.sound(i+1)>0)) if(handles.sound(i)>0) ti(n)=i/handles.fs; else ti(n)=(i-handles.sound(i)/(handles.sound(i)-handles.sound(i-1)))/handles.fs; end A(n)=(ymax-ymin)/2; ymax=0;ymin=0; n=n+1; else if(ymax<handles.sound(i)) ymax=handles.sound(i); end if(ymin>handles.sound(i)) ymin=handles.sound(i); end end i=i+1; if(i>N-1) break; end end len_ti=length(ti); if(len_ti<2) errordlg('\u8fc7\u96f6\u70b9\u4e2a\u6570\u4e0d\u8db3\uff0c\u65e0\u6cd5\u8fdb\u884c\u5206\u6790','error');%\u63d0\u793a\u672a\u9009\u62e9\u58f0\u5361 return; end for temp=2:1:len_ti T(temp-1)=(ti(temp)-ti(temp-1)); end freq=1/mean(T)%\u8ba1\u7b97\u9891\u7387 set(handles.analysis_cycle,'String',num2str(1/freq)); set(handles.analysis_fre,'String',num2str(freq));%\u8f93\u51fa\u9891\u7387\u4f30\u8ba1\u503c set(handles.analysis_vlotage,'String',num2str(mean(A(2:n-1)))); if (get(handles.check_point,'Value')==1) from=1; to=str2double(get(handles.input_fs_num,'String')); else from=str2num(get(handles.first_point,'String')); to=str2num(get(handles.last_point,'String')); end phase=2*180*(1-(ti(2:n-1)-1)./T+floor((ti(2:n-1)-1)./T)); set(handles.analysis_phase,'String',num2str(mean(phase)));%\u76f8\u4f4d set(handles.analysis_high,'String',(max(handles.sound(from:to))-min(handles.sound(from:to)))/2);%\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u7684\u4e00\u534a\u5373\u4e3a\u5cf0\u503c set(handles.analysis_mean,'String',mean(handles.sound(from:to)));%\u5747\u503c set(handles.analysis_square,'String',mean(handles.sound(from:to).^2));%\u5747\u65b9\u503c set(handles.analysis_variance,'String',std(handles.sound(from:to))^2);%\u8f93\u51fa\u65b9\u5dee end \u7ed3\u679c\u5982\u56fe2","title":"\u65f6\u57df\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#_6","text":"function button_fre_Callback(hObject, eventdata, handles)%\u9891\u57df\u5206\u6790\u6309\u94ae if (get(handles.check_point,'Value')==1) from=1; to=str2double(get(handles.input_fs_num,'String')); else from=str2num(get(handles.first_point,'String')); to=str2num(get(handles.last_point,'String')); end sample=handles.sound(from:to);%\u53d6\u51fasound\u4fe1\u53f7\u7684\u6570\u636e\uff0c\u5b58\u653e\u5230\u4e34\u65f6\u7a7a\u95f4\u4e2d f=linspace(0,handles.fs/2,(to-from+1)/2);%\u751f\u6210\u79bb\u6563\u5316\u7684\u9891\u7387\u70b9\uff0c\u4ee5\u91c7\u6837\u9891\u7387\u4f5c\u4e3a\u79bb\u6563\u5316\u65f6\u95f4\u95f4\u9694 Y=fft(sample,to-from+1);%\u5bf9\u79bb\u6563\u4fe1\u53f7\u8fdb\u884c\u5085\u91cc\u53f6\u53d8\u6362 [C,I]=max(abs(Y));%\u6c42\u7684\u5e45\u503c\u6700\u5927\u7684\u70b9\u53ca\u5176\u4e0b\u6807 set(handles.fre_cycle,'String',1/f(I));%\u8ba1\u7b97\u5e76\u8f93\u51fa\u5468\u671f set(handles.fre_fre,'String',f(I));%\u8f93\u51fa\u9891\u7387 Y=Y(1:(to-from+1)/2); plot(handles.axes_fre,f,2*sqrt(Y.*conj(Y))); plot(handles.axes_time,f,angle(Y)); plot(handles.axes_real,f,real(Y)); plot(handles.axes_img,f,imag(Y)); plot(handles.axes_power,f,abs(Y)); end \u7ed3\u679c\u5982\u56fe3","title":"\u9891\u57df\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#6","text":"\u56fe1.1 \u56fe1.2 \u56fe1.3.1 \u56fe1.3.2 \u56fe1.3.3 \u56fe1.3.4 \u56fe2 \u56fe3","title":"6. \u5b9e\u9a8c\u7ed3\u679c\u603b\u7ed3"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#7","text":"","title":"7. \u7ed3\u679c\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#_7","text":"\u5b9e\u73b0\u5f55\u97f3\uff0c\u6587\u4ef6\uff0c\u4ee5\u53ca\u76f4\u63a5\u751f\u6210\u6b63\u5f26\u6ce2\u3001\u65b9\u6ce2\u3001\u4e09\u89d2\u6ce2\u3001\u952f\u9f7f\u6ce2\u3001\u767d\u566a\u58f0\u7684\u65b9\u5f0f\u8f93\u5165\u3002","title":"\u97f3\u9891\u4fe1\u53f7\u8f93\u5165"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#_8","text":"\u7ed3\u679c\u5927\u81f4\u51c6\u786e\uff0c\u4f46\u5b58\u5728\u4e9b\u8bb8\u8bef\u5dee\u3002\u8fd9\u662f\u7531\u4e8e\u8fc7\u96f6\u68c0\u6d4b\u65e0\u6cd5\u5305\u62ec\u6240\u6709\u70b9\u3002","title":"\u65f6\u57df\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#_9","text":"\u7ed3\u679c\u5927\u81f4\u6b63\u786e\uff0c\u7a97\u51fd\u6570\u7684\u9009\u53d6\u8bef\u5dee\u5bfc\u81f4\u6709\u9891\u8c31\u6cc4\u9732\u7684\u73b0\u8c61\u53d1\u751f\u3002","title":"\u9891\u57df\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#8","text":"\u5b66\u4f1a\u4e86guide\u5de5\u5177\u7bb1\u7684\u4f7f\u7528\uff0c\u5b66\u4f1a\u4e86\u7f16\u5199\u7b80\u5355\u4ea4\u4e92\u5f0f\u754c\u9762\u3002 \u5b66\u4f1a\u4e86\u6a21\u5757\u5316\u8bbe\u8ba1\u3002 \u7531matlab\u9762\u5411\u8fc7\u7a0b\u7f16\u7a0b\u8f6c\u53d8\u4e3a\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u3002","title":"8.\u5fc3\u5f97\u4f53\u4f1a"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/","text":"\u79bb\u6563\u65f6\u95f4\u6ee4\u6ce2\u5668\u8bbe\u8ba1 1. \u5b9e\u9a8c\u9879\u76ee\u540d\u79f0 \u79bb\u6563\u65f6\u95f4\u6ee4\u6ce2\u5668\u8bbe\u8ba1 2.\u5b9e\u9a8c\u76ee\u7684 \u8bbe\u8ba1\u548c\u5206\u6790\u4e00\u7ec4\u6ee4\u6ce2\u5668\uff0c\u83b7\u5f97\u5bf9\u8bbe\u8ba1\u8fc7\u7a0b\u7684\u6df1\u5165\u8ba4\u8bc6\uff0c\u5e76\u4e14\u638c\u63e1\u51e0\u79cd\u6807\u51c6\u8bbe\u8ba1\u65b9\u6cd5\u7684\u7279\u70b9\uff0c\u8981\u6c42\u5408\u7ec4\u8ba8\u8bba\uff0c\u5355\u72ec\u5b9e\u9a8c\uff0c2\u5b66\u65f6\u3002 3. \u5b9e\u9a8c\u5185\u5bb9\u4e0e\u6b65\u9aa4 IIR\u6570\u5b57\u6ee4\u6ce2\u5668\u7684\u8bbe\u8ba1 \u8109\u51b2\u54cd\u5e94\u4e0d\u53d8\u6cd5\u53d8\u6362\u539f\u7406\uff1a \u8109\u51b2\u76f8\u5e94\u4e0d\u53d8\u6cd5\u5c06\u6a21\u62df\u6ee4\u6ce2\u5668\u7684 s s \u5e73\u9762\u53d8\u6362\u6210\u6570\u5b57\u6ee4\u6ce2\u5668\u7684 z z \u5e73\u9762\uff0c\u4ece\u800c\u5c06\u6a21\u62df\u6ee4\u6ce2\u5668\u6620\u5c04\u6210\u6570\u5b57\u6ee4\u6ce2\u5668 IIR\u6570\u5b57\u6ee4\u6ce2\u5668\u8bbe\u8ba1\u7684\u91cd\u8981\u73af\u8282\u662f\u6a21\u62df\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684\u8bbe\u8ba1\uff0c\u5178\u578b\u7684\u6a21\u62df\u4f4e\u901a\u6ee4\u6ce2\u5668\u7531\u5df4\u7279\u6c83\u601d\u548c\u5207\u6bd4\u96ea\u592b(\u2160\u578b\u548c\u2161\u578b)\u7b49\u6ee4\u6ce2\u5668\u3002\u7531\u6a21\u62df\u4f4e\u901a\u6ee4\u6ce2\u5668\u7ecf\u8fc7\u76f8\u5e94\u7684\u590d\u9891\u7387\u8f6c\u6362\u4e3a H(s) H(s) \uff0c\u7531 H(s) H(s) \u7ecf\u8fc7\u8109\u51b2\u76f8\u5e94\u4e0d\u53d8\u6cd5\u5c31\u5f97\u5230\u4e86\u6240\u9700\u8981\u7684IIR\u6570\u5b57\u6ee4\u6ce2\u5668 H(z) H(z) \u3002 \u53cc\u7ebf\u6027\u53d8\u6362\u6cd5\u539f\u7406 \u4e3a\u514b\u670d\u8109\u51b2\u54cd\u5e94\u4e0d\u53d8\u6cd5\u4ea7\u751f\u9891\u7387\u76f8\u5e94\u7684\u6df7\u53e0\u5931\u771f\uff0c\u53ef\u4ee5\u91c7\u7528\u975e\u7ebf\u6027\u9891\u7387\u538b\u7f29\u65b9\u6cd5\uff0c\u4f7fs\u5e73\u9762\u4e0ez\u5e73\u9762\u5efa\u7acb\u4e86\u4e00\u4e00\u5bf9\u5e94\u7684\u5355\u503c\u5173\u7cfb\uff0c\u6d88\u9664\u4e86\u591a\u503c\u53d8\u6362\u6027\uff0c\u4e5f\u5c31\u6d88\u9664\u4e86\u9891\u8c31\u6df7\u53e0\u73b0\u8c61\uff0c\u8fd9\u5c31\u662f\u53cc\u7ebf\u6027\u53d8\u6362\u6cd5\u3002 \u5b9e\u9a8c\u5185\u5bb9\uff1a \u8981\u6c42\u901a\u5e26\u622a\u6b62\u9891\u7387 f_p = 3kHz f_p = 3kHz \uff0c\u901a\u5e26\u6700\u5927\u8870\u51cf a_p = 1dB a_p = 1dB \uff0c\u963b\u5e26\u622a\u6b62\u9891\u7387 f_s = 4.5kHz f_s = 4.5kHz \uff0c\u963b\u5e26\u6700\u5c0f\u8870\u51cf a_s = 15dB a_s = 15dB \uff0c\u91c7\u6837\u9891\u7387 f_c = 30kHz f_c = 30kHz \uff0c\u7528\u8109\u51b2\u54cd\u5e94\u4e0d\u53d8\u6cd5\u8bbe\u8ba1\u4e00\u4e2a\u5207\u6bd4\u96ea\u592b\u6570\u5b57\u4f4e\u901a\u6ee4\u6ce2\u5668\uff0c\u5e76\u56fe\u793a\u6ee4\u6ce2\u5668\u7684\u632f\u5e45\u7279\u6027\uff0c\u68c0\u9a8c \\omega_p \\omega_p \uff0c \\omega_s \\omega_s \u5bf9\u5e94\u7684\u8870\u51cf\u3002 \u7528\u53cc\u7ebf\u6027\u53d8\u6362\u6cd5\u8bbe\u8ba1\u4e00\u4e2a\u5207\u6bd4\u96ea\u592b\u2160\u578b\u6570\u5b57\u9ad8\u901a\u6ee4\u6ce2\u5668\u3002\u6280\u672f\u6307\u6807\u4e3a:\u91c7\u6837\u9891\u7387 f_c = 2kHz f_c = 2kHz \uff0c\u901a\u5e26\u622a\u6b62\u9891\u7387 f_p = 700Hz f_p = 700Hz \uff0c\u901a\u5e26\u6700\u5927\u8870\u51cf a_p \\le 1dB a_p \\le 1dB \uff1b\u963b\u5e26\u8fb9\u7f18\u9891\u7387 f_s = 500Hz f_s = 500Hz \uff0c\u6700\u5e26\u6700\u5c0f\u8870\u51cf a_s \\ge 32dB a_s \\ge 32dB \u3002 \u7a97\u51fd\u6570\u6cd5\u8bbe\u8ba1FIR\u6570\u5b57\u6ee4\u6ce2\u5668 \u8bbe\u8ba1\u539f\u7406 FIR\u6ee4\u6ce2\u5668\u7684\u8bbe\u8ba1\u95ee\u9898\uff0c\u5c31\u662f\u8981\u662f\u6240\u8bbe\u8ba1\u7684FIR\u6ee4\u6ce2\u5668\u7684\u9891\u7387\u54cd\u5e94 H(e^{j\\omega}) H(e^{j\\omega}) \u903c\u8fd1\u6240\u8981\u6c42\u7684\u7406\u60f3\u6ee4\u6ce2\u5668\u7684\u9891\u7387\u54cd\u5e94 H_d(e^{j\\omega}) H_d(e^{j\\omega}) \u3002\u903c\u8fd1\u53ef\u5728\u65f6\u57df\u8fdb\u884c\uff0c\u4e5f\u53ef\u5728\u9891\u57df\u8fdb\u884c\u3002\u7a97\u51fd\u6570\u6cd5\u8bbe\u8ba1FIR\u6570\u5b57\u6ee4\u6ce2\u5668\u5b9e\u5728\u65f6\u57df\u8fdb\u884c\u7684\uff0c\u7528\u7a97\u51fd\u6570\u622a\u53d6\u65e0\u9650\u957f\u7684 h_d(n) h_d(n) \uff0c\u8fd9\u6837\u5f97\u5230\u7684\u9891\u7387\u54cd\u5e94 H(e^{j\\omega}) H(e^{j\\omega}) \u903c\u8fd1\u4e8e\u7406\u60f3\u7684\u9891\u7387\u54cd\u5e94 H_d(e^{j\\omega}) H_d(e^{j\\omega}) \u3002 \u5b9e\u9a8c\u5185\u5bb9\uff1a \u6839\u636e\u4e0b\u5217\u6307\u6807\u91c7\u7528\u7a97\u51fd\u6570\u6cd5\u8bbe\u8ba1\u4f4e\u901a\u6570\u5b57\u6ee4\u6ce2\u5668\uff0c\u901a\u5e26\u622a\u6b62\u9891\u7387 \\omega_p = 0.2\\pi \\omega_p = 0.2\\pi \uff0c\u963b\u5e26\u622a\u81f3\u9891\u7387 \\omega_s = 0.3\\pi \\omega_s = 0.3\\pi \uff0c\u901a\u5e26\u6700\u5927\u8870\u51cf 0.25dB 0.25dB \uff0c\u963b\u5e26\u6700\u5c0f\u8870\u51cf 50dB 50dB \u3002 (1)\u5206\u522b\u5229\u7528\u6c49\u660e\u7a97\u3001\u5e03\u83b1\u514b\u66fc\u7a97\u548c\u51ef\u6cfd\u7a97\u8bbe\u8ba1\u8be5\u6ee4\u6ce2\u5668\uff0c\u4e14\u6ee4\u6ce2\u5668\u5177\u6709\u7ebf\u6027\u76f8\u4f4d\u3002\u6c47\u51fa\u8109\u51b2\u76f8\u5e94h(n)\u53ca\u6ee4\u6ce2\u5668\u7684\u9891\u7387\u54cd\u5e94\u3002 (2)\u589e\u52a0N\uff0c\u89c2\u5bdf\u8fc7\u6e21\u5e26\u548c\u6700\u5927\u80a9\u5cf0\u503c\u7684\u53d8\u5316\u3002 \u5229\u7528\u6c49\u660e\u7a97\u8bbe\u8ba1\u6570\u5b57\u5fae\u5206\u5668\uff0c H_d(\\omega) = \\begin{cases} j\\omega ,& 0 < \\omega \\le \\pi \\\\ -j\\omega ,& -\\pi < \\omega < 0 \\end{cases} H_d(\\omega) = \\begin{cases} j\\omega ,& 0 < \\omega \\le \\pi \\\\ -j\\omega ,& -\\pi < \\omega < 0 \\end{cases} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">H_d(\\omega) = \\begin{cases} j\\omega ,&amp; 0 &lt; \\omega \\le \\pi \\\\ -j\\omega ,&amp; -\\pi &lt; \\omega &lt; 0 \\end{cases}</span><script type=\"math/tex\">H_d(\\omega) = \\begin{cases} j\\omega ,& 0 < \\omega \\le \\pi \\\\ -j\\omega ,& -\\pi < \\omega < 0 \\end{cases} \u8981\u6c42N=21\uff0c\u4e14\u6ee4\u6ce2\u5668\u5177\u6709\u7ebf\u6027\u76f8\u4f4d\u3002 4. \u5b9e\u9a8c\u73af\u5883 MATLAB R2019b 5. \u5b9e\u9a8c\u8fc7\u7a0b\u4e0e\u5206\u6790\u7a0b\u5e8f\u6587\u672c IIR\u6570\u5b57\u6ee4\u6ce2\u5668\u7684\u8bbe\u8ba1 \u8981\u6c42\u901a\u5e26\u622a\u6b62\u9891\u7387 f_p = 3kHz f_p = 3kHz \uff0c\u901a\u5e26\u6700\u5927\u8870\u51cf a_p = 1dB a_p = 1dB \uff0c\u963b\u5e26\u622a\u6b62\u9891\u7387 f_s = 4.5kHz f_s = 4.5kHz \uff0c\u963b\u5e26\u6700\u5c0f\u8870\u51cf a_s = 15dB a_s = 15dB \uff0c\u91c7\u6837\u9891\u7387 f_c = 30kHz f_c = 30kHz \uff0c\u7528\u8109\u51b2\u54cd\u5e94\u4e0d\u53d8\u6cd5\u8bbe\u8ba1\u4e00\u4e2a\u5207\u6bd4\u96ea\u592b\u6570\u5b57\u4f4e\u901a\u6ee4\u6ce2\u5668\uff0c\u5e76\u56fe\u793a\u6ee4\u6ce2\u5668\u7684\u632f\u5e45\u7279\u6027\uff0c\u68c0\u9a8c \\omega_p \\omega_p \uff0c \\omega_s \\omega_s \u5bf9\u5e94\u7684\u8870\u51cf\u3002 clear; wp = 2*pi*3*10^3; ws = 2*pi*4.5*10^3; ap = 1; as = 15; Fs = 30*10^3; %\u91c7\u6837\u9891\u7387 wp1 = wp/Fs; ws1 = ws/Fs; %\u6570\u5b57\u9891\u7387 [N,WC] = cheb1ord(wp,ws,ap,as,'s'); %\u786e\u5207\u6bd4\u96ea\u592b\u4f4e\u901a\u9636\u6570\u622a\u6b62\u9891\u7387 [b,a] = cheby1(N,ap,WC,'low','s'); %\u8c03\u7528\u51fd\u6570\u8bbe\u8ba1\u591a\u9879\u5f0f\u7cfb\u6570 [bz,az] = impinvar(b,a,Fs); %\u8109\u51b2\u54cd\u5e94\u4e0d\u53d8\u6cd5\u5b9e\u73b0\u6570\u5b57\u4f4e\u901a w0 = [wp1,ws1]; Hx = freqz(bz,az,w0); %\u8fd4\u56de\u7279\u5b9a\u7684\u7684\u9891\u7387\u54cd\u5e94\u7279\u6027 [H,W] = freqz(bz,az); %\u5f97\u5230bz\u5230az\u5b8c\u6574\u7684\u9891\u7387\u54cd\u5e94\u7279\u6027 dbHx = -20*log10(abs(Hx)/max(abs(H))) %\u6c42wp,ws\u5bf9\u5e94\u7684\u8870\u51cf plot(W,abs(H)); title('\u56fe1.1\uff1a\u5207\u6bd4\u96ea\u592b\u6570\u5b57\u4f4e\u901a\u6ee4\u6ce2\u5668'); xlabel('\u76f8\u5bf9\u9891\u7387');ylabel('\u5e45\u9891'); grid on; \u8f93\u51fa\uff1a dbHx = 1.0005 21.5790 \u7ed3\u679c\u5982\u56fe1.1 \u7528\u53cc\u7ebf\u6027\u53d8\u6362\u6cd5\u8bbe\u8ba1\u4e00\u4e2a\u5207\u6bd4\u96ea\u592b\u2160\u578b\u6570\u5b57\u9ad8\u901a\u6ee4\u6ce2\u5668\u3002\u6280\u672f\u6307\u6807\u4e3a:\u91c7\u6837\u9891\u7387 f_c = 2kHz f_c = 2kHz \uff0c\u901a\u5e26\u622a\u6b62\u9891\u7387 f_p = 700Hz f_p = 700Hz \uff0c\u901a\u5e26\u6700\u5927\u8870\u51cf a_p \\le 1dB a_p \\le 1dB \uff1b\u963b\u5e26\u8fb9\u7f18\u9891\u7387 f_s = 500Hz f_s = 500Hz \uff0c\u6700\u5e26\u6700\u5c0f\u8870\u51cf a_s \\ge 32dB a_s \\ge 32dB \u3002 fp=700;fs=500;ap=1;as=32; wp=2*pi*fp; ws=2*pi*fs; Fc=2000; wp1=wp/Fc;ws1=ws/Fc; omp1=2*Fc*tan(wp1/2); omps=2*Fc*tan(ws1/2); [N,WC]=cheb1ord(omp1,omps,ap,as,'s'); [b,a]=cheby1(N,ap,WC,'high','s'); [bz,az]=bilinear(b,a,Fc); w0=[wp1,ws1]; Hx=freqz(bz,az,w0); [H,W]=freqz(bz,az); dbHx=-20*log10(abs(Hx)/max(abs(H))) plot(W,abs(H)); title('\u56fe1.2\uff1a\u5207\u6bd4\u96ea\u592b1\u578b\u9ad8\u901a\u6ee4\u6ce2\u5668') xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('\u5e45\u9891'); grid on; \u8f93\u51fa\uff1a dbHx = 1.0000 33.1098 \u7ed3\u679c\u5982\u56fe1.2 \u7a97\u51fd\u6570\u6cd5\u8bbe\u8ba1FIR\u6570\u5b57\u6ee4\u6ce2\u5668 \u6839\u636e\u4e0b\u5217\u6307\u6807\u91c7\u7528\u7a97\u51fd\u6570\u6cd5\u8bbe\u8ba1\u4f4e\u901a\u6570\u5b57\u6ee4\u6ce2\u5668\uff0c\u901a\u5e26\u622a\u6b62\u9891\u7387 \\omega_p = 0.2\\pi \\omega_p = 0.2\\pi \uff0c\u963b\u5e26\u622a\u81f3\u9891\u7387 \\omega_s = 0.3\\pi \\omega_s = 0.3\\pi \uff0c\u901a\u5e26\u6700\u5927\u8870\u51cf 0.25dB 0.25dB \uff0c\u963b\u5e26\u6700\u5c0f\u8870\u51cf 50dB 50dB \u3002 (1)\u5206\u522b\u5229\u7528\u6c49\u660e\u7a97\u3001\u5e03\u83b1\u514b\u66fc\u7a97\u548c\u51ef\u6cfd\u7a97\u8bbe\u8ba1\u8be5\u6ee4\u6ce2\u5668\uff0c\u4e14\u6ee4\u6ce2\u5668\u5177\u6709\u7ebf\u6027\u76f8\u4f4d\u3002\u6c47\u51fa\u8109\u51b2\u76f8\u5e94h(n)\u53ca\u6ee4\u6ce2\u5668\u7684\u9891\u7387\u54cd\u5e94\u3002 N = \\frac{4\\pi}{\\omega_s - \\omega_p} = 40 N = \\frac{4\\pi}{\\omega_s - \\omega_p} = 40 N=40; wc=0.3; figure(1) subplot(211); h=fir1(N-1,wc,'low',hamming(N)); stem(h); title('\u56fe2.1.1\uff1a\u6c49\u660e\u7a97\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684\u8109\u51b2\u54cd\u5e94'),grid; xlabel('n'),ylabel('\u5e45\u5ea6h(n)'); subplot(212); [H,W]=freqz(h,1); plot(W/pi,abs(H)); title('\u56fe2.1.2\uff1a\u6c49\u660e\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); figure(2) subplot(211); h=fir1(N-1,wc,'low',blackman(N)); stem(h); title('\u56fe2.1.3\uff1a\u5e03\u83b1\u514b\u66fc\u7a97\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684\u8109\u51b2\u54cd\u5e94'),grid; xlabel('n'),ylabel('\u5e45\u5ea6h(n)'); subplot(212); [H,W]=freqz(h,1); plot(W/pi,abs(H)); title('\u56fe2.1.4\uff1a\u5e03\u83b1\u514b\u66fc\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); figure(3) subplot(211); h=fir1(N-1,wc,'low',kaiser(N)); stem(h); title('\u56fe2.1.5\uff1a\u51ef\u6cfd\u7a97\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684\u8109\u51b2\u54cd\u5e94'),grid; xlabel('n'),ylabel('\u5e45\u5ea6h(n)'); subplot(212); [H,W]=freqz(h,1); plot(W/pi,abs(H)); title('\u56fe2.1.6\uff1a\u51ef\u6cfd\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); \u7ed3\u679c\u5982\u56fe2.1.1-2.1.6 (2)\u589e\u52a0N\uff0c\u89c2\u5bdf\u8fc7\u6e21\u5e26\u548c\u6700\u5927\u80a9\u5cf0\u503c\u7684\u53d8\u5316\u3002 N=51; wc=0.3; figure(1) h=fir1(N-1,wc,'low',hamming(N)); [H,W]=freqz(h,1); subplot(211); plot(W/pi,abs(H)); title('\u56fe2.2.1\uff1aN=51\u65f6\u6c49\u660e\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); N=101; h=fir1(N-1,wc,'low',hamming(N)); [H,W]=freqz(h,1); subplot(212); plot(W/pi,abs(H)); title('\u56fe2.2.2\uff1aN=101\u6c49\u660e\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); N=51; figure(2) h=fir1(N-1,wc,'low',blackman(N)); [H,W]=freqz(h,1); subplot(211); plot(W/pi,abs(H)); title('\u56fe2.2.3\uff1aN=51\u5e03\u83b1\u514b\u66fc\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); N=101; h=fir1(N-1,wc,'low',blackman(N)); [H,W]=freqz(h,1); subplot(212); plot(W/pi,abs(H)); title('\u56fe2.2.4\uff1aN=101\u5e03\u83b1\u514b\u66fc\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); N=51; figure(3) h=fir1(N-1,wc,'low',kaiser(N)); [H,W]=freqz(h,1); subplot(211); plot(W/pi,abs(H)); title('\u56fe2.2.5\uff1aN=51\u51ef\u6cfd\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); N=101; h=fir1(N-1,wc,'low',kaiser(N)); [H,W]=freqz(h,1); subplot(212); plot(W/pi,abs(H)); title('\u56fe2.2.6\uff1aN=101\u51ef\u6cfd\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); \u7ed3\u679c\u5982\u56fe2.2.1-2.1.6 \u5229\u7528\u6c49\u660e\u7a97\u8bbe\u8ba1\u6570\u5b57\u5fae\u5206\u5668\uff0c H_d(\\omega) = \\begin{cases} j\\omega ,& 0 < \\omega \\le \\pi \\\\ -j\\omega ,& -\\pi < \\omega < 0 \\end{cases} H_d(\\omega) = \\begin{cases} j\\omega ,& 0 < \\omega \\le \\pi \\\\ -j\\omega ,& -\\pi < \\omega < 0 \\end{cases} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">H_d(\\omega) = \\begin{cases} j\\omega ,&amp; 0 &lt; \\omega \\le \\pi \\\\ -j\\omega ,&amp; -\\pi &lt; \\omega &lt; 0 \\end{cases}</span><script type=\"math/tex\">H_d(\\omega) = \\begin{cases} j\\omega ,& 0 < \\omega \\le \\pi \\\\ -j\\omega ,& -\\pi < \\omega < 0 \\end{cases} \u8981\u6c42N=21\uff0c\u4e14\u6ee4\u6ce2\u5668\u5177\u6709\u7ebf\u6027\u76f8\u4f4d\u3002 clear; dt = 1; N = 21; x_t = 0:dt:N-dt; h1 = (-1+exp(1j.*pi.*x_t).*(1-1j.*pi.*x_t))./(x_t.^2)+(-1+exp(-1j.*pi.*x_t).*(1+1j.*pi.*x_t))./(x_t.^2); h1(1)=10; w=hamming(N/dt); h=h1.*w'; figure(1) subplot(311); stem(x_t,h); title('\u56fe2.3.1\u6c49\u5b81\u7a97\u5355\u4f4d\u8109\u51b2\u54cd\u5e94'); [H, W]=dtft(h,512);%DTFT subplot(312); plot(W/pi,abs(H)); title('\u56fe2.3.2\uff1a\u5e45\u9891\u7279\u6027'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(313); plot(W/pi,angle(H)); title('\u56fe2.3.3\uff1a\u5e45\u9891\u7279\u6027'); xlabel('w'),ylabel('\u5f27\u5ea6'); 6. \u5b9e\u9a8c\u7ed3\u679c\u603b\u7ed3 7. \u7ed3\u679c\u5206\u6790 IIR\u6570\u5b57\u6ee4\u6ce2\u5668\u7684\u8bbe\u8ba1 dbHx \u4e2d1.0005\u4e0e21.5790\u4e3a w_p w_p \uff0c w_s w_s \u5904\u7684\u8870\u51cf\u3002 a_p = 1.0005 a_p = 1.0005 \u8fd1\u4f3c\u7b49\u4e8e1\uff0c a_s = 21.5790 > 15 a_s = 21.5790 > 15 \u6545\u6ee1\u8db3\u8981\u6c42\u3002 \u53cc\u7ebf\u6027\u53d8\u6362\u6cd5\u8bbe\u8ba1\u4e00\u4e2a\u5207\u6bd4\u96ea\u592b\u2160\u578b\u6570\u5b57\u9ad8\u901a\u6ee4\u6ce2\u5668\uff0c dbHx \u4e2d1.0000\u4e0e33.1098\u4e3a w_p w_p \uff0c w_s w_s \u5904\u7684\u8870\u51cf\u3002 a_p = 1.0000 a_p = 1.0000 \u7b49\u4e8e1\uff0c as = 33.1098 > 32 as = 33.1098 > 32 \u6545\u6ee1\u8db3\u8981\u6c42\u3002 \u7a97\u51fd\u6570\u6cd5\u8bbe\u8ba1FIR\u6570\u5b57\u6ee4\u6ce2\u5668 \u5f53\u589e\u5927 N N \u503c\u65f6\uff0c\u632f\u5e45\u7279\u6027\u66f2\u7ebf\u8fc7\u6e21\u5e26\u7684\u8870\u51cf\u5c06\u4f1a\u53d8\u5927\uff0c\u800c\u6700\u5927\u80a9\u5cf0\u503c\u57fa\u672c\u4fdd\u6301\u4e0d\u53d8\u3002 \u7531 \\frac{1}{2\\pi}(\\int_{-\\pi}^{0} -j\\omega e^{j\\omega n} \\mathrm{d} \\omega + \\int_{0}^{\\pi} j\\omega e^{j\\omega n} \\mathrm{d} \\omega) = \\frac{-1 + e^{j\\pi n}(1 - j\\pi n)}{n^2} + \\frac{-1 + e^{-j\\pi n}(1 + j\\pi n)}{n^2} \\frac{1}{2\\pi}(\\int_{-\\pi}^{0} -j\\omega e^{j\\omega n} \\mathrm{d} \\omega + \\int_{0}^{\\pi} j\\omega e^{j\\omega n} \\mathrm{d} \\omega) = \\frac{-1 + e^{j\\pi n}(1 - j\\pi n)}{n^2} + \\frac{-1 + e^{-j\\pi n}(1 + j\\pi n)}{n^2} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">\\frac{1}{2\\pi}(\\int_{-\\pi}^{0} -j\\omega e^{j\\omega n} \\mathrm{d} \\omega + \\int_{0}^{\\pi} j\\omega e^{j\\omega n} \\mathrm{d} \\omega) = \\frac{-1 + e^{j\\pi n}(1 - j\\pi n)}{n^2} + \\frac{-1 + e^{-j\\pi n}(1 + j\\pi n)}{n^2}</span><script type=\"math/tex\">\\frac{1}{2\\pi}(\\int_{-\\pi}^{0} -j\\omega e^{j\\omega n} \\mathrm{d} \\omega + \\int_{0}^{\\pi} j\\omega e^{j\\omega n} \\mathrm{d} \\omega) = \\frac{-1 + e^{j\\pi n}(1 - j\\pi n)}{n^2} + \\frac{-1 + e^{-j\\pi n}(1 + j\\pi n)}{n^2} \u5f97\u5230 h(n) h(n) \uff0c\u518dDTFT\uff0c\u6700\u540e\u5f97\u5230\u56fe\u5f62\uff0c\u4f46\u5fae\u5206\u5668\u5e94\u8be5\u4e0d\u5177\u6709\u7ebf\u6027\u76f8\u4f4d\uff0c\u6240\u4ee5\u8fd9\u9053\u9898\u6ca1\u770b\u61c2\uff0c\u4ee5\u540e\u518d\u8bf4\u3002 8.\u5fc3\u5f97\u4f53\u4f1a \u5b66\u4f1a\u4e86\u7528matlab\u51fd\u6570\u8bbe\u8ba1\u6570\u5b57\u6ee4\u6ce2\u5668\u3002 \u5bf9IIR\u548cFIR\u6ee4\u6ce2\u5668\u539f\u7406\u6709\u66f4\u597d\u7684\u7406\u89e3\u3002","title":"\u79bb\u6563\u65f6\u95f4\u6ee4\u6ce2\u5668\u8bbe\u8ba1"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#_1","text":"","title":"\u79bb\u6563\u65f6\u95f4\u6ee4\u6ce2\u5668\u8bbe\u8ba1"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#1","text":"\u79bb\u6563\u65f6\u95f4\u6ee4\u6ce2\u5668\u8bbe\u8ba1","title":"1. \u5b9e\u9a8c\u9879\u76ee\u540d\u79f0"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#2","text":"\u8bbe\u8ba1\u548c\u5206\u6790\u4e00\u7ec4\u6ee4\u6ce2\u5668\uff0c\u83b7\u5f97\u5bf9\u8bbe\u8ba1\u8fc7\u7a0b\u7684\u6df1\u5165\u8ba4\u8bc6\uff0c\u5e76\u4e14\u638c\u63e1\u51e0\u79cd\u6807\u51c6\u8bbe\u8ba1\u65b9\u6cd5\u7684\u7279\u70b9\uff0c\u8981\u6c42\u5408\u7ec4\u8ba8\u8bba\uff0c\u5355\u72ec\u5b9e\u9a8c\uff0c2\u5b66\u65f6\u3002","title":"2.\u5b9e\u9a8c\u76ee\u7684"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#3","text":"","title":"3. \u5b9e\u9a8c\u5185\u5bb9\u4e0e\u6b65\u9aa4"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#iir","text":"\u8109\u51b2\u54cd\u5e94\u4e0d\u53d8\u6cd5\u53d8\u6362\u539f\u7406\uff1a \u8109\u51b2\u76f8\u5e94\u4e0d\u53d8\u6cd5\u5c06\u6a21\u62df\u6ee4\u6ce2\u5668\u7684 s s \u5e73\u9762\u53d8\u6362\u6210\u6570\u5b57\u6ee4\u6ce2\u5668\u7684 z z \u5e73\u9762\uff0c\u4ece\u800c\u5c06\u6a21\u62df\u6ee4\u6ce2\u5668\u6620\u5c04\u6210\u6570\u5b57\u6ee4\u6ce2\u5668 IIR\u6570\u5b57\u6ee4\u6ce2\u5668\u8bbe\u8ba1\u7684\u91cd\u8981\u73af\u8282\u662f\u6a21\u62df\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684\u8bbe\u8ba1\uff0c\u5178\u578b\u7684\u6a21\u62df\u4f4e\u901a\u6ee4\u6ce2\u5668\u7531\u5df4\u7279\u6c83\u601d\u548c\u5207\u6bd4\u96ea\u592b(\u2160\u578b\u548c\u2161\u578b)\u7b49\u6ee4\u6ce2\u5668\u3002\u7531\u6a21\u62df\u4f4e\u901a\u6ee4\u6ce2\u5668\u7ecf\u8fc7\u76f8\u5e94\u7684\u590d\u9891\u7387\u8f6c\u6362\u4e3a H(s) H(s) \uff0c\u7531 H(s) H(s) \u7ecf\u8fc7\u8109\u51b2\u76f8\u5e94\u4e0d\u53d8\u6cd5\u5c31\u5f97\u5230\u4e86\u6240\u9700\u8981\u7684IIR\u6570\u5b57\u6ee4\u6ce2\u5668 H(z) H(z) \u3002 \u53cc\u7ebf\u6027\u53d8\u6362\u6cd5\u539f\u7406 \u4e3a\u514b\u670d\u8109\u51b2\u54cd\u5e94\u4e0d\u53d8\u6cd5\u4ea7\u751f\u9891\u7387\u76f8\u5e94\u7684\u6df7\u53e0\u5931\u771f\uff0c\u53ef\u4ee5\u91c7\u7528\u975e\u7ebf\u6027\u9891\u7387\u538b\u7f29\u65b9\u6cd5\uff0c\u4f7fs\u5e73\u9762\u4e0ez\u5e73\u9762\u5efa\u7acb\u4e86\u4e00\u4e00\u5bf9\u5e94\u7684\u5355\u503c\u5173\u7cfb\uff0c\u6d88\u9664\u4e86\u591a\u503c\u53d8\u6362\u6027\uff0c\u4e5f\u5c31\u6d88\u9664\u4e86\u9891\u8c31\u6df7\u53e0\u73b0\u8c61\uff0c\u8fd9\u5c31\u662f\u53cc\u7ebf\u6027\u53d8\u6362\u6cd5\u3002 \u5b9e\u9a8c\u5185\u5bb9\uff1a \u8981\u6c42\u901a\u5e26\u622a\u6b62\u9891\u7387 f_p = 3kHz f_p = 3kHz \uff0c\u901a\u5e26\u6700\u5927\u8870\u51cf a_p = 1dB a_p = 1dB \uff0c\u963b\u5e26\u622a\u6b62\u9891\u7387 f_s = 4.5kHz f_s = 4.5kHz \uff0c\u963b\u5e26\u6700\u5c0f\u8870\u51cf a_s = 15dB a_s = 15dB \uff0c\u91c7\u6837\u9891\u7387 f_c = 30kHz f_c = 30kHz \uff0c\u7528\u8109\u51b2\u54cd\u5e94\u4e0d\u53d8\u6cd5\u8bbe\u8ba1\u4e00\u4e2a\u5207\u6bd4\u96ea\u592b\u6570\u5b57\u4f4e\u901a\u6ee4\u6ce2\u5668\uff0c\u5e76\u56fe\u793a\u6ee4\u6ce2\u5668\u7684\u632f\u5e45\u7279\u6027\uff0c\u68c0\u9a8c \\omega_p \\omega_p \uff0c \\omega_s \\omega_s \u5bf9\u5e94\u7684\u8870\u51cf\u3002 \u7528\u53cc\u7ebf\u6027\u53d8\u6362\u6cd5\u8bbe\u8ba1\u4e00\u4e2a\u5207\u6bd4\u96ea\u592b\u2160\u578b\u6570\u5b57\u9ad8\u901a\u6ee4\u6ce2\u5668\u3002\u6280\u672f\u6307\u6807\u4e3a:\u91c7\u6837\u9891\u7387 f_c = 2kHz f_c = 2kHz \uff0c\u901a\u5e26\u622a\u6b62\u9891\u7387 f_p = 700Hz f_p = 700Hz \uff0c\u901a\u5e26\u6700\u5927\u8870\u51cf a_p \\le 1dB a_p \\le 1dB \uff1b\u963b\u5e26\u8fb9\u7f18\u9891\u7387 f_s = 500Hz f_s = 500Hz \uff0c\u6700\u5e26\u6700\u5c0f\u8870\u51cf a_s \\ge 32dB a_s \\ge 32dB \u3002","title":"IIR\u6570\u5b57\u6ee4\u6ce2\u5668\u7684\u8bbe\u8ba1"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#fir","text":"\u8bbe\u8ba1\u539f\u7406 FIR\u6ee4\u6ce2\u5668\u7684\u8bbe\u8ba1\u95ee\u9898\uff0c\u5c31\u662f\u8981\u662f\u6240\u8bbe\u8ba1\u7684FIR\u6ee4\u6ce2\u5668\u7684\u9891\u7387\u54cd\u5e94 H(e^{j\\omega}) H(e^{j\\omega}) \u903c\u8fd1\u6240\u8981\u6c42\u7684\u7406\u60f3\u6ee4\u6ce2\u5668\u7684\u9891\u7387\u54cd\u5e94 H_d(e^{j\\omega}) H_d(e^{j\\omega}) \u3002\u903c\u8fd1\u53ef\u5728\u65f6\u57df\u8fdb\u884c\uff0c\u4e5f\u53ef\u5728\u9891\u57df\u8fdb\u884c\u3002\u7a97\u51fd\u6570\u6cd5\u8bbe\u8ba1FIR\u6570\u5b57\u6ee4\u6ce2\u5668\u5b9e\u5728\u65f6\u57df\u8fdb\u884c\u7684\uff0c\u7528\u7a97\u51fd\u6570\u622a\u53d6\u65e0\u9650\u957f\u7684 h_d(n) h_d(n) \uff0c\u8fd9\u6837\u5f97\u5230\u7684\u9891\u7387\u54cd\u5e94 H(e^{j\\omega}) H(e^{j\\omega}) \u903c\u8fd1\u4e8e\u7406\u60f3\u7684\u9891\u7387\u54cd\u5e94 H_d(e^{j\\omega}) H_d(e^{j\\omega}) \u3002 \u5b9e\u9a8c\u5185\u5bb9\uff1a \u6839\u636e\u4e0b\u5217\u6307\u6807\u91c7\u7528\u7a97\u51fd\u6570\u6cd5\u8bbe\u8ba1\u4f4e\u901a\u6570\u5b57\u6ee4\u6ce2\u5668\uff0c\u901a\u5e26\u622a\u6b62\u9891\u7387 \\omega_p = 0.2\\pi \\omega_p = 0.2\\pi \uff0c\u963b\u5e26\u622a\u81f3\u9891\u7387 \\omega_s = 0.3\\pi \\omega_s = 0.3\\pi \uff0c\u901a\u5e26\u6700\u5927\u8870\u51cf 0.25dB 0.25dB \uff0c\u963b\u5e26\u6700\u5c0f\u8870\u51cf 50dB 50dB \u3002 (1)\u5206\u522b\u5229\u7528\u6c49\u660e\u7a97\u3001\u5e03\u83b1\u514b\u66fc\u7a97\u548c\u51ef\u6cfd\u7a97\u8bbe\u8ba1\u8be5\u6ee4\u6ce2\u5668\uff0c\u4e14\u6ee4\u6ce2\u5668\u5177\u6709\u7ebf\u6027\u76f8\u4f4d\u3002\u6c47\u51fa\u8109\u51b2\u76f8\u5e94h(n)\u53ca\u6ee4\u6ce2\u5668\u7684\u9891\u7387\u54cd\u5e94\u3002 (2)\u589e\u52a0N\uff0c\u89c2\u5bdf\u8fc7\u6e21\u5e26\u548c\u6700\u5927\u80a9\u5cf0\u503c\u7684\u53d8\u5316\u3002 \u5229\u7528\u6c49\u660e\u7a97\u8bbe\u8ba1\u6570\u5b57\u5fae\u5206\u5668\uff0c H_d(\\omega) = \\begin{cases} j\\omega ,& 0 < \\omega \\le \\pi \\\\ -j\\omega ,& -\\pi < \\omega < 0 \\end{cases} H_d(\\omega) = \\begin{cases} j\\omega ,& 0 < \\omega \\le \\pi \\\\ -j\\omega ,& -\\pi < \\omega < 0 \\end{cases} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">H_d(\\omega) = \\begin{cases} j\\omega ,&amp; 0 &lt; \\omega \\le \\pi \\\\ -j\\omega ,&amp; -\\pi &lt; \\omega &lt; 0 \\end{cases}</span><script type=\"math/tex\">H_d(\\omega) = \\begin{cases} j\\omega ,& 0 < \\omega \\le \\pi \\\\ -j\\omega ,& -\\pi < \\omega < 0 \\end{cases} \u8981\u6c42N=21\uff0c\u4e14\u6ee4\u6ce2\u5668\u5177\u6709\u7ebf\u6027\u76f8\u4f4d\u3002","title":"\u7a97\u51fd\u6570\u6cd5\u8bbe\u8ba1FIR\u6570\u5b57\u6ee4\u6ce2\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#4","text":"MATLAB R2019b","title":"4. \u5b9e\u9a8c\u73af\u5883"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#5","text":"","title":"5. \u5b9e\u9a8c\u8fc7\u7a0b\u4e0e\u5206\u6790\u7a0b\u5e8f\u6587\u672c"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#iir_1","text":"\u8981\u6c42\u901a\u5e26\u622a\u6b62\u9891\u7387 f_p = 3kHz f_p = 3kHz \uff0c\u901a\u5e26\u6700\u5927\u8870\u51cf a_p = 1dB a_p = 1dB \uff0c\u963b\u5e26\u622a\u6b62\u9891\u7387 f_s = 4.5kHz f_s = 4.5kHz \uff0c\u963b\u5e26\u6700\u5c0f\u8870\u51cf a_s = 15dB a_s = 15dB \uff0c\u91c7\u6837\u9891\u7387 f_c = 30kHz f_c = 30kHz \uff0c\u7528\u8109\u51b2\u54cd\u5e94\u4e0d\u53d8\u6cd5\u8bbe\u8ba1\u4e00\u4e2a\u5207\u6bd4\u96ea\u592b\u6570\u5b57\u4f4e\u901a\u6ee4\u6ce2\u5668\uff0c\u5e76\u56fe\u793a\u6ee4\u6ce2\u5668\u7684\u632f\u5e45\u7279\u6027\uff0c\u68c0\u9a8c \\omega_p \\omega_p \uff0c \\omega_s \\omega_s \u5bf9\u5e94\u7684\u8870\u51cf\u3002 clear; wp = 2*pi*3*10^3; ws = 2*pi*4.5*10^3; ap = 1; as = 15; Fs = 30*10^3; %\u91c7\u6837\u9891\u7387 wp1 = wp/Fs; ws1 = ws/Fs; %\u6570\u5b57\u9891\u7387 [N,WC] = cheb1ord(wp,ws,ap,as,'s'); %\u786e\u5207\u6bd4\u96ea\u592b\u4f4e\u901a\u9636\u6570\u622a\u6b62\u9891\u7387 [b,a] = cheby1(N,ap,WC,'low','s'); %\u8c03\u7528\u51fd\u6570\u8bbe\u8ba1\u591a\u9879\u5f0f\u7cfb\u6570 [bz,az] = impinvar(b,a,Fs); %\u8109\u51b2\u54cd\u5e94\u4e0d\u53d8\u6cd5\u5b9e\u73b0\u6570\u5b57\u4f4e\u901a w0 = [wp1,ws1]; Hx = freqz(bz,az,w0); %\u8fd4\u56de\u7279\u5b9a\u7684\u7684\u9891\u7387\u54cd\u5e94\u7279\u6027 [H,W] = freqz(bz,az); %\u5f97\u5230bz\u5230az\u5b8c\u6574\u7684\u9891\u7387\u54cd\u5e94\u7279\u6027 dbHx = -20*log10(abs(Hx)/max(abs(H))) %\u6c42wp,ws\u5bf9\u5e94\u7684\u8870\u51cf plot(W,abs(H)); title('\u56fe1.1\uff1a\u5207\u6bd4\u96ea\u592b\u6570\u5b57\u4f4e\u901a\u6ee4\u6ce2\u5668'); xlabel('\u76f8\u5bf9\u9891\u7387');ylabel('\u5e45\u9891'); grid on; \u8f93\u51fa\uff1a dbHx = 1.0005 21.5790 \u7ed3\u679c\u5982\u56fe1.1 \u7528\u53cc\u7ebf\u6027\u53d8\u6362\u6cd5\u8bbe\u8ba1\u4e00\u4e2a\u5207\u6bd4\u96ea\u592b\u2160\u578b\u6570\u5b57\u9ad8\u901a\u6ee4\u6ce2\u5668\u3002\u6280\u672f\u6307\u6807\u4e3a:\u91c7\u6837\u9891\u7387 f_c = 2kHz f_c = 2kHz \uff0c\u901a\u5e26\u622a\u6b62\u9891\u7387 f_p = 700Hz f_p = 700Hz \uff0c\u901a\u5e26\u6700\u5927\u8870\u51cf a_p \\le 1dB a_p \\le 1dB \uff1b\u963b\u5e26\u8fb9\u7f18\u9891\u7387 f_s = 500Hz f_s = 500Hz \uff0c\u6700\u5e26\u6700\u5c0f\u8870\u51cf a_s \\ge 32dB a_s \\ge 32dB \u3002 fp=700;fs=500;ap=1;as=32; wp=2*pi*fp; ws=2*pi*fs; Fc=2000; wp1=wp/Fc;ws1=ws/Fc; omp1=2*Fc*tan(wp1/2); omps=2*Fc*tan(ws1/2); [N,WC]=cheb1ord(omp1,omps,ap,as,'s'); [b,a]=cheby1(N,ap,WC,'high','s'); [bz,az]=bilinear(b,a,Fc); w0=[wp1,ws1]; Hx=freqz(bz,az,w0); [H,W]=freqz(bz,az); dbHx=-20*log10(abs(Hx)/max(abs(H))) plot(W,abs(H)); title('\u56fe1.2\uff1a\u5207\u6bd4\u96ea\u592b1\u578b\u9ad8\u901a\u6ee4\u6ce2\u5668') xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('\u5e45\u9891'); grid on; \u8f93\u51fa\uff1a dbHx = 1.0000 33.1098 \u7ed3\u679c\u5982\u56fe1.2","title":"IIR\u6570\u5b57\u6ee4\u6ce2\u5668\u7684\u8bbe\u8ba1"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#fir_1","text":"\u6839\u636e\u4e0b\u5217\u6307\u6807\u91c7\u7528\u7a97\u51fd\u6570\u6cd5\u8bbe\u8ba1\u4f4e\u901a\u6570\u5b57\u6ee4\u6ce2\u5668\uff0c\u901a\u5e26\u622a\u6b62\u9891\u7387 \\omega_p = 0.2\\pi \\omega_p = 0.2\\pi \uff0c\u963b\u5e26\u622a\u81f3\u9891\u7387 \\omega_s = 0.3\\pi \\omega_s = 0.3\\pi \uff0c\u901a\u5e26\u6700\u5927\u8870\u51cf 0.25dB 0.25dB \uff0c\u963b\u5e26\u6700\u5c0f\u8870\u51cf 50dB 50dB \u3002 (1)\u5206\u522b\u5229\u7528\u6c49\u660e\u7a97\u3001\u5e03\u83b1\u514b\u66fc\u7a97\u548c\u51ef\u6cfd\u7a97\u8bbe\u8ba1\u8be5\u6ee4\u6ce2\u5668\uff0c\u4e14\u6ee4\u6ce2\u5668\u5177\u6709\u7ebf\u6027\u76f8\u4f4d\u3002\u6c47\u51fa\u8109\u51b2\u76f8\u5e94h(n)\u53ca\u6ee4\u6ce2\u5668\u7684\u9891\u7387\u54cd\u5e94\u3002 N = \\frac{4\\pi}{\\omega_s - \\omega_p} = 40 N = \\frac{4\\pi}{\\omega_s - \\omega_p} = 40 N=40; wc=0.3; figure(1) subplot(211); h=fir1(N-1,wc,'low',hamming(N)); stem(h); title('\u56fe2.1.1\uff1a\u6c49\u660e\u7a97\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684\u8109\u51b2\u54cd\u5e94'),grid; xlabel('n'),ylabel('\u5e45\u5ea6h(n)'); subplot(212); [H,W]=freqz(h,1); plot(W/pi,abs(H)); title('\u56fe2.1.2\uff1a\u6c49\u660e\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); figure(2) subplot(211); h=fir1(N-1,wc,'low',blackman(N)); stem(h); title('\u56fe2.1.3\uff1a\u5e03\u83b1\u514b\u66fc\u7a97\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684\u8109\u51b2\u54cd\u5e94'),grid; xlabel('n'),ylabel('\u5e45\u5ea6h(n)'); subplot(212); [H,W]=freqz(h,1); plot(W/pi,abs(H)); title('\u56fe2.1.4\uff1a\u5e03\u83b1\u514b\u66fc\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); figure(3) subplot(211); h=fir1(N-1,wc,'low',kaiser(N)); stem(h); title('\u56fe2.1.5\uff1a\u51ef\u6cfd\u7a97\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684\u8109\u51b2\u54cd\u5e94'),grid; xlabel('n'),ylabel('\u5e45\u5ea6h(n)'); subplot(212); [H,W]=freqz(h,1); plot(W/pi,abs(H)); title('\u56fe2.1.6\uff1a\u51ef\u6cfd\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); \u7ed3\u679c\u5982\u56fe2.1.1-2.1.6 (2)\u589e\u52a0N\uff0c\u89c2\u5bdf\u8fc7\u6e21\u5e26\u548c\u6700\u5927\u80a9\u5cf0\u503c\u7684\u53d8\u5316\u3002 N=51; wc=0.3; figure(1) h=fir1(N-1,wc,'low',hamming(N)); [H,W]=freqz(h,1); subplot(211); plot(W/pi,abs(H)); title('\u56fe2.2.1\uff1aN=51\u65f6\u6c49\u660e\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); N=101; h=fir1(N-1,wc,'low',hamming(N)); [H,W]=freqz(h,1); subplot(212); plot(W/pi,abs(H)); title('\u56fe2.2.2\uff1aN=101\u6c49\u660e\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); N=51; figure(2) h=fir1(N-1,wc,'low',blackman(N)); [H,W]=freqz(h,1); subplot(211); plot(W/pi,abs(H)); title('\u56fe2.2.3\uff1aN=51\u5e03\u83b1\u514b\u66fc\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); N=101; h=fir1(N-1,wc,'low',blackman(N)); [H,W]=freqz(h,1); subplot(212); plot(W/pi,abs(H)); title('\u56fe2.2.4\uff1aN=101\u5e03\u83b1\u514b\u66fc\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); N=51; figure(3) h=fir1(N-1,wc,'low',kaiser(N)); [H,W]=freqz(h,1); subplot(211); plot(W/pi,abs(H)); title('\u56fe2.2.5\uff1aN=51\u51ef\u6cfd\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); N=101; h=fir1(N-1,wc,'low',kaiser(N)); [H,W]=freqz(h,1); subplot(212); plot(W/pi,abs(H)); title('\u56fe2.2.6\uff1aN=101\u51ef\u6cfd\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); \u7ed3\u679c\u5982\u56fe2.2.1-2.1.6 \u5229\u7528\u6c49\u660e\u7a97\u8bbe\u8ba1\u6570\u5b57\u5fae\u5206\u5668\uff0c H_d(\\omega) = \\begin{cases} j\\omega ,& 0 < \\omega \\le \\pi \\\\ -j\\omega ,& -\\pi < \\omega < 0 \\end{cases} H_d(\\omega) = \\begin{cases} j\\omega ,& 0 < \\omega \\le \\pi \\\\ -j\\omega ,& -\\pi < \\omega < 0 \\end{cases} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">H_d(\\omega) = \\begin{cases} j\\omega ,&amp; 0 &lt; \\omega \\le \\pi \\\\ -j\\omega ,&amp; -\\pi &lt; \\omega &lt; 0 \\end{cases}</span><script type=\"math/tex\">H_d(\\omega) = \\begin{cases} j\\omega ,& 0 < \\omega \\le \\pi \\\\ -j\\omega ,& -\\pi < \\omega < 0 \\end{cases} \u8981\u6c42N=21\uff0c\u4e14\u6ee4\u6ce2\u5668\u5177\u6709\u7ebf\u6027\u76f8\u4f4d\u3002 clear; dt = 1; N = 21; x_t = 0:dt:N-dt; h1 = (-1+exp(1j.*pi.*x_t).*(1-1j.*pi.*x_t))./(x_t.^2)+(-1+exp(-1j.*pi.*x_t).*(1+1j.*pi.*x_t))./(x_t.^2); h1(1)=10; w=hamming(N/dt); h=h1.*w'; figure(1) subplot(311); stem(x_t,h); title('\u56fe2.3.1\u6c49\u5b81\u7a97\u5355\u4f4d\u8109\u51b2\u54cd\u5e94'); [H, W]=dtft(h,512);%DTFT subplot(312); plot(W/pi,abs(H)); title('\u56fe2.3.2\uff1a\u5e45\u9891\u7279\u6027'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(313); plot(W/pi,angle(H)); title('\u56fe2.3.3\uff1a\u5e45\u9891\u7279\u6027'); xlabel('w'),ylabel('\u5f27\u5ea6');","title":"\u7a97\u51fd\u6570\u6cd5\u8bbe\u8ba1FIR\u6570\u5b57\u6ee4\u6ce2\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#6","text":"","title":"6. \u5b9e\u9a8c\u7ed3\u679c\u603b\u7ed3"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#7","text":"","title":"7. \u7ed3\u679c\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#iir_2","text":"dbHx \u4e2d1.0005\u4e0e21.5790\u4e3a w_p w_p \uff0c w_s w_s \u5904\u7684\u8870\u51cf\u3002 a_p = 1.0005 a_p = 1.0005 \u8fd1\u4f3c\u7b49\u4e8e1\uff0c a_s = 21.5790 > 15 a_s = 21.5790 > 15 \u6545\u6ee1\u8db3\u8981\u6c42\u3002 \u53cc\u7ebf\u6027\u53d8\u6362\u6cd5\u8bbe\u8ba1\u4e00\u4e2a\u5207\u6bd4\u96ea\u592b\u2160\u578b\u6570\u5b57\u9ad8\u901a\u6ee4\u6ce2\u5668\uff0c dbHx \u4e2d1.0000\u4e0e33.1098\u4e3a w_p w_p \uff0c w_s w_s \u5904\u7684\u8870\u51cf\u3002 a_p = 1.0000 a_p = 1.0000 \u7b49\u4e8e1\uff0c as = 33.1098 > 32 as = 33.1098 > 32 \u6545\u6ee1\u8db3\u8981\u6c42\u3002","title":"IIR\u6570\u5b57\u6ee4\u6ce2\u5668\u7684\u8bbe\u8ba1"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#fir_2","text":"\u5f53\u589e\u5927 N N \u503c\u65f6\uff0c\u632f\u5e45\u7279\u6027\u66f2\u7ebf\u8fc7\u6e21\u5e26\u7684\u8870\u51cf\u5c06\u4f1a\u53d8\u5927\uff0c\u800c\u6700\u5927\u80a9\u5cf0\u503c\u57fa\u672c\u4fdd\u6301\u4e0d\u53d8\u3002 \u7531 \\frac{1}{2\\pi}(\\int_{-\\pi}^{0} -j\\omega e^{j\\omega n} \\mathrm{d} \\omega + \\int_{0}^{\\pi} j\\omega e^{j\\omega n} \\mathrm{d} \\omega) = \\frac{-1 + e^{j\\pi n}(1 - j\\pi n)}{n^2} + \\frac{-1 + e^{-j\\pi n}(1 + j\\pi n)}{n^2} \\frac{1}{2\\pi}(\\int_{-\\pi}^{0} -j\\omega e^{j\\omega n} \\mathrm{d} \\omega + \\int_{0}^{\\pi} j\\omega e^{j\\omega n} \\mathrm{d} \\omega) = \\frac{-1 + e^{j\\pi n}(1 - j\\pi n)}{n^2} + \\frac{-1 + e^{-j\\pi n}(1 + j\\pi n)}{n^2} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">\\frac{1}{2\\pi}(\\int_{-\\pi}^{0} -j\\omega e^{j\\omega n} \\mathrm{d} \\omega + \\int_{0}^{\\pi} j\\omega e^{j\\omega n} \\mathrm{d} \\omega) = \\frac{-1 + e^{j\\pi n}(1 - j\\pi n)}{n^2} + \\frac{-1 + e^{-j\\pi n}(1 + j\\pi n)}{n^2}</span><script type=\"math/tex\">\\frac{1}{2\\pi}(\\int_{-\\pi}^{0} -j\\omega e^{j\\omega n} \\mathrm{d} \\omega + \\int_{0}^{\\pi} j\\omega e^{j\\omega n} \\mathrm{d} \\omega) = \\frac{-1 + e^{j\\pi n}(1 - j\\pi n)}{n^2} + \\frac{-1 + e^{-j\\pi n}(1 + j\\pi n)}{n^2} \u5f97\u5230 h(n) h(n) \uff0c\u518dDTFT\uff0c\u6700\u540e\u5f97\u5230\u56fe\u5f62\uff0c\u4f46\u5fae\u5206\u5668\u5e94\u8be5\u4e0d\u5177\u6709\u7ebf\u6027\u76f8\u4f4d\uff0c\u6240\u4ee5\u8fd9\u9053\u9898\u6ca1\u770b\u61c2\uff0c\u4ee5\u540e\u518d\u8bf4\u3002","title":"\u7a97\u51fd\u6570\u6cd5\u8bbe\u8ba1FIR\u6570\u5b57\u6ee4\u6ce2\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#8","text":"\u5b66\u4f1a\u4e86\u7528matlab\u51fd\u6570\u8bbe\u8ba1\u6570\u5b57\u6ee4\u6ce2\u5668\u3002 \u5bf9IIR\u548cFIR\u6ee4\u6ce2\u5668\u539f\u7406\u6709\u66f4\u597d\u7684\u7406\u89e3\u3002","title":"8.\u5fc3\u5f97\u4f53\u4f1a"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/","text":"\u62bd\u6837 1. \u5b9e\u9a8c\u9879\u76ee\u540d\u79f0 \u62bd\u6837 2. \u5b9e\u9a8c\u76ee\u7684 \u7814\u7a76\u62bd\u6837\u8fc7\u7a0b\uff0c\u5206\u6790\u4ea7\u751f\u6df7\u53e0\u6548\u5e94\u7684\u539f\u56e0\uff0c\u5b9e\u73b0\u4e0d\u540c\u91cd\u5efa\u65b9\u6848\uff0c\u8981\u6c421\u4eba1\u7ec4\uff0c2\u5b66\u65f6\u3002 3. \u5b9e\u9a8c\u5185\u5bb9\u4e0e\u6b65\u9aa4 \u62bd\u6837\u5f15\u8d77\u7684\u6df7\u53e0 \u5bf9\u8fde\u7eed\u6b63\u5f26\u4fe1\u53f7\u8003\u8651\u4e0b\u9762\u8868\u793a\u5f0f\uff1a x(t)=sin(2\\pi f_0+\\phi) x(t)=sin(2\\pi f_0+\\phi) \u53ef\u4ee5\u6309\u62bd\u6837\u9891\u7387 f_s=1/T_s f_s=1/T_s \u5bf9x(t)\u62bd\u6837\u6765\u83b7\u5f97\u79bb\u6563\u65f6\u95f4\u4fe1\u53f7 x[n]=x(t)|_{t=nT_s}=x(t)|_{t=n/f_s}=sin(2\\pi\\frac{f_0}{f_S}n+\\phi) x[n]=x(t)|_{t=nT_s}=x(t)|_{t=n/f_s}=sin(2\\pi\\frac{f_0}{f_S}n+\\phi) f_0 f_0 = 500Hz, \u5206\u522b\u53d6100Hz,1KHz,10KHz,\u7ed8\u51fax[n]\u53ca\u5176DTFT \u62bd\u6837\u7684\u9891\u57df\u89c6\u56fe a. x_a(t)=e^{-1000|t|} x_a(t)=e^{-1000|t|} , \u6c42\u51fa\u5e76\u7ed8\u5236\u5176\u5085\u91cc\u53f6\u53d8\u6362 b. \u4ee55000HZ\u548c1000HZ\u5206\u522b\u5bf9\u5176\u91c7\u6837\u5f97\u5230x1(n),x2(n);\u753b\u51fa\u4ed6\u4eec\u7684DTFT\u5e76\u4e0e x_a(j\\Omega) x_a(j\\Omega) \u6bd4\u8f83 \u4ece\u6837\u672c\u91cd\u5efa\u4fe1\u53f7 (1)\u62df\u5408\u4e3a\u6b63\u5f26\u6ce2 \u5047\u8bbe\u4e09\u4e2a\u62bd\u6837\u6837\u672c\u7b26\u5408\u4e0b\u5217\u5f62\u5f0f\u7684\u6b63\u5f26\u6ce2\u5f62\uff1a $$x(t)=Acos(\\omega t+\\phi)$$ \u5df2\u77e5x(0)\u3001x(1)\u548cx(2)\uff0c\u8fd9\u4e9b\u4fe1\u606f\u8db3\u4ee5\u786e\u5b9a$A,\\omega,\\phi$\u5417\uff1f\u80fd\u5efa\u7acb\u6709\u5173\u7684\u65b9\u7a0b\u5417\uff1f\u603b\u80fd\u89e3\u51fa\u8fd9\u4e9b\u65b9\u7a0b\u5417\uff1f\u5982\u679c\u4e0d\u80fd\uff0c\u7ed9\u51fa\u4e0d\u80fd\u6c42\u89e3\u5904\u7684\u5177\u4f53\u6570\u503c\u3002 (2)\u7ebf\u6027\u4e0e\u591a\u9879\u5f0f\u5185\u63d2 a\uff0e\u4f7f\u7528matlab,\u7528\u76f4\u7ebf\u6bb5\u8fde\u63a5\u6837\u672c\u3002\u5728\u95f4\u96940.01\u79d2\u7684\u7ec6\u5bc6\u7f51\u683c\u4e0a\u7ed8\u51fa\u7ed3\u679c\uff0c\u89e3\u91caplot\u6307\u4ee4\u5c06\u4f1a\u5982\u4f55\u81ea\u52a8\u7684\u7ed8\u51fa\u8fd9\u4e00\u7ed3\u679c\u3002 b\uff0e\u5c06\u4e09\u89d2\u5f62\u51b2\u6fc0\u54cd\u5e94\u4e0e\u4e09\u4e2a\u6837\u672c\u8fdb\u884c\u5377\u79ef\uff0c\u4f46\u9996\u5148\u8981\u5728\u6bcf\u4e24\u4e2a\u6837\u672c\u4e4b\u95f4\u63d2\u5165\u56db\u4e2a\u96f6\u70b9\uff0c\u5e76\u4ee4\u51b2\u6fc0\u54cd\u5e94\u4e3a0.2\uff0c0.4\uff0c0.6\uff0c0.8\uff0c1.0\uff0c0.8\uff0c0.6\uff0c0.4\uff0c0.2\u3002\u8bc1\u660e\u5982\u679c\u5047\u8bbe\u5728t=-1\u548ct=3\u7684\u6837\u672c\u4e3a\u96f6\uff0c\u4e0a\u9762\u7684\u7ed3\u679c\u4e0e\u7ebf\u6027\u63d2\u503c\u76f8\u540c\u3002 c. \u4f7f\u7528MATLAB,\u5c06\u8fd9\u4e09\u4e2a\u6570\u636e\u70b9\u62df\u5408\u4e3a\u4e8c\u9636\u591a\u9879\u5f0f(\u89c1polyfit\u4e0epolyval\u6307\u4ee4)\u3002\u4ee5\u7ec6\u5bc6\u7f51\u683c\u5bf9$-5\\le t\\le 5$\u7ed8\u51fa\u8fd9\u4e2a\u591a\u9879\u5f0f\u3002\u5728\u5b9e\u9645\u610f\u4e49\u4e0a\uff0c\u8fd9\u4e00\u66f2\u7ebf\u662f\u5426\u53ef\u5b9e\u73b0\uff1f\u5b83\u662f\u5426\u80fd\u5f88\u597d\u5730\u5728$0\\le t\\le 2$\u533a\u95f4\u4ee5\u5916\u6269\u5c55\u4fe1\u53f7\u503c\uff1f (3) \u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668 a.\u5047\u8bbe\u53ea\u6709\u6709\u9650\u6570\u91cf\u7684\u6837\u672c\u662f\u975e\u96f6\u503c\uff0c\u4e14\u53ea\u9700\u5728\u6709\u9650\u65f6\u95f4\u533a\u95f4\u4e0a\u8fdb\u884c\u4fe1\u53f7\u91cd\u5efa\uff0c\u5199\u51fasinc\u5185\u63d2\u8868\u8fbe\u5f0f\u3002 b.\u5bf9t=0\u5904\u7684\u6570\u503c\u4e3a1\u7684\u5355\u70b9\u6837\u672c\u8fdb\u884c\u63d2\u503c\uff0c\u7ed8\u51fa\u5927\u7ea6\u4ece-5\u5230+5\u7684\u7ed3\u679c\u3002\u5b83\u5e94\u8be5\u4e0esinc\u51fd\u6570\u5f62\u72b6\u4e00\u81f4\u3002 c.\u73b0\u5728\u5bf9sinc\u51fd\u6570\u5185\u63d2\u53ca\u5b9e\u9a8c\u5185\u5bb91\u4e2d\u7684\u4e09\u70b9\u60c5\u5f62\u8fdb\u884c\u63d2\u503c\uff0c\u5c06\u5176\u7ed3\u679c\u4e0e\u62df\u5408\u4e3a\u6b63\u5f26\u6ce2\u7684\u7ed3\u679c\u76f8\u6bd4\u8f83 \u8bbe\u5b9a\u5e26\u5bbd\u7684\u9009\u62e9 \u5e26\u9650\u4e8e\u67d0\u9891\u7387 f_B f_B \u7684\u4fe1\u53f7\u53ef\u4ee5\u7528 f_S=2f_B f_S=2f_B \u8fdb\u884c\u62bd\u6837\uff0c\u5e76\u53ef\u4ee5\u7531\u622a\u6b62\u9891\u7387\u4e3a f_B f_B \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u6062\u590d\uff0c\u6b64\u7ed3\u8bba\u5bf9\u4e8e\u5e26\u9650\u4e8e fb fb \u7684\u7b2c\u4e8c\u4e2a\u4fe1\u53f7\u540c\u6837\u6210\u7acb\uff0c\u5176\u4e2d f_b f_b \u5c0f\u4e8e f_B f_B ,\u8fd9\u662f\u56e0\u4e3a\u5e26\u9650\u4e8e f_b f_b \u7684\u4fe1\u53f7\u4e5f\u5e26\u9650\u4e8e f_B f_B \u3002\u540c\u6837\uff0c\u5e26\u9650\u4e8e f_b f_b \u7684\u4fe1\u53f7\u4e5f\u53ef\u4ee5\u7528 f_S f_S \u62bd\u6837\u5e76\u7531\u622a\u6b62\u9891\u7387\u4e3a f_b f_b \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u6062\u590d\uff0c\u8be5\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u51b2\u6fc0\u54cd\u5e94\uff08sinc\u51fd\u6570\uff09\u6bd4\u622a\u6b62\u9891\u7387\u4e3a f_B=f_S/2 f_B=f_S/2 \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u51b2\u6fc0\u54cd\u5e94\u66f4\u5bbd\u3002\u80fd\u5426\u4f7f\u7528\u622a\u6b62\u9891\u7387\u4e3a f_b < f_S/2 f_b < f_S/2 \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u91cd\u5efa\u54cd\u5e94\u5bf9\u5e26\u9650\u4e8e f_b f_b \u5e76\u4ee5 f_S f_S \u62bd\u6837\u5f97\u5230\u7684\u4fe1\u53f7\u6837\u672c\u8fdb\u884c\u63d2\u503c\uff1f 4. \u5b9e\u9a8c\u73af\u5883 MATLAB R2019b 5. \u5b9e\u9a8c\u8fc7\u7a0b\u4e0e\u5206\u6790\u7a0b\u5e8f\u6587\u672c 1. \u62bd\u6837\u5f15\u8d77\u7684\u6df7\u53e0 \u5b9e\u9a8c\u5185\u5bb9\uff1a f_0 f_0 =500Hz, f_s f_s \u5206\u522b\u53d6100Hz,1KHz,10KHz,\u7ed8\u51fax[n]\u53ca\u5176DTFT %100HZ\u62bd\u6837\u7ed3\u679c clear; fs=100;%\u91c7\u6837\u9891\u7387 f0=500; dt=1/fs; w0=0;%\u521d\u59cb\u76f8\u4f4d t=0:dt:15/500; xt=sin(2*pi*f0*t+w0);%\u51fd\u6570\u8868\u8fbe\u5f0f subplot(311); stem(t,xt); grid on; xlabel('\u65f6\u95f4/\u79d2'),ylabel(' \u5e45\u5ea6'); title('\u4ee5100HZ\u62bd\u6837\u6240\u5f97\u4fe1\u53f7'); [X,W]=dtft(xt,1000);%dtft\u53d8\u6362 subplot(312); plot(W/2/pi,abs(X)); grid,title('\u62bd\u6837\u4fe1\u53f7\u7684\u54cd\u5e94') xlabel('\u9891\u7387/2pi\uff09'),ylabel('\u5e45\u5ea6'); subplot(313); plot(W/2/pi,180/pi*angle(X)); grid,title('\u62bd\u6837\u4fe1\u53f7\u7684\u76f8\u4f4d') xlabel('\u9891\u7387/2pi\uff09'),ylabel('\u76f8\u4f4d/\u5ea6\uff09'); \u540c\u7406\uff0c\u5f53 f_s f_s \u5206\u522b\u53d61KHz,10KHz\u65f6\uff0c\u628a\u4ee3\u7801\u4e2d fs=100 \u5206\u522b\u6539\u4e3a fs=1000 \u548c fs=10000 \u5373\u53ef\u3002 \u7ed3\u679c\u5982\u56fe1.1.1 ,1.1.2 ,1.1.3\u6240\u793a\u3002 2. \u62bd\u6837\u7684\u9891\u57df\u89c6\u56fe a. x_a(t)=e^{-1000|t|} x_a(t)=e^{-1000|t|} , \u6c42\u51fa\u5e76\u7ed8\u5236\u5176\u5085\u91cc\u53f6\u53d8\u6362 dt=1/10000; t=-0.05:dt:0.05; xt=exp(-1000*abs(t)); figure(1); subplot(211); plot(t,xt),grid on; title('\u6837\u672c\u4fe1\u53f7'),xlabel('\u65f6\u95f4/\u79d2'),ylabel('\u5e45\u5ea6'); subplot(212); fmagplot(xt,dt); \u7ed3\u679c\u5982\u56fe2.1 b. \u4ee55000HZ\u548c1000HZ\u5206\u522b\u5bf9\u5176\u91c7\u6837\u5f97\u5230x1(n),x2(n);\u753b\u51fa\u4ed6\u4eec\u7684DTFT\u5e76\u4e0e x_a(j\\Omega) x_a(j\\Omega) \u6bd4\u8f83 %5khz\u62bd\u6837\u6240\u5f97\u7684\u4fe1\u53f7 figure(1); fs=5000; dt=1/fs; t=-0.05:dt:0.05;%5khz\u62bd\u6837\u7684\u65f6\u95f4\u8303\u56f4 xt=exp(-1000*abs(t)); subplot(311),stem(t,xt),grid on; xlabel('\u65f6\u95f4/\u79d2'),ylabel('\u5e45\u5ea6'); title('\u4ee55KHZ\u62bd\u6837\u7684\u4fe1\u53f7'); [X,W]=dtft(xt,10000); subplot(312); plot(W/2/pi,abs(X)); grid,title('\u5e45\u9891\u7279\u6027\u66f2\u7ebf') xlabel('\u9891\u7387/2pi'),ylabel('\u5e45\u5ea6'); subplot(313); plot(W/2/pi,180/pi*angle(X),'r'); grid,title('Xa\u7684\u76f8\u9891\u7279\u6027\u66f2\u7ebf') xlabel('\u9891\u7387/2pi'),ylabel('\u76f8\u4f4d/\u5ea6'); \u5bf9\u4e8e1Khz\u7684\u91c7\u6837\u628a fs=5000 \u6539\u4e3a fs=1000 \u5373\u53ef\u3002 \u7ed3\u679c\u5982\u56fe2.2.1 ,2.2.2 3. \u4ece\u6837\u672c\u91cd\u5efa\u4fe1\u53f7 1. \u62df\u5408\u4e3a\u6b63\u5f26\u6ce2 \u5047\u8bbe\u4e09\u4e2a\u62bd\u6837\u6837\u672c\u7b26\u5408\u4e0b\u5217\u5f62\u5f0f\u7684\u6b63\u5f26\u6ce2\u5f62\uff1a x(t)=Acos(\\omega t+\\phi) x(t)=Acos(\\omega t+\\phi) \u5df2\u77e5x(0)\u3001x(1)\u548cx(2)\uff0c\u8fd9\u4e9b\u4fe1\u606f\u8db3\u4ee5\u786e\u5b9a A,\\omega,\\phi A,\\omega,\\phi \u5417\uff1f\u80fd\u5efa\u7acb\u6709\u5173\u7684\u65b9\u7a0b\u5417\uff1f\u603b\u80fd\u89e3\u51fa\u8fd9\u4e9b\u65b9\u7a0b\u5417\uff1f\u5982\u679c\u4e0d\u80fd\uff0c\u7ed9\u51fa\u4e0d\u80fd\u6c42\u89e3\u5904\u7684\u5177\u4f53\u6570\u503c\u3002 \u80fd\uff0c\u76f4\u63a5\u89e3\u65b9\u7a0b\uff0c\u7136\u540e\u753b\u56fe\uff0c\u4f7f\u7528\u4e66\u4e2d\u7684\u60c5\u5f62\uff1a x(0)=2,x(1)=1,x(2)=-1 x(0)=2,x(1)=1,x(2)=-1 y = [2,1,-1]; xdata = [0,1,2]; syms A omega phi %\u4e09\u5143\u65b9\u7a0b\u7ec4 eq1 = A*cos(omega*xdata(1)+phi)-y(1); eq2 = A*cos(omega*xdata(2)+phi)-y(2); eq3 = A*cos(omega*xdata(3)+phi)-y(3); [A ,omega ,phi] = solve(eq1 ,eq2 ,eq3); dt = 1/1000; x = (xdata(1):dt:xdata(length(xdata))); %\u5faa\u73af\uff0c\u6709\u51e0\u4e2a\u89e3\u753b\u51e0\u5f20\u56fe for i = 1:length(A) figure(i); plot(x,A(i)*cos(omega(i).*x+phi(i))),grid on; %\u6dfb\u52a0\u6ce8\u91ca\uff0c\u663e\u793a\u4e09\u4e2a\u53c2\u6570\u503c text(0.05,0,'omega='); text(0.05,-0.15,'A='); text(0.05,-0.3,'phi='); text(0.3,0,char(omega(i))); text(0.3,-0.15,char(A(i))); text(0.3,-0.3,char(phi(i))); end \u5171\u67094\u7ec4\u89e3\uff0c\u7ed3\u679c\u5982\u56fe3.1.1 ,3.1.2 ,3.1.3 ,3.1.4 2. \u7ebf\u6027\u4e0e\u591a\u9879\u5f0f\u5185\u63d2 a\uff0e\u4f7f\u7528matlab,\u7528\u76f4\u7ebf\u6bb5\u8fde\u63a5\u6837\u672c\u3002\u5728\u95f4\u96940.01\u79d2\u7684\u7ec6\u5bc6\u7f51\u683c\u4e0a\u7ed8\u51fa\u7ed3\u679c\uff0c\u89e3\u91caplot\u6307\u4ee4\u5c06\u4f1a\u5982\u4f55\u81ea\u52a8\u7684\u7ed8\u51fa\u8fd9\u4e00\u7ed3\u679c\u3002 clear; x0=2,x1=1,x2=-1;%\u9898\u76ee\u63d0\u4f9b\u7684\u4e09\u4e2a\u6837\u672c\u70b9 y=zeros(1,201); y(1:101)=(x0:-0.01:x1); y(101:201)=(x1:-0.02:x2); t=(0:0.01:2); plot(t,y); grid on; xlabel('\u65f6\u95f4/\u79d2'),ylabel('\u5e45\u5ea6'),title('\u7ebf\u6027\u5185\u63d2'); \u7ed3\u679c\u5982\u56fe3.2.1 b\uff0e\u5c06\u4e09\u89d2\u5f62\u51b2\u6fc0\u54cd\u5e94\u4e0e\u4e09\u4e2a\u6837\u672c\u8fdb\u884c\u5377\u79ef\uff0c\u4f46\u9996\u5148\u8981\u5728\u6bcf\u4e24\u4e2a\u6837\u672c\u4e4b\u95f4\u63d2\u5165\u56db\u4e2a\u96f6\u70b9\uff0c\u5e76\u4ee4\u51b2\u6fc0\u54cd\u5e94\u4e3a0.2\uff0c0.4\uff0c0.6\uff0c0.8\uff0c1.0\uff0c0.8\uff0c0.6\uff0c0.4\uff0c0.2\u3002\u8bc1\u660e\u5982\u679c\u5047\u8bbe\u5728t=-1\u548ct=3\u7684\u6837\u672c\u4e3a\u96f6\uff0c\u4e0a\u9762\u7684\u7ed3\u679c\u4e0e\u7ebf\u6027\u63d2\u503c\u76f8\u540c\u3002 clear; dt=1/5;%\u6bcf\u4e94\u4e2a\u70b9\u4ee3\u8868\u957f\u5ea61 n=[0,0.2,0.4,0.6,0.8,1.0,0.8,0.6,0.4,0.2,0];%\u4e09\u89d2\u51b2\u6fc0\u54cd\u5e94 x=[2,0,0,0,0,1,0,0,0,0,-1]; y=conv(n,x);%\u5377\u79ef\u8fd0\u7b97 subplot(2,1,1) n=(-1:dt:3); stem(n,y),grid on; title('\u4e09\u89d2\u5f62\u51b2\u6fc0\u54cd\u5e94\u5377\u79ef\u5185\u63d2'); subplot(2,1,2) y2=[0,2,1,-1,0]; x2=(-1:3);%\u4f9d\u636e\u6837\u672c\u70b9\u521b\u5efa\u7684\u6a2a\u7eb5\u5e8f\u5217 plot(x2,y2); grid on; title('\u7ebf\u6027\u5185\u63d2'); \u7ed3\u679c\u5982\u56fe3.2.2 c. \u4f7f\u7528MATLAB,\u5c06\u8fd9\u4e09\u4e2a\u6570\u636e\u70b9\u62df\u5408\u4e3a\u4e8c\u9636\u591a\u9879\u5f0f(\u89c1polyfit\u4e0epolyval\u6307\u4ee4)\u3002\u4ee5\u7ec6\u5bc6\u7f51\u683c\u5bf9 -5\\le t\\le 5 -5\\le t\\le 5 \u7ed8\u51fa\u8fd9\u4e2a\u591a\u9879\u5f0f\u3002\u5728\u5b9e\u9645\u610f\u4e49\u4e0a\uff0c\u8fd9\u4e00\u66f2\u7ebf\u662f\u5426\u53ef\u5b9e\u73b0\uff1f\u5b83\u662f\u5426\u80fd\u5f88\u597d\u5730\u5728 0\\le t\\le 2 0\\le t\\le 2 \u533a\u95f4\u4ee5\u5916\u6269\u5c55\u4fe1\u53f7\u503c\uff1f x0=2,x1=1,x2=-1;%\u9898\u76ee\u6240\u63d0\u4f9b\u7684\u4e09\u4e2a\u6837\u672c\u70b9 y=[x0,x1,x2]; x=[0,1,2]; t=(-5:0.1:5); C=polyfit(x,y,2); Z=polyval(C,t); plot(x,y,'r*',t,Z,'b'),grid on; xlabel('\u65f6\u95f4/\u79d2'),ylabel('\u5e45\u5ea6'),title('\u4e8c\u9636\u591a\u9879\u5f0f\u62df\u5408\u5185\u63d2'); \u7ed3\u679c\u5982\u56fe3.2.3 3. \u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668 a.\u5047\u8bbe\u53ea\u6709\u6709\u9650\u6570\u91cf\u7684\u6837\u672c\u662f\u975e\u96f6\u503c\uff0c\u4e14\u53ea\u9700\u5728\u6709\u9650\u65f6\u95f4\u533a\u95f4\u4e0a\u8fdb\u884c\u4fe1\u53f7\u91cd\u5efa\uff0c\u5199\u51fasinc\u5185\u63d2\u8868\u8fbe\u5f0f\u3002 \u8bbe\u6709\u9650\u6837\u672c\u51fd\u6570\u957f\u5ea6\u4e3aN\uff0c x_a(t)=\\sum_{n=0}^{N-1}x_a(t)\\frac{sin(\\pi(t-nT_s/T_s))}{\\pi(t-nT_s/T_s)} x_a(t)=\\sum_{n=0}^{N-1}x_a(t)\\frac{sin(\\pi(t-nT_s/T_s))}{\\pi(t-nT_s/T_s)} b.\u5bf9t=0\u5904\u7684\u6570\u503c\u4e3a1\u7684\u5355\u70b9\u6837\u672c\u8fdb\u884c\u63d2\u503c\uff0c\u7ed8\u51fa\u5927\u7ea6\u4ece-5\u5230+5\u7684\u7ed3\u679c\u3002\u5b83\u5e94\u8be5\u4e0esinc\u51fd\u6570\u5f62\u72b6\u4e00\u81f4\u3002 clear; T=1; dt=0.01; t= (-5:dt:5); x=1; sinc = (sin(pi.*t./T))./(pi.*t./T);%sinc\u5185\u63d2\u8868\u793a\u5f0f x_a=conv(x,sinc); plot(t,x_a),grid on; title('\u63d2\u503c\u91cd\u5efa\u7ed3\u679c'),xlabel('x'),ylabel('y'); \u7ed3\u679c\u5982\u56fe3.3.1 c.\u73b0\u5728\u5bf9sinc\u51fd\u6570\u5185\u63d2\u53ca\u5b9e\u9a8c\u5185\u5bb91\u4e2d\u7684\u4e09\u70b9\u60c5\u5f62\u8fdb\u884c\u63d2\u503c\uff0c\u5c06\u5176\u7ed3\u679c\u4e0e\u62df\u5408\u4e3a\u6b63\u5f26\u6ce2\u7684\u7ed3\u679c\u76f8\u6bd4\u8f83 clear; x0=2;x1=1;x2=-1; x=[x0,x1,x2]; T=1; dt=0.01; t= (-5:dt:5); x_a=zeros(1,1201);%\u79fb\u4f4d\u76f8\u52a0\u51711201\u4e2a\u70b9 sinc = (sin(pi.*t./T))./(pi.*t./T); for n = 0:2%\u79fb\u4f4d\u76f8\u52a0 x_a((1+n*100):(1+n*100+1000))=\\ x_a((1+n*100):(1+n*100+1000))+x(n+1)*(sin(pi.*t./T))./(pi.*t./T); end x_a=x_a(501:701);%\u622a\u53d6t=0\u52302\u5bf9\u5e94\u7684\u503c t_a=(0:dt:2); plot(t_a,x_a),grid on; title('\u63d2\u503c\u91cd\u5efa\u7ed3\u679c'),xlabel('x'),ylabel('y'); \u7ed3\u679c\u5982\u56fe3.3.2 4. \u8bbe\u5b9a\u5e26\u5bbd\u7684\u9009\u62e9 \u89e3\u51b3\u4e0b\u9762\u7684\u95ee\u9898\uff1a\u5e26\u9650\u4e8e\u67d0\u9891\u7387 f_B f_B \u7684\u4fe1\u53f7\u53ef\u4ee5\u7528 f_S=2f_B f_S=2f_B \u8fdb\u884c\u62bd\u6837\uff0c\u5e76\u53ef\u4ee5\u7531\u622a\u6b62\u9891\u7387\u4e3a f_B f_B \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u6062\u590d\uff0c\u6b64\u7ed3\u8bba\u5bf9\u4e8e\u5e26\u9650\u4e8e fb fb \u7684\u7b2c\u4e8c\u4e2a\u4fe1\u53f7\u540c\u6837\u6210\u7acb\uff0c\u5176\u4e2d f_b f_b \u5c0f\u4e8e f_B f_B ,\u8fd9\u662f\u56e0\u4e3a\u5e26\u9650\u4e8e f_b f_b \u7684\u4fe1\u53f7\u4e5f\u5e26\u9650\u4e8e f_B f_B \u3002\u540c\u6837\uff0c\u5e26\u9650\u4e8e f_b f_b \u7684\u4fe1\u53f7\u4e5f\u53ef\u4ee5\u7528 f_S f_S \u62bd\u6837\u5e76\u7531\u622a\u6b62\u9891\u7387\u4e3a f_b f_b \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u6062\u590d\uff0c\u8be5\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u51b2\u6fc0\u54cd\u5e94\uff08sinc\u51fd\u6570\uff09\u6bd4\u622a\u6b62\u9891\u7387\u4e3a f_B=f_S/2 f_B=f_S/2 \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u51b2\u6fc0\u54cd\u5e94\u66f4\u5bbd\u3002\u80fd\u5426\u4f7f\u7528\u622a\u6b62\u9891\u7387\u4e3a f_b < f_S/2 f_b < f_S/2 \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u91cd\u5efa\u54cd\u5e94\u5bf9\u5e26\u9650\u4e8e f_b f_b \u5e76\u4ee5 f_S f_S \u62bd\u6837\u5f97\u5230\u7684\u4fe1\u53f7\u6837\u672c\u8fdb\u884c\u63d2\u503c\uff1f \u53ef\u4ee5\uff0c\u622a\u81f3\u9891\u7387fb \u5c0f\u4e8e\u91c7\u6837\u9891\u7387fS\u4e00\u534a\uff0c\u9891\u57df\u65e0\u6df7\u53e0\u73b0\u8c61\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u622a\u6b62\u9891\u7387\u4e3afb < fS /2\u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u91cd\u5efa\u54cd\u5e94\u5bf9\u5e26\u9650\u4e8efb \u5e76\u4ee5fS \u62bd\u6837\u5f97\u5230\u7684\u4fe1\u53f7\u6837\u672c\u8fdb\u884c\u63d2\u503c\u3002 6. \u5b9e\u9a8c\u7ed3\u679c\u603b\u7ed3 \u56fe1.1.1 \u56fe1.1.2 \u56fe1.1.3 \u56fe2.1 \u56fe2.2.1 \u56fe2.2.2 \u56fe3.1.1 \u56fe3.1.2] \u56fe3.1.3 \u56fe3.1.4 \u56fe3.2.1 \u56fe3.2.2 \u56fe3.2.3 \u56fe3.3.1 \u56fe3.3.2 7. \u7ed3\u679c\u5206\u6790 1. \u62bd\u6837\u5f15\u8d77\u7684\u6df7\u53e0 \u53ea\u6709\u5f53(\u91c7\u6837\u9891\u7387 \\ge \\ge \u6837\u672c\u9891\u7387\u76842\u500d)\u65f6\uff0c\u624d\u80fd\u8f83\u597d\u7684\u8fd8\u539f\u4fe1\u53f7\u3002100HZ\u65f6\u65e0\u6cd5\u91cd\u73b0\u4fe1\u53f7\uff0c1KHZ\u65f6\u80fd\u91cd\u73b0\u6837\u672c\u4fe1\u53f7\u7684\u5c40\u90e8\u5173\u7cfb\uff0c10KHZ\u65f6\u80fd\u8f83\u5b8c\u6574\u7684\u91cd\u73b0\u6837\u672c\u4fe1\u53f7\u3002 2. \u62bd\u6837\u7684\u9891\u57df\u89c6\u56fe a. \u5076\u51fd\u6570\uff0c\u5728 |\\Omega|>4000\\pi |\\Omega|>4000\\pi \u65f6\uff0c\u5e45\u503c\u51e0\u4e4e\u4e3a\u96f6\u3002 b. \u4e0d\u540c\u91c7\u6837\u9891\u7387\u7684DTFT\u4e0e X(j\\Omega) X(j\\Omega) \u6bd4\u8f83\uff0c\u5b83\u4eec\u4ec5\u5728\u5e45\u503c\u4e0a\u6709\u5dee\u5f02\uff0c\u8fd9\u662f\u56e0\u4e3a\u91c7\u6837\u70b9\u6570\u589e\u52a0\uff0c\u5e8f\u5217\u957f\u5ea6\u589e\u52a0\uff0c\u5e45\u503c\u589e\u52a0\u3002 3. \u4ece\u6837\u672c\u91cd\u5efa\u4fe1\u53f7 1. \u62df\u5408\u4e3a\u6b63\u5f26\u6ce2 \u80fd\u6c42\u51fa\u89e3\uff0c\u4e09\u4e2a\u672a\u77e5\u6570\uff0c\u4e09\u4e2a\u65b9\u7a0b\uff0c\u53ea\u4e0d\u8fc7\u67094\u7ec4\u89e3\uff0c\u5229\u7528matlab\u89e3\u65b9\u7a0b\u7ec4\uff0c\u7ed3\u679c\u5982\u56fe3.1.1 ,3.1.2 ,3.1.3 ,3.1.4 2. \u7ebf\u6027\u4e0e\u591a\u9879\u5f0f\u5185\u63d2 a. plot\u6307\u4ee4\u901a\u8fc7\u628a\u6bcf\u4e24\u4e2a\u70b9\u8fde\u6210\u4e00\u6761\u76f4\u7ebf\uff0c\u7ed8\u51fa\u7ed3\u679c\u3002 b. \u901a\u8fc7\u4e09\u89d2\u51b2\u6fc0\u540e\uff0c\u548c\u7ebf\u6027\u63d2\u503c\u7ed3\u679c\u76f8\u540c\u3002 c. \u4e09\u4e2a\u70b9\u521a\u597d\u80fd\u552f\u4e00\u786e\u5b9a\u4e00\u4e2a\u4e8c\u9636\u591a\u9879\u5f0f\uff0c\u5b9e\u9645\u4e2d\u4e0d\u80fd\u5b9e\u73b0\u8fd9\u79cd\u4fe1\u53f7\uff0c\u53ea\u80fd\u65e0\u9650\u63a5\u8fd1\uff0c\u4e14\u4e0d\u80fd\u5f88\u597d\u5728 0\\le t\\le 2 0\\le t\\le 2 \u6269\u5c55\u4fe1\u53f7\u503c\uff0c\uff08\u8870\u51cf\u8fc5\u901f\uff09\u3002 3. \u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668 c. \u63d2\u503c\u7ed3\u679c\u63a5\u8fd1\u6b63\u5f26\u6ce2\u3002 4. \u8bbe\u5b9a\u5e26\u5bbd\u7684\u9009\u62e9 \u53ef\u4ee5\uff0c\u622a\u81f3\u9891\u7387fb \u5c0f\u4e8e\u91c7\u6837\u9891\u7387fS\u4e00\u534a\uff0c\u9891\u57df\u65e0\u6df7\u53e0\u73b0\u8c61\u3002 8.\u5fc3\u5f97\u4f53\u4f1a \u5bf9\u4e8e\u91c7\u6837\u9891\u7387\u589e\u52a0\uff0cDTFT\u7ed3\u679c\u5e45\u5ea6\u589e\u52a0\u7684\u73b0\u8c61\u6709\u4e86\u7406\u89e3\u3002 \u5bf9\u4e0d\u540c\u65b9\u5f0f\u7684\u63d2\u503c\u65b9\u6cd5\u91cd\u5efa\u4fe1\u53f7\u7ed3\u679c\u8fdb\u884c\u4e86\u5206\u6790\uff0c\u52a0\u6df1\u4e86\u7406\u89e3\u3002 \u76f4\u63a5\u7528for\u5faa\u73af\u5199\u4e86\u5377\u79ef\uff0c\u8ba4\u8bc6\u5230\u5176\u5b9e\u8d28\u4e3a\u79fb\u4f4d\u4e0d\u540c\u6743\u503c\u76f8\u52a0\u3002","title":"\u62bd\u6837"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#_1","text":"","title":"\u62bd\u6837"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#1","text":"\u62bd\u6837","title":"1. \u5b9e\u9a8c\u9879\u76ee\u540d\u79f0"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#2","text":"\u7814\u7a76\u62bd\u6837\u8fc7\u7a0b\uff0c\u5206\u6790\u4ea7\u751f\u6df7\u53e0\u6548\u5e94\u7684\u539f\u56e0\uff0c\u5b9e\u73b0\u4e0d\u540c\u91cd\u5efa\u65b9\u6848\uff0c\u8981\u6c421\u4eba1\u7ec4\uff0c2\u5b66\u65f6\u3002","title":"2. \u5b9e\u9a8c\u76ee\u7684"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#3","text":"\u62bd\u6837\u5f15\u8d77\u7684\u6df7\u53e0 \u5bf9\u8fde\u7eed\u6b63\u5f26\u4fe1\u53f7\u8003\u8651\u4e0b\u9762\u8868\u793a\u5f0f\uff1a x(t)=sin(2\\pi f_0+\\phi) x(t)=sin(2\\pi f_0+\\phi) \u53ef\u4ee5\u6309\u62bd\u6837\u9891\u7387 f_s=1/T_s f_s=1/T_s \u5bf9x(t)\u62bd\u6837\u6765\u83b7\u5f97\u79bb\u6563\u65f6\u95f4\u4fe1\u53f7 x[n]=x(t)|_{t=nT_s}=x(t)|_{t=n/f_s}=sin(2\\pi\\frac{f_0}{f_S}n+\\phi) x[n]=x(t)|_{t=nT_s}=x(t)|_{t=n/f_s}=sin(2\\pi\\frac{f_0}{f_S}n+\\phi) f_0 f_0 = 500Hz, \u5206\u522b\u53d6100Hz,1KHz,10KHz,\u7ed8\u51fax[n]\u53ca\u5176DTFT \u62bd\u6837\u7684\u9891\u57df\u89c6\u56fe a. x_a(t)=e^{-1000|t|} x_a(t)=e^{-1000|t|} , \u6c42\u51fa\u5e76\u7ed8\u5236\u5176\u5085\u91cc\u53f6\u53d8\u6362 b. \u4ee55000HZ\u548c1000HZ\u5206\u522b\u5bf9\u5176\u91c7\u6837\u5f97\u5230x1(n),x2(n);\u753b\u51fa\u4ed6\u4eec\u7684DTFT\u5e76\u4e0e x_a(j\\Omega) x_a(j\\Omega) \u6bd4\u8f83 \u4ece\u6837\u672c\u91cd\u5efa\u4fe1\u53f7 (1)\u62df\u5408\u4e3a\u6b63\u5f26\u6ce2 \u5047\u8bbe\u4e09\u4e2a\u62bd\u6837\u6837\u672c\u7b26\u5408\u4e0b\u5217\u5f62\u5f0f\u7684\u6b63\u5f26\u6ce2\u5f62\uff1a $$x(t)=Acos(\\omega t+\\phi)$$ \u5df2\u77e5x(0)\u3001x(1)\u548cx(2)\uff0c\u8fd9\u4e9b\u4fe1\u606f\u8db3\u4ee5\u786e\u5b9a$A,\\omega,\\phi$\u5417\uff1f\u80fd\u5efa\u7acb\u6709\u5173\u7684\u65b9\u7a0b\u5417\uff1f\u603b\u80fd\u89e3\u51fa\u8fd9\u4e9b\u65b9\u7a0b\u5417\uff1f\u5982\u679c\u4e0d\u80fd\uff0c\u7ed9\u51fa\u4e0d\u80fd\u6c42\u89e3\u5904\u7684\u5177\u4f53\u6570\u503c\u3002 (2)\u7ebf\u6027\u4e0e\u591a\u9879\u5f0f\u5185\u63d2 a\uff0e\u4f7f\u7528matlab,\u7528\u76f4\u7ebf\u6bb5\u8fde\u63a5\u6837\u672c\u3002\u5728\u95f4\u96940.01\u79d2\u7684\u7ec6\u5bc6\u7f51\u683c\u4e0a\u7ed8\u51fa\u7ed3\u679c\uff0c\u89e3\u91caplot\u6307\u4ee4\u5c06\u4f1a\u5982\u4f55\u81ea\u52a8\u7684\u7ed8\u51fa\u8fd9\u4e00\u7ed3\u679c\u3002 b\uff0e\u5c06\u4e09\u89d2\u5f62\u51b2\u6fc0\u54cd\u5e94\u4e0e\u4e09\u4e2a\u6837\u672c\u8fdb\u884c\u5377\u79ef\uff0c\u4f46\u9996\u5148\u8981\u5728\u6bcf\u4e24\u4e2a\u6837\u672c\u4e4b\u95f4\u63d2\u5165\u56db\u4e2a\u96f6\u70b9\uff0c\u5e76\u4ee4\u51b2\u6fc0\u54cd\u5e94\u4e3a0.2\uff0c0.4\uff0c0.6\uff0c0.8\uff0c1.0\uff0c0.8\uff0c0.6\uff0c0.4\uff0c0.2\u3002\u8bc1\u660e\u5982\u679c\u5047\u8bbe\u5728t=-1\u548ct=3\u7684\u6837\u672c\u4e3a\u96f6\uff0c\u4e0a\u9762\u7684\u7ed3\u679c\u4e0e\u7ebf\u6027\u63d2\u503c\u76f8\u540c\u3002 c. \u4f7f\u7528MATLAB,\u5c06\u8fd9\u4e09\u4e2a\u6570\u636e\u70b9\u62df\u5408\u4e3a\u4e8c\u9636\u591a\u9879\u5f0f(\u89c1polyfit\u4e0epolyval\u6307\u4ee4)\u3002\u4ee5\u7ec6\u5bc6\u7f51\u683c\u5bf9$-5\\le t\\le 5$\u7ed8\u51fa\u8fd9\u4e2a\u591a\u9879\u5f0f\u3002\u5728\u5b9e\u9645\u610f\u4e49\u4e0a\uff0c\u8fd9\u4e00\u66f2\u7ebf\u662f\u5426\u53ef\u5b9e\u73b0\uff1f\u5b83\u662f\u5426\u80fd\u5f88\u597d\u5730\u5728$0\\le t\\le 2$\u533a\u95f4\u4ee5\u5916\u6269\u5c55\u4fe1\u53f7\u503c\uff1f (3) \u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668 a.\u5047\u8bbe\u53ea\u6709\u6709\u9650\u6570\u91cf\u7684\u6837\u672c\u662f\u975e\u96f6\u503c\uff0c\u4e14\u53ea\u9700\u5728\u6709\u9650\u65f6\u95f4\u533a\u95f4\u4e0a\u8fdb\u884c\u4fe1\u53f7\u91cd\u5efa\uff0c\u5199\u51fasinc\u5185\u63d2\u8868\u8fbe\u5f0f\u3002 b.\u5bf9t=0\u5904\u7684\u6570\u503c\u4e3a1\u7684\u5355\u70b9\u6837\u672c\u8fdb\u884c\u63d2\u503c\uff0c\u7ed8\u51fa\u5927\u7ea6\u4ece-5\u5230+5\u7684\u7ed3\u679c\u3002\u5b83\u5e94\u8be5\u4e0esinc\u51fd\u6570\u5f62\u72b6\u4e00\u81f4\u3002 c.\u73b0\u5728\u5bf9sinc\u51fd\u6570\u5185\u63d2\u53ca\u5b9e\u9a8c\u5185\u5bb91\u4e2d\u7684\u4e09\u70b9\u60c5\u5f62\u8fdb\u884c\u63d2\u503c\uff0c\u5c06\u5176\u7ed3\u679c\u4e0e\u62df\u5408\u4e3a\u6b63\u5f26\u6ce2\u7684\u7ed3\u679c\u76f8\u6bd4\u8f83 \u8bbe\u5b9a\u5e26\u5bbd\u7684\u9009\u62e9 \u5e26\u9650\u4e8e\u67d0\u9891\u7387 f_B f_B \u7684\u4fe1\u53f7\u53ef\u4ee5\u7528 f_S=2f_B f_S=2f_B \u8fdb\u884c\u62bd\u6837\uff0c\u5e76\u53ef\u4ee5\u7531\u622a\u6b62\u9891\u7387\u4e3a f_B f_B \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u6062\u590d\uff0c\u6b64\u7ed3\u8bba\u5bf9\u4e8e\u5e26\u9650\u4e8e fb fb \u7684\u7b2c\u4e8c\u4e2a\u4fe1\u53f7\u540c\u6837\u6210\u7acb\uff0c\u5176\u4e2d f_b f_b \u5c0f\u4e8e f_B f_B ,\u8fd9\u662f\u56e0\u4e3a\u5e26\u9650\u4e8e f_b f_b \u7684\u4fe1\u53f7\u4e5f\u5e26\u9650\u4e8e f_B f_B \u3002\u540c\u6837\uff0c\u5e26\u9650\u4e8e f_b f_b \u7684\u4fe1\u53f7\u4e5f\u53ef\u4ee5\u7528 f_S f_S \u62bd\u6837\u5e76\u7531\u622a\u6b62\u9891\u7387\u4e3a f_b f_b \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u6062\u590d\uff0c\u8be5\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u51b2\u6fc0\u54cd\u5e94\uff08sinc\u51fd\u6570\uff09\u6bd4\u622a\u6b62\u9891\u7387\u4e3a f_B=f_S/2 f_B=f_S/2 \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u51b2\u6fc0\u54cd\u5e94\u66f4\u5bbd\u3002\u80fd\u5426\u4f7f\u7528\u622a\u6b62\u9891\u7387\u4e3a f_b < f_S/2 f_b < f_S/2 \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u91cd\u5efa\u54cd\u5e94\u5bf9\u5e26\u9650\u4e8e f_b f_b \u5e76\u4ee5 f_S f_S \u62bd\u6837\u5f97\u5230\u7684\u4fe1\u53f7\u6837\u672c\u8fdb\u884c\u63d2\u503c\uff1f","title":"3. \u5b9e\u9a8c\u5185\u5bb9\u4e0e\u6b65\u9aa4"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#4","text":"MATLAB R2019b","title":"4. \u5b9e\u9a8c\u73af\u5883"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#5","text":"","title":"5. \u5b9e\u9a8c\u8fc7\u7a0b\u4e0e\u5206\u6790\u7a0b\u5e8f\u6587\u672c"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#1_1","text":"\u5b9e\u9a8c\u5185\u5bb9\uff1a f_0 f_0 =500Hz, f_s f_s \u5206\u522b\u53d6100Hz,1KHz,10KHz,\u7ed8\u51fax[n]\u53ca\u5176DTFT %100HZ\u62bd\u6837\u7ed3\u679c clear; fs=100;%\u91c7\u6837\u9891\u7387 f0=500; dt=1/fs; w0=0;%\u521d\u59cb\u76f8\u4f4d t=0:dt:15/500; xt=sin(2*pi*f0*t+w0);%\u51fd\u6570\u8868\u8fbe\u5f0f subplot(311); stem(t,xt); grid on; xlabel('\u65f6\u95f4/\u79d2'),ylabel(' \u5e45\u5ea6'); title('\u4ee5100HZ\u62bd\u6837\u6240\u5f97\u4fe1\u53f7'); [X,W]=dtft(xt,1000);%dtft\u53d8\u6362 subplot(312); plot(W/2/pi,abs(X)); grid,title('\u62bd\u6837\u4fe1\u53f7\u7684\u54cd\u5e94') xlabel('\u9891\u7387/2pi\uff09'),ylabel('\u5e45\u5ea6'); subplot(313); plot(W/2/pi,180/pi*angle(X)); grid,title('\u62bd\u6837\u4fe1\u53f7\u7684\u76f8\u4f4d') xlabel('\u9891\u7387/2pi\uff09'),ylabel('\u76f8\u4f4d/\u5ea6\uff09'); \u540c\u7406\uff0c\u5f53 f_s f_s \u5206\u522b\u53d61KHz,10KHz\u65f6\uff0c\u628a\u4ee3\u7801\u4e2d fs=100 \u5206\u522b\u6539\u4e3a fs=1000 \u548c fs=10000 \u5373\u53ef\u3002 \u7ed3\u679c\u5982\u56fe1.1.1 ,1.1.2 ,1.1.3\u6240\u793a\u3002","title":"1. \u62bd\u6837\u5f15\u8d77\u7684\u6df7\u53e0"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#2_1","text":"a. x_a(t)=e^{-1000|t|} x_a(t)=e^{-1000|t|} , \u6c42\u51fa\u5e76\u7ed8\u5236\u5176\u5085\u91cc\u53f6\u53d8\u6362 dt=1/10000; t=-0.05:dt:0.05; xt=exp(-1000*abs(t)); figure(1); subplot(211); plot(t,xt),grid on; title('\u6837\u672c\u4fe1\u53f7'),xlabel('\u65f6\u95f4/\u79d2'),ylabel('\u5e45\u5ea6'); subplot(212); fmagplot(xt,dt); \u7ed3\u679c\u5982\u56fe2.1 b. \u4ee55000HZ\u548c1000HZ\u5206\u522b\u5bf9\u5176\u91c7\u6837\u5f97\u5230x1(n),x2(n);\u753b\u51fa\u4ed6\u4eec\u7684DTFT\u5e76\u4e0e x_a(j\\Omega) x_a(j\\Omega) \u6bd4\u8f83 %5khz\u62bd\u6837\u6240\u5f97\u7684\u4fe1\u53f7 figure(1); fs=5000; dt=1/fs; t=-0.05:dt:0.05;%5khz\u62bd\u6837\u7684\u65f6\u95f4\u8303\u56f4 xt=exp(-1000*abs(t)); subplot(311),stem(t,xt),grid on; xlabel('\u65f6\u95f4/\u79d2'),ylabel('\u5e45\u5ea6'); title('\u4ee55KHZ\u62bd\u6837\u7684\u4fe1\u53f7'); [X,W]=dtft(xt,10000); subplot(312); plot(W/2/pi,abs(X)); grid,title('\u5e45\u9891\u7279\u6027\u66f2\u7ebf') xlabel('\u9891\u7387/2pi'),ylabel('\u5e45\u5ea6'); subplot(313); plot(W/2/pi,180/pi*angle(X),'r'); grid,title('Xa\u7684\u76f8\u9891\u7279\u6027\u66f2\u7ebf') xlabel('\u9891\u7387/2pi'),ylabel('\u76f8\u4f4d/\u5ea6'); \u5bf9\u4e8e1Khz\u7684\u91c7\u6837\u628a fs=5000 \u6539\u4e3a fs=1000 \u5373\u53ef\u3002 \u7ed3\u679c\u5982\u56fe2.2.1 ,2.2.2","title":"2. \u62bd\u6837\u7684\u9891\u57df\u89c6\u56fe"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#3_1","text":"","title":"3. \u4ece\u6837\u672c\u91cd\u5efa\u4fe1\u53f7"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#1_2","text":"\u5047\u8bbe\u4e09\u4e2a\u62bd\u6837\u6837\u672c\u7b26\u5408\u4e0b\u5217\u5f62\u5f0f\u7684\u6b63\u5f26\u6ce2\u5f62\uff1a x(t)=Acos(\\omega t+\\phi) x(t)=Acos(\\omega t+\\phi) \u5df2\u77e5x(0)\u3001x(1)\u548cx(2)\uff0c\u8fd9\u4e9b\u4fe1\u606f\u8db3\u4ee5\u786e\u5b9a A,\\omega,\\phi A,\\omega,\\phi \u5417\uff1f\u80fd\u5efa\u7acb\u6709\u5173\u7684\u65b9\u7a0b\u5417\uff1f\u603b\u80fd\u89e3\u51fa\u8fd9\u4e9b\u65b9\u7a0b\u5417\uff1f\u5982\u679c\u4e0d\u80fd\uff0c\u7ed9\u51fa\u4e0d\u80fd\u6c42\u89e3\u5904\u7684\u5177\u4f53\u6570\u503c\u3002 \u80fd\uff0c\u76f4\u63a5\u89e3\u65b9\u7a0b\uff0c\u7136\u540e\u753b\u56fe\uff0c\u4f7f\u7528\u4e66\u4e2d\u7684\u60c5\u5f62\uff1a x(0)=2,x(1)=1,x(2)=-1 x(0)=2,x(1)=1,x(2)=-1 y = [2,1,-1]; xdata = [0,1,2]; syms A omega phi %\u4e09\u5143\u65b9\u7a0b\u7ec4 eq1 = A*cos(omega*xdata(1)+phi)-y(1); eq2 = A*cos(omega*xdata(2)+phi)-y(2); eq3 = A*cos(omega*xdata(3)+phi)-y(3); [A ,omega ,phi] = solve(eq1 ,eq2 ,eq3); dt = 1/1000; x = (xdata(1):dt:xdata(length(xdata))); %\u5faa\u73af\uff0c\u6709\u51e0\u4e2a\u89e3\u753b\u51e0\u5f20\u56fe for i = 1:length(A) figure(i); plot(x,A(i)*cos(omega(i).*x+phi(i))),grid on; %\u6dfb\u52a0\u6ce8\u91ca\uff0c\u663e\u793a\u4e09\u4e2a\u53c2\u6570\u503c text(0.05,0,'omega='); text(0.05,-0.15,'A='); text(0.05,-0.3,'phi='); text(0.3,0,char(omega(i))); text(0.3,-0.15,char(A(i))); text(0.3,-0.3,char(phi(i))); end \u5171\u67094\u7ec4\u89e3\uff0c\u7ed3\u679c\u5982\u56fe3.1.1 ,3.1.2 ,3.1.3 ,3.1.4","title":"1. \u62df\u5408\u4e3a\u6b63\u5f26\u6ce2"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#2_2","text":"a\uff0e\u4f7f\u7528matlab,\u7528\u76f4\u7ebf\u6bb5\u8fde\u63a5\u6837\u672c\u3002\u5728\u95f4\u96940.01\u79d2\u7684\u7ec6\u5bc6\u7f51\u683c\u4e0a\u7ed8\u51fa\u7ed3\u679c\uff0c\u89e3\u91caplot\u6307\u4ee4\u5c06\u4f1a\u5982\u4f55\u81ea\u52a8\u7684\u7ed8\u51fa\u8fd9\u4e00\u7ed3\u679c\u3002 clear; x0=2,x1=1,x2=-1;%\u9898\u76ee\u63d0\u4f9b\u7684\u4e09\u4e2a\u6837\u672c\u70b9 y=zeros(1,201); y(1:101)=(x0:-0.01:x1); y(101:201)=(x1:-0.02:x2); t=(0:0.01:2); plot(t,y); grid on; xlabel('\u65f6\u95f4/\u79d2'),ylabel('\u5e45\u5ea6'),title('\u7ebf\u6027\u5185\u63d2'); \u7ed3\u679c\u5982\u56fe3.2.1 b\uff0e\u5c06\u4e09\u89d2\u5f62\u51b2\u6fc0\u54cd\u5e94\u4e0e\u4e09\u4e2a\u6837\u672c\u8fdb\u884c\u5377\u79ef\uff0c\u4f46\u9996\u5148\u8981\u5728\u6bcf\u4e24\u4e2a\u6837\u672c\u4e4b\u95f4\u63d2\u5165\u56db\u4e2a\u96f6\u70b9\uff0c\u5e76\u4ee4\u51b2\u6fc0\u54cd\u5e94\u4e3a0.2\uff0c0.4\uff0c0.6\uff0c0.8\uff0c1.0\uff0c0.8\uff0c0.6\uff0c0.4\uff0c0.2\u3002\u8bc1\u660e\u5982\u679c\u5047\u8bbe\u5728t=-1\u548ct=3\u7684\u6837\u672c\u4e3a\u96f6\uff0c\u4e0a\u9762\u7684\u7ed3\u679c\u4e0e\u7ebf\u6027\u63d2\u503c\u76f8\u540c\u3002 clear; dt=1/5;%\u6bcf\u4e94\u4e2a\u70b9\u4ee3\u8868\u957f\u5ea61 n=[0,0.2,0.4,0.6,0.8,1.0,0.8,0.6,0.4,0.2,0];%\u4e09\u89d2\u51b2\u6fc0\u54cd\u5e94 x=[2,0,0,0,0,1,0,0,0,0,-1]; y=conv(n,x);%\u5377\u79ef\u8fd0\u7b97 subplot(2,1,1) n=(-1:dt:3); stem(n,y),grid on; title('\u4e09\u89d2\u5f62\u51b2\u6fc0\u54cd\u5e94\u5377\u79ef\u5185\u63d2'); subplot(2,1,2) y2=[0,2,1,-1,0]; x2=(-1:3);%\u4f9d\u636e\u6837\u672c\u70b9\u521b\u5efa\u7684\u6a2a\u7eb5\u5e8f\u5217 plot(x2,y2); grid on; title('\u7ebf\u6027\u5185\u63d2'); \u7ed3\u679c\u5982\u56fe3.2.2 c. \u4f7f\u7528MATLAB,\u5c06\u8fd9\u4e09\u4e2a\u6570\u636e\u70b9\u62df\u5408\u4e3a\u4e8c\u9636\u591a\u9879\u5f0f(\u89c1polyfit\u4e0epolyval\u6307\u4ee4)\u3002\u4ee5\u7ec6\u5bc6\u7f51\u683c\u5bf9 -5\\le t\\le 5 -5\\le t\\le 5 \u7ed8\u51fa\u8fd9\u4e2a\u591a\u9879\u5f0f\u3002\u5728\u5b9e\u9645\u610f\u4e49\u4e0a\uff0c\u8fd9\u4e00\u66f2\u7ebf\u662f\u5426\u53ef\u5b9e\u73b0\uff1f\u5b83\u662f\u5426\u80fd\u5f88\u597d\u5730\u5728 0\\le t\\le 2 0\\le t\\le 2 \u533a\u95f4\u4ee5\u5916\u6269\u5c55\u4fe1\u53f7\u503c\uff1f x0=2,x1=1,x2=-1;%\u9898\u76ee\u6240\u63d0\u4f9b\u7684\u4e09\u4e2a\u6837\u672c\u70b9 y=[x0,x1,x2]; x=[0,1,2]; t=(-5:0.1:5); C=polyfit(x,y,2); Z=polyval(C,t); plot(x,y,'r*',t,Z,'b'),grid on; xlabel('\u65f6\u95f4/\u79d2'),ylabel('\u5e45\u5ea6'),title('\u4e8c\u9636\u591a\u9879\u5f0f\u62df\u5408\u5185\u63d2'); \u7ed3\u679c\u5982\u56fe3.2.3","title":"2. \u7ebf\u6027\u4e0e\u591a\u9879\u5f0f\u5185\u63d2"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#3_2","text":"a.\u5047\u8bbe\u53ea\u6709\u6709\u9650\u6570\u91cf\u7684\u6837\u672c\u662f\u975e\u96f6\u503c\uff0c\u4e14\u53ea\u9700\u5728\u6709\u9650\u65f6\u95f4\u533a\u95f4\u4e0a\u8fdb\u884c\u4fe1\u53f7\u91cd\u5efa\uff0c\u5199\u51fasinc\u5185\u63d2\u8868\u8fbe\u5f0f\u3002 \u8bbe\u6709\u9650\u6837\u672c\u51fd\u6570\u957f\u5ea6\u4e3aN\uff0c x_a(t)=\\sum_{n=0}^{N-1}x_a(t)\\frac{sin(\\pi(t-nT_s/T_s))}{\\pi(t-nT_s/T_s)} x_a(t)=\\sum_{n=0}^{N-1}x_a(t)\\frac{sin(\\pi(t-nT_s/T_s))}{\\pi(t-nT_s/T_s)} b.\u5bf9t=0\u5904\u7684\u6570\u503c\u4e3a1\u7684\u5355\u70b9\u6837\u672c\u8fdb\u884c\u63d2\u503c\uff0c\u7ed8\u51fa\u5927\u7ea6\u4ece-5\u5230+5\u7684\u7ed3\u679c\u3002\u5b83\u5e94\u8be5\u4e0esinc\u51fd\u6570\u5f62\u72b6\u4e00\u81f4\u3002 clear; T=1; dt=0.01; t= (-5:dt:5); x=1; sinc = (sin(pi.*t./T))./(pi.*t./T);%sinc\u5185\u63d2\u8868\u793a\u5f0f x_a=conv(x,sinc); plot(t,x_a),grid on; title('\u63d2\u503c\u91cd\u5efa\u7ed3\u679c'),xlabel('x'),ylabel('y'); \u7ed3\u679c\u5982\u56fe3.3.1 c.\u73b0\u5728\u5bf9sinc\u51fd\u6570\u5185\u63d2\u53ca\u5b9e\u9a8c\u5185\u5bb91\u4e2d\u7684\u4e09\u70b9\u60c5\u5f62\u8fdb\u884c\u63d2\u503c\uff0c\u5c06\u5176\u7ed3\u679c\u4e0e\u62df\u5408\u4e3a\u6b63\u5f26\u6ce2\u7684\u7ed3\u679c\u76f8\u6bd4\u8f83 clear; x0=2;x1=1;x2=-1; x=[x0,x1,x2]; T=1; dt=0.01; t= (-5:dt:5); x_a=zeros(1,1201);%\u79fb\u4f4d\u76f8\u52a0\u51711201\u4e2a\u70b9 sinc = (sin(pi.*t./T))./(pi.*t./T); for n = 0:2%\u79fb\u4f4d\u76f8\u52a0 x_a((1+n*100):(1+n*100+1000))=\\ x_a((1+n*100):(1+n*100+1000))+x(n+1)*(sin(pi.*t./T))./(pi.*t./T); end x_a=x_a(501:701);%\u622a\u53d6t=0\u52302\u5bf9\u5e94\u7684\u503c t_a=(0:dt:2); plot(t_a,x_a),grid on; title('\u63d2\u503c\u91cd\u5efa\u7ed3\u679c'),xlabel('x'),ylabel('y'); \u7ed3\u679c\u5982\u56fe3.3.2","title":"3. \u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#4_1","text":"\u89e3\u51b3\u4e0b\u9762\u7684\u95ee\u9898\uff1a\u5e26\u9650\u4e8e\u67d0\u9891\u7387 f_B f_B \u7684\u4fe1\u53f7\u53ef\u4ee5\u7528 f_S=2f_B f_S=2f_B \u8fdb\u884c\u62bd\u6837\uff0c\u5e76\u53ef\u4ee5\u7531\u622a\u6b62\u9891\u7387\u4e3a f_B f_B \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u6062\u590d\uff0c\u6b64\u7ed3\u8bba\u5bf9\u4e8e\u5e26\u9650\u4e8e fb fb \u7684\u7b2c\u4e8c\u4e2a\u4fe1\u53f7\u540c\u6837\u6210\u7acb\uff0c\u5176\u4e2d f_b f_b \u5c0f\u4e8e f_B f_B ,\u8fd9\u662f\u56e0\u4e3a\u5e26\u9650\u4e8e f_b f_b \u7684\u4fe1\u53f7\u4e5f\u5e26\u9650\u4e8e f_B f_B \u3002\u540c\u6837\uff0c\u5e26\u9650\u4e8e f_b f_b \u7684\u4fe1\u53f7\u4e5f\u53ef\u4ee5\u7528 f_S f_S \u62bd\u6837\u5e76\u7531\u622a\u6b62\u9891\u7387\u4e3a f_b f_b \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u6062\u590d\uff0c\u8be5\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u51b2\u6fc0\u54cd\u5e94\uff08sinc\u51fd\u6570\uff09\u6bd4\u622a\u6b62\u9891\u7387\u4e3a f_B=f_S/2 f_B=f_S/2 \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u51b2\u6fc0\u54cd\u5e94\u66f4\u5bbd\u3002\u80fd\u5426\u4f7f\u7528\u622a\u6b62\u9891\u7387\u4e3a f_b < f_S/2 f_b < f_S/2 \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u91cd\u5efa\u54cd\u5e94\u5bf9\u5e26\u9650\u4e8e f_b f_b \u5e76\u4ee5 f_S f_S \u62bd\u6837\u5f97\u5230\u7684\u4fe1\u53f7\u6837\u672c\u8fdb\u884c\u63d2\u503c\uff1f \u53ef\u4ee5\uff0c\u622a\u81f3\u9891\u7387fb \u5c0f\u4e8e\u91c7\u6837\u9891\u7387fS\u4e00\u534a\uff0c\u9891\u57df\u65e0\u6df7\u53e0\u73b0\u8c61\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u622a\u6b62\u9891\u7387\u4e3afb < fS /2\u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u91cd\u5efa\u54cd\u5e94\u5bf9\u5e26\u9650\u4e8efb \u5e76\u4ee5fS \u62bd\u6837\u5f97\u5230\u7684\u4fe1\u53f7\u6837\u672c\u8fdb\u884c\u63d2\u503c\u3002","title":"4. \u8bbe\u5b9a\u5e26\u5bbd\u7684\u9009\u62e9"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#6","text":"\u56fe1.1.1 \u56fe1.1.2 \u56fe1.1.3 \u56fe2.1 \u56fe2.2.1 \u56fe2.2.2 \u56fe3.1.1 \u56fe3.1.2] \u56fe3.1.3 \u56fe3.1.4 \u56fe3.2.1 \u56fe3.2.2 \u56fe3.2.3 \u56fe3.3.1 \u56fe3.3.2","title":"6. \u5b9e\u9a8c\u7ed3\u679c\u603b\u7ed3"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#7","text":"","title":"7. \u7ed3\u679c\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#1_3","text":"\u53ea\u6709\u5f53(\u91c7\u6837\u9891\u7387 \\ge \\ge \u6837\u672c\u9891\u7387\u76842\u500d)\u65f6\uff0c\u624d\u80fd\u8f83\u597d\u7684\u8fd8\u539f\u4fe1\u53f7\u3002100HZ\u65f6\u65e0\u6cd5\u91cd\u73b0\u4fe1\u53f7\uff0c1KHZ\u65f6\u80fd\u91cd\u73b0\u6837\u672c\u4fe1\u53f7\u7684\u5c40\u90e8\u5173\u7cfb\uff0c10KHZ\u65f6\u80fd\u8f83\u5b8c\u6574\u7684\u91cd\u73b0\u6837\u672c\u4fe1\u53f7\u3002","title":"1. \u62bd\u6837\u5f15\u8d77\u7684\u6df7\u53e0"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#2_3","text":"a. \u5076\u51fd\u6570\uff0c\u5728 |\\Omega|>4000\\pi |\\Omega|>4000\\pi \u65f6\uff0c\u5e45\u503c\u51e0\u4e4e\u4e3a\u96f6\u3002 b. \u4e0d\u540c\u91c7\u6837\u9891\u7387\u7684DTFT\u4e0e X(j\\Omega) X(j\\Omega) \u6bd4\u8f83\uff0c\u5b83\u4eec\u4ec5\u5728\u5e45\u503c\u4e0a\u6709\u5dee\u5f02\uff0c\u8fd9\u662f\u56e0\u4e3a\u91c7\u6837\u70b9\u6570\u589e\u52a0\uff0c\u5e8f\u5217\u957f\u5ea6\u589e\u52a0\uff0c\u5e45\u503c\u589e\u52a0\u3002","title":"2. \u62bd\u6837\u7684\u9891\u57df\u89c6\u56fe"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#3_3","text":"","title":"3. \u4ece\u6837\u672c\u91cd\u5efa\u4fe1\u53f7"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#1_4","text":"\u80fd\u6c42\u51fa\u89e3\uff0c\u4e09\u4e2a\u672a\u77e5\u6570\uff0c\u4e09\u4e2a\u65b9\u7a0b\uff0c\u53ea\u4e0d\u8fc7\u67094\u7ec4\u89e3\uff0c\u5229\u7528matlab\u89e3\u65b9\u7a0b\u7ec4\uff0c\u7ed3\u679c\u5982\u56fe3.1.1 ,3.1.2 ,3.1.3 ,3.1.4","title":"1. \u62df\u5408\u4e3a\u6b63\u5f26\u6ce2"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#2_4","text":"a. plot\u6307\u4ee4\u901a\u8fc7\u628a\u6bcf\u4e24\u4e2a\u70b9\u8fde\u6210\u4e00\u6761\u76f4\u7ebf\uff0c\u7ed8\u51fa\u7ed3\u679c\u3002 b. \u901a\u8fc7\u4e09\u89d2\u51b2\u6fc0\u540e\uff0c\u548c\u7ebf\u6027\u63d2\u503c\u7ed3\u679c\u76f8\u540c\u3002 c. \u4e09\u4e2a\u70b9\u521a\u597d\u80fd\u552f\u4e00\u786e\u5b9a\u4e00\u4e2a\u4e8c\u9636\u591a\u9879\u5f0f\uff0c\u5b9e\u9645\u4e2d\u4e0d\u80fd\u5b9e\u73b0\u8fd9\u79cd\u4fe1\u53f7\uff0c\u53ea\u80fd\u65e0\u9650\u63a5\u8fd1\uff0c\u4e14\u4e0d\u80fd\u5f88\u597d\u5728 0\\le t\\le 2 0\\le t\\le 2 \u6269\u5c55\u4fe1\u53f7\u503c\uff0c\uff08\u8870\u51cf\u8fc5\u901f\uff09\u3002","title":"2. \u7ebf\u6027\u4e0e\u591a\u9879\u5f0f\u5185\u63d2"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#3_4","text":"c. \u63d2\u503c\u7ed3\u679c\u63a5\u8fd1\u6b63\u5f26\u6ce2\u3002","title":"3. \u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#4_2","text":"\u53ef\u4ee5\uff0c\u622a\u81f3\u9891\u7387fb \u5c0f\u4e8e\u91c7\u6837\u9891\u7387fS\u4e00\u534a\uff0c\u9891\u57df\u65e0\u6df7\u53e0\u73b0\u8c61\u3002","title":"4. \u8bbe\u5b9a\u5e26\u5bbd\u7684\u9009\u62e9"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#8","text":"\u5bf9\u4e8e\u91c7\u6837\u9891\u7387\u589e\u52a0\uff0cDTFT\u7ed3\u679c\u5e45\u5ea6\u589e\u52a0\u7684\u73b0\u8c61\u6709\u4e86\u7406\u89e3\u3002 \u5bf9\u4e0d\u540c\u65b9\u5f0f\u7684\u63d2\u503c\u65b9\u6cd5\u91cd\u5efa\u4fe1\u53f7\u7ed3\u679c\u8fdb\u884c\u4e86\u5206\u6790\uff0c\u52a0\u6df1\u4e86\u7406\u89e3\u3002 \u76f4\u63a5\u7528for\u5faa\u73af\u5199\u4e86\u5377\u79ef\uff0c\u8ba4\u8bc6\u5230\u5176\u5b9e\u8d28\u4e3a\u79fb\u4f4d\u4e0d\u540c\u6743\u503c\u76f8\u52a0\u3002","title":"8.\u5fc3\u5f97\u4f53\u4f1a"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/SpectrumAnalysis/","text":"\u8c31\u5206\u6790 1. \u5b9e\u9a8c\u9879\u76ee\u540d\u79f0 \u8c31\u5206\u6790 2.\u5b9e\u9a8c\u76ee\u7684 \u7814\u7a76\u4e0d\u540c\u7c7b\u578b\u7684\u7a97\u51fd\u6570\uff0c\u7814\u7a76\u4e00\u4e9b\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u6d4b\u8bd5\u7a97\u7684\u6027\u80fd\uff1b\u4e13\u6ce8\u4e8e\u6709\u5173\u7a84\u5e26\u4fe1\u53f7\u7684\u51e0\u4e2a\u4e0d\u540c\u7684\u60c5\u5f62\uff0c\u8981\u6c42\u5408\u7ec4\u8ba8\u8bba\u3001\u5355\u72ec\u5b9e\u9a8c\uff0c2\u5b66\u65f6\u3002 3. \u5b9e\u9a8c\u5185\u5bb9\u4e0e\u6b65\u9aa4 \u5b9e\u9a8c\u5185\u5bb9\uff1a \u4fe1\u53f7\u662f\u65e0\u9650\u957f\u7684\uff0c\u800c\u5728\u8fdb\u884c\u4fe1\u53f7\u5904\u7406\u65f6\u53ea\u80fd\u91c7\u7528\u6709\u9650\u957f\u4fe1\u53f7\uff0c\u6240\u4ee5\u9700\u8981\u5c06\u4fe1\u53f7\u201c\u622a\u65ad\u201d\u3002\u5728\u4fe1\u53f7\u5904\u7406\u4e2d\uff0c\u201c\u622a\u65ad\u201d\u88ab\u770b\u6210\u662f\u7528\u4e00\u4e2a\u6709\u9650\u957f\u7684\u201c\u7a97\u53e3\u201d\u770b\u65e0\u9650\u957f\u7684\u4fe1\u53f7\uff0c\u6216\u8005\u4ece\u5206\u6790\u7684\u89d2\u5ea6\u662f\u65e0\u9650\u957f\u7684\u4fe1\u53f7x(t)\u4e58\u4ee5\u4e00\u4e2a\u6709\u9650\u957f\u7684\u7a97\u51fd\u6570w(t)\uff0c\u7531\u5085\u91cc\u53f6\u53d8\u6362\u6027\u8d28\u53ef\u77e5 x(t)\\Leftrightarrow \\frac{1}{2\\pi}X(j\\omega)W(j\\omega) x(t)\\Leftrightarrow \\frac{1}{2\\pi}X(j\\omega)W(j\\omega) \u5982\u679c\u662fx(t)\u662f\u9891\u5bbd\u6709\u9650\u4fe1\u53f7\uff0c\u800cw(t)\u662f\u9891\u5bbd\u65e0\u9650\u51fd\u6570\uff0c\u622a\u65ad\u540e\u7684\u4fe1\u53f7\u4e5f\u5fc5\u662f\u9891\u5bbd\u65e0\u9650\u4fe1\u53f7\uff0c\u4ece\u800c\u4ea7\u751f\u6240\u8c13\u7684\u9891\u8c31\u6cc4\u9732\u3002\u9891\u8c31\u6cc4\u9732\u662f\u4e0d\u53ef\u907f\u514d\u7684\uff0c\u4f46\u8981\u5c3d\u91cf\u51cf\u5c0f\uff0c\u56e0\u6b64\u8bbe\u8ba1\u4e86\u4e0d\u540c\u7684\u7a97\u51fd\u6570\u6ee1\u8db3\u4e0d\u540c\u7528\u9014\u7684\u8981\u6c42\u3002\u4ece\u80fd\u91cf\u7684\u89d2\u5ea6\uff0c\u9891\u8c31\u6cc4\u9732\u4e5f\u662f\u80fd\u91cf\u6cc4\u9732\uff0c\u56e0\u4e3a\u52a0\u7a97\u540e\uff0c\u4f7f\u539f\u6765\u7684\u4fe1\u53f7\u96c6\u4e2d\u5728\u7a84\u5e26\u5185\u7684\u80fd\u91cf\u5206\u6563\u5230\u65e0\u9650\u7684\u9891\u5bbd\u8303\u56f4\u3002 Matlab\u4e2d\u63d0\u4f9b\u4e868\u79cd\u7a97\u51fd\u6570\uff1a\u77e9\u5f62\u7a97\u3001\u6c49\u5b81\u7a97\u3001\u6c49\u660e\u7a97\u3001\u5df4\u7279\u5229\u7279\u7a97\u3001\u5e03\u83b1\u514b\u66fc\u3001triang\u7a97\u3001kaiser\u7a97\u3001\u5207\u6bd4\u96ea\u592b\u7a97 \u5404\u79cd\u7a97\u51fd\u6570\u7684\u5e45\u9891\u54cd\u5e94\u90fd\u5b58\u5728\u660e\u663e\u7684\u4e3b\u74e3\u548c\u65c1\u74e3\uff0c\u4e3b\u74e3\u9891\u5bbd\u4e0e\u65c1\u74e3\u9891\u5bbd\u7684\u7279\u6027\u51b3\u5b9a\u7a97\u51fd \u6570\u7684\u5e94\u7528\u3002\u4e0d\u540c\u7684\u7a97\u51fd\u6570\u5728\u8fd9\u4e24\u65b9\u9762\u7684\u7279\u70b9\u662f\u4e0d\u76f8\u540c\u7684\u3002\u5982blcakman\u7a97\u5177\u6709\u6700\u5bbd\u7684\u4e3b\u74e3\uff0c\u800cchebyshev\u7a97\u5177\u6709\u6700\u7a84\u7684\u4e3b\u74e3\u7b49\u3002 \u4e3b\u74e3\u7684\u9891\u5bbd\u8fd8\u4e0e\u7a97\u7684\u957f\u5ea6N\u6709\u5173\uff0c\u589e\u52a0\u7a97\u957f\u5ea6N\u5c06\u7f29\u5c0f\u7a97\u51fd\u6570\u4e3b\u74e3\u5bbd\u5ea6\uff0c\u4f46\u4e0d\u80fd\u51cf\u5c0f\u65c1\u74e3\u5e45\u503c\u8870\u51cf\u76f8\u5bf9\u503c\uff08\u5206\u8d1d\u6570\uff09\uff0c\u8fd9\u4e2a\u503c\u662f\u7531\u7a97\u51fd\u6570\u51b3\u5b9a\u7684\u3002 1. \u7528Matlab\u7f16\u7a0b\u7ed8\u5236\u5404\u79cd\u7a97\u51fd\u6570\u7684\u5f62\u72b6\u3002 2. \u7528Matlab\u7f16\u7a0b\u7ed8\u5236\u5404\u79cd\u7a97\u51fd\u6570\u7684\u5e45\u9891\u54cd\u5e94\u3002 3. \u7ed8\u5236\u77e9\u5f62\u7a97\u7684\u5e45\u9891\u76f8\u5e94\uff0c\u7a97\u957f\u5ea6\u5206\u522b\u4e3a\uff1aN=10\uff0cN=20\uff0cN=50\uff0cN=100\u3002 4. \u5df2\u77e5\u5468\u671f\u4fe1\u53f7 x(t)=0.75+3.4cos(2\\pi ft)+2.7cos(4\\pi ft)+1.5sin(3.5\\pi ft)+2.5sin(7\\pi ft) x(t)=0.75+3.4cos(2\\pi ft)+2.7cos(4\\pi ft)+1.5sin(3.5\\pi ft)+2.5sin(7\\pi ft) \u5176\u4e2d\uff0c f=\\frac{25}{16} f=\\frac{25}{16} Hz\uff0c\u82e5\u622a\u65ad\u7684\u65f6\u95f4\u957f\u5ea6\u5206\u522b\u4e3a\u4fe1\u53f7\u5468\u671f\u76840.9\u500d\u548c1.1\u500d\uff0c\u8bd5\u7ed8\u5236\u548c\u6bd4 \u8f83\u91c7\u7528\u4e0b\u9762\u7a97\u51fd\u6570\u63d0\u53d6\u7684x(t)\u7684\u9891\u8c31\u3002 (1)\u77e9\u5f62\u7a97 (2)\u6c49\u5b81\u7a97 (3)\u6c49\u660e\u7a97 (4)\u5df4\u7279\u5229\u7279\u7a97 (5)\u5e03\u83b1\u514b\u66fc\u7a97 (6)triang\u7a97 (7)kaiser\u7a97 (8)\u5207\u6bd4\u96ea\u592b\u7a97 4. \u5b9e\u9a8c\u73af\u5883 MATLAB R2019b 5. \u5b9e\u9a8c\u8fc7\u7a0b\u4e0e\u5206\u6790\u7a0b\u5e8f\u6587\u672c 1. \u7528Matlab\u7f16\u7a0b\u7ed8\u5236\u5404\u79cd\u7a97\u51fd\u6570\u7684\u5f62\u72b6 N=100; w1=boxcar(N); figure(1); stem(w1); title('\u56fe1.1\uff1a\u77e9\u5f62\u7a97boxcar'); xlabel('n'),ylabel('w1'); w2=hanning(N); figure(2); stem(w2); title('\u56fe1.2\uff1a\u6c49\u5b81\u7a97Hanning'); xlabel('n'),ylabel('w2'); w3=hamming(N); figure(3); stem(w3); title('\u56fe1.3\uff1a\u6c49\u660e\u7a97Hamming'); xlabel('n'),ylabel('w3'); w4=bartlett(N); figure(4); stem(w4); title('\u56fe1.4\uff1a\u5df4\u7279\u5229\u7279\u7a97bartlett'); xlabel('n'),ylabel('w4'); w5=blackman(N); figure(5); stem(w5); title('\u56fe1.5\uff1a\u5e03\u83b1\u514b\u66fc\u7a97blackman'); xlabel('n'),ylabel('w5'); w6=triang(N); figure(6); stem(w6); title('\u56fe1.6\uff1atriang\u7a97'); xlabel('n'),ylabel('w6'); w7=kaiser(N); figure(7); stem(w7); title('\u56fe1.7\uff1akaiser\u7a97'); xlabel('n'),ylabel('w7'); w8=chebwin(N); figure(8); stem(w8); title('\u56fe1.8\uff1a\u5207\u6bd4\u96ea\u592b\u7a97chebwin'); xlabel('n'),ylabel('w8'); \u7ed3\u679c\u5982\u56fe1.1-1.8 2. \u7528Matlab\u7f16\u7a0b\u7ed8\u5236\u5404\u79cd\u7a97\u51fd\u6570\u7684\u5e45\u9891\u54cd\u5e94 clear; N=100;%\u9009\u62e9\u7a97\u51fd\u6570\u7684\u957f\u5ea6 subplot(421); [H W]=dtft(boxcar(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.1\uff1aboxcar\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(422); [H W]=dtft(hanning(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.2\uff1aHanning\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(423); [H W]=dtft(hamming(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.3\uff1aHamming\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(424); [H W]=dtft(bartlett(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.4\uff1abartlett\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(425); [H W]=dtft(blackman(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.5\uff1ablackman\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(426); [H W]=dtft(triang(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.6\uff1atriang\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(427); [H W]=dtft(kaiser(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.7\uff1akaiser\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(428); [H W]=dtft(chebwin(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.8\uff1ahebwin\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); \u7ed3\u679c\u5982\u56fe2.1-2.8 3. \u7ed8\u5236\u77e9\u5f62\u7a97\u7684\u5e45\u9891\u76f8\u5e94 clear; N=[10,20,50,100]; w1=boxcar(N(1)); subplot(411); [H,W]=dtft(w1,1024); plot(W/pi,abs(H)); title('\u56fe3.1\uff1a\u957f\u5ea6\u4e3a10\u7684\u77e9\u5f62\u7a97\u5e45\u9891\u7279\u54cd\u5e94'); xlabel('\u9891\u7387\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); w2=boxcar(N(2)); subplot(412); [H,W]=dtft(w2,1024); plot(W/pi,abs(H)); title('\u56fe3.2\uff1a\u957f\u5ea6\u4e3a20\u7684\u77e9\u5f62\u7a97\u5e45\u9891\u7279\u54cd\u5e94'); xlabel('\u9891\u7387\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); w3=boxcar(N(3)); subplot(413); [H,W]=dtft(w3,1024); plot(W/pi,abs(H)); title('\u56fe3.3\uff1a\u957f\u5ea6\u4e3a50\u7684\u77e9\u5f62\u7a97\u5e45\u9891\u7279\u54cd\u5e94'); xlabel('\u9891\u7387\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); w4=boxcar(N(4)); subplot(414); [H,W]=dtft(w4,1024); plot(W/pi,abs(H)); title('\u56fe3.4\uff1a\u957f\u5ea6\u4e3a100\u7684\u77e9\u5f62\u7a97\u5e45\u9891\u7279\u54cd\u5e94'); xlabel('\u9891\u7387\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); \u56db\u79cd\u957f\u5ea6\u5206\u522b\u5bf9\u5e94\u56fe3.1-3.4 4. \u7ed8\u5236\u548c\u6bd4\u8f83\u91c7\u7528\u5404\u79cd\u7a97\u51fd\u6570\u63d0\u53d6\u7684x(t)\u7684\u9891\u8c31 \u4ee41/f=T,\u52194\u4e2a\u6b63\u5f26\u5206\u91cf\u7684\u5468\u671f\u5206\u522b\u4e3aT\uff0c1/2T\uff0c4/7T\u548c2/7T\uff0c \u5219x\uff08t\uff09\u7684\u57fa\u672c\u5468\u671f\u4e3a14T\uff0c clear; f=25/16; %\u5b9e\u9a8c\u4fe1\u53f7\u7684\u5468\u671f\u4e3a25/16 T=14*(1/f); fs=100; %\u91c7\u6837\u9891\u7387 f1=round(0.9*T*fs); f2=round(1.1*T*fs); t1=0:f1-1; t2=0:f2-1; xt1=0.75+3.4*cos(2*pi*f.*t1/fs)+2.7*cos(4*pi*f.*t1/fs)+1.5*sin(3.5*pi*f.*t1/fs)+2.5*sin(7*pi.*t1/fs); xt2=0.75+3.4*cos(2*pi*f.*t2/fs)+2.7*cos(4*pi*f.*t2/fs)+1.5*sin(3.5*pi*f.*t2/fs)+2.5*sin(7*pi.*t2/fs); figure(1); subplot(211),grid; w11=boxcar(f1); x1=w11.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.1.1\uff1a0.9T0\u77e9\u5f62\u7a97boxcar\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; w12=boxcar(f2); x2=w12.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.1.2\uff1a1.1T0\u77e9\u5f62\u7a97boxcar\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(2); w21=hanning(f1); w22=hanning(f2); subplot(211),grid; x1=w21.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.2.1\uff1a0.9T0\u6c49\u5b81\u7a97Hanning\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w22.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.2.2\uff1a1.1T0\u6c49\u5b81\u7a97Hanning\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(3); w31=hamming(f1); w32=hamming(f2); subplot(211),grid; x1=w31.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.3.1\uff1a0.9T0\u6c49\u660e\u7a97Hamming\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w32.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.3.2\uff1a1.1T0\u6c49\u660e\u7a97Hamming\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(4); w41=bartlett(f1); w42=bartlett(f2); subplot(211),grid; x1=w41.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.4.1\uff1a0.9T0\u5df4\u7279\u5229\u7279\u7a97bartlett\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w42.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.4.2\uff1a1.1T0\u5df4\u7279\u5229\u7279\u7a97bartlett\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(5); w51=blackman(f1); w52=blackman(f2); subplot(211),grid; x1=w51.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.5.1\uff1a0.9T0\u5e03\u83b1\u514b\u66fc\u7a97blackman\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w52.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.5.2\uff1a1.1T0\u5e03\u83b1\u514b\u66fc\u7a97blackman\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(6); w61=triang(f1); w62=triang(f2); subplot(211),grid; x1=w61.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.6.1\uff1a0.9T0\u7684triang\u7a97\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w62.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.6.2\uff1a1.1T0\u7684triang\u7a97\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(7); w71=kaiser(f1); w72=kaiser(f2); subplot(211),grid; x1=w71.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.7.1\uff1a10.9T0\u7684kaiser\u7a97\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w72.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.7.2\uff1a1.1T0\u7684kaiser\u7a97\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(8); w81=chebwin(f1); w82=chebwin(f2); subplot(211),grid; x1=w81.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.8.1\uff1a0.9T0\u5207\u6bd4\u96ea\u592b\u7a97chebwin\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w82.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.8.2\uff1a1.1T0\u5207\u6bd4\u96ea\u592b\u7a97chebwin\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); \u7ed3\u679c\u5982\u56fe4.1.1-4.8.2 7. \u7ed3\u679c\u5206\u6790 \u7ed8\u5236\u4e868\u79cd\u7a97\u51fd\u6570\u7684\u5f62\u72b6\uff0c\u5728\u7ed8\u5236\u5468\u671f\u51fd\u6570\u65f6\uff0c\u65e0\u8bba0.9\u8fd8\u662f1.1T\u90fd\u53d1\u751f\u4e86\u9891\u8c31\u6cc4\u9732\u73b0\u8c61\uff0c\u63a8\u6d4b\u53ea\u8981\u4e0d\u662f\u6574\u6570\u500d\u90fd\u4f1a\u6709\u9891\u8c31\u6cc4\u9732\u73b0\u8c61\u7684\u53d1\u751f 8.\u5fc3\u5f97\u4f53\u4f1a \u52a8\u624b\u5b9e\u73b0\u4e868\u79cd\u7a97\u51fd\u6570\u7684\u5f62\u72b6\uff0c\u5bf9\u5176\u5f62\u72b6\u52a0\u6df1\u4e86\u5370\u8c61\u3002 \u4e86\u89e3\u5230\u4e86\u7a97\u51fd\u6570\u4f1a\u5bfc\u81f4\u9891\u8c31\u6cc4\u9732\u73b0\u8c61\u3002","title":"\u8c31\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/SpectrumAnalysis/#_1","text":"","title":"\u8c31\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/SpectrumAnalysis/#1","text":"\u8c31\u5206\u6790","title":"1. \u5b9e\u9a8c\u9879\u76ee\u540d\u79f0"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/SpectrumAnalysis/#2","text":"\u7814\u7a76\u4e0d\u540c\u7c7b\u578b\u7684\u7a97\u51fd\u6570\uff0c\u7814\u7a76\u4e00\u4e9b\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u6d4b\u8bd5\u7a97\u7684\u6027\u80fd\uff1b\u4e13\u6ce8\u4e8e\u6709\u5173\u7a84\u5e26\u4fe1\u53f7\u7684\u51e0\u4e2a\u4e0d\u540c\u7684\u60c5\u5f62\uff0c\u8981\u6c42\u5408\u7ec4\u8ba8\u8bba\u3001\u5355\u72ec\u5b9e\u9a8c\uff0c2\u5b66\u65f6\u3002","title":"2.\u5b9e\u9a8c\u76ee\u7684"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/SpectrumAnalysis/#3","text":"\u5b9e\u9a8c\u5185\u5bb9\uff1a \u4fe1\u53f7\u662f\u65e0\u9650\u957f\u7684\uff0c\u800c\u5728\u8fdb\u884c\u4fe1\u53f7\u5904\u7406\u65f6\u53ea\u80fd\u91c7\u7528\u6709\u9650\u957f\u4fe1\u53f7\uff0c\u6240\u4ee5\u9700\u8981\u5c06\u4fe1\u53f7\u201c\u622a\u65ad\u201d\u3002\u5728\u4fe1\u53f7\u5904\u7406\u4e2d\uff0c\u201c\u622a\u65ad\u201d\u88ab\u770b\u6210\u662f\u7528\u4e00\u4e2a\u6709\u9650\u957f\u7684\u201c\u7a97\u53e3\u201d\u770b\u65e0\u9650\u957f\u7684\u4fe1\u53f7\uff0c\u6216\u8005\u4ece\u5206\u6790\u7684\u89d2\u5ea6\u662f\u65e0\u9650\u957f\u7684\u4fe1\u53f7x(t)\u4e58\u4ee5\u4e00\u4e2a\u6709\u9650\u957f\u7684\u7a97\u51fd\u6570w(t)\uff0c\u7531\u5085\u91cc\u53f6\u53d8\u6362\u6027\u8d28\u53ef\u77e5 x(t)\\Leftrightarrow \\frac{1}{2\\pi}X(j\\omega)W(j\\omega) x(t)\\Leftrightarrow \\frac{1}{2\\pi}X(j\\omega)W(j\\omega) \u5982\u679c\u662fx(t)\u662f\u9891\u5bbd\u6709\u9650\u4fe1\u53f7\uff0c\u800cw(t)\u662f\u9891\u5bbd\u65e0\u9650\u51fd\u6570\uff0c\u622a\u65ad\u540e\u7684\u4fe1\u53f7\u4e5f\u5fc5\u662f\u9891\u5bbd\u65e0\u9650\u4fe1\u53f7\uff0c\u4ece\u800c\u4ea7\u751f\u6240\u8c13\u7684\u9891\u8c31\u6cc4\u9732\u3002\u9891\u8c31\u6cc4\u9732\u662f\u4e0d\u53ef\u907f\u514d\u7684\uff0c\u4f46\u8981\u5c3d\u91cf\u51cf\u5c0f\uff0c\u56e0\u6b64\u8bbe\u8ba1\u4e86\u4e0d\u540c\u7684\u7a97\u51fd\u6570\u6ee1\u8db3\u4e0d\u540c\u7528\u9014\u7684\u8981\u6c42\u3002\u4ece\u80fd\u91cf\u7684\u89d2\u5ea6\uff0c\u9891\u8c31\u6cc4\u9732\u4e5f\u662f\u80fd\u91cf\u6cc4\u9732\uff0c\u56e0\u4e3a\u52a0\u7a97\u540e\uff0c\u4f7f\u539f\u6765\u7684\u4fe1\u53f7\u96c6\u4e2d\u5728\u7a84\u5e26\u5185\u7684\u80fd\u91cf\u5206\u6563\u5230\u65e0\u9650\u7684\u9891\u5bbd\u8303\u56f4\u3002 Matlab\u4e2d\u63d0\u4f9b\u4e868\u79cd\u7a97\u51fd\u6570\uff1a\u77e9\u5f62\u7a97\u3001\u6c49\u5b81\u7a97\u3001\u6c49\u660e\u7a97\u3001\u5df4\u7279\u5229\u7279\u7a97\u3001\u5e03\u83b1\u514b\u66fc\u3001triang\u7a97\u3001kaiser\u7a97\u3001\u5207\u6bd4\u96ea\u592b\u7a97 \u5404\u79cd\u7a97\u51fd\u6570\u7684\u5e45\u9891\u54cd\u5e94\u90fd\u5b58\u5728\u660e\u663e\u7684\u4e3b\u74e3\u548c\u65c1\u74e3\uff0c\u4e3b\u74e3\u9891\u5bbd\u4e0e\u65c1\u74e3\u9891\u5bbd\u7684\u7279\u6027\u51b3\u5b9a\u7a97\u51fd \u6570\u7684\u5e94\u7528\u3002\u4e0d\u540c\u7684\u7a97\u51fd\u6570\u5728\u8fd9\u4e24\u65b9\u9762\u7684\u7279\u70b9\u662f\u4e0d\u76f8\u540c\u7684\u3002\u5982blcakman\u7a97\u5177\u6709\u6700\u5bbd\u7684\u4e3b\u74e3\uff0c\u800cchebyshev\u7a97\u5177\u6709\u6700\u7a84\u7684\u4e3b\u74e3\u7b49\u3002 \u4e3b\u74e3\u7684\u9891\u5bbd\u8fd8\u4e0e\u7a97\u7684\u957f\u5ea6N\u6709\u5173\uff0c\u589e\u52a0\u7a97\u957f\u5ea6N\u5c06\u7f29\u5c0f\u7a97\u51fd\u6570\u4e3b\u74e3\u5bbd\u5ea6\uff0c\u4f46\u4e0d\u80fd\u51cf\u5c0f\u65c1\u74e3\u5e45\u503c\u8870\u51cf\u76f8\u5bf9\u503c\uff08\u5206\u8d1d\u6570\uff09\uff0c\u8fd9\u4e2a\u503c\u662f\u7531\u7a97\u51fd\u6570\u51b3\u5b9a\u7684\u3002 1. \u7528Matlab\u7f16\u7a0b\u7ed8\u5236\u5404\u79cd\u7a97\u51fd\u6570\u7684\u5f62\u72b6\u3002 2. \u7528Matlab\u7f16\u7a0b\u7ed8\u5236\u5404\u79cd\u7a97\u51fd\u6570\u7684\u5e45\u9891\u54cd\u5e94\u3002 3. \u7ed8\u5236\u77e9\u5f62\u7a97\u7684\u5e45\u9891\u76f8\u5e94\uff0c\u7a97\u957f\u5ea6\u5206\u522b\u4e3a\uff1aN=10\uff0cN=20\uff0cN=50\uff0cN=100\u3002 4. \u5df2\u77e5\u5468\u671f\u4fe1\u53f7 x(t)=0.75+3.4cos(2\\pi ft)+2.7cos(4\\pi ft)+1.5sin(3.5\\pi ft)+2.5sin(7\\pi ft) x(t)=0.75+3.4cos(2\\pi ft)+2.7cos(4\\pi ft)+1.5sin(3.5\\pi ft)+2.5sin(7\\pi ft) \u5176\u4e2d\uff0c f=\\frac{25}{16} f=\\frac{25}{16} Hz\uff0c\u82e5\u622a\u65ad\u7684\u65f6\u95f4\u957f\u5ea6\u5206\u522b\u4e3a\u4fe1\u53f7\u5468\u671f\u76840.9\u500d\u548c1.1\u500d\uff0c\u8bd5\u7ed8\u5236\u548c\u6bd4 \u8f83\u91c7\u7528\u4e0b\u9762\u7a97\u51fd\u6570\u63d0\u53d6\u7684x(t)\u7684\u9891\u8c31\u3002 (1)\u77e9\u5f62\u7a97 (2)\u6c49\u5b81\u7a97 (3)\u6c49\u660e\u7a97 (4)\u5df4\u7279\u5229\u7279\u7a97 (5)\u5e03\u83b1\u514b\u66fc\u7a97 (6)triang\u7a97 (7)kaiser\u7a97 (8)\u5207\u6bd4\u96ea\u592b\u7a97","title":"3. \u5b9e\u9a8c\u5185\u5bb9\u4e0e\u6b65\u9aa4"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/SpectrumAnalysis/#4","text":"MATLAB R2019b","title":"4. \u5b9e\u9a8c\u73af\u5883"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/SpectrumAnalysis/#5","text":"","title":"5. \u5b9e\u9a8c\u8fc7\u7a0b\u4e0e\u5206\u6790\u7a0b\u5e8f\u6587\u672c"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/SpectrumAnalysis/#1-matlab","text":"N=100; w1=boxcar(N); figure(1); stem(w1); title('\u56fe1.1\uff1a\u77e9\u5f62\u7a97boxcar'); xlabel('n'),ylabel('w1'); w2=hanning(N); figure(2); stem(w2); title('\u56fe1.2\uff1a\u6c49\u5b81\u7a97Hanning'); xlabel('n'),ylabel('w2'); w3=hamming(N); figure(3); stem(w3); title('\u56fe1.3\uff1a\u6c49\u660e\u7a97Hamming'); xlabel('n'),ylabel('w3'); w4=bartlett(N); figure(4); stem(w4); title('\u56fe1.4\uff1a\u5df4\u7279\u5229\u7279\u7a97bartlett'); xlabel('n'),ylabel('w4'); w5=blackman(N); figure(5); stem(w5); title('\u56fe1.5\uff1a\u5e03\u83b1\u514b\u66fc\u7a97blackman'); xlabel('n'),ylabel('w5'); w6=triang(N); figure(6); stem(w6); title('\u56fe1.6\uff1atriang\u7a97'); xlabel('n'),ylabel('w6'); w7=kaiser(N); figure(7); stem(w7); title('\u56fe1.7\uff1akaiser\u7a97'); xlabel('n'),ylabel('w7'); w8=chebwin(N); figure(8); stem(w8); title('\u56fe1.8\uff1a\u5207\u6bd4\u96ea\u592b\u7a97chebwin'); xlabel('n'),ylabel('w8'); \u7ed3\u679c\u5982\u56fe1.1-1.8","title":"1. \u7528Matlab\u7f16\u7a0b\u7ed8\u5236\u5404\u79cd\u7a97\u51fd\u6570\u7684\u5f62\u72b6"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/SpectrumAnalysis/#2-matlab","text":"clear; N=100;%\u9009\u62e9\u7a97\u51fd\u6570\u7684\u957f\u5ea6 subplot(421); [H W]=dtft(boxcar(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.1\uff1aboxcar\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(422); [H W]=dtft(hanning(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.2\uff1aHanning\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(423); [H W]=dtft(hamming(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.3\uff1aHamming\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(424); [H W]=dtft(bartlett(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.4\uff1abartlett\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(425); [H W]=dtft(blackman(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.5\uff1ablackman\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(426); [H W]=dtft(triang(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.6\uff1atriang\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(427); [H W]=dtft(kaiser(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.7\uff1akaiser\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(428); [H W]=dtft(chebwin(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.8\uff1ahebwin\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); \u7ed3\u679c\u5982\u56fe2.1-2.8","title":"2. \u7528Matlab\u7f16\u7a0b\u7ed8\u5236\u5404\u79cd\u7a97\u51fd\u6570\u7684\u5e45\u9891\u54cd\u5e94"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/SpectrumAnalysis/#3_1","text":"clear; N=[10,20,50,100]; w1=boxcar(N(1)); subplot(411); [H,W]=dtft(w1,1024); plot(W/pi,abs(H)); title('\u56fe3.1\uff1a\u957f\u5ea6\u4e3a10\u7684\u77e9\u5f62\u7a97\u5e45\u9891\u7279\u54cd\u5e94'); xlabel('\u9891\u7387\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); w2=boxcar(N(2)); subplot(412); [H,W]=dtft(w2,1024); plot(W/pi,abs(H)); title('\u56fe3.2\uff1a\u957f\u5ea6\u4e3a20\u7684\u77e9\u5f62\u7a97\u5e45\u9891\u7279\u54cd\u5e94'); xlabel('\u9891\u7387\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); w3=boxcar(N(3)); subplot(413); [H,W]=dtft(w3,1024); plot(W/pi,abs(H)); title('\u56fe3.3\uff1a\u957f\u5ea6\u4e3a50\u7684\u77e9\u5f62\u7a97\u5e45\u9891\u7279\u54cd\u5e94'); xlabel('\u9891\u7387\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); w4=boxcar(N(4)); subplot(414); [H,W]=dtft(w4,1024); plot(W/pi,abs(H)); title('\u56fe3.4\uff1a\u957f\u5ea6\u4e3a100\u7684\u77e9\u5f62\u7a97\u5e45\u9891\u7279\u54cd\u5e94'); xlabel('\u9891\u7387\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); \u56db\u79cd\u957f\u5ea6\u5206\u522b\u5bf9\u5e94\u56fe3.1-3.4","title":"3. \u7ed8\u5236\u77e9\u5f62\u7a97\u7684\u5e45\u9891\u76f8\u5e94"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/SpectrumAnalysis/#4-xt","text":"\u4ee41/f=T,\u52194\u4e2a\u6b63\u5f26\u5206\u91cf\u7684\u5468\u671f\u5206\u522b\u4e3aT\uff0c1/2T\uff0c4/7T\u548c2/7T\uff0c \u5219x\uff08t\uff09\u7684\u57fa\u672c\u5468\u671f\u4e3a14T\uff0c clear; f=25/16; %\u5b9e\u9a8c\u4fe1\u53f7\u7684\u5468\u671f\u4e3a25/16 T=14*(1/f); fs=100; %\u91c7\u6837\u9891\u7387 f1=round(0.9*T*fs); f2=round(1.1*T*fs); t1=0:f1-1; t2=0:f2-1; xt1=0.75+3.4*cos(2*pi*f.*t1/fs)+2.7*cos(4*pi*f.*t1/fs)+1.5*sin(3.5*pi*f.*t1/fs)+2.5*sin(7*pi.*t1/fs); xt2=0.75+3.4*cos(2*pi*f.*t2/fs)+2.7*cos(4*pi*f.*t2/fs)+1.5*sin(3.5*pi*f.*t2/fs)+2.5*sin(7*pi.*t2/fs); figure(1); subplot(211),grid; w11=boxcar(f1); x1=w11.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.1.1\uff1a0.9T0\u77e9\u5f62\u7a97boxcar\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; w12=boxcar(f2); x2=w12.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.1.2\uff1a1.1T0\u77e9\u5f62\u7a97boxcar\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(2); w21=hanning(f1); w22=hanning(f2); subplot(211),grid; x1=w21.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.2.1\uff1a0.9T0\u6c49\u5b81\u7a97Hanning\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w22.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.2.2\uff1a1.1T0\u6c49\u5b81\u7a97Hanning\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(3); w31=hamming(f1); w32=hamming(f2); subplot(211),grid; x1=w31.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.3.1\uff1a0.9T0\u6c49\u660e\u7a97Hamming\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w32.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.3.2\uff1a1.1T0\u6c49\u660e\u7a97Hamming\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(4); w41=bartlett(f1); w42=bartlett(f2); subplot(211),grid; x1=w41.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.4.1\uff1a0.9T0\u5df4\u7279\u5229\u7279\u7a97bartlett\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w42.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.4.2\uff1a1.1T0\u5df4\u7279\u5229\u7279\u7a97bartlett\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(5); w51=blackman(f1); w52=blackman(f2); subplot(211),grid; x1=w51.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.5.1\uff1a0.9T0\u5e03\u83b1\u514b\u66fc\u7a97blackman\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w52.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.5.2\uff1a1.1T0\u5e03\u83b1\u514b\u66fc\u7a97blackman\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(6); w61=triang(f1); w62=triang(f2); subplot(211),grid; x1=w61.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.6.1\uff1a0.9T0\u7684triang\u7a97\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w62.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.6.2\uff1a1.1T0\u7684triang\u7a97\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(7); w71=kaiser(f1); w72=kaiser(f2); subplot(211),grid; x1=w71.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.7.1\uff1a10.9T0\u7684kaiser\u7a97\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w72.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.7.2\uff1a1.1T0\u7684kaiser\u7a97\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(8); w81=chebwin(f1); w82=chebwin(f2); subplot(211),grid; x1=w81.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.8.1\uff1a0.9T0\u5207\u6bd4\u96ea\u592b\u7a97chebwin\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w82.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.8.2\uff1a1.1T0\u5207\u6bd4\u96ea\u592b\u7a97chebwin\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); \u7ed3\u679c\u5982\u56fe4.1.1-4.8.2","title":"4. \u7ed8\u5236\u548c\u6bd4\u8f83\u91c7\u7528\u5404\u79cd\u7a97\u51fd\u6570\u63d0\u53d6\u7684x(t)\u7684\u9891\u8c31"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/SpectrumAnalysis/#7","text":"\u7ed8\u5236\u4e868\u79cd\u7a97\u51fd\u6570\u7684\u5f62\u72b6\uff0c\u5728\u7ed8\u5236\u5468\u671f\u51fd\u6570\u65f6\uff0c\u65e0\u8bba0.9\u8fd8\u662f1.1T\u90fd\u53d1\u751f\u4e86\u9891\u8c31\u6cc4\u9732\u73b0\u8c61\uff0c\u63a8\u6d4b\u53ea\u8981\u4e0d\u662f\u6574\u6570\u500d\u90fd\u4f1a\u6709\u9891\u8c31\u6cc4\u9732\u73b0\u8c61\u7684\u53d1\u751f","title":"7. \u7ed3\u679c\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/SpectrumAnalysis/#8","text":"\u52a8\u624b\u5b9e\u73b0\u4e868\u79cd\u7a97\u51fd\u6570\u7684\u5f62\u72b6\uff0c\u5bf9\u5176\u5f62\u72b6\u52a0\u6df1\u4e86\u5370\u8c61\u3002 \u4e86\u89e3\u5230\u4e86\u7a97\u51fd\u6570\u4f1a\u5bfc\u81f4\u9891\u8c31\u6cc4\u9732\u73b0\u8c61\u3002","title":"8.\u5fc3\u5f97\u4f53\u4f1a"}]}