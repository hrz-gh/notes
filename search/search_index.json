{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u4e66\u5355 \u6570\u5b66(\u8fdb\u9636) \u300a\u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1\u300b\u9648\u5e0c\u5b7a \u8457 PDF \u300a\u77e9\u9635\u5206\u6790\u4e0e\u5e94\u7528\u300b\u5f20\u8d24\u8fbe PDF \u300a\u666e\u6797\u65af\u987f\u5fae\u79ef\u5206\u8bfb\u672c\u300b PDF \u300a\u5e94\u7528\u8fd1\u4e16\u4ee3\u6570 \u7b2c3\u7248\u300b\u80e1\u51a0\u7ae0 \u8457 PDF \u300aConvex Optimization\u300bby Stephen Boyd PDF \u7f16\u7a0b\u8bed\u8a00 C\u8bed\u8a00 \u300aC Primer Plus\u300b(\u5165\u95e8 ) PDF \u300aC\u548c\u6307\u9488\u300b\u7ecf\u5178 PDF C++ \u300aC++ Primer Plus\u300b(\u9002\u5408\u65e0C\u8bed\u8a00\u57fa\u7840\u5165\u95e8) PDF \u300aC++ Primer\u300b(\u63d0\u9ad8) PDF \u300aThe C++ Programming Language\u300b\u6743\u5a01 PDF \u300aEffective Modern C++\u300bC++11/14 PDF \u300aModern C++ Tutorial C++ 11/14/17/20 On the Fly\u300b\u9ad8\u901f\u4e0a\u624bC++11/14\u6559\u7a0b PDF \u300aExceptional C++\uff1a47\u4e2aC++\u5de5\u7a0b\u96be\u9898\u3001\u7f16\u7a0b\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6848\u300b PDF Java \u300aHead First Java\u300b(\u5165\u95e8) PDF \u300a\u75af\u72c2Java\u8bb2\u4e49\u300b PDF \u300aJava\u7f16\u7a0b\u601d\u60f3\u300b PDF \u300aJava\u6838\u5fc3\u6280\u672f\u300b PDF1 \u3001 PDF2 \u300aEffective Java\u300b\u7b2c3\u7248 PDF Python \u300aPython\u7f16\u7a0b\u5165\u95e8\u5230\u5b9e\u8df5[\u7f8e]\u300b(\u5165\u95e8) PDF \u300a\u6d41\u7545\u7684Python\u300b\u8fdb\u9636 PDF Android\u5f00\u53d1 \u300a\u7b2c\u4e00\u884c\u4ee3\u7801Android\u300b\u7b2c2\u7248(\u5165\u95e8) PDF \u300aAndroid\u7f16\u7a0b\u6743\u5a01\u6307\u5357\u300b(\u63d0\u5347) PDF \u300aAndroid\u5f00\u53d1\u827a\u672f\u63a2\u7d22\u300b(\u8fdb\u9636) PDF \u300aAndroid\u6e90\u7801\u8bbe\u8ba1\u6a21\u5f0f\u89e3\u6790\u4e0e\u5b9e\u6218\u300b PDF \u300aKotlin\u7f16\u7a0b\u6743\u5a01\u6307\u5357\u300b \u300aAndroid\u7fa4\u82f1\u4f20\u300b PDF \u7b97\u6cd5 \u300a\u7b97\u6cd5\u5bfc\u8bba\u300b\u7b2c3\u7248 PDF \u300a\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u5206\u6790\u300b\u7ecf\u5178 PDF \u300a\u591a\u7ef4\u4e0e\u5ea6\u91cf\u6570\u636e\u7ed3\u6784\u57fa\u7840[\u7f8e]\u300b PDF \u300a\u7b97\u6cd5\u300b\u7b2c4\u7248\uff08Java\u63cf\u8ff0\uff09 PDF \u300a\u7b97\u6cd5\u7b14\u8bb0\u300b(\u80e1\u51e1\uff0c\u66fe\u78ca \u7f16) PDF \u300a\u6311\u6218\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u300b PDF \u300a\u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u7ecf\u5178\u300b\u7b2c2\u7248 PDF \u8ba1\u7b97\u673a\u89c6\u89c9 \u300a\u6570\u5b57\u56fe\u50cf\u5904\u7406\u300b\u5188\u8428\u96f7\u65af \u8457 PDF \u300a\u8ba1\u7b97\u673a\u89c6\u89c9\u2014\u2014\u7b97\u6cd5\u4e0e\u5e94\u7528\u300b\u7ecf\u5178 PDF \u300a\u89c6\u89c9\u673a\u5668\u5b66\u4e6020\u8bb2\u300b PDF \u300a\u89c6\u89c9SLAM\u5341\u56db\u8bb2 \u4ece\u7406\u8bba\u5230\u5b9e\u8df5\u300b\u7b2c2\u7248 \u300a\u56fe\u50cf\u5904\u7406\u3001\u5206\u6790\u4e0e\u673a\u5668\u89c6\u89c9\u300b\u7b2c4\u7248 PDF \u300a\u8ba1\u7b97\u673a\u89c6\u89c9\u6a21\u578b\u3001\u5b66\u4e60\u548c\u63a8\u7406\u300b PDF \u300aMultiple view geometry in computer vision\u300b\u7b2c2\u7248 PDF \u7f16\u7a0b \u300aPython\u8ba1\u7b97\u673a\u89c6\u89c9\u7f16\u7a0b\u300b PDF \u300a\u5b66\u4e60OpenCV3\u300b\u7ecf\u5178 \u300aOpenCV3\u7f16\u7a0b\u5165\u95e8\u300b(\u6bdb\u661f\u4e91\u7f16) PDF \u300aOpenCV\u7b97\u6cd5\u7cbe\u89e3\uff1a\u57fa\u4e8ePython\u4e0eC++\u300b \u300aOpenGL \u8d85\u7ea7\u5b9d\u5178 \u7b2c\u4e94\u7248\u300b PDF-EN \u3001 PDF-CN \u300aOpenGL ES 3.0 \u7f16\u7a0b\u6307\u5357\u300b PDF \u300aOpenGL ES \u5e94\u7528\u5f00\u53d1\u5b9e\u8df5\u6307\u5357 Android \u5377\u300b PDF \u300aThe Book of Shaders\u300b PDF \u65af\u5766\u798f\u5927\u5b66\u516c\u5f00\u8bfe Stanford CS231N Stanford CS223B \u673a\u5668\u5b66\u4e60\u3001\u6df1\u5ea6\u5b66\u4e60 \u300a\u673a\u5668\u5b66\u4e60\u300b\u5468\u5fd7\u534e \u8457 PDF \u300a\u7edf\u8ba1\u5b66\u4e60\u65b9\u6cd5 \u7b2c\u4e8c\u7248\u300b\u674e\u822a \u8457 PDF \u300a\u7edf\u8ba1\u673a\u5668\u5b66\u4e60\u5bfc\u8bba[\u65e5]\u300b \u300aDeep Learning\u300b(\u82b1\u4e66) PDF \u300a\u56fe\u89e3\u673a\u5668\u5b66\u4e60[\u65e5]\u300b PDF \u7f16\u7a0b \u300aHands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow\u300b\u7b2c\u4e8c\u7248(\u5feb\u901f\u4e0a\u624b) PDF \u300a\u6df1\u5ea6\u6709\u8da3\u300b\u5728\u7ebf\u9879\u76ee PDF \u300a21\u4e2a\u9879\u76ee\u73a9\u8f6c\u6df1\u5ea6\u5b66\u4e60\uff1a\u57fa\u4e8eTensorFlow\u7684\u5b9e\u8df5\u8bb2\u89e3\u300b PDF \u300aTensorFlow\uff1a\u5b9e\u6218Google\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u300b \u5f3a\u5316\u5b66\u4e60 \u300a\u5f3a\u5316\u5b66\u4e60\u7cbe\u8981\uff1a\u6838\u5fc3\u7b97\u6cd5\u4e0eTensorFlow\u5b9e\u73b0\u300b PDF \u300aReinforcement Learning\uff1aAn Introduction\u300b\u7b2c2\u7248 PDF \u300aAlgorithm for Reinforcement Learning\u300bby Csaba Szepesvari PDF \u8ba1\u7b97\u673a\u79d1\u5b66\u5174\u8da3\u8bfb\u7269 \u300a\u6570\u5b66\u4e4b\u7f8e\u300b PDF \u300a\u79bb\u6563\u6570\u5b66\u53ca\u5176\u5e94\u7528\u300b PDF \u300a\u5177\u4f53\u6570\u5b66\u300b PDF \u300a\u7ec4\u5408\u6570\u5b66\u300b PDF \u300a\u6df1\u5165\u7406\u89e3\u8ba1\u7b97\u673a\u7cfb\u7edf\u300b PDF \u300a\u4e00\u4e2a64\u4f4d\u64cd\u4f5c\u7cfb\u7edf\u7684\u8bbe\u8ba1\u4e0e\u5b9e\u73b0\u300b \u300a\u8ba1\u7b97\u673a\u79d1\u5b66\u5bfc\u8bba\u300b \u5927\u6570\u636e \u300aSpark\u5feb\u901f\u5927\u6570\u636e\u5206\u6790[\u7f8e]\u300b PDF \u300aMongoDB\u6743\u5a01\u6307\u5357\u300b\u7b2c2\u7248 PDF \u300a\u6570\u636e\u7b97\u6cd5\uff1aHadoop/Spark\u5927\u6570\u636e\u5904\u7406\u6280\u5de7\u300b PDF \u300aHadoop\u6743\u5a01\u6307\u5357\uff1a\u5927\u6570\u636e\u7684\u5b58\u50a8\u4e0e\u5206\u6790\u300b PDF \u300a\u9ad8\u6027\u80fdMySQL\u300b\u7b2c3\u7248 PDF \u6570\u636e\u6316\u6398 \u300a\u6570\u636e\u6316\u6398\u5bfc\u8bba\u300b\u7b2c2\u7248 PDF \u300aPython\u6570\u636e\u5206\u6790\u4e0e\u6316\u6398\u5b9e\u6218\u300b PDF \u300a\u6570\u636e\u6316\u6398\u4e0e\u9884\u6d4b\u5206\u6790\u300b(R\u8bed\u8a00) PDF","title":"\u4e66\u5355"},{"location":"#_1","text":"","title":"\u4e66\u5355"},{"location":"#_2","text":"\u300a\u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1\u300b\u9648\u5e0c\u5b7a \u8457 PDF \u300a\u77e9\u9635\u5206\u6790\u4e0e\u5e94\u7528\u300b\u5f20\u8d24\u8fbe PDF \u300a\u666e\u6797\u65af\u987f\u5fae\u79ef\u5206\u8bfb\u672c\u300b PDF \u300a\u5e94\u7528\u8fd1\u4e16\u4ee3\u6570 \u7b2c3\u7248\u300b\u80e1\u51a0\u7ae0 \u8457 PDF \u300aConvex Optimization\u300bby Stephen Boyd PDF","title":"\u6570\u5b66(\u8fdb\u9636)"},{"location":"#_3","text":"C\u8bed\u8a00 \u300aC Primer Plus\u300b(\u5165\u95e8 ) PDF \u300aC\u548c\u6307\u9488\u300b\u7ecf\u5178 PDF C++ \u300aC++ Primer Plus\u300b(\u9002\u5408\u65e0C\u8bed\u8a00\u57fa\u7840\u5165\u95e8) PDF \u300aC++ Primer\u300b(\u63d0\u9ad8) PDF \u300aThe C++ Programming Language\u300b\u6743\u5a01 PDF \u300aEffective Modern C++\u300bC++11/14 PDF \u300aModern C++ Tutorial C++ 11/14/17/20 On the Fly\u300b\u9ad8\u901f\u4e0a\u624bC++11/14\u6559\u7a0b PDF \u300aExceptional C++\uff1a47\u4e2aC++\u5de5\u7a0b\u96be\u9898\u3001\u7f16\u7a0b\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6848\u300b PDF Java \u300aHead First Java\u300b(\u5165\u95e8) PDF \u300a\u75af\u72c2Java\u8bb2\u4e49\u300b PDF \u300aJava\u7f16\u7a0b\u601d\u60f3\u300b PDF \u300aJava\u6838\u5fc3\u6280\u672f\u300b PDF1 \u3001 PDF2 \u300aEffective Java\u300b\u7b2c3\u7248 PDF Python \u300aPython\u7f16\u7a0b\u5165\u95e8\u5230\u5b9e\u8df5[\u7f8e]\u300b(\u5165\u95e8) PDF \u300a\u6d41\u7545\u7684Python\u300b\u8fdb\u9636 PDF","title":"\u7f16\u7a0b\u8bed\u8a00"},{"location":"#android","text":"\u300a\u7b2c\u4e00\u884c\u4ee3\u7801Android\u300b\u7b2c2\u7248(\u5165\u95e8) PDF \u300aAndroid\u7f16\u7a0b\u6743\u5a01\u6307\u5357\u300b(\u63d0\u5347) PDF \u300aAndroid\u5f00\u53d1\u827a\u672f\u63a2\u7d22\u300b(\u8fdb\u9636) PDF \u300aAndroid\u6e90\u7801\u8bbe\u8ba1\u6a21\u5f0f\u89e3\u6790\u4e0e\u5b9e\u6218\u300b PDF \u300aKotlin\u7f16\u7a0b\u6743\u5a01\u6307\u5357\u300b \u300aAndroid\u7fa4\u82f1\u4f20\u300b PDF","title":"Android\u5f00\u53d1"},{"location":"#_4","text":"\u300a\u7b97\u6cd5\u5bfc\u8bba\u300b\u7b2c3\u7248 PDF \u300a\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u5206\u6790\u300b\u7ecf\u5178 PDF \u300a\u591a\u7ef4\u4e0e\u5ea6\u91cf\u6570\u636e\u7ed3\u6784\u57fa\u7840[\u7f8e]\u300b PDF \u300a\u7b97\u6cd5\u300b\u7b2c4\u7248\uff08Java\u63cf\u8ff0\uff09 PDF \u300a\u7b97\u6cd5\u7b14\u8bb0\u300b(\u80e1\u51e1\uff0c\u66fe\u78ca \u7f16) PDF \u300a\u6311\u6218\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u300b PDF \u300a\u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u7ecf\u5178\u300b\u7b2c2\u7248 PDF","title":"\u7b97\u6cd5"},{"location":"#_5","text":"\u300a\u6570\u5b57\u56fe\u50cf\u5904\u7406\u300b\u5188\u8428\u96f7\u65af \u8457 PDF \u300a\u8ba1\u7b97\u673a\u89c6\u89c9\u2014\u2014\u7b97\u6cd5\u4e0e\u5e94\u7528\u300b\u7ecf\u5178 PDF \u300a\u89c6\u89c9\u673a\u5668\u5b66\u4e6020\u8bb2\u300b PDF \u300a\u89c6\u89c9SLAM\u5341\u56db\u8bb2 \u4ece\u7406\u8bba\u5230\u5b9e\u8df5\u300b\u7b2c2\u7248 \u300a\u56fe\u50cf\u5904\u7406\u3001\u5206\u6790\u4e0e\u673a\u5668\u89c6\u89c9\u300b\u7b2c4\u7248 PDF \u300a\u8ba1\u7b97\u673a\u89c6\u89c9\u6a21\u578b\u3001\u5b66\u4e60\u548c\u63a8\u7406\u300b PDF \u300aMultiple view geometry in computer vision\u300b\u7b2c2\u7248 PDF \u7f16\u7a0b \u300aPython\u8ba1\u7b97\u673a\u89c6\u89c9\u7f16\u7a0b\u300b PDF \u300a\u5b66\u4e60OpenCV3\u300b\u7ecf\u5178 \u300aOpenCV3\u7f16\u7a0b\u5165\u95e8\u300b(\u6bdb\u661f\u4e91\u7f16) PDF \u300aOpenCV\u7b97\u6cd5\u7cbe\u89e3\uff1a\u57fa\u4e8ePython\u4e0eC++\u300b \u300aOpenGL \u8d85\u7ea7\u5b9d\u5178 \u7b2c\u4e94\u7248\u300b PDF-EN \u3001 PDF-CN \u300aOpenGL ES 3.0 \u7f16\u7a0b\u6307\u5357\u300b PDF \u300aOpenGL ES \u5e94\u7528\u5f00\u53d1\u5b9e\u8df5\u6307\u5357 Android \u5377\u300b PDF \u300aThe Book of Shaders\u300b PDF","title":"\u8ba1\u7b97\u673a\u89c6\u89c9"},{"location":"#_6","text":"Stanford CS231N Stanford CS223B","title":"\u65af\u5766\u798f\u5927\u5b66\u516c\u5f00\u8bfe"},{"location":"#_7","text":"\u300a\u673a\u5668\u5b66\u4e60\u300b\u5468\u5fd7\u534e \u8457 PDF \u300a\u7edf\u8ba1\u5b66\u4e60\u65b9\u6cd5 \u7b2c\u4e8c\u7248\u300b\u674e\u822a \u8457 PDF \u300a\u7edf\u8ba1\u673a\u5668\u5b66\u4e60\u5bfc\u8bba[\u65e5]\u300b \u300aDeep Learning\u300b(\u82b1\u4e66) PDF \u300a\u56fe\u89e3\u673a\u5668\u5b66\u4e60[\u65e5]\u300b PDF \u7f16\u7a0b \u300aHands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow\u300b\u7b2c\u4e8c\u7248(\u5feb\u901f\u4e0a\u624b) PDF \u300a\u6df1\u5ea6\u6709\u8da3\u300b\u5728\u7ebf\u9879\u76ee PDF \u300a21\u4e2a\u9879\u76ee\u73a9\u8f6c\u6df1\u5ea6\u5b66\u4e60\uff1a\u57fa\u4e8eTensorFlow\u7684\u5b9e\u8df5\u8bb2\u89e3\u300b PDF \u300aTensorFlow\uff1a\u5b9e\u6218Google\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u300b","title":"\u673a\u5668\u5b66\u4e60\u3001\u6df1\u5ea6\u5b66\u4e60"},{"location":"#_8","text":"\u300a\u5f3a\u5316\u5b66\u4e60\u7cbe\u8981\uff1a\u6838\u5fc3\u7b97\u6cd5\u4e0eTensorFlow\u5b9e\u73b0\u300b PDF \u300aReinforcement Learning\uff1aAn Introduction\u300b\u7b2c2\u7248 PDF \u300aAlgorithm for Reinforcement Learning\u300bby Csaba Szepesvari PDF","title":"\u5f3a\u5316\u5b66\u4e60"},{"location":"#_9","text":"\u300a\u6570\u5b66\u4e4b\u7f8e\u300b PDF \u300a\u79bb\u6563\u6570\u5b66\u53ca\u5176\u5e94\u7528\u300b PDF \u300a\u5177\u4f53\u6570\u5b66\u300b PDF \u300a\u7ec4\u5408\u6570\u5b66\u300b PDF \u300a\u6df1\u5165\u7406\u89e3\u8ba1\u7b97\u673a\u7cfb\u7edf\u300b PDF \u300a\u4e00\u4e2a64\u4f4d\u64cd\u4f5c\u7cfb\u7edf\u7684\u8bbe\u8ba1\u4e0e\u5b9e\u73b0\u300b \u300a\u8ba1\u7b97\u673a\u79d1\u5b66\u5bfc\u8bba\u300b","title":"\u8ba1\u7b97\u673a\u79d1\u5b66\u5174\u8da3\u8bfb\u7269"},{"location":"#_10","text":"\u300aSpark\u5feb\u901f\u5927\u6570\u636e\u5206\u6790[\u7f8e]\u300b PDF \u300aMongoDB\u6743\u5a01\u6307\u5357\u300b\u7b2c2\u7248 PDF \u300a\u6570\u636e\u7b97\u6cd5\uff1aHadoop/Spark\u5927\u6570\u636e\u5904\u7406\u6280\u5de7\u300b PDF \u300aHadoop\u6743\u5a01\u6307\u5357\uff1a\u5927\u6570\u636e\u7684\u5b58\u50a8\u4e0e\u5206\u6790\u300b PDF \u300a\u9ad8\u6027\u80fdMySQL\u300b\u7b2c3\u7248 PDF","title":"\u5927\u6570\u636e"},{"location":"#_11","text":"\u300a\u6570\u636e\u6316\u6398\u5bfc\u8bba\u300b\u7b2c2\u7248 PDF \u300aPython\u6570\u636e\u5206\u6790\u4e0e\u6316\u6398\u5b9e\u6218\u300b PDF \u300a\u6570\u636e\u6316\u6398\u4e0e\u9884\u6d4b\u5206\u6790\u300b(R\u8bed\u8a00) PDF","title":"\u6570\u636e\u6316\u6398"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/BasicMathProblem/","text":"\u516c\u7ea6\u6570\u4e0e\u516c\u500d\u6570 \u6700\u5927\u516c\u7ea6\u6570 //\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 int gcd(int a, int b) { return b ? gcd(b, a % b) : a; } \u6700\u5c0f\u516c\u500d\u6570 int lcm = a / gcd(a, b) * b; \u5206\u6570\u7684\u56db\u5219\u8fd0\u7b97 struct Fraction { int up, down; } // \u6838\u5fc3\u90e8\u5206\u662f\u5206\u6570\u7684\u5316\u7b80\uff0c\u5176\u6700\u7b80\u5f62\u5f0f\u6ee1\u8db3\u4ee5\u4e0b\u4e09\u70b9 // 1. down\u4e3a\u975e\u8d1f\u6570 // 2. \u503c\u4e3a0\u65f6\uff0cup = 0, down = 1 // 3. gcd(up, down) = 1 void reduction(Fraction &ans) { if (ans.down < 0) { ans.up = -ans.up; ans.down = -ans.down; } if (ans.up == 0) { ans.up = 0; ans.down = 1; } else { int g = gcd(ans.up, ans.down); ans.up /= g; ans.down /= g; } } // \u8fd0\u7b97\u90e8\u5206\u5f88\u5bb9\u6613\u5199\u51fa\u6765 \u7d20\u6570 \u6570\u7b5b\u6cd5\u5224\u65ad\u7d20\u6570 \u8868\u7684\u5927\u5c0f\u53c2\u8003\u7d20\u6570\u5b9a\u7406\uff1a \\pi(n) \\pi(n) \u4e3a\u503c\u4e0d\u8d85\u8fc7 n n \u7d20\u6570\u7684\u4e2a\u6570 \\lim_{n\\rightarrow \\infty} \\frac{ln(n)\\pi(n)}{n} = 1 \\lim_{n\\rightarrow \\infty} \\frac{ln(n)\\pi(n)}{n} = 1 // pi(n) > 1e5\u65f6\uff0c\u53d6MAX = 100 * n\u6bd4\u8f83\u5408\u9002 bool notPrime[MAX]; vector<int> prime(n); // \u67e5\u627en\u4e2a\u7d20\u6570 void findPrime(int n) { int cnt = 0; for (int i = 2; i < MAX; ++i) { if (!notPrime[i]) { prime[cnt++] = i; if (cnt == n) break; for (int j = 2 * i; j < MAX; j += i) { notPrime[j] = true; } } } } \u8d28\u56e0\u5b50\u5206\u89e3 // x\u4e3a\u8d28\u56e0\u5b50\u7684\u503c\uff0ccnt\u4e3a\u4e2a\u6570 struct factor { int x, cnt; factor(int _x, int _cnt) : x(_x), cnt(_cnt) {} }; vector<factor> factors; // \u6570n\u7684\u8d28\u56e0\u5b50\u6700\u591a\u6709\u4e00\u4e2a\u5927\u4e8esqrt(n)\u7684\u503c void getFactors(int n) { int m = sqrt(n); for (int i = 0; i < prime.size() && prime[i] <= m; ++i) { if (n % prime[i] == 0) { factors.emplace_back(prime[i], 0); while (n % prime[i] == 0) { ++factors.back().cnt; n /= prime[i]; } } } if (n != 1) { factors.emplace_back(n, 1); } } \u5feb\u901f\u5e42 \u6c42 a^b a^b mod p p using ll = long long; ll binaryPow(ll a, ll b, ll p) { ll ans = 1; while (b > 0) { if (b & 1) { ans = ans * a % p; } a = a * a % p; b >>= 1; } return ans; } \u7ec4\u5408\u6570 \u6c42n!\u7684\u8d28\u56e0\u5b50p\u7684\u4e2a\u6570 n! n! \u4e2d\u6709 (\\frac{n}{p} + \\frac{n}{p^2} + \\frac{n}{p^3} + \\cdots) (\\frac{n}{p} + \\frac{n}{p^2} + \\frac{n}{p^3} + \\cdots) \u4e2a p p \u3002 int cal(int n, int p) { int ans = 0; while (n) { ans += (n /= p); } return ans; } \u8ba1\u7b97 C_n^m C_n^m \u7531 C_n^m = C_{n - 1}^{m} + C_{n - 1}^{m - 1} C_n^m = C_{n - 1}^{m} + C_{n - 1}^{m - 1} \uff0c\u9012\u63a8 \u5b9a\u4e49\u5f0f\u53d8\u5f62\u8ba1\u7b97 ll calC(ll m, ll n) { int ans = 0; for (int i = 1; i <= m; ++i) { ans += ans * (n - i + 1) / i; //\u8981\u5148\u4e58\u518d\u9664\uff0c\u5426\u5219\u65e0\u6cd5\u6574\u9664 } return ans; } \u8ba1\u7b97 C_n^m C_n^m mod p \u5f53 m \\le n \\le 1000 m \\le n \\le 1000 \u65f6\uff0c\u7528\u9012\u63a8 \u5f53 m \\le n \\le 10^6 m \\le n \\le 10^6 \u65f6\uff0c\u4f7f\u7528\u5b9a\u4e49\u7b97 ll C(ll m, ll n, ll p) { ll ans = 1; for (int i = 0; prime[i] <= n; ++i) { int b = cal(n, p) - cal(m, p) - cal(n - m, p); ans = ans * binaryPow(prime[i], b, p) % p; } return ans; }","title":"\u516c\u7ea6\u6570\u4e0e\u516c\u500d\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/BasicMathProblem/#_1","text":"","title":"\u516c\u7ea6\u6570\u4e0e\u516c\u500d\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/BasicMathProblem/#_2","text":"//\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 int gcd(int a, int b) { return b ? gcd(b, a % b) : a; }","title":"\u6700\u5927\u516c\u7ea6\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/BasicMathProblem/#_3","text":"int lcm = a / gcd(a, b) * b;","title":"\u6700\u5c0f\u516c\u500d\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/BasicMathProblem/#_4","text":"struct Fraction { int up, down; } // \u6838\u5fc3\u90e8\u5206\u662f\u5206\u6570\u7684\u5316\u7b80\uff0c\u5176\u6700\u7b80\u5f62\u5f0f\u6ee1\u8db3\u4ee5\u4e0b\u4e09\u70b9 // 1. down\u4e3a\u975e\u8d1f\u6570 // 2. \u503c\u4e3a0\u65f6\uff0cup = 0, down = 1 // 3. gcd(up, down) = 1 void reduction(Fraction &ans) { if (ans.down < 0) { ans.up = -ans.up; ans.down = -ans.down; } if (ans.up == 0) { ans.up = 0; ans.down = 1; } else { int g = gcd(ans.up, ans.down); ans.up /= g; ans.down /= g; } } // \u8fd0\u7b97\u90e8\u5206\u5f88\u5bb9\u6613\u5199\u51fa\u6765","title":"\u5206\u6570\u7684\u56db\u5219\u8fd0\u7b97"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/BasicMathProblem/#_5","text":"","title":"\u7d20\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/BasicMathProblem/#_6","text":"\u8868\u7684\u5927\u5c0f\u53c2\u8003\u7d20\u6570\u5b9a\u7406\uff1a \\pi(n) \\pi(n) \u4e3a\u503c\u4e0d\u8d85\u8fc7 n n \u7d20\u6570\u7684\u4e2a\u6570 \\lim_{n\\rightarrow \\infty} \\frac{ln(n)\\pi(n)}{n} = 1 \\lim_{n\\rightarrow \\infty} \\frac{ln(n)\\pi(n)}{n} = 1 // pi(n) > 1e5\u65f6\uff0c\u53d6MAX = 100 * n\u6bd4\u8f83\u5408\u9002 bool notPrime[MAX]; vector<int> prime(n); // \u67e5\u627en\u4e2a\u7d20\u6570 void findPrime(int n) { int cnt = 0; for (int i = 2; i < MAX; ++i) { if (!notPrime[i]) { prime[cnt++] = i; if (cnt == n) break; for (int j = 2 * i; j < MAX; j += i) { notPrime[j] = true; } } } }","title":"\u6570\u7b5b\u6cd5\u5224\u65ad\u7d20\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/BasicMathProblem/#_7","text":"// x\u4e3a\u8d28\u56e0\u5b50\u7684\u503c\uff0ccnt\u4e3a\u4e2a\u6570 struct factor { int x, cnt; factor(int _x, int _cnt) : x(_x), cnt(_cnt) {} }; vector<factor> factors; // \u6570n\u7684\u8d28\u56e0\u5b50\u6700\u591a\u6709\u4e00\u4e2a\u5927\u4e8esqrt(n)\u7684\u503c void getFactors(int n) { int m = sqrt(n); for (int i = 0; i < prime.size() && prime[i] <= m; ++i) { if (n % prime[i] == 0) { factors.emplace_back(prime[i], 0); while (n % prime[i] == 0) { ++factors.back().cnt; n /= prime[i]; } } } if (n != 1) { factors.emplace_back(n, 1); } }","title":"\u8d28\u56e0\u5b50\u5206\u89e3"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/BasicMathProblem/#_8","text":"\u6c42 a^b a^b mod p p using ll = long long; ll binaryPow(ll a, ll b, ll p) { ll ans = 1; while (b > 0) { if (b & 1) { ans = ans * a % p; } a = a * a % p; b >>= 1; } return ans; }","title":"\u5feb\u901f\u5e42"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/BasicMathProblem/#_9","text":"","title":"\u7ec4\u5408\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/BasicMathProblem/#np","text":"n! n! \u4e2d\u6709 (\\frac{n}{p} + \\frac{n}{p^2} + \\frac{n}{p^3} + \\cdots) (\\frac{n}{p} + \\frac{n}{p^2} + \\frac{n}{p^3} + \\cdots) \u4e2a p p \u3002 int cal(int n, int p) { int ans = 0; while (n) { ans += (n /= p); } return ans; }","title":"\u6c42n!\u7684\u8d28\u56e0\u5b50p\u7684\u4e2a\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/BasicMathProblem/#c_nmc_nm","text":"\u7531 C_n^m = C_{n - 1}^{m} + C_{n - 1}^{m - 1} C_n^m = C_{n - 1}^{m} + C_{n - 1}^{m - 1} \uff0c\u9012\u63a8 \u5b9a\u4e49\u5f0f\u53d8\u5f62\u8ba1\u7b97 ll calC(ll m, ll n) { int ans = 0; for (int i = 1; i <= m; ++i) { ans += ans * (n - i + 1) / i; //\u8981\u5148\u4e58\u518d\u9664\uff0c\u5426\u5219\u65e0\u6cd5\u6574\u9664 } return ans; }","title":"\u8ba1\u7b97 C_n^mC_n^m"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/BasicMathProblem/#c_nmc_nm-mod-p","text":"\u5f53 m \\le n \\le 1000 m \\le n \\le 1000 \u65f6\uff0c\u7528\u9012\u63a8 \u5f53 m \\le n \\le 10^6 m \\le n \\le 10^6 \u65f6\uff0c\u4f7f\u7528\u5b9a\u4e49\u7b97 ll C(ll m, ll n, ll p) { ll ans = 1; for (int i = 0; prime[i] <= n; ++i) { int b = cal(n, p) - cal(m, p) - cal(n - m, p); ans = ans * binaryPow(prime[i], b, p) % p; } return ans; }","title":"\u8ba1\u7b97 C_n^mC_n^m mod p"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/SumOfXOR/","text":"\u5f02\u6216\u7684\u5e94\u7528 Properties commucative, associative, \u81ea\u53cd\u6027: a\\oplus b\\oplus b = a a\\oplus b\\oplus b = a Calculate f(n) = 1\\oplus2\\oplus\\cdots \\oplus n f(n) = 1\\oplus2\\oplus\\cdots \\oplus n . if n == 4*m, then f(n) = n else if n == 4*m + 1, then f(n) = 1 else if n == 4*m + 2, then f(n) = n+1 else n = 0 m is a integer. Application Exchange Two Number without Extra Space a ^= b; b ^= a; a ^= b; One Question 1-1000\u653e\u5728\u542b\u67091001\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u4e2d\uff0c\u53ea\u6709\u552f\u4e00\u7684\u4e00\u4e2a\u5143\u7d20\u503c\u91cd\u590d\uff0c\u5176\u5b83\u5747\u53ea\u51fa\u73b0\u4e00\u6b21\u3002\u6bcf\u4e2a\u6570\u7ec4\u5143\u7d20\u53ea\u80fd\u8bbf\u95ee\u4e00\u6b21\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff0c\u5c06\u5b83\u627e\u51fa\u6765\uff1b\u4e0d\u7528\u8f85\u52a9\u5b58\u50a8\u7a7a\u95f4\uff0c\u80fd\u5426\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u5b9e\u73b0\uff1f x = (\\text{1001\u4e2a\u6570\u7684\u5f02\u6216}\uff09\\oplus(1\\oplus2\\oplus3\\oplus\\cdots\\oplus1000) x = (\\text{1001\u4e2a\u6570\u7684\u5f02\u6216}\uff09\\oplus(1\\oplus2\\oplus3\\oplus\\cdots\\oplus1000)","title":"\u5f02\u6216\u7684\u5e94\u7528"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/SumOfXOR/#_1","text":"","title":"\u5f02\u6216\u7684\u5e94\u7528"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/SumOfXOR/#properties","text":"commucative, associative, \u81ea\u53cd\u6027: a\\oplus b\\oplus b = a a\\oplus b\\oplus b = a Calculate f(n) = 1\\oplus2\\oplus\\cdots \\oplus n f(n) = 1\\oplus2\\oplus\\cdots \\oplus n . if n == 4*m, then f(n) = n else if n == 4*m + 1, then f(n) = 1 else if n == 4*m + 2, then f(n) = n+1 else n = 0 m is a integer.","title":"Properties"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/SumOfXOR/#application","text":"","title":"Application"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/SumOfXOR/#exchange-two-number-without-extra-space","text":"a ^= b; b ^= a; a ^= b;","title":"Exchange Two Number without Extra Space"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/SumOfXOR/#one-question","text":"1-1000\u653e\u5728\u542b\u67091001\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u4e2d\uff0c\u53ea\u6709\u552f\u4e00\u7684\u4e00\u4e2a\u5143\u7d20\u503c\u91cd\u590d\uff0c\u5176\u5b83\u5747\u53ea\u51fa\u73b0\u4e00\u6b21\u3002\u6bcf\u4e2a\u6570\u7ec4\u5143\u7d20\u53ea\u80fd\u8bbf\u95ee\u4e00\u6b21\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff0c\u5c06\u5b83\u627e\u51fa\u6765\uff1b\u4e0d\u7528\u8f85\u52a9\u5b58\u50a8\u7a7a\u95f4\uff0c\u80fd\u5426\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u5b9e\u73b0\uff1f x = (\\text{1001\u4e2a\u6570\u7684\u5f02\u6216}\uff09\\oplus(1\\oplus2\\oplus3\\oplus\\cdots\\oplus1000) x = (\\text{1001\u4e2a\u6570\u7684\u5f02\u6216}\uff09\\oplus(1\\oplus2\\oplus3\\oplus\\cdots\\oplus1000)","title":"One Question"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/code/","text":"\u4ee3\u7801\u7247\u6bb5 FFT def recursive_dtf(a): n = len(a) if n == 1: return a a0 = a[0::2] a1 = a[1::2] w_n = np.exp(2*np.pi*1j/n) w = 1 y = n*[0] y0 = recursive_dtf(a0) y1 = recursive_dtf(a1) for k in range(0 ,int(n/2) ,1): y[k] = y0[k]+w*y1[k] y[int(n/2)+k] = y0[k]-w*y1[k] w = w*w_n return y \u6253\u5370\u4e8c\u53c9\u6811 \u53c2\u8003\uff1a \u6ce2\u5170\u8868\u793a\u6cd5\u4e0e\u8868\u8fbe\u5f0f\u6811 \u6253\u5370\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\u4e3a int \u7684\u4e8c\u53c9\u6811\uff0c\u65b9\u4fbf\u8c03\u8bd5\u7ea2\u9ed1\u6811 #ifndef PTREE_H #define PTREE_H #include <iostream> enum Colors {RED, BLACK}; class node { friend class Tree; public: int data = 0; Colors color = Colors::RED; node* p = nullptr; node* child[2] = {nullptr, nullptr}; node() = default; node(Colors _color, int _data, node* n) : color(_color), data(_data) { for (size_t i = 0; i < 2; ++i) { child[i] = n; } } explicit node(Colors _color) : node(_color, 0, nullptr) {} }; class Tree { public: node* const nil = new node(Colors::BLACK); node* root = nil; Tree() = default; Tree(node* n) : nil(n), root(n) {} void printTree(); private: int maxDepth(const node* n); void fillMap(node** map, node* n, int index); void putchars(char c, int n); void printLeftToParentBranchTop(int w); void printRightToParentBranchTop(int w); void printLeftToParentBranchBottom(int w); void printRightToParentBranchBottom(int w); int printNode(node* n, int w); }; int Tree::maxDepth(const node* n) { if (n == nil) return 0; else { int maximum = 0, i, d; for (i = 0; i < 2; i++) if (maximum < (d = maxDepth(n->child[i]))) maximum = d; return maximum + 1; } } void Tree::fillMap(node** map, node* n, int index) { if (n == nil) return; int i; map[index] = n; for (i = 0; i < 2; i++) fillMap(map, n->child[i], index * 2 + i + 1); } void Tree::putchars(char c, int n) { while (n--) putchar(c); } void Tree::printLeftToParentBranchTop(int w) { printf(\"%*c\", w + 1, ' '); putchars('_', w - 3); printf(\"/ \"); } void Tree::printRightToParentBranchTop(int w) { putchar('\\\\'); putchars('_', w - 3); printf(\"%*c\", w + 2, ' '); } void Tree::printLeftToParentBranchBottom(int w) { printf(\"%*c%*c\", w + 1, '/', w - 1, ' '); } void Tree::printRightToParentBranchBottom(int w) { printf(\"%*c%*c\", w - 1, '\\\\', w + 1, ' '); } int Tree::printNode(node* n, int w) { return printf(\"%*d %d\", w-1, n->data, n->color); } void Tree::printTree() { int depth = maxDepth(root), i, j, index; if (depth == 0) { printf(\"Null tree\\n\"); return; } node** map = (node**)calloc((1 << depth) - 1, sizeof(node*)); fillMap(map, root, 0); for (j = 0, index = 0; j < depth; j++) { int w = 1 << (depth - j + 1); if (j > 0) { // Top part of node to parent branch for (i = 0; i < 1 << j; i++) if (map[index + i]) if (i % 2 == 0) printLeftToParentBranchTop(w); else printRightToParentBranchTop(w); else putchars(' ', w * 2); putchar('\\n'); // Bottom part of node to parent branch for (i = 0; i < 1 << j; i++) if (map[index + i]) if (i % 2 == 0) printLeftToParentBranchBottom(w); else printRightToParentBranchBottom(w); else putchars(' ', w * 2); putchar('\\n'); } // Node content for (i = 0; i < 1 << j; i++, index++) if (map[index]) putchars(' ', w * 2 - printNode(map[index], w)); else putchars(' ', w * 2); putchar('\\n'); } printf(\"\\n\"); free(map); } #endif #endif","title":"\u4ee3\u7801\u7247\u6bb5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/code/#_1","text":"","title":"\u4ee3\u7801\u7247\u6bb5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/code/#fft","text":"def recursive_dtf(a): n = len(a) if n == 1: return a a0 = a[0::2] a1 = a[1::2] w_n = np.exp(2*np.pi*1j/n) w = 1 y = n*[0] y0 = recursive_dtf(a0) y1 = recursive_dtf(a1) for k in range(0 ,int(n/2) ,1): y[k] = y0[k]+w*y1[k] y[int(n/2)+k] = y0[k]-w*y1[k] w = w*w_n return y","title":"FFT"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/code/#_2","text":"\u53c2\u8003\uff1a \u6ce2\u5170\u8868\u793a\u6cd5\u4e0e\u8868\u8fbe\u5f0f\u6811 \u6253\u5370\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\u4e3a int \u7684\u4e8c\u53c9\u6811\uff0c\u65b9\u4fbf\u8c03\u8bd5\u7ea2\u9ed1\u6811 #ifndef PTREE_H #define PTREE_H #include <iostream> enum Colors {RED, BLACK}; class node { friend class Tree; public: int data = 0; Colors color = Colors::RED; node* p = nullptr; node* child[2] = {nullptr, nullptr}; node() = default; node(Colors _color, int _data, node* n) : color(_color), data(_data) { for (size_t i = 0; i < 2; ++i) { child[i] = n; } } explicit node(Colors _color) : node(_color, 0, nullptr) {} }; class Tree { public: node* const nil = new node(Colors::BLACK); node* root = nil; Tree() = default; Tree(node* n) : nil(n), root(n) {} void printTree(); private: int maxDepth(const node* n); void fillMap(node** map, node* n, int index); void putchars(char c, int n); void printLeftToParentBranchTop(int w); void printRightToParentBranchTop(int w); void printLeftToParentBranchBottom(int w); void printRightToParentBranchBottom(int w); int printNode(node* n, int w); }; int Tree::maxDepth(const node* n) { if (n == nil) return 0; else { int maximum = 0, i, d; for (i = 0; i < 2; i++) if (maximum < (d = maxDepth(n->child[i]))) maximum = d; return maximum + 1; } } void Tree::fillMap(node** map, node* n, int index) { if (n == nil) return; int i; map[index] = n; for (i = 0; i < 2; i++) fillMap(map, n->child[i], index * 2 + i + 1); } void Tree::putchars(char c, int n) { while (n--) putchar(c); } void Tree::printLeftToParentBranchTop(int w) { printf(\"%*c\", w + 1, ' '); putchars('_', w - 3); printf(\"/ \"); } void Tree::printRightToParentBranchTop(int w) { putchar('\\\\'); putchars('_', w - 3); printf(\"%*c\", w + 2, ' '); } void Tree::printLeftToParentBranchBottom(int w) { printf(\"%*c%*c\", w + 1, '/', w - 1, ' '); } void Tree::printRightToParentBranchBottom(int w) { printf(\"%*c%*c\", w - 1, '\\\\', w + 1, ' '); } int Tree::printNode(node* n, int w) { return printf(\"%*d %d\", w-1, n->data, n->color); } void Tree::printTree() { int depth = maxDepth(root), i, j, index; if (depth == 0) { printf(\"Null tree\\n\"); return; } node** map = (node**)calloc((1 << depth) - 1, sizeof(node*)); fillMap(map, root, 0); for (j = 0, index = 0; j < depth; j++) { int w = 1 << (depth - j + 1); if (j > 0) { // Top part of node to parent branch for (i = 0; i < 1 << j; i++) if (map[index + i]) if (i % 2 == 0) printLeftToParentBranchTop(w); else printRightToParentBranchTop(w); else putchars(' ', w * 2); putchar('\\n'); // Bottom part of node to parent branch for (i = 0; i < 1 << j; i++) if (map[index + i]) if (i % 2 == 0) printLeftToParentBranchBottom(w); else printRightToParentBranchBottom(w); else putchars(' ', w * 2); putchar('\\n'); } // Node content for (i = 0; i < 1 << j; i++, index++) if (map[index]) putchars(' ', w * 2 - printNode(map[index], w)); else putchars(' ', w * 2); putchar('\\n'); } printf(\"\\n\"); free(map); } #endif #endif","title":"\u6253\u5370\u4e8c\u53c9\u6811"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/","text":"C++ \u7ecf\u9a8c & can't use continuous. In 64 bits machine pointer is unsinged long , if want to use pointer calculate like integer, only need forced type transport. The parameters transfer of a two-dimensional array of unknown size: void display(int *arr,const int irows,const int icols) { for(int i=0; i<irows; ++i) { for(int j=0; j<icols; ++j) { cout << *(arr + i * icols + j) << \" \"; } cout << endl; } cout << endl; } \u5907\u5fd8 Input and Output Function scanf format symbol: Type Symbol int %d long long %lld float %f double %lf char %c string %s %c \u53ef\u4ee5\u8bfb\u5165\u7a7a\u683c\uff0c\u9664 %c \u5916\u4ee5\u7a7a\u767d\u7b26\u4f5c\u4e3a\u7ed3\u675f\u6807\u5fd7 double of printf is %f ,but scanf is %lf Try to use double ,because of accuracy Three general format of printf : right m bits add space align: %md right m bits add zero align: %0md \u201c\u56db\u820d\u516d\u5165\u4e94\u6210\u53cc\u201d\u89c4\u5219\u6d6e\u70b9\u6570\u4fdd\u7559 m \u4f4d\u5c0f\u6570\u70b9: %.mf typedef typedef set alias Function in <math.h> : fabs(double x) floor(double x), ceil(double x) pow(double r, double p) // $r^p$ sqrt(double x) log(double x) // e as root sin(double x), cos(double x), tan(double x) asin(double x), acos(double x), atan(double x) //unit is rad round(double x) Equivalent in condition: if(n), if(n != 0) if(!n), if(n == 0) similarly in while(condition) \u5192\u6ce1\u6392\u5e8f memset() and gets() and getchar() memset(array name, value, sizeof(array name)) Note: memset() assign value as char, advice only use 0 and -1. gets(char array) like scanf(\"%s, array\") use '\\n as end of input and need not add '\\0' , except that, other method input char like char = getchar() can recognize '\\n' add need add '\\0' in string. Function in <string.h> strlen(char array) //get number of bit before first '\\0' strcmp(char array1, char array2) //if array1 < array2, retrun negtive, if array1 == array2, return 0, if array1 > array2, return postive strcpy(char array1, char array2) //copy array2 to array1, include '\\0' strcat(char array1, char array2) //link array2 to array1 sscanf() and sprintf() int n; char str[50]; sscanf(str, \"%d\", &n); //str to int sprintf(str, %d\", n); //int to str //Similarly, float, long, and so on //sscanf also can use regular expresion Multidimensions Array When input array dimensions more than one to a function, synthesis need the size of dimensions more one, or just use a pointer as synthesis. Note: when one pointer will be built, and we will change it's value, we must make this pointer equal to one variables address, or just use new . Structure Structure can't define itself, but can define it self's pointer. Two method about structure initial function: //First struct StudentInfo { int id; char gender; StudentInfo(int _id, char _gender) : id(_id), gender(_gender) {} }; //Second struct StudentInfo { int id; char gender; StudentInfo(int _id, char _gender) { id = _id; gender = _gender; } }; We can construct many initial function to adapt different case with different number of parameter. Float Point Number Compare const double eps = 1e-8; const double pi = acos(-1); #define Equ(a, b) (fabs(a-b) < eps) #define More(a, b) ((a-b) > eps) #define Less(a, b) ((a-b) < -eps) #define MoreEqu(a, b) ((a-b) > -eps) #define LessEqu(a, b) ((a-b) < eps) Input unkonwn lines while(scanf(\"%s\", str) != EOF) {} //string in `scanf` don't need `&`. while(gets(str) != NULL) {} C++ STL Induction All need add std:: . vector As array, when number can't determine. Sore uncertain number output data. Represent diagram. set set used to remove duplicate, and sort acending order. If want to deal with data repetive, can use multiset . Only need remove duplicate, can use unordered_set . string map Map string to int. Determine big number or other data structure, can as bool array. Map string to string. multimap , unordered_map . queue BFS priority_queue For int , double and char , default greater number have higher priority. Set smaller is higher(For int): priority_queue<int, vector<int>, greater<int> > . Set class priority: //Only need overload `<`//Set smaller is higherstruct Fruit { string name; int price; friend bool operator < (Fruit f1, Fruit f2) { return f1.price > f2.price; }}; Some Function in algorithm Firstly, need add #include<algorithm> . using namespace std;// `x` and `y` can be float point numbermin(x, y);max(x, y);// `x` and `y` must be integerabs(x, y); swap(x, y) , x and y can be structrue. reverse(first address, next address of last element) . //`next_permutation(first address, next address of last element)`, give next order of permutation.int a[3] = {1, 2 ,3};next_permutation(a, a+3);// a[3] = {1, 3, 2} fill(first address, next address of last element, value) sort() sort(first element address, next address of last element, compare function) , the first two parameters is must, and if the third parameter is blank, sort will use increment processing array. Compare Function: //Form small to large, conversely, form large to smallbool cmp(T a, T b) { return a < b;}//Secondary orderbool cmp(node a, node b) { if(a.x != b.x) { return a.x < b.x; } else return a.y > b.y;} Sort in STL: only vector , string , deque can use sort() , like map , set used Red-Black Tree can't sort. For example: string str[3] = {\"a\", \"b\", \"c\"};sort(str, str+3);vector<int> v;v.push_back(1);v.push_back(2);sort(v.begin(), v.end());","title":"C++"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#c","text":"","title":"C++"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#_1","text":"& can't use continuous. In 64 bits machine pointer is unsinged long , if want to use pointer calculate like integer, only need forced type transport. The parameters transfer of a two-dimensional array of unknown size: void display(int *arr,const int irows,const int icols) { for(int i=0; i<irows; ++i) { for(int j=0; j<icols; ++j) { cout << *(arr + i * icols + j) << \" \"; } cout << endl; } cout << endl; }","title":"\u7ecf\u9a8c"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#_2","text":"","title":"\u5907\u5fd8"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#input-and-output-function","text":"scanf format symbol: Type Symbol int %d long long %lld float %f double %lf char %c string %s %c \u53ef\u4ee5\u8bfb\u5165\u7a7a\u683c\uff0c\u9664 %c \u5916\u4ee5\u7a7a\u767d\u7b26\u4f5c\u4e3a\u7ed3\u675f\u6807\u5fd7 double of printf is %f ,but scanf is %lf Try to use double ,because of accuracy Three general format of printf : right m bits add space align: %md right m bits add zero align: %0md \u201c\u56db\u820d\u516d\u5165\u4e94\u6210\u53cc\u201d\u89c4\u5219\u6d6e\u70b9\u6570\u4fdd\u7559 m \u4f4d\u5c0f\u6570\u70b9: %.mf","title":"Input and Output Function"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#typedef","text":"typedef set alias","title":"typedef"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#function-in-mathh","text":"fabs(double x) floor(double x), ceil(double x) pow(double r, double p) // $r^p$ sqrt(double x) log(double x) // e as root sin(double x), cos(double x), tan(double x) asin(double x), acos(double x), atan(double x) //unit is rad round(double x)","title":"Function in &lt;math.h&gt;:"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#equivalent-in-condition","text":"if(n), if(n != 0) if(!n), if(n == 0) similarly in while(condition) \u5192\u6ce1\u6392\u5e8f","title":"Equivalent in condition:"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#memset-and-gets-and-getchar","text":"memset(array name, value, sizeof(array name)) Note: memset() assign value as char, advice only use 0 and -1. gets(char array) like scanf(\"%s, array\") use '\\n as end of input and need not add '\\0' , except that, other method input char like char = getchar() can recognize '\\n' add need add '\\0' in string.","title":"memset() and gets() and getchar()"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#function-in-stringh","text":"strlen(char array) //get number of bit before first '\\0' strcmp(char array1, char array2) //if array1 < array2, retrun negtive, if array1 == array2, return 0, if array1 > array2, return postive strcpy(char array1, char array2) //copy array2 to array1, include '\\0' strcat(char array1, char array2) //link array2 to array1","title":"Function in &lt;string.h&gt;"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#sscanf-and-sprintf","text":"int n; char str[50]; sscanf(str, \"%d\", &n); //str to int sprintf(str, %d\", n); //int to str //Similarly, float, long, and so on //sscanf also can use regular expresion","title":"sscanf() and sprintf()"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#multidimensions-array","text":"When input array dimensions more than one to a function, synthesis need the size of dimensions more one, or just use a pointer as synthesis. Note: when one pointer will be built, and we will change it's value, we must make this pointer equal to one variables address, or just use new .","title":"Multidimensions Array"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#structure","text":"Structure can't define itself, but can define it self's pointer. Two method about structure initial function: //First struct StudentInfo { int id; char gender; StudentInfo(int _id, char _gender) : id(_id), gender(_gender) {} }; //Second struct StudentInfo { int id; char gender; StudentInfo(int _id, char _gender) { id = _id; gender = _gender; } }; We can construct many initial function to adapt different case with different number of parameter.","title":"Structure"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#float-point-number-compare","text":"const double eps = 1e-8; const double pi = acos(-1); #define Equ(a, b) (fabs(a-b) < eps) #define More(a, b) ((a-b) > eps) #define Less(a, b) ((a-b) < -eps) #define MoreEqu(a, b) ((a-b) > -eps) #define LessEqu(a, b) ((a-b) < eps)","title":"Float Point Number Compare"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#input-unkonwn-lines","text":"while(scanf(\"%s\", str) != EOF) {} //string in `scanf` don't need `&`. while(gets(str) != NULL) {}","title":"Input unkonwn lines"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#c-stl-induction","text":"All need add std:: .","title":"C++ STL Induction"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#vector","text":"As array, when number can't determine. Sore uncertain number output data. Represent diagram.","title":"vector"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#set","text":"set used to remove duplicate, and sort acending order. If want to deal with data repetive, can use multiset . Only need remove duplicate, can use unordered_set .","title":"set"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#string","text":"","title":"string"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#map","text":"Map string to int. Determine big number or other data structure, can as bool array. Map string to string. multimap , unordered_map .","title":"map"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#queue","text":"BFS","title":"queue"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#priority_queue","text":"For int , double and char , default greater number have higher priority. Set smaller is higher(For int): priority_queue<int, vector<int>, greater<int> > . Set class priority: //Only need overload `<`//Set smaller is higherstruct Fruit { string name; int price; friend bool operator < (Fruit f1, Fruit f2) { return f1.price > f2.price; }};","title":"priority_queue"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#some-function-in-algorithm","text":"Firstly, need add #include<algorithm> . using namespace std;// `x` and `y` can be float point numbermin(x, y);max(x, y);// `x` and `y` must be integerabs(x, y); swap(x, y) , x and y can be structrue. reverse(first address, next address of last element) . //`next_permutation(first address, next address of last element)`, give next order of permutation.int a[3] = {1, 2 ,3};next_permutation(a, a+3);// a[3] = {1, 3, 2} fill(first address, next address of last element, value)","title":"Some Function in algorithm"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/CorCLanguage/#sort","text":"sort(first element address, next address of last element, compare function) , the first two parameters is must, and if the third parameter is blank, sort will use increment processing array. Compare Function: //Form small to large, conversely, form large to smallbool cmp(T a, T b) { return a < b;}//Secondary orderbool cmp(node a, node b) { if(a.x != b.x) { return a.x < b.x; } else return a.y > b.y;} Sort in STL: only vector , string , deque can use sort() , like map , set used Red-Black Tree can't sort. For example: string str[3] = {\"a\", \"b\", \"c\"};sort(str, str+3);vector<int> v;v.push_back(1);v.push_back(2);sort(v.begin(), v.end());","title":"sort()"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/LatexSymbol/","text":"Latex \u5e0c\u814a\u5b57\u6bcd \u6570\u5b66\u91cd\u97f3 \u7b26\u53f7 \u5411\u4e0a\u53bb\u6574\uff1a $\\lceil x \\rceil$ \u5411\u4e0b\u53bb\u6574\uff1a $\\lfloor x \\rfloor$","title":"Latex"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/LatexSymbol/#latex","text":"","title":"Latex"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/LatexSymbol/#_1","text":"","title":"\u5e0c\u814a\u5b57\u6bcd"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/LatexSymbol/#_2","text":"","title":"\u6570\u5b66\u91cd\u97f3"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/LatexSymbol/#_3","text":"\u5411\u4e0a\u53bb\u6574\uff1a $\\lceil x \\rceil$ \u5411\u4e0b\u53bb\u6574\uff1a $\\lfloor x \\rfloor$","title":"\u7b26\u53f7"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/TimerInCpp/","text":"\u65f6\u95f4\u51fd\u6570 Compare Function Type Accuracy Time time C system call low < 1s clock C system call low < 10 ms timeGetTime Windows API middle < 1 ms GetTickCount Windows API middle < 1 ms QueryPerformanceCounter Windows API high < 0.1ms gettimeofday C system call in linux high < 0.1ms RDTSC induction high < 0.1ms Example time() Prototype: time_t time(time_t * timer) in <time.h> , and typedef long time_t; Function: \u83b7\u53d6\u5f53\u524d\u7684\u7cfb\u7edf\u65f6\u95f4\uff0c\u8fd4\u56de\u7684\u7ed3\u679c\u662f\u4e00\u4e2atime_t\u7c7b\u578b\uff0c\u5176\u503c\u8868\u793a\u4eceCUT\uff08Coordinated Universal Time\uff09\u65f6\u95f41970\u5e741\u67081\u65e500:00:00\uff08\u79f0\u4e3aUNIX\u7cfb\u7edf\u7684Epoch\u65f6\u95f4\uff09\u5230\u5f53\u524d\u65f6\u523b\u7684\u79d2\u6570\u3002 Usage As timer: time_t start,stop; start = time(NULL); foo();//Dosomething stop = time(NULL); printf(\"Use Time:%ld\\n\",(stop-start)); As random seed: srand((unsigned) time(NULL)); printf(\"Ten random numbers from 0 to 99\\n\"); for(int i=0;i<10;i++) { printf(\"%d\\n\",rand()%100); } Combine with other function: Example: localtime, gmtime, asctime, ctime time_t timer; time(&timer); printf(\"Local time is: %s\\n\",asctime(localtime(&timer))); printf(\"Local time is: %s\\n\",ctime(&timer)); clock() Prototype: clock_t clock(void) in <time.h> , and typedef long clock_t; Function: \u8fd4\u56de\u4ece\u201c\u5f00\u542f\u8fd9\u4e2a\u7a0b\u5e8f\u8fdb\u7a0b\u201d\u5230\u201c\u7a0b\u5e8f\u4e2d\u8c03\u7528clock()\u51fd\u6570\u201d\u65f6\u4e4b\u95f4\u7684CPU\u65f6\u949f\u8ba1\u65f6\u5355\u5143\uff08clock tick\uff09\u6570\uff0c\u5728MSDN\u4e2d\u79f0\u4e4b\u4e3a\u6302\u949f\u65f6\u95f4\uff08wal-clock\uff09\u3002 In <time.h> , there is a const CLOCKS_PER_SEC \uff0cindicating how many clock units in a second, so we can use clock()/CLOCKS_PER_SEC to calculate. Usage clock_t start, stop; start = clock(); foo();//Dosomething stop = clock(); printf(\"%f\", (double)(stop-start)/CLOCKS_PER_SEC); gettimeofday Prototype: int gettimeofday(struct timeval* tv, struct timezone* tz) in <sys/time.h> , struct timeval and struct timezone are defined as follows: struct timeval{ long tv_sec; /*\u79d2*/ long tv_usec; /*\u5fae\u79d2*/ }; struct timezone{ int tz_minuteswest; /*\u548cGreenwich \u65f6\u95f4\u5dee\u4e86\u591a\u5c11\u5206\u949f*/ int tz_dsttime; /*\u65e5\u5149\u8282\u7ea6\u65f6\u95f4\u7684\u72b6\u6001*/ }; Function: gettimeofday() \u662flinux\u73af\u5883\u4e0b\u7684\u8ba1\u65f6\u51fd\u6570\uff0c\u628a\u5f53\u5730\u65f6\u533a\u7684\u4fe1\u606f\u653e\u5230tz\u6240\u6307\u7684\u7ed3\u6784\u4e2d\u3002 Usage struct timeval t1,t2; double timeuse; gettimeofday(&t1,NULL); foo(); gettimeofday(&t2,NULL); timeuse = t2.tv_sec-t1.tv_sec+(t2.tv_usec-t1.tv_usec)/1e6; printf(\"Use Time:%f\\n\",timeuse);","title":"\u65f6\u95f4\u51fd\u6570"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/TimerInCpp/#_1","text":"","title":"\u65f6\u95f4\u51fd\u6570"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/TimerInCpp/#compare","text":"Function Type Accuracy Time time C system call low < 1s clock C system call low < 10 ms timeGetTime Windows API middle < 1 ms GetTickCount Windows API middle < 1 ms QueryPerformanceCounter Windows API high < 0.1ms gettimeofday C system call in linux high < 0.1ms RDTSC induction high < 0.1ms","title":"Compare"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/TimerInCpp/#example","text":"","title":"Example"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/TimerInCpp/#time","text":"Prototype: time_t time(time_t * timer) in <time.h> , and typedef long time_t; Function: \u83b7\u53d6\u5f53\u524d\u7684\u7cfb\u7edf\u65f6\u95f4\uff0c\u8fd4\u56de\u7684\u7ed3\u679c\u662f\u4e00\u4e2atime_t\u7c7b\u578b\uff0c\u5176\u503c\u8868\u793a\u4eceCUT\uff08Coordinated Universal Time\uff09\u65f6\u95f41970\u5e741\u67081\u65e500:00:00\uff08\u79f0\u4e3aUNIX\u7cfb\u7edf\u7684Epoch\u65f6\u95f4\uff09\u5230\u5f53\u524d\u65f6\u523b\u7684\u79d2\u6570\u3002","title":"time()"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/TimerInCpp/#usage","text":"As timer: time_t start,stop; start = time(NULL); foo();//Dosomething stop = time(NULL); printf(\"Use Time:%ld\\n\",(stop-start)); As random seed: srand((unsigned) time(NULL)); printf(\"Ten random numbers from 0 to 99\\n\"); for(int i=0;i<10;i++) { printf(\"%d\\n\",rand()%100); } Combine with other function: Example: localtime, gmtime, asctime, ctime time_t timer; time(&timer); printf(\"Local time is: %s\\n\",asctime(localtime(&timer))); printf(\"Local time is: %s\\n\",ctime(&timer));","title":"Usage"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/TimerInCpp/#clock","text":"Prototype: clock_t clock(void) in <time.h> , and typedef long clock_t; Function: \u8fd4\u56de\u4ece\u201c\u5f00\u542f\u8fd9\u4e2a\u7a0b\u5e8f\u8fdb\u7a0b\u201d\u5230\u201c\u7a0b\u5e8f\u4e2d\u8c03\u7528clock()\u51fd\u6570\u201d\u65f6\u4e4b\u95f4\u7684CPU\u65f6\u949f\u8ba1\u65f6\u5355\u5143\uff08clock tick\uff09\u6570\uff0c\u5728MSDN\u4e2d\u79f0\u4e4b\u4e3a\u6302\u949f\u65f6\u95f4\uff08wal-clock\uff09\u3002 In <time.h> , there is a const CLOCKS_PER_SEC \uff0cindicating how many clock units in a second, so we can use clock()/CLOCKS_PER_SEC to calculate.","title":"clock()"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/TimerInCpp/#usage_1","text":"clock_t start, stop; start = clock(); foo();//Dosomething stop = clock(); printf(\"%f\", (double)(stop-start)/CLOCKS_PER_SEC);","title":"Usage"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/TimerInCpp/#gettimeofday","text":"Prototype: int gettimeofday(struct timeval* tv, struct timezone* tz) in <sys/time.h> , struct timeval and struct timezone are defined as follows: struct timeval{ long tv_sec; /*\u79d2*/ long tv_usec; /*\u5fae\u79d2*/ }; struct timezone{ int tz_minuteswest; /*\u548cGreenwich \u65f6\u95f4\u5dee\u4e86\u591a\u5c11\u5206\u949f*/ int tz_dsttime; /*\u65e5\u5149\u8282\u7ea6\u65f6\u95f4\u7684\u72b6\u6001*/ }; Function: gettimeofday() \u662flinux\u73af\u5883\u4e0b\u7684\u8ba1\u65f6\u51fd\u6570\uff0c\u628a\u5f53\u5730\u65f6\u533a\u7684\u4fe1\u606f\u653e\u5230tz\u6240\u6307\u7684\u7ed3\u6784\u4e2d\u3002","title":"gettimeofday"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/TimerInCpp/#usage_2","text":"struct timeval t1,t2; double timeuse; gettimeofday(&t1,NULL); foo(); gettimeofday(&t2,NULL); timeuse = t2.tv_sec-t1.tv_sec+(t2.tv_usec-t1.tv_usec)/1e6; printf(\"Use Time:%f\\n\",timeuse);","title":"Usage"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/remainder/","text":"\u4f59\u6570\u7684\u503c Mathematically ,the remainder is for arbitrary dividend and positive divisor ,but the results are different in different programming languages ,such as python and c++. For example: Dividend & Divisor Math Python C++ 7\\div 3 7\\div 3 1 1 1 7\\div (-3) 7\\div (-3) \\ or 1 -2 1 (-7)\\div 3 (-7)\\div 3 2 2 -1 (-7)\\div (-3) (-7)\\div (-3) \\ or 2 -1 -1 If divisor could be negative ,results in Math could be 1 or 2. Generalizing ,sign of remainder of Python is same as divisor ,and that of C++ is same as dividend.","title":"\u4f59\u6570\u7684\u503c"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/remainder/#_1","text":"Mathematically ,the remainder is for arbitrary dividend and positive divisor ,but the results are different in different programming languages ,such as python and c++. For example: Dividend & Divisor Math Python C++ 7\\div 3 7\\div 3 1 1 1 7\\div (-3) 7\\div (-3) \\ or 1 -2 1 (-7)\\div 3 (-7)\\div 3 2 2 -1 (-7)\\div (-3) (-7)\\div (-3) \\ or 2 -1 -1 If divisor could be negative ,results in Math could be 1 or 2. Generalizing ,sign of remainder of Python is same as divisor ,and that of C++ is same as dividend.","title":"\u4f59\u6570\u7684\u503c"},{"location":"%E8%8B%B1%E8%AF%AD/class/","text":"\u7c7b\u578b\u6a21\u677f \u56fe\u753b\u4f5c\u6587 \u7b2c\u4e00\u6bb5\uff1a\u56fe\u753b\u63cf\u8ff0+\u4e2d\u5fc3\u603b\u7ed3 \u7b2c\u4e00\u4e8c\u53e5\u8bdd\uff1a\u7528\u4e3b\u8bed\u4ece\u53e5\u5f15\u51fa\u63cf\u8ff0\u56fe\u753b What is obvious is that+\u63cf\u8ff0 \u4e00\u5e45\u56fe\u4e00\u4e2a\u4e3b\u4f53\uff0c\u4e24\u4e2a\u52a8\u4f5c in the cartoon,sb(\u5b9a), doing sth \u6b21\u8981\u52a8\u4f5c(\u5b9a \u72b6), is doing sth (\u4e3b\u8981\u52a8\u4f5c)(\u5b9a\u3001\u72b6) \u4e00\u5e45\u56fe\u4e24\u4e2a\u4e3b\u4f53\uff0c\u4e24\u4e2a\u52a8\u4f5c In the cartoon, sb1(\u5b9a) is doing sth1(\u5b9a\u3001\u72b6); and/but sb2(\u5b9a) is doing sth2(\u5b9a/\u72b6) \u4e24\u5e45\u56fe In the former picture, sb1(\u5b9a) is doing sth1(\u5b9a \u72b6); and/but in the latter one,sb2(\u5b9a) is doing sth2(\u5b9a/\u72b6) \u7b2c\u4e09\u53e5\u8bdd\uff1a\u5f15\u51fa\u5bd3\u610f\u7684\u8fc7\u6e21\u8bed It is apparent that the author of the drawing tries to reveal to us: ... \u7b2c\u56db\u53e5\uff1a\u4e2d\u5fc3\u603b\u7ed3 we should do sth we should never do sth sth is very important sth is very serious \u63a8\u8350\u53e5\u578b as ... as \u88ab\u52a8 so ... that \u6bd4\u55bb \u518d\u7528\u5f3a\u8c03\u53e5\u578b\u7a0d\u4f5c\u52a0\u5de5 \u53c2\u8003 \u9009\u62e9 What looks beyond dispute is that a host of graduates young as well as confused, standing on the cross road of their life, are confronted with four choices such as hunting for jobs and going abroad. The symbol meaning of the cartoon is quite conspicuous: it is options that should be argued exceedingly indispensable by children and adults. \u7b2c\u4e8c\u6bb5 \u7b2c\u4e00\u53e5\u8bdd\uff1a\u5f15\u51fa\u539f\u56e0\u5206\u6790\u7684\u603b\u8ff0\u53e5 \u5355\u8bcd\u66ff\u6362\uff0c\u6216\u6539\u5f3a\u8c03\u53e5 However, recognizing a problem is the first step in finding a solution. \u5177\u4f53\u539f\u56e0\u5206\u6790 \uff081-3\uff09\u4e2a\u539f\u56e0 \u9996\u5148 To begin with The main element for the problem is that ... \u5176\u6b21 additionally \u6700\u540e last but not least \u53c2\u8003 \u6ee5\u7528\u624b\u673a\u7684\u7f3a\u70b9 Analyzing the issue proves the first step in finding a solution. The primary element I would like to point out here Is that(\u76f8\u5f53\u4e8e firstly) heavy use of cellphones not only exerts great influence on our good health but also wastes too much precious time of teenagers and youngsters. Thus their academic grades would be affected quickly. Another factor is that(=secondly)the more frequently kids surf on cellphones, the worse their performance will become, which leaves readers quite a deep impression.(\u56e0\u4e3a\u8fd9\u4e2a\u539f\u56e0\u4e0d\u591f\u957f \u6240\u4ee5\u5916\u52a0\u4e86\u4e00\u4e2a\u975e\u9650\u5236\u6027\u5b9a\u8bed\u4ece\u53e5\u6765\u8fdb\u884c\u8865\u5145) In the end, if the tendency continued as it were, the grave consequence would be easy to be predicted The users of cellphones might look like mummies, and consequently, economy would stop moving, how horrible it sounds. \u7b2c\u4e09\u6bb5 \u603b\u7ed3\u63aa\u65bd\u6bb5 \u7b2c\u4e00\u53e5 To sum up, + \u63a8\u8350\u53e5\u578b \u7b2c\u4e8c\uff0c\u7b2c\u4e09\u53e5 \u5177\u4f53\u63aa\u65bd \u63a8\u8350\u53e5\u578b\uff1a can not fail to do It is urgent that \u6700\u540e\uff1a\u558a\u53e3\u53f7 \u603b\u7ed3\u6cd5 l believe that a happy and bright future is awaiting us if we make every effort to promote\uff08\u597d\u4e8b\uff09ban\uff08\u574f\u4e8b\uff09 \u53cd\u95ee\u6cd5 What does the future hold if mankind persists in doing sth?( wasting natural resources) \u5f15\u8bed\u6cd5 \u4e0d\u80fd\u7f16 just as has put it, \"\" \u53c2\u8003 As a consequence, so crucial is respecting parents that it from my perspective, proves to be time to attach great importance to it, The essential action, obviously, is to educate kids to honor elderly when they are still young Apart from this, youngsters could go back to see their parents frequently in spite of busy jobs. In the end, just as an old saying has put it \"Filial piety comes ahead of any other morality\". \u516c\u52a1\u4e66\u4fe1 \u79f0\u547c \u6587\u4e2d\u5df2\u7ed9\u51fa \u6587\u4e2d\u672a\u7ed9\u51fa\uff1aDear Sir or Madam \u7b2c\u4e00\u6bb5 \u81ea\u6211\u4ecb\u7ecd+\u5199\u4f5c\u76ee\u7684 \u81ea\u6211\u4ecb\u7ecd \u6587\u4e2d\u5df2\u7ed9\u51fa\uff1aI am ... \u6587\u4e2d\u672a\u7ed9\u51fa\uff1aI am a senior from the department of Physical Education in the/a university. \u5199\u4f5c\u76ee\u7684 I am writing the letter, to be honest, in order to (\u6587\u4e2d\u4e00\u5b9a\u7ed9\u51fa\uff09 \u7b2c\u4e8c\u6bb5 \uff08\u6587\u4e2d\u4e00\u5b9a\u7ed9\u51fa\uff093 \u4e2a\u539f\u56e0 so ... that It ... that, therefore ... \u72b6\u8bed\u4ece\u53e5 \u53c2\u8003 The salary, to begin with, keeps so low that I fail to support my families any more with prices generally rise. In addition, it has been widely accepted that the company is too faraway from my house. therefore takes me a long time to go to work every day. At last, I am by no means interested in the job although I have tried my best to become involved in it. \u7b2c\u4e09\u6bb5 \u4e24\u53e5 \u7b2c\u4e00\u53e5 \u5df2\u7ecf\u505a\u51fa\u8981\u6c42\uff0c\u4e00\u53e5\u8bdd\u5199\u51fa\u8981\u6c42 \u672a\u7ed9\u51fa\u8981\u6c42\uff0c\u8868\u793a\u611f\u8c22 My thanks to you for your generous assistance are beyond words. \u671f\u5f85\u56de\u4fe1 I am looking forward to your reply. \u843d\u6b3e Yours truly, Li Ming \u79c1\u4eba\u4e66\u4fe1 \u79f0\u547c Dear ... \u7b2c\u4e00\u6bb5 \u95ee\u5019\u8bed+\u5199\u4f5c\u76ee\u7684\uff08\u7ed9\u51fa\uff09 \u7b2c\u4e8c\u6bb5 \u540c\u516c\u52a1\u4e66\u4fe1 \u7b2c\u4e09\u6bb5 \u7ed9\u51fa\u8981\u6c42\uff0c\u8981\u6c42+\u795d\u798f\u8bed \u672a\u7ed9\u51fa\u8981\u6c42\uff0c\u795d\u798f\u8bed+\u671f\u5f85\u56de\u4fe1 Please bring my best wished to your family \u544a\u793a\u7c7b\u6587\u7ae0 \u6807\u9898\uff1a\u5927\u5199Notice \u79f0\u547c\uff0c\u65e0 \u7b2c\u4e00\u6bb5 \u5199\u4f5c\u76ee\u7684+\u5177\u4f53\u8bba\u8ff0 We are to ... \u516c\u52a1\u4e66\u4fe1\u7b2c\u4e8c\u6bb5 \u7b2c\u4e8c\u6bb5 \u6b22\u8fce\u52a0\u5165+\u8054\u7cfb\u65b9\u5f0f Welcome to join us we are waiting for your coming. If you intended to join us, please email us XXX@yahoo.com.cn. \u843d\u6b3e \u5355\u4f4d\u540d\u5b57\uff08\u6587\u4e2d\u7ed9\u51fa\uff09","title":"\u7c7b\u578b\u6a21\u677f"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_1","text":"","title":"\u7c7b\u578b\u6a21\u677f"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_2","text":"","title":"\u56fe\u753b\u4f5c\u6587"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_3","text":"","title":"\u7b2c\u4e00\u6bb5\uff1a\u56fe\u753b\u63cf\u8ff0+\u4e2d\u5fc3\u603b\u7ed3"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_4","text":"What is obvious is that+\u63cf\u8ff0 \u4e00\u5e45\u56fe\u4e00\u4e2a\u4e3b\u4f53\uff0c\u4e24\u4e2a\u52a8\u4f5c in the cartoon,sb(\u5b9a), doing sth \u6b21\u8981\u52a8\u4f5c(\u5b9a \u72b6), is doing sth (\u4e3b\u8981\u52a8\u4f5c)(\u5b9a\u3001\u72b6) \u4e00\u5e45\u56fe\u4e24\u4e2a\u4e3b\u4f53\uff0c\u4e24\u4e2a\u52a8\u4f5c In the cartoon, sb1(\u5b9a) is doing sth1(\u5b9a\u3001\u72b6); and/but sb2(\u5b9a) is doing sth2(\u5b9a/\u72b6) \u4e24\u5e45\u56fe In the former picture, sb1(\u5b9a) is doing sth1(\u5b9a \u72b6); and/but in the latter one,sb2(\u5b9a) is doing sth2(\u5b9a/\u72b6)","title":"\u7b2c\u4e00\u4e8c\u53e5\u8bdd\uff1a\u7528\u4e3b\u8bed\u4ece\u53e5\u5f15\u51fa\u63cf\u8ff0\u56fe\u753b"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_5","text":"It is apparent that the author of the drawing tries to reveal to us: ...","title":"\u7b2c\u4e09\u53e5\u8bdd\uff1a\u5f15\u51fa\u5bd3\u610f\u7684\u8fc7\u6e21\u8bed"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_6","text":"we should do sth we should never do sth sth is very important sth is very serious","title":"\u7b2c\u56db\u53e5\uff1a\u4e2d\u5fc3\u603b\u7ed3"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_7","text":"as ... as \u88ab\u52a8 so ... that \u6bd4\u55bb \u518d\u7528\u5f3a\u8c03\u53e5\u578b\u7a0d\u4f5c\u52a0\u5de5","title":"\u63a8\u8350\u53e5\u578b"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_8","text":"\u9009\u62e9 What looks beyond dispute is that a host of graduates young as well as confused, standing on the cross road of their life, are confronted with four choices such as hunting for jobs and going abroad. The symbol meaning of the cartoon is quite conspicuous: it is options that should be argued exceedingly indispensable by children and adults.","title":"\u53c2\u8003"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_9","text":"","title":"\u7b2c\u4e8c\u6bb5"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_10","text":"\u5355\u8bcd\u66ff\u6362\uff0c\u6216\u6539\u5f3a\u8c03\u53e5 However, recognizing a problem is the first step in finding a solution.","title":"\u7b2c\u4e00\u53e5\u8bdd\uff1a\u5f15\u51fa\u539f\u56e0\u5206\u6790\u7684\u603b\u8ff0\u53e5"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_11","text":"\uff081-3\uff09\u4e2a\u539f\u56e0","title":"\u5177\u4f53\u539f\u56e0\u5206\u6790"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_12","text":"To begin with The main element for the problem is that ...","title":"\u9996\u5148"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_13","text":"additionally","title":"\u5176\u6b21"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_14","text":"last but not least","title":"\u6700\u540e"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_15","text":"\u6ee5\u7528\u624b\u673a\u7684\u7f3a\u70b9 Analyzing the issue proves the first step in finding a solution. The primary element I would like to point out here Is that(\u76f8\u5f53\u4e8e firstly) heavy use of cellphones not only exerts great influence on our good health but also wastes too much precious time of teenagers and youngsters. Thus their academic grades would be affected quickly. Another factor is that(=secondly)the more frequently kids surf on cellphones, the worse their performance will become, which leaves readers quite a deep impression.(\u56e0\u4e3a\u8fd9\u4e2a\u539f\u56e0\u4e0d\u591f\u957f \u6240\u4ee5\u5916\u52a0\u4e86\u4e00\u4e2a\u975e\u9650\u5236\u6027\u5b9a\u8bed\u4ece\u53e5\u6765\u8fdb\u884c\u8865\u5145) In the end, if the tendency continued as it were, the grave consequence would be easy to be predicted The users of cellphones might look like mummies, and consequently, economy would stop moving, how horrible it sounds.","title":"\u53c2\u8003"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_16","text":"\u603b\u7ed3\u63aa\u65bd\u6bb5","title":"\u7b2c\u4e09\u6bb5"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_17","text":"To sum up, + \u63a8\u8350\u53e5\u578b","title":"\u7b2c\u4e00\u53e5"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_18","text":"\u5177\u4f53\u63aa\u65bd \u63a8\u8350\u53e5\u578b\uff1a can not fail to do It is urgent that","title":"\u7b2c\u4e8c\uff0c\u7b2c\u4e09\u53e5"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_19","text":"","title":"\u6700\u540e\uff1a\u558a\u53e3\u53f7"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_20","text":"l believe that a happy and bright future is awaiting us if we make every effort to promote\uff08\u597d\u4e8b\uff09ban\uff08\u574f\u4e8b\uff09","title":"\u603b\u7ed3\u6cd5"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_21","text":"What does the future hold if mankind persists in doing sth?( wasting natural resources)","title":"\u53cd\u95ee\u6cd5"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_22","text":"\u4e0d\u80fd\u7f16 just as has put it, \"\"","title":"\u5f15\u8bed\u6cd5"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_23","text":"As a consequence, so crucial is respecting parents that it from my perspective, proves to be time to attach great importance to it, The essential action, obviously, is to educate kids to honor elderly when they are still young Apart from this, youngsters could go back to see their parents frequently in spite of busy jobs. In the end, just as an old saying has put it \"Filial piety comes ahead of any other morality\".","title":"\u53c2\u8003"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_24","text":"\u79f0\u547c \u6587\u4e2d\u5df2\u7ed9\u51fa \u6587\u4e2d\u672a\u7ed9\u51fa\uff1aDear Sir or Madam","title":"\u516c\u52a1\u4e66\u4fe1"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_25","text":"\u81ea\u6211\u4ecb\u7ecd+\u5199\u4f5c\u76ee\u7684 \u81ea\u6211\u4ecb\u7ecd \u6587\u4e2d\u5df2\u7ed9\u51fa\uff1aI am ... \u6587\u4e2d\u672a\u7ed9\u51fa\uff1aI am a senior from the department of Physical Education in the/a university. \u5199\u4f5c\u76ee\u7684 I am writing the letter, to be honest, in order to (\u6587\u4e2d\u4e00\u5b9a\u7ed9\u51fa\uff09","title":"\u7b2c\u4e00\u6bb5"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_26","text":"\uff08\u6587\u4e2d\u4e00\u5b9a\u7ed9\u51fa\uff093 \u4e2a\u539f\u56e0 so ... that It ... that, therefore ... \u72b6\u8bed\u4ece\u53e5","title":"\u7b2c\u4e8c\u6bb5"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_27","text":"The salary, to begin with, keeps so low that I fail to support my families any more with prices generally rise. In addition, it has been widely accepted that the company is too faraway from my house. therefore takes me a long time to go to work every day. At last, I am by no means interested in the job although I have tried my best to become involved in it.","title":"\u53c2\u8003"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_28","text":"\u4e24\u53e5 \u7b2c\u4e00\u53e5 \u5df2\u7ecf\u505a\u51fa\u8981\u6c42\uff0c\u4e00\u53e5\u8bdd\u5199\u51fa\u8981\u6c42 \u672a\u7ed9\u51fa\u8981\u6c42\uff0c\u8868\u793a\u611f\u8c22 My thanks to you for your generous assistance are beyond words. \u671f\u5f85\u56de\u4fe1 I am looking forward to your reply.","title":"\u7b2c\u4e09\u6bb5"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_29","text":"Yours truly, Li Ming","title":"\u843d\u6b3e"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_30","text":"\u79f0\u547c Dear ...","title":"\u79c1\u4eba\u4e66\u4fe1"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_31","text":"\u95ee\u5019\u8bed+\u5199\u4f5c\u76ee\u7684\uff08\u7ed9\u51fa\uff09","title":"\u7b2c\u4e00\u6bb5"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_32","text":"\u540c\u516c\u52a1\u4e66\u4fe1","title":"\u7b2c\u4e8c\u6bb5"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_33","text":"\u7ed9\u51fa\u8981\u6c42\uff0c\u8981\u6c42+\u795d\u798f\u8bed \u672a\u7ed9\u51fa\u8981\u6c42\uff0c\u795d\u798f\u8bed+\u671f\u5f85\u56de\u4fe1 Please bring my best wished to your family","title":"\u7b2c\u4e09\u6bb5"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_34","text":"\u6807\u9898\uff1a\u5927\u5199Notice \u79f0\u547c\uff0c\u65e0","title":"\u544a\u793a\u7c7b\u6587\u7ae0"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_35","text":"\u5199\u4f5c\u76ee\u7684+\u5177\u4f53\u8bba\u8ff0 We are to ... \u516c\u52a1\u4e66\u4fe1\u7b2c\u4e8c\u6bb5","title":"\u7b2c\u4e00\u6bb5"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_36","text":"\u6b22\u8fce\u52a0\u5165+\u8054\u7cfb\u65b9\u5f0f Welcome to join us we are waiting for your coming. If you intended to join us, please email us XXX@yahoo.com.cn.","title":"\u7b2c\u4e8c\u6bb5"},{"location":"%E8%8B%B1%E8%AF%AD/class/#_37","text":"\u5355\u4f4d\u540d\u5b57\uff08\u6587\u4e2d\u7ed9\u51fa\uff09","title":"\u843d\u6b3e"},{"location":"%E8%8B%B1%E8%AF%AD/writing/","text":"\u5199\u4f5c\u53e5\u578b \u66ff\u6362 parents superiors the elderly senior citizens should ought to be supposed to be obliged to\uff08\u6cd5\u5f8b\uff09 we us people human beings private individuals the folks/ the masses teenagers and youngsters undergraduates students on campus experts and professors all children and adults men and women in all walks customers not never by no means under no circumstances fail to think contend presume cling to the perspective that very exceedingly extraordinarily more than serious fatal grievous be of great severity many a sea of a host of a multitude of an army of +\u590d\u6570\u540d\u8bcd immense amounts of+\u4e0d\u53ef\u6570\u540d\u8bcd abundant+\u90fd\u53ef reasons causes factors grounds explain account for lead to give rise to idea outlook perspective be look=appear smell taste feel sound important essential crucial play a key role in sth beautiful graceful gorgeous and likewise in the meanwhile but by contrast nevertheless picture cartoon painting pay attention to pour attention into shed light on problem matter subject \u7b80\u5355\u53e5 \u88ab\u52a8 \u7b2c\u4e00\u6bb5\u6700\u540e\u6216\u7b2c\u4e09\u6bb5\u603b\u7ed3 (1)\u65e0\u4e3b\u53e5; (2)\u4eba\u79f0\u4ee3\u8bcd\u505a\u4e3b\u8bed\u7684\u53e5\u5b50 Parents should be respected by us. there be / exist / seem / remain / appear \u7b2c\u4e8c\u6bb5\u7b2c\u4e00\u53e5\u5f15\u51fa\u539f\u56e0\u5206\u6790 There exist many reasons to explain my idea. \u6bd4\u8f83\u7ed3\u6784 as ... as Liu is as beautiful as a white lily, which manages to catch the eyes of a host of teenagers and youngsters. Confidence keeps las important as air and water, which play a key role in the normal growth of all creatures in the and community. Pollution is as serious as earthquakes, which have threatened the health of helpless natives or even take their lives away. the more ... ,the more \u7b2c\u4e8c\u6bb5\u539f\u56e0\u5206\u6790 the + \u6bd4\u8f83\u7ea7 ... , the + \u6bd4\u8f83\u7ea7 The harder children and adults work. the more fortunate they will become. The more frequently cultures are exchanged, the more rapidly Chinese economy will evolve. \u5e76\u5217\u53e5 \u63cf\u8ff0\u56fe\u753b\u7684\u5206\u7c7b \u4e00\u5e45\u56fe \u4e00\u4e2a\u4e3b\u4f53\uff0c\u4e24\u4e2a\u52a8\u4f5c \u4e24\u4e2a\u4e3b\u4f53\uff0c\u4e24\u4e2a\u52a8\u4f5c \u4e24\u5e45\u56fe \u63cf\u8ff0\u56fe\u8868\u5206\u7c7b \u4e24\u4e2a\u4e3b\u4f53\uff0c\u4e24\u4e2a\u52a8\u4f5c and but \u4e00\u5e45\u56fe\uff0c\u4e24\u4e2a\u4e3b\u4f53\uff0c\u4e24\u4e2a\u52a8\u4f5c In the picture, the goal-keeper is imaging himself as small as an ant. On the contrary, the soccer player is assuming his rival strikingly giant. \u52a0\u72b6\u8bed \u4e24\u5e45\u56fe In the former photo, a man is writing the name of Beckham on his face. At the same time, another youngster is spending 300 having his hair cut into the style of Beckham. not only ... but also ... \u5199\u5728\u7b2c\u4e8c\u6bb5\uff0c\u539f\u56e0\u5206\u6790 Raising pets can not only reduce loneliness of senior citizens but also cultivate the loving heart of kids, that is to say, pets could bring much happiness to the young and the old. \u4e3a\u4ec0\u4e48\u5b5d\u656c\u7236\u6bcd Respecting parents not only keeps a Chinese conventional virtue but also proves to be the responsibility of their offspring. \u4e3a\u4ec0\u4e48\u4e0d\u5e94\u8be5\u76f2\u76ee\u8ffd\u661f? Pursuing celebrities blindly not only exerts great influence on the study of teenagers and youngsters but also is a waste of their time and youth. \u590d\u5408\u53e5 \u4e3b\u8bed\u4ece\u53e5 It ... that ... \u4efb\u4f55\u4e00\u53e5\u8bdd\u524d\u90fd\u53ef\u5199\uff0c\u63a8\u8350\u7b2c\u4e00\u6bb5\u7b2c\u4e00\u53e5\u8bdd\u524d\uff0c\u5f15\u51fa\u56fe\u8868\u3002 What is generally agreed is that ... \u540c\u4f4d\u8bed\u548c\u540c\u4f4d\u8bed\u4ece\u53e5 \u540d\u8bcd\u505a\u540c\u4f4d\u8bed \u540d\u8bcd\u90fd\u53ef\u52a0\u5165\u540d\u8bcd\uff0c\u4f5c\u4e3a\u5176\u540c\u4f4d\u8bed Environmental pollution, a hot issue throughout the world, has become increasingly fearful in our contemporary society. \u540c\u4f4d\u8bed\u4ece\u53e5 \u7b2c\u4e8c\u6bb5\uff0c\u539f\u56e0\u5206\u6790\u4f7f\u7528 The truth that + \u539f\u56e0\u53e5 + indicates that + \u7ed3\u8bba\u53e5 The truth that she wears a pair of big eves indicates that she looks like a beauty. The truth that a heaven of bright stars and pure moonlight fail to be detected by urban kids indicates that pollution becomes increasingly fearful/in our contemporary society. \u5b9a\u8bed\u4ece\u53e5 \u540d\u8bcd\u90fd\u53ef\u4ee5\u52a0\u5b9a\u8bed\uff0c\u5728\u7b2c\u4e00\u6bb5\u63cf\u8ff0\u56fe\u753b\u65f6\u63a8\u8350\u90fd\u8981\u52a0\u5b9a\u8bed\u3002 An American girl with a smile on her face) is wearing Chinese costume which keeps popular in the south east of China. A boy young as well as energetic is rushing to the destination which becomes a new start. The eldest son looking rather cruel as well as ugly kicking out his father who trembles on the ground like a fallen leaf in autumn. \u4e07\u80fd\u5b9a\u8bed \u597d\u7684 as well as \u8fde\u63a5\u4e24\u4e2a\u5f62\u5bb9\u8bcd\uff1a cute, lovely; little graceful, elegant; young confident, energetic optimistic, active aggressive, ambitious persistent Who looks distinctly impressive to readers \u574f\uff0c as well as cruel, ugly negative, gloomy short-sighted, double-faced contemptible \u5351\u9119\u7684 hot-tempered \u813e\u6c14\u574f\u7684 terrible, disgusting disgraceful Who looks rather less impressive to readers \u5b9a\u8bed\u4ece\u53e5\u6ee1\u5206\u8868\u8fbe which \u5f15\u5bfc\u7684\u975e\u9650\u5236\u4fee\u9970\u524d\u9762\u7684\u4e00\u53e5\u8bdd\uff0c\u4e07\u80fd\u53e5\u578b\uff0c\u63a8\u8350\u7b2c\u4e8c\u6bb5\u67d0\u4e2a\u77ed\u539f\u56e0\u540e\u9762\u3002 \u597d\uff1a which has provoked widespread concern among people recently. \u574f\uff1a which would give rise to dreadful consequences in the near future. ### \u72b6\u8bed\u548c\u72b6\u8bed\u4ece\u53e5 \u4efb\u4f55\u4e00\u53e5\u8bdd\u7684\u65c1\u8fb9\u90fd\u53ef\u52a0\u72b6\u8bed\uff0c\u7075\u6d3b\uff0c\u63a8\u8350\u4e3b\u8c13\u95f4\u4f5c\u4e3a\u63d2\u5165\u8bed\uff0c\u63cf\u8ff0\u56fe\u753b\u56fe\u8868\u65f6\uff0c\u4e00\u5b9a\u8981\u52a0 \u526f\u8bcd\uff0c \u65f6\u95f4\uff0c \u5730\u70b9\uff0c \u6761\u4ef6\uff0cif \u76ee\u7684\uff0cto do \u8ba9\u6b65\uff0calthough \u4f34\u968f \u65b9\u5f0f\uff0cby the means of \u539f\u56e0\uff0cbecause \u7ed3\u679c\uff0cso ... that \u63cf\u8ff0\u56fe\u753b\u7684\u4e07\u80fd\u72b6\u8bed \u56fe\u8868\u4e00\u5b9a\u7ed9\u51fa\u4e86 in the center of the vivid picture \u5206\u6790\u539f\u56e0\u7684\u4e07\u80fd\u72b6\u8bed in light of the rapid advance of science and technology in the general routine of everyday living although many people fail to pay attention to the problem \u72b6\u4ece\u7684\u6ee1\u5206\u8868\u8fbe although \u53ef\u5199\u5728\u4efb\u4f55\u4e00\u53e5\u8bdd\u65c1\u8fb9\uff0c\u63a8\u8350\u7b2c\u4e8c\u6bb5\uff0c\u5206\u6790\u539f\u56e0 \u4e3a\u4ec0\u4e48\u8bf4\u76f2\u76ee\u8ffd\u661f\u4e0d\u597d\uff1f pursuing celebrities blindly proves to be a waste of time and energy of students on campus although their touching singing could comport the soul of audiences. \u4e3a\u4ec0\u4e48\u519c\u6c11\u6d8c\u5165\u57ce\u5e02\uff1f peasant-workers, in big cities, not only could find more job opportunities but also enable their offspring to enjoy equal education like their peers in urban areas although they might lead a tough life there, rising early and going to bed late so ... that ... \u51fa\u73b0\u5f62\u5bb9\u8bcd\u548c\u526f\u8bcd\u53ef\u4ee5\u7528\uff0c\u7b2c\u4e00\u6bb5\u6700\u540e\uff0c\u7b2c\u4e09\u6bb5\u7b2c\u4e00\u53e5\uff0c\u4e2d\u5fc3\u53e5 that \u540e\u9700\u8981\u51c6\u786e perseverance is so vital that it is good time for youngsters to restrain themselves to insist their dreams. supporting the elderly is so crucial that time is supposed to be spared to accompany their parent. sth proves so significant / fearful that it should have been brought into the limelight under modern conditions. \u5206\u8bcd\u4f5c\u72b6\u8bed\u653e\u5728\u4e3b\u8c13\u4e4b\u95f4\u4f5c\u4e3a\u63d2\u5165\u8bed\u4f7f\u7528 \u63a8\u8350\u5199\u5728\u7b2c\u4e00\u6bb5\uff0c\u4e00\u5e45\u56fe\u4e00\u4e2a\u4e3b\u4f53\u4e24\u4e2a\u52a8\u4f5c\u65f6\u4f7f\u7528\uff0c An American girl young as well as elegant, smiling sweetly on her face, is wearing Chinese costume which is popular in the southeast of China. The hot pot not only delicious but also healthy, smoking in the center of the vivid caricature, is filled with cultures from China and foreign nations. sb(\u5b9a), doing sth1.(\u6b21\u8981)+\u5b9a/\u72b6, is doing sth (\u4e3b\u8981)+\u5b9a\u72b6 \u7279\u6b8a\u7ed3\u6784 \u53cc\u91cd\u5426\u5b9a Can not fail to do sth \u5199\u5728\u7b2c\u4e09\u6bb5\uff0c\u5177\u4f53\u63aa\u65bd\uff0c\u8d8a\u5177\u4f53\u8d8a\u597d University students cannot fail to know S these offer clues for ther future careers. \u4fee\u8f9e \u6bd4\u55bb \u63a8\u8350\u7b2c\u4e00\u6bb5\u6700\u540e\uff0c\u7b2c\u4e09\u6bb5\u7b2c\u4e00\u53e5 sth is to \u4eba as sunshine in spring is to all creatures on the earth. as grave natural disasters are to powerless natives. \u6392\u6bd4 ### \u5f3a\u8c03\u53e5\u578b It is ... that ... \u6240\u6709\u90fd\u53ef\uff0c\u7b2c\u4e00\u6bb5\u6700\u540e\uff0c\u7b2c\u4e8c\uff0c\u7b2c\u4e09\u7b2c\u4e00\u53e5\uff0c\u4e3b\u8bed\u6700\u597d\u3002 It is numerous factors that there exist to account for the phenomenon. \u5012\u88c5 \u628a\u4e00\u53e5\u8bdd\u5199\u6210\u4e00\u822c\u7591\u95ee\u53e5\u7684\u5f62\u5f0f\uff0c\u63d0\u4e2a\u52a9\u52a8\u8bcd\u653e\u5728\u53e5\u9996 \u5426\u5b9a\u8bcd\u653e\u5728\u53e5\u9996\u7528\u5012\u88c5 I am never a woman tough and outgoing. Never am I a ... He not only looks poor but also in fact is needy in his mind. Not only does he look poor ... so ... that ... \u628aso\u5f15\u5bfc\u7684\u90e8\u5206\u653e\u5728\u53e5\u9996\u7528\u5012\u88c5 sth keeps so significant/fearful that ... The issue should have been brought into the limelight under modern conditions. So significant/fearful does sth keep that the issue ... \u865a\u62df\u8bed\u6c14 If \u63a8\u8350\u7b2c\u4e8c\u6bb5\uff0c\u539f\u56e0\u5206\u6790\uff0c\u53cd\u9762\u8bba\u8bc1 If parents failed to be respected by their sons or daughters they would be despised by their own children in the near future. If every university student were indulged in surfing the internet every day, he or she might be confronted with a dim and gloomy future. It is imperative / essential / urgent that that\u540e\u52a8\u8bcd\u539f\u5f62\u8868\u865a\u62df\uff0c\u7b2c\u4e09\u6bb5\u5177\u4f53\u63aa\u65bd It is urgent that Chinese citizens/ undergraduates should ... It is crucial that parents/teachers in primary schools or univeristies / communities should educate / encourage their kids / undergraduates residents to do sth \u6216\u8005 not to do sth \u6bb5\u843d \u7b2c\u4e8c\u6bb5 \u5b9a\u4e49\u548c\u89e3\u91ca \u7b2c\u4e00\u4e2a\u539f\u56e0\u5206\u6790\u65f6\u4f7f\u7528 \u4ec0\u4e48\u662f\u5b5d\u656c\u7236\u6bcd? Respecting parents is a Chinese traditional virtue which means that we buy gifts for them, we wash clothes for them and we cook delicious foods for them when they are in need of us \u4ec0\u4e48\u662f\u4e50\u89c2? Optimism is a positive attitude which means that one fails to be afraid of frustrations, one is brave to face any difficulties, and one smiles at people he meets even when he lives in the gutter currently sth1 is sth2 which means that ... sth2: a severe global issue a Chinese traditional virtue a social pervasive trend an active / negative mentality a hot social subject \u7edf\u8ba1\u548c\u4e8b\u5b9e In line with the proximate data by ... , an increasing number of \u4eba think that ... In light of the latest survey in a university, the majority of undergraduates tend to use mobile phones for reading books including professional and non-professional knowledge. \u5f15\u7528\u540d\u4eba\u540d\u8a00 Once there seemed a writer who has gained great reputation in South Africa named Alan Paton stating that the more; as ... as ...; so ... that ...; if ; \u6bd4\u55bb \u4e3e\u4f8b \u4e3e\u5c0f\u4f8b\u5b50 \u62bd\u8c61\u540d\u8bcd\u6216\u590d\u6570\u540d\u8bcd\uff0c\u53ef\u8ddf such as \u6765\u52a0\u5c0f\u4f8b\u5b50 I love reading masterpieces such as Gone with the Wind, Pride and Prejudice and Little Prince. \u4e3e\u5927\u4f8b\u5b50 Although multitudes of cases can support my simple view, the following one is most favorable. I, the other day, had a high fever because it rained heavily last night. Unfortunately, no families or roommates took care of me during the holiday. At that moment, a dormitory assistant entered to give me some medicines. Then, I recovered the next day. So the story vividly tells us a truth that loving heart seems like a lamp which will become lighter in darkness. \u4e3a\u4ec0\u4e48\u5e74\u9f84\u5927\u6ee1\u610f\u5ea6\u9ad8? Although a sea of cases can clarify my perspective, the following one may be the most typical. I have an uncle who had worked as a teacher in a middle school. When he was about 40 years old, he appeared exceedingly upset almost every day, with a blank face in his class. However, now he has retired and gone to university for the elderly. Every time he comes to my house could find happiness in his eyes. What a pleasant matter. So the story tells us that the elder human beings become, the more delighted they lead their life. \u56e0\u679c\u8bba\u8bc1 \u5927\u5b66\u751f\u4f7f\u7528\u624b\u673a\u6253\u53d1\u65f6\u95f4\uff1f If more students spent more time on cellphones, killing time, their academic performance would be affected. The poorer their academic performance becomes, the more difficultly they will graduate from universities. \u4f53\u80b2\u953b\u70bc\u65b9\u5f0f\u8c03\u67e5\uff1f If more time were spared to engage in various sports activities such as jogging or just walking, their physical health would improve a lot. As we know, fitness is the foundation of any revolution. With good health, we could make greater contribution to our country. \u603b\u7ed3 \u5982\u679c\u80fd\u7528\u4e2d\u6587\u60f3\u5230\u539f\u56e0\uff0c\u5c31\u7528\u4ee5\u4e0b\u6765\u5199\u539f\u56e0\uff1a the more not only although the truth if \u60f3\u4e0d\u5230\uff1a \u5b9a\u4e49 \u6570\u636e \u4e3e\u4f8b \u540d\u8a00 \u56e0\u679c \u63a8\u8350\u90092\u4e2a\u53e5\u578b\uff0c1\u4e2a\u8bba\u8bc1\u65b9\u5f0f","title":"\u5199\u4f5c\u53e5\u578b"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_1","text":"","title":"\u5199\u4f5c\u53e5\u578b"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_2","text":"","title":"\u66ff\u6362"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#parents","text":"superiors the elderly senior citizens","title":"parents"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#should","text":"ought to be supposed to be obliged to\uff08\u6cd5\u5f8b\uff09","title":"should"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#we-us-people","text":"human beings private individuals the folks/ the masses teenagers and youngsters undergraduates students on campus experts and professors all children and adults men and women in all walks customers","title":"we us people"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#not","text":"never by no means under no circumstances fail to","title":"not"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#think","text":"contend presume cling to the perspective that","title":"think"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#very","text":"exceedingly extraordinarily more than","title":"very"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#serious","text":"fatal grievous be of great severity","title":"serious"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#many","text":"a sea of a host of a multitude of an army of +\u590d\u6570\u540d\u8bcd immense amounts of+\u4e0d\u53ef\u6570\u540d\u8bcd abundant+\u90fd\u53ef","title":"many"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#reasons","text":"causes factors grounds","title":"reasons"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#explain","text":"account for lead to give rise to","title":"explain"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#idea","text":"outlook perspective","title":"idea"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#be","text":"look=appear smell taste feel sound","title":"be"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#important","text":"essential crucial play a key role in sth","title":"important"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#beautiful","text":"graceful gorgeous","title":"beautiful"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#and","text":"likewise in the meanwhile","title":"and"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#but","text":"by contrast nevertheless","title":"but"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#picture","text":"cartoon painting","title":"picture"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#pay-attention-to","text":"pour attention into shed light on","title":"pay attention to"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#problem","text":"matter subject","title":"problem"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_3","text":"","title":"\u7b80\u5355\u53e5"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_4","text":"\u7b2c\u4e00\u6bb5\u6700\u540e\u6216\u7b2c\u4e09\u6bb5\u603b\u7ed3 (1)\u65e0\u4e3b\u53e5; (2)\u4eba\u79f0\u4ee3\u8bcd\u505a\u4e3b\u8bed\u7684\u53e5\u5b50 Parents should be respected by us.","title":"\u88ab\u52a8"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#there-be-exist-seem-remain-appear","text":"\u7b2c\u4e8c\u6bb5\u7b2c\u4e00\u53e5\u5f15\u51fa\u539f\u56e0\u5206\u6790 There exist many reasons to explain my idea.","title":"there be / exist / seem / remain / appear"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_5","text":"","title":"\u6bd4\u8f83\u7ed3\u6784"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#as-as","text":"Liu is as beautiful as a white lily, which manages to catch the eyes of a host of teenagers and youngsters. Confidence keeps las important as air and water, which play a key role in the normal growth of all creatures in the and community. Pollution is as serious as earthquakes, which have threatened the health of helpless natives or even take their lives away.","title":"as ... as"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#the-more-the-more","text":"\u7b2c\u4e8c\u6bb5\u539f\u56e0\u5206\u6790 the + \u6bd4\u8f83\u7ea7 ... , the + \u6bd4\u8f83\u7ea7 The harder children and adults work. the more fortunate they will become. The more frequently cultures are exchanged, the more rapidly Chinese economy will evolve.","title":"the more ... ,the more"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_6","text":"\u63cf\u8ff0\u56fe\u753b\u7684\u5206\u7c7b \u4e00\u5e45\u56fe \u4e00\u4e2a\u4e3b\u4f53\uff0c\u4e24\u4e2a\u52a8\u4f5c \u4e24\u4e2a\u4e3b\u4f53\uff0c\u4e24\u4e2a\u52a8\u4f5c \u4e24\u5e45\u56fe \u63cf\u8ff0\u56fe\u8868\u5206\u7c7b \u4e24\u4e2a\u4e3b\u4f53\uff0c\u4e24\u4e2a\u52a8\u4f5c","title":"\u5e76\u5217\u53e5"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#and-but","text":"\u4e00\u5e45\u56fe\uff0c\u4e24\u4e2a\u4e3b\u4f53\uff0c\u4e24\u4e2a\u52a8\u4f5c In the picture, the goal-keeper is imaging himself as small as an ant. On the contrary, the soccer player is assuming his rival strikingly giant. \u52a0\u72b6\u8bed \u4e24\u5e45\u56fe In the former photo, a man is writing the name of Beckham on his face. At the same time, another youngster is spending 300 having his hair cut into the style of Beckham.","title":"and but"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#not-only-but-also","text":"\u5199\u5728\u7b2c\u4e8c\u6bb5\uff0c\u539f\u56e0\u5206\u6790 Raising pets can not only reduce loneliness of senior citizens but also cultivate the loving heart of kids, that is to say, pets could bring much happiness to the young and the old. \u4e3a\u4ec0\u4e48\u5b5d\u656c\u7236\u6bcd Respecting parents not only keeps a Chinese conventional virtue but also proves to be the responsibility of their offspring. \u4e3a\u4ec0\u4e48\u4e0d\u5e94\u8be5\u76f2\u76ee\u8ffd\u661f? Pursuing celebrities blindly not only exerts great influence on the study of teenagers and youngsters but also is a waste of their time and youth.","title":"not only ... but also ..."},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_7","text":"","title":"\u590d\u5408\u53e5"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_8","text":"","title":"\u4e3b\u8bed\u4ece\u53e5"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#it-that","text":"\u4efb\u4f55\u4e00\u53e5\u8bdd\u524d\u90fd\u53ef\u5199\uff0c\u63a8\u8350\u7b2c\u4e00\u6bb5\u7b2c\u4e00\u53e5\u8bdd\u524d\uff0c\u5f15\u51fa\u56fe\u8868\u3002 What is generally agreed is that ...","title":"It ... that ..."},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_9","text":"","title":"\u540c\u4f4d\u8bed\u548c\u540c\u4f4d\u8bed\u4ece\u53e5"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_10","text":"\u540d\u8bcd\u90fd\u53ef\u52a0\u5165\u540d\u8bcd\uff0c\u4f5c\u4e3a\u5176\u540c\u4f4d\u8bed Environmental pollution, a hot issue throughout the world, has become increasingly fearful in our contemporary society.","title":"\u540d\u8bcd\u505a\u540c\u4f4d\u8bed"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_11","text":"\u7b2c\u4e8c\u6bb5\uff0c\u539f\u56e0\u5206\u6790\u4f7f\u7528 The truth that + \u539f\u56e0\u53e5 + indicates that + \u7ed3\u8bba\u53e5 The truth that she wears a pair of big eves indicates that she looks like a beauty. The truth that a heaven of bright stars and pure moonlight fail to be detected by urban kids indicates that pollution becomes increasingly fearful/in our contemporary society.","title":"\u540c\u4f4d\u8bed\u4ece\u53e5"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_12","text":"\u540d\u8bcd\u90fd\u53ef\u4ee5\u52a0\u5b9a\u8bed\uff0c\u5728\u7b2c\u4e00\u6bb5\u63cf\u8ff0\u56fe\u753b\u65f6\u63a8\u8350\u90fd\u8981\u52a0\u5b9a\u8bed\u3002 An American girl with a smile on her face) is wearing Chinese costume which keeps popular in the south east of China. A boy young as well as energetic is rushing to the destination which becomes a new start. The eldest son looking rather cruel as well as ugly kicking out his father who trembles on the ground like a fallen leaf in autumn.","title":"\u5b9a\u8bed\u4ece\u53e5"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_13","text":"\u597d\u7684 as well as \u8fde\u63a5\u4e24\u4e2a\u5f62\u5bb9\u8bcd\uff1a cute, lovely; little graceful, elegant; young confident, energetic optimistic, active aggressive, ambitious persistent Who looks distinctly impressive to readers \u574f\uff0c as well as cruel, ugly negative, gloomy short-sighted, double-faced contemptible \u5351\u9119\u7684 hot-tempered \u813e\u6c14\u574f\u7684 terrible, disgusting disgraceful Who looks rather less impressive to readers","title":"\u4e07\u80fd\u5b9a\u8bed"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_14","text":"which \u5f15\u5bfc\u7684\u975e\u9650\u5236\u4fee\u9970\u524d\u9762\u7684\u4e00\u53e5\u8bdd\uff0c\u4e07\u80fd\u53e5\u578b\uff0c\u63a8\u8350\u7b2c\u4e8c\u6bb5\u67d0\u4e2a\u77ed\u539f\u56e0\u540e\u9762\u3002 \u597d\uff1a which has provoked widespread concern among people recently. \u574f\uff1a which would give rise to dreadful consequences in the near future. ### \u72b6\u8bed\u548c\u72b6\u8bed\u4ece\u53e5 \u4efb\u4f55\u4e00\u53e5\u8bdd\u7684\u65c1\u8fb9\u90fd\u53ef\u52a0\u72b6\u8bed\uff0c\u7075\u6d3b\uff0c\u63a8\u8350\u4e3b\u8c13\u95f4\u4f5c\u4e3a\u63d2\u5165\u8bed\uff0c\u63cf\u8ff0\u56fe\u753b\u56fe\u8868\u65f6\uff0c\u4e00\u5b9a\u8981\u52a0 \u526f\u8bcd\uff0c \u65f6\u95f4\uff0c \u5730\u70b9\uff0c \u6761\u4ef6\uff0cif \u76ee\u7684\uff0cto do \u8ba9\u6b65\uff0calthough \u4f34\u968f \u65b9\u5f0f\uff0cby the means of \u539f\u56e0\uff0cbecause \u7ed3\u679c\uff0cso ... that","title":"\u5b9a\u8bed\u4ece\u53e5\u6ee1\u5206\u8868\u8fbe"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_15","text":"\u56fe\u8868\u4e00\u5b9a\u7ed9\u51fa\u4e86 in the center of the vivid picture","title":"\u63cf\u8ff0\u56fe\u753b\u7684\u4e07\u80fd\u72b6\u8bed"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_16","text":"in light of the rapid advance of science and technology in the general routine of everyday living although many people fail to pay attention to the problem","title":"\u5206\u6790\u539f\u56e0\u7684\u4e07\u80fd\u72b6\u8bed"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_17","text":"","title":"\u72b6\u4ece\u7684\u6ee1\u5206\u8868\u8fbe"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#although","text":"\u53ef\u5199\u5728\u4efb\u4f55\u4e00\u53e5\u8bdd\u65c1\u8fb9\uff0c\u63a8\u8350\u7b2c\u4e8c\u6bb5\uff0c\u5206\u6790\u539f\u56e0 \u4e3a\u4ec0\u4e48\u8bf4\u76f2\u76ee\u8ffd\u661f\u4e0d\u597d\uff1f pursuing celebrities blindly proves to be a waste of time and energy of students on campus although their touching singing could comport the soul of audiences. \u4e3a\u4ec0\u4e48\u519c\u6c11\u6d8c\u5165\u57ce\u5e02\uff1f peasant-workers, in big cities, not only could find more job opportunities but also enable their offspring to enjoy equal education like their peers in urban areas although they might lead a tough life there, rising early and going to bed late","title":"although"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#so-that","text":"\u51fa\u73b0\u5f62\u5bb9\u8bcd\u548c\u526f\u8bcd\u53ef\u4ee5\u7528\uff0c\u7b2c\u4e00\u6bb5\u6700\u540e\uff0c\u7b2c\u4e09\u6bb5\u7b2c\u4e00\u53e5\uff0c\u4e2d\u5fc3\u53e5 that \u540e\u9700\u8981\u51c6\u786e perseverance is so vital that it is good time for youngsters to restrain themselves to insist their dreams. supporting the elderly is so crucial that time is supposed to be spared to accompany their parent. sth proves so significant / fearful that it should have been brought into the limelight under modern conditions.","title":"so ... that ..."},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_18","text":"\u63a8\u8350\u5199\u5728\u7b2c\u4e00\u6bb5\uff0c\u4e00\u5e45\u56fe\u4e00\u4e2a\u4e3b\u4f53\u4e24\u4e2a\u52a8\u4f5c\u65f6\u4f7f\u7528\uff0c An American girl young as well as elegant, smiling sweetly on her face, is wearing Chinese costume which is popular in the southeast of China. The hot pot not only delicious but also healthy, smoking in the center of the vivid caricature, is filled with cultures from China and foreign nations. sb(\u5b9a), doing sth1.(\u6b21\u8981)+\u5b9a/\u72b6, is doing sth (\u4e3b\u8981)+\u5b9a\u72b6","title":"\u5206\u8bcd\u4f5c\u72b6\u8bed\u653e\u5728\u4e3b\u8c13\u4e4b\u95f4\u4f5c\u4e3a\u63d2\u5165\u8bed\u4f7f\u7528"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_19","text":"","title":"\u7279\u6b8a\u7ed3\u6784"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_20","text":"","title":"\u53cc\u91cd\u5426\u5b9a"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#can-not-fail-to-do-sth","text":"\u5199\u5728\u7b2c\u4e09\u6bb5\uff0c\u5177\u4f53\u63aa\u65bd\uff0c\u8d8a\u5177\u4f53\u8d8a\u597d University students cannot fail to know S these offer clues for ther future careers.","title":"Can not fail to do sth"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_21","text":"","title":"\u4fee\u8f9e"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_22","text":"\u63a8\u8350\u7b2c\u4e00\u6bb5\u6700\u540e\uff0c\u7b2c\u4e09\u6bb5\u7b2c\u4e00\u53e5 sth is to \u4eba as sunshine in spring is to all creatures on the earth. as grave natural disasters are to powerless natives.","title":"\u6bd4\u55bb"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_23","text":"### \u5f3a\u8c03\u53e5\u578b","title":"\u6392\u6bd4"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#it-is-that","text":"\u6240\u6709\u90fd\u53ef\uff0c\u7b2c\u4e00\u6bb5\u6700\u540e\uff0c\u7b2c\u4e8c\uff0c\u7b2c\u4e09\u7b2c\u4e00\u53e5\uff0c\u4e3b\u8bed\u6700\u597d\u3002 It is numerous factors that there exist to account for the phenomenon.","title":"It is ... that ..."},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_24","text":"\u628a\u4e00\u53e5\u8bdd\u5199\u6210\u4e00\u822c\u7591\u95ee\u53e5\u7684\u5f62\u5f0f\uff0c\u63d0\u4e2a\u52a9\u52a8\u8bcd\u653e\u5728\u53e5\u9996","title":"\u5012\u88c5"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_25","text":"I am never a woman tough and outgoing. Never am I a ... He not only looks poor but also in fact is needy in his mind. Not only does he look poor ...","title":"\u5426\u5b9a\u8bcd\u653e\u5728\u53e5\u9996\u7528\u5012\u88c5"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#so-that_1","text":"\u628aso\u5f15\u5bfc\u7684\u90e8\u5206\u653e\u5728\u53e5\u9996\u7528\u5012\u88c5 sth keeps so significant/fearful that ... The issue should have been brought into the limelight under modern conditions. So significant/fearful does sth keep that the issue ...","title":"so ... that ..."},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_26","text":"","title":"\u865a\u62df\u8bed\u6c14"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#if","text":"\u63a8\u8350\u7b2c\u4e8c\u6bb5\uff0c\u539f\u56e0\u5206\u6790\uff0c\u53cd\u9762\u8bba\u8bc1 If parents failed to be respected by their sons or daughters they would be despised by their own children in the near future. If every university student were indulged in surfing the internet every day, he or she might be confronted with a dim and gloomy future.","title":"If"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#it-is-imperative-essential-urgent-that","text":"that\u540e\u52a8\u8bcd\u539f\u5f62\u8868\u865a\u62df\uff0c\u7b2c\u4e09\u6bb5\u5177\u4f53\u63aa\u65bd It is urgent that Chinese citizens/ undergraduates should ... It is crucial that parents/teachers in primary schools or univeristies / communities should educate / encourage their kids / undergraduates residents to do sth \u6216\u8005 not to do sth","title":"It is imperative / essential / urgent that"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_27","text":"\u7b2c\u4e8c\u6bb5","title":"\u6bb5\u843d"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_28","text":"\u7b2c\u4e00\u4e2a\u539f\u56e0\u5206\u6790\u65f6\u4f7f\u7528 \u4ec0\u4e48\u662f\u5b5d\u656c\u7236\u6bcd? Respecting parents is a Chinese traditional virtue which means that we buy gifts for them, we wash clothes for them and we cook delicious foods for them when they are in need of us \u4ec0\u4e48\u662f\u4e50\u89c2? Optimism is a positive attitude which means that one fails to be afraid of frustrations, one is brave to face any difficulties, and one smiles at people he meets even when he lives in the gutter currently sth1 is sth2 which means that ... sth2: a severe global issue a Chinese traditional virtue a social pervasive trend an active / negative mentality a hot social subject","title":"\u5b9a\u4e49\u548c\u89e3\u91ca"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_29","text":"In line with the proximate data by ... , an increasing number of \u4eba think that ... In light of the latest survey in a university, the majority of undergraduates tend to use mobile phones for reading books including professional and non-professional knowledge.","title":"\u7edf\u8ba1\u548c\u4e8b\u5b9e"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_30","text":"Once there seemed a writer who has gained great reputation in South Africa named Alan Paton stating that the more; as ... as ...; so ... that ...; if ; \u6bd4\u55bb","title":"\u5f15\u7528\u540d\u4eba\u540d\u8a00"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_31","text":"","title":"\u4e3e\u4f8b"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_32","text":"\u62bd\u8c61\u540d\u8bcd\u6216\u590d\u6570\u540d\u8bcd\uff0c\u53ef\u8ddf such as \u6765\u52a0\u5c0f\u4f8b\u5b50 I love reading masterpieces such as Gone with the Wind, Pride and Prejudice and Little Prince.","title":"\u4e3e\u5c0f\u4f8b\u5b50"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_33","text":"Although multitudes of cases can support my simple view, the following one is most favorable. I, the other day, had a high fever because it rained heavily last night. Unfortunately, no families or roommates took care of me during the holiday. At that moment, a dormitory assistant entered to give me some medicines. Then, I recovered the next day. So the story vividly tells us a truth that loving heart seems like a lamp which will become lighter in darkness. \u4e3a\u4ec0\u4e48\u5e74\u9f84\u5927\u6ee1\u610f\u5ea6\u9ad8? Although a sea of cases can clarify my perspective, the following one may be the most typical. I have an uncle who had worked as a teacher in a middle school. When he was about 40 years old, he appeared exceedingly upset almost every day, with a blank face in his class. However, now he has retired and gone to university for the elderly. Every time he comes to my house could find happiness in his eyes. What a pleasant matter. So the story tells us that the elder human beings become, the more delighted they lead their life.","title":"\u4e3e\u5927\u4f8b\u5b50"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_34","text":"\u5927\u5b66\u751f\u4f7f\u7528\u624b\u673a\u6253\u53d1\u65f6\u95f4\uff1f If more students spent more time on cellphones, killing time, their academic performance would be affected. The poorer their academic performance becomes, the more difficultly they will graduate from universities. \u4f53\u80b2\u953b\u70bc\u65b9\u5f0f\u8c03\u67e5\uff1f If more time were spared to engage in various sports activities such as jogging or just walking, their physical health would improve a lot. As we know, fitness is the foundation of any revolution. With good health, we could make greater contribution to our country.","title":"\u56e0\u679c\u8bba\u8bc1"},{"location":"%E8%8B%B1%E8%AF%AD/writing/#_35","text":"\u5982\u679c\u80fd\u7528\u4e2d\u6587\u60f3\u5230\u539f\u56e0\uff0c\u5c31\u7528\u4ee5\u4e0b\u6765\u5199\u539f\u56e0\uff1a the more not only although the truth if \u60f3\u4e0d\u5230\uff1a \u5b9a\u4e49 \u6570\u636e \u4e3e\u4f8b \u540d\u8a00 \u56e0\u679c \u63a8\u8350\u90092\u4e2a\u53e5\u578b\uff0c1\u4e2a\u8bba\u8bc1\u65b9\u5f0f","title":"\u603b\u7ed3"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/","text":"\u6df1\u5165\u7406\u89e3\u8ba1\u7b97\u673a\u7cfb\u7edf Chapter 2 2.1.3 Addressing and Byte Ordering Litle endian: machines choose to store the object in memory ordered from least significant byte to most. Except Sun is big-endian machine, other is litile endian. 2.2.6 Expanding the Bit Representation of a Number Expansion of an unsigned number by zero extension, a two's-complement number by sign extension. C standards require, first expand size, then change sign. For: short a; unsigned a == (unsigned)(int)a 2.4.2 IEEE Floating-Point Representation V = (-1)^s \\times M \\times 2^E V = (-1)^s \\times M \\times 2^E // s-exp-frac //Single precision k = 8, n = 23, Bias = 127 //Double precision k = 11, n = 52, Bias = 1023 Normalized Values e \\neq 0, \\neq 2^k - 1 M = 1 + f, E = e - Bias e \\neq 0, \\neq 2^k - 1 M = 1 + f, E = e - Bias Denormalized Values e = 0\\\\ M = f, E = 1 - Bias e = 0\\\\ M = f, E = 1 - Bias Special Values NaN: e = 1, f \\neq 0\\\\ \\infty: e =1, f = 1 NaN: e = 1, f \\neq 0\\\\ \\infty: e =1, f = 1 Chapter 3 3.4 Accessing Information Integer registers: Argument number Registers 1 %rdi, %edi, %di, %dil 2 %rsi, %esi, %si, %sil 3 %rdx, %edx, %dx, %dl 4 %rcx, %ecx, %cx, %cl 5 %r8, %r8d, %r8w, %r8b 6 %r9, %r9d, %r9w, %r9b %rax, %eax, %ax, %al -> Return value %rbp, %rbx, %r12-%r15 -> Callee saved %r10, %r11 -> Caller saved 3.4.2 Data Movement Instructions Description Instruction Move movb, movw, movl, movq, movabsq Move with zero extension movzbw, movzbl, movzbq, movzwl, movzwq Move with sign extension movsbw, movsbl, movsbq, movswl, movswq, movslq, cltq 3.4.4 Pushing and Popping Stack Data Description Instruction Push quad word pushq Pop quad word popq 3.5 Arithmetic and Logical Operations The operations are divided into four groups: load effective address, unary, binary, and shifts. Description Instruction Load effective address leq S, D Increment INC D Decrement DEC D Negate NEG D Complement NOT D Add ADD S, D Subtract SUB S, D Multiply IMUL S, D Exclusive-or XOR S, D Or OR S, D And AND S, D Left shift SAL k, D Left shift SHL k, D Arithmetic right shift SAR k, D Logical right shift SHR k, D 3.5.5 Special Arithmetic Operations Description Effect Instruction imulq S R[%rdx]:R[%rax] \u2190 S \u00d7 R[%rax] Signed full multiply mulq S R[%rdx]:R[%rax] \u2190 S \u00d7 R[%rax] Unsigned full multiply cqto R[%rdx]:R[%rax] \u2190 (R[%rax]) Convert to oct word SignExtend idivq S R[%rdx] \u2190 R[%rdx]:R[%rax] mod S; R[%rax] \u2190 R[%rdx]:R[%rax] \u00f7 S Signed divide dicq S R[%rdx] \u2190 R[%rdx]:R[%rax] mod S; R[%rax] \u2190 R[%rdx]:R[%rax] \u00f7 S Unsigned divide 3.6.1 Condition Codes CF: Carry flag. The most recent operation generated a carry out of the most significant bit. Used to detect overflow for unsigned operations. ZF: Zero flag. The most recent operation yielded zero. SF: Sign flag. The most recent operation yielded a negative value. OF: Overflow flag. The most recent operation caused a two's-complement overflow\u2014either negative or positive. Description Instruction Compare CMP Test TEST 3.6.2 Accessing the Condition Codes Description Instruction Equal / zero sete, setz Not equal / not zero setne, setnz Negative sets Nonnegative setns Greater (signed >) setg, setnle Greater or equal (signed >=) setge, setnl Less (signed <) setl, setnge Less or equal (signed <=) setle, setng Above (unsigned >) seta, setnbe Above or equal (unsigned >=) setae, setnb Below (unsigned <) setb, setnae Below or equal (unsigned <=) setbe, setna 3.6.3 Jump Instructions Description Instruction Direct jump jmp Label Indirect jump jmp *Operand Equal, ..., Below or equal j(same as set) Label 3.6.5 Implementing Conditional Branches with Conditional Control if (test-expr) then-statement else else-statement t = test-expr; if (!t) goto false; then-statement goto done; false: else-statement done: 3.6.6 Implementing Conditional Branches with Conditional Control Description Instruction Equal, ..., Below or equal cmov(same as set) Label v = then-expr; ve = else-expr; t = test-expr; if (!t) v = ve; 3.6.7 Loops Do-While Loops do body-statement while (test-expr); loop: body-statement t = test-expr; if (t) goto loop; While Loops while (test-expr) body-statement Jump to middle goto test; loop: body-statement test: t = test-expr; if (t) goto loop; Guarded do t = test-expr; if (!t) goto done; do body-statement while (test-expr); done: t = test-expr; if (!t) goto done; loop: body-statement t = test-expr; if (t) goto loop; done: 3.7.1 The Run-Time Stack | Stack \"botton\" | | ------------------------- | | Earlier frames | | ... | | Arugment n | | ... | | Arugment 7 | | Return address | | Saved registers | | Local variables | | Argument build areas | | **Stack \"top\"** | 3.7.2 Control Transfer Description Instruction Procedure call call Label Procedure call call *Operand Return from call ret 3.11 Floating-Point Code %ymm0, %xmm0 1st FP arg / Return value %ymm(1-7), %xmm(1-7) (2-8)th FP argument %ymm(8-15), %xmm(8-15) Caller saved 3.11.1 Floating-Point Movement and Conversion Operations Description Instruction Move single precision vmovss Move double precision vmovsd Move aligned, packed single precision vmovaps Move aligned, packed double precision vmovapd Convert with truncation single precision to integer vcvttss2si Convert with truncation double precision to integer vcvttsd2si Convert with truncation single precision to quad word integer vcvttss2siq Convert with truncation double precision to quad word integer vcvttsd2siq Convert integer to single precision vcvtsi2ss Convert integer to double precision vcvtsi2sd Convert quad word integer to single precision vcvtsi2ssq Convert quad word integer to double precision vcvtsi2sdq ;Conversion from single to double precision vunpcklps %xmm0, %xmm0, %xmm0 ;Replicate first vector element vcvtps2pd %xmm0, %xmm0 ;Convert two vector elements to double ;Conversion from double to single precision vmovddup %xmm0, %xmm0 ;Replicate first vector element vcvtpd2psx %xmm0, %xmm0 ;Convert two vector elements to single 3.11.3 Floating-Point Arithmetic Operations Description Instruction Floating-point add vaddss, vaddsd Floating-point subtract vsubss, vsubsd Floating-point multiply vmulss, vmulsd Floating-point divide vdivss, vdivsd Floating-point maximum vmaxss, vmaxsd Floating-point minimum vminss, vminsd Floating-point square root sqrtss, sqrtsd 3.11.5 Using Bitwise Operations in Floating-Point Code Description Instruction Bitwise EXCLUSIVE-OR vxorps, vxorpd Bitwise AND vandps, vandpd 3.11.6 Floating-Point Comparison Operations Description Instruction Compare single precision vucomiss Compare double precision vucomisd The floating-point comparison instructions set three condition codes: the zero flag ZF, the carry flag CF, and the parity flag PF.","title":"\u6df1\u5165\u7406\u89e3\u8ba1\u7b97\u673a\u7cfb\u7edf"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#_1","text":"","title":"\u6df1\u5165\u7406\u89e3\u8ba1\u7b97\u673a\u7cfb\u7edf"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#chapter-2","text":"","title":"Chapter 2"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#213-addressing-and-byte-ordering","text":"Litle endian: machines choose to store the object in memory ordered from least significant byte to most. Except Sun is big-endian machine, other is litile endian.","title":"2.1.3 Addressing and Byte Ordering"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#226-expanding-the-bit-representation-of-a-number","text":"Expansion of an unsigned number by zero extension, a two's-complement number by sign extension. C standards require, first expand size, then change sign. For: short a; unsigned a == (unsigned)(int)a","title":"2.2.6 Expanding the Bit Representation of a Number"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#242-ieee-floating-point-representation","text":"V = (-1)^s \\times M \\times 2^E V = (-1)^s \\times M \\times 2^E // s-exp-frac //Single precision k = 8, n = 23, Bias = 127 //Double precision k = 11, n = 52, Bias = 1023 Normalized Values e \\neq 0, \\neq 2^k - 1 M = 1 + f, E = e - Bias e \\neq 0, \\neq 2^k - 1 M = 1 + f, E = e - Bias Denormalized Values e = 0\\\\ M = f, E = 1 - Bias e = 0\\\\ M = f, E = 1 - Bias Special Values NaN: e = 1, f \\neq 0\\\\ \\infty: e =1, f = 1 NaN: e = 1, f \\neq 0\\\\ \\infty: e =1, f = 1","title":"2.4.2 IEEE Floating-Point Representation"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#chapter-3","text":"","title":"Chapter 3"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#34-accessing-information","text":"Integer registers: Argument number Registers 1 %rdi, %edi, %di, %dil 2 %rsi, %esi, %si, %sil 3 %rdx, %edx, %dx, %dl 4 %rcx, %ecx, %cx, %cl 5 %r8, %r8d, %r8w, %r8b 6 %r9, %r9d, %r9w, %r9b %rax, %eax, %ax, %al -> Return value %rbp, %rbx, %r12-%r15 -> Callee saved %r10, %r11 -> Caller saved","title":"3.4 Accessing Information"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#342-data-movement-instructions","text":"Description Instruction Move movb, movw, movl, movq, movabsq Move with zero extension movzbw, movzbl, movzbq, movzwl, movzwq Move with sign extension movsbw, movsbl, movsbq, movswl, movswq, movslq, cltq","title":"3.4.2 Data Movement Instructions"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#344-pushing-and-popping-stack-data","text":"Description Instruction Push quad word pushq Pop quad word popq","title":"3.4.4 Pushing and Popping Stack Data"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#35-arithmetic-and-logical-operations","text":"The operations are divided into four groups: load effective address, unary, binary, and shifts. Description Instruction Load effective address leq S, D Increment INC D Decrement DEC D Negate NEG D Complement NOT D Add ADD S, D Subtract SUB S, D Multiply IMUL S, D Exclusive-or XOR S, D Or OR S, D And AND S, D Left shift SAL k, D Left shift SHL k, D Arithmetic right shift SAR k, D Logical right shift SHR k, D","title":"3.5 Arithmetic and Logical Operations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#355-special-arithmetic-operations","text":"Description Effect Instruction imulq S R[%rdx]:R[%rax] \u2190 S \u00d7 R[%rax] Signed full multiply mulq S R[%rdx]:R[%rax] \u2190 S \u00d7 R[%rax] Unsigned full multiply cqto R[%rdx]:R[%rax] \u2190 (R[%rax]) Convert to oct word SignExtend idivq S R[%rdx] \u2190 R[%rdx]:R[%rax] mod S; R[%rax] \u2190 R[%rdx]:R[%rax] \u00f7 S Signed divide dicq S R[%rdx] \u2190 R[%rdx]:R[%rax] mod S; R[%rax] \u2190 R[%rdx]:R[%rax] \u00f7 S Unsigned divide","title":"3.5.5 Special Arithmetic Operations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#361-condition-codes","text":"CF: Carry flag. The most recent operation generated a carry out of the most significant bit. Used to detect overflow for unsigned operations. ZF: Zero flag. The most recent operation yielded zero. SF: Sign flag. The most recent operation yielded a negative value. OF: Overflow flag. The most recent operation caused a two's-complement overflow\u2014either negative or positive. Description Instruction Compare CMP Test TEST","title":"3.6.1 Condition Codes"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#362-accessing-the-condition-codes","text":"Description Instruction Equal / zero sete, setz Not equal / not zero setne, setnz Negative sets Nonnegative setns Greater (signed >) setg, setnle Greater or equal (signed >=) setge, setnl Less (signed <) setl, setnge Less or equal (signed <=) setle, setng Above (unsigned >) seta, setnbe Above or equal (unsigned >=) setae, setnb Below (unsigned <) setb, setnae Below or equal (unsigned <=) setbe, setna","title":"3.6.2 Accessing the Condition Codes"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#363-jump-instructions","text":"Description Instruction Direct jump jmp Label Indirect jump jmp *Operand Equal, ..., Below or equal j(same as set) Label","title":"3.6.3 Jump Instructions"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#365-implementing-conditional-branches-with-conditional-control","text":"if (test-expr) then-statement else else-statement t = test-expr; if (!t) goto false; then-statement goto done; false: else-statement done:","title":"3.6.5 Implementing Conditional Branches with Conditional Control"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#366-implementing-conditional-branches-with-conditional-control","text":"Description Instruction Equal, ..., Below or equal cmov(same as set) Label v = then-expr; ve = else-expr; t = test-expr; if (!t) v = ve;","title":"3.6.6 Implementing Conditional Branches with Conditional Control"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#367-loops","text":"Do-While Loops do body-statement while (test-expr); loop: body-statement t = test-expr; if (t) goto loop; While Loops while (test-expr) body-statement Jump to middle goto test; loop: body-statement test: t = test-expr; if (t) goto loop; Guarded do t = test-expr; if (!t) goto done; do body-statement while (test-expr); done: t = test-expr; if (!t) goto done; loop: body-statement t = test-expr; if (t) goto loop; done:","title":"3.6.7 Loops"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#371-the-run-time-stack","text":"| Stack \"botton\" | | ------------------------- | | Earlier frames | | ... | | Arugment n | | ... | | Arugment 7 | | Return address | | Saved registers | | Local variables | | Argument build areas | | **Stack \"top\"** |","title":"3.7.1 The Run-Time Stack"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#372-control-transfer","text":"Description Instruction Procedure call call Label Procedure call call *Operand Return from call ret","title":"3.7.2 Control Transfer"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#311-floating-point-code","text":"%ymm0, %xmm0 1st FP arg / Return value %ymm(1-7), %xmm(1-7) (2-8)th FP argument %ymm(8-15), %xmm(8-15) Caller saved","title":"3.11 Floating-Point Code"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#3111-floating-point-movement-and-conversion-operations","text":"Description Instruction Move single precision vmovss Move double precision vmovsd Move aligned, packed single precision vmovaps Move aligned, packed double precision vmovapd Convert with truncation single precision to integer vcvttss2si Convert with truncation double precision to integer vcvttsd2si Convert with truncation single precision to quad word integer vcvttss2siq Convert with truncation double precision to quad word integer vcvttsd2siq Convert integer to single precision vcvtsi2ss Convert integer to double precision vcvtsi2sd Convert quad word integer to single precision vcvtsi2ssq Convert quad word integer to double precision vcvtsi2sdq ;Conversion from single to double precision vunpcklps %xmm0, %xmm0, %xmm0 ;Replicate first vector element vcvtps2pd %xmm0, %xmm0 ;Convert two vector elements to double ;Conversion from double to single precision vmovddup %xmm0, %xmm0 ;Replicate first vector element vcvtpd2psx %xmm0, %xmm0 ;Convert two vector elements to single","title":"3.11.1 Floating-Point Movement and Conversion Operations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#3113-floating-point-arithmetic-operations","text":"Description Instruction Floating-point add vaddss, vaddsd Floating-point subtract vsubss, vsubsd Floating-point multiply vmulss, vmulsd Floating-point divide vdivss, vdivsd Floating-point maximum vmaxss, vmaxsd Floating-point minimum vminss, vminsd Floating-point square root sqrtss, sqrtsd","title":"3.11.3 Floating-Point Arithmetic Operations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#3115-using-bitwise-operations-in-floating-point-code","text":"Description Instruction Bitwise EXCLUSIVE-OR vxorps, vxorpd Bitwise AND vandps, vandpd","title":"3.11.5 Using Bitwise Operations in Floating-Point Code"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/CSAPP/#3116-floating-point-comparison-operations","text":"Description Instruction Compare single precision vucomiss Compare double precision vucomisd The floating-point comparison instructions set three condition codes: the zero flag ZF, the carry flag CF, and the parity flag PF.","title":"3.11.6 Floating-Point Comparison Operations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/C_Primer/","text":"C++ Primer 1. Start \u8bfb\u4e00\u884c\uff1a // 1 string s; getline(cin, s); // Defined in <string> // 2 char str[100]; cin.getline(str, 100); // 3 gets(str); scanf() \u4e2d\u7684 \"%c\" \u548c char c = getchar() \u4e00\u6837\u4f1a\u5438\u6536\u7a7a\u683c\u3002 scanf() \u8fd4\u56de\u8bfb\u5165\u6210\u529f\u7684\u4e2a\u6570\uff0c\u5931\u8d25\u65f6\u8fd4\u56de-1\uff0c\u4e14 EOF \u4e3a-1\u3002 << , >> \u90fd\u662f\u8fd4\u56de\u5176\u5de6\u4fa7\u7684\u8fd0\u7b97\u5bf9\u8c61\u3002 \u591a\u70b9\u6d4b\u8bd5\u65f6\uff0c\u8f93\u5165\uff1a while (scanf() != EOF) { // Statement } while (scanf() != EOF, /*Condition*/) { // Statement } int value; while (cin >> value) { // \u8bfb\u5230`EOF`\u6216\u975e\u6574\u6570\u65f6\uff0c\u8fd4\u56de\u65e0\u6548\u7684`istream` // Statement } 2. Variables and Foundation Type C++11\uff1a\u7a7a\u6307\u9488 nullptr Separation Compilation\uff1a 1. \u53ea\u58f0\u660e\u4e0d\u5b9a\u4e49\uff1a extern int i; 2. \u53ef\u4ee5\u58f0\u660e\u591a\u6b21\uff0c\u4f46\u5b9a\u4e49\u53ea\u80fd\u6709\u4e00\u6b21 \u7528\u672f\u8bed\u201c\u5f15\u7528\u201d\u662f\u6307\u201c\u5de6\u503c\u5f15\u7528\u201d const \u4fee\u9970\uff1a\u5728\u7f16\u8bd1\u6216\u8fd0\u884c\u65f6\u521d\u59cb\u5316 constexpr \uff1a\u5728\u7f16\u8bd1\u65f6\u521d\u59cb\u5316\uff0c\u5fc5\u987b\u4f7f\u7528\u5b57\u9762\u503c\u7c7b\u578b\u521d\u59cb\u5316\uff0c\u5f15\u7528\u548c\u6307\u9488\u65f6\uff0c\u4f46\u53ea\u80fd\u7528\u4e8e\u56fa\u5b9a\u5730\u5740\u7684\u5bf9\u8c61 const \u4fee\u9970\u7684\u53d8\u91cf\u9ed8\u8ba4\u53ea\u5728\u6587\u4ef6\u5185\u751f\u6548\uff0c\u82e5\u8981\u5171\u4eab\uff0c\u65e0\u8bba\u662f\u58f0\u660e\u8fd8\u662f\u5b9a\u4e49\u90fd\u9700\u8981\u52a0 extern //file.h extern const i = fcn(); // Defination //file.c extern const i; // Declaration :: \u4e3a\u4f5c\u7528\u57df\u64cd\u4f5c\u7b26 // \u663e\u793a\u4f7f\u7528\u5168\u5c40\u4f5c\u7528\u57df int i = 1; int main() { int i = 2; std::cout << ::i << std::endl; return 0; } C++11\u4e2d\u65e0\u8bba\u662f\u5bf9\u8c61\u8fd8\u662f\u5185\u7f6e\u7c7b\u578b\u90fd\u53ef\u4ee5\u4f7f\u7528\u5217\u8868\u521d\u59cb\u5316\uff0c\u7279\u70b9\u662f\u5b58\u5728\u6570\u636e\u4e22\u5931\u98ce\u9669\u65f6\u4f1a\u62a5\u9519\uff1a int i{0}; int i = {0}; // \u62a5\u9519 int i = {1.2}; \u5728\u51fd\u6570\u4f53\u5185\u90e8\u7684\u5185\u7f6e\u7c7b\u578b\u4e0d\u4f1a\u88ab\u9ed8\u8ba4\u521d\u59cb\u5316 Reference ot const: \u90fd\u4e0d\u80fd\u6539\uff0c\u53ef\u4ee5\u7ed1\u5b9a\u975e\u5e38\u91cf\uff0c\u5b57\u9762\u503c\uff0c\u8868\u8fbe\u5f0f\uff0c\u5176\u5b9e\u8d28\u662f\u518d\u5b9a\u4e49\u4e86\u4e2a\u53d8\u91cf int i = 0; // Const pointer int *const p = &i; // Pointer to const const int *p = &i; \u666e\u901a\u7c7b\u578b\u53ea\u6709top-level const\uff0c\u5f15\u7528\u53ea\u6709low-level const\uff0c\u6307\u9488\u90fd\u53ef\u4ee5\uff0ctop-level const \u65f6\u62f7\u8d1d\u4e0d\u5f71\u54cd\uff0c\u800clow-level const \u62f7\u8d1d\u65f6\u4e0d\u80fd\u662f\u5e38\u91cf\u8f6c\u975e\u5e38\u91cf constexpr \u53ea\u4fee\u9970\u9876\u5c42\u5bf9\u8c61 Alias declaration in C++11: using LL = long long \u522b\u540d\u4e0d\u80fd\u7b80\u5355\u7684\u7406\u89e3\u4e3a\u76f4\u63a5\u66ff\u6362\uff1a using pstring = char *; const pstring p; // `char`\u7c7b\u578b\u7684\u5e38\u91cf\u6307\u9488 const char *p; // \u6307\u5411`char`\u5e38\u91cf\u7684\u6307\u9488 auto \u4f1a\u5ffd\u7565 const \uff0c\u82e5\u8981\u63a8\u65ad\u4e3a const \u7c7b\u578b\uff0c\u8981\u624b\u52a8\u52a0\u4e0a \u5f53\u8868\u8fbe\u5f0f\u8fd4\u56de\u5de6\u503c\u65f6\uff0c decltype(\\*expersion*\\) \u8fd4\u56de\u8be5\u7c7b\u578b\u7684\u5f15\u7528 3. String, Vector and Array \u4e0b\u6807\u7c7b\u578b string<T>::size_type \uff0c vector<T>::size_type \u662f\u65e0\u7b26\u53f7\u6574\u6570 iterator \u8fd0\u7b97\u8fd4\u56de difference_type \u4e3a\u5e26\u7b26\u53f7\u6574\u6570 \u5411\u8fed\u4ee3\u5668\u6240\u5c5e\u5bb9\u5668\u6dfb\u52a0\u5143\u7d20\uff0c\u4f1a\u4f7f\u8fed\u4ee3\u5668\u5931\u6548 \u7406\u89e3\u6570\u7ec4\u4fee\u9970\u7b26\u65f6\uff0c\u4ece\u5185\u5230\u5916\uff0c\u4ece\u5de6\u5230\u53f3\uff0c\u5982 int *(&a)[10] = p; \uff0c\u662f\u4e00\u4e2a\u542b10 int \u6307\u9488\u7684\u6570\u7ec4\u7684\u5f15\u7528 \u6570\u7ec4\u5927\u5c0f\u7c7b\u578b\u4e3a size_t \uff0c\u4e0b\u6807\u8fd0\u7b97\u53ef\u4ee5\u5904\u7406\u8d1f\u503c\u4e3a ptrdiff_t \u7c7b\u578b \u6709 begin \u548c end \u51fd\u6570 auto \u63a8\u65ad\u6570\u7ec4\u4f1a\u81ea\u52a8\u8f6c\u5316\u4e3a\u8be5\u6570\u7ec4\u7684\u5934\u6307\u9488\uff0c\u800c decltype \u4f1a\u628a\u5927\u5c0f\u4e00\u8d77\u8868\u793a\u51fa\u6765 int a[] = {1, 2}; auto a1{a}; // a1\u4e3a\u6307\u9488 delctype(a) a2 = {1, 2}; //a2\u4e3a int[2] \u5bf9\u591a\u7ef4\u6570\u7ec4\u4f7f\u7528\u8303\u56f4 for \u65f6\uff0c\u9664\u6700\u5185\u5c42\u4ee5\u5916 auto \u90fd\u8981\u52a0\u4e0a & \uff0c\u9632\u6b62\u81ea\u52a8\u8f6c\u5316\u4e3a\u6307\u9488 4. Expersion \u4e00\u4e2a\u5bf9\u8c61\u88ab\u5f53\u4f5c\u5de6\u503c\u65f6\u7528\u7684\u4f7f\u5176\u8eab\u4efd\uff08\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\uff09\uff0c\u5f53\u4f5c\u53f3\u503c\u662f\u7528\u7684\u662f\u503c\uff08\u5185\u5bb9\uff09 \uff08\u9664\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff09\uff0c\u5de6\u503c\u53ef\u4ee5\u5f53\u4f5c\u53f3\u503c\uff0c\u4f46\u53f3\u503c\u4e0d\u80fd\u5f53\u4f5c\u5de6\u503c","title":"C++ Primer"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/C_Primer/#c-primer","text":"","title":"C++ Primer"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/C_Primer/#1-start","text":"\u8bfb\u4e00\u884c\uff1a // 1 string s; getline(cin, s); // Defined in <string> // 2 char str[100]; cin.getline(str, 100); // 3 gets(str); scanf() \u4e2d\u7684 \"%c\" \u548c char c = getchar() \u4e00\u6837\u4f1a\u5438\u6536\u7a7a\u683c\u3002 scanf() \u8fd4\u56de\u8bfb\u5165\u6210\u529f\u7684\u4e2a\u6570\uff0c\u5931\u8d25\u65f6\u8fd4\u56de-1\uff0c\u4e14 EOF \u4e3a-1\u3002 << , >> \u90fd\u662f\u8fd4\u56de\u5176\u5de6\u4fa7\u7684\u8fd0\u7b97\u5bf9\u8c61\u3002 \u591a\u70b9\u6d4b\u8bd5\u65f6\uff0c\u8f93\u5165\uff1a while (scanf() != EOF) { // Statement } while (scanf() != EOF, /*Condition*/) { // Statement } int value; while (cin >> value) { // \u8bfb\u5230`EOF`\u6216\u975e\u6574\u6570\u65f6\uff0c\u8fd4\u56de\u65e0\u6548\u7684`istream` // Statement }","title":"1. Start"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/C_Primer/#2-variables-and-foundation-type","text":"C++11\uff1a\u7a7a\u6307\u9488 nullptr Separation Compilation\uff1a 1. \u53ea\u58f0\u660e\u4e0d\u5b9a\u4e49\uff1a extern int i; 2. \u53ef\u4ee5\u58f0\u660e\u591a\u6b21\uff0c\u4f46\u5b9a\u4e49\u53ea\u80fd\u6709\u4e00\u6b21 \u7528\u672f\u8bed\u201c\u5f15\u7528\u201d\u662f\u6307\u201c\u5de6\u503c\u5f15\u7528\u201d const \u4fee\u9970\uff1a\u5728\u7f16\u8bd1\u6216\u8fd0\u884c\u65f6\u521d\u59cb\u5316 constexpr \uff1a\u5728\u7f16\u8bd1\u65f6\u521d\u59cb\u5316\uff0c\u5fc5\u987b\u4f7f\u7528\u5b57\u9762\u503c\u7c7b\u578b\u521d\u59cb\u5316\uff0c\u5f15\u7528\u548c\u6307\u9488\u65f6\uff0c\u4f46\u53ea\u80fd\u7528\u4e8e\u56fa\u5b9a\u5730\u5740\u7684\u5bf9\u8c61 const \u4fee\u9970\u7684\u53d8\u91cf\u9ed8\u8ba4\u53ea\u5728\u6587\u4ef6\u5185\u751f\u6548\uff0c\u82e5\u8981\u5171\u4eab\uff0c\u65e0\u8bba\u662f\u58f0\u660e\u8fd8\u662f\u5b9a\u4e49\u90fd\u9700\u8981\u52a0 extern //file.h extern const i = fcn(); // Defination //file.c extern const i; // Declaration :: \u4e3a\u4f5c\u7528\u57df\u64cd\u4f5c\u7b26 // \u663e\u793a\u4f7f\u7528\u5168\u5c40\u4f5c\u7528\u57df int i = 1; int main() { int i = 2; std::cout << ::i << std::endl; return 0; } C++11\u4e2d\u65e0\u8bba\u662f\u5bf9\u8c61\u8fd8\u662f\u5185\u7f6e\u7c7b\u578b\u90fd\u53ef\u4ee5\u4f7f\u7528\u5217\u8868\u521d\u59cb\u5316\uff0c\u7279\u70b9\u662f\u5b58\u5728\u6570\u636e\u4e22\u5931\u98ce\u9669\u65f6\u4f1a\u62a5\u9519\uff1a int i{0}; int i = {0}; // \u62a5\u9519 int i = {1.2}; \u5728\u51fd\u6570\u4f53\u5185\u90e8\u7684\u5185\u7f6e\u7c7b\u578b\u4e0d\u4f1a\u88ab\u9ed8\u8ba4\u521d\u59cb\u5316 Reference ot const: \u90fd\u4e0d\u80fd\u6539\uff0c\u53ef\u4ee5\u7ed1\u5b9a\u975e\u5e38\u91cf\uff0c\u5b57\u9762\u503c\uff0c\u8868\u8fbe\u5f0f\uff0c\u5176\u5b9e\u8d28\u662f\u518d\u5b9a\u4e49\u4e86\u4e2a\u53d8\u91cf int i = 0; // Const pointer int *const p = &i; // Pointer to const const int *p = &i; \u666e\u901a\u7c7b\u578b\u53ea\u6709top-level const\uff0c\u5f15\u7528\u53ea\u6709low-level const\uff0c\u6307\u9488\u90fd\u53ef\u4ee5\uff0ctop-level const \u65f6\u62f7\u8d1d\u4e0d\u5f71\u54cd\uff0c\u800clow-level const \u62f7\u8d1d\u65f6\u4e0d\u80fd\u662f\u5e38\u91cf\u8f6c\u975e\u5e38\u91cf constexpr \u53ea\u4fee\u9970\u9876\u5c42\u5bf9\u8c61 Alias declaration in C++11: using LL = long long \u522b\u540d\u4e0d\u80fd\u7b80\u5355\u7684\u7406\u89e3\u4e3a\u76f4\u63a5\u66ff\u6362\uff1a using pstring = char *; const pstring p; // `char`\u7c7b\u578b\u7684\u5e38\u91cf\u6307\u9488 const char *p; // \u6307\u5411`char`\u5e38\u91cf\u7684\u6307\u9488 auto \u4f1a\u5ffd\u7565 const \uff0c\u82e5\u8981\u63a8\u65ad\u4e3a const \u7c7b\u578b\uff0c\u8981\u624b\u52a8\u52a0\u4e0a \u5f53\u8868\u8fbe\u5f0f\u8fd4\u56de\u5de6\u503c\u65f6\uff0c decltype(\\*expersion*\\) \u8fd4\u56de\u8be5\u7c7b\u578b\u7684\u5f15\u7528","title":"2. Variables and Foundation Type"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/C_Primer/#3-string-vector-and-array","text":"\u4e0b\u6807\u7c7b\u578b string<T>::size_type \uff0c vector<T>::size_type \u662f\u65e0\u7b26\u53f7\u6574\u6570 iterator \u8fd0\u7b97\u8fd4\u56de difference_type \u4e3a\u5e26\u7b26\u53f7\u6574\u6570 \u5411\u8fed\u4ee3\u5668\u6240\u5c5e\u5bb9\u5668\u6dfb\u52a0\u5143\u7d20\uff0c\u4f1a\u4f7f\u8fed\u4ee3\u5668\u5931\u6548 \u7406\u89e3\u6570\u7ec4\u4fee\u9970\u7b26\u65f6\uff0c\u4ece\u5185\u5230\u5916\uff0c\u4ece\u5de6\u5230\u53f3\uff0c\u5982 int *(&a)[10] = p; \uff0c\u662f\u4e00\u4e2a\u542b10 int \u6307\u9488\u7684\u6570\u7ec4\u7684\u5f15\u7528 \u6570\u7ec4\u5927\u5c0f\u7c7b\u578b\u4e3a size_t \uff0c\u4e0b\u6807\u8fd0\u7b97\u53ef\u4ee5\u5904\u7406\u8d1f\u503c\u4e3a ptrdiff_t \u7c7b\u578b \u6709 begin \u548c end \u51fd\u6570 auto \u63a8\u65ad\u6570\u7ec4\u4f1a\u81ea\u52a8\u8f6c\u5316\u4e3a\u8be5\u6570\u7ec4\u7684\u5934\u6307\u9488\uff0c\u800c decltype \u4f1a\u628a\u5927\u5c0f\u4e00\u8d77\u8868\u793a\u51fa\u6765 int a[] = {1, 2}; auto a1{a}; // a1\u4e3a\u6307\u9488 delctype(a) a2 = {1, 2}; //a2\u4e3a int[2] \u5bf9\u591a\u7ef4\u6570\u7ec4\u4f7f\u7528\u8303\u56f4 for \u65f6\uff0c\u9664\u6700\u5185\u5c42\u4ee5\u5916 auto \u90fd\u8981\u52a0\u4e0a & \uff0c\u9632\u6b62\u81ea\u52a8\u8f6c\u5316\u4e3a\u6307\u9488","title":"3. String, Vector and Array"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/C_Primer/#4-expersion","text":"\u4e00\u4e2a\u5bf9\u8c61\u88ab\u5f53\u4f5c\u5de6\u503c\u65f6\u7528\u7684\u4f7f\u5176\u8eab\u4efd\uff08\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\uff09\uff0c\u5f53\u4f5c\u53f3\u503c\u662f\u7528\u7684\u662f\u503c\uff08\u5185\u5bb9\uff09 \uff08\u9664\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff09\uff0c\u5de6\u503c\u53ef\u4ee5\u5f53\u4f5c\u53f3\u503c\uff0c\u4f46\u53f3\u503c\u4e0d\u80fd\u5f53\u4f5c\u5de6\u503c","title":"4. Expersion"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/","text":"\u79bb\u6563\u6570\u5b66 Methods of Proving Theorems If we want to prove $q$ is true ,there are three methods: Direct Proofs p\\land (p\\to q) \\text{\\ is true} Proof by Contradiction \\lnot q\\to (\\lnot r\\land r)\\text{\\ is true} Proof by Contrposition p\\land (\\lnot q\\to \\lnot p)\\text{\\ is true} To be honest ,this is a specific case base on contradiction ,which p is subsititude for r ,generally , p is told in question stem ,and r is not. Propositional logic Proposition: A declarative sentence that is either true or false, but not both. Statements that can not be decided is not a proposition. Propositional/Statement variable: p, q, r, s Truth value: T, F Propositional Calculus/Logic: The area of logic that deals with propositions. Compound proposition: Proposition formed from existing propositions using operators. Operator: Not \u00acp e.g. It is not the case that \u2026 Conjunction/And p \u2227 q e.g. \u2026 and/but \u2026 Disjunction/Or p \u2228 q e.g. \u2026 or \u2026 Exclusive or p \u2295 q Conditional Statement / Implication p \u2192 q if p, then q p only if q p implies q p is a sufficient condition for q q is a necessary condition for p q follows from / if / when / whenever p q unless \u00acp False only when p is true, but q is false; when p is false, p \u2192 q is defined to be true. Converse p \u2192 q to q \u2192 p Inverse p \u2192 q to \u00acp \u2192 \u00acq Contrapositive Converse and inverse p \u2192 q to \u00acq \u2192 \u00acp Biconditional statement p \u2194 q p if and only if q p is necessary and sufficient for q if p then q, and conversely p iff q p \u2194 q == (p \u2192 q) \u2227 (q \u2192 p), only true when p and q have the same value Operator precedence: (), \u00ac, \u2227 \u2228, \u2192, \u2194 Bit: 1 for T, 0 for F. Bit string: a sequence of zero or more bits. Bit operation: Bitwise AND, Bitwise OR, Bitwise XOR Applications of propositional logic Translating English sentences: to logical proposition. Consistent system specification: no conflicting requirements; a set of value to satisfy all the statements translated; does not necessarily has a real usage. Propositional equivalences Classification of compound proposition: Tautology Always true Contradiction Always false Contingency Neither a tautology nor a contradiction Logical equivalence: Compound propositions that have the same truth values in all possible cases: p \u2194 q is a tautology p \u2261 q, p \u21d4 q Logical Equivalences: Equivalence Name p \u2227 T \u2261 p Identity laws p \u2228 F \u2261 p p \u2228 T \u2261 T Domination laws p \u2227 F \u2261 F p \u2228 p \u2261 p Idempotent laws p \u2227 p \u2261 p \u00ac(\u00acp) \u2261 p Double negation law p \u2228 q \u2261 q \u2228 p Commutative laws p \u2227 q \u2261 q \u2227 p (p \u2228 q) \u2228 r \u2261 p \u2228 (q \u2228 r) Associative laws (p \u2227 q) \u2227 r \u2261 p \u2227 (q \u2227 r) p \u2228 (q \u2227 r) \u2261 (p \u2228 q) \u2227 (p \u2228 r) Distributive laws p \u2227 (q \u2228 r) \u2261 (p \u2227 q) \u2228 (p \u2227 r) \u00ac(p \u2227 q) \u2261 \u00acp \u2228 \u00acq De Morgan\u2019s laws \u00ac(p \u2228 q) \u2261 \u00acp \u2227 \u00acq p \u2228 (p \u2227 q) \u2261 p Absorption laws p \u2227 (p \u2228 q) \u2261 p p \u2228 \u00acp \u2261 T Negation laws p \u2227 \u00acp \u2261 F p \u2192 q \u2261 \u00acp \u2228 q p \u2194 q \u2261 (p \u2227 q) \u2228 (\u00acp \u2227 \u00acq) Mine: \u00ac(p \u2192 q) \u2261 p \u2227 \u00acq Mine: p \u2228 (\u00acp \u2227 q) \u2261 p \u2228 q See Section 3.1 No.30 Prove Logical Equivalence: Truth table or developing a series of logical equivalences. Prove Not Logically Equivalent: (Simplify first) and find a counterexample. Propositional Satisfiability: An assignment of truth values that makes it true. Truth table, or whether its negation is a tautology. (or say whether itself is a contradiction?) Predicates and Qualifiers Predicate: Statements involving variables, the variables are called subjects, the other is called a predicate. The statement of P(x) is also called the value of Propositional function P at x. Precondition: Conditions for valid input. Postcondition: Conditions for correct output. Qualification: Express the extent to which a predicate is true over a range of elements. ((Domain / universe) of discourse) / domain: A predicate is true for a variable in a particular domain. Predicate calculus: The area of logic that deals with predicates and quantifiers. Universal qualification: For every element. \u2200x P(x): For all / every x P (x). An element for which P(x) is false is called a counterexample of \u2200x P(x). Existential qualification: For one or more element. \u2203x P(x): There exists an element x in the domain such that P(x). Uniqueness qualification: \u2203!x P(x) or \u2203_1 x P(x) There exists a unique x such that P (x) or There is one and only one x such that P (x). Abbreviated qualifier notation: Use condition for domain. Or use \u2200x P(x) \u2192 Q(x) for using P(x) as condition for domain. Quantifiers (\u2200 and \u2203) have higher precedence than all logical operators from propositional calculus. i.e. They absorb less. Occurrence of variable is bound: Quantifier is used on the variable. All the variables that occur in a propositional function must be bound or set equal to a particular value to turn it into a proposition. Scope of quantifier: The part of a logical expression to which a quantifier is applied. The same letter is often used to represent variables bound by different quantifiers with scopes that do not overlap. Statements involving predicates and quantifiers are logically equivalent: If and only if they have the same truth value no matter which predicates are substituted into these statements and which domain of discourse is used for the variables in these propositional functions. S \u2261 T \u2200x (P(x) \u2227 Q(x)) \u2261 \u2200x P(x) \u2227 \u2200x Q(x) \u2203x (P(x) \u2228 Q(x)) \u2261 \u2203x P(x) \u2228 \u2203x Q(x) De Morgan\u2019s laws for quantifiers: \u00ac\u2200x P(x) \u2261 \u2203x \u00acP(x) \u00ac\u2203x Q(x) \u2261 \u2200x \u00acQ(x) Translating from English into Logical Expression: \u2026 Using Quantifiers in System Specifications: \u2026 Nested Qualifiers Nested quantifiers: One quantifier is within the scope of another. Understanding Statements Involving Nested Quantifiers: \u2026 The order of the quantifiers is important, unless all the quantifiers are universal quantifiers or all are existential quantifiers. Statement Condition for true \u2200x\u2200y P(x, y) P (x, y) is true for every pair x, y. \u2200y\u2200x P(x, y) \u2200x\u2203y P(x, y) For every x there is a y for which P (x, y) is true. \u2203x\u2200y P(x, y) There is an x for which P (x, y) is true for every y. \u2203x\u2203y P(x, y) There is a pair x, y for which P (x, y) is true. \u2203y\u2203x P (x, y) Translating: \u2026 Negation: Recursively\u2026 Normal forms (Disjunctive / conjunctive) clause: Disjunctions / Conjunctions with literals (optionally negated) as its disjuncts / conjuncts. Disjunctive / Conjunctive normal form (DNF / CNF): A disjunction / conjunction with conjunctive / disjunctive clauses as its disjuncts / conjuncts. Full disjunctive / conjuctive normal form: Each of its variables appears exactly once in every clause. Obtained by adding \u2227 (\u00acP(x) \u2228 P(x)) to its conjuction disjuncts / \u2228 (\u00acP(x) \u2227 P(x)) to its disjunction conjuncts. Prenex normal form: Qualifier\u2026Predicate_without_quaulifier Inference Argument: a sequence of propositions. Premise: All but the final proposition in the argument. Conclusion: The final proposition in the argument. Valid argument: An argument is valid if the truth of all its premises implies that the conclusion is true. Fallacy: Common forms of incorrect reasoning which lead to invalid arguments. Argument form: A sequence of compound propositions involving propositional variables. Valid argument form: An argument form is valid no matter which particular propositions are substituted for the propositional variables in its premises, the conclusion is true if the premises are all true. The key to showing that an argument in propositional logic is valid is to show that its argument form is valid. Using truth table to show that an argument form is valid is tedious. Modus ponens (Mode that affirms) / the law of detachment: (p \u2227 (p \u2192 q)) \u2192 q Argument can be valid, but if any of its premise is false, its conclusion is false. Tautology Name (p \u2227 (p \u2192 q)) \u2192 q Modus ponens (\u00acq \u2227 (p \u2192 q)) \u2192 \u00acp Modus tollens ((p \u2192 q) \u2227 (q \u2192 r)) \u2192 (p \u2192 r) Hypothetical syllogism ((p \u2228 q) \u2227 \u00acp) \u2192 q Disjunctive syllogism p \u2192 (p \u2228 q) Addition (p \u2227 q) \u2192 p Simplification ((p) \u2227 (q)) \u2192 (p \u2227 q) Conjunction ((p \u2228 q) \u2227 (\u00acp \u2228 r)) \u2192 (q \u2228 r) Resolution p \u2227 q \u2192 (r \u2192 s) \u2261 p \u2227 q \u2227 r \u2192 s, r is additional premise. Resolution is commonly used: ((p \u2228 q) \u2227 (\u00acp \u2228 r)) \u2192 (q \u2228 r) Also rewrite premises into separate clauses can help. Fallacy Affirming the conclusion ((p \u2192 q) \u2227 q) \u2192 p is not a tautology. Denying the hypothesis ((p \u2192 q) \u2227 \u00acp) \u2192 \u00acq is not tautology. Begging the question (Circular reasoning) one or more steps of a proof are based on the truth of the statement being proved. Rules of inference for quantified statements Rule of Inference Name \u2200x P(x) \u2234 P(c) Universal instantiation P(c) for an arbitrary c \u2234 \u2200x P(x) Universal generalization \u2203x P(x) \u2234 P(c) for some element c Existential instantiation P(c) for some element c \u2234 \u2203x P(x) Existential generalization Universal modus ponens: \u2200x (P(x) \u2192 Q(x)), P(a), \u2234 Q(a) Universal modus tollens: \u2200x (P(x) \u2192 Q(x)), \u00acQ(a), \u2234 \u00acP(a) Introduction to Proofs Theorem / Fact / Result (\u5b9a\u7406): A statement that can be shown to be true. Propositions: Less important theorems. Axiom / Postulate (\u516c\u7406): Statements we assume to be true. Lemma (\u5f15\u7406): A less important theorem that is helpful in the proof of other results. (plural lemmas or lemmata) Corollary (\u63a8\u8bba): Theorem that can be established directly from a theorem that has been proved. Conjecture (\u731c\u60f3): Statement that is being proposed to be a true statement. Direct Proof: Direct proof of a conditional statement p \u2192 q is constructed when the first step is the assumption that p is true; subsequent steps are constructed using rules of inference, with the final step showing that q must also be true. Indirect Proofs: Proofs that do not start with the premises and end with the conclusion. Proof by Contraposition (\u8bc1\u660e\u9006\u5426\u547d\u9898): We take \u00acq as a premise, and using axioms, definitions, and previously proven theorems, together with rules of inference, we show that \u00acp must follow. Vacuous Proofs: If we can show that p is false, then we have a proof of the conditional statement p \u2192 q. Trivial Proof: By showing that q is true, it follows that p \u2192 q must also be true. Proofs by Contradiction (\u53cd\u8bc1): We can prove that p is true if we can show that \u00acp \u2192 (r \u2227 \u00acr) is true for some proposition r. i.e. r is premise and \u00acr is proved if \u00acp. To rewrite a proof by contraposition of p \u2192 q as a proof by contradiction, we suppose that both p and \u00acq are true. Then, we use the steps from the proof of \u00acq \u2192 \u00acp to show that \u00acp is true. Proofs of Equivalence: (p \u2194 q) \u2194 (p \u2192 q) \u2227 (q \u2192 p). (if and only if)(p_1 \u2194 p_2 \u2194 \u00b7\u00b7\u00b7 \u2194 p_n) \u2194 (p_1 \u2192 p_2) \u2227 (p_2 \u2192 p_3) \u2227 \u00b7\u00b7\u00b7 \u2227 (p_n \u2192 p_1). Counterexamples: To show that a statement of the form \u2200x P(x) is false, we only need to find a counterexample. Mistakes in proofs: Division by zero, Affirming the conclusion, Denying the hypothesis, Begging the question. Proof Methods and Strategy Exhaustive Proof (Proofs by exhaustion): [(p_1 \u2228 p_2 \u2228 \u00b7 \u00b7 \u00b7 \u2228 p_n) \u2192 q] \u2194 [(p_1 \u2192 q) \u2227 (p_2 \u2192 q) \u2227 \u00b7 \u00b7 \u00b7 \u2227 (p_n \u2192 q)] Eliminate cases when using exhaustive proof. Without loss of generality (WLOG): Other cases can be proved with the same method as this case. Exhaustive proof can be invalid if not all the cases are covered. Existence proof: A proof of a proposition of the form \u2203x P(x). Constructive: Given by finding a witness. Nonconstructive: Some other way, e.g. negation leads to contradiction. Uniqueness Proof: Assert that there is exactly one element with this property. \u2203x(P(x) \u2227 \u2200y(y = x \u2192 \u00acP(y))). Forward and backward reasoning: \u2026 Adapting existing proofs: \u2026 Look for counterexamples: \u2026 Tiling: Color the board with n colors. If top-right and bottom-left square is removed, the number of squares each color is unequal, but eachdomino / polymino must cover exactly one square of each color, so tiling is impossible. Set Set: A set is an unordered collection of objects. a \u2208 A, a \u2209 A. Roster method: List all the members of a set. Can use \u2026 when the general pattern is obvious. Set builder pattern: {x \u2208 set | predicate(x)} or {x | predicate(x), x \u2208 set} Name | Description \u2115 | the set of natural numbers \u2124 | the set of integers \u2124 | the set of positive integers \u211a | the set of rational numbers \u211d | the set of real numbers \u211d^+ \u211d^+ | the set of positive real numbers \u2102 | the set of complex numbers Interval | Set a, b | {x | a \u2264 x \u2264 b} [a, b) | {x | a \u2264 x < b} (a, b] | {x | a < x \u2264 b} (a, b) (Open) | {x | a < x < b} Equal: Two sets are equal if and only if they have the same elements. \u2200x(x \u2208 A \u2194 x \u2208 B). A = B. The order and repetition of elements does not matter: {5, 3, 3, 1} = {1, 3, 5} Empty/null set: \u2205 Singleton set: Set with a single element. \u2205 is not {\u2205}. Venn diagram: Rectangle for universal set, circle for set, dot for element. Subset: The set A is a subset of B if and only if every element of A is also an element of B. If and only if \u2200x(x \u2208 A \u2192 x \u2208 B). A \u2286 B. Showing that A is a Subset of B: To show that A \u2286 B, show that if x belongs to A then x also belongs to B. Showing that A is Not a Subset of B: To show that A \\not\\subseteq \\not\\subseteq B, find a single x \u2208 A such that x \u2209 B. For every set S, \u2205 \u2286 S and S \u2286 S. Proper subset: A \u2286 B and A \u2260 B. A \u2282 B. Showing Two Sets are Equal: To show that two sets A and B are equal, show that A \u2286 B and B \u2286 A. Size of a set: If there are exactly n distinct elements in S where n is a nonnegative integer, then S is a finite set and that n is the cardinality of S, written as |S|. Infinite set: A set is said to be infinite if it is not finite. Power set: Given a set S, the power set of S is the set of all subsets of the set S. \\mathcal{P}(S) \\mathcal{P}(S) . e.g. P(A) \u2208 P(B) \u21d2 P(A) \u2286 B \u21d2 A \u2208 B We can reconstruct the original set from the union of all element sets in its power set. So power set uniquely identifies a set. \u2205 cannot be a power set. Ordered n-tuple: The ordered collection that has $a_1 $ as its first element, a_2 a_2 as its second element, \u2026 , and a_n a_n as its nth element. ( a_1 a_1 , a_2 a_2 , \u2026 , a_n a_n ). Cartesian Product: A \u00d7 B = {(a, b) | a \u2208 A \u2227 b \u2208 B}.|A \u00d7 B| = |A||B| A_1 \u00d7 A_2 \u00d7 \u2026 \u00d7 A_n A_1 \u00d7 A_2 \u00d7 \u2026 \u00d7 A_n = {( a_1, a_2, \u2026 , a_n a_1, a_2, \u2026 , a_n ) | a_i \u2208 A_i a_i \u2208 A_i for i = 1, 2, \u2026 , n}. Relation: A subset R of the Cartesian product A \u00d7 B is called a relation. Using Set Notation with Quantifiers: \u2200x\u2208 S(P (x)) is shorthand for \u2200x(x \u2208 S \u2192 P (x)). Truth set: The truth set of P to be the set of elements x in D for which P(x) is true. Set Operations Union: The union of the sets A and B, denoted by A \u222a B, is the set that contains those elements that are either in A or in B, or in both. A \u222a B = {x | x \u2208 A \u2228 x \u2208 B}. Intersection: The intersection of the sets A and B, denoted by A \u2229 B, is the set containing those elements in both A and B. A \u2229 B = {x | x \u2208 A \u2227 x \u2208 B}. Disjoint: Two sets are called disjoint if their intersection is the empty set. Difference: The difference of A and B, denoted by A \u2212 B (or A \\ B), is the set containing those elements that are in A but not in B. The difference of A and B is also called the complement of B with respect to A. A \u2212 B = {x | x \u2208 A \u2227 x \u2208 / B}. Complement: Let U be the universal set. The complement of the set A, denoted by \\overline{A} \\overline{A} , is the complement of A with respect to U. Therefore, the complement of the set A is U \u2212 A. A \u2212 B = A \u2229 \\overline{B} \\overline{B} . Set Identities: Identity Name A \u2229 U = A Identity laws A \u222a\u2205= A A \u222a U = U Domination laws A \u2229\u2205=\u2205 A \u222a A = A Idempotent laws A \u2229 A = A \\overline{(\\overline{A})} = A \\overline{(\\overline{A})} = A Complementation law A \u222a B = B \u222a A Commutative laws A \u2229 B = B \u2229 A A \u222a (B \u222a C) = (A \u222a B) \u222a C Associative laws A \u2229 (B \u2229 C) = (A \u2229 B) \u2229 C A \u222a (B \u2229 C) = (A \u222a B) \u2229 (A \u222a C) Distributive laws A \u2229 (B \u222a C) = (A \u2229 B) \u222a (A \u2229 C) \\overline{A \u2229 B} = \\overline{A} \u222a \\overline{B} \\overline{A \u2229 B} = \\overline{A} \u222a \\overline{B} De Morgan\u2019s laws $\\overline{A \u222a B} = $ \\overline{A}\u2229\\overline{B} \\overline{A}\u2229\\overline{B} A \u222a (A \u2229 B) = A Absorption laws A \u2229 (A \u222a B) = A A \u2229 \\overline{A} \\overline{A} =\u2205 Complement laws A \u222a \\overline{A} \\overline{A} = U Prove set identity: Use set builder pattern and definition. Membership table: Set identities can also be proved using membership tables. We consider each combination of sets that an element can belong to and verify that elements in the same combinations of sets belong to both the sets in the identity. To indicate that an element is in a set, a 1 is used; to indicate that an element is not in a set, a 0 is used. Generalized Unions and Intersections: Because unions and intersections of sets satisfy associative laws, the sets A \u222a B \u222a C and A \u2229 B \u2229 C are well defined. The union of a collection of sets: The set that contains those elements that are members of at least one set in the collection. \\bigcup_{i=1}^{n}{A_i} \\bigcup_{i=1}^{n}{A_i} The intersection of a collection of sets is the set that contains those elements that are members of all the sets in the collection. \\bigcap_{i=1}^{n}{A_i} \\bigcap_{i=1}^{n}{A_i} Computer Representation of Sets: One of the methods is to use bit strings. Function Function/Mapping/Transformation: Let A and B be nonempty sets. A function f from A to B is an assignment of exactly one element of B to each element of A. f : A \u2192 B. f(a) = b. If f is a function from A to B, we say that A is the domain of f and B is the codomain of f. If f (a) = b, we say that b is the image of a and a is a preimage of b. The range, or image, of f is the set of all images of elements of A. Also, if f is a function from A to B, we say that f maps A to B. Two functions are equal: When they have the same domain, have the same codomain, and map each element of their common domain to the same element in their common codomain. Let f_1 f_1 and f_2 f_2 be functions from A to \\mathbb{R} \\mathbb{R} , then $f_1 + f_2 $ and f_1 f_2 f_1 f_2 are also functions from A to \\mathbb{R} \\mathbb{R} defined for all x \u2208 A by : (f_1 + f_2)(x) = f_1(x) + f_2(x) \\\\ (f_1f_2)(x) = f_1(x)f_2(x) (f_1 + f_2)(x) = f_1(x) + f_2(x) \\\\ (f_1f_2)(x) = f_1(x)f_2(x) The image of S under the function f: f (S) = {t | \u2203s \u2208 S (t = f (s))} = {f (s)| s \u2208 S}. One-to-one/injection (\u5355\u5c04): if and only if f (a) = f (b) implies that a = b for all a and b in the domain of f. A function is said to be injective if it is one-to-one. \\forall a\\forall b(f(a) = f(b) \\rightarrow a = b) \\forall a\\forall b(f(a) = f(b) \\rightarrow a = b) Increasing if f (x) \u2264 f (y), and strictly increasing: if f (x) <f (y), whenever x < y and x and y are in the domain of f. Decreasing if f (x) \u2265 f (y), and strictly decreasing if f (x) > f (y), whenever x < y and x and y are in the domain of f. Onto/surjection (\u6ee1\u5c04): if and only if for every element b \u2208 B there is an element a \u2208 A with f (a) = b. A function f is called surjective if it is onto. One-to-one correspondence / bijection (\u53cc\u5c04): if it is both one-to-one and onto. We also say that such a function is bijective. To show that f is injective: Show that if f (x) = f (y) for arbitrary x, y \u2208 A with x \u2260 y, then x = y. To show that f is not injective: Find particular elements x, y \u2208 A such that x \u2260 y and f (x) = f (y). To show that f is surjective: Consider an arbitrary element y \u2208 B and find an element x \u2208 A such that f (x) = y. To show that f is not surjective: Find a particular y \u2208 B such that f (x) \u2260 y for all x \u2208 A. Inverse function: Let f be a one-to-one correspondence from the set A to the set B. The inverse function of f is the function that assigns to an element b belonging to B the unique element a in A such that f(a) = b. The inverse function of f is denoted by f^{\u22121} f^{\u22121} . Hence, f^{\u22121}(b) = a f^{\u22121}(b) = a when f(a) = b. Composition of functions: Let g be a function from the set A to the set B and let f be a function from the set B to the set C. The composition of the functions f and g, denoted for all a \u2208 A by f \u25e6 g, is defined by (f \u25e6 g)(a) = f(g(a)) (f \u25e6 g)(a) = f(g(a)) The graphs of functions: \u2026 Some important functions: Floor(x): [x] Sequence Sequence: A function from a subset of the set of integers (usually either the set {0, 1, 2, \u2026} or the set {1, 2, 3, \u2026}) to a set S. We use the notation a_n a_n to denote the image of the integer n. We call a_n a_n a term of the sequence. Geometric progression: a, ar, ar^2,\u2026 , ar^n a, ar, ar^2,\u2026 , ar^n , \u2026 where a is initial term, r is common ratio. Arithmetic progression: a, a + d, a + 2d, \u2026 , a + nd, \u2026 where a is initial term, d is common difference. String: Finite sequence, where length is the number of terms in the string. Empty string: \u03bb. Recurrence relation: An equation that expresses a_n a_n in terms of one or more of the previous terms of the sequence. Initial condition: Specify the terms that precede the first term where the recurrence relation takes effect. Fibonacci sequence: f_0, f_1, f_2 f_0, f_1, f_2 ,\u2026 , is defined by the initial conditions f_0 = 0, f_1 = 1 f_0 = 0, f_1 = 1 , and the recurrence relation f_n = f_{n\u22121} + f{n\u22122} f_n = f_{n\u22121} + f{n\u22122} . Closed formula: We say that we have solved the recurrence relation together with the initial conditions when we find an explicit formula, called a closed formula, for the terms of the sequence. Finding closed formula: Iteration, forward substitution or backward substitution. Lucas sequence: Fibonacci sequence with different initial condition. Summation notation: \\sum_{i=m}^n{f(i)} \\sum_{i=m}^n{f(i)} where i is index of summation, m is lower limit, n is upper limit. \\sum_{i=0}^n(ar^i)=\\frac{ar^{n+1}-a}{r-1},r{\\neq}1 \\\\ \\sum_{i=0}^ni=\\frac{n(n+1)}{2} \\\\ \\sum_{i=0}^ni^2=\\frac{n(n+1)(2n+1)}{6} \\\\ \\sum_{i=0}^ni^3=\\frac{n^2(n+1)^2}{4} \\\\ \\sum_{i=0}^{\\infty}x^i,|x|<1=\\frac{1}{1-x} \\\\ \\sum_{i=0}^{\\infty}ix^{i-1},|x|<1=\\frac{1}{(1-x)^2} \\sum_{i=0}^n(ar^i)=\\frac{ar^{n+1}-a}{r-1},r{\\neq}1 \\\\ \\sum_{i=0}^ni=\\frac{n(n+1)}{2} \\\\ \\sum_{i=0}^ni^2=\\frac{n(n+1)(2n+1)}{6} \\\\ \\sum_{i=0}^ni^3=\\frac{n^2(n+1)^2}{4} \\\\ \\sum_{i=0}^{\\infty}x^i,|x|<1=\\frac{1}{1-x} \\\\ \\sum_{i=0}^{\\infty}ix^{i-1},|x|<1=\\frac{1}{(1-x)^2} Cardinality of Sets Same cardinality: If and only if there is a one-to-one correspondence from A to B. |A| = |B| Less cardinality: If there is a one-to-one function from A to B, the cardinality of A is less than or the same as the cardinality of B. |A| \u2264 |B|. When |A| \u2264 |B| and A and B have different cardinality, we say that the cardinality of A is less than the cardinality of B. |A| < |B|. Countable set: A set that is either finite or has the same cardinality as the set of positive integers is called countable. Uncountable set: A set that is not countable is called uncountable. When an infinite set S is countable, we denote the cardinality of S by \\aleph_0 \\aleph_0 (where \u05d0 is aleph). |S| = \\aleph_0 \\aleph_0 . S has cardinality \u201caleph null\u201d. Prove by showing one-to-one correspondence, or can be listed. \u2124 is countable: f(n) = n / 2, when n is even; -(n - 1) / 2, when n is odd. \u211a^+ \u211a^+ is countable: Use Cantor Diagonalization Argument for listing. \u211d is uncountable: 0.d_i, d_i = 0 0.d_i, d_i = 0 , if d_{ii} \\neq 0 d_{ii} \\neq 0 ; 1, if d_{ii} = 0 d_{ii} = 0 cannot be listed. If A and B are countable sets, then A \u222a B is also countable. Schr\u00f6der-Bernstein Theorem: If A and B are sets with |A| \u2264 |B| and |B| \u2264 |A|, then |A| = |B|. In other words, if there are one-to-one functions f from A to B and g from B to A, then there is a one-to-one correspondence between A and B. Can use two different functions to prove same cardinality, according to Schr\u00f6der-Bernstein Theorem. Computable / uncomputable function: If there is a computer program in some programming language that finds the values of this function. If a function is not computable we say it is uncomputable. Proof for existence of uncomputable function: Programs are countable (Binary can be listed), but functions are not, e.g. \u2124 -> \u2124 is not. The continuum hypothesis: (We have | P(\u2124^+) P(\u2124^+) | = 2^{\\aleph_0} 2^{\\aleph_0} = |\u211d| = c.) There is no cardinality such that it is greater than \\aleph_0 \\aleph_0 and less than c, or say, c = \\aleph_1 \\aleph_1 in sequence \\aleph_0, \\aleph_1, \\aleph_2 \\aleph_0, \\aleph_1, \\aleph_2 , .... Proving power set related cardinality: Use bit string for element sets of power set. (0, 1) and decimal representation rocks for proof. |(0, 1)| = |\u211d|, can be proved with Schr\u00f6der-Bernstein Theorem. Counting The Basics of Counting The product rule: Suppose that a procedure can be broken down into a sequence of two tasks. If there are n_1 n_1 ways to do the first task and for each of these ways of doing the first task, there are n_2 n_2 ways to do the second task, then there are n_1{\\cdot}n_2 n_1{\\cdot}n_2 ways to do the procedure. The sum rule: If a task can be done either in one of n_1 n_1 ways or in one of n_2 n_2 ways, where none of the set of n_1 n_1 ways is the same as any of the set of n_2 n_2 ways, then there are n_1 + n_2 n_1 + n_2 ways to do the task. The subtraction rule: If a task can be done in either n_1 n_1 ways or n_2 n_2 ways, then the number of ways to do the task is n_1 + n_2 n_1 + n_2 minus the number of ways to do the task that are common to the two different ways. The division rule: There are n/d ways to do a task if it can be done using a procedure that can be carried out in n ways, and for every way w, exactly d of the n ways correspond to way w. Counting problems can be solved using tree diagrams. The Pigeonhole Principle The pigeonhole principle: If k k is a positive integer and k + 1 k + 1 \u200b or more objects are placed into k k boxes, then there is at least one box containing two or more of the objects. Corollary 1: A function f from a set with k + 1 or more elements to a set with k elements is not one-to-one. The generalized pigeonhole principle: If N N objects are placed into k k \u200b boxes, then there is at least one box containing at least \u2308N/k\u2309 \u2308N/k\u2309 objects. Reverse minimum: (m - 1) * k + 1 Elegant applications: \u2026 Subsequence: Picking elements while the original order is preserved. Theorem: Every sequence of n^2+1 n^2+1 distinct real numbers contains a subsequence of length n+1 that is either strictly increasing or strictly decreasing. The Ramsey number R(m, n), where m and n are positive integers greater than or equal to 2, denotes the minimum number of people at a party such that there are either m mutual friends or n mutual enemies, assuming that every pair of people at the party are friends or enemies. Permutations and Combinations If n is a positive integer and r is an integer with 1 \u2264 r \u2264 n, then there are P(n, r) = n(n \u2212 1)(n \u2212 2) \u2026 (n \u2212 r + 1) = n! / (n - r)! r-permutations of a set with n distinct elements. P (n, 0) = 1 The number of r-combinations of a set with n elements, where n is a nonnegative integer and r is an integer with 0 \u2264 r \u2264 n, equals C(n, r) = n! / (r!(n \u2212 r)!). Binomial coefficient: (n, r)^T (n, r)^T = C(n, r). P (n, r) = C(n, r) \u00b7 P (r, r). C(n, r) = C(n, n \u2212 r). A combinatorial proof of an identity is a proof that uses counting arguments to prove that both sides of the identity count the same objects but in different ways, or a proof that is based on showing that there is a bijection between the sets of objects counted by the two sides of the identity. These two types of proofs are called double counting proofs and bijective proofs, respectively. Binomial Coefficient The binomial theorem: (x+y)^n=\\sum_{j=0}^{n}\\binom{n}{j}x^{n-j}y^j\\\\ \\sum_{k=0}^{n}\\binom{n}{k}=(1+1)^n=2^n\\\\ \\sum_{k=0}^{n}(-1)^k\\binom{n}{k}=(-1+1)^n=0\\\\ \\sum_{k=0}^{n}2^k\\binom{n}{k}=(2+1)^n=3^n (x+y)^n=\\sum_{j=0}^{n}\\binom{n}{j}x^{n-j}y^j\\\\ \\sum_{k=0}^{n}\\binom{n}{k}=(1+1)^n=2^n\\\\ \\sum_{k=0}^{n}(-1)^k\\binom{n}{k}=(-1+1)^n=0\\\\ \\sum_{k=0}^{n}2^k\\binom{n}{k}=(2+1)^n=3^n Pascal\u2019s identity: \\binom{n+1}{k}=\\binom{n}{k-1}+\\binom{n}{k} \\binom{n+1}{k}=\\binom{n}{k-1}+\\binom{n}{k} So Pascal\u2019s triangle. Vandermonde\u2019s identity: \\binom{m+n}{r}=\\sum_{k=0}^{r}\\binom{m}{r-k}\\binom{n}{k}\\\\ \\binom{2n}{n}=\\sum_{k=0}^{n}\\binom{n}{n-k}\\binom{n}{k}=\\sum_{k=0}^{n}\\binom{n}{k}^2\\\\ \\binom{n+1}{r+1}=\\sum_{j=r}^{n}\\binom{j}{r} \\binom{m+n}{r}=\\sum_{k=0}^{r}\\binom{m}{r-k}\\binom{n}{k}\\\\ \\binom{2n}{n}=\\sum_{k=0}^{n}\\binom{n}{n-k}\\binom{n}{k}=\\sum_{k=0}^{n}\\binom{n}{k}^2\\\\ \\binom{n+1}{r+1}=\\sum_{j=r}^{n}\\binom{j}{r} Prove by combinatorial argument: Use choosing subset, use bit string. Generalized Permutations and Combinations The number of r-permutations of a set of n objects with repetition allowed is n^r n^r . There are C(n + r \u2212 1, r) = C(n + r \u2212 1, n \u2212 1) r-combinations from a set with n elements when repetition of elements is allowed. Proved by stars and bars. Method: Stars and bars abstraction. P426 Counting solutions to equation: Notice non-negative or positive integer, the latter implies x_i \\ge 1 x_i \\ge 1 . P427 Nested loop P427 Word letter reordering: The number of different permutations of n objects, where there are n_1 n_1 indistinguishable objects of type 1, n_2 n_2 indistinguishable objects of type 2, \u2026 , and n_k n_k indistinguishable objects of type k, is \\frac{n!}{n_1!n_2! \u00b7\u00b7\u00b7 n_k!} \\frac{n!}{n_1!n_2! \u00b7\u00b7\u00b7 n_k!} Distinguishable objects and distinguishable boxes: The number of ways to distribute n distinguishable objects into k distinguishable boxes so that n_i n_i objects are placed into box i, i = 1, 2, \u2026 , k, equals \\frac{n!}{n_1!n_2!\u00b7\u00b7\u00b7n_k!} \\frac{n!}{n_1!n_2!\u00b7\u00b7\u00b7n_k!} Indistinguishable objects and distinguishable boxes: The number of ways to distribute n indistinguishable objects into k distinguishable boxes so that n_i objects are placed into box i, i = 1, 2, \u2026 , k, equals the n-combination from a set with k elements when repetition is allowed, according to its proof, C(k + n - 1, n). Distinguishable objects and indistinguishable boxes: Can enumerate by n into m, \u2026 , but no simple closed formula. Stirling numbers of the second kind: S(n, j) denote the number of ways to distribute n distinguishable objects into j indistinguishable boxes so that no box is empty. Then the number of ways to distribute n distinguishable objects into k indistinguishable boxes equals \\sum_{j=1}^{k}S(n,j) \\sum_{j=1}^{k}S(n,j) . S(n,j)=\\frac{1}{j!}\\sum_{i=0}{j-1}(-1)^i\\binom{j}{i}(j-i)^n S(n,j)=\\frac{1}{j!}\\sum_{i=0}{j-1}(-1)^i\\binom{j}{i}(j-i)^n Indistinguishable objects and indistinguishable boxes: List partition by decreasing order. If p_k(n) p_k(n) is the number of partitions of n into at most k positive integers, then there are p_k(n) p_k(n) ways to distribute n indistinguishable objects into k indistinguishable boxes. Generating Permutations and Combinations Generating permutations: Lexicographic. Next permutation: Find last pair such that a_j < a_{j+1} a_j < a_{j+1} , swap minimum of a_{j+1}, \u2026, a_n a_{j+1}, \u2026, a_n that is greater than a_j a_j with a_j a_j , and list remaining in increasing order. Generating subsets: Use bit string. Generating r-combinations: Lexicographic. Next permutation of {1, 2, \u2026 , n}: Find last a_i a_i such that a_i{\\ne} a_i{\\ne} n-r+i, replace a_i a_i with a_i+1 a_i+1 , a_j a_j with a_i+j-i+1 a_i+j-i+1 (increasing from a_i+1 a_i+1 ). (This is natural.) Applications of Recurrence Relations Recurrence relation: A rule for determining subsequent terms from those that precede them. Solution of a recurrence relation: A sequence is called a solution of a recurrence relation if its terms satisfy the recurrence relation. Rabbits: f_n = f_{n-1} + f_{n-2} f_n = f_{n-1} + f_{n-2} . Hanoi: H_n=2H_{n-1}+1, H_1=1 H_n=2H_{n-1}+1, H_1=1 . Bit string without two consecutive zeros: a_n = a_{n-1} + a_{n-2} a_n = a_{n-1} + a_{n-2} . Dynamic programming. Solving Linear Recurrence Relations Linear homogeneous recurrence relation of degree k k with constant coefficients: A recurrence relation of the form a_n=c_1a_{n-1}+c_2a_{n-2}+\u00b7\u00b7\u00b7+c_ka_{n-k}, a_n=c_1a_{n-1}+c_2a_{n-2}+\u00b7\u00b7\u00b7+c_ka_{n-k}, where c_1, c_2, \u2026, c_k c_1, c_2, \u2026, c_k are real numbers, and c_k \\neq 0 c_k \\neq 0 . Characteristic equation: Suppose a_n=r^n a_n=r^n , then r^k-c_1r^{k-1}-c_2r^{k-2}-...-c_{k-1}r-c_k=0 r^k-c_1r^{k-1}-c_2r^{k-2}-...-c_{k-1}r-c_k=0 is the characteristic equation. The solutions are called characteristic roots. Theorem 1: Let c_1 c_1 and c_2 c_2 be real numbers. Suppose that r^2-c_1r-c_2=0 r^2-c_1r-c_2=0 has two distinct roots r_1 r_1 and r_2 r_2 . Then the sequence \\{a_n\\} \\{a_n\\} is a solution of the recurrence relation a_n=c_1a_{n-1}+c_2a_{n-2} a_n=c_1a_{n-1}+c_2a_{n-2} if and only if a_n=\u03b1_1r_1^n+\u03b1_2r_2^n a_n=\u03b1_1r_1^n+\u03b1_2r_2^n for n n = 0, 1, 2, \u2026, where \u03b1_1 \u03b1_1 and \u03b1_2 \u03b1_2 are constants. Theorem 2: Let c_1 c_1 and c_2 c_2 be real numbers with c_2 \\neq 0 c_2 \\neq 0 . Suppose that r^2-c_1r-c_2=0 r^2-c_1r-c_2=0 has only one root r_0 r_0 . A sequence \\{a_n\\} \\{a_n\\} is a solution of the recurrence relation a_n=c_1a_{n-1}+c_2a_{n-2} a_n=c_1a_{n-1}+c_2a_{n-2} if and only if a_n=\u03b1_1r_0^n+\u03b1_2nr_0^n a_n=\u03b1_1r_0^n+\u03b1_2nr_0^n , for n n = 0, 1, 2, \u2026, where \u03b1_1 \u03b1_1 and \u03b1_2 \u03b1_2 are constants. Theorem 3: Let c_1, c_2, ..., c_k c_1, c_2, ..., c_k be real numbers. Suppose that the characteristic equation r^k-c_1r^{k-1}-...-c_k=0 r^k-c_1r^{k-1}-...-c_k=0 has k k distinct roots r_1, r_2, ..., r_k r_1, r_2, ..., r_k . Then a sequence \\{a_n\\} \\{a_n\\} is a solution of the recurrence relation a^n=c_1a^{n-1}+c_2a^{n-2}+...+c_ka^{n-k} a^n=c_1a^{n-1}+c_2a^{n-2}+...+c_ka^{n-k} if and only if a^n = \u03b1_1r_1^n+\u03b1_2r_2^n+\u00b7\u00b7\u00b7+\u03b1_kr_k^n a^n = \u03b1_1r_1^n+\u03b1_2r_2^n+\u00b7\u00b7\u00b7+\u03b1_kr_k^n for n n = 0, 1, 2, \u2026, where \u03b1_1, \u03b1_2, ..., \u03b1_k \u03b1_1, \u03b1_2, ..., \u03b1_k are constants. Theorem 4: Let c_1, c_2, \u2026, c_k c_1, c_2, \u2026, c_k be real numbers. Suppose that the characteristic equation r^k - c_1r^k-1 - \u00b7\u00b7\u00b7 - c_k = 0 r^k - c_1r^k-1 - \u00b7\u00b7\u00b7 - c_k = 0 has t t distinct roots r_1, r_2, \u2026, r_t r_1, r_2, \u2026, r_t with multiplicities m_1, m_2, \u2026, m_t m_1, m_2, \u2026, m_t , respectively, so that m_i\\geq1 m_i\\geq1 for i i = 1, 2, \u2026, t and m_1+m_2+\u00b7\u00b7\u00b7+m_t=k m_1+m_2+\u00b7\u00b7\u00b7+m_t=k . Then a sequence \\{a_n\\} \\{a_n\\} is a solution of the recurrence relation a_n=c_1a_{n-1}+c_2a_{n-2}+\u00b7\u00b7\u00b7+c_ka_{n-k} a_n=c_1a_{n-1}+c_2a_{n-2}+\u00b7\u00b7\u00b7+c_ka_{n-k} if and only if a_n=(\u03b1_{1, 0}+\u03b1_{1, 1}n+\u00b7\u00b7\u00b7+\u03b1_{1, m_1-1}n^{m_1-1})r_1^n\\\\ +(\u03b1_{2, 0}+\u03b1_{2, 1}n+\u00b7\u00b7\u00b7+\u03b1_{2, m_2-1}n^{m_2-1})r_2^n\\\\ +\u00b7\u00b7\u00b7+(\u03b1_{t, 0}+\u03b1_{t, 1}^n+\u00b7\u00b7\u00b7+\u03b1_{t, m_t-1}n^{m_t-1})r_t^n a_n=(\u03b1_{1, 0}+\u03b1_{1, 1}n+\u00b7\u00b7\u00b7+\u03b1_{1, m_1-1}n^{m_1-1})r_1^n\\\\ +(\u03b1_{2, 0}+\u03b1_{2, 1}n+\u00b7\u00b7\u00b7+\u03b1_{2, m_2-1}n^{m_2-1})r_2^n\\\\ +\u00b7\u00b7\u00b7+(\u03b1_{t, 0}+\u03b1_{t, 1}^n+\u00b7\u00b7\u00b7+\u03b1_{t, m_t-1}n^{m_t-1})r_t^n for n n = 0, 1, 2, \u2026, where \u03b1_{i, j} \u03b1_{i, j} are constants for 1\\leq{i}\\leq{t} 1\\leq{i}\\leq{t} and 0\\leq{j}\\leq{m}_i-1 0\\leq{j}\\leq{m}_i-1 . Theorem 5: If \\{a_n^{(p)}\\} \\{a_n^{(p)}\\} is a particular solution of the nonhomogeneous linear recurrence relation with constant coefficients a_n=c_1a_{n-1}+c_2a_{n-2}+...+c_ka_{n-k}+F(n), a_n=c_1a_{n-1}+c_2a_{n-2}+...+c_ka_{n-k}+F(n), then every solution is of the form \\{a_n^{(p)}+a_n^{(h)}\\} \\{a_n^{(p)}+a_n^{(h)}\\} , where \\{a_n^{(h)}\\} \\{a_n^{(h)}\\} is a solution of the associated homogeneous recurrence relation a_n=c_1a_{n-1}+c_2a_{n-2}+...+c_ka_{n-k}. a_n=c_1a_{n-1}+c_2a_{n-2}+...+c_ka_{n-k}. Theorem 6: If F(n)=(b_tn^t+b_{t-1}n^{t-1}+...+b_1n+b_0)s^n, F(n)=(b_tn^t+b_{t-1}n^{t-1}+...+b_1n+b_0)s^n, when s s is not a root of the characteristic equation of the associated linear homogeneous recurrence relation, there is a particular solution of the form (p_tn^t+p_{t-1}n^{t-1}+...+p_1n+p_0)s^n (p_tn^t+p_{t-1}n^{t-1}+...+p_1n+p_0)s^n When s s is a root of this characteristic equation and its multiplicity is m m , there is a particular solution of the form n^m(p_tn^t+p_{t-1}n^{t-1}+...+p_1n+p_0)s^n. n^m(p_tn^t+p_{t-1}n^{t-1}+...+p_1n+p_0)s^n. Generating Functions The (ordinary) generating function for the sequence a_0,a_1,...,a_k a_0,a_1,...,a_k ,... of real numbers is the infinite series G(x)=a_0+a_1x+...+a_kx^k+...=\\sum_{k=0}^\\infty{a}_kx^k. G(x)=a_0+a_1x+...+a_kx^k+...=\\sum_{k=0}^\\infty{a}_kx^k. We can define generating functions for finite sequences of real numbers by setting a_{n+1}=a_{n+2}=...=0 a_{n+1}=a_{n+2}=...=0 f(x)=\\frac{1}{1-x} f(x)=\\frac{1}{1-x} is the generating function of \\{1\\} \\{1\\} for |x|<1. f(x)=\\frac{1}{1-ax} f(x)=\\frac{1}{1-ax} is the generating function of \\{a^n\\} \\{a^n\\} for |ax|<1. Let f(x)=\\sum_{k=0}^\\infty{a}_kx^k f(x)=\\sum_{k=0}^\\infty{a}_kx^k and g(x)=\\sum_{k=0}^\\infty{b}_kx^k g(x)=\\sum_{k=0}^\\infty{b}_kx^k , then f(x)+g(x)=\\sum_{k=0}^\\infty(a_k+b_k)x^k and f(x)g(x)=\\sum_{k=0}^\\infty(\\sum_{j=0}^ka_jb_{k-j})x^k. f(x)+g(x)=\\sum_{k=0}^\\infty(a_k+b_k)x^k and f(x)g(x)=\\sum_{k=0}^\\infty(\\sum_{j=0}^ka_jb_{k-j})x^k. Let u u be a real number and k k a nonnegative integer. Then the extended binomial coefficient \\binom{u}{k} \\binom{u}{k} is defined by \\binom{u}{k}=\\begin{cases} u(u-1)...(u-k+1)/k! &\\text{if } k>0\\\\ 1 &\\text{if } k=0. \\end{cases} \\binom{u}{k}=\\begin{cases} u(u-1)...(u-k+1)/k! &\\text{if } k>0\\\\ 1 &\\text{if } k=0. \\end{cases} \\binom{-n}{r}=(-1)^r\\binom{n+r-1}{r} \\binom{-n}{r}=(-1)^r\\binom{n+r-1}{r} The extended binomial theorem: Let x x be a real number with |x|<1 and let u u be a real number. Then (1+x)^u=\\sum_{k=0}^\\infty\\binom{u}{k}x^k. (1+x)^u=\\sum_{k=0}^\\infty\\binom{u}{k}x^k. Find number of solutions: e_1+e_2+\\cdots+e_n=C, e_1+e_2+\\cdots+e_n=C, l_i\\leq{e}_i\\leq{u_i} l_i\\leq{e}_i\\leq{u_i} , then it is the coefficient of x^C x^C from (x^{l_i}+...+x^{u_i})...(...) (x^{l_i}+...+x^{u_i})...(...) . Form value r r with tokens of value t_i t_i : When order matters, ways of exactly n n tokens is the coefficient of x^r x^r from (x^{t_i}+...)^n (x^{t_i}+...)^n , so for all it is the coefficient of x^r x^r from 1+...+(x^{t_i}+...)^n 1+...+(x^{t_i}+...)^n ; else, it is the coefficient of x^r x^r from (1+...+(x^{t_i})^n)+... (1+...+(x^{t_i})^n)+... . More powerful and constraint-friendly then simple permutation and combination. Solve recurrence relations: Multiply x^n x^n to the recurrence relation. Substitute the multiplied relation into G(x)=\\sum_{k=0}^\\infty{a}_kx^k=..., G(x)=\\sum_{k=0}^\\infty{a}_kx^k=..., solve for G(x) G(x) , then make it a summation to see a_n a_n . Proving identity: Take combination as a coefficient of certain term. Inclusion-Exclusion |A\\cup{B}|=|A|+|B|-|A\\cap{B}|.\\\\ |A\\cup{B}\\cup{C}|=|A|+|B|+|C|-|A\\cap{B}|-|B\\cap{C}|-|C\\cap{A}|+|A\\cap{B}\\cap{C}|\\\\ \u2026 |A\\cup{B}|=|A|+|B|-|A\\cap{B}|.\\\\ |A\\cup{B}\\cup{C}|=|A|+|B|+|C|-|A\\cap{B}|-|B\\cap{C}|-|C\\cap{A}|+|A\\cap{B}\\cap{C}|\\\\ \u2026 Number of integers divisible: \\lfloor{n}/a\\rfloor+\\lfloor{n}/b\\rfloor-\\lfloor{n}/ab\\rfloor. \\lfloor{n}/a\\rfloor+\\lfloor{n}/b\\rfloor-\\lfloor{n}/ab\\rfloor. Applications of Inclusion-Exclusion Asking element count having none of some properties: Use inclusion-exclusion. The number of primes (The sieve of Eratosthenes): A composite number is divisible by a prime smaller than its square root. The number of onto functions: The shouldn\u2019t have properties are not having element i i in the range. Let m m and n n be positive integers with m \\geq{n} m \\geq{n} . Then, there are n^m-C(n,1)(n-1)^m+C(n,2)(n-2)^m-...+(-1)^{n-1}C(n,n-1)1^m n^m-C(n,1)(n-1)^m+C(n,2)(n-2)^m-...+(-1)^{n-1}C(n,n-1)1^m onto functions from a set with m elements to a set with n elements. Derangement: A permutation of objects that leaves no object in its original position. The number of derangements of a set with n n elements is D_n=n![1-\\frac{1}{1!}+\\frac{1}{2!}-\\frac{1}{3!}+...+(-1)^n\\frac{1}{n!}]\\to{n}!e^{-1}. D_n=n![1-\\frac{1}{1!}+\\frac{1}{2!}-\\frac{1}{3!}+...+(-1)^n\\frac{1}{n!}]\\to{n}!e^{-1}. For arranging differently between two times, the number is n!D_n=(n!)^2[1-\\frac{1}{1!}+\\frac{1}{2!}-\\frac{1}{3!}+...+(-1)^n\\frac{1}{n!}] n!D_n=(n!)^2[1-\\frac{1}{1!}+\\frac{1}{2!}-\\frac{1}{3!}+...+(-1)^n\\frac{1}{n!}] because the first arrangement can have n! n! ways. Relations, Their Properties and Representations Binary relation: Let A and B be sets. A binary relation from A to B is a subset of A\\times{B} A\\times{B} . a\\mathrel{R}b a\\mathrel{R}b or a\\not\\!\\!R \\;b a\\not\\!\\!R \\;b . Matrix representation: M_R,m_{ij}=(a_i,b_j)\\in{R} M_R,m_{ij}=(a_i,b_j)\\in{R} . Functions can be relations. Relation on a set: A relation on a set A A is a relation from A A to A A . Reflexive: A relation R R on a set A A is called reflexive if (a,a)\\in{R} (a,a)\\in{R} for every element a\\in{A} a\\in{A} . Irreflexive: A relation R R on the set A A is irreflexive if for every a\\in{A} a\\in{A} , (a,a)\\not\\in{R} (a,a)\\not\\in{R} . Symmetric: A relation R R on a set A A is called symmetric if (b,a)\\in{R} (b,a)\\in{R} whenever (a,b)\\in{R} (a,b)\\in{R} , for all a,b\\in{A} a,b\\in{A} . In matrix it is 1 to 1 and 0 to 0 mirrored by the main diagonal, or M_R=(M_R)^T M_R=(M_R)^T . Asymmetric: A relation R R is called asymmetric if (a,b)\\in{R} (a,b)\\in{R} implies that (b,a)\\not\\in{R} (b,a)\\not\\in{R} (So the main diagonal are all zeros). Antisymmetric: A relation R R on a set A A such that for all a,b\\in{A} a,b\\in{A} , if (a,b)\\in{R} (a,b)\\in{R} and (b,a)\\in{R} (b,a)\\in{R} , then a=b a=b is called antisymmetric. In matrix it is 1 to 0, 0 to 1 or 0 to 0 mirrored by the main diagonal. Antisymmetric is not Asymmetric, but Asymmetric is Antisymmetric. Transitive: A relation R R on a set A A is called transitive if whenever (a,b)\\in{R} (a,b)\\in{R} and (b,c)\\in{R} (b,c)\\in{R} , then (a,c)\\in{R} (a,c)\\in{R} , for all a,b,c\\in{A} a,b,c\\in{A} . Combining Relations: Relations can be combined like sets. M_{R_1\\cup{R}_2}=M_{R_1}\\vee{M}_{R_2}\\\\ M_{R_1\\cap{R}_2}=M_{R_1}\\wedge{M}_{R_2}\\\\ M_{R\\circ{S}}=M_S\\bigodot{M}_R (\\bigodot \\text{stands for boolean product})\\\\ M_{R^n}=(M_R)^n M_{R_1\\cup{R}_2}=M_{R_1}\\vee{M}_{R_2}\\\\ M_{R_1\\cap{R}_2}=M_{R_1}\\wedge{M}_{R_2}\\\\ M_{R\\circ{S}}=M_S\\bigodot{M}_R (\\bigodot \\text{stands for boolean product})\\\\ M_{R^n}=(M_R)^n Symmetric difference: The symmetric difference of A A and B B , denoted by A\\bigoplus{B} A\\bigoplus{B} , is the set containing those elements in either A A or$ B$, but not in both A A and B B . M_{\\bigoplus R} M_{\\bigoplus R} is the entry-wise XORed matrix. Composition: The composite of R R and S S is the relation consisting of ordered pairs (a, c) (a, c) , where a\\in{A} a\\in{A} , c\\in{C} c\\in{C} , and for which there exists an element b\\in{B} b\\in{B} such that (a,b)\\in{R} (a,b)\\in{R} and (b,c)\\in{S} (b,c)\\in{S} . We denote the composite of R R and S S by S\\circ{R} S\\circ{R} . S\\circ{R} S\\circ{R} is from right to left (inside to outside)! Composition can be done by matrix multiplication. Power: Let R R be a relation on the set A A . The powers R^n R^n , $n=1, 2, 3 ,..., $ are defined recursively by R^1=R R^1=R and R^{n+1}=R^n\\circ{R} R^{n+1}=R^n\\circ{R} . Theorem: The relation R R on a set A A is transitive if and only if R^n\\subseteq{R} R^n\\subseteq{R} for n=1, 2, 3, ... n=1, 2, 3, ... . Inverse relation: R^{-1} R^{-1} , with pairs inverted. Relations on a finite set can also be represented by digraphs (directed graphs). (R\\cup{S})^{-1}=R^{-1}\\cup{S}^{-1}\\\\ (R\\cap{S})^{-1}=R^{-1}\\cap{S}^{-1}\\\\ (\\overline{R})^{-1}=\\overline{R^{-1}}\\\\ (R-S)^{-1}=R^{-1}-S^{-1}\\\\ (A\\times{B})^{-1}=B\\times{A} (R\\cup{S})^{-1}=R^{-1}\\cup{S}^{-1}\\\\ (R\\cap{S})^{-1}=R^{-1}\\cap{S}^{-1}\\\\ (\\overline{R})^{-1}=\\overline{R^{-1}}\\\\ (R-S)^{-1}=R^{-1}-S^{-1}\\\\ (A\\times{B})^{-1}=B\\times{A} Closures of Relations Closure of R R with respect to P : The relation with property P containing R R such that it is a subset of every relation with property P containing R R . Diagonal relation: \\Delta=\\{(a,a)|a\\in{A}\\} \\Delta=\\{(a,a)|a\\in{A}\\} . Reflexive closure of R R : The smallest reflexive relation that contains R R . Formed by R\\cup\\Delta R\\cup\\Delta . Symmetric closure of R R : The smallest symmetric relation that contains R R . Formed by R\\cup{R}^{-1} R\\cup{R}^{-1} . Transitive closure of R R : The smallest transitive relation that contains R R . Path: A sequence of consecutive edges, denoted by x_0,x_1,x_2,...,x_{n-1},x_n x_0,x_1,x_2,...,x_{n-1},x_n , with length n n . Circuit (or cycle): A path of length n\\geq{1} n\\geq{1} that begins and ends at the same vertex. Path on relation: There is a path from a a to b b in R R if there is a sequence of elements a,x_1,x_2,...,x_{n\u22121} a,x_1,x_2,...,x_{n\u22121} , b b with (a,x_1)\\in{R} (a,x_1)\\in{R} , (x_1,x_2)\\in{R} (x_1,x_2)\\in{R} , ..., and (x_{n\u22121},b)\\in{R} (x_{n\u22121},b)\\in{R} . Theorem 1: Let R R be a relation on a set A A . There is a path of length n n , where n n is a positive integer, from a a to b b if and only if (a,b)\\in{R}^n (a,b)\\in{R}^n . Connectivity relation: Let R R be a relation on a set A A . The connectivity relation R^* R^* consists of the pairs (a,b) (a,b) such that there is a path of length at least one from a a to b b in R R . R^*=\\bigcup_{n=1}^\\infty{R}^n R^*=\\bigcup_{n=1}^\\infty{R}^n Theorem 2: The transitive closure of a relation R R equals the connectivity relation R^* R^* . Lemma 1: Let A A be a set with n elements, and let R R be a relation on A A . If there is a path of length at least one in R R from a a to b b , then there is such a path with length not exceeding n n . Moreover, when a\\neq{b} a\\neq{b} , if there is a path of length at least one in R R from a a to b b , then there is such a path with length not exceeding n\u22121 n\u22121 . R^*=\\bigcup_{i=1}^nR^i R^*=\\bigcup_{i=1}^nR^i Theorem 3: Let M_R M_R be the zero\u2013one matrix of the relation R R on a set with n n elements. Then the zero\u2013one matrix of the transitive closure R^* R^* is M_{R^*}=M_R\\vee{M}_R^{[2]}\\vee{M}_R^{[3]}\\vee...\\vee{M}_R^{[n]}. M_{R^*}=M_R\\vee{M}_R^{[2]}\\vee{M}_R^{[3]}\\vee...\\vee{M}_R^{[n]}. Interior vertices: Vertices of a path excluding the first and the last. W_0=M_R, W_i=[w_{ij}^{(k)}] W_0=M_R, W_i=[w_{ij}^{(k)}] , where w_{ij} w_{ij} is whether there is a path from v_i v_i to v_j v_j such that all interior vertices are in the first i i elements of the list (The list is prepared beforehand). W_n=M_{R^*}. W_n=M_{R^*}. Lemma 2: w_{ij}^{[k]}=w_{ij}^{[k-1]}\\vee(w_{ik}^{[k-1]}\\wedge{w}_{kj}^{[k-1]}) w_{ij}^{[k]}=w_{ij}^{[k-1]}\\vee(w_{ik}^{[k-1]}\\wedge{w}_{kj}^{[k-1]}) Equivalence Relations Equivalence Relation: A A relation on a set A A is called an equivalence relation if it is reflexive, symmetric, and transitive. Equivalent: Two elements a a and b b that are related by an equivalence relation are called equivalent. The notation a\\tilde{b} a\\tilde{b} is often used to denote that a a and b b are equivalent elements with respect to a particular equivalence relation. Congruence Modulo m m is an equivalence relation. Equivalence class: Let R R be an equivalence relation on a set A A . The set of all elements that are related to an element a of A A is called the equivalence class of a a . The equivalence class of a a with respect to R R is denoted by [a]_R [a]_R . When only one relation is under consideration, we can delete the subscript R R and write [a] [a] for this equivalence class. Representative of equivalence class: If b\\in[a]_R b\\in[a]_R , then b b is called a a representative of this equivalence class. Theorem 1: Let R R be an equivalence relation on a set A A . These statements for elements a a and b b of A A are equivalent: aRb \\\\ [a]=[b] \\\\ [a]\\cap[b]\\neq\\varnothing aRb \\\\ [a]=[b] \\\\ [a]\\cap[b]\\neq\\varnothing Partition: Partition of a set S S is a collection of disjoint nonempty subsets of S S that have S S as their union. Theorem 2: Let R R be an equivalence relation on a set S S . Then the equivalence classes of R R form a partition of S S . Conversely, given a partition \\{A_i|i\\in{I}\\} \\{A_i|i\\in{I}\\} of the set S S , there is an equivalence relation R R that has the sets A_i,i\\in{I} A_i,i\\in{I} , as its equivalence classes. The m congruence modulo classes are denoted by [0]_m, [1]_m, ..., [m\u22121]_m [0]_m, [1]_m, ..., [m\u22121]_m . Partial Ordering Partial ordering: A relation R R on a set S S is called a partial ordering or partial order if it is reflexive, antisymmetric, and transitive. Partially ordered set (poset): A set S S together with a partial ordering R R is called a partially ordered set, or poset, and is denoted by (S,R) (S,R) . Members of S S are called elements of the poset. Less/greater than or equal ( \\leq/\\geq \\leq/\\geq ), inclusion relation ( \\subseteq \\subseteq ), divisibility relation (|) are all partial orderings. Less/greater than ($$) are antisymmetric and transitive, but not reflexive, so they are not partial orderings. Comparable: The elements a a and b b of a poset (S,\\preceq) (S,\\preceq) are called comparable if either a\\preceq b a\\preceq b or b\\preceq a b\\preceq a . When a a and b b are elements of S S such that neither a\\preceq b a\\preceq b nor b\\preceq a b\\preceq a , a a and b b are called incomparable. Totally/linearly ordered set: If (S,\\preceq) (S,\\preceq) is a poset and every two elements of S S are comparable, S S is called a totally or linearly ordered set, and \\preceq \\preceq is called a total or linear order. A totally ordered set is also called a chain. Well-ordered set: (S,\\preceq) (S,\\preceq) is a well-ordered set if it is a poset such that \\preceq \\preceq is a total ordering and every nonempty subset of S S has a least element. The principle of well-ordered induction: Suppose that S S is a well-ordered set. Then P(x) P(x) is true for all $x\\in S $, if (inductive step:) For every y\\in{S} y\\in{S} , if P(x) P(x) is true for all x\\in{S} x\\in{S} with x\\prec{y} x\\prec{y} , then P(y) P(y) is true. Lexicographic ordering: The lexical ordering \\prec \\prec on A_1\\times{A}_2 A_1\\times{A}_2 is defined by specifying that one pair is less than a second pair if the first entry of the first pair is less than (in A_1 A_1 ) the first entry of the second pair, or if the first entries are equal, but the second entry of this pair is less than (in A_2 A_2 ) the second entry of the second pair. Hasse diagram: Start with the directed graph for this relation. First, Remove these loops because of reflexivity. Next, remove all edges that must be in the partial ordering because of transitivity. Finally, arrange each edge so that its initial vertex is below its terminal vertex and remove all the arrows on edges. Covers: An element y\\in{S} y\\in{S} covers an element x\\in{S} x\\in{S} if x\\prec{y} x\\prec{y} and there is no element z\\in{S} z\\in{S} such that x\\prec{z}\\prec{y} x\\prec{z}\\prec{y} . Covering relation: The set of pairs (x,y) (x,y) such that y y covers x x is called the covering relation of (S,\\preceq) (S,\\preceq) . Maximal element: An element of a poset is called maximal if it is not less than any element of the poset. The top element of a Hasse diagram. Minimal element: An element of a poset is called minimal if it is not greater than any element of the poset. The bottom element of a Hasse diagram. Greatest element: An element in a poset that is greater than every other element. Least element: An element in a poset that is less than every other element. Upper bound: Element greater than or equal to all the elements in a subset A A of S S . Lower bound: Element less than or equal to all the elements in a subset A A of S S . Least upper bound: Upper bound that is less than every other upper bound of a subset A A of S S . Greatest lower bound: Lower bound that is greater than every other lower bound of a subset A A of S S . Lattice: A partially ordered set in which every pair of elements has both a least upper bound and a greatest lower bound is called a lattice. (\\mathcal{P}(S),\\subseteq/\\supseteq) (\\mathcal{P}(S),\\subseteq/\\supseteq) is a lattice, with LUB and GLB being A\\cup{B} A\\cup{B} and A\\cap{B} A\\cap{B} . Compatible: A total ordering \\preceq \\preceq said to be compatible with the partial ordering R R if a\\preceq{b} a\\preceq{b} whenever aRb aRb . Topological sorting: Constructing a compatible total ordering from a partial ordering. Lemma 1: Every finite nonempty poset (S,\\preceq) (S,\\preceq) has at least one minimal element. Algorithm for topological sorting: Pick the least element and remove it from the poset. Can also be done with a Hasse diagram. Graphs and Graph Models (Undirected) graph: A graph G=(V,E) G=(V,E) consists of V, a nonempty set of vertices (or nodes) and E, a set of edges. Each edge has either one or two vertices associated with it, called its endpoints . An edge is said to connect , its endpoints. Simple graph: A graph in which each edge connects two different vertices and where no two edges connect the same pair of vertices is called a simple graph. Infinite graph: A graph with an infinite vertex set or an infinite number of edges is called an infinite graph. Finite graph: a graph with a finite vertex set and a finite edge set is called a finite graph. Multigraph: Graphs that may have multiple edges connecting the same vertices are called multigraphs. Loop: Edges that connect a vertex to itself. Pseudographs: Graphs that may include loops, and possibly multiple edges connecting the same pair of vertices or a vertex to itself. Directed graph (digraph): A directed graph (or digraph) (V,E) (V,E) consists of a nonempty set of vertices V and a set of directed edges (or arcs) E. Each directed edge is associated with an ordered pair of vertices. The directed edge associated with the ordered pair (u,v) (u,v) is said to start at u and end at v. Simple directed graph: A directed graph with no loops and no multiple directed edges that start and end at the same vertices. Directed multigraphs: Directed graphs that may have multiple directed edges from a vertex to a second (possibly the same) vertex. Multiplicity: When there are m directed edges, each associated to an ordered pair of vertices (u,v) (u,v) , we say that (u,v) (u,v) is an edge of multiplicity m. Mixed graph: A graph with both directed and undirected edges. Graph Terminology and Special Types of Graphs Adjacent (Neighbor): Two vertices u and v in an undirected graph G are called adjacent (or neighbors) in G if u and v are endpoints of an edge e of G. Such an edge e is called incident with the vertices u and v and e is said to connect u and v. Neighborhood: The set of all neighbors of a vertex v of G=(V,E) G=(V,E) , denoted by N(v), is called the neighborhood of v. If A is a subset of V , we denote by N(A) the set of all vertices in G that are adjacent to at least one vertex in A. So, N(A)=\\bigcup_{v\\in{A}}N(v) N(A)=\\bigcup_{v\\in{A}}N(v) . Degree: The degree of a vertex in an undirected graph is the number of edges incident with it, except that a loop at a vertex contributes twice to the degree of that vertex. The degree of the vertex v is denoted by deg(v) deg(v) . Theorem 1, The handshaking theorem: Let G=(V,E) G=(V,E) be an undirected graph with m edges. Then 2m=\\sum_{v\\in{V}}deg(v). 2m=\\sum_{v\\in{V}}deg(v). Theorem 2: An undirected graph has an even number of vertices of odd degree. Adjacent to/from, initial/terminal vertex: When (u,v) (u,v) is an edge of the graph G G with directed edges, u is said to be adjacent to v and v is said to be adjacent from u. The vertex u is called the initial vertex of (u,v) (u,v) , and v is called the terminal or end vertex of (u,v) (u,v) . The initial vertex and terminal vertex of a loop are the same. In/out degree: In a graph with directed edges the in-degree of a vertex v, denoted by deg^\u2212(v) deg^\u2212(v) , is the number of edges with v as their terminal vertex. The out-degree of v, denoted by deg^+(v) deg^+(v) , is the number of edges with v as their initial vertex. (Note that a loop at a vertex contributes 1 to both the in-degree and the out-degree of this vertex.) Theorem 3: Let G=(V,E) G=(V,E) be a graph with directed edges. Then \\sum_{v\\in{V}}deg^\u2212(v)=\\sum_{v\\in{V}}deg^+(v)=|E|. \\sum_{v\\in{V}}deg^\u2212(v)=\\sum_{v\\in{V}}deg^+(v)=|E|. Underlying undirected graph: The undirected graph that results from ignoring directions of edges is called the underlying undirected graph. Complete graph: A complete graph on n vertices, denoted by K_n K_n , is a simple graph that contains exactly one edge between each pair of distinct vertices. Noncomplete graph: A simple graph for which there is at least one pair of distinct vertex not connected by an edge. Cycle: A cycle C_n C_n , n\\geq3 n\\geq3 , consists of n n vertices v_1,v_2,...,v_n v_1,v_2,...,v_n and edges \\{v_1,v_2\\}, \\{v_2,v_3\\}, ..., \\{v_{n\u22121},v_n\\}, \\{v_n,v_1\\} \\{v_1,v_2\\}, \\{v_2,v_3\\}, ..., \\{v_{n\u22121},v_n\\}, \\{v_n,v_1\\} . Wheel: We obtain a wheel W_n when we add an additional vertex to a cycle C_n C_n , for n\\geq3 n\\geq3 , and connect this new vertex to each of the n n vertices in C_n C_n , by new edges. n-Cube: An n-dimensional hypercube, or n-cube, denoted by Q_n Q_n , is a graph that has vertices representing the 2^n 2^n bit strings of length n. Bipartite and bipartition: A simple graph G G is called bipartite if its vertex set V V can be partitioned into two disjoint sets V_1 V_1 and V_2 V_2 such that every edge in the graph connects a vertex in V_1 V_1 and a vertex in V_2 V_2 (so that no edge in G connects either two vertices in V_1 V_1 or two vertices in V_2 V_2 ). When this condition holds, we call the pair (V_1,V_2) (V_1,V_2) a bipartition of the vertex set V V of G G . Theorem 4: A simple graph is bipartite if and only if it is possible to assign one of two different colors to each vertex of the graph so that no two adjacent vertices are assigned the same color. Complete Bipartite Graph: A complete bipartite graph K_{m,n} K_{m,n} is a graph that has its vertex set partitioned into two subsets of m and n vertices, respectively with an edge between two vertices if and only if one vertex is in the first subset and the other vertex is in the second subset. Bipartite graphs can be used to model many types of applications that involve matching the elements of one set to elements of another. Regular graph: A simple graph is called regular if every vertex of this graph has the same degree. A regular graph is called n-regular if every vertex in this graph has degree n. Subgraph: A subgraph of a graph G=(V,E) G=(V,E) is a graph H=(W,F) H=(W,F) , where W\\subseteq{V} W\\subseteq{V} and F\\subseteq{E} F\\subseteq{E} . A subgraph H H of G G is a proper subgraph of G G if H\\neq G H\\neq G . Subgraph induced by vertex set: Let G=(V,E) G=(V,E) be a simple graph. The subgraph induced by a subset W W of the vertex set V V is the graph (W,F) (W,F) , where the edge set F F contains an edge in E E if and only if both endpoints of this edge are in W W . Spanning subgraph: H H is a spanning subgraph of G G if W=V W=V , F\\subseteq{E} F\\subseteq{E} . Union of graph: The union of two simple graphs G_1=(V_1,E_1) G_1=(V_1,E_1) and G_2= (V_2,E_2) G_2= (V_2,E_2) is the simple graph with vertex set V_1\\cup{V}_2 V_1\\cup{V}_2 and edge set E_1\\cup{E}_2 E_1\\cup{E}_2 . The union of G_1 G_1 and G_2 G_2 is denoted by G_1\\cup{G}_2 G_1\\cup{G}_2 . Representing Graphs and Graph Isomorphism Adjacency list: Vertex and Adjacent vertices for simple graph, Initial vertex and terminal vertices for directed graph. Adjacency matrix: A (or A_G ). Incidence matrix: 1 when edge j is incident with vertex i. Isomorphism: The simple graphs G_1=(V_1,E_1) G_1=(V_1,E_1) and G_2=(V_2,E_2) G_2=(V_2,E_2) are isomorphic if there exists a one-to-one and onto function f from V_1 V_1 to V_2 V_2 with the property that a and b are adjacent in G_1 G_1 if and only if f(a) f(a) and f(b) f(b) are adjacent in G_2 G_2 , for all a and b in V_1 V_1 . Such a function f is called an isomorphism. Two simple graphs that are not isomorphic are called nonisomorphic. Graph invariant: A property preserved by isomorphism of graphs is called a graph invariant. Graph invariants include: The number of vertices, the number of edges, the number of vertices of each degree (useful), bipartite, complete, wheel. Can also check isomorphism by making a function that maps vertices and checking whether it is preserving edges using adjacent matrix. Connectivity Path: A sequence of edges that begins at a vertex of a graph and travels from vertex to vertex along edges of the graph. When there are no multiple edges, the path can be denoted by its vertex sequence. Circuit: The path is a circuit if it begins and ends at the same vertex, and has length greater than zero. Pass through and traverse: The path or circuit is said to pass through the vertices in between or traverse the edges. Simple A path or circuit is simple if it does not contain the same edge more than once. Connected: An undirected graph is called connected if there is a path between every pair of distinct vertices of the graph. An undirected graph that is not connected is called disconnected. Theorem 1: There is a simple path between every pair of distinct vertices of a connected undirected graph. Connected component: A maximal connected subgraph of a graph. Cut vertex: A vertex is a cut vertex (or articulation point), if removing it and all edges incident with it results in more connected components than in the original graph. Cut edge: If removal of an edge creates more components, the edge is called a cut edge or bridge. Strongly connected: A directed graph is strongly connected if there is a path from a to b and from b to a whenever a and b are vertices in the graph. Weakly connected: A directed graph is weakly connected if there is a path between every two vertices in the underlying undirected graph. Any strongly connected directed graph is also weakly connected. Strongly connected component: A maximal strongly connected subgraph, is called a strongly connected component or strong component. Two graphs are isomorphic only if they have simple circuits of the same length. Two graphs are isomorphic only if they contain paths that go through vertices so that the corresponding vertices in the two graphs have the same degree. Theorem 2: Let G G be a graph with adjacency matrix A A with respect to the ordering v_1,v_2,...,v_n v_1,v_2,...,v_n of the vertices of the graph (with directed or undirected edges, with multiple edges and loops allowed). The number of different paths of length r r from v_i v_i to v_j v_j , where r r is a positive integer, equals the (i,j) (i,j) th entry of A^r A^r . The graph G G is connected if and only if every off-diagonal entry of A+A^2+A^3+...+A^{n\u22121} A+A^2+A^3+...+A^{n\u22121} is positive. The check can end earlier if an A^i A^i is found to be so. Euler and Hamilton Paths Euler circuit: A simple circuit containing every edge of graph G. Euler path: A simple path containing every edge of graph G. Theorem 1: A connected multigraph with at least two vertices has an Euler circuit if and only if each of its vertices has even degree. Algorithm 1: Constructing Euler Circuits. Theorem 2: A connected multigraph has an Euler path but not an Euler circuit if and only if it has exactly two vertices of odd degree. Hamilton path: A simple path in a graph G G that passes through every vertex exactly once. Hamilton circuit: A simple circuit in a graph G G that passes through every vertex exactly once. A graph with a vertex of degree one cannot have a Hamilton circuit. If a vertex in the graph has degree two, then both edges that are incident with this vertex must be part of any Hamilton circuit. When a Hamilton circuit is being constructed and this circuit has passed through a vertex, then all remaining edges incident with this vertex, other than the two used in the circuit, can be removed from consideration. A Hamilton circuit cannot contain a smaller circuit within it. Dirac\u2019s theorem: If G G is a simple graph with n n vertices with n\\geq3 n\\geq3 such that the degree of every vertex in G G is at least \\frac{n}2 \\frac{n}2 , then G G has a Hamilton circuit. Ore\u2019s theorem: If G G is a simple graph with n n vertices with n\\geq3 n\\geq3 such that deg(u)+deg(v)\\geq{n} deg(u)+deg(v)\\geq{n} for every pair of nonadjacent vertices u and v in G G , then G G has a Hamilton circuit. Finding Gray code is equivalent to finding a Hamilton circuit for n-cube. Shortest-Path Problems Algorithm 1: Dijkstra\u2019s Algorithm Theorem 1: Dijkstra\u2019s algorithm finds the length of a shortest path between two vertices in a connected simple undirected weighted graph. Theorem 2: Dijkstra\u2019s algorithm uses O(n^2) O(n^2) operations (additions and comparisons) to find the length of a shortest path between two vertices in a connected simple undirected weighted graph with n vertices. Traveling salesperson problem: The circuit of minimum total weight in aweighted, complete, undirected graph that visits each vertex exactly once and returns to its starting point. This is equivalent to asking for a Hamilton circuit with minimum total weight in the complete graph, because each vertex is visited exactly once in the circuit. Planar Graphs Planar: A graph is called planar if it can be drawn in the plane without any edges crossing (where a crossing of edges is the intersection of the lines or arcs representing them at a point other than their common endpoint). Such a drawing is called a planar representation of the graph. Proving no planar representation: Find a loop, divide the plane into regions, divide and conquer. K_{3,3} K_{3,3} and K_5 K_5 are non-planar. Euler\u2019s formula: Let G G be a connected planar simple graph with e edges and v vertices. Let r be the number of regions in a planar representation of G. Then r=e\u2212v+2. r=e\u2212v+2. Proved by mathematical induction. Corollary 1: If G G is a connected planar simple graph with e e edges and v v vertices, where v\\geq3 v\\geq3 , then e\\leq3v\u22126 e\\leq3v\u22126 . Can be used to show that a graph is non-planar. Degree of a region: the number of edges on the boundary of this region. Proved by 2e\\geq3r 2e\\geq3r and Euler\u2019s formula. Corollary 2: If $$$ is a connected planar simple graph, then G G has a vertex of degree not exceeding five. Corollary 3: If a connected planar simple graph has e edges and v vertices with v\\geq3 v\\geq3 and no circuits of length three, then e\\leq2v\u22124 e\\leq2v\u22124 . Proved like corollary 1, where 2e\\geq4r 2e\\geq4r . Can be used to show that a graph is non-planar. Elementary subdivision: If a graph is planar, so will be any graph obtained by removing an edge {u,v} and adding a new vertex w together with edges \\{u,w\\} \\{u,w\\} and \\{w,v\\} \\{w,v\\} . Such an operation is called an elementary subdivision. Homeomorphic: The graphs G_1=(V_1,E_1) G_1=(V_1,E_1) and G_2=(V_2,E_2) G_2=(V_2,E_2) are called homeomorphic if they can be obtained from the same graph by a sequence of elementary subdivisions. Kuratowski\u2019s Theorem: A graph is nonplanar if and only if it contains a subgraph (deleting vertices and incident edges) homeomorphic to K_{3,3} K_{3,3} or K_5 K_5 . K_{3,3} K_{3,3} can also be a hexagon with opposing vertices connected, and the parts are the two sets of three unconnected vertices. Graph Coloring Dual graph: Each map in the plane can be represented by a graph. To set up this correspondence, each region of the map is represented by a vertex. Edges connect two vertices if the regions represented by these vertices have a common border. Two regions that touch at only one point are not considered adjacent. The resulting graph is called the dual graph of the map. Any map in the plane has a planar dual graph. Coloring: A coloring of a simple graph is the assignment of a color to each vertex of the graph so that no two adjacent vertices are assigned the same color. Chromatic number: The chromatic number of a graph is the least number of colors needed for a coloring of this graph, denoted by \\chi(G) \\chi(G) . The four color theorem: The chromatic number of a planar graph is no greater than four. Nonplanar graphs can have arbitrarily large chromatic numbers. Show that the chromatic number of a graph is k: Show that the graph can be colored with k colors. This can be done by constructing such a coloring. Show that the graph cannot be colored using fewer than k colors, when 3 it is often shown by a three vertices loop. The chromatic number of a complete graph K_n K_n is n because every vertex is connected with all others, and this does not contradict the four color theorem because K_n K_n is not planar when n>4. The chromatic number of a complete bipartite graph K_{m,n} K_{m,n} is 2, by coloring either set a color. The chromatic number of a cycle graph C_n C_n , is 1 when n=1, 2 when n is even, 3 when n is odd and n>1. Equivalent to scheduling and required number of time slots.","title":"\u79bb\u6563\u6570\u5b66"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#_1","text":"","title":"\u79bb\u6563\u6570\u5b66"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#methods-of-proving-theorems","text":"If we want to prove $q$ is true ,there are three methods:","title":"Methods of Proving Theorems"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#direct-proofs","text":"p\\land (p\\to q) \\text{\\ is true}","title":"Direct Proofs"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#proof-by-contradiction","text":"\\lnot q\\to (\\lnot r\\land r)\\text{\\ is true}","title":"Proof by Contradiction"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#proof-by-contrposition","text":"p\\land (\\lnot q\\to \\lnot p)\\text{\\ is true} To be honest ,this is a specific case base on contradiction ,which p is subsititude for r ,generally , p is told in question stem ,and r is not.","title":"Proof by Contrposition"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#propositional-logic","text":"Proposition: A declarative sentence that is either true or false, but not both. Statements that can not be decided is not a proposition. Propositional/Statement variable: p, q, r, s Truth value: T, F Propositional Calculus/Logic: The area of logic that deals with propositions. Compound proposition: Proposition formed from existing propositions using operators. Operator: Not \u00acp e.g. It is not the case that \u2026 Conjunction/And p \u2227 q e.g. \u2026 and/but \u2026 Disjunction/Or p \u2228 q e.g. \u2026 or \u2026 Exclusive or p \u2295 q Conditional Statement / Implication p \u2192 q if p, then q p only if q p implies q p is a sufficient condition for q q is a necessary condition for p q follows from / if / when / whenever p q unless \u00acp False only when p is true, but q is false; when p is false, p \u2192 q is defined to be true. Converse p \u2192 q to q \u2192 p Inverse p \u2192 q to \u00acp \u2192 \u00acq Contrapositive Converse and inverse p \u2192 q to \u00acq \u2192 \u00acp Biconditional statement p \u2194 q p if and only if q p is necessary and sufficient for q if p then q, and conversely p iff q p \u2194 q == (p \u2192 q) \u2227 (q \u2192 p), only true when p and q have the same value Operator precedence: (), \u00ac, \u2227 \u2228, \u2192, \u2194 Bit: 1 for T, 0 for F. Bit string: a sequence of zero or more bits. Bit operation: Bitwise AND, Bitwise OR, Bitwise XOR","title":"Propositional logic"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#applications-of-propositional-logic","text":"Translating English sentences: to logical proposition. Consistent system specification: no conflicting requirements; a set of value to satisfy all the statements translated; does not necessarily has a real usage.","title":"Applications of propositional logic"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#propositional-equivalences","text":"Classification of compound proposition: Tautology Always true Contradiction Always false Contingency Neither a tautology nor a contradiction Logical equivalence: Compound propositions that have the same truth values in all possible cases: p \u2194 q is a tautology p \u2261 q, p \u21d4 q Logical Equivalences: Equivalence Name p \u2227 T \u2261 p Identity laws p \u2228 F \u2261 p p \u2228 T \u2261 T Domination laws p \u2227 F \u2261 F p \u2228 p \u2261 p Idempotent laws p \u2227 p \u2261 p \u00ac(\u00acp) \u2261 p Double negation law p \u2228 q \u2261 q \u2228 p Commutative laws p \u2227 q \u2261 q \u2227 p (p \u2228 q) \u2228 r \u2261 p \u2228 (q \u2228 r) Associative laws (p \u2227 q) \u2227 r \u2261 p \u2227 (q \u2227 r) p \u2228 (q \u2227 r) \u2261 (p \u2228 q) \u2227 (p \u2228 r) Distributive laws p \u2227 (q \u2228 r) \u2261 (p \u2227 q) \u2228 (p \u2227 r) \u00ac(p \u2227 q) \u2261 \u00acp \u2228 \u00acq De Morgan\u2019s laws \u00ac(p \u2228 q) \u2261 \u00acp \u2227 \u00acq p \u2228 (p \u2227 q) \u2261 p Absorption laws p \u2227 (p \u2228 q) \u2261 p p \u2228 \u00acp \u2261 T Negation laws p \u2227 \u00acp \u2261 F p \u2192 q \u2261 \u00acp \u2228 q p \u2194 q \u2261 (p \u2227 q) \u2228 (\u00acp \u2227 \u00acq) Mine: \u00ac(p \u2192 q) \u2261 p \u2227 \u00acq Mine: p \u2228 (\u00acp \u2227 q) \u2261 p \u2228 q See Section 3.1 No.30 Prove Logical Equivalence: Truth table or developing a series of logical equivalences. Prove Not Logically Equivalent: (Simplify first) and find a counterexample. Propositional Satisfiability: An assignment of truth values that makes it true. Truth table, or whether its negation is a tautology. (or say whether itself is a contradiction?)","title":"Propositional equivalences"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#predicates-and-qualifiers","text":"Predicate: Statements involving variables, the variables are called subjects, the other is called a predicate. The statement of P(x) is also called the value of Propositional function P at x. Precondition: Conditions for valid input. Postcondition: Conditions for correct output. Qualification: Express the extent to which a predicate is true over a range of elements. ((Domain / universe) of discourse) / domain: A predicate is true for a variable in a particular domain. Predicate calculus: The area of logic that deals with predicates and quantifiers. Universal qualification: For every element. \u2200x P(x): For all / every x P (x). An element for which P(x) is false is called a counterexample of \u2200x P(x). Existential qualification: For one or more element. \u2203x P(x): There exists an element x in the domain such that P(x). Uniqueness qualification: \u2203!x P(x) or \u2203_1 x P(x) There exists a unique x such that P (x) or There is one and only one x such that P (x). Abbreviated qualifier notation: Use condition for domain. Or use \u2200x P(x) \u2192 Q(x) for using P(x) as condition for domain. Quantifiers (\u2200 and \u2203) have higher precedence than all logical operators from propositional calculus. i.e. They absorb less. Occurrence of variable is bound: Quantifier is used on the variable. All the variables that occur in a propositional function must be bound or set equal to a particular value to turn it into a proposition. Scope of quantifier: The part of a logical expression to which a quantifier is applied. The same letter is often used to represent variables bound by different quantifiers with scopes that do not overlap. Statements involving predicates and quantifiers are logically equivalent: If and only if they have the same truth value no matter which predicates are substituted into these statements and which domain of discourse is used for the variables in these propositional functions. S \u2261 T \u2200x (P(x) \u2227 Q(x)) \u2261 \u2200x P(x) \u2227 \u2200x Q(x) \u2203x (P(x) \u2228 Q(x)) \u2261 \u2203x P(x) \u2228 \u2203x Q(x) De Morgan\u2019s laws for quantifiers: \u00ac\u2200x P(x) \u2261 \u2203x \u00acP(x) \u00ac\u2203x Q(x) \u2261 \u2200x \u00acQ(x) Translating from English into Logical Expression: \u2026 Using Quantifiers in System Specifications: \u2026","title":"Predicates and Qualifiers"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#nested-qualifiers","text":"Nested quantifiers: One quantifier is within the scope of another. Understanding Statements Involving Nested Quantifiers: \u2026 The order of the quantifiers is important, unless all the quantifiers are universal quantifiers or all are existential quantifiers. Statement Condition for true \u2200x\u2200y P(x, y) P (x, y) is true for every pair x, y. \u2200y\u2200x P(x, y) \u2200x\u2203y P(x, y) For every x there is a y for which P (x, y) is true. \u2203x\u2200y P(x, y) There is an x for which P (x, y) is true for every y. \u2203x\u2203y P(x, y) There is a pair x, y for which P (x, y) is true. \u2203y\u2203x P (x, y) Translating: \u2026 Negation: Recursively\u2026","title":"Nested Qualifiers"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#normal-forms","text":"(Disjunctive / conjunctive) clause: Disjunctions / Conjunctions with literals (optionally negated) as its disjuncts / conjuncts. Disjunctive / Conjunctive normal form (DNF / CNF): A disjunction / conjunction with conjunctive / disjunctive clauses as its disjuncts / conjuncts. Full disjunctive / conjuctive normal form: Each of its variables appears exactly once in every clause. Obtained by adding \u2227 (\u00acP(x) \u2228 P(x)) to its conjuction disjuncts / \u2228 (\u00acP(x) \u2227 P(x)) to its disjunction conjuncts. Prenex normal form: Qualifier\u2026Predicate_without_quaulifier","title":"Normal forms"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#inference","text":"Argument: a sequence of propositions. Premise: All but the final proposition in the argument. Conclusion: The final proposition in the argument. Valid argument: An argument is valid if the truth of all its premises implies that the conclusion is true. Fallacy: Common forms of incorrect reasoning which lead to invalid arguments. Argument form: A sequence of compound propositions involving propositional variables. Valid argument form: An argument form is valid no matter which particular propositions are substituted for the propositional variables in its premises, the conclusion is true if the premises are all true. The key to showing that an argument in propositional logic is valid is to show that its argument form is valid. Using truth table to show that an argument form is valid is tedious. Modus ponens (Mode that affirms) / the law of detachment: (p \u2227 (p \u2192 q)) \u2192 q Argument can be valid, but if any of its premise is false, its conclusion is false. Tautology Name (p \u2227 (p \u2192 q)) \u2192 q Modus ponens (\u00acq \u2227 (p \u2192 q)) \u2192 \u00acp Modus tollens ((p \u2192 q) \u2227 (q \u2192 r)) \u2192 (p \u2192 r) Hypothetical syllogism ((p \u2228 q) \u2227 \u00acp) \u2192 q Disjunctive syllogism p \u2192 (p \u2228 q) Addition (p \u2227 q) \u2192 p Simplification ((p) \u2227 (q)) \u2192 (p \u2227 q) Conjunction ((p \u2228 q) \u2227 (\u00acp \u2228 r)) \u2192 (q \u2228 r) Resolution p \u2227 q \u2192 (r \u2192 s) \u2261 p \u2227 q \u2227 r \u2192 s, r is additional premise. Resolution is commonly used: ((p \u2228 q) \u2227 (\u00acp \u2228 r)) \u2192 (q \u2228 r) Also rewrite premises into separate clauses can help. Fallacy Affirming the conclusion ((p \u2192 q) \u2227 q) \u2192 p is not a tautology. Denying the hypothesis ((p \u2192 q) \u2227 \u00acp) \u2192 \u00acq is not tautology. Begging the question (Circular reasoning) one or more steps of a proof are based on the truth of the statement being proved. Rules of inference for quantified statements Rule of Inference Name \u2200x P(x) \u2234 P(c) Universal instantiation P(c) for an arbitrary c \u2234 \u2200x P(x) Universal generalization \u2203x P(x) \u2234 P(c) for some element c Existential instantiation P(c) for some element c \u2234 \u2203x P(x) Existential generalization Universal modus ponens: \u2200x (P(x) \u2192 Q(x)), P(a), \u2234 Q(a) Universal modus tollens: \u2200x (P(x) \u2192 Q(x)), \u00acQ(a), \u2234 \u00acP(a)","title":"Inference"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#introduction-to-proofs","text":"Theorem / Fact / Result (\u5b9a\u7406): A statement that can be shown to be true. Propositions: Less important theorems. Axiom / Postulate (\u516c\u7406): Statements we assume to be true. Lemma (\u5f15\u7406): A less important theorem that is helpful in the proof of other results. (plural lemmas or lemmata) Corollary (\u63a8\u8bba): Theorem that can be established directly from a theorem that has been proved. Conjecture (\u731c\u60f3): Statement that is being proposed to be a true statement. Direct Proof: Direct proof of a conditional statement p \u2192 q is constructed when the first step is the assumption that p is true; subsequent steps are constructed using rules of inference, with the final step showing that q must also be true. Indirect Proofs: Proofs that do not start with the premises and end with the conclusion. Proof by Contraposition (\u8bc1\u660e\u9006\u5426\u547d\u9898): We take \u00acq as a premise, and using axioms, definitions, and previously proven theorems, together with rules of inference, we show that \u00acp must follow. Vacuous Proofs: If we can show that p is false, then we have a proof of the conditional statement p \u2192 q. Trivial Proof: By showing that q is true, it follows that p \u2192 q must also be true. Proofs by Contradiction (\u53cd\u8bc1): We can prove that p is true if we can show that \u00acp \u2192 (r \u2227 \u00acr) is true for some proposition r. i.e. r is premise and \u00acr is proved if \u00acp. To rewrite a proof by contraposition of p \u2192 q as a proof by contradiction, we suppose that both p and \u00acq are true. Then, we use the steps from the proof of \u00acq \u2192 \u00acp to show that \u00acp is true. Proofs of Equivalence: (p \u2194 q) \u2194 (p \u2192 q) \u2227 (q \u2192 p). (if and only if)(p_1 \u2194 p_2 \u2194 \u00b7\u00b7\u00b7 \u2194 p_n) \u2194 (p_1 \u2192 p_2) \u2227 (p_2 \u2192 p_3) \u2227 \u00b7\u00b7\u00b7 \u2227 (p_n \u2192 p_1). Counterexamples: To show that a statement of the form \u2200x P(x) is false, we only need to find a counterexample. Mistakes in proofs: Division by zero, Affirming the conclusion, Denying the hypothesis, Begging the question.","title":"Introduction to Proofs"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#proof-methods-and-strategy","text":"Exhaustive Proof (Proofs by exhaustion): [(p_1 \u2228 p_2 \u2228 \u00b7 \u00b7 \u00b7 \u2228 p_n) \u2192 q] \u2194 [(p_1 \u2192 q) \u2227 (p_2 \u2192 q) \u2227 \u00b7 \u00b7 \u00b7 \u2227 (p_n \u2192 q)] Eliminate cases when using exhaustive proof. Without loss of generality (WLOG): Other cases can be proved with the same method as this case. Exhaustive proof can be invalid if not all the cases are covered. Existence proof: A proof of a proposition of the form \u2203x P(x). Constructive: Given by finding a witness. Nonconstructive: Some other way, e.g. negation leads to contradiction. Uniqueness Proof: Assert that there is exactly one element with this property. \u2203x(P(x) \u2227 \u2200y(y = x \u2192 \u00acP(y))). Forward and backward reasoning: \u2026 Adapting existing proofs: \u2026 Look for counterexamples: \u2026 Tiling: Color the board with n colors. If top-right and bottom-left square is removed, the number of squares each color is unequal, but eachdomino / polymino must cover exactly one square of each color, so tiling is impossible.","title":"Proof Methods and Strategy"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#set","text":"Set: A set is an unordered collection of objects. a \u2208 A, a \u2209 A. Roster method: List all the members of a set. Can use \u2026 when the general pattern is obvious. Set builder pattern: {x \u2208 set | predicate(x)} or {x | predicate(x), x \u2208 set} Name | Description \u2115 | the set of natural numbers \u2124 | the set of integers \u2124 | the set of positive integers \u211a | the set of rational numbers \u211d | the set of real numbers \u211d^+ \u211d^+ | the set of positive real numbers \u2102 | the set of complex numbers Interval | Set a, b | {x | a \u2264 x \u2264 b} [a, b) | {x | a \u2264 x < b} (a, b] | {x | a < x \u2264 b} (a, b) (Open) | {x | a < x < b} Equal: Two sets are equal if and only if they have the same elements. \u2200x(x \u2208 A \u2194 x \u2208 B). A = B. The order and repetition of elements does not matter: {5, 3, 3, 1} = {1, 3, 5} Empty/null set: \u2205 Singleton set: Set with a single element. \u2205 is not {\u2205}. Venn diagram: Rectangle for universal set, circle for set, dot for element. Subset: The set A is a subset of B if and only if every element of A is also an element of B. If and only if \u2200x(x \u2208 A \u2192 x \u2208 B). A \u2286 B. Showing that A is a Subset of B: To show that A \u2286 B, show that if x belongs to A then x also belongs to B. Showing that A is Not a Subset of B: To show that A \\not\\subseteq \\not\\subseteq B, find a single x \u2208 A such that x \u2209 B. For every set S, \u2205 \u2286 S and S \u2286 S. Proper subset: A \u2286 B and A \u2260 B. A \u2282 B. Showing Two Sets are Equal: To show that two sets A and B are equal, show that A \u2286 B and B \u2286 A. Size of a set: If there are exactly n distinct elements in S where n is a nonnegative integer, then S is a finite set and that n is the cardinality of S, written as |S|. Infinite set: A set is said to be infinite if it is not finite. Power set: Given a set S, the power set of S is the set of all subsets of the set S. \\mathcal{P}(S) \\mathcal{P}(S) . e.g. P(A) \u2208 P(B) \u21d2 P(A) \u2286 B \u21d2 A \u2208 B We can reconstruct the original set from the union of all element sets in its power set. So power set uniquely identifies a set. \u2205 cannot be a power set. Ordered n-tuple: The ordered collection that has $a_1 $ as its first element, a_2 a_2 as its second element, \u2026 , and a_n a_n as its nth element. ( a_1 a_1 , a_2 a_2 , \u2026 , a_n a_n ). Cartesian Product: A \u00d7 B = {(a, b) | a \u2208 A \u2227 b \u2208 B}.|A \u00d7 B| = |A||B| A_1 \u00d7 A_2 \u00d7 \u2026 \u00d7 A_n A_1 \u00d7 A_2 \u00d7 \u2026 \u00d7 A_n = {( a_1, a_2, \u2026 , a_n a_1, a_2, \u2026 , a_n ) | a_i \u2208 A_i a_i \u2208 A_i for i = 1, 2, \u2026 , n}. Relation: A subset R of the Cartesian product A \u00d7 B is called a relation. Using Set Notation with Quantifiers: \u2200x\u2208 S(P (x)) is shorthand for \u2200x(x \u2208 S \u2192 P (x)). Truth set: The truth set of P to be the set of elements x in D for which P(x) is true.","title":"Set"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#set-operations","text":"Union: The union of the sets A and B, denoted by A \u222a B, is the set that contains those elements that are either in A or in B, or in both. A \u222a B = {x | x \u2208 A \u2228 x \u2208 B}. Intersection: The intersection of the sets A and B, denoted by A \u2229 B, is the set containing those elements in both A and B. A \u2229 B = {x | x \u2208 A \u2227 x \u2208 B}. Disjoint: Two sets are called disjoint if their intersection is the empty set. Difference: The difference of A and B, denoted by A \u2212 B (or A \\ B), is the set containing those elements that are in A but not in B. The difference of A and B is also called the complement of B with respect to A. A \u2212 B = {x | x \u2208 A \u2227 x \u2208 / B}. Complement: Let U be the universal set. The complement of the set A, denoted by \\overline{A} \\overline{A} , is the complement of A with respect to U. Therefore, the complement of the set A is U \u2212 A. A \u2212 B = A \u2229 \\overline{B} \\overline{B} . Set Identities: Identity Name A \u2229 U = A Identity laws A \u222a\u2205= A A \u222a U = U Domination laws A \u2229\u2205=\u2205 A \u222a A = A Idempotent laws A \u2229 A = A \\overline{(\\overline{A})} = A \\overline{(\\overline{A})} = A Complementation law A \u222a B = B \u222a A Commutative laws A \u2229 B = B \u2229 A A \u222a (B \u222a C) = (A \u222a B) \u222a C Associative laws A \u2229 (B \u2229 C) = (A \u2229 B) \u2229 C A \u222a (B \u2229 C) = (A \u222a B) \u2229 (A \u222a C) Distributive laws A \u2229 (B \u222a C) = (A \u2229 B) \u222a (A \u2229 C) \\overline{A \u2229 B} = \\overline{A} \u222a \\overline{B} \\overline{A \u2229 B} = \\overline{A} \u222a \\overline{B} De Morgan\u2019s laws $\\overline{A \u222a B} = $ \\overline{A}\u2229\\overline{B} \\overline{A}\u2229\\overline{B} A \u222a (A \u2229 B) = A Absorption laws A \u2229 (A \u222a B) = A A \u2229 \\overline{A} \\overline{A} =\u2205 Complement laws A \u222a \\overline{A} \\overline{A} = U Prove set identity: Use set builder pattern and definition. Membership table: Set identities can also be proved using membership tables. We consider each combination of sets that an element can belong to and verify that elements in the same combinations of sets belong to both the sets in the identity. To indicate that an element is in a set, a 1 is used; to indicate that an element is not in a set, a 0 is used. Generalized Unions and Intersections: Because unions and intersections of sets satisfy associative laws, the sets A \u222a B \u222a C and A \u2229 B \u2229 C are well defined. The union of a collection of sets: The set that contains those elements that are members of at least one set in the collection. \\bigcup_{i=1}^{n}{A_i} \\bigcup_{i=1}^{n}{A_i} The intersection of a collection of sets is the set that contains those elements that are members of all the sets in the collection. \\bigcap_{i=1}^{n}{A_i} \\bigcap_{i=1}^{n}{A_i} Computer Representation of Sets: One of the methods is to use bit strings.","title":"Set Operations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#function","text":"Function/Mapping/Transformation: Let A and B be nonempty sets. A function f from A to B is an assignment of exactly one element of B to each element of A. f : A \u2192 B. f(a) = b. If f is a function from A to B, we say that A is the domain of f and B is the codomain of f. If f (a) = b, we say that b is the image of a and a is a preimage of b. The range, or image, of f is the set of all images of elements of A. Also, if f is a function from A to B, we say that f maps A to B. Two functions are equal: When they have the same domain, have the same codomain, and map each element of their common domain to the same element in their common codomain. Let f_1 f_1 and f_2 f_2 be functions from A to \\mathbb{R} \\mathbb{R} , then $f_1 + f_2 $ and f_1 f_2 f_1 f_2 are also functions from A to \\mathbb{R} \\mathbb{R} defined for all x \u2208 A by : (f_1 + f_2)(x) = f_1(x) + f_2(x) \\\\ (f_1f_2)(x) = f_1(x)f_2(x) (f_1 + f_2)(x) = f_1(x) + f_2(x) \\\\ (f_1f_2)(x) = f_1(x)f_2(x) The image of S under the function f: f (S) = {t | \u2203s \u2208 S (t = f (s))} = {f (s)| s \u2208 S}. One-to-one/injection (\u5355\u5c04): if and only if f (a) = f (b) implies that a = b for all a and b in the domain of f. A function is said to be injective if it is one-to-one. \\forall a\\forall b(f(a) = f(b) \\rightarrow a = b) \\forall a\\forall b(f(a) = f(b) \\rightarrow a = b) Increasing if f (x) \u2264 f (y), and strictly increasing: if f (x) <f (y), whenever x < y and x and y are in the domain of f. Decreasing if f (x) \u2265 f (y), and strictly decreasing if f (x) > f (y), whenever x < y and x and y are in the domain of f. Onto/surjection (\u6ee1\u5c04): if and only if for every element b \u2208 B there is an element a \u2208 A with f (a) = b. A function f is called surjective if it is onto. One-to-one correspondence / bijection (\u53cc\u5c04): if it is both one-to-one and onto. We also say that such a function is bijective. To show that f is injective: Show that if f (x) = f (y) for arbitrary x, y \u2208 A with x \u2260 y, then x = y. To show that f is not injective: Find particular elements x, y \u2208 A such that x \u2260 y and f (x) = f (y). To show that f is surjective: Consider an arbitrary element y \u2208 B and find an element x \u2208 A such that f (x) = y. To show that f is not surjective: Find a particular y \u2208 B such that f (x) \u2260 y for all x \u2208 A. Inverse function: Let f be a one-to-one correspondence from the set A to the set B. The inverse function of f is the function that assigns to an element b belonging to B the unique element a in A such that f(a) = b. The inverse function of f is denoted by f^{\u22121} f^{\u22121} . Hence, f^{\u22121}(b) = a f^{\u22121}(b) = a when f(a) = b. Composition of functions: Let g be a function from the set A to the set B and let f be a function from the set B to the set C. The composition of the functions f and g, denoted for all a \u2208 A by f \u25e6 g, is defined by (f \u25e6 g)(a) = f(g(a)) (f \u25e6 g)(a) = f(g(a)) The graphs of functions: \u2026 Some important functions: Floor(x): [x]","title":"Function"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#sequence","text":"Sequence: A function from a subset of the set of integers (usually either the set {0, 1, 2, \u2026} or the set {1, 2, 3, \u2026}) to a set S. We use the notation a_n a_n to denote the image of the integer n. We call a_n a_n a term of the sequence. Geometric progression: a, ar, ar^2,\u2026 , ar^n a, ar, ar^2,\u2026 , ar^n , \u2026 where a is initial term, r is common ratio. Arithmetic progression: a, a + d, a + 2d, \u2026 , a + nd, \u2026 where a is initial term, d is common difference. String: Finite sequence, where length is the number of terms in the string. Empty string: \u03bb. Recurrence relation: An equation that expresses a_n a_n in terms of one or more of the previous terms of the sequence. Initial condition: Specify the terms that precede the first term where the recurrence relation takes effect. Fibonacci sequence: f_0, f_1, f_2 f_0, f_1, f_2 ,\u2026 , is defined by the initial conditions f_0 = 0, f_1 = 1 f_0 = 0, f_1 = 1 , and the recurrence relation f_n = f_{n\u22121} + f{n\u22122} f_n = f_{n\u22121} + f{n\u22122} . Closed formula: We say that we have solved the recurrence relation together with the initial conditions when we find an explicit formula, called a closed formula, for the terms of the sequence. Finding closed formula: Iteration, forward substitution or backward substitution. Lucas sequence: Fibonacci sequence with different initial condition. Summation notation: \\sum_{i=m}^n{f(i)} \\sum_{i=m}^n{f(i)} where i is index of summation, m is lower limit, n is upper limit. \\sum_{i=0}^n(ar^i)=\\frac{ar^{n+1}-a}{r-1},r{\\neq}1 \\\\ \\sum_{i=0}^ni=\\frac{n(n+1)}{2} \\\\ \\sum_{i=0}^ni^2=\\frac{n(n+1)(2n+1)}{6} \\\\ \\sum_{i=0}^ni^3=\\frac{n^2(n+1)^2}{4} \\\\ \\sum_{i=0}^{\\infty}x^i,|x|<1=\\frac{1}{1-x} \\\\ \\sum_{i=0}^{\\infty}ix^{i-1},|x|<1=\\frac{1}{(1-x)^2} \\sum_{i=0}^n(ar^i)=\\frac{ar^{n+1}-a}{r-1},r{\\neq}1 \\\\ \\sum_{i=0}^ni=\\frac{n(n+1)}{2} \\\\ \\sum_{i=0}^ni^2=\\frac{n(n+1)(2n+1)}{6} \\\\ \\sum_{i=0}^ni^3=\\frac{n^2(n+1)^2}{4} \\\\ \\sum_{i=0}^{\\infty}x^i,|x|<1=\\frac{1}{1-x} \\\\ \\sum_{i=0}^{\\infty}ix^{i-1},|x|<1=\\frac{1}{(1-x)^2}","title":"Sequence"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#cardinality-of-sets","text":"Same cardinality: If and only if there is a one-to-one correspondence from A to B. |A| = |B| Less cardinality: If there is a one-to-one function from A to B, the cardinality of A is less than or the same as the cardinality of B. |A| \u2264 |B|. When |A| \u2264 |B| and A and B have different cardinality, we say that the cardinality of A is less than the cardinality of B. |A| < |B|. Countable set: A set that is either finite or has the same cardinality as the set of positive integers is called countable. Uncountable set: A set that is not countable is called uncountable. When an infinite set S is countable, we denote the cardinality of S by \\aleph_0 \\aleph_0 (where \u05d0 is aleph). |S| = \\aleph_0 \\aleph_0 . S has cardinality \u201caleph null\u201d. Prove by showing one-to-one correspondence, or can be listed. \u2124 is countable: f(n) = n / 2, when n is even; -(n - 1) / 2, when n is odd. \u211a^+ \u211a^+ is countable: Use Cantor Diagonalization Argument for listing. \u211d is uncountable: 0.d_i, d_i = 0 0.d_i, d_i = 0 , if d_{ii} \\neq 0 d_{ii} \\neq 0 ; 1, if d_{ii} = 0 d_{ii} = 0 cannot be listed. If A and B are countable sets, then A \u222a B is also countable. Schr\u00f6der-Bernstein Theorem: If A and B are sets with |A| \u2264 |B| and |B| \u2264 |A|, then |A| = |B|. In other words, if there are one-to-one functions f from A to B and g from B to A, then there is a one-to-one correspondence between A and B. Can use two different functions to prove same cardinality, according to Schr\u00f6der-Bernstein Theorem. Computable / uncomputable function: If there is a computer program in some programming language that finds the values of this function. If a function is not computable we say it is uncomputable. Proof for existence of uncomputable function: Programs are countable (Binary can be listed), but functions are not, e.g. \u2124 -> \u2124 is not. The continuum hypothesis: (We have | P(\u2124^+) P(\u2124^+) | = 2^{\\aleph_0} 2^{\\aleph_0} = |\u211d| = c.) There is no cardinality such that it is greater than \\aleph_0 \\aleph_0 and less than c, or say, c = \\aleph_1 \\aleph_1 in sequence \\aleph_0, \\aleph_1, \\aleph_2 \\aleph_0, \\aleph_1, \\aleph_2 , .... Proving power set related cardinality: Use bit string for element sets of power set. (0, 1) and decimal representation rocks for proof. |(0, 1)| = |\u211d|, can be proved with Schr\u00f6der-Bernstein Theorem.","title":"Cardinality of Sets"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#counting-the-basics-of-counting","text":"The product rule: Suppose that a procedure can be broken down into a sequence of two tasks. If there are n_1 n_1 ways to do the first task and for each of these ways of doing the first task, there are n_2 n_2 ways to do the second task, then there are n_1{\\cdot}n_2 n_1{\\cdot}n_2 ways to do the procedure. The sum rule: If a task can be done either in one of n_1 n_1 ways or in one of n_2 n_2 ways, where none of the set of n_1 n_1 ways is the same as any of the set of n_2 n_2 ways, then there are n_1 + n_2 n_1 + n_2 ways to do the task. The subtraction rule: If a task can be done in either n_1 n_1 ways or n_2 n_2 ways, then the number of ways to do the task is n_1 + n_2 n_1 + n_2 minus the number of ways to do the task that are common to the two different ways. The division rule: There are n/d ways to do a task if it can be done using a procedure that can be carried out in n ways, and for every way w, exactly d of the n ways correspond to way w. Counting problems can be solved using tree diagrams.","title":"Counting The Basics of Counting"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#the-pigeonhole-principle","text":"The pigeonhole principle: If k k is a positive integer and k + 1 k + 1 \u200b or more objects are placed into k k boxes, then there is at least one box containing two or more of the objects. Corollary 1: A function f from a set with k + 1 or more elements to a set with k elements is not one-to-one. The generalized pigeonhole principle: If N N objects are placed into k k \u200b boxes, then there is at least one box containing at least \u2308N/k\u2309 \u2308N/k\u2309 objects. Reverse minimum: (m - 1) * k + 1 Elegant applications: \u2026 Subsequence: Picking elements while the original order is preserved. Theorem: Every sequence of n^2+1 n^2+1 distinct real numbers contains a subsequence of length n+1 that is either strictly increasing or strictly decreasing. The Ramsey number R(m, n), where m and n are positive integers greater than or equal to 2, denotes the minimum number of people at a party such that there are either m mutual friends or n mutual enemies, assuming that every pair of people at the party are friends or enemies.","title":"The Pigeonhole Principle"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#permutations-and-combinations","text":"If n is a positive integer and r is an integer with 1 \u2264 r \u2264 n, then there are P(n, r) = n(n \u2212 1)(n \u2212 2) \u2026 (n \u2212 r + 1) = n! / (n - r)! r-permutations of a set with n distinct elements. P (n, 0) = 1 The number of r-combinations of a set with n elements, where n is a nonnegative integer and r is an integer with 0 \u2264 r \u2264 n, equals C(n, r) = n! / (r!(n \u2212 r)!). Binomial coefficient: (n, r)^T (n, r)^T = C(n, r). P (n, r) = C(n, r) \u00b7 P (r, r). C(n, r) = C(n, n \u2212 r). A combinatorial proof of an identity is a proof that uses counting arguments to prove that both sides of the identity count the same objects but in different ways, or a proof that is based on showing that there is a bijection between the sets of objects counted by the two sides of the identity. These two types of proofs are called double counting proofs and bijective proofs, respectively.","title":"Permutations and Combinations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#binomial-coefficient","text":"The binomial theorem: (x+y)^n=\\sum_{j=0}^{n}\\binom{n}{j}x^{n-j}y^j\\\\ \\sum_{k=0}^{n}\\binom{n}{k}=(1+1)^n=2^n\\\\ \\sum_{k=0}^{n}(-1)^k\\binom{n}{k}=(-1+1)^n=0\\\\ \\sum_{k=0}^{n}2^k\\binom{n}{k}=(2+1)^n=3^n (x+y)^n=\\sum_{j=0}^{n}\\binom{n}{j}x^{n-j}y^j\\\\ \\sum_{k=0}^{n}\\binom{n}{k}=(1+1)^n=2^n\\\\ \\sum_{k=0}^{n}(-1)^k\\binom{n}{k}=(-1+1)^n=0\\\\ \\sum_{k=0}^{n}2^k\\binom{n}{k}=(2+1)^n=3^n Pascal\u2019s identity: \\binom{n+1}{k}=\\binom{n}{k-1}+\\binom{n}{k} \\binom{n+1}{k}=\\binom{n}{k-1}+\\binom{n}{k} So Pascal\u2019s triangle. Vandermonde\u2019s identity: \\binom{m+n}{r}=\\sum_{k=0}^{r}\\binom{m}{r-k}\\binom{n}{k}\\\\ \\binom{2n}{n}=\\sum_{k=0}^{n}\\binom{n}{n-k}\\binom{n}{k}=\\sum_{k=0}^{n}\\binom{n}{k}^2\\\\ \\binom{n+1}{r+1}=\\sum_{j=r}^{n}\\binom{j}{r} \\binom{m+n}{r}=\\sum_{k=0}^{r}\\binom{m}{r-k}\\binom{n}{k}\\\\ \\binom{2n}{n}=\\sum_{k=0}^{n}\\binom{n}{n-k}\\binom{n}{k}=\\sum_{k=0}^{n}\\binom{n}{k}^2\\\\ \\binom{n+1}{r+1}=\\sum_{j=r}^{n}\\binom{j}{r} Prove by combinatorial argument: Use choosing subset, use bit string.","title":"Binomial Coefficient"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#generalized-permutations-and-combinations","text":"The number of r-permutations of a set of n objects with repetition allowed is n^r n^r . There are C(n + r \u2212 1, r) = C(n + r \u2212 1, n \u2212 1) r-combinations from a set with n elements when repetition of elements is allowed. Proved by stars and bars. Method: Stars and bars abstraction. P426 Counting solutions to equation: Notice non-negative or positive integer, the latter implies x_i \\ge 1 x_i \\ge 1 . P427 Nested loop P427 Word letter reordering: The number of different permutations of n objects, where there are n_1 n_1 indistinguishable objects of type 1, n_2 n_2 indistinguishable objects of type 2, \u2026 , and n_k n_k indistinguishable objects of type k, is \\frac{n!}{n_1!n_2! \u00b7\u00b7\u00b7 n_k!} \\frac{n!}{n_1!n_2! \u00b7\u00b7\u00b7 n_k!} Distinguishable objects and distinguishable boxes: The number of ways to distribute n distinguishable objects into k distinguishable boxes so that n_i n_i objects are placed into box i, i = 1, 2, \u2026 , k, equals \\frac{n!}{n_1!n_2!\u00b7\u00b7\u00b7n_k!} \\frac{n!}{n_1!n_2!\u00b7\u00b7\u00b7n_k!} Indistinguishable objects and distinguishable boxes: The number of ways to distribute n indistinguishable objects into k distinguishable boxes so that n_i objects are placed into box i, i = 1, 2, \u2026 , k, equals the n-combination from a set with k elements when repetition is allowed, according to its proof, C(k + n - 1, n). Distinguishable objects and indistinguishable boxes: Can enumerate by n into m, \u2026 , but no simple closed formula. Stirling numbers of the second kind: S(n, j) denote the number of ways to distribute n distinguishable objects into j indistinguishable boxes so that no box is empty. Then the number of ways to distribute n distinguishable objects into k indistinguishable boxes equals \\sum_{j=1}^{k}S(n,j) \\sum_{j=1}^{k}S(n,j) . S(n,j)=\\frac{1}{j!}\\sum_{i=0}{j-1}(-1)^i\\binom{j}{i}(j-i)^n S(n,j)=\\frac{1}{j!}\\sum_{i=0}{j-1}(-1)^i\\binom{j}{i}(j-i)^n Indistinguishable objects and indistinguishable boxes: List partition by decreasing order. If p_k(n) p_k(n) is the number of partitions of n into at most k positive integers, then there are p_k(n) p_k(n) ways to distribute n indistinguishable objects into k indistinguishable boxes.","title":"Generalized Permutations and Combinations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#generating-permutations-and-combinations","text":"Generating permutations: Lexicographic. Next permutation: Find last pair such that a_j < a_{j+1} a_j < a_{j+1} , swap minimum of a_{j+1}, \u2026, a_n a_{j+1}, \u2026, a_n that is greater than a_j a_j with a_j a_j , and list remaining in increasing order. Generating subsets: Use bit string. Generating r-combinations: Lexicographic. Next permutation of {1, 2, \u2026 , n}: Find last a_i a_i such that a_i{\\ne} a_i{\\ne} n-r+i, replace a_i a_i with a_i+1 a_i+1 , a_j a_j with a_i+j-i+1 a_i+j-i+1 (increasing from a_i+1 a_i+1 ). (This is natural.)","title":"Generating Permutations and Combinations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#applications-of-recurrence-relations","text":"Recurrence relation: A rule for determining subsequent terms from those that precede them. Solution of a recurrence relation: A sequence is called a solution of a recurrence relation if its terms satisfy the recurrence relation. Rabbits: f_n = f_{n-1} + f_{n-2} f_n = f_{n-1} + f_{n-2} . Hanoi: H_n=2H_{n-1}+1, H_1=1 H_n=2H_{n-1}+1, H_1=1 . Bit string without two consecutive zeros: a_n = a_{n-1} + a_{n-2} a_n = a_{n-1} + a_{n-2} . Dynamic programming.","title":"Applications of Recurrence Relations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#solving-linear-recurrence-relations","text":"Linear homogeneous recurrence relation of degree k k with constant coefficients: A recurrence relation of the form a_n=c_1a_{n-1}+c_2a_{n-2}+\u00b7\u00b7\u00b7+c_ka_{n-k}, a_n=c_1a_{n-1}+c_2a_{n-2}+\u00b7\u00b7\u00b7+c_ka_{n-k}, where c_1, c_2, \u2026, c_k c_1, c_2, \u2026, c_k are real numbers, and c_k \\neq 0 c_k \\neq 0 . Characteristic equation: Suppose a_n=r^n a_n=r^n , then r^k-c_1r^{k-1}-c_2r^{k-2}-...-c_{k-1}r-c_k=0 r^k-c_1r^{k-1}-c_2r^{k-2}-...-c_{k-1}r-c_k=0 is the characteristic equation. The solutions are called characteristic roots. Theorem 1: Let c_1 c_1 and c_2 c_2 be real numbers. Suppose that r^2-c_1r-c_2=0 r^2-c_1r-c_2=0 has two distinct roots r_1 r_1 and r_2 r_2 . Then the sequence \\{a_n\\} \\{a_n\\} is a solution of the recurrence relation a_n=c_1a_{n-1}+c_2a_{n-2} a_n=c_1a_{n-1}+c_2a_{n-2} if and only if a_n=\u03b1_1r_1^n+\u03b1_2r_2^n a_n=\u03b1_1r_1^n+\u03b1_2r_2^n for n n = 0, 1, 2, \u2026, where \u03b1_1 \u03b1_1 and \u03b1_2 \u03b1_2 are constants. Theorem 2: Let c_1 c_1 and c_2 c_2 be real numbers with c_2 \\neq 0 c_2 \\neq 0 . Suppose that r^2-c_1r-c_2=0 r^2-c_1r-c_2=0 has only one root r_0 r_0 . A sequence \\{a_n\\} \\{a_n\\} is a solution of the recurrence relation a_n=c_1a_{n-1}+c_2a_{n-2} a_n=c_1a_{n-1}+c_2a_{n-2} if and only if a_n=\u03b1_1r_0^n+\u03b1_2nr_0^n a_n=\u03b1_1r_0^n+\u03b1_2nr_0^n , for n n = 0, 1, 2, \u2026, where \u03b1_1 \u03b1_1 and \u03b1_2 \u03b1_2 are constants. Theorem 3: Let c_1, c_2, ..., c_k c_1, c_2, ..., c_k be real numbers. Suppose that the characteristic equation r^k-c_1r^{k-1}-...-c_k=0 r^k-c_1r^{k-1}-...-c_k=0 has k k distinct roots r_1, r_2, ..., r_k r_1, r_2, ..., r_k . Then a sequence \\{a_n\\} \\{a_n\\} is a solution of the recurrence relation a^n=c_1a^{n-1}+c_2a^{n-2}+...+c_ka^{n-k} a^n=c_1a^{n-1}+c_2a^{n-2}+...+c_ka^{n-k} if and only if a^n = \u03b1_1r_1^n+\u03b1_2r_2^n+\u00b7\u00b7\u00b7+\u03b1_kr_k^n a^n = \u03b1_1r_1^n+\u03b1_2r_2^n+\u00b7\u00b7\u00b7+\u03b1_kr_k^n for n n = 0, 1, 2, \u2026, where \u03b1_1, \u03b1_2, ..., \u03b1_k \u03b1_1, \u03b1_2, ..., \u03b1_k are constants. Theorem 4: Let c_1, c_2, \u2026, c_k c_1, c_2, \u2026, c_k be real numbers. Suppose that the characteristic equation r^k - c_1r^k-1 - \u00b7\u00b7\u00b7 - c_k = 0 r^k - c_1r^k-1 - \u00b7\u00b7\u00b7 - c_k = 0 has t t distinct roots r_1, r_2, \u2026, r_t r_1, r_2, \u2026, r_t with multiplicities m_1, m_2, \u2026, m_t m_1, m_2, \u2026, m_t , respectively, so that m_i\\geq1 m_i\\geq1 for i i = 1, 2, \u2026, t and m_1+m_2+\u00b7\u00b7\u00b7+m_t=k m_1+m_2+\u00b7\u00b7\u00b7+m_t=k . Then a sequence \\{a_n\\} \\{a_n\\} is a solution of the recurrence relation a_n=c_1a_{n-1}+c_2a_{n-2}+\u00b7\u00b7\u00b7+c_ka_{n-k} a_n=c_1a_{n-1}+c_2a_{n-2}+\u00b7\u00b7\u00b7+c_ka_{n-k} if and only if a_n=(\u03b1_{1, 0}+\u03b1_{1, 1}n+\u00b7\u00b7\u00b7+\u03b1_{1, m_1-1}n^{m_1-1})r_1^n\\\\ +(\u03b1_{2, 0}+\u03b1_{2, 1}n+\u00b7\u00b7\u00b7+\u03b1_{2, m_2-1}n^{m_2-1})r_2^n\\\\ +\u00b7\u00b7\u00b7+(\u03b1_{t, 0}+\u03b1_{t, 1}^n+\u00b7\u00b7\u00b7+\u03b1_{t, m_t-1}n^{m_t-1})r_t^n a_n=(\u03b1_{1, 0}+\u03b1_{1, 1}n+\u00b7\u00b7\u00b7+\u03b1_{1, m_1-1}n^{m_1-1})r_1^n\\\\ +(\u03b1_{2, 0}+\u03b1_{2, 1}n+\u00b7\u00b7\u00b7+\u03b1_{2, m_2-1}n^{m_2-1})r_2^n\\\\ +\u00b7\u00b7\u00b7+(\u03b1_{t, 0}+\u03b1_{t, 1}^n+\u00b7\u00b7\u00b7+\u03b1_{t, m_t-1}n^{m_t-1})r_t^n for n n = 0, 1, 2, \u2026, where \u03b1_{i, j} \u03b1_{i, j} are constants for 1\\leq{i}\\leq{t} 1\\leq{i}\\leq{t} and 0\\leq{j}\\leq{m}_i-1 0\\leq{j}\\leq{m}_i-1 . Theorem 5: If \\{a_n^{(p)}\\} \\{a_n^{(p)}\\} is a particular solution of the nonhomogeneous linear recurrence relation with constant coefficients a_n=c_1a_{n-1}+c_2a_{n-2}+...+c_ka_{n-k}+F(n), a_n=c_1a_{n-1}+c_2a_{n-2}+...+c_ka_{n-k}+F(n), then every solution is of the form \\{a_n^{(p)}+a_n^{(h)}\\} \\{a_n^{(p)}+a_n^{(h)}\\} , where \\{a_n^{(h)}\\} \\{a_n^{(h)}\\} is a solution of the associated homogeneous recurrence relation a_n=c_1a_{n-1}+c_2a_{n-2}+...+c_ka_{n-k}. a_n=c_1a_{n-1}+c_2a_{n-2}+...+c_ka_{n-k}. Theorem 6: If F(n)=(b_tn^t+b_{t-1}n^{t-1}+...+b_1n+b_0)s^n, F(n)=(b_tn^t+b_{t-1}n^{t-1}+...+b_1n+b_0)s^n, when s s is not a root of the characteristic equation of the associated linear homogeneous recurrence relation, there is a particular solution of the form (p_tn^t+p_{t-1}n^{t-1}+...+p_1n+p_0)s^n (p_tn^t+p_{t-1}n^{t-1}+...+p_1n+p_0)s^n When s s is a root of this characteristic equation and its multiplicity is m m , there is a particular solution of the form n^m(p_tn^t+p_{t-1}n^{t-1}+...+p_1n+p_0)s^n. n^m(p_tn^t+p_{t-1}n^{t-1}+...+p_1n+p_0)s^n.","title":"Solving Linear Recurrence Relations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#generating-functions","text":"The (ordinary) generating function for the sequence a_0,a_1,...,a_k a_0,a_1,...,a_k ,... of real numbers is the infinite series G(x)=a_0+a_1x+...+a_kx^k+...=\\sum_{k=0}^\\infty{a}_kx^k. G(x)=a_0+a_1x+...+a_kx^k+...=\\sum_{k=0}^\\infty{a}_kx^k. We can define generating functions for finite sequences of real numbers by setting a_{n+1}=a_{n+2}=...=0 a_{n+1}=a_{n+2}=...=0 f(x)=\\frac{1}{1-x} f(x)=\\frac{1}{1-x} is the generating function of \\{1\\} \\{1\\} for |x|<1. f(x)=\\frac{1}{1-ax} f(x)=\\frac{1}{1-ax} is the generating function of \\{a^n\\} \\{a^n\\} for |ax|<1. Let f(x)=\\sum_{k=0}^\\infty{a}_kx^k f(x)=\\sum_{k=0}^\\infty{a}_kx^k and g(x)=\\sum_{k=0}^\\infty{b}_kx^k g(x)=\\sum_{k=0}^\\infty{b}_kx^k , then f(x)+g(x)=\\sum_{k=0}^\\infty(a_k+b_k)x^k and f(x)g(x)=\\sum_{k=0}^\\infty(\\sum_{j=0}^ka_jb_{k-j})x^k. f(x)+g(x)=\\sum_{k=0}^\\infty(a_k+b_k)x^k and f(x)g(x)=\\sum_{k=0}^\\infty(\\sum_{j=0}^ka_jb_{k-j})x^k. Let u u be a real number and k k a nonnegative integer. Then the extended binomial coefficient \\binom{u}{k} \\binom{u}{k} is defined by \\binom{u}{k}=\\begin{cases} u(u-1)...(u-k+1)/k! &\\text{if } k>0\\\\ 1 &\\text{if } k=0. \\end{cases} \\binom{u}{k}=\\begin{cases} u(u-1)...(u-k+1)/k! &\\text{if } k>0\\\\ 1 &\\text{if } k=0. \\end{cases} \\binom{-n}{r}=(-1)^r\\binom{n+r-1}{r} \\binom{-n}{r}=(-1)^r\\binom{n+r-1}{r} The extended binomial theorem: Let x x be a real number with |x|<1 and let u u be a real number. Then (1+x)^u=\\sum_{k=0}^\\infty\\binom{u}{k}x^k. (1+x)^u=\\sum_{k=0}^\\infty\\binom{u}{k}x^k. Find number of solutions: e_1+e_2+\\cdots+e_n=C, e_1+e_2+\\cdots+e_n=C, l_i\\leq{e}_i\\leq{u_i} l_i\\leq{e}_i\\leq{u_i} , then it is the coefficient of x^C x^C from (x^{l_i}+...+x^{u_i})...(...) (x^{l_i}+...+x^{u_i})...(...) . Form value r r with tokens of value t_i t_i : When order matters, ways of exactly n n tokens is the coefficient of x^r x^r from (x^{t_i}+...)^n (x^{t_i}+...)^n , so for all it is the coefficient of x^r x^r from 1+...+(x^{t_i}+...)^n 1+...+(x^{t_i}+...)^n ; else, it is the coefficient of x^r x^r from (1+...+(x^{t_i})^n)+... (1+...+(x^{t_i})^n)+... . More powerful and constraint-friendly then simple permutation and combination. Solve recurrence relations: Multiply x^n x^n to the recurrence relation. Substitute the multiplied relation into G(x)=\\sum_{k=0}^\\infty{a}_kx^k=..., G(x)=\\sum_{k=0}^\\infty{a}_kx^k=..., solve for G(x) G(x) , then make it a summation to see a_n a_n . Proving identity: Take combination as a coefficient of certain term.","title":"Generating Functions"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#inclusion-exclusion","text":"|A\\cup{B}|=|A|+|B|-|A\\cap{B}|.\\\\ |A\\cup{B}\\cup{C}|=|A|+|B|+|C|-|A\\cap{B}|-|B\\cap{C}|-|C\\cap{A}|+|A\\cap{B}\\cap{C}|\\\\ \u2026 |A\\cup{B}|=|A|+|B|-|A\\cap{B}|.\\\\ |A\\cup{B}\\cup{C}|=|A|+|B|+|C|-|A\\cap{B}|-|B\\cap{C}|-|C\\cap{A}|+|A\\cap{B}\\cap{C}|\\\\ \u2026 Number of integers divisible: \\lfloor{n}/a\\rfloor+\\lfloor{n}/b\\rfloor-\\lfloor{n}/ab\\rfloor. \\lfloor{n}/a\\rfloor+\\lfloor{n}/b\\rfloor-\\lfloor{n}/ab\\rfloor.","title":"Inclusion-Exclusion"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#applications-of-inclusion-exclusion","text":"Asking element count having none of some properties: Use inclusion-exclusion. The number of primes (The sieve of Eratosthenes): A composite number is divisible by a prime smaller than its square root. The number of onto functions: The shouldn\u2019t have properties are not having element i i in the range. Let m m and n n be positive integers with m \\geq{n} m \\geq{n} . Then, there are n^m-C(n,1)(n-1)^m+C(n,2)(n-2)^m-...+(-1)^{n-1}C(n,n-1)1^m n^m-C(n,1)(n-1)^m+C(n,2)(n-2)^m-...+(-1)^{n-1}C(n,n-1)1^m onto functions from a set with m elements to a set with n elements. Derangement: A permutation of objects that leaves no object in its original position. The number of derangements of a set with n n elements is D_n=n![1-\\frac{1}{1!}+\\frac{1}{2!}-\\frac{1}{3!}+...+(-1)^n\\frac{1}{n!}]\\to{n}!e^{-1}. D_n=n![1-\\frac{1}{1!}+\\frac{1}{2!}-\\frac{1}{3!}+...+(-1)^n\\frac{1}{n!}]\\to{n}!e^{-1}. For arranging differently between two times, the number is n!D_n=(n!)^2[1-\\frac{1}{1!}+\\frac{1}{2!}-\\frac{1}{3!}+...+(-1)^n\\frac{1}{n!}] n!D_n=(n!)^2[1-\\frac{1}{1!}+\\frac{1}{2!}-\\frac{1}{3!}+...+(-1)^n\\frac{1}{n!}] because the first arrangement can have n! n! ways.","title":"Applications of Inclusion-Exclusion"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#relations-their-properties-and-representations","text":"Binary relation: Let A and B be sets. A binary relation from A to B is a subset of A\\times{B} A\\times{B} . a\\mathrel{R}b a\\mathrel{R}b or a\\not\\!\\!R \\;b a\\not\\!\\!R \\;b . Matrix representation: M_R,m_{ij}=(a_i,b_j)\\in{R} M_R,m_{ij}=(a_i,b_j)\\in{R} . Functions can be relations. Relation on a set: A relation on a set A A is a relation from A A to A A . Reflexive: A relation R R on a set A A is called reflexive if (a,a)\\in{R} (a,a)\\in{R} for every element a\\in{A} a\\in{A} . Irreflexive: A relation R R on the set A A is irreflexive if for every a\\in{A} a\\in{A} , (a,a)\\not\\in{R} (a,a)\\not\\in{R} . Symmetric: A relation R R on a set A A is called symmetric if (b,a)\\in{R} (b,a)\\in{R} whenever (a,b)\\in{R} (a,b)\\in{R} , for all a,b\\in{A} a,b\\in{A} . In matrix it is 1 to 1 and 0 to 0 mirrored by the main diagonal, or M_R=(M_R)^T M_R=(M_R)^T . Asymmetric: A relation R R is called asymmetric if (a,b)\\in{R} (a,b)\\in{R} implies that (b,a)\\not\\in{R} (b,a)\\not\\in{R} (So the main diagonal are all zeros). Antisymmetric: A relation R R on a set A A such that for all a,b\\in{A} a,b\\in{A} , if (a,b)\\in{R} (a,b)\\in{R} and (b,a)\\in{R} (b,a)\\in{R} , then a=b a=b is called antisymmetric. In matrix it is 1 to 0, 0 to 1 or 0 to 0 mirrored by the main diagonal. Antisymmetric is not Asymmetric, but Asymmetric is Antisymmetric. Transitive: A relation R R on a set A A is called transitive if whenever (a,b)\\in{R} (a,b)\\in{R} and (b,c)\\in{R} (b,c)\\in{R} , then (a,c)\\in{R} (a,c)\\in{R} , for all a,b,c\\in{A} a,b,c\\in{A} . Combining Relations: Relations can be combined like sets. M_{R_1\\cup{R}_2}=M_{R_1}\\vee{M}_{R_2}\\\\ M_{R_1\\cap{R}_2}=M_{R_1}\\wedge{M}_{R_2}\\\\ M_{R\\circ{S}}=M_S\\bigodot{M}_R (\\bigodot \\text{stands for boolean product})\\\\ M_{R^n}=(M_R)^n M_{R_1\\cup{R}_2}=M_{R_1}\\vee{M}_{R_2}\\\\ M_{R_1\\cap{R}_2}=M_{R_1}\\wedge{M}_{R_2}\\\\ M_{R\\circ{S}}=M_S\\bigodot{M}_R (\\bigodot \\text{stands for boolean product})\\\\ M_{R^n}=(M_R)^n Symmetric difference: The symmetric difference of A A and B B , denoted by A\\bigoplus{B} A\\bigoplus{B} , is the set containing those elements in either A A or$ B$, but not in both A A and B B . M_{\\bigoplus R} M_{\\bigoplus R} is the entry-wise XORed matrix. Composition: The composite of R R and S S is the relation consisting of ordered pairs (a, c) (a, c) , where a\\in{A} a\\in{A} , c\\in{C} c\\in{C} , and for which there exists an element b\\in{B} b\\in{B} such that (a,b)\\in{R} (a,b)\\in{R} and (b,c)\\in{S} (b,c)\\in{S} . We denote the composite of R R and S S by S\\circ{R} S\\circ{R} . S\\circ{R} S\\circ{R} is from right to left (inside to outside)! Composition can be done by matrix multiplication. Power: Let R R be a relation on the set A A . The powers R^n R^n , $n=1, 2, 3 ,..., $ are defined recursively by R^1=R R^1=R and R^{n+1}=R^n\\circ{R} R^{n+1}=R^n\\circ{R} . Theorem: The relation R R on a set A A is transitive if and only if R^n\\subseteq{R} R^n\\subseteq{R} for n=1, 2, 3, ... n=1, 2, 3, ... . Inverse relation: R^{-1} R^{-1} , with pairs inverted. Relations on a finite set can also be represented by digraphs (directed graphs). (R\\cup{S})^{-1}=R^{-1}\\cup{S}^{-1}\\\\ (R\\cap{S})^{-1}=R^{-1}\\cap{S}^{-1}\\\\ (\\overline{R})^{-1}=\\overline{R^{-1}}\\\\ (R-S)^{-1}=R^{-1}-S^{-1}\\\\ (A\\times{B})^{-1}=B\\times{A} (R\\cup{S})^{-1}=R^{-1}\\cup{S}^{-1}\\\\ (R\\cap{S})^{-1}=R^{-1}\\cap{S}^{-1}\\\\ (\\overline{R})^{-1}=\\overline{R^{-1}}\\\\ (R-S)^{-1}=R^{-1}-S^{-1}\\\\ (A\\times{B})^{-1}=B\\times{A}","title":"Relations, Their Properties and Representations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#closures-of-relations","text":"Closure of R R with respect to P : The relation with property P containing R R such that it is a subset of every relation with property P containing R R . Diagonal relation: \\Delta=\\{(a,a)|a\\in{A}\\} \\Delta=\\{(a,a)|a\\in{A}\\} . Reflexive closure of R R : The smallest reflexive relation that contains R R . Formed by R\\cup\\Delta R\\cup\\Delta . Symmetric closure of R R : The smallest symmetric relation that contains R R . Formed by R\\cup{R}^{-1} R\\cup{R}^{-1} . Transitive closure of R R : The smallest transitive relation that contains R R . Path: A sequence of consecutive edges, denoted by x_0,x_1,x_2,...,x_{n-1},x_n x_0,x_1,x_2,...,x_{n-1},x_n , with length n n . Circuit (or cycle): A path of length n\\geq{1} n\\geq{1} that begins and ends at the same vertex. Path on relation: There is a path from a a to b b in R R if there is a sequence of elements a,x_1,x_2,...,x_{n\u22121} a,x_1,x_2,...,x_{n\u22121} , b b with (a,x_1)\\in{R} (a,x_1)\\in{R} , (x_1,x_2)\\in{R} (x_1,x_2)\\in{R} , ..., and (x_{n\u22121},b)\\in{R} (x_{n\u22121},b)\\in{R} . Theorem 1: Let R R be a relation on a set A A . There is a path of length n n , where n n is a positive integer, from a a to b b if and only if (a,b)\\in{R}^n (a,b)\\in{R}^n . Connectivity relation: Let R R be a relation on a set A A . The connectivity relation R^* R^* consists of the pairs (a,b) (a,b) such that there is a path of length at least one from a a to b b in R R . R^*=\\bigcup_{n=1}^\\infty{R}^n R^*=\\bigcup_{n=1}^\\infty{R}^n Theorem 2: The transitive closure of a relation R R equals the connectivity relation R^* R^* . Lemma 1: Let A A be a set with n elements, and let R R be a relation on A A . If there is a path of length at least one in R R from a a to b b , then there is such a path with length not exceeding n n . Moreover, when a\\neq{b} a\\neq{b} , if there is a path of length at least one in R R from a a to b b , then there is such a path with length not exceeding n\u22121 n\u22121 . R^*=\\bigcup_{i=1}^nR^i R^*=\\bigcup_{i=1}^nR^i Theorem 3: Let M_R M_R be the zero\u2013one matrix of the relation R R on a set with n n elements. Then the zero\u2013one matrix of the transitive closure R^* R^* is M_{R^*}=M_R\\vee{M}_R^{[2]}\\vee{M}_R^{[3]}\\vee...\\vee{M}_R^{[n]}. M_{R^*}=M_R\\vee{M}_R^{[2]}\\vee{M}_R^{[3]}\\vee...\\vee{M}_R^{[n]}. Interior vertices: Vertices of a path excluding the first and the last. W_0=M_R, W_i=[w_{ij}^{(k)}] W_0=M_R, W_i=[w_{ij}^{(k)}] , where w_{ij} w_{ij} is whether there is a path from v_i v_i to v_j v_j such that all interior vertices are in the first i i elements of the list (The list is prepared beforehand). W_n=M_{R^*}. W_n=M_{R^*}. Lemma 2: w_{ij}^{[k]}=w_{ij}^{[k-1]}\\vee(w_{ik}^{[k-1]}\\wedge{w}_{kj}^{[k-1]}) w_{ij}^{[k]}=w_{ij}^{[k-1]}\\vee(w_{ik}^{[k-1]}\\wedge{w}_{kj}^{[k-1]})","title":"Closures of Relations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#equivalence-relations","text":"Equivalence Relation: A A relation on a set A A is called an equivalence relation if it is reflexive, symmetric, and transitive. Equivalent: Two elements a a and b b that are related by an equivalence relation are called equivalent. The notation a\\tilde{b} a\\tilde{b} is often used to denote that a a and b b are equivalent elements with respect to a particular equivalence relation. Congruence Modulo m m is an equivalence relation. Equivalence class: Let R R be an equivalence relation on a set A A . The set of all elements that are related to an element a of A A is called the equivalence class of a a . The equivalence class of a a with respect to R R is denoted by [a]_R [a]_R . When only one relation is under consideration, we can delete the subscript R R and write [a] [a] for this equivalence class. Representative of equivalence class: If b\\in[a]_R b\\in[a]_R , then b b is called a a representative of this equivalence class. Theorem 1: Let R R be an equivalence relation on a set A A . These statements for elements a a and b b of A A are equivalent: aRb \\\\ [a]=[b] \\\\ [a]\\cap[b]\\neq\\varnothing aRb \\\\ [a]=[b] \\\\ [a]\\cap[b]\\neq\\varnothing Partition: Partition of a set S S is a collection of disjoint nonempty subsets of S S that have S S as their union. Theorem 2: Let R R be an equivalence relation on a set S S . Then the equivalence classes of R R form a partition of S S . Conversely, given a partition \\{A_i|i\\in{I}\\} \\{A_i|i\\in{I}\\} of the set S S , there is an equivalence relation R R that has the sets A_i,i\\in{I} A_i,i\\in{I} , as its equivalence classes. The m congruence modulo classes are denoted by [0]_m, [1]_m, ..., [m\u22121]_m [0]_m, [1]_m, ..., [m\u22121]_m .","title":"Equivalence Relations"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#partial-ordering","text":"Partial ordering: A relation R R on a set S S is called a partial ordering or partial order if it is reflexive, antisymmetric, and transitive. Partially ordered set (poset): A set S S together with a partial ordering R R is called a partially ordered set, or poset, and is denoted by (S,R) (S,R) . Members of S S are called elements of the poset. Less/greater than or equal ( \\leq/\\geq \\leq/\\geq ), inclusion relation ( \\subseteq \\subseteq ), divisibility relation (|) are all partial orderings. Less/greater than ($$) are antisymmetric and transitive, but not reflexive, so they are not partial orderings. Comparable: The elements a a and b b of a poset (S,\\preceq) (S,\\preceq) are called comparable if either a\\preceq b a\\preceq b or b\\preceq a b\\preceq a . When a a and b b are elements of S S such that neither a\\preceq b a\\preceq b nor b\\preceq a b\\preceq a , a a and b b are called incomparable. Totally/linearly ordered set: If (S,\\preceq) (S,\\preceq) is a poset and every two elements of S S are comparable, S S is called a totally or linearly ordered set, and \\preceq \\preceq is called a total or linear order. A totally ordered set is also called a chain. Well-ordered set: (S,\\preceq) (S,\\preceq) is a well-ordered set if it is a poset such that \\preceq \\preceq is a total ordering and every nonempty subset of S S has a least element. The principle of well-ordered induction: Suppose that S S is a well-ordered set. Then P(x) P(x) is true for all $x\\in S $, if (inductive step:) For every y\\in{S} y\\in{S} , if P(x) P(x) is true for all x\\in{S} x\\in{S} with x\\prec{y} x\\prec{y} , then P(y) P(y) is true. Lexicographic ordering: The lexical ordering \\prec \\prec on A_1\\times{A}_2 A_1\\times{A}_2 is defined by specifying that one pair is less than a second pair if the first entry of the first pair is less than (in A_1 A_1 ) the first entry of the second pair, or if the first entries are equal, but the second entry of this pair is less than (in A_2 A_2 ) the second entry of the second pair. Hasse diagram: Start with the directed graph for this relation. First, Remove these loops because of reflexivity. Next, remove all edges that must be in the partial ordering because of transitivity. Finally, arrange each edge so that its initial vertex is below its terminal vertex and remove all the arrows on edges. Covers: An element y\\in{S} y\\in{S} covers an element x\\in{S} x\\in{S} if x\\prec{y} x\\prec{y} and there is no element z\\in{S} z\\in{S} such that x\\prec{z}\\prec{y} x\\prec{z}\\prec{y} . Covering relation: The set of pairs (x,y) (x,y) such that y y covers x x is called the covering relation of (S,\\preceq) (S,\\preceq) . Maximal element: An element of a poset is called maximal if it is not less than any element of the poset. The top element of a Hasse diagram. Minimal element: An element of a poset is called minimal if it is not greater than any element of the poset. The bottom element of a Hasse diagram. Greatest element: An element in a poset that is greater than every other element. Least element: An element in a poset that is less than every other element. Upper bound: Element greater than or equal to all the elements in a subset A A of S S . Lower bound: Element less than or equal to all the elements in a subset A A of S S . Least upper bound: Upper bound that is less than every other upper bound of a subset A A of S S . Greatest lower bound: Lower bound that is greater than every other lower bound of a subset A A of S S . Lattice: A partially ordered set in which every pair of elements has both a least upper bound and a greatest lower bound is called a lattice. (\\mathcal{P}(S),\\subseteq/\\supseteq) (\\mathcal{P}(S),\\subseteq/\\supseteq) is a lattice, with LUB and GLB being A\\cup{B} A\\cup{B} and A\\cap{B} A\\cap{B} . Compatible: A total ordering \\preceq \\preceq said to be compatible with the partial ordering R R if a\\preceq{b} a\\preceq{b} whenever aRb aRb . Topological sorting: Constructing a compatible total ordering from a partial ordering. Lemma 1: Every finite nonempty poset (S,\\preceq) (S,\\preceq) has at least one minimal element. Algorithm for topological sorting: Pick the least element and remove it from the poset. Can also be done with a Hasse diagram.","title":"Partial Ordering"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#graphs-and-graph-models","text":"(Undirected) graph: A graph G=(V,E) G=(V,E) consists of V, a nonempty set of vertices (or nodes) and E, a set of edges. Each edge has either one or two vertices associated with it, called its endpoints . An edge is said to connect , its endpoints. Simple graph: A graph in which each edge connects two different vertices and where no two edges connect the same pair of vertices is called a simple graph. Infinite graph: A graph with an infinite vertex set or an infinite number of edges is called an infinite graph. Finite graph: a graph with a finite vertex set and a finite edge set is called a finite graph. Multigraph: Graphs that may have multiple edges connecting the same vertices are called multigraphs. Loop: Edges that connect a vertex to itself. Pseudographs: Graphs that may include loops, and possibly multiple edges connecting the same pair of vertices or a vertex to itself. Directed graph (digraph): A directed graph (or digraph) (V,E) (V,E) consists of a nonempty set of vertices V and a set of directed edges (or arcs) E. Each directed edge is associated with an ordered pair of vertices. The directed edge associated with the ordered pair (u,v) (u,v) is said to start at u and end at v. Simple directed graph: A directed graph with no loops and no multiple directed edges that start and end at the same vertices. Directed multigraphs: Directed graphs that may have multiple directed edges from a vertex to a second (possibly the same) vertex. Multiplicity: When there are m directed edges, each associated to an ordered pair of vertices (u,v) (u,v) , we say that (u,v) (u,v) is an edge of multiplicity m. Mixed graph: A graph with both directed and undirected edges.","title":"Graphs and Graph Models"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#graph-terminology-and-special-types-of-graphs","text":"Adjacent (Neighbor): Two vertices u and v in an undirected graph G are called adjacent (or neighbors) in G if u and v are endpoints of an edge e of G. Such an edge e is called incident with the vertices u and v and e is said to connect u and v. Neighborhood: The set of all neighbors of a vertex v of G=(V,E) G=(V,E) , denoted by N(v), is called the neighborhood of v. If A is a subset of V , we denote by N(A) the set of all vertices in G that are adjacent to at least one vertex in A. So, N(A)=\\bigcup_{v\\in{A}}N(v) N(A)=\\bigcup_{v\\in{A}}N(v) . Degree: The degree of a vertex in an undirected graph is the number of edges incident with it, except that a loop at a vertex contributes twice to the degree of that vertex. The degree of the vertex v is denoted by deg(v) deg(v) . Theorem 1, The handshaking theorem: Let G=(V,E) G=(V,E) be an undirected graph with m edges. Then 2m=\\sum_{v\\in{V}}deg(v). 2m=\\sum_{v\\in{V}}deg(v). Theorem 2: An undirected graph has an even number of vertices of odd degree. Adjacent to/from, initial/terminal vertex: When (u,v) (u,v) is an edge of the graph G G with directed edges, u is said to be adjacent to v and v is said to be adjacent from u. The vertex u is called the initial vertex of (u,v) (u,v) , and v is called the terminal or end vertex of (u,v) (u,v) . The initial vertex and terminal vertex of a loop are the same. In/out degree: In a graph with directed edges the in-degree of a vertex v, denoted by deg^\u2212(v) deg^\u2212(v) , is the number of edges with v as their terminal vertex. The out-degree of v, denoted by deg^+(v) deg^+(v) , is the number of edges with v as their initial vertex. (Note that a loop at a vertex contributes 1 to both the in-degree and the out-degree of this vertex.) Theorem 3: Let G=(V,E) G=(V,E) be a graph with directed edges. Then \\sum_{v\\in{V}}deg^\u2212(v)=\\sum_{v\\in{V}}deg^+(v)=|E|. \\sum_{v\\in{V}}deg^\u2212(v)=\\sum_{v\\in{V}}deg^+(v)=|E|. Underlying undirected graph: The undirected graph that results from ignoring directions of edges is called the underlying undirected graph. Complete graph: A complete graph on n vertices, denoted by K_n K_n , is a simple graph that contains exactly one edge between each pair of distinct vertices. Noncomplete graph: A simple graph for which there is at least one pair of distinct vertex not connected by an edge. Cycle: A cycle C_n C_n , n\\geq3 n\\geq3 , consists of n n vertices v_1,v_2,...,v_n v_1,v_2,...,v_n and edges \\{v_1,v_2\\}, \\{v_2,v_3\\}, ..., \\{v_{n\u22121},v_n\\}, \\{v_n,v_1\\} \\{v_1,v_2\\}, \\{v_2,v_3\\}, ..., \\{v_{n\u22121},v_n\\}, \\{v_n,v_1\\} . Wheel: We obtain a wheel W_n when we add an additional vertex to a cycle C_n C_n , for n\\geq3 n\\geq3 , and connect this new vertex to each of the n n vertices in C_n C_n , by new edges. n-Cube: An n-dimensional hypercube, or n-cube, denoted by Q_n Q_n , is a graph that has vertices representing the 2^n 2^n bit strings of length n. Bipartite and bipartition: A simple graph G G is called bipartite if its vertex set V V can be partitioned into two disjoint sets V_1 V_1 and V_2 V_2 such that every edge in the graph connects a vertex in V_1 V_1 and a vertex in V_2 V_2 (so that no edge in G connects either two vertices in V_1 V_1 or two vertices in V_2 V_2 ). When this condition holds, we call the pair (V_1,V_2) (V_1,V_2) a bipartition of the vertex set V V of G G . Theorem 4: A simple graph is bipartite if and only if it is possible to assign one of two different colors to each vertex of the graph so that no two adjacent vertices are assigned the same color. Complete Bipartite Graph: A complete bipartite graph K_{m,n} K_{m,n} is a graph that has its vertex set partitioned into two subsets of m and n vertices, respectively with an edge between two vertices if and only if one vertex is in the first subset and the other vertex is in the second subset. Bipartite graphs can be used to model many types of applications that involve matching the elements of one set to elements of another. Regular graph: A simple graph is called regular if every vertex of this graph has the same degree. A regular graph is called n-regular if every vertex in this graph has degree n. Subgraph: A subgraph of a graph G=(V,E) G=(V,E) is a graph H=(W,F) H=(W,F) , where W\\subseteq{V} W\\subseteq{V} and F\\subseteq{E} F\\subseteq{E} . A subgraph H H of G G is a proper subgraph of G G if H\\neq G H\\neq G . Subgraph induced by vertex set: Let G=(V,E) G=(V,E) be a simple graph. The subgraph induced by a subset W W of the vertex set V V is the graph (W,F) (W,F) , where the edge set F F contains an edge in E E if and only if both endpoints of this edge are in W W . Spanning subgraph: H H is a spanning subgraph of G G if W=V W=V , F\\subseteq{E} F\\subseteq{E} . Union of graph: The union of two simple graphs G_1=(V_1,E_1) G_1=(V_1,E_1) and G_2= (V_2,E_2) G_2= (V_2,E_2) is the simple graph with vertex set V_1\\cup{V}_2 V_1\\cup{V}_2 and edge set E_1\\cup{E}_2 E_1\\cup{E}_2 . The union of G_1 G_1 and G_2 G_2 is denoted by G_1\\cup{G}_2 G_1\\cup{G}_2 .","title":"Graph Terminology and Special Types of Graphs"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#representing-graphs-and-graph","text":"Isomorphism Adjacency list: Vertex and Adjacent vertices for simple graph, Initial vertex and terminal vertices for directed graph. Adjacency matrix: A (or A_G ). Incidence matrix: 1 when edge j is incident with vertex i. Isomorphism: The simple graphs G_1=(V_1,E_1) G_1=(V_1,E_1) and G_2=(V_2,E_2) G_2=(V_2,E_2) are isomorphic if there exists a one-to-one and onto function f from V_1 V_1 to V_2 V_2 with the property that a and b are adjacent in G_1 G_1 if and only if f(a) f(a) and f(b) f(b) are adjacent in G_2 G_2 , for all a and b in V_1 V_1 . Such a function f is called an isomorphism. Two simple graphs that are not isomorphic are called nonisomorphic. Graph invariant: A property preserved by isomorphism of graphs is called a graph invariant. Graph invariants include: The number of vertices, the number of edges, the number of vertices of each degree (useful), bipartite, complete, wheel. Can also check isomorphism by making a function that maps vertices and checking whether it is preserving edges using adjacent matrix.","title":"Representing Graphs and Graph"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#connectivity","text":"Path: A sequence of edges that begins at a vertex of a graph and travels from vertex to vertex along edges of the graph. When there are no multiple edges, the path can be denoted by its vertex sequence. Circuit: The path is a circuit if it begins and ends at the same vertex, and has length greater than zero. Pass through and traverse: The path or circuit is said to pass through the vertices in between or traverse the edges. Simple A path or circuit is simple if it does not contain the same edge more than once. Connected: An undirected graph is called connected if there is a path between every pair of distinct vertices of the graph. An undirected graph that is not connected is called disconnected. Theorem 1: There is a simple path between every pair of distinct vertices of a connected undirected graph. Connected component: A maximal connected subgraph of a graph. Cut vertex: A vertex is a cut vertex (or articulation point), if removing it and all edges incident with it results in more connected components than in the original graph. Cut edge: If removal of an edge creates more components, the edge is called a cut edge or bridge. Strongly connected: A directed graph is strongly connected if there is a path from a to b and from b to a whenever a and b are vertices in the graph. Weakly connected: A directed graph is weakly connected if there is a path between every two vertices in the underlying undirected graph. Any strongly connected directed graph is also weakly connected. Strongly connected component: A maximal strongly connected subgraph, is called a strongly connected component or strong component. Two graphs are isomorphic only if they have simple circuits of the same length. Two graphs are isomorphic only if they contain paths that go through vertices so that the corresponding vertices in the two graphs have the same degree. Theorem 2: Let G G be a graph with adjacency matrix A A with respect to the ordering v_1,v_2,...,v_n v_1,v_2,...,v_n of the vertices of the graph (with directed or undirected edges, with multiple edges and loops allowed). The number of different paths of length r r from v_i v_i to v_j v_j , where r r is a positive integer, equals the (i,j) (i,j) th entry of A^r A^r . The graph G G is connected if and only if every off-diagonal entry of A+A^2+A^3+...+A^{n\u22121} A+A^2+A^3+...+A^{n\u22121} is positive. The check can end earlier if an A^i A^i is found to be so.","title":"Connectivity"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#euler-and-hamilton-paths","text":"Euler circuit: A simple circuit containing every edge of graph G. Euler path: A simple path containing every edge of graph G. Theorem 1: A connected multigraph with at least two vertices has an Euler circuit if and only if each of its vertices has even degree. Algorithm 1: Constructing Euler Circuits. Theorem 2: A connected multigraph has an Euler path but not an Euler circuit if and only if it has exactly two vertices of odd degree. Hamilton path: A simple path in a graph G G that passes through every vertex exactly once. Hamilton circuit: A simple circuit in a graph G G that passes through every vertex exactly once. A graph with a vertex of degree one cannot have a Hamilton circuit. If a vertex in the graph has degree two, then both edges that are incident with this vertex must be part of any Hamilton circuit. When a Hamilton circuit is being constructed and this circuit has passed through a vertex, then all remaining edges incident with this vertex, other than the two used in the circuit, can be removed from consideration. A Hamilton circuit cannot contain a smaller circuit within it. Dirac\u2019s theorem: If G G is a simple graph with n n vertices with n\\geq3 n\\geq3 such that the degree of every vertex in G G is at least \\frac{n}2 \\frac{n}2 , then G G has a Hamilton circuit. Ore\u2019s theorem: If G G is a simple graph with n n vertices with n\\geq3 n\\geq3 such that deg(u)+deg(v)\\geq{n} deg(u)+deg(v)\\geq{n} for every pair of nonadjacent vertices u and v in G G , then G G has a Hamilton circuit. Finding Gray code is equivalent to finding a Hamilton circuit for n-cube.","title":"Euler and Hamilton Paths"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#shortest-path-problems","text":"Algorithm 1: Dijkstra\u2019s Algorithm Theorem 1: Dijkstra\u2019s algorithm finds the length of a shortest path between two vertices in a connected simple undirected weighted graph. Theorem 2: Dijkstra\u2019s algorithm uses O(n^2) O(n^2) operations (additions and comparisons) to find the length of a shortest path between two vertices in a connected simple undirected weighted graph with n vertices. Traveling salesperson problem: The circuit of minimum total weight in aweighted, complete, undirected graph that visits each vertex exactly once and returns to its starting point. This is equivalent to asking for a Hamilton circuit with minimum total weight in the complete graph, because each vertex is visited exactly once in the circuit.","title":"Shortest-Path Problems"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#planar-graphs","text":"Planar: A graph is called planar if it can be drawn in the plane without any edges crossing (where a crossing of edges is the intersection of the lines or arcs representing them at a point other than their common endpoint). Such a drawing is called a planar representation of the graph. Proving no planar representation: Find a loop, divide the plane into regions, divide and conquer. K_{3,3} K_{3,3} and K_5 K_5 are non-planar. Euler\u2019s formula: Let G G be a connected planar simple graph with e edges and v vertices. Let r be the number of regions in a planar representation of G. Then r=e\u2212v+2. r=e\u2212v+2. Proved by mathematical induction. Corollary 1: If G G is a connected planar simple graph with e e edges and v v vertices, where v\\geq3 v\\geq3 , then e\\leq3v\u22126 e\\leq3v\u22126 . Can be used to show that a graph is non-planar. Degree of a region: the number of edges on the boundary of this region. Proved by 2e\\geq3r 2e\\geq3r and Euler\u2019s formula. Corollary 2: If $$$ is a connected planar simple graph, then G G has a vertex of degree not exceeding five. Corollary 3: If a connected planar simple graph has e edges and v vertices with v\\geq3 v\\geq3 and no circuits of length three, then e\\leq2v\u22124 e\\leq2v\u22124 . Proved like corollary 1, where 2e\\geq4r 2e\\geq4r . Can be used to show that a graph is non-planar. Elementary subdivision: If a graph is planar, so will be any graph obtained by removing an edge {u,v} and adding a new vertex w together with edges \\{u,w\\} \\{u,w\\} and \\{w,v\\} \\{w,v\\} . Such an operation is called an elementary subdivision. Homeomorphic: The graphs G_1=(V_1,E_1) G_1=(V_1,E_1) and G_2=(V_2,E_2) G_2=(V_2,E_2) are called homeomorphic if they can be obtained from the same graph by a sequence of elementary subdivisions. Kuratowski\u2019s Theorem: A graph is nonplanar if and only if it contains a subgraph (deleting vertices and incident edges) homeomorphic to K_{3,3} K_{3,3} or K_5 K_5 . K_{3,3} K_{3,3} can also be a hexagon with opposing vertices connected, and the parts are the two sets of three unconnected vertices.","title":"Planar Graphs"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/discrete_math/#graph-coloring","text":"Dual graph: Each map in the plane can be represented by a graph. To set up this correspondence, each region of the map is represented by a vertex. Edges connect two vertices if the regions represented by these vertices have a common border. Two regions that touch at only one point are not considered adjacent. The resulting graph is called the dual graph of the map. Any map in the plane has a planar dual graph. Coloring: A coloring of a simple graph is the assignment of a color to each vertex of the graph so that no two adjacent vertices are assigned the same color. Chromatic number: The chromatic number of a graph is the least number of colors needed for a coloring of this graph, denoted by \\chi(G) \\chi(G) . The four color theorem: The chromatic number of a planar graph is no greater than four. Nonplanar graphs can have arbitrarily large chromatic numbers. Show that the chromatic number of a graph is k: Show that the graph can be colored with k colors. This can be done by constructing such a coloring. Show that the graph cannot be colored using fewer than k colors, when 3 it is often shown by a three vertices loop. The chromatic number of a complete graph K_n K_n is n because every vertex is connected with all others, and this does not contradict the four color theorem because K_n K_n is not planar when n>4. The chromatic number of a complete bipartite graph K_{m,n} K_{m,n} is 2, by coloring either set a color. The chromatic number of a cycle graph C_n C_n , is 1 when n=1, 2 when n is even, 3 when n is odd and n>1. Equivalent to scheduling and required number of time slots.","title":"Graph Coloring"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/math_postgraduate/","text":"\u5f20\u5b87\u8003\u7814\u6570\u5b66 \u6cf0\u52d2\u5c55\u5f00 f(x) f(x) \\sum\\limits_{n=0}^\\infty \\frac{f(0)^{(n)}}{n!}x^n \\sum\\limits_{n=0}^\\infty \\frac{f(0)^{(n)}}{n!}x^n \\sin x \\sin x \\sum\\limits_{n=0}^\\infty (-1)^{n}\\frac{x^{2n+1}}{(2n+1)!} \\sum\\limits_{n=0}^\\infty (-1)^{n}\\frac{x^{2n+1}}{(2n+1)!} \\mathrm{sh} x \\mathrm{sh} x \\sum\\limits_{n=0}^\\infty \\frac{x^{2n+1}}{(2n+1)!} \\sum\\limits_{n=0}^\\infty \\frac{x^{2n+1}}{(2n+1)!} \\cos x \\cos x \\sum\\limits_{n=0}^\\infty (-1)^n \\frac{x^{2n}}{2n!} \\sum\\limits_{n=0}^\\infty (-1)^n \\frac{x^{2n}}{2n!} \\mathrm{ch} x \\mathrm{ch} x \\sum\\limits_{n=0}^\\infty \\frac{x^{2n}}{2n!} \\sum\\limits_{n=0}^\\infty \\frac{x^{2n}}{2n!} \\tan x \\tan x x+\\frac{1}{3}x^3+o(x^3) x+\\frac{1}{3}x^3+o(x^3) \\arcsin x \\arcsin x x+\\frac{1}{6}x^3+o(x^3) x+\\frac{1}{6}x^3+o(x^3) \\arctan x \\arctan x \\sum\\limits_{n=0}^\\infty (-1)^n\\frac{x^{2n+1}}{2n+1} \\sum\\limits_{n=0}^\\infty (-1)^n\\frac{x^{2n+1}}{2n+1} e^x e^x \\sum\\limits_{n=0}^\\infty \\frac{x^n}{n!} \\sum\\limits_{n=0}^\\infty \\frac{x^n}{n!} \\ln (1+x) \\ln (1+x) \\sum\\limits_{n=1}^\\infty (-1)^{n+1} \\frac{x^n}{n}, -1 < x \\le 1 \\sum\\limits_{n=1}^\\infty (-1)^{n+1} \\frac{x^n}{n}, -1 < x \\le 1 -\\ln (1-x) -\\ln (1-x) \\sum\\limits_{n=1}^\\infty \\frac{x^n}{n}, [-1,1) \\sum\\limits_{n=1}^\\infty \\frac{x^n}{n}, [-1,1) \\frac{x}{(1-x)^2} \\frac{x}{(1-x)^2} \\sum\\limits_{n=1}^\\infty nx^n, (-1,1) \\sum\\limits_{n=1}^\\infty nx^n, (-1,1) \\frac{1}{1+x} \\frac{1}{1+x} \\sum\\limits_{n=0}^\\infty (-1)^n x^n, -1 < x < 1 \\sum\\limits_{n=0}^\\infty (-1)^n x^n, -1 < x < 1 (1+x)^\\alpha (1+x)^\\alpha \u200b \\sum\\limits_{n=0}^\\infty \\frac{\\alpha^{\\underline{n}}}{n!}x^n, -1 < x < 1 \\sum\\limits_{n=0}^\\infty \\frac{\\alpha^{\\underline{n}}}{n!}x^n, -1 < x < 1 \u200b\uff0c\u7aef\u70b9\u89c6 \\alpha \\alpha \u200b \u4ee4 f''_{xx} = A, f''_{yy}=B,f''_{xy}=C f''_{xx} = A, f''_{yy}=B,f''_{xy}=C \u200b\uff1a f(x,y) = f(x_0, y_0)+(f'_x,f'_y)\\left(\\begin{array}{c}\\Delta x\\\\ \\Delta y\\end{array}\\right) + (\\Delta x \\:\\Delta y)\\left(\\begin{array}{cc}A &B\\\\ B & C\\end{array}\\right)\\left(\\begin{array}{c}\\Delta x\\\\ \\Delta y\\end{array}\\right) + R_2 f(x,y) = f(x_0, y_0)+(f'_x,f'_y)\\left(\\begin{array}{c}\\Delta x\\\\ \\Delta y\\end{array}\\right) + (\\Delta x \\:\\Delta y)\\left(\\begin{array}{cc}A &B\\\\ B & C\\end{array}\\right)\\left(\\begin{array}{c}\\Delta x\\\\ \\Delta y\\end{array}\\right) + R_2 \\left|\\begin{array}{cc}A &B\\\\ B & C\\end{array}\\right| \\left|\\begin{array}{cc}A &B\\\\ B & C\\end{array}\\right| \u6b63\u5b9a\uff0c\u6781\u5c0f\u503c\uff1b\u8d1f\u5b9a\uff0c\u6781\u5927\u503c\uff1b\u5c0f\u4e8e 0 0 \u975e\u6781\u503c\u70b9\u3002 \u5085\u91cc\u53f6\u5206\u6790 g(t) g(t) \u4e3a\u5468\u671f\u4e3a T T \u7684\u5468\u671f\u51fd\u6570\u3002 g(t) = \\frac{a_0}{2}+\\sum\\limits_{n=1}^\\infty a_n\\cos 2\\pi fnt + b_n\\sin 2\\pi fnt \\\\ a_n = \\frac{2}{T}\\int_0^T g(t)\\cos 2\\pi fnt \\mathrm{d}t \\\\ b_n = \\frac{2}{T}\\int_0^T g(t)\\sin 2\\pi fnt \\mathrm{d}t \\\\ g(t) = \\frac{a_0}{2}+\\sum\\limits_{n=1}^\\infty a_n\\cos 2\\pi fnt + b_n\\sin 2\\pi fnt \\\\ a_n = \\frac{2}{T}\\int_0^T g(t)\\cos 2\\pi fnt \\mathrm{d}t \\\\ b_n = \\frac{2}{T}\\int_0^T g(t)\\sin 2\\pi fnt \\mathrm{d}t \\\\ \u6052\u7b49\u53d8\u5f62 a^n-b^n = (a-b)\\sum\\limits_{i=0}^{n-1}a^{n-1-i}b^i \\\\ \\sum\\limits_{k=1}^n k^2 = \\frac{n(n+1)(2n+1)}{6} \\\\ \\sin\\alpha \\cos\\beta = \\frac{1}{2}(\\sin(\\alpha + \\beta) + \\sin(\\alpha - \\beta)) \\\\ \\sin\\alpha \\sin\\beta = \\frac{1}{2}(\\cos(\\alpha - \\beta) - \\cos(\\alpha + \\beta)) \\\\ \\cos\\alpha \\cos\\beta = \\frac{1}{2}(\\cos(\\alpha + \\beta) + \\cos(\\alpha - \\beta)) \\\\ a^n-b^n = (a-b)\\sum\\limits_{i=0}^{n-1}a^{n-1-i}b^i \\\\ \\sum\\limits_{k=1}^n k^2 = \\frac{n(n+1)(2n+1)}{6} \\\\ \\sin\\alpha \\cos\\beta = \\frac{1}{2}(\\sin(\\alpha + \\beta) + \\sin(\\alpha - \\beta)) \\\\ \\sin\\alpha \\sin\\beta = \\frac{1}{2}(\\cos(\\alpha - \\beta) - \\cos(\\alpha + \\beta)) \\\\ \\cos\\alpha \\cos\\beta = \\frac{1}{2}(\\cos(\\alpha + \\beta) + \\cos(\\alpha - \\beta)) \\\\ \u6c42\u5bfc f(x) f(x) f(x)' f(x)' \\ln\\lvert\\sec x + \\tan x\\rvert \\ln\\lvert\\sec x + \\tan x\\rvert \\sec x \\sec x \\ln\\lvert\\csc x - \\cot x\\rvert \\ln\\lvert\\csc x - \\cot x\\rvert \\cot x \\cot x \u79ef\u5206 f(x) f(x) \\int f(x) \\mathrm{d}x \\int f(x) \\mathrm{d}x \\sqrt{a^2 + x^2} \\sqrt{a^2 + x^2} \\frac{x}{2}\\sqrt{a^2+x^2}+\\frac{a^2}{2}\\ln (\\frac{\\sqrt{a^2 + x^2}}{a}+\\frac{x}{a})+C \\frac{x}{2}\\sqrt{a^2+x^2}+\\frac{a^2}{2}\\ln (\\frac{\\sqrt{a^2 + x^2}}{a}+\\frac{x}{a})+C \\sqrt{a^2-x^2} \\sqrt{a^2-x^2} \\frac{x}{2}\\sqrt{a^2-x^2}+\\frac{a^2}{2}\\arcsin(\\frac{x}{a})+C \\frac{x}{2}\\sqrt{a^2-x^2}+\\frac{a^2}{2}\\arcsin(\\frac{x}{a})+C \\sin^2(x) \\sin^2(x) \\frac{x}{2}-\\frac{\\sin (2x)}{4}+C \\frac{x}{2}-\\frac{\\sin (2x)}{4}+C \u56fe\u50cf \u6781\u5750\u6807\u65b9\u7a0b \u5fc3\u5f62\u7ebf r=a(1-\\cos \\theta)(a > 0) r=a(1-\\cos \\theta)(a > 0) \u73ab\u7470\u7ebf r=a\\sin 3\\theta(a>0) r=a\\sin 3\\theta(a>0) \u963f\u57fa\u7c73\u5fb7\u87ba\u7ebf r = a\\theta (a > 0, \\theta \\ge 0) r = a\\theta (a > 0, \\theta \\ge 0) ] \u4f2f\u52aa\u5229\u53cc\u626d\u7ebf r^2 = a^2 \\cos 2\\theta, r^2 = a^2 \\sin \\theta r^2 = a^2 \\cos 2\\theta, r^2 = a^2 \\sin \\theta \u53c2\u6570\u65b9\u7a0b \u5e73\u6446\u7ebf x = r(t - \\sin t); y = r(1 - \\cos t) x = r(t - \\sin t); y = r(1 - \\cos t) \u661f\u578b\u7ebf\uff08\u5927\u5706 r r \u4e3a\u5c0f\u5706 4 4 \u500d\uff09 x = r\\cos^3 t; y = r\\sin^3 t x = r\\cos^3 t; y = r\\sin^3 t \u7a7a\u95f4\u5e73\u9762 \u9a6c\u978d\u9762 z=xy z=xy \u629b\u7269\u9762 z=x^2+y^2 z=x^2+y^2 \u5706\u9525\u9762 z=\\sqrt{x^2+y^2} z=\\sqrt{x^2+y^2} \u5fae\u5206\u65b9\u7a0b \u539f\u5f0f \u4ee3\u6362 \u5316\u7b80 y'+p(x)y=y^nq(x) y'+p(x)y=y^nq(x) z=y^{1-n} z=y^{1-n} \\frac{1}{1-n}z'+p(x)z=q(x) \\frac{1}{1-n}z'+p(x)z=q(x) y''=f(y,y') y''=f(y,y') y'=p y'=p p\\frac{\\mathrm{d}p}{\\mathrm{d}y}=f(y,p) p\\frac{\\mathrm{d}p}{\\mathrm{d}y}=f(y,p) y''+py'+q=f(x)e^{\\alpha x} y''+py'+q=f(x)e^{\\alpha x} y=R(x)e^{\\alpha x} y=R(x)e^{\\alpha x} R''+R'(2\\alpha + p)+(\\alpha^2+p\\alpha+q)R=f(x) R''+R'(2\\alpha + p)+(\\alpha^2+p\\alpha+q)R=f(x) x^ny^{(n)}+p_1x^{n-1}y^{(n-1)}+\\cdots +p_nxy=f(x) x^ny^{(n)}+p_1x^{n-1}y^{(n-1)}+\\cdots +p_nxy=f(x) x=e^t x=e^t x^iy^{(i)}=D(D-1)(D-i+1)y x^iy^{(i)}=D(D-1)(D-i+1)y \u200b \u7a7a\u95f4\u51e0\u4f55 \u65b9\u7a0b\u7ec4\u66f2\u7ebf\u7684\u5207\u5411\u91cf\uff1a \\begin{cases} F(x,y,z)=0\\\\ G(x,y,z)=0 \\end{cases}\\Rightarrow \\tau = \\left|\\begin{array}{ccc} \\boldsymbol{i} &\\boldsymbol{j} &\\boldsymbol{k}\\\\ F'_x &F'_y &F'_z\\\\ G'_x &G'_y &G'_z \\end{array}\\right| \\begin{cases} F(x,y,z)=0\\\\ G(x,y,z)=0 \\end{cases}\\Rightarrow \\tau = \\left|\\begin{array}{ccc} \\boldsymbol{i} &\\boldsymbol{j} &\\boldsymbol{k}\\\\ F'_x &F'_y &F'_z\\\\ G'_x &G'_y &G'_z \\end{array}\\right| \u70b9 P_0(x_0,y_0,z_0) P_0(x_0,y_0,z_0) \u5230\u5e73\u9762 Ax+By+Cz+D=0 Ax+By+Cz+D=0 \u7684\u8ddd\u79bb\u4e3a\uff1a \\frac{\\left| Ax_0 + By_0 + Cz_0 + D\\right|}{\\sqrt{A^2+B^2+C^2}} \\frac{\\left| Ax_0 + By_0 + Cz_0 + D\\right|}{\\sqrt{A^2+B^2+C^2}} \u5411\u91cf\u573a \\boldsymbol{A}(x,y,z)=P(x,y,z)\\boldsymbol{i}+Q(x,y,z)\\boldsymbol{j}+R(x,y,z)\\boldsymbol{k} \\boldsymbol{A}(x,y,z)=P(x,y,z)\\boldsymbol{i}+Q(x,y,z)\\boldsymbol{j}+R(x,y,z)\\boldsymbol{k} \uff1a \\mathrm{div} \\boldsymbol{A}=\\frac{\\partial P}{\\partial x}+\\frac{\\partial Q}{\\partial y}+\\frac{\\partial R}{\\partial z}\\\\ \\mathrm{rot} \\boldsymbol{A}= \\left| \\begin{array}{ccc} \\boldsymbol{i} &\\boldsymbol{j} &\\boldsymbol{k}\\\\ \\frac{\\partial}{\\partial x}&\\frac{\\partial}{\\partial y}&\\frac{\\partial}{\\partial z}\\\\ P &Q &R \\end{array} \\right| \\mathrm{div} \\boldsymbol{A}=\\frac{\\partial P}{\\partial x}+\\frac{\\partial Q}{\\partial y}+\\frac{\\partial R}{\\partial z}\\\\ \\mathrm{rot} \\boldsymbol{A}= \\left| \\begin{array}{ccc} \\boldsymbol{i} &\\boldsymbol{j} &\\boldsymbol{k}\\\\ \\frac{\\partial}{\\partial x}&\\frac{\\partial}{\\partial y}&\\frac{\\partial}{\\partial z}\\\\ P &Q &R \\end{array} \\right| \u5411\u91cf\u4e09\u91cd\u79ef\uff1a \\boldsymbol{A}\\times (\\boldsymbol{B}\\times \\boldsymbol{C})=(\\boldsymbol{A}\\cdot \\boldsymbol{C})\\boldsymbol{B}-(\\boldsymbol{A}\\cdot \\boldsymbol{B})\\boldsymbol{C} \\boldsymbol{A}\\times (\\boldsymbol{B}\\times \\boldsymbol{C})=(\\boldsymbol{A}\\cdot \\boldsymbol{C})\\boldsymbol{B}-(\\boldsymbol{A}\\cdot \\boldsymbol{B})\\boldsymbol{C} \u5206\u5e03 \u5206\u5e03 \u671f\u671b \u65b9\u5dee B(n,p) B(n,p) np np np(1-p) np(1-p) P(\\lambda) P(\\lambda) \\lambda \\lambda \\lambda \\lambda G(p) G(p) 1/p 1/p \u200b (1-p)/p^2 (1-p)/p^2 U(a,b) U(a,b) (a+b)/2 (a+b)/2 (b-a)^2/12 (b-a)^2/12 E(\\lambda) E(\\lambda) 1/\\lambda 1/\\lambda 1/\\lambda^2 1/\\lambda^2 \\chi^2(n) \\chi^2(n) n n 2n 2n","title":"\u5f20\u5b87\u8003\u7814\u6570\u5b66"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/math_postgraduate/#_1","text":"\u6cf0\u52d2\u5c55\u5f00 f(x) f(x) \\sum\\limits_{n=0}^\\infty \\frac{f(0)^{(n)}}{n!}x^n \\sum\\limits_{n=0}^\\infty \\frac{f(0)^{(n)}}{n!}x^n \\sin x \\sin x \\sum\\limits_{n=0}^\\infty (-1)^{n}\\frac{x^{2n+1}}{(2n+1)!} \\sum\\limits_{n=0}^\\infty (-1)^{n}\\frac{x^{2n+1}}{(2n+1)!} \\mathrm{sh} x \\mathrm{sh} x \\sum\\limits_{n=0}^\\infty \\frac{x^{2n+1}}{(2n+1)!} \\sum\\limits_{n=0}^\\infty \\frac{x^{2n+1}}{(2n+1)!} \\cos x \\cos x \\sum\\limits_{n=0}^\\infty (-1)^n \\frac{x^{2n}}{2n!} \\sum\\limits_{n=0}^\\infty (-1)^n \\frac{x^{2n}}{2n!} \\mathrm{ch} x \\mathrm{ch} x \\sum\\limits_{n=0}^\\infty \\frac{x^{2n}}{2n!} \\sum\\limits_{n=0}^\\infty \\frac{x^{2n}}{2n!} \\tan x \\tan x x+\\frac{1}{3}x^3+o(x^3) x+\\frac{1}{3}x^3+o(x^3) \\arcsin x \\arcsin x x+\\frac{1}{6}x^3+o(x^3) x+\\frac{1}{6}x^3+o(x^3) \\arctan x \\arctan x \\sum\\limits_{n=0}^\\infty (-1)^n\\frac{x^{2n+1}}{2n+1} \\sum\\limits_{n=0}^\\infty (-1)^n\\frac{x^{2n+1}}{2n+1} e^x e^x \\sum\\limits_{n=0}^\\infty \\frac{x^n}{n!} \\sum\\limits_{n=0}^\\infty \\frac{x^n}{n!} \\ln (1+x) \\ln (1+x) \\sum\\limits_{n=1}^\\infty (-1)^{n+1} \\frac{x^n}{n}, -1 < x \\le 1 \\sum\\limits_{n=1}^\\infty (-1)^{n+1} \\frac{x^n}{n}, -1 < x \\le 1 -\\ln (1-x) -\\ln (1-x) \\sum\\limits_{n=1}^\\infty \\frac{x^n}{n}, [-1,1) \\sum\\limits_{n=1}^\\infty \\frac{x^n}{n}, [-1,1) \\frac{x}{(1-x)^2} \\frac{x}{(1-x)^2} \\sum\\limits_{n=1}^\\infty nx^n, (-1,1) \\sum\\limits_{n=1}^\\infty nx^n, (-1,1) \\frac{1}{1+x} \\frac{1}{1+x} \\sum\\limits_{n=0}^\\infty (-1)^n x^n, -1 < x < 1 \\sum\\limits_{n=0}^\\infty (-1)^n x^n, -1 < x < 1 (1+x)^\\alpha (1+x)^\\alpha \u200b \\sum\\limits_{n=0}^\\infty \\frac{\\alpha^{\\underline{n}}}{n!}x^n, -1 < x < 1 \\sum\\limits_{n=0}^\\infty \\frac{\\alpha^{\\underline{n}}}{n!}x^n, -1 < x < 1 \u200b\uff0c\u7aef\u70b9\u89c6 \\alpha \\alpha \u200b \u4ee4 f''_{xx} = A, f''_{yy}=B,f''_{xy}=C f''_{xx} = A, f''_{yy}=B,f''_{xy}=C \u200b\uff1a f(x,y) = f(x_0, y_0)+(f'_x,f'_y)\\left(\\begin{array}{c}\\Delta x\\\\ \\Delta y\\end{array}\\right) + (\\Delta x \\:\\Delta y)\\left(\\begin{array}{cc}A &B\\\\ B & C\\end{array}\\right)\\left(\\begin{array}{c}\\Delta x\\\\ \\Delta y\\end{array}\\right) + R_2 f(x,y) = f(x_0, y_0)+(f'_x,f'_y)\\left(\\begin{array}{c}\\Delta x\\\\ \\Delta y\\end{array}\\right) + (\\Delta x \\:\\Delta y)\\left(\\begin{array}{cc}A &B\\\\ B & C\\end{array}\\right)\\left(\\begin{array}{c}\\Delta x\\\\ \\Delta y\\end{array}\\right) + R_2 \\left|\\begin{array}{cc}A &B\\\\ B & C\\end{array}\\right| \\left|\\begin{array}{cc}A &B\\\\ B & C\\end{array}\\right| \u6b63\u5b9a\uff0c\u6781\u5c0f\u503c\uff1b\u8d1f\u5b9a\uff0c\u6781\u5927\u503c\uff1b\u5c0f\u4e8e 0 0 \u975e\u6781\u503c\u70b9\u3002 \u5085\u91cc\u53f6\u5206\u6790 g(t) g(t) \u4e3a\u5468\u671f\u4e3a T T \u7684\u5468\u671f\u51fd\u6570\u3002 g(t) = \\frac{a_0}{2}+\\sum\\limits_{n=1}^\\infty a_n\\cos 2\\pi fnt + b_n\\sin 2\\pi fnt \\\\ a_n = \\frac{2}{T}\\int_0^T g(t)\\cos 2\\pi fnt \\mathrm{d}t \\\\ b_n = \\frac{2}{T}\\int_0^T g(t)\\sin 2\\pi fnt \\mathrm{d}t \\\\ g(t) = \\frac{a_0}{2}+\\sum\\limits_{n=1}^\\infty a_n\\cos 2\\pi fnt + b_n\\sin 2\\pi fnt \\\\ a_n = \\frac{2}{T}\\int_0^T g(t)\\cos 2\\pi fnt \\mathrm{d}t \\\\ b_n = \\frac{2}{T}\\int_0^T g(t)\\sin 2\\pi fnt \\mathrm{d}t \\\\ \u6052\u7b49\u53d8\u5f62 a^n-b^n = (a-b)\\sum\\limits_{i=0}^{n-1}a^{n-1-i}b^i \\\\ \\sum\\limits_{k=1}^n k^2 = \\frac{n(n+1)(2n+1)}{6} \\\\ \\sin\\alpha \\cos\\beta = \\frac{1}{2}(\\sin(\\alpha + \\beta) + \\sin(\\alpha - \\beta)) \\\\ \\sin\\alpha \\sin\\beta = \\frac{1}{2}(\\cos(\\alpha - \\beta) - \\cos(\\alpha + \\beta)) \\\\ \\cos\\alpha \\cos\\beta = \\frac{1}{2}(\\cos(\\alpha + \\beta) + \\cos(\\alpha - \\beta)) \\\\ a^n-b^n = (a-b)\\sum\\limits_{i=0}^{n-1}a^{n-1-i}b^i \\\\ \\sum\\limits_{k=1}^n k^2 = \\frac{n(n+1)(2n+1)}{6} \\\\ \\sin\\alpha \\cos\\beta = \\frac{1}{2}(\\sin(\\alpha + \\beta) + \\sin(\\alpha - \\beta)) \\\\ \\sin\\alpha \\sin\\beta = \\frac{1}{2}(\\cos(\\alpha - \\beta) - \\cos(\\alpha + \\beta)) \\\\ \\cos\\alpha \\cos\\beta = \\frac{1}{2}(\\cos(\\alpha + \\beta) + \\cos(\\alpha - \\beta)) \\\\ \u6c42\u5bfc f(x) f(x) f(x)' f(x)' \\ln\\lvert\\sec x + \\tan x\\rvert \\ln\\lvert\\sec x + \\tan x\\rvert \\sec x \\sec x \\ln\\lvert\\csc x - \\cot x\\rvert \\ln\\lvert\\csc x - \\cot x\\rvert \\cot x \\cot x \u79ef\u5206 f(x) f(x) \\int f(x) \\mathrm{d}x \\int f(x) \\mathrm{d}x \\sqrt{a^2 + x^2} \\sqrt{a^2 + x^2} \\frac{x}{2}\\sqrt{a^2+x^2}+\\frac{a^2}{2}\\ln (\\frac{\\sqrt{a^2 + x^2}}{a}+\\frac{x}{a})+C \\frac{x}{2}\\sqrt{a^2+x^2}+\\frac{a^2}{2}\\ln (\\frac{\\sqrt{a^2 + x^2}}{a}+\\frac{x}{a})+C \\sqrt{a^2-x^2} \\sqrt{a^2-x^2} \\frac{x}{2}\\sqrt{a^2-x^2}+\\frac{a^2}{2}\\arcsin(\\frac{x}{a})+C \\frac{x}{2}\\sqrt{a^2-x^2}+\\frac{a^2}{2}\\arcsin(\\frac{x}{a})+C \\sin^2(x) \\sin^2(x) \\frac{x}{2}-\\frac{\\sin (2x)}{4}+C \\frac{x}{2}-\\frac{\\sin (2x)}{4}+C \u56fe\u50cf \u6781\u5750\u6807\u65b9\u7a0b \u5fc3\u5f62\u7ebf r=a(1-\\cos \\theta)(a > 0) r=a(1-\\cos \\theta)(a > 0) \u73ab\u7470\u7ebf r=a\\sin 3\\theta(a>0) r=a\\sin 3\\theta(a>0) \u963f\u57fa\u7c73\u5fb7\u87ba\u7ebf r = a\\theta (a > 0, \\theta \\ge 0) r = a\\theta (a > 0, \\theta \\ge 0) ] \u4f2f\u52aa\u5229\u53cc\u626d\u7ebf r^2 = a^2 \\cos 2\\theta, r^2 = a^2 \\sin \\theta r^2 = a^2 \\cos 2\\theta, r^2 = a^2 \\sin \\theta \u53c2\u6570\u65b9\u7a0b \u5e73\u6446\u7ebf x = r(t - \\sin t); y = r(1 - \\cos t) x = r(t - \\sin t); y = r(1 - \\cos t) \u661f\u578b\u7ebf\uff08\u5927\u5706 r r \u4e3a\u5c0f\u5706 4 4 \u500d\uff09 x = r\\cos^3 t; y = r\\sin^3 t x = r\\cos^3 t; y = r\\sin^3 t \u7a7a\u95f4\u5e73\u9762 \u9a6c\u978d\u9762 z=xy z=xy \u629b\u7269\u9762 z=x^2+y^2 z=x^2+y^2 \u5706\u9525\u9762 z=\\sqrt{x^2+y^2} z=\\sqrt{x^2+y^2} \u5fae\u5206\u65b9\u7a0b \u539f\u5f0f \u4ee3\u6362 \u5316\u7b80 y'+p(x)y=y^nq(x) y'+p(x)y=y^nq(x) z=y^{1-n} z=y^{1-n} \\frac{1}{1-n}z'+p(x)z=q(x) \\frac{1}{1-n}z'+p(x)z=q(x) y''=f(y,y') y''=f(y,y') y'=p y'=p p\\frac{\\mathrm{d}p}{\\mathrm{d}y}=f(y,p) p\\frac{\\mathrm{d}p}{\\mathrm{d}y}=f(y,p) y''+py'+q=f(x)e^{\\alpha x} y''+py'+q=f(x)e^{\\alpha x} y=R(x)e^{\\alpha x} y=R(x)e^{\\alpha x} R''+R'(2\\alpha + p)+(\\alpha^2+p\\alpha+q)R=f(x) R''+R'(2\\alpha + p)+(\\alpha^2+p\\alpha+q)R=f(x) x^ny^{(n)}+p_1x^{n-1}y^{(n-1)}+\\cdots +p_nxy=f(x) x^ny^{(n)}+p_1x^{n-1}y^{(n-1)}+\\cdots +p_nxy=f(x) x=e^t x=e^t x^iy^{(i)}=D(D-1)(D-i+1)y x^iy^{(i)}=D(D-1)(D-i+1)y \u200b \u7a7a\u95f4\u51e0\u4f55 \u65b9\u7a0b\u7ec4\u66f2\u7ebf\u7684\u5207\u5411\u91cf\uff1a \\begin{cases} F(x,y,z)=0\\\\ G(x,y,z)=0 \\end{cases}\\Rightarrow \\tau = \\left|\\begin{array}{ccc} \\boldsymbol{i} &\\boldsymbol{j} &\\boldsymbol{k}\\\\ F'_x &F'_y &F'_z\\\\ G'_x &G'_y &G'_z \\end{array}\\right| \\begin{cases} F(x,y,z)=0\\\\ G(x,y,z)=0 \\end{cases}\\Rightarrow \\tau = \\left|\\begin{array}{ccc} \\boldsymbol{i} &\\boldsymbol{j} &\\boldsymbol{k}\\\\ F'_x &F'_y &F'_z\\\\ G'_x &G'_y &G'_z \\end{array}\\right| \u70b9 P_0(x_0,y_0,z_0) P_0(x_0,y_0,z_0) \u5230\u5e73\u9762 Ax+By+Cz+D=0 Ax+By+Cz+D=0 \u7684\u8ddd\u79bb\u4e3a\uff1a \\frac{\\left| Ax_0 + By_0 + Cz_0 + D\\right|}{\\sqrt{A^2+B^2+C^2}} \\frac{\\left| Ax_0 + By_0 + Cz_0 + D\\right|}{\\sqrt{A^2+B^2+C^2}} \u5411\u91cf\u573a \\boldsymbol{A}(x,y,z)=P(x,y,z)\\boldsymbol{i}+Q(x,y,z)\\boldsymbol{j}+R(x,y,z)\\boldsymbol{k} \\boldsymbol{A}(x,y,z)=P(x,y,z)\\boldsymbol{i}+Q(x,y,z)\\boldsymbol{j}+R(x,y,z)\\boldsymbol{k} \uff1a \\mathrm{div} \\boldsymbol{A}=\\frac{\\partial P}{\\partial x}+\\frac{\\partial Q}{\\partial y}+\\frac{\\partial R}{\\partial z}\\\\ \\mathrm{rot} \\boldsymbol{A}= \\left| \\begin{array}{ccc} \\boldsymbol{i} &\\boldsymbol{j} &\\boldsymbol{k}\\\\ \\frac{\\partial}{\\partial x}&\\frac{\\partial}{\\partial y}&\\frac{\\partial}{\\partial z}\\\\ P &Q &R \\end{array} \\right| \\mathrm{div} \\boldsymbol{A}=\\frac{\\partial P}{\\partial x}+\\frac{\\partial Q}{\\partial y}+\\frac{\\partial R}{\\partial z}\\\\ \\mathrm{rot} \\boldsymbol{A}= \\left| \\begin{array}{ccc} \\boldsymbol{i} &\\boldsymbol{j} &\\boldsymbol{k}\\\\ \\frac{\\partial}{\\partial x}&\\frac{\\partial}{\\partial y}&\\frac{\\partial}{\\partial z}\\\\ P &Q &R \\end{array} \\right| \u5411\u91cf\u4e09\u91cd\u79ef\uff1a \\boldsymbol{A}\\times (\\boldsymbol{B}\\times \\boldsymbol{C})=(\\boldsymbol{A}\\cdot \\boldsymbol{C})\\boldsymbol{B}-(\\boldsymbol{A}\\cdot \\boldsymbol{B})\\boldsymbol{C} \\boldsymbol{A}\\times (\\boldsymbol{B}\\times \\boldsymbol{C})=(\\boldsymbol{A}\\cdot \\boldsymbol{C})\\boldsymbol{B}-(\\boldsymbol{A}\\cdot \\boldsymbol{B})\\boldsymbol{C} \u5206\u5e03 \u5206\u5e03 \u671f\u671b \u65b9\u5dee B(n,p) B(n,p) np np np(1-p) np(1-p) P(\\lambda) P(\\lambda) \\lambda \\lambda \\lambda \\lambda G(p) G(p) 1/p 1/p \u200b (1-p)/p^2 (1-p)/p^2 U(a,b) U(a,b) (a+b)/2 (a+b)/2 (b-a)^2/12 (b-a)^2/12 E(\\lambda) E(\\lambda) 1/\\lambda 1/\\lambda 1/\\lambda^2 1/\\lambda^2 \\chi^2(n) \\chi^2(n) n n 2n 2n","title":"\u5f20\u5b87\u8003\u7814\u6570\u5b66"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/","text":"\u8ba1\u7b97\u673a\u7f51\u7edc \u539f\u7406 ELEMENTARY DATA LINK PROTOCOLS Some definitions needed in the protocols to follow #define MAX_PKT 1024 typedef enum { false, true } boolean; typedef unsigned int seq_nr; typedef struct { unsigned char data[MAX PKT]; } packet; typedef enum { data, ack, nak } frame_kind; typedef struct { frame_kind kind; seq_nr seq; seq_nr ack; packet info; } frame; void wait_for_event(event_type *event); void from_network_layer(packet *p); void to_network_layer(packet *p); void from_physical_layer(frame *r); void to_physical_layer(frame *s); void start_timer(seq_nr k); void stop_timer(seq_nr k); void start_ack_timer(void); void stop_ack_timer(void); void enable_network_layer(void); void disable_network_layer(void); #define inc(k) \\ if (k < MAX_SEQ) \\ k = k + 1; \\ else \\ k = 0 A utopian simplex protocol typedef enum { frame_arrival } event_type; #include \"protocol.h\" void sender1(void) { frame s; packet buffer; while (true) { from_network_layer(&buffer); s.info = buffer; to_physical_layer(&s); } } void receiver1(void) { frame r; event_type event; while (true) { wait_for_event(&event); from_physical_layer(&r); to_network_layer(&r.info); } } A Simplex Stop-and-Wait Protocol for an Error-Free Channel The only difference between receiver1 and receiver2 is that after delivering a packet to the network layer, receiver2 sends an acknowledgement frame back to the sender before entering the wait loop again. This delay is a simple example of a flow control protocol. typedef enum { frame_arrival } event_type; #include \"protocol.h\" void sender2(void) { frame s; packet buffer; event_type event; while (true) { from_network_layer(&buffer); s.info = buffer; to_physical_layer(&s); wait_for_event(&event); } } void receiver2(void) { frame r, s; event_type event; while (true) { wait_for_event(&event); from_physical_layer(&r); to_network_layer(&r.info); to_physical_layer(&s); } } A Simplex Stop-and-Wait Protocol for a Noisy Channel A positive acknowledgement with retransmission protocol. #define MAX_SEQ 1 typedef enum { frame_arrival, cksum_err, timeout } event_type; #include \"protocol.h\" void sender3(void) { seq_nr next_frame_to_send; frame s; packet buffer; event_type event; next_frame_to_send = 0; from_network_layer(&buffer); while (true) { s.info = buffer; s.seq = next_frame_to_send; to_physical_layer(&s); start_timer(s.seq); wait_for_event(&event); if (event == frame_arrival) { from_physical_layer(&s); if (s.ack == next_frame_to_send) { stop_timer(s.ack); from_network_layer(&buffer); inc(next_frame_to_send); } } } } void receiver3(void) { seq_nr frame_expected; frame r, s; event_type event; frame_expected = 0; while (true) { wait_for_event(&event); if (event == frame_arrival) { from_physical_layer(&r); if (r.seq == frame_expected) { to_network_layer(&r.info); inc(frame_expected); } s.ack = 1 \u2212 frame_expected; to_physical_layer(&s); } } } A 1-bit sliding window protocol #define MAX_SEQ 1 typedef enum { frame_arrival, cksum_err, timeout } event_type; #include \"protocol.h\" void protocol4(void) { seq_nr next_frame_to_send; seq_nr frame_expected; frame r, s; packet buffer; event_type event; next_frame_to_send = 0; frame_expected = 0; from_network_layer(&buffer); s.info = buffer; s.seq = next_frame_to_send; s.ack = 1 \u2212 frame_expected; to_physical_layer(&s); start_timer(s.seq); while (true) { wait_for_event(&event); if (event == frame_arrival) { from_physical_layer(&r); if (r.seq == frame_expected) { to_network_layer(&r.info); inc(frame_expected); } if (r.ack == next_frame_to_send) { stop_timer(r.ack); from_network_layer(&buffer); inc(next_frame_to_send); } } s.info = buffer; s.seq = next_frame_to_send; s.ack = 1 \u2212 frame_expected; to_physical_layer(&s); start_timer(s.seq); } } A sliding window protocol using go-back-n #define MAX \\ SEQ 7 typedef enum { frame_arrival, \\ cksum_err, \\ timeout, \\ network layer ready } event_type; \\ #include \"protocol.h\" static boolean between(seq_nr a, seq_nr b, seq_nr c) { if (((a <= b) && (b < c)) || ((c < a) && (a <= b)) || ((b < c) && (c < a))) return (true); else return (false); } static void send_data(seq_nr frame_nr, seq_nr frame_expected, packet buffer[]) { frame s; s.info = buffer[frame_nr]; s.seq = frame_nr; } void protocol5(void) { seq_nr next_frame_to_send; seq_nr ack_expected; seq_nr frame_expected; frame r; packet buffer[MAX_SEQ + 1]; seq_nr nbuffered; seq_nr i; event_type event; enable_network_layer(); next_frame_to_send = 0; nbuffered = 0; ack_expected = 0; frame_expected = 0; while (true) { wait_for_event(&event); to_physical_layer(&s); start_timer(frame_nr); switch (event) { case network_layer_ready: nbuffered = nbuffered + 1; inc(next_frame_to_send); break; case frame_arrival: from_physical_layer(&r); if (r.seq == frame_expected) { to_network_layer(&r.info); inc(frame_expected); } while (between(ack_expected, r.ack, next_frame_to_send)) { nbuffered = nbuffered \u2212 1; stop_timer(ack_expected); inc(ack_expected); } break; case cksum_err: break; case timeout: for (i = 1; i <= nbuffered; i++) { inc(next_frame_to_send); } } if (nbuffered < MAX_SEQ) enable_network_layer(); else disable_network_layer(); } } A sliding window protocol using selective repeat #define MAX_SEQ 7 #define NR \\ BUFS((MAX_SEQ + 1) / 2) \\ typedef enum \\ { \\ frame_arrival, \\ cksum_err, \\ timeout, \\ network layer ready, \\ ack timeout \\ } event_type; \\ #include \"protocol.h\" boolean no_nak = true; seq_nr oldest_frame = MAX_SEQ + 1; static boolean between(seq_nr a, seq_nr b, seq_nr c) { return ((a <= b) && (b < c)) || ((c < a) && (a <= b)) || ((b < c) && (c < a)); } static void send_frame(frame_kind fk, seq_nr frame_nr, seq_nr frame_expected, packet buffer[]) { frame s; s.kind = fk; if (fk == data) s.info = buffer[frame_nr % NR_BUFS]; s.seq = frame_nr; s.ack = (frame_expected + MAX_SEQ) % (MAX_SEQ + 1); if (fk == nak) no_nak = false; to_physical_layer(&s); if (fk == data) start_timer(frame_nr % NR_BUFS); stop_ack_timer(); } void protocol6(void) { seq_nr ack_expected; seq_nr next_frame_to_send; seq_nr frame_expected; seq_nr too_far; int i; frame r; packet out_buf[NR_BUFS]; packet in_buf[NR_BUFS]; boolean arrived[NR_BUFS]; seq_nr nbuffered; event_type event; enable_network_layer(); next_frame_to_send = 0; ack_expected = 0; frame_expected = 0; too_far = NR_BUFS; nbuffered = 0; for (i = 0; i < NR_BUFS; i++) arrived[i] = false; while (true) { wait_for_event(&event); switch (event) { case network layer ready: nbuffered = nbuffered + 1; from_network_layer(&out_buf[next_frame_to_send % NR_BUFS]); send_frame(data, next_frame_to_send, frame_expected, out_buf); inc(next_frame_to_send); break; case frame_arrival: from_physical_layer(&r); if (r.kind == data) { if ((r.seq != frame_expected) && no_nak) send_frame(nak, 0, frame_expected, out_buf); else start_ack_timer(); if (between(frame_expected, r.seq, too_far) && (arrived[r.seq % NR_BUFS] == false)) { arrived[r.seq % NR_BUFS] = true; in_buf[r.seq % NR_BUFS] = r.info; while (arrived[frame_expected % NR_BUFS]) { to_network_layer(&in_buf[frame_expected % NR_BUFS]); no_nak = true; arrived[frame_expected % NR_BUFS] = false; inc(frame_expected); inc(too_far); start_ack_timer(); } } } if ((r.kind == nak) && between(ack_expected, (r.ack + 1) % (MAX_SEQ + 1), next_frame_to_send)) send_frame(data, (r.ack + 1) % (MAX_SEQ + 1), frame_expected, out_buf); while (between(ack_expected, r.ack, next_frame_to_send)) { nbuffered = nbuffered \u2212 1; stop_timer(ack_expected % NR_BUFS); inc(ack_expected); } break; case cksum_err: if (no_nak) send_frame(nak, 0, frame_expected, out_buf); break; case timeout: send_frame(data, oldest_frame, frame_expected, out_buf); break; case ack timeout: send_frame(ack, 0, frame_expected, out_buf); } if (nbuffered < NR_BUFS) enable_network_layer(); else disable_network_layer(); } } SMTP \u5b9e\u9a8c dogtorhuang@foxmail.com -> hrz_ms@outlook.com base64\u7f16\u7801 \u7528\u6237\u540d\u5982\u4e0b\uff0c\u5bc6\u7801\u540c\u7406\u3002 echo -n \"dogtorhuang\" | base64 ZG9ndG9yaHVhbmc= telnet telnet smtp.qq.com 25 Trying 14.18.175.202... Connected to smtp.qq.com. Escape character is '^]'. 220 newxmesmtplogicsvrszb7.qq.com XMail Esmtp QQ Mail Server. HELO hrz 250-newxmesmtplogicsvrszb7.qq.com-11.176.226.127-42011439 250-SIZE 73400320 250 OK AUTH LOGIN 334 VXNlcm5hbWU6 ZG9ndG9yaHVhbmc= 334 UGFzc3dvcmQ6 c2pjdnFrcnNmZHRuYmVoaQ== 235 Authentication successful MAIL FROM:<dogtorhuang@foxmail.com> 250 OK. RCPT TO:<hrz_ms@outlook.com> 250 OK DATA 354 End data with <CR><LF>.<CR><LF>. FROM: dogtorhuang@foxmail.com To: hrz_ms@outlook.com Subject: confirm information Hi, Michael I got your message. Looking forward to meeting you. Thanks & Best Regards. . 250 OK: queued as.","title":"\u8ba1\u7b97\u673a\u7f51\u7edc"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/#_1","text":"","title":"\u8ba1\u7b97\u673a\u7f51\u7edc"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/#_2","text":"","title":"\u539f\u7406"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/#elementary-data-link-protocols","text":"","title":"ELEMENTARY DATA LINK PROTOCOLS"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/#some-definitions-needed-in-the-protocols-to-follow","text":"#define MAX_PKT 1024 typedef enum { false, true } boolean; typedef unsigned int seq_nr; typedef struct { unsigned char data[MAX PKT]; } packet; typedef enum { data, ack, nak } frame_kind; typedef struct { frame_kind kind; seq_nr seq; seq_nr ack; packet info; } frame; void wait_for_event(event_type *event); void from_network_layer(packet *p); void to_network_layer(packet *p); void from_physical_layer(frame *r); void to_physical_layer(frame *s); void start_timer(seq_nr k); void stop_timer(seq_nr k); void start_ack_timer(void); void stop_ack_timer(void); void enable_network_layer(void); void disable_network_layer(void); #define inc(k) \\ if (k < MAX_SEQ) \\ k = k + 1; \\ else \\ k = 0","title":"Some definitions needed in the protocols to follow"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/#a-utopian-simplex-protocol","text":"typedef enum { frame_arrival } event_type; #include \"protocol.h\" void sender1(void) { frame s; packet buffer; while (true) { from_network_layer(&buffer); s.info = buffer; to_physical_layer(&s); } } void receiver1(void) { frame r; event_type event; while (true) { wait_for_event(&event); from_physical_layer(&r); to_network_layer(&r.info); } }","title":"A utopian simplex protocol"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/#a-simplex-stop-and-wait-protocol-for-an-error-free-channel","text":"The only difference between receiver1 and receiver2 is that after delivering a packet to the network layer, receiver2 sends an acknowledgement frame back to the sender before entering the wait loop again. This delay is a simple example of a flow control protocol. typedef enum { frame_arrival } event_type; #include \"protocol.h\" void sender2(void) { frame s; packet buffer; event_type event; while (true) { from_network_layer(&buffer); s.info = buffer; to_physical_layer(&s); wait_for_event(&event); } } void receiver2(void) { frame r, s; event_type event; while (true) { wait_for_event(&event); from_physical_layer(&r); to_network_layer(&r.info); to_physical_layer(&s); } }","title":"A Simplex Stop-and-Wait Protocol for an Error-Free Channel"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/#a-simplex-stop-and-wait-protocol-for-a-noisy-channel","text":"A positive acknowledgement with retransmission protocol. #define MAX_SEQ 1 typedef enum { frame_arrival, cksum_err, timeout } event_type; #include \"protocol.h\" void sender3(void) { seq_nr next_frame_to_send; frame s; packet buffer; event_type event; next_frame_to_send = 0; from_network_layer(&buffer); while (true) { s.info = buffer; s.seq = next_frame_to_send; to_physical_layer(&s); start_timer(s.seq); wait_for_event(&event); if (event == frame_arrival) { from_physical_layer(&s); if (s.ack == next_frame_to_send) { stop_timer(s.ack); from_network_layer(&buffer); inc(next_frame_to_send); } } } } void receiver3(void) { seq_nr frame_expected; frame r, s; event_type event; frame_expected = 0; while (true) { wait_for_event(&event); if (event == frame_arrival) { from_physical_layer(&r); if (r.seq == frame_expected) { to_network_layer(&r.info); inc(frame_expected); } s.ack = 1 \u2212 frame_expected; to_physical_layer(&s); } } }","title":"A Simplex Stop-and-Wait Protocol for a Noisy Channel"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/#a-1-bit-sliding-window-protocol","text":"#define MAX_SEQ 1 typedef enum { frame_arrival, cksum_err, timeout } event_type; #include \"protocol.h\" void protocol4(void) { seq_nr next_frame_to_send; seq_nr frame_expected; frame r, s; packet buffer; event_type event; next_frame_to_send = 0; frame_expected = 0; from_network_layer(&buffer); s.info = buffer; s.seq = next_frame_to_send; s.ack = 1 \u2212 frame_expected; to_physical_layer(&s); start_timer(s.seq); while (true) { wait_for_event(&event); if (event == frame_arrival) { from_physical_layer(&r); if (r.seq == frame_expected) { to_network_layer(&r.info); inc(frame_expected); } if (r.ack == next_frame_to_send) { stop_timer(r.ack); from_network_layer(&buffer); inc(next_frame_to_send); } } s.info = buffer; s.seq = next_frame_to_send; s.ack = 1 \u2212 frame_expected; to_physical_layer(&s); start_timer(s.seq); } }","title":"A 1-bit sliding window protocol"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/#a-sliding-window-protocol-using-go-back-n","text":"#define MAX \\ SEQ 7 typedef enum { frame_arrival, \\ cksum_err, \\ timeout, \\ network layer ready } event_type; \\ #include \"protocol.h\" static boolean between(seq_nr a, seq_nr b, seq_nr c) { if (((a <= b) && (b < c)) || ((c < a) && (a <= b)) || ((b < c) && (c < a))) return (true); else return (false); } static void send_data(seq_nr frame_nr, seq_nr frame_expected, packet buffer[]) { frame s; s.info = buffer[frame_nr]; s.seq = frame_nr; } void protocol5(void) { seq_nr next_frame_to_send; seq_nr ack_expected; seq_nr frame_expected; frame r; packet buffer[MAX_SEQ + 1]; seq_nr nbuffered; seq_nr i; event_type event; enable_network_layer(); next_frame_to_send = 0; nbuffered = 0; ack_expected = 0; frame_expected = 0; while (true) { wait_for_event(&event); to_physical_layer(&s); start_timer(frame_nr); switch (event) { case network_layer_ready: nbuffered = nbuffered + 1; inc(next_frame_to_send); break; case frame_arrival: from_physical_layer(&r); if (r.seq == frame_expected) { to_network_layer(&r.info); inc(frame_expected); } while (between(ack_expected, r.ack, next_frame_to_send)) { nbuffered = nbuffered \u2212 1; stop_timer(ack_expected); inc(ack_expected); } break; case cksum_err: break; case timeout: for (i = 1; i <= nbuffered; i++) { inc(next_frame_to_send); } } if (nbuffered < MAX_SEQ) enable_network_layer(); else disable_network_layer(); } }","title":"A sliding window protocol using go-back-n"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/#a-sliding-window-protocol-using-selective-repeat","text":"#define MAX_SEQ 7 #define NR \\ BUFS((MAX_SEQ + 1) / 2) \\ typedef enum \\ { \\ frame_arrival, \\ cksum_err, \\ timeout, \\ network layer ready, \\ ack timeout \\ } event_type; \\ #include \"protocol.h\" boolean no_nak = true; seq_nr oldest_frame = MAX_SEQ + 1; static boolean between(seq_nr a, seq_nr b, seq_nr c) { return ((a <= b) && (b < c)) || ((c < a) && (a <= b)) || ((b < c) && (c < a)); } static void send_frame(frame_kind fk, seq_nr frame_nr, seq_nr frame_expected, packet buffer[]) { frame s; s.kind = fk; if (fk == data) s.info = buffer[frame_nr % NR_BUFS]; s.seq = frame_nr; s.ack = (frame_expected + MAX_SEQ) % (MAX_SEQ + 1); if (fk == nak) no_nak = false; to_physical_layer(&s); if (fk == data) start_timer(frame_nr % NR_BUFS); stop_ack_timer(); } void protocol6(void) { seq_nr ack_expected; seq_nr next_frame_to_send; seq_nr frame_expected; seq_nr too_far; int i; frame r; packet out_buf[NR_BUFS]; packet in_buf[NR_BUFS]; boolean arrived[NR_BUFS]; seq_nr nbuffered; event_type event; enable_network_layer(); next_frame_to_send = 0; ack_expected = 0; frame_expected = 0; too_far = NR_BUFS; nbuffered = 0; for (i = 0; i < NR_BUFS; i++) arrived[i] = false; while (true) { wait_for_event(&event); switch (event) { case network layer ready: nbuffered = nbuffered + 1; from_network_layer(&out_buf[next_frame_to_send % NR_BUFS]); send_frame(data, next_frame_to_send, frame_expected, out_buf); inc(next_frame_to_send); break; case frame_arrival: from_physical_layer(&r); if (r.kind == data) { if ((r.seq != frame_expected) && no_nak) send_frame(nak, 0, frame_expected, out_buf); else start_ack_timer(); if (between(frame_expected, r.seq, too_far) && (arrived[r.seq % NR_BUFS] == false)) { arrived[r.seq % NR_BUFS] = true; in_buf[r.seq % NR_BUFS] = r.info; while (arrived[frame_expected % NR_BUFS]) { to_network_layer(&in_buf[frame_expected % NR_BUFS]); no_nak = true; arrived[frame_expected % NR_BUFS] = false; inc(frame_expected); inc(too_far); start_ack_timer(); } } } if ((r.kind == nak) && between(ack_expected, (r.ack + 1) % (MAX_SEQ + 1), next_frame_to_send)) send_frame(data, (r.ack + 1) % (MAX_SEQ + 1), frame_expected, out_buf); while (between(ack_expected, r.ack, next_frame_to_send)) { nbuffered = nbuffered \u2212 1; stop_timer(ack_expected % NR_BUFS); inc(ack_expected); } break; case cksum_err: if (no_nak) send_frame(nak, 0, frame_expected, out_buf); break; case timeout: send_frame(data, oldest_frame, frame_expected, out_buf); break; case ack timeout: send_frame(ack, 0, frame_expected, out_buf); } if (nbuffered < NR_BUFS) enable_network_layer(); else disable_network_layer(); } }","title":"A sliding window protocol using selective repeat"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/network/#smtp","text":"dogtorhuang@foxmail.com -> hrz_ms@outlook.com base64\u7f16\u7801 \u7528\u6237\u540d\u5982\u4e0b\uff0c\u5bc6\u7801\u540c\u7406\u3002 echo -n \"dogtorhuang\" | base64 ZG9ndG9yaHVhbmc= telnet telnet smtp.qq.com 25 Trying 14.18.175.202... Connected to smtp.qq.com. Escape character is '^]'. 220 newxmesmtplogicsvrszb7.qq.com XMail Esmtp QQ Mail Server. HELO hrz 250-newxmesmtplogicsvrszb7.qq.com-11.176.226.127-42011439 250-SIZE 73400320 250 OK AUTH LOGIN 334 VXNlcm5hbWU6 ZG9ndG9yaHVhbmc= 334 UGFzc3dvcmQ6 c2pjdnFrcnNmZHRuYmVoaQ== 235 Authentication successful MAIL FROM:<dogtorhuang@foxmail.com> 250 OK. RCPT TO:<hrz_ms@outlook.com> 250 OK DATA 354 End data with <CR><LF>.<CR><LF>. FROM: dogtorhuang@foxmail.com To: hrz_ms@outlook.com Subject: confirm information Hi, Michael I got your message. Looking forward to meeting you. Thanks & Best Regards. . 250 OK: queued as.","title":"SMTP \u5b9e\u9a8c"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/politics/","text":"\u5f90\u6d9b\u8003\u7814\u653f\u6cbb \u9a6c\u514b\u601d\u539f\u7406 \u601d\u4fee\u6cd5\u57fa","title":"\u5f90\u6d9b\u8003\u7814\u653f\u6cbb"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/politics/#_1","text":"","title":"\u5f90\u6d9b\u8003\u7814\u653f\u6cbb"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/politics/#_2","text":"","title":"\u9a6c\u514b\u601d\u539f\u7406"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/politics/#_3","text":"","title":"\u601d\u4fee\u6cd5\u57fa"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/appendix/gcc_inline_asm/","text":"GCC\u6269\u5c55\u5185\u8054\u6c47\u7f16 GCC\u6269\u5c55\u5185\u8054\u6c47\u7f16\u7684\u57fa\u672c\u683c\u5f0f\u662f\uff1a asm [volatile] ( Assembler Template : Output Operands [ : Input Operands [ : Clobbers ] ]) \u5982\u679c\u4e0d\u5e0c\u671b\u6c47\u7f16\u8bed\u53e5\u88ab gcc \u4f18\u5316\u800c\u6539\u53d8\u4f4d\u7f6e\uff0c\u5c31\u9700\u8981\u5728 asm \u7b26\u53f7\u540e\u6dfb\u52a0 volatile \u5173\u952e\u8bcd\uff1aasm volatile(...)\uff1b Assembler Template \u4e3a\u6c47\u7f16\u6307\u4ee4\u90e8\u5206\uff0c\u4f8b\u5982\uff0c\"movl %%cr0,%0\\n\\t\"\u3002\u6570\u5b57\u524d\u52a0\u524d\u7f00 \u201c\uff05\u201c\uff0c\u5982\uff051\uff0c\uff052\u7b49\u8868\u793a\u4f7f\u7528\u5bc4\u5b58\u5668\u7684\u6837\u677f\u64cd\u4f5c\u6570\uff0c\u8fd9\u7c7b\u5bc4\u5b58\u5668\u7684\u503c\u548c\u8fd9\u4e4b\u540e\u7684\u7ea6\u675f\u5173\u8054\uff0c\u5982%0\uff08The first constraint following\uff09\u3002\u5728\u7528\u5230\u5177\u4f53\u7684\u5bc4\u5b58\u5668\u65f6\u5c31\u5728\u524d\u9762\u52a0 \u4e24\u4e2a\u201c\uff05\u201d \uff0c\u5982 %%cr0 \u3002 \u8f93\u51fa\u90e8\u5206\uff08output operand list\uff09\uff0c\u7528\u4ee5\u89c4\u5b9a\u5bf9\u8f93\u51fa\u53d8\u91cf\uff08\u76ee\u6807\u64cd\u4f5c\u6570\uff09\u5982\u4f55\u4e0e\u5bc4\u5b58\u5668\u7ed3\u5408\u7684\u7ea6\u675f\uff08constraint\uff09,\u8f93\u51fa\u90e8\u5206\u53ef\u4ee5\u6709\u591a\u4e2a\u7ea6\u675f\uff0c\u4e92\u76f8\u4ee5\u9017\u53f7\u5206\u5f00\u3002\u6bcf\u4e2a\u7ea6\u675f\u4ee5\u201c\uff1d\u201d\u5f00\u5934\uff0c\u63a5\u7740\u7528\u4e00\u4e2a\u5b57\u6bcd\u6765\u8868\u793a\u64cd\u4f5c\u6570\u7684\u7c7b\u578b\uff0c\u7136\u540e\u662f\u5173\u4e8e\u53d8\u91cf\u7ed3\u5408\u7684\u7ea6\u675f\u3002\u4f8b\u5982\uff0c\u4e0a\u4f8b\u4e2d\uff1a :\"=r\" (__dummy) \u201c\uff1dr\u201d\u8868\u793a\u76f8\u5e94\u7684\u76ee\u6807\u64cd\u4f5c\u6570\uff08\u6307\u4ee4\u90e8\u5206\u7684%0\uff09\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u4e00\u4e2a\u901a\u7528\u5bc4\u5b58\u5668\uff0c\u5e76\u4e14\u53d8\u91cf__dummy \u5b58\u653e\u5728\u8fd9\u4e2a\u5bc4\u5b58\u5668\u4e2d\uff0c\u4f46\u5982\u679c\u662f\uff1a :\u201c\uff1dm\u201d(__dummy) \u201c\uff1dm\u201d\u5c31\u8868\u793a\u76f8\u5e94\u7684\u76ee\u6807\u64cd\u4f5c\u6570\u662f\u5b58\u653e\u5728\u5185\u5b58\u5355\u5143__dummy\u4e2d\u3002\u8868\u793a\u7ea6\u675f\u6761\u4ef6\u7684\u5b57\u6bcd\u5f88\u591a\uff0c\u4e0b\u8868\u7ed9\u51fa\u51e0\u4e2a\u4e3b\u8981\u7684\u7ea6\u675f\u5b57\u6bcd\u53ca\u5176\u542b\u4e49\uff1a \u5b57\u6bcd \u542b\u4e49 m, v, o \u5185\u5b58\u5355\u5143 R \u4efb\u4f55\u901a\u7528\u5bc4\u5b58\u5668 Q \u5bc4\u5b58\u5668eax, ebx, ecx,edx\u4e4b\u4e00 I, h \u76f4\u63a5\u64cd\u4f5c\u6570 E, F \u6d6e\u70b9\u6570 G \u4efb\u610f a, b, c, d \u5bc4\u5b58\u5668eax/ax/al, ebx/bx/bl, ecx/cx/cl\u6216edx/dx/dl S, D \u5bc4\u5b58\u5668esi\u6216edi I \u5e38\u6570\uff080\uff5e31\uff09 \u8f93\u5165\u90e8\u5206\uff08input operand list\uff09\uff1a\u8f93\u5165\u90e8\u5206\u4e0e\u8f93\u51fa\u90e8\u5206\u76f8\u4f3c\uff0c\u4f46\u6ca1\u6709\u201c\uff1d\u201d\u3002\u5982\u679c\u8f93\u5165\u90e8\u5206\u4e00\u4e2a\u64cd\u4f5c\u6570\u6240\u8981\u6c42\u4f7f\u7528\u7684\u5bc4\u5b58\u5668\uff0c\u4e0e\u524d\u9762\u8f93\u51fa\u90e8\u5206\u67d0\u4e2a\u7ea6\u675f\u6240\u8981\u6c42\u7684\u662f\u540c\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u90a3\u5c31\u628a\u5bf9\u5e94\u64cd\u4f5c\u6570\u7684\u7f16\u53f7\uff08\u5982\u201c1\u201d\uff0c\u201c2\u201d\u7b49\uff09\u653e\u5728\u7ea6\u675f\u6761\u4ef6\u4e2d\u3002\u5728\u540e\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u53ef\u770b\u5230\u8fd9\u79cd\u60c5\u51b5\u3002 \u4fee\u6539\u90e8\u5206\uff08clobber list,\u4e5f\u79f0 \u4e71\u7801\u5217\u8868\uff09:\u8fd9\u90e8\u5206\u5e38\u5e38\u4ee5\u201cmemory\u201d\u4e3a\u7ea6\u675f\u6761\u4ef6\uff0c\u4ee5\u8868\u793a\u64cd\u4f5c\u5b8c\u6210\u540e\u5185\u5b58\u4e2d\u7684\u5185\u5bb9\u5df2\u6709\u6539\u53d8\uff0c\u5982\u679c\u539f\u6765\u67d0\u4e2a\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u6765\u81ea\u5185\u5b58\uff0c\u90a3\u4e48\u73b0\u5728\u5185\u5b58\u4e2d\u8fd9\u4e2a\u5355\u5143\u7684\u5185\u5bb9\u5df2\u7ecf\u6539\u53d8\u3002\u4e71\u7801\u5217\u8868\u901a\u77e5\u7f16\u8bd1\u5668\uff0c\u6709\u4e9b\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u56e0\u5185\u8054\u6c47\u7f16\u5757\u9020\u6210\u4e71\u7801\uff0c\u53ef\u9690\u5f0f\u5730\u7834\u574f\u4e86\u6761\u4ef6\u5bc4\u5b58\u5668\u7684\u67d0\u4e9b\u4f4d\uff08\u5b57\u6bb5\uff09\u3002 \u6ce8\u610f\uff0c\u6307\u4ee4\u90e8\u5206\u4e3a\u5fc5\u9009\u9879\uff0c\u800c\u8f93\u5165\u90e8\u5206\u3001\u8f93\u51fa\u90e8\u5206\u53ca\u4fee\u6539\u90e8\u5206\u4e3a\u53ef\u9009\u9879\uff0c\u5f53\u8f93\u5165\u90e8\u5206\u5b58\u5728\uff0c\u800c\u8f93\u51fa\u90e8\u5206\u4e0d\u5b58\u5728\u65f6\uff0c\u5192\u53f7\u201c\uff1a\u201d\u8981\u4fdd\u7559\uff0c\u5f53\u201cmemory\u201d\u5b58\u5728\u65f6\uff0c\u4e09\u4e2a\u5192\u53f7\u90fd\u8981\u4fdd\u7559\uff0c\u4f8b\u5982 #define __cli() __asm__ __volatile__(\"cli\": : :\"memory\") \u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a int count=1; int value=1; int buf[10]; void main() { asm( \"cld \\n\\t\" \"rep \\n\\t\" \"stosl\" : : \"c\" (count), \"a\" (value) , \"D\" (buf) ); } \u5f97\u5230\u7684\u4e3b\u8981\u6c47\u7f16\u4ee3\u7801\u4e3a\uff1a movl count,%ecx movl value,%eax movl buf,%edi #APP cld rep stosl #NO_APP cld,rep,stos\u8fd9\u51e0\u6761\u8bed\u53e5\u7684\u529f\u80fd\u662f\u5411buf\u4e2d\u5199\u4e0acount\u4e2avalue\u503c\u3002\u5192\u53f7\u540e\u7684\u8bed\u53e5\u6307\u660e\u8f93\u5165\uff0c\u8f93\u51fa\u548c\u88ab\u6539\u53d8\u7684\u5bc4\u5b58\u5668\u3002\u901a\u8fc7\u5192\u53f7\u4ee5\u540e\u7684\u8bed\u53e5\uff0c\u7f16\u8bd1\u5668\u5c31\u77e5\u9053\u4f60\u7684\u6307\u4ee4\u9700\u8981\u548c\u6539\u53d8\u54ea\u4e9b\u5bc4\u5b58\u5668\uff0c\u4ece\u800c\u53ef\u4ee5\u4f18\u5316\u5bc4\u5b58\u5668\u7684\u5206\u914d\u3002\u5176\u4e2d\u7b26\u53f7\"c\"(count)\u6307\u793a\u8981\u628acount\u7684\u503c\u653e\u5165ecx\u5bc4\u5b58\u5668\u3002\u7c7b\u4f3c\u7684\u8fd8\u6709\uff1a 0 same as the first a eax b ebx c ecx d edx S esi D edi I \u5e38\u6570\u503c\uff0c(0 - 31) q,r \u52a8\u6001\u5206\u914d\u7684\u5bc4\u5b58\u5668 g eax,ebx,ecx,edx\u6216\u5185\u5b58\u53d8\u91cf A \u628aeax\u548cedx\u5408\u6210\u4e00\u4e2a64\u4f4d\u7684\u5bc4\u5b58\u5668(use long longs) \u4e5f\u53ef\u4ee5\u8ba9gcc\u81ea\u5df1\u9009\u62e9\u5408\u9002\u7684\u5bc4\u5b58\u5668\u3002\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a asm(\"leal (%1,%1,4),%0\" : \"=r\" (x) : \"0\" (x)); \u8fd9\u6bb5\u4ee3\u7801\u5230\u7684\u4e3b\u8981\u6c47\u7f16\u4ee3\u7801\u4e3a\uff1a movl x,%eax #APP leal (%eax,%eax,4),%eax #NO_APP movl %eax,x \u51e0\u70b9\u8bf4\u660e\uff1a [1] \u4f7f\u7528q\u6307\u793a\u7f16\u8bd1\u5668\u4eceeax, ebx, ecx, edx\u5206\u914d\u5bc4\u5b58\u5668\u3002 \u4f7f\u7528r\u6307\u793a\u7f16\u8bd1\u5668\u4eceeax, ebx, ecx, edx, esi, edi\u5206\u914d\u5bc4\u5b58\u5668\u3002 [2] \u4e0d\u5fc5\u628a\u7f16\u8bd1\u5668\u5206\u914d\u7684\u5bc4\u5b58\u5668\u653e\u5165\u6539\u53d8\u7684\u5bc4\u5b58\u5668\u5217\u8868\uff0c\u56e0\u4e3a\u5bc4\u5b58\u5668\u5df2\u7ecf\u8bb0\u4f4f\u4e86\u5b83\u4eec\u3002 [3] \"=\"\u662f\u6807\u793a\u8f93\u51fa\u5bc4\u5b58\u5668\uff0c\u5fc5\u987b\u8fd9\u6837\u7528\u3002 [4] \u6570\u5b57%n\u7684\u7528\u6cd5\uff1a\u6570\u5b57\u8868\u793a\u7684\u5bc4\u5b58\u5668\u662f\u6309\u7167\u51fa\u73b0\u548c\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6620\u5c04\u5230\u7528\"r\"\u6216\"q\"\u8bf7\u6c42\u7684\u5bc4\u5b58\u5668\uff0e\u5982\u679c\u8981\u91cd\u7528\"r\"\u6216\"q\"\u8bf7\u6c42\u7684\u5bc4\u5b58\u5668\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u3002 [5] \u5982\u679c\u5f3a\u5236\u4f7f\u7528\u56fa\u5b9a\u7684\u5bc4\u5b58\u5668\u7684\u8bdd\uff0c\u5982\u4e0d\u7528%1\uff0c\u800c\u7528ebx\uff0c\u5219\uff1a asm(\"leal (%%ebx,%%ebx,4),%0\" : \"=r\" (x) : \"0\" (x) ); \u6ce8\u610f\u8981\u4f7f\u7528\u4e24\u4e2a%,\u56e0\u4e3a\u4e00\u4e2a%\u7684\u8bed\u6cd5\u5df2\u7ecf\u88ab%n\u7528\u6389\u4e86\u3002 \u53c2\u8003\uff1a GCC Manual\uff0c \u7248\u672c\u4e3a5.0.0 pre-release,6.43\u8282\uff08How to Use Inline Assembly Language in C Code\uff09 GCC-Inline-Assembly-HOWTO","title":"Gcc inline asm"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/appendix/gcc_inline_asm/#gcc","text":"GCC\u6269\u5c55\u5185\u8054\u6c47\u7f16\u7684\u57fa\u672c\u683c\u5f0f\u662f\uff1a asm [volatile] ( Assembler Template : Output Operands [ : Input Operands [ : Clobbers ] ]) \u5982\u679c\u4e0d\u5e0c\u671b\u6c47\u7f16\u8bed\u53e5\u88ab gcc \u4f18\u5316\u800c\u6539\u53d8\u4f4d\u7f6e\uff0c\u5c31\u9700\u8981\u5728 asm \u7b26\u53f7\u540e\u6dfb\u52a0 volatile \u5173\u952e\u8bcd\uff1aasm volatile(...)\uff1b Assembler Template \u4e3a\u6c47\u7f16\u6307\u4ee4\u90e8\u5206\uff0c\u4f8b\u5982\uff0c\"movl %%cr0,%0\\n\\t\"\u3002\u6570\u5b57\u524d\u52a0\u524d\u7f00 \u201c\uff05\u201c\uff0c\u5982\uff051\uff0c\uff052\u7b49\u8868\u793a\u4f7f\u7528\u5bc4\u5b58\u5668\u7684\u6837\u677f\u64cd\u4f5c\u6570\uff0c\u8fd9\u7c7b\u5bc4\u5b58\u5668\u7684\u503c\u548c\u8fd9\u4e4b\u540e\u7684\u7ea6\u675f\u5173\u8054\uff0c\u5982%0\uff08The first constraint following\uff09\u3002\u5728\u7528\u5230\u5177\u4f53\u7684\u5bc4\u5b58\u5668\u65f6\u5c31\u5728\u524d\u9762\u52a0 \u4e24\u4e2a\u201c\uff05\u201d \uff0c\u5982 %%cr0 \u3002 \u8f93\u51fa\u90e8\u5206\uff08output operand list\uff09\uff0c\u7528\u4ee5\u89c4\u5b9a\u5bf9\u8f93\u51fa\u53d8\u91cf\uff08\u76ee\u6807\u64cd\u4f5c\u6570\uff09\u5982\u4f55\u4e0e\u5bc4\u5b58\u5668\u7ed3\u5408\u7684\u7ea6\u675f\uff08constraint\uff09,\u8f93\u51fa\u90e8\u5206\u53ef\u4ee5\u6709\u591a\u4e2a\u7ea6\u675f\uff0c\u4e92\u76f8\u4ee5\u9017\u53f7\u5206\u5f00\u3002\u6bcf\u4e2a\u7ea6\u675f\u4ee5\u201c\uff1d\u201d\u5f00\u5934\uff0c\u63a5\u7740\u7528\u4e00\u4e2a\u5b57\u6bcd\u6765\u8868\u793a\u64cd\u4f5c\u6570\u7684\u7c7b\u578b\uff0c\u7136\u540e\u662f\u5173\u4e8e\u53d8\u91cf\u7ed3\u5408\u7684\u7ea6\u675f\u3002\u4f8b\u5982\uff0c\u4e0a\u4f8b\u4e2d\uff1a :\"=r\" (__dummy) \u201c\uff1dr\u201d\u8868\u793a\u76f8\u5e94\u7684\u76ee\u6807\u64cd\u4f5c\u6570\uff08\u6307\u4ee4\u90e8\u5206\u7684%0\uff09\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u4e00\u4e2a\u901a\u7528\u5bc4\u5b58\u5668\uff0c\u5e76\u4e14\u53d8\u91cf__dummy \u5b58\u653e\u5728\u8fd9\u4e2a\u5bc4\u5b58\u5668\u4e2d\uff0c\u4f46\u5982\u679c\u662f\uff1a :\u201c\uff1dm\u201d(__dummy) \u201c\uff1dm\u201d\u5c31\u8868\u793a\u76f8\u5e94\u7684\u76ee\u6807\u64cd\u4f5c\u6570\u662f\u5b58\u653e\u5728\u5185\u5b58\u5355\u5143__dummy\u4e2d\u3002\u8868\u793a\u7ea6\u675f\u6761\u4ef6\u7684\u5b57\u6bcd\u5f88\u591a\uff0c\u4e0b\u8868\u7ed9\u51fa\u51e0\u4e2a\u4e3b\u8981\u7684\u7ea6\u675f\u5b57\u6bcd\u53ca\u5176\u542b\u4e49\uff1a \u5b57\u6bcd \u542b\u4e49 m, v, o \u5185\u5b58\u5355\u5143 R \u4efb\u4f55\u901a\u7528\u5bc4\u5b58\u5668 Q \u5bc4\u5b58\u5668eax, ebx, ecx,edx\u4e4b\u4e00 I, h \u76f4\u63a5\u64cd\u4f5c\u6570 E, F \u6d6e\u70b9\u6570 G \u4efb\u610f a, b, c, d \u5bc4\u5b58\u5668eax/ax/al, ebx/bx/bl, ecx/cx/cl\u6216edx/dx/dl S, D \u5bc4\u5b58\u5668esi\u6216edi I \u5e38\u6570\uff080\uff5e31\uff09 \u8f93\u5165\u90e8\u5206\uff08input operand list\uff09\uff1a\u8f93\u5165\u90e8\u5206\u4e0e\u8f93\u51fa\u90e8\u5206\u76f8\u4f3c\uff0c\u4f46\u6ca1\u6709\u201c\uff1d\u201d\u3002\u5982\u679c\u8f93\u5165\u90e8\u5206\u4e00\u4e2a\u64cd\u4f5c\u6570\u6240\u8981\u6c42\u4f7f\u7528\u7684\u5bc4\u5b58\u5668\uff0c\u4e0e\u524d\u9762\u8f93\u51fa\u90e8\u5206\u67d0\u4e2a\u7ea6\u675f\u6240\u8981\u6c42\u7684\u662f\u540c\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u90a3\u5c31\u628a\u5bf9\u5e94\u64cd\u4f5c\u6570\u7684\u7f16\u53f7\uff08\u5982\u201c1\u201d\uff0c\u201c2\u201d\u7b49\uff09\u653e\u5728\u7ea6\u675f\u6761\u4ef6\u4e2d\u3002\u5728\u540e\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u53ef\u770b\u5230\u8fd9\u79cd\u60c5\u51b5\u3002 \u4fee\u6539\u90e8\u5206\uff08clobber list,\u4e5f\u79f0 \u4e71\u7801\u5217\u8868\uff09:\u8fd9\u90e8\u5206\u5e38\u5e38\u4ee5\u201cmemory\u201d\u4e3a\u7ea6\u675f\u6761\u4ef6\uff0c\u4ee5\u8868\u793a\u64cd\u4f5c\u5b8c\u6210\u540e\u5185\u5b58\u4e2d\u7684\u5185\u5bb9\u5df2\u6709\u6539\u53d8\uff0c\u5982\u679c\u539f\u6765\u67d0\u4e2a\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u6765\u81ea\u5185\u5b58\uff0c\u90a3\u4e48\u73b0\u5728\u5185\u5b58\u4e2d\u8fd9\u4e2a\u5355\u5143\u7684\u5185\u5bb9\u5df2\u7ecf\u6539\u53d8\u3002\u4e71\u7801\u5217\u8868\u901a\u77e5\u7f16\u8bd1\u5668\uff0c\u6709\u4e9b\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u56e0\u5185\u8054\u6c47\u7f16\u5757\u9020\u6210\u4e71\u7801\uff0c\u53ef\u9690\u5f0f\u5730\u7834\u574f\u4e86\u6761\u4ef6\u5bc4\u5b58\u5668\u7684\u67d0\u4e9b\u4f4d\uff08\u5b57\u6bb5\uff09\u3002 \u6ce8\u610f\uff0c\u6307\u4ee4\u90e8\u5206\u4e3a\u5fc5\u9009\u9879\uff0c\u800c\u8f93\u5165\u90e8\u5206\u3001\u8f93\u51fa\u90e8\u5206\u53ca\u4fee\u6539\u90e8\u5206\u4e3a\u53ef\u9009\u9879\uff0c\u5f53\u8f93\u5165\u90e8\u5206\u5b58\u5728\uff0c\u800c\u8f93\u51fa\u90e8\u5206\u4e0d\u5b58\u5728\u65f6\uff0c\u5192\u53f7\u201c\uff1a\u201d\u8981\u4fdd\u7559\uff0c\u5f53\u201cmemory\u201d\u5b58\u5728\u65f6\uff0c\u4e09\u4e2a\u5192\u53f7\u90fd\u8981\u4fdd\u7559\uff0c\u4f8b\u5982 #define __cli() __asm__ __volatile__(\"cli\": : :\"memory\") \u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a int count=1; int value=1; int buf[10]; void main() { asm( \"cld \\n\\t\" \"rep \\n\\t\" \"stosl\" : : \"c\" (count), \"a\" (value) , \"D\" (buf) ); } \u5f97\u5230\u7684\u4e3b\u8981\u6c47\u7f16\u4ee3\u7801\u4e3a\uff1a movl count,%ecx movl value,%eax movl buf,%edi #APP cld rep stosl #NO_APP cld,rep,stos\u8fd9\u51e0\u6761\u8bed\u53e5\u7684\u529f\u80fd\u662f\u5411buf\u4e2d\u5199\u4e0acount\u4e2avalue\u503c\u3002\u5192\u53f7\u540e\u7684\u8bed\u53e5\u6307\u660e\u8f93\u5165\uff0c\u8f93\u51fa\u548c\u88ab\u6539\u53d8\u7684\u5bc4\u5b58\u5668\u3002\u901a\u8fc7\u5192\u53f7\u4ee5\u540e\u7684\u8bed\u53e5\uff0c\u7f16\u8bd1\u5668\u5c31\u77e5\u9053\u4f60\u7684\u6307\u4ee4\u9700\u8981\u548c\u6539\u53d8\u54ea\u4e9b\u5bc4\u5b58\u5668\uff0c\u4ece\u800c\u53ef\u4ee5\u4f18\u5316\u5bc4\u5b58\u5668\u7684\u5206\u914d\u3002\u5176\u4e2d\u7b26\u53f7\"c\"(count)\u6307\u793a\u8981\u628acount\u7684\u503c\u653e\u5165ecx\u5bc4\u5b58\u5668\u3002\u7c7b\u4f3c\u7684\u8fd8\u6709\uff1a 0 same as the first a eax b ebx c ecx d edx S esi D edi I \u5e38\u6570\u503c\uff0c(0 - 31) q,r \u52a8\u6001\u5206\u914d\u7684\u5bc4\u5b58\u5668 g eax,ebx,ecx,edx\u6216\u5185\u5b58\u53d8\u91cf A \u628aeax\u548cedx\u5408\u6210\u4e00\u4e2a64\u4f4d\u7684\u5bc4\u5b58\u5668(use long longs) \u4e5f\u53ef\u4ee5\u8ba9gcc\u81ea\u5df1\u9009\u62e9\u5408\u9002\u7684\u5bc4\u5b58\u5668\u3002\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a asm(\"leal (%1,%1,4),%0\" : \"=r\" (x) : \"0\" (x)); \u8fd9\u6bb5\u4ee3\u7801\u5230\u7684\u4e3b\u8981\u6c47\u7f16\u4ee3\u7801\u4e3a\uff1a movl x,%eax #APP leal (%eax,%eax,4),%eax #NO_APP movl %eax,x \u51e0\u70b9\u8bf4\u660e\uff1a [1] \u4f7f\u7528q\u6307\u793a\u7f16\u8bd1\u5668\u4eceeax, ebx, ecx, edx\u5206\u914d\u5bc4\u5b58\u5668\u3002 \u4f7f\u7528r\u6307\u793a\u7f16\u8bd1\u5668\u4eceeax, ebx, ecx, edx, esi, edi\u5206\u914d\u5bc4\u5b58\u5668\u3002 [2] \u4e0d\u5fc5\u628a\u7f16\u8bd1\u5668\u5206\u914d\u7684\u5bc4\u5b58\u5668\u653e\u5165\u6539\u53d8\u7684\u5bc4\u5b58\u5668\u5217\u8868\uff0c\u56e0\u4e3a\u5bc4\u5b58\u5668\u5df2\u7ecf\u8bb0\u4f4f\u4e86\u5b83\u4eec\u3002 [3] \"=\"\u662f\u6807\u793a\u8f93\u51fa\u5bc4\u5b58\u5668\uff0c\u5fc5\u987b\u8fd9\u6837\u7528\u3002 [4] \u6570\u5b57%n\u7684\u7528\u6cd5\uff1a\u6570\u5b57\u8868\u793a\u7684\u5bc4\u5b58\u5668\u662f\u6309\u7167\u51fa\u73b0\u548c\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6620\u5c04\u5230\u7528\"r\"\u6216\"q\"\u8bf7\u6c42\u7684\u5bc4\u5b58\u5668\uff0e\u5982\u679c\u8981\u91cd\u7528\"r\"\u6216\"q\"\u8bf7\u6c42\u7684\u5bc4\u5b58\u5668\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u3002 [5] \u5982\u679c\u5f3a\u5236\u4f7f\u7528\u56fa\u5b9a\u7684\u5bc4\u5b58\u5668\u7684\u8bdd\uff0c\u5982\u4e0d\u7528%1\uff0c\u800c\u7528ebx\uff0c\u5219\uff1a asm(\"leal (%%ebx,%%ebx,4),%0\" : \"=r\" (x) : \"0\" (x) ); \u6ce8\u610f\u8981\u4f7f\u7528\u4e24\u4e2a%,\u56e0\u4e3a\u4e00\u4e2a%\u7684\u8bed\u6cd5\u5df2\u7ecf\u88ab%n\u7528\u6389\u4e86\u3002 \u53c2\u8003\uff1a GCC Manual\uff0c \u7248\u672c\u4e3a5.0.0 pre-release,6.43\u8282\uff08How to Use Inline Assembly Language in C Code\uff09 GCC-Inline-Assembly-HOWTO","title":"GCC\u6269\u5c55\u5185\u8054\u6c47\u7f16"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/appendix/gdb/","text":"gdb\u4f7f\u7528 gdb \u662f\u529f\u80fd\u5f3a\u5927\u7684\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u53ef\u5b8c\u6210\u5982\u4e0b\u7684\u8c03\u8bd5\u4efb\u52a1\uff1a \u8bbe\u7f6e\u65ad\u70b9 \u76d1\u89c6\u7a0b\u5e8f\u53d8\u91cf\u7684\u503c \u7a0b\u5e8f\u7684\u5355\u6b65(step in/step over)\u6267\u884c \u663e\u793a/\u4fee\u6539\u53d8\u91cf\u7684\u503c \u663e\u793a/\u4fee\u6539\u5bc4\u5b58\u5668 \u67e5\u770b\u7a0b\u5e8f\u7684\u5806\u6808\u60c5\u51b5 \u8fdc\u7a0b\u8c03\u8bd5 \u8c03\u8bd5\u7ebf\u7a0b \u5728\u53ef\u4ee5\u4f7f\u7528 gdb \u8c03\u8bd5\u7a0b\u5e8f\u4e4b\u524d\uff0c\u5fc5\u987b\u4f7f\u7528 -g \u6216 \u2013ggdb\u7f16\u8bd1\u9009\u9879\u7f16\u8bd1\u6e90\u6587\u4ef6\u3002\u8fd0\u884c gdb \u8c03\u8bd5\u7a0b\u5e8f\u65f6\u901a\u5e38\u4f7f\u7528\u5982\u4e0b\u7684\u547d\u4ee4\uff1a gdb progname \u5728 gdb \u63d0\u793a\u7b26\u5904\u952e\u5165help\uff0c\u5c06\u5217\u51fa\u547d\u4ee4\u7684\u5206\u7c7b\uff0c\u4e3b\u8981\u7684\u5206\u7c7b\u6709\uff1a aliases\uff1a\u547d\u4ee4\u522b\u540d breakpoints\uff1a\u65ad\u70b9\u5b9a\u4e49\uff1b data\uff1a\u6570\u636e\u67e5\u770b\uff1b files\uff1a\u6307\u5b9a\u5e76\u67e5\u770b\u6587\u4ef6\uff1b internals\uff1a\u7ef4\u62a4\u547d\u4ee4\uff1b running\uff1a\u7a0b\u5e8f\u6267\u884c\uff1b stack\uff1a\u8c03\u7528\u6808\u67e5\u770b\uff1b status\uff1a\u72b6\u6001\u67e5\u770b\uff1b tracepoints\uff1a\u8ddf\u8e2a\u7a0b\u5e8f\u6267\u884c\u3002 \u952e\u5165 help \u540e\u8ddf\u547d\u4ee4\u7684\u5206\u7c7b\u540d\uff0c\u53ef\u83b7\u5f97\u8be5\u7c7b\u547d\u4ee4\u7684\u8be6\u7ec6\u6e05\u5355\u3002gdb\u7684\u5e38\u7528\u547d\u4ee4\u5982\u4e0b\u8868\u6240\u793a\u3002 \u8868 gdb \u7684\u5e38\u7528\u547d\u4ee4 break FILENAME:NUM \u5728\u7279\u5b9a\u6e90\u6587\u4ef6\u7279\u5b9a\u884c\u4e0a\u8bbe\u7f6e\u65ad\u70b9 clear FILENAME:NUM \u5220\u9664\u8bbe\u7f6e\u5728\u7279\u5b9a\u6e90\u6587\u4ef6\u7279\u5b9a\u884c\u4e0a\u7684\u65ad\u70b9 run \u8fd0\u884c\u8c03\u8bd5\u7a0b\u5e8f step \u5355\u6b65\u6267\u884c\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u4e0d\u4f1a\u76f4\u63a5\u6267\u884c\u51fd\u6570 next \u5355\u6b65\u6267\u884c\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u4f1a\u76f4\u63a5\u6267\u884c\u51fd\u6570 backtrace \u663e\u793a\u6240\u6709\u7684\u8c03\u7528\u6808\u5e27\u3002\u8be5\u547d\u4ee4\u53ef\u7528\u6765\u663e\u793a\u51fd\u6570\u7684\u8c03\u7528\u987a\u5e8f where continue \u7ee7\u7eed\u6267\u884c\u6b63\u5728\u8c03\u8bd5\u7684\u7a0b\u5e8f display EXPR \u6bcf\u6b21\u7a0b\u5e8f\u505c\u6b62\u540e\u663e\u793a\u8868\u8fbe\u5f0f\u7684\u503c,\u8868\u8fbe\u5f0f\u7531\u7a0b\u5e8f\u5b9a\u4e49\u7684\u53d8\u91cf\u7ec4\u6210 file FILENAME \u88c5\u8f7d\u6307\u5b9a\u7684\u53ef\u6267\u884c\u6587\u4ef6\u8fdb\u884c\u8c03\u8bd5 help CMDNAME \u663e\u793a\u6307\u5b9a\u8c03\u8bd5\u547d\u4ee4\u7684\u5e2e\u52a9\u4fe1\u606f info break \u663e\u793a\u5f53\u524d\u65ad\u70b9\u5217\u8868\uff0c\u5305\u62ec\u5230\u8fbe\u65ad\u70b9\u5904\u7684\u6b21\u6570\u7b49 info files \u663e\u793a\u88ab\u8c03\u8bd5\u6587\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f info func \u663e\u793a\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u7684\u6240\u6709\u51fd\u6570\u540d\u79f0 info prog \u663e\u793a\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u7684\u6267\u884c\u72b6\u6001 info local \u663e\u793a\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u5f53\u524d\u51fd\u6570\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\u4fe1\u606f info var \u663e\u793a\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u7684\u6240\u6709\u5168\u5c40\u548c\u9759\u6001\u53d8\u91cf\u540d\u79f0 kill \u7ec8\u6b62\u6b63\u5728\u88ab\u8c03\u8bd5\u7684\u7a0b\u5e8f list \u663e\u793a\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801 quit \u9000\u51fa gdb gdb\u8c03\u8bd5\u5b9e\u4f8b \u4e0b\u9762\u4ee5\u4e00\u4e2a\u6709\u9519\u8bef\u7684\u4f8b\u5b50\u7a0b\u5e8f\u6765\u4ecb\u7ecdgdb\u7684\u4f7f\u7528\uff1a /*bugging.c*/ #include <stdio.h> #include <stdlib.h> static char buff [256]; static char* string; int main () { printf (\"Please input a string: \"); gets (string); printf (\"\\nYour string is: %s\\n\", string); } \u8fd9\u4e2a\u7a0b\u5e8f\u662f\u63a5\u53d7\u7528\u6237\u7684\u8f93\u5165\uff0c\u7136\u540e\u5c06\u7528\u6237\u7684\u8f93\u5165\u6253\u5370\u51fa\u6765\u3002\u8be5\u7a0b\u5e8f\u4f7f\u7528\u4e86\u4e00\u4e2a\u672a\u7ecf\u8fc7\u521d\u59cb\u5316\u7684\u5b57\u7b26\u4e32\u5730\u5740 string\uff0c\u56e0\u6b64\uff0c\u7f16\u8bd1\u5e76\u8fd0\u884c\u4e4b\u540e\uff0c\u5c06\u51fa\u73b0 \"Segment Fault\"\u9519\u8bef\uff1a $ gcc -o bugging -g bugging.c $ ./bugging Please input a string: asdf Segmentation fault (core dumped) \u4e3a\u4e86\u67e5\u627e\u8be5\u7a0b\u5e8f\u4e2d\u51fa\u73b0\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5229\u7528 gdb\uff0c\u5e76\u6309\u5982\u4e0b\u7684\u6b65\u9aa4\u8fdb\u884c\uff1a [1] \u8fd0\u884c \u201cgdb bugging\u201d \uff0c\u52a0\u8f7d bugging \u53ef\u6267\u884c\u6587\u4ef6\uff1b $gdb bugging [2] \u6267\u884c\u88c5\u5165\u7684 bugging \u547d\u4ee4\uff1b (gdb) run [3] \u4f7f\u7528 where \u547d\u4ee4\u67e5\u770b\u7a0b\u5e8f\u51fa\u9519\u7684\u5730\u65b9\uff1b (gdb) where [4] \u5229\u7528 list \u547d\u4ee4\u67e5\u770b\u8c03\u7528 gets \u51fd\u6570\u9644\u8fd1\u7684\u4ee3\u7801\uff1b (gdb) list [5] \u5728 gdb \u4e2d\uff0c\u6211\u4eec\u5728\u7b2c 11 \u884c\u5904\u8bbe\u7f6e\u65ad\u70b9\uff0c\u770b\u770b\u662f\u5426\u662f\u5728\u7b2c11\u884c\u51fa\u9519\uff1b (gdb) break 11 [6] \u7a0b\u5e8f\u91cd\u65b0\u8fd0\u884c\u5230\u7b2c 11 \u884c\u5904\u505c\u6b62\uff0c\u8fd9\u65f6\u7a0b\u5e8f\u6b63\u5e38\uff0c\u7136\u540e\u6267\u884c\u5355\u6b65\u547d\u4ee4next\uff1b (gdb) next [7] \u7a0b\u5e8f\u786e\u5b9e\u51fa\u9519\uff0c\u80fd\u591f\u5bfc\u81f4 gets \u51fd\u6570\u51fa\u9519\u7684\u56e0\u7d20\u5c31\u662f\u53d8\u91cf string\u3002\u91cd\u65b0\u6267\u884c\u6d4b\u8bd5\u7a0b\uff0c\u7528 print \u547d\u4ee4\u67e5\u770b string \u7684\u503c\uff1b (gdb) run (gdb) print string (gdb) $1=0x0 [8] \u95ee\u9898\u5728\u4e8estring\u6307\u5411\u7684\u662f\u4e00\u4e2a\u65e0\u6548\u6307\u9488\uff0c\u4fee\u6539\u7a0b\u5e8f\uff0c\u572810\u884c\u548c11\u884c\u4e4b\u95f4\u589e\u52a0\u4e00\u6761\u8bed\u53e5 \u201cstring=buff; \u201d\uff0c\u91cd\u65b0\u7f16\u8bd1\u7a0b\u5e8f\uff0c\u7136\u540e\u7ee7\u7eed\u8fd0\u884c\uff0c\u5c06\u770b\u5230\u6b63\u786e\u7684\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u679c\u3002 \u7528gdb\u67e5\u770b\u6e90\u4ee3\u7801\u53ef\u4ee5\u7528list\u547d\u4ee4\uff0c\u4f46\u662f\u8fd9\u4e2a\u4e0d\u591f\u7075\u6d3b\u3002\u53ef\u4ee5\u4f7f\u7528\"layout src\"\u547d\u4ee4\uff0c\u6216\u8005\u6309Ctrl-X\u518d\u6309A\uff0c\u5c31\u4f1a\u51fa\u73b0\u4e00\u4e2a\u7a97\u53e3\u53ef\u4ee5\u67e5\u770b\u6e90\u4ee3\u7801\u3002\u4e5f\u53ef\u4ee5\u7528\u4f7f\u7528-tui\u53c2\u6570\uff0c\u8fd9\u6837\u8fdb\u5165gdb\u91cc\u9762\u540e\u5c31\u80fd\u76f4\u63a5\u6253\u5f00\u4ee3\u7801\u67e5\u770b\u7a97\u53e3\u3002\u5176\u4ed6\u4ee3\u7801\u7a97\u53e3\u76f8\u5173\u547d\u4ee4\uff1a info win \u663e\u793a\u7a97\u53e3\u7684\u5927\u5c0f layout next \u5207\u6362\u5230\u4e0b\u4e00\u4e2a\u5e03\u5c40\u6a21\u5f0f layout prev \u5207\u6362\u5230\u4e0a\u4e00\u4e2a\u5e03\u5c40\u6a21\u5f0f layout src \u53ea\u663e\u793a\u6e90\u4ee3\u7801 layout asm \u53ea\u663e\u793a\u6c47\u7f16\u4ee3\u7801 layout split \u663e\u793a\u6e90\u4ee3\u7801\u548c\u6c47\u7f16\u4ee3\u7801 layout regs \u589e\u52a0\u5bc4\u5b58\u5668\u5185\u5bb9\u663e\u793a focus cmd/src/asm/regs/next/prev \u5207\u6362\u5f53\u524d\u7a97\u53e3 refresh \u5237\u65b0\u6240\u6709\u7a97\u53e3 tui reg next \u663e\u793a\u4e0b\u4e00\u7ec4\u5bc4\u5b58\u5668 tui reg system \u663e\u793a\u7cfb\u7edf\u5bc4\u5b58\u5668 update \u66f4\u65b0\u6e90\u4ee3\u7801\u7a97\u53e3\u548c\u5f53\u524d\u6267\u884c\u70b9 winheight name +/- line \u8c03\u6574name\u7a97\u53e3\u7684\u9ad8\u5ea6 tabset nchar \u8bbe\u7f6etab\u4e3anchar\u4e2a\u5b57\u7b26","title":"Gdb"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/appendix/gdb/#gdb","text":"gdb \u662f\u529f\u80fd\u5f3a\u5927\u7684\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u53ef\u5b8c\u6210\u5982\u4e0b\u7684\u8c03\u8bd5\u4efb\u52a1\uff1a \u8bbe\u7f6e\u65ad\u70b9 \u76d1\u89c6\u7a0b\u5e8f\u53d8\u91cf\u7684\u503c \u7a0b\u5e8f\u7684\u5355\u6b65(step in/step over)\u6267\u884c \u663e\u793a/\u4fee\u6539\u53d8\u91cf\u7684\u503c \u663e\u793a/\u4fee\u6539\u5bc4\u5b58\u5668 \u67e5\u770b\u7a0b\u5e8f\u7684\u5806\u6808\u60c5\u51b5 \u8fdc\u7a0b\u8c03\u8bd5 \u8c03\u8bd5\u7ebf\u7a0b \u5728\u53ef\u4ee5\u4f7f\u7528 gdb \u8c03\u8bd5\u7a0b\u5e8f\u4e4b\u524d\uff0c\u5fc5\u987b\u4f7f\u7528 -g \u6216 \u2013ggdb\u7f16\u8bd1\u9009\u9879\u7f16\u8bd1\u6e90\u6587\u4ef6\u3002\u8fd0\u884c gdb \u8c03\u8bd5\u7a0b\u5e8f\u65f6\u901a\u5e38\u4f7f\u7528\u5982\u4e0b\u7684\u547d\u4ee4\uff1a gdb progname \u5728 gdb \u63d0\u793a\u7b26\u5904\u952e\u5165help\uff0c\u5c06\u5217\u51fa\u547d\u4ee4\u7684\u5206\u7c7b\uff0c\u4e3b\u8981\u7684\u5206\u7c7b\u6709\uff1a aliases\uff1a\u547d\u4ee4\u522b\u540d breakpoints\uff1a\u65ad\u70b9\u5b9a\u4e49\uff1b data\uff1a\u6570\u636e\u67e5\u770b\uff1b files\uff1a\u6307\u5b9a\u5e76\u67e5\u770b\u6587\u4ef6\uff1b internals\uff1a\u7ef4\u62a4\u547d\u4ee4\uff1b running\uff1a\u7a0b\u5e8f\u6267\u884c\uff1b stack\uff1a\u8c03\u7528\u6808\u67e5\u770b\uff1b status\uff1a\u72b6\u6001\u67e5\u770b\uff1b tracepoints\uff1a\u8ddf\u8e2a\u7a0b\u5e8f\u6267\u884c\u3002 \u952e\u5165 help \u540e\u8ddf\u547d\u4ee4\u7684\u5206\u7c7b\u540d\uff0c\u53ef\u83b7\u5f97\u8be5\u7c7b\u547d\u4ee4\u7684\u8be6\u7ec6\u6e05\u5355\u3002gdb\u7684\u5e38\u7528\u547d\u4ee4\u5982\u4e0b\u8868\u6240\u793a\u3002 \u8868 gdb \u7684\u5e38\u7528\u547d\u4ee4 break FILENAME:NUM \u5728\u7279\u5b9a\u6e90\u6587\u4ef6\u7279\u5b9a\u884c\u4e0a\u8bbe\u7f6e\u65ad\u70b9 clear FILENAME:NUM \u5220\u9664\u8bbe\u7f6e\u5728\u7279\u5b9a\u6e90\u6587\u4ef6\u7279\u5b9a\u884c\u4e0a\u7684\u65ad\u70b9 run \u8fd0\u884c\u8c03\u8bd5\u7a0b\u5e8f step \u5355\u6b65\u6267\u884c\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u4e0d\u4f1a\u76f4\u63a5\u6267\u884c\u51fd\u6570 next \u5355\u6b65\u6267\u884c\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u4f1a\u76f4\u63a5\u6267\u884c\u51fd\u6570 backtrace \u663e\u793a\u6240\u6709\u7684\u8c03\u7528\u6808\u5e27\u3002\u8be5\u547d\u4ee4\u53ef\u7528\u6765\u663e\u793a\u51fd\u6570\u7684\u8c03\u7528\u987a\u5e8f where continue \u7ee7\u7eed\u6267\u884c\u6b63\u5728\u8c03\u8bd5\u7684\u7a0b\u5e8f display EXPR \u6bcf\u6b21\u7a0b\u5e8f\u505c\u6b62\u540e\u663e\u793a\u8868\u8fbe\u5f0f\u7684\u503c,\u8868\u8fbe\u5f0f\u7531\u7a0b\u5e8f\u5b9a\u4e49\u7684\u53d8\u91cf\u7ec4\u6210 file FILENAME \u88c5\u8f7d\u6307\u5b9a\u7684\u53ef\u6267\u884c\u6587\u4ef6\u8fdb\u884c\u8c03\u8bd5 help CMDNAME \u663e\u793a\u6307\u5b9a\u8c03\u8bd5\u547d\u4ee4\u7684\u5e2e\u52a9\u4fe1\u606f info break \u663e\u793a\u5f53\u524d\u65ad\u70b9\u5217\u8868\uff0c\u5305\u62ec\u5230\u8fbe\u65ad\u70b9\u5904\u7684\u6b21\u6570\u7b49 info files \u663e\u793a\u88ab\u8c03\u8bd5\u6587\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f info func \u663e\u793a\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u7684\u6240\u6709\u51fd\u6570\u540d\u79f0 info prog \u663e\u793a\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u7684\u6267\u884c\u72b6\u6001 info local \u663e\u793a\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u5f53\u524d\u51fd\u6570\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\u4fe1\u606f info var \u663e\u793a\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u7684\u6240\u6709\u5168\u5c40\u548c\u9759\u6001\u53d8\u91cf\u540d\u79f0 kill \u7ec8\u6b62\u6b63\u5728\u88ab\u8c03\u8bd5\u7684\u7a0b\u5e8f list \u663e\u793a\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801 quit \u9000\u51fa gdb","title":"gdb\u4f7f\u7528"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/appendix/gdb/#gdb_1","text":"\u4e0b\u9762\u4ee5\u4e00\u4e2a\u6709\u9519\u8bef\u7684\u4f8b\u5b50\u7a0b\u5e8f\u6765\u4ecb\u7ecdgdb\u7684\u4f7f\u7528\uff1a /*bugging.c*/ #include <stdio.h> #include <stdlib.h> static char buff [256]; static char* string; int main () { printf (\"Please input a string: \"); gets (string); printf (\"\\nYour string is: %s\\n\", string); } \u8fd9\u4e2a\u7a0b\u5e8f\u662f\u63a5\u53d7\u7528\u6237\u7684\u8f93\u5165\uff0c\u7136\u540e\u5c06\u7528\u6237\u7684\u8f93\u5165\u6253\u5370\u51fa\u6765\u3002\u8be5\u7a0b\u5e8f\u4f7f\u7528\u4e86\u4e00\u4e2a\u672a\u7ecf\u8fc7\u521d\u59cb\u5316\u7684\u5b57\u7b26\u4e32\u5730\u5740 string\uff0c\u56e0\u6b64\uff0c\u7f16\u8bd1\u5e76\u8fd0\u884c\u4e4b\u540e\uff0c\u5c06\u51fa\u73b0 \"Segment Fault\"\u9519\u8bef\uff1a $ gcc -o bugging -g bugging.c $ ./bugging Please input a string: asdf Segmentation fault (core dumped) \u4e3a\u4e86\u67e5\u627e\u8be5\u7a0b\u5e8f\u4e2d\u51fa\u73b0\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5229\u7528 gdb\uff0c\u5e76\u6309\u5982\u4e0b\u7684\u6b65\u9aa4\u8fdb\u884c\uff1a [1] \u8fd0\u884c \u201cgdb bugging\u201d \uff0c\u52a0\u8f7d bugging \u53ef\u6267\u884c\u6587\u4ef6\uff1b $gdb bugging [2] \u6267\u884c\u88c5\u5165\u7684 bugging \u547d\u4ee4\uff1b (gdb) run [3] \u4f7f\u7528 where \u547d\u4ee4\u67e5\u770b\u7a0b\u5e8f\u51fa\u9519\u7684\u5730\u65b9\uff1b (gdb) where [4] \u5229\u7528 list \u547d\u4ee4\u67e5\u770b\u8c03\u7528 gets \u51fd\u6570\u9644\u8fd1\u7684\u4ee3\u7801\uff1b (gdb) list [5] \u5728 gdb \u4e2d\uff0c\u6211\u4eec\u5728\u7b2c 11 \u884c\u5904\u8bbe\u7f6e\u65ad\u70b9\uff0c\u770b\u770b\u662f\u5426\u662f\u5728\u7b2c11\u884c\u51fa\u9519\uff1b (gdb) break 11 [6] \u7a0b\u5e8f\u91cd\u65b0\u8fd0\u884c\u5230\u7b2c 11 \u884c\u5904\u505c\u6b62\uff0c\u8fd9\u65f6\u7a0b\u5e8f\u6b63\u5e38\uff0c\u7136\u540e\u6267\u884c\u5355\u6b65\u547d\u4ee4next\uff1b (gdb) next [7] \u7a0b\u5e8f\u786e\u5b9e\u51fa\u9519\uff0c\u80fd\u591f\u5bfc\u81f4 gets \u51fd\u6570\u51fa\u9519\u7684\u56e0\u7d20\u5c31\u662f\u53d8\u91cf string\u3002\u91cd\u65b0\u6267\u884c\u6d4b\u8bd5\u7a0b\uff0c\u7528 print \u547d\u4ee4\u67e5\u770b string \u7684\u503c\uff1b (gdb) run (gdb) print string (gdb) $1=0x0 [8] \u95ee\u9898\u5728\u4e8estring\u6307\u5411\u7684\u662f\u4e00\u4e2a\u65e0\u6548\u6307\u9488\uff0c\u4fee\u6539\u7a0b\u5e8f\uff0c\u572810\u884c\u548c11\u884c\u4e4b\u95f4\u589e\u52a0\u4e00\u6761\u8bed\u53e5 \u201cstring=buff; \u201d\uff0c\u91cd\u65b0\u7f16\u8bd1\u7a0b\u5e8f\uff0c\u7136\u540e\u7ee7\u7eed\u8fd0\u884c\uff0c\u5c06\u770b\u5230\u6b63\u786e\u7684\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u679c\u3002 \u7528gdb\u67e5\u770b\u6e90\u4ee3\u7801\u53ef\u4ee5\u7528list\u547d\u4ee4\uff0c\u4f46\u662f\u8fd9\u4e2a\u4e0d\u591f\u7075\u6d3b\u3002\u53ef\u4ee5\u4f7f\u7528\"layout src\"\u547d\u4ee4\uff0c\u6216\u8005\u6309Ctrl-X\u518d\u6309A\uff0c\u5c31\u4f1a\u51fa\u73b0\u4e00\u4e2a\u7a97\u53e3\u53ef\u4ee5\u67e5\u770b\u6e90\u4ee3\u7801\u3002\u4e5f\u53ef\u4ee5\u7528\u4f7f\u7528-tui\u53c2\u6570\uff0c\u8fd9\u6837\u8fdb\u5165gdb\u91cc\u9762\u540e\u5c31\u80fd\u76f4\u63a5\u6253\u5f00\u4ee3\u7801\u67e5\u770b\u7a97\u53e3\u3002\u5176\u4ed6\u4ee3\u7801\u7a97\u53e3\u76f8\u5173\u547d\u4ee4\uff1a info win \u663e\u793a\u7a97\u53e3\u7684\u5927\u5c0f layout next \u5207\u6362\u5230\u4e0b\u4e00\u4e2a\u5e03\u5c40\u6a21\u5f0f layout prev \u5207\u6362\u5230\u4e0a\u4e00\u4e2a\u5e03\u5c40\u6a21\u5f0f layout src \u53ea\u663e\u793a\u6e90\u4ee3\u7801 layout asm \u53ea\u663e\u793a\u6c47\u7f16\u4ee3\u7801 layout split \u663e\u793a\u6e90\u4ee3\u7801\u548c\u6c47\u7f16\u4ee3\u7801 layout regs \u589e\u52a0\u5bc4\u5b58\u5668\u5185\u5bb9\u663e\u793a focus cmd/src/asm/regs/next/prev \u5207\u6362\u5f53\u524d\u7a97\u53e3 refresh \u5237\u65b0\u6240\u6709\u7a97\u53e3 tui reg next \u663e\u793a\u4e0b\u4e00\u7ec4\u5bc4\u5b58\u5668 tui reg system \u663e\u793a\u7cfb\u7edf\u5bc4\u5b58\u5668 update \u66f4\u65b0\u6e90\u4ee3\u7801\u7a97\u53e3\u548c\u5f53\u524d\u6267\u884c\u70b9 winheight name +/- line \u8c03\u6574name\u7a97\u53e3\u7684\u9ad8\u5ea6 tabset nchar \u8bbe\u7f6etab\u4e3anchar\u4e2a\u5b57\u7b26","title":"gdb\u8c03\u8bd5\u5b9e\u4f8b"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/appendix/global_var/","text":"\u7ba1\u7406PCB \u4e3a\u4e86\u7ba1\u7406\u7cfb\u7edf\u4e2d\u6240\u6709\u7684\u8fdb\u7a0b\u63a7\u5236\u5757\uff0cuCore\u7ef4\u62a4\u4e86\u5982\u4e0b\u5168\u5c40\u53d8\u91cf\uff08\u4f4d\u4e8e kern/process/proc.c \uff09\uff1a static int nr_process\uff1a\u8fdb\u7a0b\u603b\u6570\u3002 static struct proc *current\uff1a\u5f53\u524d\u5360\u7528CPU\u4e14\u5904\u4e8e\u201c\u8fd0\u884c\u201d\u72b6\u6001\u8fdb\u7a0b\u63a7\u5236\u5757\u6307\u9488\u3002 static struct proc *initproc\uff1alab4\u4e2d\uff0c\u6307\u5411\u4e00\u4e2a\u5185\u6838\u7ebf\u7a0b\u3002lab4\u4ee5\u540e\uff0c\u6b64\u6307\u9488\u5c06\u6307\u5411\u7b2c\u4e00\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u3002 static list_entry_t hash_list[HASH_LIST_SIZE]\uff1a\u6240\u6709\u8fdb\u7a0b\u63a7\u5236\u5757\u7684\u54c8\u5e0c\u8868\uff0cproc_struct\u4e2d\u7684\u6210\u5458\u53d8\u91cfhash_link\u5c06\u57fa\u4e8epid\u94fe\u63a5\u5165\u8fd9\u4e2a\u54c8\u5e0c\u8868\u4e2d\u3002 list_entry_t proc_list\uff1a\u6240\u6709\u8fdb\u7a0b\u63a7\u5236\u5757\u7684\u53cc\u5411\u7ebf\u6027\u5217\u8868\uff0cproc_struct\u4e2d\u7684\u6210\u5458\u53d8\u91cflist_link\u5c06\u94fe\u63a5\u5165\u8fd9\u4e2a\u94fe\u8868\u4e2d\u3002","title":"Global var"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/appendix/global_var/#pcb","text":"\u4e3a\u4e86\u7ba1\u7406\u7cfb\u7edf\u4e2d\u6240\u6709\u7684\u8fdb\u7a0b\u63a7\u5236\u5757\uff0cuCore\u7ef4\u62a4\u4e86\u5982\u4e0b\u5168\u5c40\u53d8\u91cf\uff08\u4f4d\u4e8e kern/process/proc.c \uff09\uff1a static int nr_process\uff1a\u8fdb\u7a0b\u603b\u6570\u3002 static struct proc *current\uff1a\u5f53\u524d\u5360\u7528CPU\u4e14\u5904\u4e8e\u201c\u8fd0\u884c\u201d\u72b6\u6001\u8fdb\u7a0b\u63a7\u5236\u5757\u6307\u9488\u3002 static struct proc *initproc\uff1alab4\u4e2d\uff0c\u6307\u5411\u4e00\u4e2a\u5185\u6838\u7ebf\u7a0b\u3002lab4\u4ee5\u540e\uff0c\u6b64\u6307\u9488\u5c06\u6307\u5411\u7b2c\u4e00\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u3002 static list_entry_t hash_list[HASH_LIST_SIZE]\uff1a\u6240\u6709\u8fdb\u7a0b\u63a7\u5236\u5757\u7684\u54c8\u5e0c\u8868\uff0cproc_struct\u4e2d\u7684\u6210\u5458\u53d8\u91cfhash_link\u5c06\u57fa\u4e8epid\u94fe\u63a5\u5165\u8fd9\u4e2a\u54c8\u5e0c\u8868\u4e2d\u3002 list_entry_t proc_list\uff1a\u6240\u6709\u8fdb\u7a0b\u63a7\u5236\u5757\u7684\u53cc\u5411\u7ebf\u6027\u5217\u8868\uff0cproc_struct\u4e2d\u7684\u6210\u5458\u53d8\u91cflist_link\u5c06\u94fe\u63a5\u5165\u8fd9\u4e2a\u94fe\u8868\u4e2d\u3002","title":"\u7ba1\u7406PCB"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/appendix/interrupt/","text":"\u539f\u7406 \u9012\u5f52\u8c03\u7528\u6808 \u7279\u6743\u7ea7\u5207\u6362","title":"\u539f\u7406"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/appendix/interrupt/#_1","text":"\u9012\u5f52\u8c03\u7528\u6808 \u7279\u6743\u7ea7\u5207\u6362","title":"\u539f\u7406"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/appendix/struct/","text":"\u786c\u4ef6\u6570\u636e\u7ed3\u6784 \u6bb5\u9009\u62e9\u7b26 \u5728CS\u4e2d\uff0cRPL\u4e3aCPL \u6bb5\u63cf\u8ff0\u7b26 \u95e8\u63cf\u8ff0\u7b26 TSS TTS\u63cf\u8ff0\u7b26 \u4e00\u79cd\u6bb5\u63cf\u8ff0\u7b26","title":"Struct"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/appendix/struct/#_1","text":"\u6bb5\u9009\u62e9\u7b26 \u5728CS\u4e2d\uff0cRPL\u4e3aCPL \u6bb5\u63cf\u8ff0\u7b26 \u95e8\u63cf\u8ff0\u7b26 TSS TTS\u63cf\u8ff0\u7b26 \u4e00\u79cd\u6bb5\u63cf\u8ff0\u7b26","title":"\u786c\u4ef6\u6570\u636e\u7ed3\u6784"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/1/","text":"\u7ec3\u4e601 \u95ee\u98981.1\uff1a\u64cd\u4f5c\u7cfb\u7edf\u955c\u50cf\u6587\u4ef6 ucore.img \u662f\u5982\u4f55\u4e00\u6b65\u4e00\u6b65\u751f\u6210\u7684?(\u9700\u8981\u6bd4\u8f83\u8be6\u7ec6\u5730\u89e3\u91ca Makefile \u4e2d\u6bcf\u4e00\u6761\u76f8\u5173\u547d\u4ee4\u548c\u547d\u4ee4\u53c2\u6570\u7684\u542b\u4e49,\u4ee5\u53ca\u8bf4\u660e\u547d\u4ee4\u5bfc\u81f4\u7684\u7ed3\u679c) bin/ucore.img | \u751f\u6210ucore.img\u7684\u76f8\u5173\u4ee3\u7801\u4e3a | $(UCOREIMG): $(kernel) $(bootblock) | $(V)dd if=/dev/zero of=$@ count=10000 | $(V)dd if=$(bootblock) of=$@ conv=notrunc | $(V)dd if=$(kernel) of=$@ seek=1 conv=notrunc | | \u4e3a\u4e86\u751f\u6210ucore.img\uff0c\u9996\u5148\u9700\u8981\u751f\u6210bootblock\u3001kernel | |> bin/bootblock | | \u751f\u6210bootblock\u7684\u76f8\u5173\u4ee3\u7801\u4e3a | | $(bootblock): $(call toobj,$(bootfiles)) | $(call totarget,sign) | | @echo + ld $@ | | $(V)$(LD) $(LDFLAGS) -N -e start -Ttext 0x7C00 $^ \\ | | -o $(call toobj,bootblock) | | @$(OBJDUMP) -S $(call objfile,bootblock) > \\ | | $(call asmfile,bootblock) | | @$(OBJCOPY) -S -O binary $(call objfile,bootblock) \\ | | $(call outfile,bootblock) | | @$(call totarget,sign) $(call outfile,bootblock) $(bootblock) | | | | \u4e3a\u4e86\u751f\u6210bootblock\uff0c\u9996\u5148\u9700\u8981\u751f\u6210bootasm.o\u3001bootmain.o\u3001sign | | | |> obj/boot/bootasm.o, obj/boot/bootmain.o | | | \u751f\u6210bootasm.o,bootmain.o\u7684\u76f8\u5173makefile\u4ee3\u7801\u4e3a | | | bootfiles = $(call listf_cc,boot) | | | $(foreach f,$(bootfiles),$(call cc_compile,$(f),$(CC),\\ | | | $(CFLAGS) -Os -nostdinc)) | | | \u5b9e\u9645\u4ee3\u7801\u7531\u5b8f\u6279\u91cf\u751f\u6210 | | | | | | \u751f\u6210bootasm.o\u9700\u8981bootasm.S | | | \u5b9e\u9645\u547d\u4ee4\u4e3a | | | gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs \\ | | | -nostdinc -fno-stack-protector -Ilibs/ -Os -nostdinc \\ | | | -c boot/bootasm.S -o obj/boot/bootasm.o | | | \u5176\u4e2d\u5173\u952e\u7684\u53c2\u6570\u4e3a | | | -ggdb \u751f\u6210\u53ef\u4f9bgdb\u4f7f\u7528\u7684\u8c03\u8bd5\u4fe1\u606f\u3002\u8fd9\u6837\u624d\u80fd\u7528qemu+gdb\u6765\u8c03\u8bd5bootloader or ucore\u3002 | | | -m32 \u751f\u6210\u9002\u7528\u4e8e32\u4f4d\u73af\u5883\u7684\u4ee3\u7801\u3002\u6211\u4eec\u7528\u7684\u6a21\u62df\u786c\u4ef6\u662f32bit\u768480386\uff0c\u6240\u4ee5ucore\u4e5f\u8981\u662f32\u4f4d\u7684\u8f6f\u4ef6\u3002 | | | -gstabs \u751f\u6210stabs\u683c\u5f0f\u7684\u8c03\u8bd5\u4fe1\u606f\u3002\u8fd9\u6837\u8981ucore\u7684monitor\u53ef\u4ee5\u663e\u793a\u51fa\u4fbf\u4e8e\u5f00\u53d1\u8005\u9605\u8bfb\u7684\u51fd\u6570\u8c03\u7528\u6808\u4fe1\u606f | | | -nostdinc \u4e0d\u4f7f\u7528\u6807\u51c6\u5e93\u3002\u6807\u51c6\u5e93\u662f\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7528\u7684\uff0c\u6211\u4eec\u662f\u7f16\u8bd1ucore\u5185\u6838\uff0cOS\u5185\u6838\u662f\u63d0\u4f9b\u670d\u52a1\u7684\uff0c\u6240\u4ee5\u6240\u6709\u7684\u670d\u52a1\u8981\u81ea\u7ed9\u81ea\u8db3\u3002 | | | -fno-stack-protector \u4e0d\u751f\u6210\u7528\u4e8e\u68c0\u6d4b\u7f13\u51b2\u533a\u6ea2\u51fa\u7684\u4ee3\u7801\u3002\u8fd9\u662ffor \u5e94\u7528\u7a0b\u5e8f\u7684\uff0c\u6211\u4eec\u662f\u7f16\u8bd1\u5185\u6838\uff0cucore\u5185\u6838\u597d\u50cf\u8fd8\u7528\u4e0d\u5230\u6b64\u529f\u80fd\u3002 | | | -Os \u4e3a\u51cf\u5c0f\u4ee3\u7801\u5927\u5c0f\u800c\u8fdb\u884c\u4f18\u5316\u3002\u6839\u636e\u786c\u4ef6spec\uff0c\u4e3b\u5f15\u5bfc\u6247\u533a\u53ea\u6709512\u5b57\u8282\uff0c\u6211\u4eec\u5199\u7684\u7b80\u5355bootloader\u7684\u6700\u7ec8\u5927\u5c0f\u4e0d\u80fd\u5927\u4e8e510\u5b57\u8282\u3002 | | | -I<dir> \u6dfb\u52a0\u641c\u7d22\u5934\u6587\u4ef6\u7684\u8def\u5f84 | | | | | | \u751f\u6210bootmain.o\u9700\u8981bootmain.c | | | \u5b9e\u9645\u547d\u4ee4\u4e3a | | | gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc \\ | | | -fno-stack-protector -Ilibs/ -Os -nostdinc \\ | | | -c boot/bootmain.c -o obj/boot/bootmain.o | | | \u65b0\u51fa\u73b0\u7684\u5173\u952e\u53c2\u6570\u6709 | | | -fno-builtin \u9664\u975e\u7528__builtin_\u524d\u7f00\uff0c | | | \u5426\u5219\u4e0d\u8fdb\u884cbuiltin\u51fd\u6570\u7684\u4f18\u5316 | | | |> bin/sign | | | \u751f\u6210sign\u5de5\u5177\u7684makefile\u4ee3\u7801\u4e3a | | | $(call add_files_host,tools/sign.c,sign,sign) | | | $(call create_target_host,sign,sign) | | | | | | \u5b9e\u9645\u547d\u4ee4\u4e3a | | | gcc -Itools/ -g -Wall -O2 -c tools/sign.c \\ | | | -o obj/sign/tools/sign.o | | | gcc -g -Wall -O2 obj/sign/tools/sign.o -o bin/sign | | | | \u9996\u5148\u751f\u6210bootblock.o | | ld -m elf_i386 -nostdlib -N -e start -Ttext 0x7C00 \\ | | obj/boot/bootasm.o obj/boot/bootmain.o -o obj/bootblock.o | | \u5176\u4e2d\u5173\u952e\u7684\u53c2\u6570\u4e3a | | -m <emulation> \u6a21\u62df\u4e3ai386\u4e0a\u7684\u8fde\u63a5\u5668 | | -nostdlib \u4e0d\u4f7f\u7528\u6807\u51c6\u5e93 | | -N \u8bbe\u7f6e\u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5\u5747\u53ef\u8bfb\u5199 | | -e <entry> \u6307\u5b9a\u5165\u53e3 | | -Ttext \u5236\u5b9a\u4ee3\u7801\u6bb5\u5f00\u59cb\u4f4d\u7f6e | | | | \u62f7\u8d1d\u4e8c\u8fdb\u5236\u4ee3\u7801bootblock.o\u5230bootblock.out | | objcopy -S -O binary obj/bootblock.o obj/bootblock.out | | \u5176\u4e2d\u5173\u952e\u7684\u53c2\u6570\u4e3a | | -S \u79fb\u9664\u6240\u6709\u7b26\u53f7\u548c\u91cd\u5b9a\u4f4d\u4fe1\u606f | | -O <bfdname> \u6307\u5b9a\u8f93\u51fa\u683c\u5f0f | | | | \u4f7f\u7528sign\u5de5\u5177\u5904\u7406bootblock.out\uff0c\u751f\u6210bootblock | | bin/sign obj/bootblock.out bin/bootblock | |> bin/kernel | | \u751f\u6210kernel\u7684\u76f8\u5173\u4ee3\u7801\u4e3a | | $(kernel): tools/kernel.ld | | $(kernel): $(KOBJS) | | @echo + ld $@ | | $(V)$(LD) $(LDFLAGS) -T tools/kernel.ld -o $@ $(KOBJS) | | @$(OBJDUMP) -S $@ > $(call asmfile,kernel) | | @$(OBJDUMP) -t $@ | $(SED) '1,/SYMBOL TABLE/d; s/ .* / /; \\ | | /^$$/d' > $(call symfile,kernel) | | | | \u4e3a\u4e86\u751f\u6210kernel\uff0c\u9996\u5148\u9700\u8981 kernel.ld init.o readline.o stdio.o kdebug.o | | kmonitor.o panic.o clock.o console.o intr.o picirq.o trap.o | | trapentry.o vectors.o pmm.o printfmt.o string.o | | kernel.ld\u5df2\u5b58\u5728 | | | |> obj/kern/*/*.o | | | \u751f\u6210\u8fd9\u4e9b.o\u6587\u4ef6\u7684\u76f8\u5173makefile\u4ee3\u7801\u4e3a | | | $(call add_files_cc,$(call listf_cc,$(KSRCDIR)),kernel,\\ | | | $(KCFLAGS)) | | | \u8fd9\u4e9b.o\u751f\u6210\u65b9\u5f0f\u548c\u53c2\u6570\u5747\u7c7b\u4f3c\uff0c\u4ec5\u4e3einit.o\u4e3a\u4f8b\uff0c\u5176\u4f59\u4e0d\u8d58\u8ff0 | |> obj/kern/init/init.o | | | \u7f16\u8bd1\u9700\u8981init.c | | | \u5b9e\u9645\u547d\u4ee4\u4e3a | | | gcc -Ikern/init/ -fno-builtin -Wall -ggdb -m32 \\ | | | -gstabs -nostdinc -fno-stack-protector \\ | | | -Ilibs/ -Ikern/debug/ -Ikern/driver/ \\ | | | -Ikern/trap/ -Ikern/mm/ -c kern/init/init.c \\ | | | -o obj/kern/init/init.o | | | | \u751f\u6210kernel\u65f6\uff0cmakefile\u7684\u51e0\u6761\u6307\u4ee4\u4e2d\u6709@\u524d\u7f00\u7684\u90fd\u4e0d\u5fc5\u9700 | | \u5fc5\u9700\u7684\u547d\u4ee4\u53ea\u6709 | | ld -m elf_i386 -nostdlib -T tools/kernel.ld -o bin/kernel \\ | | obj/kern/init/init.o obj/kern/libs/readline.o \\ | | obj/kern/libs/stdio.o obj/kern/debug/kdebug.o \\ | | obj/kern/debug/kmonitor.o obj/kern/debug/panic.o \\ | | obj/kern/driver/clock.o obj/kern/driver/console.o \\ | | obj/kern/driver/intr.o obj/kern/driver/picirq.o \\ | | obj/kern/trap/trap.o obj/kern/trap/trapentry.o \\ | | obj/kern/trap/vectors.o obj/kern/mm/pmm.o \\ | | obj/libs/printfmt.o obj/libs/string.o | | \u5176\u4e2d\u65b0\u51fa\u73b0\u7684\u5173\u952e\u53c2\u6570\u4e3a | | -T <scriptfile> \u8ba9\u8fde\u63a5\u5668\u4f7f\u7528\u6307\u5b9a\u7684\u811a\u672c | | \u751f\u6210\u4e00\u4e2a\u670910000\u4e2a\u5757\u7684\u6587\u4ef6\uff0c\u6bcf\u4e2a\u5757\u9ed8\u8ba4512\u5b57\u8282\uff0c\u75280\u586b\u5145 | dd if=/dev/zero of=bin/ucore.img count=10000 | | \u628abootblock\u4e2d\u7684\u5185\u5bb9\u5199\u5230\u7b2c\u4e00\u4e2a\u5757 | dd if=bin/bootblock of=bin/ucore.img conv=notrunc | | \u4ece\u7b2c\u4e8c\u4e2a\u5757\u5f00\u59cb\u5199kernel\u4e2d\u7684\u5185\u5bb9 | dd if=bin/kernel of=bin/ucore.img seek=1 conv=notrunc \u95ee\u98981.2\uff1a\u4e00\u4e2a\u88ab\u7cfb\u7edf\u8ba4\u4e3a\u662f\u7b26\u5408\u89c4\u8303\u7684\u786c\u76d8\u4e3b\u5f15\u5bfc\u6247\u533a\u7684\u7279\u5f81\u662f\u4ec0\u4e48? \u4ecesign.c\u7684\u4ee3\u7801\u6765\u770b\uff0c\u4e00\u4e2a\u78c1\u76d8\u4e3b\u5f15\u5bfc\u6247\u533a\u53ea\u6709512\u5b57\u8282\u3002\u4e14 \u7b2c510\u4e2a\uff08\u5012\u6570\u7b2c\u4e8c\u4e2a\uff09\u5b57\u8282\u662f0x55\uff0c \u7b2c511\u4e2a\uff08\u5012\u6570\u7b2c\u4e00\u4e2a\uff09\u5b57\u8282\u662f0xAA\u3002","title":"1"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/1/#1","text":"\u95ee\u98981.1\uff1a\u64cd\u4f5c\u7cfb\u7edf\u955c\u50cf\u6587\u4ef6 ucore.img \u662f\u5982\u4f55\u4e00\u6b65\u4e00\u6b65\u751f\u6210\u7684?(\u9700\u8981\u6bd4\u8f83\u8be6\u7ec6\u5730\u89e3\u91ca Makefile \u4e2d\u6bcf\u4e00\u6761\u76f8\u5173\u547d\u4ee4\u548c\u547d\u4ee4\u53c2\u6570\u7684\u542b\u4e49,\u4ee5\u53ca\u8bf4\u660e\u547d\u4ee4\u5bfc\u81f4\u7684\u7ed3\u679c) bin/ucore.img | \u751f\u6210ucore.img\u7684\u76f8\u5173\u4ee3\u7801\u4e3a | $(UCOREIMG): $(kernel) $(bootblock) | $(V)dd if=/dev/zero of=$@ count=10000 | $(V)dd if=$(bootblock) of=$@ conv=notrunc | $(V)dd if=$(kernel) of=$@ seek=1 conv=notrunc | | \u4e3a\u4e86\u751f\u6210ucore.img\uff0c\u9996\u5148\u9700\u8981\u751f\u6210bootblock\u3001kernel | |> bin/bootblock | | \u751f\u6210bootblock\u7684\u76f8\u5173\u4ee3\u7801\u4e3a | | $(bootblock): $(call toobj,$(bootfiles)) | $(call totarget,sign) | | @echo + ld $@ | | $(V)$(LD) $(LDFLAGS) -N -e start -Ttext 0x7C00 $^ \\ | | -o $(call toobj,bootblock) | | @$(OBJDUMP) -S $(call objfile,bootblock) > \\ | | $(call asmfile,bootblock) | | @$(OBJCOPY) -S -O binary $(call objfile,bootblock) \\ | | $(call outfile,bootblock) | | @$(call totarget,sign) $(call outfile,bootblock) $(bootblock) | | | | \u4e3a\u4e86\u751f\u6210bootblock\uff0c\u9996\u5148\u9700\u8981\u751f\u6210bootasm.o\u3001bootmain.o\u3001sign | | | |> obj/boot/bootasm.o, obj/boot/bootmain.o | | | \u751f\u6210bootasm.o,bootmain.o\u7684\u76f8\u5173makefile\u4ee3\u7801\u4e3a | | | bootfiles = $(call listf_cc,boot) | | | $(foreach f,$(bootfiles),$(call cc_compile,$(f),$(CC),\\ | | | $(CFLAGS) -Os -nostdinc)) | | | \u5b9e\u9645\u4ee3\u7801\u7531\u5b8f\u6279\u91cf\u751f\u6210 | | | | | | \u751f\u6210bootasm.o\u9700\u8981bootasm.S | | | \u5b9e\u9645\u547d\u4ee4\u4e3a | | | gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs \\ | | | -nostdinc -fno-stack-protector -Ilibs/ -Os -nostdinc \\ | | | -c boot/bootasm.S -o obj/boot/bootasm.o | | | \u5176\u4e2d\u5173\u952e\u7684\u53c2\u6570\u4e3a | | | -ggdb \u751f\u6210\u53ef\u4f9bgdb\u4f7f\u7528\u7684\u8c03\u8bd5\u4fe1\u606f\u3002\u8fd9\u6837\u624d\u80fd\u7528qemu+gdb\u6765\u8c03\u8bd5bootloader or ucore\u3002 | | | -m32 \u751f\u6210\u9002\u7528\u4e8e32\u4f4d\u73af\u5883\u7684\u4ee3\u7801\u3002\u6211\u4eec\u7528\u7684\u6a21\u62df\u786c\u4ef6\u662f32bit\u768480386\uff0c\u6240\u4ee5ucore\u4e5f\u8981\u662f32\u4f4d\u7684\u8f6f\u4ef6\u3002 | | | -gstabs \u751f\u6210stabs\u683c\u5f0f\u7684\u8c03\u8bd5\u4fe1\u606f\u3002\u8fd9\u6837\u8981ucore\u7684monitor\u53ef\u4ee5\u663e\u793a\u51fa\u4fbf\u4e8e\u5f00\u53d1\u8005\u9605\u8bfb\u7684\u51fd\u6570\u8c03\u7528\u6808\u4fe1\u606f | | | -nostdinc \u4e0d\u4f7f\u7528\u6807\u51c6\u5e93\u3002\u6807\u51c6\u5e93\u662f\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7528\u7684\uff0c\u6211\u4eec\u662f\u7f16\u8bd1ucore\u5185\u6838\uff0cOS\u5185\u6838\u662f\u63d0\u4f9b\u670d\u52a1\u7684\uff0c\u6240\u4ee5\u6240\u6709\u7684\u670d\u52a1\u8981\u81ea\u7ed9\u81ea\u8db3\u3002 | | | -fno-stack-protector \u4e0d\u751f\u6210\u7528\u4e8e\u68c0\u6d4b\u7f13\u51b2\u533a\u6ea2\u51fa\u7684\u4ee3\u7801\u3002\u8fd9\u662ffor \u5e94\u7528\u7a0b\u5e8f\u7684\uff0c\u6211\u4eec\u662f\u7f16\u8bd1\u5185\u6838\uff0cucore\u5185\u6838\u597d\u50cf\u8fd8\u7528\u4e0d\u5230\u6b64\u529f\u80fd\u3002 | | | -Os \u4e3a\u51cf\u5c0f\u4ee3\u7801\u5927\u5c0f\u800c\u8fdb\u884c\u4f18\u5316\u3002\u6839\u636e\u786c\u4ef6spec\uff0c\u4e3b\u5f15\u5bfc\u6247\u533a\u53ea\u6709512\u5b57\u8282\uff0c\u6211\u4eec\u5199\u7684\u7b80\u5355bootloader\u7684\u6700\u7ec8\u5927\u5c0f\u4e0d\u80fd\u5927\u4e8e510\u5b57\u8282\u3002 | | | -I<dir> \u6dfb\u52a0\u641c\u7d22\u5934\u6587\u4ef6\u7684\u8def\u5f84 | | | | | | \u751f\u6210bootmain.o\u9700\u8981bootmain.c | | | \u5b9e\u9645\u547d\u4ee4\u4e3a | | | gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc \\ | | | -fno-stack-protector -Ilibs/ -Os -nostdinc \\ | | | -c boot/bootmain.c -o obj/boot/bootmain.o | | | \u65b0\u51fa\u73b0\u7684\u5173\u952e\u53c2\u6570\u6709 | | | -fno-builtin \u9664\u975e\u7528__builtin_\u524d\u7f00\uff0c | | | \u5426\u5219\u4e0d\u8fdb\u884cbuiltin\u51fd\u6570\u7684\u4f18\u5316 | | | |> bin/sign | | | \u751f\u6210sign\u5de5\u5177\u7684makefile\u4ee3\u7801\u4e3a | | | $(call add_files_host,tools/sign.c,sign,sign) | | | $(call create_target_host,sign,sign) | | | | | | \u5b9e\u9645\u547d\u4ee4\u4e3a | | | gcc -Itools/ -g -Wall -O2 -c tools/sign.c \\ | | | -o obj/sign/tools/sign.o | | | gcc -g -Wall -O2 obj/sign/tools/sign.o -o bin/sign | | | | \u9996\u5148\u751f\u6210bootblock.o | | ld -m elf_i386 -nostdlib -N -e start -Ttext 0x7C00 \\ | | obj/boot/bootasm.o obj/boot/bootmain.o -o obj/bootblock.o | | \u5176\u4e2d\u5173\u952e\u7684\u53c2\u6570\u4e3a | | -m <emulation> \u6a21\u62df\u4e3ai386\u4e0a\u7684\u8fde\u63a5\u5668 | | -nostdlib \u4e0d\u4f7f\u7528\u6807\u51c6\u5e93 | | -N \u8bbe\u7f6e\u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5\u5747\u53ef\u8bfb\u5199 | | -e <entry> \u6307\u5b9a\u5165\u53e3 | | -Ttext \u5236\u5b9a\u4ee3\u7801\u6bb5\u5f00\u59cb\u4f4d\u7f6e | | | | \u62f7\u8d1d\u4e8c\u8fdb\u5236\u4ee3\u7801bootblock.o\u5230bootblock.out | | objcopy -S -O binary obj/bootblock.o obj/bootblock.out | | \u5176\u4e2d\u5173\u952e\u7684\u53c2\u6570\u4e3a | | -S \u79fb\u9664\u6240\u6709\u7b26\u53f7\u548c\u91cd\u5b9a\u4f4d\u4fe1\u606f | | -O <bfdname> \u6307\u5b9a\u8f93\u51fa\u683c\u5f0f | | | | \u4f7f\u7528sign\u5de5\u5177\u5904\u7406bootblock.out\uff0c\u751f\u6210bootblock | | bin/sign obj/bootblock.out bin/bootblock | |> bin/kernel | | \u751f\u6210kernel\u7684\u76f8\u5173\u4ee3\u7801\u4e3a | | $(kernel): tools/kernel.ld | | $(kernel): $(KOBJS) | | @echo + ld $@ | | $(V)$(LD) $(LDFLAGS) -T tools/kernel.ld -o $@ $(KOBJS) | | @$(OBJDUMP) -S $@ > $(call asmfile,kernel) | | @$(OBJDUMP) -t $@ | $(SED) '1,/SYMBOL TABLE/d; s/ .* / /; \\ | | /^$$/d' > $(call symfile,kernel) | | | | \u4e3a\u4e86\u751f\u6210kernel\uff0c\u9996\u5148\u9700\u8981 kernel.ld init.o readline.o stdio.o kdebug.o | | kmonitor.o panic.o clock.o console.o intr.o picirq.o trap.o | | trapentry.o vectors.o pmm.o printfmt.o string.o | | kernel.ld\u5df2\u5b58\u5728 | | | |> obj/kern/*/*.o | | | \u751f\u6210\u8fd9\u4e9b.o\u6587\u4ef6\u7684\u76f8\u5173makefile\u4ee3\u7801\u4e3a | | | $(call add_files_cc,$(call listf_cc,$(KSRCDIR)),kernel,\\ | | | $(KCFLAGS)) | | | \u8fd9\u4e9b.o\u751f\u6210\u65b9\u5f0f\u548c\u53c2\u6570\u5747\u7c7b\u4f3c\uff0c\u4ec5\u4e3einit.o\u4e3a\u4f8b\uff0c\u5176\u4f59\u4e0d\u8d58\u8ff0 | |> obj/kern/init/init.o | | | \u7f16\u8bd1\u9700\u8981init.c | | | \u5b9e\u9645\u547d\u4ee4\u4e3a | | | gcc -Ikern/init/ -fno-builtin -Wall -ggdb -m32 \\ | | | -gstabs -nostdinc -fno-stack-protector \\ | | | -Ilibs/ -Ikern/debug/ -Ikern/driver/ \\ | | | -Ikern/trap/ -Ikern/mm/ -c kern/init/init.c \\ | | | -o obj/kern/init/init.o | | | | \u751f\u6210kernel\u65f6\uff0cmakefile\u7684\u51e0\u6761\u6307\u4ee4\u4e2d\u6709@\u524d\u7f00\u7684\u90fd\u4e0d\u5fc5\u9700 | | \u5fc5\u9700\u7684\u547d\u4ee4\u53ea\u6709 | | ld -m elf_i386 -nostdlib -T tools/kernel.ld -o bin/kernel \\ | | obj/kern/init/init.o obj/kern/libs/readline.o \\ | | obj/kern/libs/stdio.o obj/kern/debug/kdebug.o \\ | | obj/kern/debug/kmonitor.o obj/kern/debug/panic.o \\ | | obj/kern/driver/clock.o obj/kern/driver/console.o \\ | | obj/kern/driver/intr.o obj/kern/driver/picirq.o \\ | | obj/kern/trap/trap.o obj/kern/trap/trapentry.o \\ | | obj/kern/trap/vectors.o obj/kern/mm/pmm.o \\ | | obj/libs/printfmt.o obj/libs/string.o | | \u5176\u4e2d\u65b0\u51fa\u73b0\u7684\u5173\u952e\u53c2\u6570\u4e3a | | -T <scriptfile> \u8ba9\u8fde\u63a5\u5668\u4f7f\u7528\u6307\u5b9a\u7684\u811a\u672c | | \u751f\u6210\u4e00\u4e2a\u670910000\u4e2a\u5757\u7684\u6587\u4ef6\uff0c\u6bcf\u4e2a\u5757\u9ed8\u8ba4512\u5b57\u8282\uff0c\u75280\u586b\u5145 | dd if=/dev/zero of=bin/ucore.img count=10000 | | \u628abootblock\u4e2d\u7684\u5185\u5bb9\u5199\u5230\u7b2c\u4e00\u4e2a\u5757 | dd if=bin/bootblock of=bin/ucore.img conv=notrunc | | \u4ece\u7b2c\u4e8c\u4e2a\u5757\u5f00\u59cb\u5199kernel\u4e2d\u7684\u5185\u5bb9 | dd if=bin/kernel of=bin/ucore.img seek=1 conv=notrunc \u95ee\u98981.2\uff1a\u4e00\u4e2a\u88ab\u7cfb\u7edf\u8ba4\u4e3a\u662f\u7b26\u5408\u89c4\u8303\u7684\u786c\u76d8\u4e3b\u5f15\u5bfc\u6247\u533a\u7684\u7279\u5f81\u662f\u4ec0\u4e48? \u4ecesign.c\u7684\u4ee3\u7801\u6765\u770b\uff0c\u4e00\u4e2a\u78c1\u76d8\u4e3b\u5f15\u5bfc\u6247\u533a\u53ea\u6709512\u5b57\u8282\u3002\u4e14 \u7b2c510\u4e2a\uff08\u5012\u6570\u7b2c\u4e8c\u4e2a\uff09\u5b57\u8282\u662f0x55\uff0c \u7b2c511\u4e2a\uff08\u5012\u6570\u7b2c\u4e00\u4e2a\uff09\u5b57\u8282\u662f0xAA\u3002","title":"\u7ec3\u4e601"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/2/","text":"\u7ec3\u4e602 \u95ee\u98982.1\uff1a\u4eceCPU\u52a0\u7535\u540e\u6267\u884c\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u5f00\u59cb\uff0c\u5355\u6b65\u8ddf\u8e2aBIOS\u7684\u6267\u884c\u3002 \u7ec3\u4e602\u53ef\u4ee5\u5355\u6b65\u8ddf\u8e2a\uff0c\u65b9\u6cd5\u5982\u4e0b\uff1a 1 \u4fee\u6539 lab1/tools/gdbinit,\u5185\u5bb9\u4e3a: set architecture i8086 target remote :1234 2 \u5728 lab1\u76ee\u5f55\u4e0b\uff0c\u6267\u884c make debug 3 \u5728\u770b\u5230gdb\u7684\u8c03\u8bd5\u754c\u9762(gdb)\u540e\uff0c\u5728gdb\u8c03\u8bd5\u754c\u9762\u4e0b\u6267\u884c\u5982\u4e0b\u547d\u4ee4 si \u5373\u53ef\u5355\u6b65\u8ddf\u8e2aBIOS\u4e86\u3002 4 \u5728gdb\u754c\u9762\u4e0b\uff0c\u53ef\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6765\u770bBIOS\u7684\u4ee3\u7801 x /2i \u5730\u5740\u503c //\u663e\u793a\u5f53\u524deip\u5904\u7684\u6c47\u7f16\u6307\u4ee4 \u8fdb\u4e00\u6b65\u7684\u8865\u5145 \u6539\u5199Makefile\u6587\u4ef6 debug: $(UCOREIMG) $(V)$(TERMINAL) -e \"$(QEMU) -S -s -d in_asm -D $(BINDIR)/q.log -parallel stdio -hda $< -serial null\" $(V)sleep 2 $(V)$(TERMINAL) -e \"gdb -q -tui -x tools/gdbinit\" \u5728\u8c03\u7528qemu\u65f6\u589e\u52a0 -d in_asm -D q.log \u53c2\u6570\uff0c\u4fbf\u53ef\u4ee5\u5c06\u8fd0\u884c\u7684\u6c47\u7f16\u6307\u4ee4\u4fdd\u5b58\u5728q.log\u4e2d\u3002 \u4e3a\u9632\u6b62qemu\u5728gdb\u8fde\u63a5\u540e\u7acb\u5373\u5f00\u59cb\u6267\u884c\uff0c\u5220\u9664\u4e86 tools/gdbinit \u4e2d\u7684 continue \u884c\u3002 \u95ee\u98982.2\uff1a\u5728\u521d\u59cb\u5316\u4f4d\u7f6e0x7c00 \u8bbe\u7f6e\u5b9e\u5730\u5740\u65ad\u70b9,\u6d4b\u8bd5\u65ad\u70b9\u6b63\u5e38\u3002 \u5728tools/gdbinit\u7ed3\u5c3e\u52a0\u4e0a set architecture i8086 //\u8bbe\u7f6e\u5f53\u524d\u8c03\u8bd5\u7684CPU\u662f8086 b *0x7c00 //\u57280x7c00\u5904\u8bbe\u7f6e\u65ad\u70b9\u3002\u6b64\u5730\u5740\u662fbootloader\u5165\u53e3\u70b9\u5730\u5740\uff0c\u53ef\u770bboot/bootasm.S\u7684start\u5730\u5740\u5904 c //continue\u7b80\u79f0\uff0c\u8868\u793a\u7ee7\u7eed\u6267\u884c x /2i $pc //\u663e\u793a\u5f53\u524deip\u5904\u7684\u6c47\u7f16\u6307\u4ee4 set architecture i386 //\u8bbe\u7f6e\u5f53\u524d\u8c03\u8bd5\u7684CPU\u662f80386 \u8fd0\u884c\"make debug\"\u4fbf\u53ef\u5f97\u5230 Breakpoint 2, 0x00007c00 in ?? () => 0x7c00: cli 0x7c01: cld 0x7c02: xor %eax,%eax 0x7c04: mov %eax,%ds 0x7c06: mov %eax,%es 0x7c08: mov %eax,%ss 0x7c0a: in $0x64,%al 0x7c0c: test $0x2,%al 0x7c0e: jne 0x7c0a 0x7c10: mov $0xd1,%al \u95ee\u98982.3\uff1a\u5728\u8c03\u7528qemu \u65f6\u589e\u52a0-d in_asm -D q.log \u53c2\u6570\uff0c\u4fbf\u53ef\u4ee5\u5c06\u8fd0\u884c\u7684\u6c47\u7f16\u6307\u4ee4\u4fdd\u5b58\u5728q.log \u4e2d\u3002\u5c06\u6267\u884c\u7684\u6c47\u7f16\u4ee3\u7801\u4e0ebootasm.S \u548c bootblock.asm \u8fdb\u884c\u6bd4\u8f83\uff0c\u770b\u770b\u4e8c\u8005\u662f\u5426\u4e00\u81f4\u3002 \u5728tools/gdbinit\u7ed3\u5c3e\u52a0\u4e0a b *0x7c00 c x /10i $pc \u4fbf\u53ef\u4ee5\u5728q.log\u4e2d\u8bfb\u5230\"call bootmain\"\u524d\u6267\u884c\u7684\u547d\u4ee4 ---------------- IN: 0x00007c00: cli ---------------- IN: 0x00007c01: cld 0x00007c02: xor %ax,%ax 0x00007c04: mov %ax,%ds 0x00007c06: mov %ax,%es 0x00007c08: mov %ax,%ss ---------------- IN: 0x00007c0a: in $0x64,%al ---------------- IN: 0x00007c0c: test $0x2,%al 0x00007c0e: jne 0x7c0a ---------------- IN: 0x00007c10: mov $0xd1,%al 0x00007c12: out %al,$0x64 0x00007c14: in $0x64,%al 0x00007c16: test $0x2,%al 0x00007c18: jne 0x7c14 ---------------- IN: 0x00007c1a: mov $0xdf,%al 0x00007c1c: out %al,$0x60 0x00007c1e: lgdtw 0x7c6c 0x00007c23: mov %cr0,%eax 0x00007c26: or $0x1,%eax 0x00007c2a: mov %eax,%cr0 ---------------- IN: 0x00007c2d: ljmp $0x8,$0x7c32 ---------------- IN: 0x00007c32: mov $0x10,%ax 0x00007c36: mov %eax,%ds ---------------- IN: 0x00007c38: mov %eax,%es ---------------- IN: 0x00007c3a: mov %eax,%fs 0x00007c3c: mov %eax,%gs 0x00007c3e: mov %eax,%ss ---------------- IN: 0x00007c40: mov $0x0,%ebp ---------------- IN: 0x00007c45: mov $0x7c00,%esp 0x00007c4a: call 0x7d0d ---------------- IN: 0x00007d0d: push %ebp \u5176\u4e0ebootasm.S\u548cbootblock.asm\u4e2d\u7684\u4ee3\u7801\u76f8\u540c\u3002","title":"2"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/2/#2","text":"\u95ee\u98982.1\uff1a\u4eceCPU\u52a0\u7535\u540e\u6267\u884c\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u5f00\u59cb\uff0c\u5355\u6b65\u8ddf\u8e2aBIOS\u7684\u6267\u884c\u3002 \u7ec3\u4e602\u53ef\u4ee5\u5355\u6b65\u8ddf\u8e2a\uff0c\u65b9\u6cd5\u5982\u4e0b\uff1a 1 \u4fee\u6539 lab1/tools/gdbinit,\u5185\u5bb9\u4e3a: set architecture i8086 target remote :1234 2 \u5728 lab1\u76ee\u5f55\u4e0b\uff0c\u6267\u884c make debug 3 \u5728\u770b\u5230gdb\u7684\u8c03\u8bd5\u754c\u9762(gdb)\u540e\uff0c\u5728gdb\u8c03\u8bd5\u754c\u9762\u4e0b\u6267\u884c\u5982\u4e0b\u547d\u4ee4 si \u5373\u53ef\u5355\u6b65\u8ddf\u8e2aBIOS\u4e86\u3002 4 \u5728gdb\u754c\u9762\u4e0b\uff0c\u53ef\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6765\u770bBIOS\u7684\u4ee3\u7801 x /2i \u5730\u5740\u503c //\u663e\u793a\u5f53\u524deip\u5904\u7684\u6c47\u7f16\u6307\u4ee4 \u8fdb\u4e00\u6b65\u7684\u8865\u5145 \u6539\u5199Makefile\u6587\u4ef6 debug: $(UCOREIMG) $(V)$(TERMINAL) -e \"$(QEMU) -S -s -d in_asm -D $(BINDIR)/q.log -parallel stdio -hda $< -serial null\" $(V)sleep 2 $(V)$(TERMINAL) -e \"gdb -q -tui -x tools/gdbinit\" \u5728\u8c03\u7528qemu\u65f6\u589e\u52a0 -d in_asm -D q.log \u53c2\u6570\uff0c\u4fbf\u53ef\u4ee5\u5c06\u8fd0\u884c\u7684\u6c47\u7f16\u6307\u4ee4\u4fdd\u5b58\u5728q.log\u4e2d\u3002 \u4e3a\u9632\u6b62qemu\u5728gdb\u8fde\u63a5\u540e\u7acb\u5373\u5f00\u59cb\u6267\u884c\uff0c\u5220\u9664\u4e86 tools/gdbinit \u4e2d\u7684 continue \u884c\u3002 \u95ee\u98982.2\uff1a\u5728\u521d\u59cb\u5316\u4f4d\u7f6e0x7c00 \u8bbe\u7f6e\u5b9e\u5730\u5740\u65ad\u70b9,\u6d4b\u8bd5\u65ad\u70b9\u6b63\u5e38\u3002 \u5728tools/gdbinit\u7ed3\u5c3e\u52a0\u4e0a set architecture i8086 //\u8bbe\u7f6e\u5f53\u524d\u8c03\u8bd5\u7684CPU\u662f8086 b *0x7c00 //\u57280x7c00\u5904\u8bbe\u7f6e\u65ad\u70b9\u3002\u6b64\u5730\u5740\u662fbootloader\u5165\u53e3\u70b9\u5730\u5740\uff0c\u53ef\u770bboot/bootasm.S\u7684start\u5730\u5740\u5904 c //continue\u7b80\u79f0\uff0c\u8868\u793a\u7ee7\u7eed\u6267\u884c x /2i $pc //\u663e\u793a\u5f53\u524deip\u5904\u7684\u6c47\u7f16\u6307\u4ee4 set architecture i386 //\u8bbe\u7f6e\u5f53\u524d\u8c03\u8bd5\u7684CPU\u662f80386 \u8fd0\u884c\"make debug\"\u4fbf\u53ef\u5f97\u5230 Breakpoint 2, 0x00007c00 in ?? () => 0x7c00: cli 0x7c01: cld 0x7c02: xor %eax,%eax 0x7c04: mov %eax,%ds 0x7c06: mov %eax,%es 0x7c08: mov %eax,%ss 0x7c0a: in $0x64,%al 0x7c0c: test $0x2,%al 0x7c0e: jne 0x7c0a 0x7c10: mov $0xd1,%al \u95ee\u98982.3\uff1a\u5728\u8c03\u7528qemu \u65f6\u589e\u52a0-d in_asm -D q.log \u53c2\u6570\uff0c\u4fbf\u53ef\u4ee5\u5c06\u8fd0\u884c\u7684\u6c47\u7f16\u6307\u4ee4\u4fdd\u5b58\u5728q.log \u4e2d\u3002\u5c06\u6267\u884c\u7684\u6c47\u7f16\u4ee3\u7801\u4e0ebootasm.S \u548c bootblock.asm \u8fdb\u884c\u6bd4\u8f83\uff0c\u770b\u770b\u4e8c\u8005\u662f\u5426\u4e00\u81f4\u3002 \u5728tools/gdbinit\u7ed3\u5c3e\u52a0\u4e0a b *0x7c00 c x /10i $pc \u4fbf\u53ef\u4ee5\u5728q.log\u4e2d\u8bfb\u5230\"call bootmain\"\u524d\u6267\u884c\u7684\u547d\u4ee4 ---------------- IN: 0x00007c00: cli ---------------- IN: 0x00007c01: cld 0x00007c02: xor %ax,%ax 0x00007c04: mov %ax,%ds 0x00007c06: mov %ax,%es 0x00007c08: mov %ax,%ss ---------------- IN: 0x00007c0a: in $0x64,%al ---------------- IN: 0x00007c0c: test $0x2,%al 0x00007c0e: jne 0x7c0a ---------------- IN: 0x00007c10: mov $0xd1,%al 0x00007c12: out %al,$0x64 0x00007c14: in $0x64,%al 0x00007c16: test $0x2,%al 0x00007c18: jne 0x7c14 ---------------- IN: 0x00007c1a: mov $0xdf,%al 0x00007c1c: out %al,$0x60 0x00007c1e: lgdtw 0x7c6c 0x00007c23: mov %cr0,%eax 0x00007c26: or $0x1,%eax 0x00007c2a: mov %eax,%cr0 ---------------- IN: 0x00007c2d: ljmp $0x8,$0x7c32 ---------------- IN: 0x00007c32: mov $0x10,%ax 0x00007c36: mov %eax,%ds ---------------- IN: 0x00007c38: mov %eax,%es ---------------- IN: 0x00007c3a: mov %eax,%fs 0x00007c3c: mov %eax,%gs 0x00007c3e: mov %eax,%ss ---------------- IN: 0x00007c40: mov $0x0,%ebp ---------------- IN: 0x00007c45: mov $0x7c00,%esp 0x00007c4a: call 0x7d0d ---------------- IN: 0x00007d0d: push %ebp \u5176\u4e0ebootasm.S\u548cbootblock.asm\u4e2d\u7684\u4ee3\u7801\u76f8\u540c\u3002","title":"\u7ec3\u4e602"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/3/","text":"\u7ec3\u4e603\uff1a\u5206\u6790bootloader \u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\u7684\u8fc7\u7a0b\u3002 \u4ece %cs=0 $pc=0x7c00 \uff0c\u8fdb\u5165\u540e \u9996\u5148\u6e05\u7406\u73af\u5883\uff1a\u5305\u62ec\u5c06flag\u7f6e0\u548c\u5c06\u6bb5\u5bc4\u5b58\u5668\u7f6e0 .code16 cli cld xorw %ax, %ax movw %ax, %ds movw %ax, %es movw %ax, %ss \u5f00\u542fA20\uff1a\u901a\u8fc7\u5c06\u952e\u76d8\u63a7\u5236\u5668\u4e0a\u7684A20\u7ebf\u7f6e\u4e8e\u9ad8\u7535\u4f4d\uff0c\u5168\u90e832\u6761\u5730\u5740\u7ebf\u53ef\u7528\uff0c \u53ef\u4ee5\u8bbf\u95ee4G\u7684\u5185\u5b58\u7a7a\u95f4\u3002 seta20.1: ## \u7b49\u5f858042\u952e\u76d8\u63a7\u5236\u5668\u4e0d\u5fd9 inb $0x64, %al ## testb $0x2, %al # jnz seta20.1 # movb $0xd1, %al ## \u53d1\u9001\u51998042\u8f93\u51fa\u7aef\u53e3\u7684\u6307\u4ee4 outb %al, $0x64 # seta20.1: ## \u7b49\u5f858042\u952e\u76d8\u63a7\u5236\u5668\u4e0d\u5fd9 inb $0x64, %al ## testb $0x2, %al # jnz seta20.1 # movb $0xdf, %al ## \u6253\u5f00A20 outb %al, $0x60 ## \u521d\u59cb\u5316GDT\u8868\uff1a\u4e00\u4e2a\u7b80\u5355\u7684GDT\u8868\u548c\u5176\u63cf\u8ff0\u7b26\u5df2\u7ecf\u9759\u6001\u50a8\u5b58\u5728\u5f15\u5bfc\u533a\u4e2d\uff0c\u8f7d\u5165\u5373\u53ef lgdt gdtdesc \u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\uff1a\u901a\u8fc7\u5c06cr0\u5bc4\u5b58\u5668PE\u4f4d\u7f6e1\u4fbf\u5f00\u542f\u4e86\u4fdd\u62a4\u6a21\u5f0f movl %cr0, %eax orl $CR0_PE_ON, %eax movl %eax, %cr0 \u901a\u8fc7\u957f\u8df3\u8f6c\u66f4\u65b0cs\u7684\u57fa\u5730\u5740 ljmp $PROT_MODE_CSEG, $protcseg .code32 protcseg: \u8bbe\u7f6e\u6bb5\u5bc4\u5b58\u5668\uff0c\u5e76\u5efa\u7acb\u5806\u6808 movw $PROT_MODE_DSEG, %ax movw %ax, %ds movw %ax, %es movw %ax, %fs movw %ax, %gs movw %ax, %ss movl $0x0, %ebp movl $start, %esp \u8f6c\u5230\u4fdd\u62a4\u6a21\u5f0f\u5b8c\u6210\uff0c\u8fdb\u5165boot\u4e3b\u65b9\u6cd5 call bootmain","title":"3"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/3/#3bootloader","text":"\u4ece %cs=0 $pc=0x7c00 \uff0c\u8fdb\u5165\u540e \u9996\u5148\u6e05\u7406\u73af\u5883\uff1a\u5305\u62ec\u5c06flag\u7f6e0\u548c\u5c06\u6bb5\u5bc4\u5b58\u5668\u7f6e0 .code16 cli cld xorw %ax, %ax movw %ax, %ds movw %ax, %es movw %ax, %ss \u5f00\u542fA20\uff1a\u901a\u8fc7\u5c06\u952e\u76d8\u63a7\u5236\u5668\u4e0a\u7684A20\u7ebf\u7f6e\u4e8e\u9ad8\u7535\u4f4d\uff0c\u5168\u90e832\u6761\u5730\u5740\u7ebf\u53ef\u7528\uff0c \u53ef\u4ee5\u8bbf\u95ee4G\u7684\u5185\u5b58\u7a7a\u95f4\u3002 seta20.1: ## \u7b49\u5f858042\u952e\u76d8\u63a7\u5236\u5668\u4e0d\u5fd9 inb $0x64, %al ## testb $0x2, %al # jnz seta20.1 # movb $0xd1, %al ## \u53d1\u9001\u51998042\u8f93\u51fa\u7aef\u53e3\u7684\u6307\u4ee4 outb %al, $0x64 # seta20.1: ## \u7b49\u5f858042\u952e\u76d8\u63a7\u5236\u5668\u4e0d\u5fd9 inb $0x64, %al ## testb $0x2, %al # jnz seta20.1 # movb $0xdf, %al ## \u6253\u5f00A20 outb %al, $0x60 ## \u521d\u59cb\u5316GDT\u8868\uff1a\u4e00\u4e2a\u7b80\u5355\u7684GDT\u8868\u548c\u5176\u63cf\u8ff0\u7b26\u5df2\u7ecf\u9759\u6001\u50a8\u5b58\u5728\u5f15\u5bfc\u533a\u4e2d\uff0c\u8f7d\u5165\u5373\u53ef lgdt gdtdesc \u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\uff1a\u901a\u8fc7\u5c06cr0\u5bc4\u5b58\u5668PE\u4f4d\u7f6e1\u4fbf\u5f00\u542f\u4e86\u4fdd\u62a4\u6a21\u5f0f movl %cr0, %eax orl $CR0_PE_ON, %eax movl %eax, %cr0 \u901a\u8fc7\u957f\u8df3\u8f6c\u66f4\u65b0cs\u7684\u57fa\u5730\u5740 ljmp $PROT_MODE_CSEG, $protcseg .code32 protcseg: \u8bbe\u7f6e\u6bb5\u5bc4\u5b58\u5668\uff0c\u5e76\u5efa\u7acb\u5806\u6808 movw $PROT_MODE_DSEG, %ax movw %ax, %ds movw %ax, %es movw %ax, %fs movw %ax, %gs movw %ax, %ss movl $0x0, %ebp movl $start, %esp \u8f6c\u5230\u4fdd\u62a4\u6a21\u5f0f\u5b8c\u6210\uff0c\u8fdb\u5165boot\u4e3b\u65b9\u6cd5 call bootmain","title":"\u7ec3\u4e603\uff1a\u5206\u6790bootloader \u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\u7684\u8fc7\u7a0b\u3002"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/4/","text":"\u7ec3\u4e604\uff1a\u5206\u6790bootloader\u52a0\u8f7dELF\u683c\u5f0f\u7684OS\u7684\u8fc7\u7a0b\u3002 \u9996\u5148\u770breadsect\u51fd\u6570\uff0c readsect \u4ece\u8bbe\u5907\u7684\u7b2csecno\u6247\u533a\u8bfb\u53d6\u6570\u636e\u5230dst\u4f4d\u7f6e static void readsect(void *dst, uint32_t secno) { waitdisk(); outb(0x1F2, 1); // \u8bbe\u7f6e\u8bfb\u53d6\u6247\u533a\u7684\u6570\u76ee\u4e3a1 outb(0x1F3, secno & 0xFF); outb(0x1F4, (secno >> 8) & 0xFF); outb(0x1F5, (secno >> 16) & 0xFF); outb(0x1F6, ((secno >> 24) & 0xF) | 0xE0); // \u4e0a\u9762\u56db\u6761\u6307\u4ee4\u8054\u5408\u5236\u5b9a\u4e86\u6247\u533a\u53f7 // \u5728\u8fd94\u4e2a\u5b57\u8282\u7ebf\u8054\u5408\u6784\u6210\u768432\u4f4d\u53c2\u6570\u4e2d // 29-31\u4f4d\u5f3a\u5236\u8bbe\u4e3a1 // 28\u4f4d(=0)\u8868\u793a\u8bbf\u95ee\"Disk 0\" // 0-27\u4f4d\u662f28\u4f4d\u7684\u504f\u79fb\u91cf outb(0x1F7, 0x20); // 0x20\u547d\u4ee4\uff0c\u8bfb\u53d6\u6247\u533a waitdisk(); insl(0x1F0, dst, SECTSIZE / 4); // \u8bfb\u53d6\u5230dst\u4f4d\u7f6e\uff0c // \u5e7b\u65704\u56e0\u4e3a\u8fd9\u91cc\u4ee5DW\u4e3a\u5355\u4f4d } readseg\u7b80\u5355\u5305\u88c5\u4e86readsect\uff0c\u53ef\u4ee5\u4ece\u8bbe\u5907\u8bfb\u53d6\u4efb\u610f\u957f\u5ea6\u7684\u5185\u5bb9\u3002 static void readseg(uintptr_t va, uint32_t count, uint32_t offset) { uintptr_t end_va = va + count; va -= offset % SECTSIZE; uint32_t secno = (offset / SECTSIZE) + 1; // \u52a01\u56e0\u4e3a0\u6247\u533a\u88ab\u5f15\u5bfc\u5360\u7528 // ELF\u6587\u4ef6\u4ece1\u6247\u533a\u5f00\u59cb for (; va < end_va; va += SECTSIZE, secno ++) { readsect((void *)va, secno); } } \u5728bootmain\u51fd\u6570\u4e2d\uff0c void bootmain(void) { // \u9996\u5148\u8bfb\u53d6ELF\u7684\u5934\u90e8 readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0); // \u901a\u8fc7\u50a8\u5b58\u5728\u5934\u90e8\u7684\u5e7b\u6570\u5224\u65ad\u662f\u5426\u662f\u5408\u6cd5\u7684ELF\u6587\u4ef6 if (ELFHDR->e_magic != ELF_MAGIC) { goto bad; } struct proghdr *ph, *eph; // ELF\u5934\u90e8\u6709\u63cf\u8ff0ELF\u6587\u4ef6\u5e94\u52a0\u8f7d\u5230\u5185\u5b58\u4ec0\u4e48\u4f4d\u7f6e\u7684\u63cf\u8ff0\u8868\uff0c // \u5148\u5c06\u63cf\u8ff0\u8868\u7684\u5934\u5730\u5740\u5b58\u5728ph ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff); eph = ph + ELFHDR->e_phnum; // \u6309\u7167\u63cf\u8ff0\u8868\u5c06ELF\u6587\u4ef6\u4e2d\u6570\u636e\u8f7d\u5165\u5185\u5b58 for (; ph < eph; ph ++) { readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset); } // ELF\u6587\u4ef60x1000\u4f4d\u7f6e\u540e\u9762\u76840xd1ec\u6bd4\u7279\u88ab\u8f7d\u5165\u5185\u5b580x00100000 // ELF\u6587\u4ef60xf000\u4f4d\u7f6e\u540e\u9762\u76840x1d20\u6bd4\u7279\u88ab\u8f7d\u5165\u5185\u5b580x0010e000 // \u6839\u636eELF\u5934\u90e8\u50a8\u5b58\u7684\u5165\u53e3\u4fe1\u606f\uff0c\u627e\u5230\u5185\u6838\u7684\u5165\u53e3 ((void (*)(void))(ELFHDR->e_entry & 0xFFFFFF))(); bad: outw(0x8A00, 0x8A00); outw(0x8A00, 0x8E00); while (1); }","title":"4"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/4/#4bootloaderelfos","text":"\u9996\u5148\u770breadsect\u51fd\u6570\uff0c readsect \u4ece\u8bbe\u5907\u7684\u7b2csecno\u6247\u533a\u8bfb\u53d6\u6570\u636e\u5230dst\u4f4d\u7f6e static void readsect(void *dst, uint32_t secno) { waitdisk(); outb(0x1F2, 1); // \u8bbe\u7f6e\u8bfb\u53d6\u6247\u533a\u7684\u6570\u76ee\u4e3a1 outb(0x1F3, secno & 0xFF); outb(0x1F4, (secno >> 8) & 0xFF); outb(0x1F5, (secno >> 16) & 0xFF); outb(0x1F6, ((secno >> 24) & 0xF) | 0xE0); // \u4e0a\u9762\u56db\u6761\u6307\u4ee4\u8054\u5408\u5236\u5b9a\u4e86\u6247\u533a\u53f7 // \u5728\u8fd94\u4e2a\u5b57\u8282\u7ebf\u8054\u5408\u6784\u6210\u768432\u4f4d\u53c2\u6570\u4e2d // 29-31\u4f4d\u5f3a\u5236\u8bbe\u4e3a1 // 28\u4f4d(=0)\u8868\u793a\u8bbf\u95ee\"Disk 0\" // 0-27\u4f4d\u662f28\u4f4d\u7684\u504f\u79fb\u91cf outb(0x1F7, 0x20); // 0x20\u547d\u4ee4\uff0c\u8bfb\u53d6\u6247\u533a waitdisk(); insl(0x1F0, dst, SECTSIZE / 4); // \u8bfb\u53d6\u5230dst\u4f4d\u7f6e\uff0c // \u5e7b\u65704\u56e0\u4e3a\u8fd9\u91cc\u4ee5DW\u4e3a\u5355\u4f4d } readseg\u7b80\u5355\u5305\u88c5\u4e86readsect\uff0c\u53ef\u4ee5\u4ece\u8bbe\u5907\u8bfb\u53d6\u4efb\u610f\u957f\u5ea6\u7684\u5185\u5bb9\u3002 static void readseg(uintptr_t va, uint32_t count, uint32_t offset) { uintptr_t end_va = va + count; va -= offset % SECTSIZE; uint32_t secno = (offset / SECTSIZE) + 1; // \u52a01\u56e0\u4e3a0\u6247\u533a\u88ab\u5f15\u5bfc\u5360\u7528 // ELF\u6587\u4ef6\u4ece1\u6247\u533a\u5f00\u59cb for (; va < end_va; va += SECTSIZE, secno ++) { readsect((void *)va, secno); } } \u5728bootmain\u51fd\u6570\u4e2d\uff0c void bootmain(void) { // \u9996\u5148\u8bfb\u53d6ELF\u7684\u5934\u90e8 readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0); // \u901a\u8fc7\u50a8\u5b58\u5728\u5934\u90e8\u7684\u5e7b\u6570\u5224\u65ad\u662f\u5426\u662f\u5408\u6cd5\u7684ELF\u6587\u4ef6 if (ELFHDR->e_magic != ELF_MAGIC) { goto bad; } struct proghdr *ph, *eph; // ELF\u5934\u90e8\u6709\u63cf\u8ff0ELF\u6587\u4ef6\u5e94\u52a0\u8f7d\u5230\u5185\u5b58\u4ec0\u4e48\u4f4d\u7f6e\u7684\u63cf\u8ff0\u8868\uff0c // \u5148\u5c06\u63cf\u8ff0\u8868\u7684\u5934\u5730\u5740\u5b58\u5728ph ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff); eph = ph + ELFHDR->e_phnum; // \u6309\u7167\u63cf\u8ff0\u8868\u5c06ELF\u6587\u4ef6\u4e2d\u6570\u636e\u8f7d\u5165\u5185\u5b58 for (; ph < eph; ph ++) { readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset); } // ELF\u6587\u4ef60x1000\u4f4d\u7f6e\u540e\u9762\u76840xd1ec\u6bd4\u7279\u88ab\u8f7d\u5165\u5185\u5b580x00100000 // ELF\u6587\u4ef60xf000\u4f4d\u7f6e\u540e\u9762\u76840x1d20\u6bd4\u7279\u88ab\u8f7d\u5165\u5185\u5b580x0010e000 // \u6839\u636eELF\u5934\u90e8\u50a8\u5b58\u7684\u5165\u53e3\u4fe1\u606f\uff0c\u627e\u5230\u5185\u6838\u7684\u5165\u53e3 ((void (*)(void))(ELFHDR->e_entry & 0xFFFFFF))(); bad: outw(0x8A00, 0x8A00); outw(0x8A00, 0x8E00); while (1); }","title":"\u7ec3\u4e604\uff1a\u5206\u6790bootloader\u52a0\u8f7dELF\u683c\u5f0f\u7684OS\u7684\u8fc7\u7a0b\u3002"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/5/","text":"\u7ec3\u4e605\uff1a\u5b9e\u73b0\u51fd\u6570\u8c03\u7528\u5806\u6808\u8ddf\u8e2a\u51fd\u6570 ss:ebp\u6307\u5411\u7684\u5806\u6808\u4f4d\u7f6e\u50a8\u5b58\u7740caller\u7684ebp\uff0c\u4ee5\u6b64\u4e3a\u7ebf\u7d22\u53ef\u4ee5\u5f97\u5230\u6240\u6709\u4f7f\u7528\u5806\u6808\u7684\u51fd\u6570ebp\u3002 ss:ebp+4\u6307\u5411caller\u8c03\u7528\u65f6\u7684eip\uff0css:ebp+8\u7b49\u662f\uff08\u53ef\u80fd\u7684\uff09\u53c2\u6570\u3002 \u8f93\u51fa\u4e2d\uff0c\u5806\u6808\u6700\u6df1\u4e00\u5c42\u4e3a ebp:0x00007bf8 eip:0x00007d68 \\ args:0x00000000 0x00000000 0x00000000 0x00007c4f <unknow>: -- 0x00007d67 -- \u5176\u5bf9\u5e94\u7684\u662f\u7b2c\u4e00\u4e2a\u4f7f\u7528\u5806\u6808\u7684\u51fd\u6570\uff0cbootmain.c\u4e2d\u7684bootmain\u3002 bootloader\u8bbe\u7f6e\u7684\u5806\u6808\u4ece0x7c00\u5f00\u59cb\uff0c\u4f7f\u7528\"call bootmain\"\u8f6c\u5165bootmain\u51fd\u6570\u3002 call\u6307\u4ee4\u538b\u6808\uff0c\u6240\u4ee5bootmain\u4e2debp\u4e3a0x7bf8\u3002","title":"5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/5/#5","text":"ss:ebp\u6307\u5411\u7684\u5806\u6808\u4f4d\u7f6e\u50a8\u5b58\u7740caller\u7684ebp\uff0c\u4ee5\u6b64\u4e3a\u7ebf\u7d22\u53ef\u4ee5\u5f97\u5230\u6240\u6709\u4f7f\u7528\u5806\u6808\u7684\u51fd\u6570ebp\u3002 ss:ebp+4\u6307\u5411caller\u8c03\u7528\u65f6\u7684eip\uff0css:ebp+8\u7b49\u662f\uff08\u53ef\u80fd\u7684\uff09\u53c2\u6570\u3002 \u8f93\u51fa\u4e2d\uff0c\u5806\u6808\u6700\u6df1\u4e00\u5c42\u4e3a ebp:0x00007bf8 eip:0x00007d68 \\ args:0x00000000 0x00000000 0x00000000 0x00007c4f <unknow>: -- 0x00007d67 -- \u5176\u5bf9\u5e94\u7684\u662f\u7b2c\u4e00\u4e2a\u4f7f\u7528\u5806\u6808\u7684\u51fd\u6570\uff0cbootmain.c\u4e2d\u7684bootmain\u3002 bootloader\u8bbe\u7f6e\u7684\u5806\u6808\u4ece0x7c00\u5f00\u59cb\uff0c\u4f7f\u7528\"call bootmain\"\u8f6c\u5165bootmain\u51fd\u6570\u3002 call\u6307\u4ee4\u538b\u6808\uff0c\u6240\u4ee5bootmain\u4e2debp\u4e3a0x7bf8\u3002","title":"\u7ec3\u4e605\uff1a\u5b9e\u73b0\u51fd\u6570\u8c03\u7528\u5806\u6808\u8ddf\u8e2a\u51fd\u6570"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/6/","text":"\u7ec3\u4e606\uff1a\u5b8c\u5584\u4e2d\u65ad\u521d\u59cb\u5316\u548c\u5904\u7406 \u95ee\u98986.1\uff1a\u4e2d\u65ad\u5411\u91cf\u8868\u4e2d\u4e00\u4e2a\u8868\u9879\u5360\u591a\u5c11\u5b57\u8282\uff1f\u5176\u4e2d\u54ea\u51e0\u4f4d\u4ee3\u8868\u4e2d\u65ad\u5904\u7406\u4ee3\u7801\u7684\u5165\u53e3\uff1f \u4e2d\u65ad\u5411\u91cf\u8868\u4e00\u4e2a\u8868\u9879\u5360\u75288\u5b57\u8282\uff0c\u5176\u4e2d2-3\u5b57\u8282\u662f\u6bb5\u9009\u62e9\u5b50\uff0c0-1\u5b57\u8282\u548c6-7\u5b57\u8282\u62fc\u6210\u4f4d\u79fb\uff0c \u4e24\u8005\u8054\u5408\u4fbf\u662f\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740\u3002 \u95ee\u98986.2\uff1a\u8bf7\u7f16\u7a0b\u5b8c\u5584kern/trap/trap.c\u4e2d\u5bf9\u4e2d\u65ad\u5411\u91cf\u8868\u8fdb\u884c\u521d\u59cb\u5316\u7684\u51fd\u6570idt_init\u3002 \u89c1\u4ee3\u7801 \u95ee\u98986.3\uff1a\u8bf7\u7f16\u7a0b\u5b8c\u5584trap.c\u4e2d\u7684\u4e2d\u65ad\u5904\u7406\u51fd\u6570trap\uff0c\u5728\u5bf9\u65f6\u949f\u4e2d\u65ad\u8fdb\u884c\u5904\u7406\u7684\u90e8\u5206\u586b\u5199trap\u51fd\u6570\u3002 \u89c1\u4ee3\u7801","title":"6"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/6/#6","text":"\u95ee\u98986.1\uff1a\u4e2d\u65ad\u5411\u91cf\u8868\u4e2d\u4e00\u4e2a\u8868\u9879\u5360\u591a\u5c11\u5b57\u8282\uff1f\u5176\u4e2d\u54ea\u51e0\u4f4d\u4ee3\u8868\u4e2d\u65ad\u5904\u7406\u4ee3\u7801\u7684\u5165\u53e3\uff1f \u4e2d\u65ad\u5411\u91cf\u8868\u4e00\u4e2a\u8868\u9879\u5360\u75288\u5b57\u8282\uff0c\u5176\u4e2d2-3\u5b57\u8282\u662f\u6bb5\u9009\u62e9\u5b50\uff0c0-1\u5b57\u8282\u548c6-7\u5b57\u8282\u62fc\u6210\u4f4d\u79fb\uff0c \u4e24\u8005\u8054\u5408\u4fbf\u662f\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740\u3002 \u95ee\u98986.2\uff1a\u8bf7\u7f16\u7a0b\u5b8c\u5584kern/trap/trap.c\u4e2d\u5bf9\u4e2d\u65ad\u5411\u91cf\u8868\u8fdb\u884c\u521d\u59cb\u5316\u7684\u51fd\u6570idt_init\u3002 \u89c1\u4ee3\u7801 \u95ee\u98986.3\uff1a\u8bf7\u7f16\u7a0b\u5b8c\u5584trap.c\u4e2d\u7684\u4e2d\u65ad\u5904\u7406\u51fd\u6570trap\uff0c\u5728\u5bf9\u65f6\u949f\u4e2d\u65ad\u8fdb\u884c\u5904\u7406\u7684\u90e8\u5206\u586b\u5199trap\u51fd\u6570\u3002 \u89c1\u4ee3\u7801","title":"\u7ec3\u4e606\uff1a\u5b8c\u5584\u4e2d\u65ad\u521d\u59cb\u5316\u548c\u5904\u7406"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/7/","text":"\u7ec3\u4e607 \u589e\u52a0syscall\u529f\u80fd\uff0c\u5373\u589e\u52a0\u4e00\u7528\u6237\u6001\u51fd\u6570\uff08\u53ef\u6267\u884c\u4e00\u7279\u5b9a\u7cfb\u7edf\u8c03\u7528\uff1a\u83b7\u5f97\u65f6\u949f\u8ba1\u6570\u503c\uff09\uff0c \u5f53\u5185\u6838\u521d\u59cb\u5b8c\u6bd5\u540e\uff0c\u53ef\u4ece\u5185\u6838\u6001\u8fd4\u56de\u5230\u7528\u6237\u6001\u7684\u51fd\u6570\uff0c\u800c\u7528\u6237\u6001\u7684\u51fd\u6570\u53c8\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u5f97\u5230\u5185\u6838\u6001\u7684\u670d\u52a1 \u5728idt_init\u4e2d\uff0c\u5c06\u7528\u6237\u6001\u8c03\u7528SWITCH_TOK\u4e2d\u65ad\u7684\u6743\u9650\u6253\u5f00\u3002 SETGATE(idt[T_SWITCH_TOK], 1, KERNEL_CS, __vectors[T_SWITCH_TOK], 3); \u5728trap_dispatch\u4e2d\uff0c\u5c06iret\u65f6\u4f1a\u4ece\u5806\u6808\u5f39\u51fa\u7684\u6bb5\u5bc4\u5b58\u5668\u8fdb\u884c\u4fee\u6539 \u5bf9TO User tf->tf_cs = USER_CS; tf->tf_ds = USER_DS; tf->tf_es = USER_DS; tf->tf_ss = USER_DS; \u5bf9TO Kernel tf->tf_cs = KERNEL_CS; tf->tf_ds = KERNEL_DS; tf->tf_es = KERNEL_DS; \u5728lab1_switch_to_user\u4e2d\uff0c\u8c03\u7528T_SWITCH_TOU\u4e2d\u65ad\u3002 \u6ce8\u610f\u4ece\u4e2d\u65ad\u8fd4\u56de\u65f6\uff0c\u4f1a\u591apop\u4e24\u4f4d\uff0c\u5e76\u7528\u8fd9\u4e24\u4f4d\u7684\u503c\u66f4\u65b0ss,sp\uff0c\u635f\u574f\u5806\u6808\u3002 \u6240\u4ee5\u8981\u5148\u628a\u6808\u538b\u4e24\u4f4d\uff0c\u5e76\u5728\u4ece\u4e2d\u65ad\u8fd4\u56de\u540e\u4fee\u590desp\u3002 asm volatile ( \"sub $0x8, %%esp \\n\" \"int %0 \\n\" \"movl %%ebp, %%esp\" : : \"i\"(T_SWITCH_TOU) ); \u5728lab1_switch_to_kernel\u4e2d\uff0c\u8c03\u7528T_SWITCH_TOK\u4e2d\u65ad\u3002 \u6ce8\u610f\u4ece\u4e2d\u65ad\u8fd4\u56de\u65f6\uff0cesp\u4ecd\u5728TSS\u6307\u793a\u7684\u5806\u6808\u4e2d\u3002\u6240\u4ee5\u8981\u5728\u4ece\u4e2d\u65ad\u8fd4\u56de\u540e\u4fee\u590desp\u3002 asm volatile ( \"int %0 \\n\" \"movl %%ebp, %%esp \\n\" : : \"i\"(T_SWITCH_TOK) ); \u4f46\u8fd9\u6837\u4e0d\u80fd\u6b63\u5e38\u8f93\u51fa\u6587\u672c\u3002\u6839\u636e\u63d0\u793a\uff0c\u5728trap_dispatch\u4e2d\u8f6cUser\u6001\u65f6\uff0c\u5c06\u8c03\u7528io\u6240\u9700\u6743\u9650\u964d\u4f4e\u3002 tf->tf_eflags |= 0x3000;","title":"7"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/7/#7","text":"\u589e\u52a0syscall\u529f\u80fd\uff0c\u5373\u589e\u52a0\u4e00\u7528\u6237\u6001\u51fd\u6570\uff08\u53ef\u6267\u884c\u4e00\u7279\u5b9a\u7cfb\u7edf\u8c03\u7528\uff1a\u83b7\u5f97\u65f6\u949f\u8ba1\u6570\u503c\uff09\uff0c \u5f53\u5185\u6838\u521d\u59cb\u5b8c\u6bd5\u540e\uff0c\u53ef\u4ece\u5185\u6838\u6001\u8fd4\u56de\u5230\u7528\u6237\u6001\u7684\u51fd\u6570\uff0c\u800c\u7528\u6237\u6001\u7684\u51fd\u6570\u53c8\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u5f97\u5230\u5185\u6838\u6001\u7684\u670d\u52a1 \u5728idt_init\u4e2d\uff0c\u5c06\u7528\u6237\u6001\u8c03\u7528SWITCH_TOK\u4e2d\u65ad\u7684\u6743\u9650\u6253\u5f00\u3002 SETGATE(idt[T_SWITCH_TOK], 1, KERNEL_CS, __vectors[T_SWITCH_TOK], 3); \u5728trap_dispatch\u4e2d\uff0c\u5c06iret\u65f6\u4f1a\u4ece\u5806\u6808\u5f39\u51fa\u7684\u6bb5\u5bc4\u5b58\u5668\u8fdb\u884c\u4fee\u6539 \u5bf9TO User tf->tf_cs = USER_CS; tf->tf_ds = USER_DS; tf->tf_es = USER_DS; tf->tf_ss = USER_DS; \u5bf9TO Kernel tf->tf_cs = KERNEL_CS; tf->tf_ds = KERNEL_DS; tf->tf_es = KERNEL_DS; \u5728lab1_switch_to_user\u4e2d\uff0c\u8c03\u7528T_SWITCH_TOU\u4e2d\u65ad\u3002 \u6ce8\u610f\u4ece\u4e2d\u65ad\u8fd4\u56de\u65f6\uff0c\u4f1a\u591apop\u4e24\u4f4d\uff0c\u5e76\u7528\u8fd9\u4e24\u4f4d\u7684\u503c\u66f4\u65b0ss,sp\uff0c\u635f\u574f\u5806\u6808\u3002 \u6240\u4ee5\u8981\u5148\u628a\u6808\u538b\u4e24\u4f4d\uff0c\u5e76\u5728\u4ece\u4e2d\u65ad\u8fd4\u56de\u540e\u4fee\u590desp\u3002 asm volatile ( \"sub $0x8, %%esp \\n\" \"int %0 \\n\" \"movl %%ebp, %%esp\" : : \"i\"(T_SWITCH_TOU) ); \u5728lab1_switch_to_kernel\u4e2d\uff0c\u8c03\u7528T_SWITCH_TOK\u4e2d\u65ad\u3002 \u6ce8\u610f\u4ece\u4e2d\u65ad\u8fd4\u56de\u65f6\uff0cesp\u4ecd\u5728TSS\u6307\u793a\u7684\u5806\u6808\u4e2d\u3002\u6240\u4ee5\u8981\u5728\u4ece\u4e2d\u65ad\u8fd4\u56de\u540e\u4fee\u590desp\u3002 asm volatile ( \"int %0 \\n\" \"movl %%ebp, %%esp \\n\" : : \"i\"(T_SWITCH_TOK) ); \u4f46\u8fd9\u6837\u4e0d\u80fd\u6b63\u5e38\u8f93\u51fa\u6587\u672c\u3002\u6839\u636e\u63d0\u793a\uff0c\u5728trap_dispatch\u4e2d\u8f6cUser\u6001\u65f6\uff0c\u5c06\u8c03\u7528io\u6240\u9700\u6743\u9650\u964d\u4f4e\u3002 tf->tf_eflags |= 0x3000;","title":"\u7ec3\u4e607"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/data_struct/","text":"\u6570\u636e\u7ed3\u6784 \u4e2d\u65ad\u7ba1\u7406 /* registers as pushed by pushal */ struct pushregs { uint32_t reg_edi; uint32_t reg_esi; uint32_t reg_ebp; uint32_t reg_oesp; /* Useless */ uint32_t reg_ebx; uint32_t reg_edx; uint32_t reg_ecx; uint32_t reg_eax; }; struct trapframe { struct pushregs tf_regs; uint16_t tf_gs; uint16_t tf_padding0; uint16_t tf_fs; uint16_t tf_padding1; uint16_t tf_es; uint16_t tf_padding2; uint16_t tf_ds; uint16_t tf_padding3; uint32_t tf_trapno; /* below here defined by x86 hardware */ uint32_t tf_err; uintptr_t tf_eip; uint16_t tf_cs; uint16_t tf_padding4; uint32_t tf_eflags; /* below here only when crossing rings, such as from user to kernel */ uintptr_t tf_esp; uint16_t tf_ss; uint16_t tf_padding5; } __attribute__((packed));","title":"Data struct"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/data_struct/#_1","text":"\u4e2d\u65ad\u7ba1\u7406 /* registers as pushed by pushal */ struct pushregs { uint32_t reg_edi; uint32_t reg_esi; uint32_t reg_ebp; uint32_t reg_oesp; /* Useless */ uint32_t reg_ebx; uint32_t reg_edx; uint32_t reg_ecx; uint32_t reg_eax; }; struct trapframe { struct pushregs tf_regs; uint16_t tf_gs; uint16_t tf_padding0; uint16_t tf_fs; uint16_t tf_padding1; uint16_t tf_es; uint16_t tf_padding2; uint16_t tf_ds; uint16_t tf_padding3; uint32_t tf_trapno; /* below here defined by x86 hardware */ uint32_t tf_err; uintptr_t tf_eip; uint16_t tf_cs; uint16_t tf_padding4; uint32_t tf_eflags; /* below here only when crossing rings, such as from user to kernel */ uintptr_t tf_esp; uint16_t tf_ss; uint16_t tf_padding5; } __attribute__((packed));","title":"\u6570\u636e\u7ed3\u6784"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/my_note/","text":"\u7b14\u8bb0 CPU\u4e0a\u7535 \u4e3a\u4fdd\u8bc1\u4e86\u5411\u4e0b\u517c\u5bb9\u4e0e\u7269\u7406\u5730\u5740\u7a7a\u95f4\u7684\u8fde\u7eed\u6027\uff0cIntel\u8ba94GB\u5730\u5740\u7a7a\u95f4\u7684\u6700\u9ad8\u4e00\u4e2a64KB\u7684\u5185\u5bb9\u7b49\u540c\u4e8e1MB\u5730\u5740\u7a7a\u95f4\u7684\u6700\u9ad8\u4e00\u4e2a64K\u7684\u5185\u5bb9\uff0c\u4ece\u800c\u4f7f\u5f97\u6267\u884c\u4e86\u957f\u8df3\u8f6c\u6307\u4ee4\u540e\uff0c\u5176\u5b9e\u662f\u56de\u5230\u4e86\u65e9\u671f\u76848086 CPU\u521d\u59cb\u5316\u63a7\u5236\u6d41\u3002 \u5bfb\u5740\u65b9\u5f0f\u4e3a\uff1aCS.Base+EIP CS=0xf000\uff0cCS.Base=0xffff0000\uff0cEIP=0xfff0 \u7b2c\u4e00\u6761\u6307\u4ee4\uff1a0xfffffff0 JMP F000:E05B CS.Base->0x000f0000 \u7b2c\u4e8c\u6761\u6307\u4ee4\uff1a0x000fe05b BIOS \u6307\u4ee4 BIOS \u786c\u4ef6\u81ea\u68c0\u548c\u521d\u59cb\u5316 \u9009\u62e9\u4e00\u4e2a\u542f\u52a8\u8bbe\u5907\uff08\u4f8b\u5982\u8f6f\u76d8\u3001\u786c\u76d8\u3001\u5149\u76d8\u7b49\uff09 \u8bfb\u53d6\u8be5\u8bbe\u5907\u7684\u7b2c\u4e00\u6247\u533a \u5373\u4e3b\u5f15\u5bfc\u6247\u533a\u6216\u542f\u52a8\u6247\u533a \u5373\u4e3b\u5f15\u5bfc\u6247\u533a\u6216\u542f\u52a8\u6247\u533a \u52300x7c00\u5904 \u8df3\u8f6c\u81f30x7c00\u5904\uff0c\u6267\u884cbootloader bootloader \u5207\u6362\u5230\u4fdd\u62a4\u6a21\u5f0f\uff0c\u542f\u7528\u5206\u6bb5\u673a\u5236 \u901a\u8fc7\u952e\u76d8\u63a7\u5236\u56688042\uff0c\u4f7f\u80fdA20\u63a7\u5236\u7ebf A20\u63a7\u5236\u7ebf\uff080\u65f6\uff09\u662f\u4e3a\u4e86\u5728\u5b9e\u6a21\u5f0f\u4e0b\u6a21\u4eff\u65e9\u671f8086\u5bfb\u5740\u7684\u56de\u7ed5\u7279\u5f81\uff0c\u4e3a\u8bbf\u95ee\u5168\u90e8\u5185\u5b58\u9700\u4f7f\u5176\u4e3a1\u3002 \u52a0\u8f7d\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\uff0c\u5c06CR0\u7b2c0\u4f4d\u7f6e1\uff0c\u66f4\u65b0CS \u66f4\u65b0CS\u4f7f\u7528\u957f\u8df3\u8f6c\u6307\u4ee4 \u8bfb\u78c1\u76d8\u4e2dELF\u6267\u884c\u6587\u4ef6\u683c\u5f0f\u7684kernel\u5230\u5185\u5b58\u6307\u5b9a\u7684\u5185\u5b58\u8d77\u59cb\u5730\u5740\u53bb\uff08ELFHDR=0x10000\uff09\uff0ckernel\u7684\u8d77\u59cb\u5730\u5740\u662f\u5728\u786c\u76d8\u7b2c1\u6247\u533a\u3002 \u628a\u63a7\u5236\u6743\u4ea4\u7ed9ucore\u64cd\u4f5c\u7cfb\u7edf \u4e3b\u5f15\u5bfc\u6247\u533a\u7684\u5927\u5c0f\u4e3a512B\uff0c\u542f\u52a8\u4ee3\u7801\u90e8\u5206\u4e0d\u8d85\u8fc7446B\uff0c obj/bootblock.out \u662f\u79fb\u9664\u6240\u6709\u591a\u4f59\u4fe1\u606f\u7684\u542f\u52a8\u4ee3\u7801\u4e3a442B\u3002 \u5168\u5c40\u63cf\u8ff0\u7b26\u8868\u8d77\u59cb\u5730\u5740\u4fdd\u5b58\u5728\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\u5bc4\u5b58\u5668GDTR\u4e2d\u3002GDTR\u957f48\u4f4d\uff0c\u5176\u4e2d\u9ad832\u4f4d\u4e3a\u57fa\u5730\u5740\uff0c\u4f4e16\u4f4d\u4e3a\u6bb5\u754c\u9650\u3002\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\u4e2d\u7b2c\u4e00\u4e2a\u6bb5\u63cf\u8ff0\u7b26\u8bbe\u5b9a\u4e3a\u7a7a\u6bb5\u63cf\u8ff0\u7b26\u3002GDTR\u4e2d\u7684\u6bb5\u754c\u9650\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u3002\u5bf9\u4e8e\u542b\u6709N\u4e2a\u63cf\u8ff0\u7b26\u7684\u63cf\u8ff0\u7b26\u8868\u7684\u6bb5\u754c\u9650\u901a\u5e38\u53ef\u8bbe\u4e3a8*N-1\uff0c\u5373\u6700\u591a\u53ea\u6709pow(2, 16)/8=8192\u4e2a\u6bb5\uff0c\u6bb5\u9009\u62e9\u5b50\u7684\u7d22\u5f15\u4f4d\u6570\u4e3alog2(8192)=13\u4f4d\u3002 \u8bbf\u95ee\u4e00\u4e2a\u6bb5\u7279\u6743\u7ea7\u68c0\u6d4b\uff1amax(CPL, RPL)<=DPL\uff0c\u4f46\u5806\u6808\u5bc4\u5b58\u5668\u8981\u6c42CPL=RPL=DPL\u3002 \u64cd\u4f5c\u7cfb\u7edf\u521d\u59cb\u5316 - \u521d\u59cb\u5316\u7ec8\u7aef\uff1b - \u663e\u793a\u5b57\u7b26\u4e32\uff1b - \u663e\u793a\u5806\u6808\u4e2d\u7684\u591a\u5c42\u51fd\u6570\u8c03\u7528\u5173\u7cfb\uff1b - \u66f4\u65b0gdt\uff1b - \u521d\u59cb\u5316\u4e2d\u65ad\u63a7\u5236\u5668\uff0c\u8bbe\u7f6e\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\uff0c\u521d\u59cb\u5316\u65f6\u949f\u4e2d\u65ad\uff0c\u4f7f\u80fd\u6574\u4e2a\u7cfb\u7edf\u7684\u4e2d\u65ad\u673a\u5236\uff1b - \u6267\u884cwhile\uff081\uff09\u6b7b\u5faa\u73af\u3002 gdt_init() \u4e2d\u91cd\u65b0\u5212\u5206\u4e86\u6808\u7a7a\u95f4\uff0ckern\u7684ess\u548cesp\u5b9a\u4e49\u5728TTS\u4e2d\uff0c\u5927\u5c0f\u4e3a1KB\u3002 \u5171256\u4e2a\u4e2d\u65ad\u5411\u91cf\uff0c[32, 255]\u53ef\u7531\u64cd\u4f5c\u7cfb\u7edf\u5b9a\u4e49\u3002\u5176\u5730\u5740\u4fdd\u5b58\u5728 __vectors \u4e2d\uff0c\u9700\u8981\u5c06\u5176\u52a0\u8f7d\u5230IDT\u4e2d\u53bb\uff0cIDT\u5305\u542b3\u79cd\u7c7b\u578b\u7684Descriptor\uff1a Task-gate descriptor \uff08\u8fd9\u91cc\u6ca1\u6709\u4f7f\u7528\uff09 Interrupt-gate descriptor \uff08\u4e2d\u65ad\u65b9\u5f0f\u7528\u5230\uff0cInterrupt\u4f1a\u88abCPU\u81ea\u52a8\u7981\u6b62\uff09 Trap-gate descriptor\uff08\u7cfb\u7edf\u8c03\u7528\u7528\u5230\uff0cCPU\u4e0d\u6539\u53d8\u4e2d\u65ad\uff09 \u8bbf\u95ee\u4e00\u4e2a\u95e8\u7279\u6743\u7ea7\u68c0\u6d4b\uff1aCPL<=DPL\uff08\u95e8\uff09\u4e14CPL>=DPL\uff08\u6bb5\uff09\uff0cCPL>DPL\uff08\u6bb5\uff09\u6ee1\u8db3\u4e86\u7528\u6237\u6001\u5230\u7cfb\u7edf\u6001\u7684\u8df3\u8f6c\u3002\u6240\u6709IDT\u9879\u4e2d\u53ea\u6709 idt[T_SWITCH_TOK=121] \uff08\u5bf9\u5e94\u7cfb\u7edf\u8c03\u7528\uff09\u4e2d\u7684DPL\u4e3a DPL_USER=3 \uff0c\u5176\u4ed6\u7684\u4e3a DPL_KERNEL=0 \u3002\u800c\u95e8\u4e2d\u9009\u62e9\u5b50\u4f4d\u6570\u4e3a16\u4f4d\uff0c\u5b9e\u9645\u53ea\u7528\u4e86\u9ad813\u4f4d\uff0c\u4f4e3\u4f4d\u4e3a0\u3002 \u4e2d\u65ad\u5904\u7406\u65f6\uff1a - \u7531\u786c\u4ef6\u4fdd\u5b58\u5b8c\u5bf9\u5e94\u7684\u503c\u540e\uff0c\u591a\u6570\u4e2d\u65ad\u5747\u538b\u51650\u4ee3\u8868error_code\uff0c\u4ee5\u53ca\u76f8\u5e94\u7684\u4e2d\u65ad\u53f7\uff0c\u67d0\u4e9b\u4e2d\u65ad\u7684error_code\u7531\u786c\u4ef6\u538b\u5165\uff0c\u5982 vector8 \u5230 vector14 \u3002 - \u670d\u52a1\u4f8b\u7a0b\u53c2\u6570\u4fdd\u5b58\u5728 trapframe \u4e2d\uff0c\u5176\u4e2d pushal \u538b\u6808\u7684\u987a\u5e8f\u4e3a\uff1aeax\uff0cecx\uff0cedx\uff0cebx\uff0coesp\uff0cebp\uff0cebp\uff0cesi\uff0cedi \u9057\u7559\u95ee\u9898 // boot/bootmain.c // \u4e3a\u4ec0\u4e48\u8bfb8\u4e2a\u6247\u533a 88: readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0); // kern/debug/kdebug.c // \u4e3a\u4ec0\u4e48\u8981\u5148\u8bfbebp\uff0c\u5426\u5219print_debugifo\u4f1a\u51fa\u9519 305: uint32_t ebp = read_ebp(), eip = read_eip();","title":"My note"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab1/my_note/#_1","text":"CPU\u4e0a\u7535 \u4e3a\u4fdd\u8bc1\u4e86\u5411\u4e0b\u517c\u5bb9\u4e0e\u7269\u7406\u5730\u5740\u7a7a\u95f4\u7684\u8fde\u7eed\u6027\uff0cIntel\u8ba94GB\u5730\u5740\u7a7a\u95f4\u7684\u6700\u9ad8\u4e00\u4e2a64KB\u7684\u5185\u5bb9\u7b49\u540c\u4e8e1MB\u5730\u5740\u7a7a\u95f4\u7684\u6700\u9ad8\u4e00\u4e2a64K\u7684\u5185\u5bb9\uff0c\u4ece\u800c\u4f7f\u5f97\u6267\u884c\u4e86\u957f\u8df3\u8f6c\u6307\u4ee4\u540e\uff0c\u5176\u5b9e\u662f\u56de\u5230\u4e86\u65e9\u671f\u76848086 CPU\u521d\u59cb\u5316\u63a7\u5236\u6d41\u3002 \u5bfb\u5740\u65b9\u5f0f\u4e3a\uff1aCS.Base+EIP CS=0xf000\uff0cCS.Base=0xffff0000\uff0cEIP=0xfff0 \u7b2c\u4e00\u6761\u6307\u4ee4\uff1a0xfffffff0 JMP F000:E05B CS.Base->0x000f0000 \u7b2c\u4e8c\u6761\u6307\u4ee4\uff1a0x000fe05b BIOS \u6307\u4ee4 BIOS \u786c\u4ef6\u81ea\u68c0\u548c\u521d\u59cb\u5316 \u9009\u62e9\u4e00\u4e2a\u542f\u52a8\u8bbe\u5907\uff08\u4f8b\u5982\u8f6f\u76d8\u3001\u786c\u76d8\u3001\u5149\u76d8\u7b49\uff09 \u8bfb\u53d6\u8be5\u8bbe\u5907\u7684\u7b2c\u4e00\u6247\u533a \u5373\u4e3b\u5f15\u5bfc\u6247\u533a\u6216\u542f\u52a8\u6247\u533a \u5373\u4e3b\u5f15\u5bfc\u6247\u533a\u6216\u542f\u52a8\u6247\u533a \u52300x7c00\u5904 \u8df3\u8f6c\u81f30x7c00\u5904\uff0c\u6267\u884cbootloader bootloader \u5207\u6362\u5230\u4fdd\u62a4\u6a21\u5f0f\uff0c\u542f\u7528\u5206\u6bb5\u673a\u5236 \u901a\u8fc7\u952e\u76d8\u63a7\u5236\u56688042\uff0c\u4f7f\u80fdA20\u63a7\u5236\u7ebf A20\u63a7\u5236\u7ebf\uff080\u65f6\uff09\u662f\u4e3a\u4e86\u5728\u5b9e\u6a21\u5f0f\u4e0b\u6a21\u4eff\u65e9\u671f8086\u5bfb\u5740\u7684\u56de\u7ed5\u7279\u5f81\uff0c\u4e3a\u8bbf\u95ee\u5168\u90e8\u5185\u5b58\u9700\u4f7f\u5176\u4e3a1\u3002 \u52a0\u8f7d\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\uff0c\u5c06CR0\u7b2c0\u4f4d\u7f6e1\uff0c\u66f4\u65b0CS \u66f4\u65b0CS\u4f7f\u7528\u957f\u8df3\u8f6c\u6307\u4ee4 \u8bfb\u78c1\u76d8\u4e2dELF\u6267\u884c\u6587\u4ef6\u683c\u5f0f\u7684kernel\u5230\u5185\u5b58\u6307\u5b9a\u7684\u5185\u5b58\u8d77\u59cb\u5730\u5740\u53bb\uff08ELFHDR=0x10000\uff09\uff0ckernel\u7684\u8d77\u59cb\u5730\u5740\u662f\u5728\u786c\u76d8\u7b2c1\u6247\u533a\u3002 \u628a\u63a7\u5236\u6743\u4ea4\u7ed9ucore\u64cd\u4f5c\u7cfb\u7edf \u4e3b\u5f15\u5bfc\u6247\u533a\u7684\u5927\u5c0f\u4e3a512B\uff0c\u542f\u52a8\u4ee3\u7801\u90e8\u5206\u4e0d\u8d85\u8fc7446B\uff0c obj/bootblock.out \u662f\u79fb\u9664\u6240\u6709\u591a\u4f59\u4fe1\u606f\u7684\u542f\u52a8\u4ee3\u7801\u4e3a442B\u3002 \u5168\u5c40\u63cf\u8ff0\u7b26\u8868\u8d77\u59cb\u5730\u5740\u4fdd\u5b58\u5728\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\u5bc4\u5b58\u5668GDTR\u4e2d\u3002GDTR\u957f48\u4f4d\uff0c\u5176\u4e2d\u9ad832\u4f4d\u4e3a\u57fa\u5730\u5740\uff0c\u4f4e16\u4f4d\u4e3a\u6bb5\u754c\u9650\u3002\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\u4e2d\u7b2c\u4e00\u4e2a\u6bb5\u63cf\u8ff0\u7b26\u8bbe\u5b9a\u4e3a\u7a7a\u6bb5\u63cf\u8ff0\u7b26\u3002GDTR\u4e2d\u7684\u6bb5\u754c\u9650\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u3002\u5bf9\u4e8e\u542b\u6709N\u4e2a\u63cf\u8ff0\u7b26\u7684\u63cf\u8ff0\u7b26\u8868\u7684\u6bb5\u754c\u9650\u901a\u5e38\u53ef\u8bbe\u4e3a8*N-1\uff0c\u5373\u6700\u591a\u53ea\u6709pow(2, 16)/8=8192\u4e2a\u6bb5\uff0c\u6bb5\u9009\u62e9\u5b50\u7684\u7d22\u5f15\u4f4d\u6570\u4e3alog2(8192)=13\u4f4d\u3002 \u8bbf\u95ee\u4e00\u4e2a\u6bb5\u7279\u6743\u7ea7\u68c0\u6d4b\uff1amax(CPL, RPL)<=DPL\uff0c\u4f46\u5806\u6808\u5bc4\u5b58\u5668\u8981\u6c42CPL=RPL=DPL\u3002 \u64cd\u4f5c\u7cfb\u7edf\u521d\u59cb\u5316 - \u521d\u59cb\u5316\u7ec8\u7aef\uff1b - \u663e\u793a\u5b57\u7b26\u4e32\uff1b - \u663e\u793a\u5806\u6808\u4e2d\u7684\u591a\u5c42\u51fd\u6570\u8c03\u7528\u5173\u7cfb\uff1b - \u66f4\u65b0gdt\uff1b - \u521d\u59cb\u5316\u4e2d\u65ad\u63a7\u5236\u5668\uff0c\u8bbe\u7f6e\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\uff0c\u521d\u59cb\u5316\u65f6\u949f\u4e2d\u65ad\uff0c\u4f7f\u80fd\u6574\u4e2a\u7cfb\u7edf\u7684\u4e2d\u65ad\u673a\u5236\uff1b - \u6267\u884cwhile\uff081\uff09\u6b7b\u5faa\u73af\u3002 gdt_init() \u4e2d\u91cd\u65b0\u5212\u5206\u4e86\u6808\u7a7a\u95f4\uff0ckern\u7684ess\u548cesp\u5b9a\u4e49\u5728TTS\u4e2d\uff0c\u5927\u5c0f\u4e3a1KB\u3002 \u5171256\u4e2a\u4e2d\u65ad\u5411\u91cf\uff0c[32, 255]\u53ef\u7531\u64cd\u4f5c\u7cfb\u7edf\u5b9a\u4e49\u3002\u5176\u5730\u5740\u4fdd\u5b58\u5728 __vectors \u4e2d\uff0c\u9700\u8981\u5c06\u5176\u52a0\u8f7d\u5230IDT\u4e2d\u53bb\uff0cIDT\u5305\u542b3\u79cd\u7c7b\u578b\u7684Descriptor\uff1a Task-gate descriptor \uff08\u8fd9\u91cc\u6ca1\u6709\u4f7f\u7528\uff09 Interrupt-gate descriptor \uff08\u4e2d\u65ad\u65b9\u5f0f\u7528\u5230\uff0cInterrupt\u4f1a\u88abCPU\u81ea\u52a8\u7981\u6b62\uff09 Trap-gate descriptor\uff08\u7cfb\u7edf\u8c03\u7528\u7528\u5230\uff0cCPU\u4e0d\u6539\u53d8\u4e2d\u65ad\uff09 \u8bbf\u95ee\u4e00\u4e2a\u95e8\u7279\u6743\u7ea7\u68c0\u6d4b\uff1aCPL<=DPL\uff08\u95e8\uff09\u4e14CPL>=DPL\uff08\u6bb5\uff09\uff0cCPL>DPL\uff08\u6bb5\uff09\u6ee1\u8db3\u4e86\u7528\u6237\u6001\u5230\u7cfb\u7edf\u6001\u7684\u8df3\u8f6c\u3002\u6240\u6709IDT\u9879\u4e2d\u53ea\u6709 idt[T_SWITCH_TOK=121] \uff08\u5bf9\u5e94\u7cfb\u7edf\u8c03\u7528\uff09\u4e2d\u7684DPL\u4e3a DPL_USER=3 \uff0c\u5176\u4ed6\u7684\u4e3a DPL_KERNEL=0 \u3002\u800c\u95e8\u4e2d\u9009\u62e9\u5b50\u4f4d\u6570\u4e3a16\u4f4d\uff0c\u5b9e\u9645\u53ea\u7528\u4e86\u9ad813\u4f4d\uff0c\u4f4e3\u4f4d\u4e3a0\u3002 \u4e2d\u65ad\u5904\u7406\u65f6\uff1a - \u7531\u786c\u4ef6\u4fdd\u5b58\u5b8c\u5bf9\u5e94\u7684\u503c\u540e\uff0c\u591a\u6570\u4e2d\u65ad\u5747\u538b\u51650\u4ee3\u8868error_code\uff0c\u4ee5\u53ca\u76f8\u5e94\u7684\u4e2d\u65ad\u53f7\uff0c\u67d0\u4e9b\u4e2d\u65ad\u7684error_code\u7531\u786c\u4ef6\u538b\u5165\uff0c\u5982 vector8 \u5230 vector14 \u3002 - \u670d\u52a1\u4f8b\u7a0b\u53c2\u6570\u4fdd\u5b58\u5728 trapframe \u4e2d\uff0c\u5176\u4e2d pushal \u538b\u6808\u7684\u987a\u5e8f\u4e3a\uff1aeax\uff0cecx\uff0cedx\uff0cebx\uff0coesp\uff0cebp\uff0cebp\uff0cesi\uff0cedi \u9057\u7559\u95ee\u9898 // boot/bootmain.c // \u4e3a\u4ec0\u4e48\u8bfb8\u4e2a\u6247\u533a 88: readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0); // kern/debug/kdebug.c // \u4e3a\u4ec0\u4e48\u8981\u5148\u8bfbebp\uff0c\u5426\u5219print_debugifo\u4f1a\u51fa\u9519 305: uint32_t ebp = read_ebp(), eip = read_eip();","title":"\u7b14\u8bb0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab2/1/","text":"\u7ec3\u4e601\uff1a\u5b9e\u73b0first-fit\u8fde\u7eed\u7269\u7406\u5185\u5b58\u5206\u914d\u7b97\u6cd5 \u4fee\u6539default_pmm.c\u4e2ddefault_alloc_pages\u51fd\u6570\u548cdefault_free_pages\u51fd\u6570\uff0c\u5b9e\u73b0first_fit\u5185\u5b58\u5206\u914d\u7b97\u6cd5\u3002 \u5b9e\u73b0\u4e2d\u6240\u7528\u5230\u7684\u6570\u636e\u7ed3\u6784\u4e3a\u53cc\u5411\u94fe\u8868\uff0c\u91c7\u7528\u5b9e\u9a8c\u6307\u5bfc\u4e66\u4e2d\u4ecb\u7ecd\u7684\u65b9\u6cd5\uff0c\u5728\u4e00\u5757\u8fde\u7eed\u7684\u9875\u7a7a\u95f4\u5185\uff0c\u4f7f\u7528\u5730\u5740\u6700\u5c0f\u7684\u4e00\u9875\uff08Head Page\uff09\u8bb0\u5f55\u8fd9\u5757\u5185\u5b58\u5730\u5740\u7684\u5927\u5c0f\uff0c\u5e76\u901a\u8fc7\u6210\u5458\u53d8\u91cfpage_link\u6765\u7ef4\u62a4\u94fe\u8868\u7ed3\u6784\u3002\u5177\u4f53\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a static struct Page * default_alloc_pages(size_t n) { assert(n > 0); if (n > nr_free) { return NULL; } struct Page *page = NULL; list_entry_t *le = &free_list; while ((le = list_next(le)) != &free_list) { struct Page *p = le2page(le, page_link); if (p->property >= n) { page = p; break; } } //\u5c06\u5269\u4f59\u7a7a\u95f2\u533a\u57df\u7531\u6dfb\u52a0\u5230\u94fe\u8868\u5934\u6539\u81f3\u6309\u5730\u5740\u6392\u5e8f\u7684\u4f4d\u7f6e if (page != NULL) { struct Page *p = page; if (page->property > n) { p = page + n; p->property = page->property - n; //Page.flags\u53ea\u5728\u5934\u4e00\u9875\u6709\u7528\uff0c\u5176\u4f59\u7a7a\u95f2\u9875\u5168\u4e3a0 SetPageProperty(p); page->property = n; list_add(&page->page_link, &(p->page_link)); } list_del(&(page->page_link)); nr_free -= n; } return page; } \u5206\u914d\u5185\u5b58\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u5224\u65ad\u7a7a\u95f2\u5730\u5740\u7a7a\u95f4\u662f\u5426\u5927\u4e8e\u6240\u9700\u7a7a\u95f4 \u4ecefree_list\u5f00\u59cb\uff0c\u904d\u5386\u94fe\u8868\uff0c\u76f4\u5230\u627e\u5230\u7b2c\u4e00\u5757\u4e0d\u5c0f\u4e8e\u6240\u9700\u7a7a\u95f4\u5927\u5c0f\u7684\u5185\u5b58\u5757 \u5206\u914d\u8fde\u7eed\u7684n\u9875\uff0c\u4fee\u6539\u6807\u5fd7\u4f4d \u4ece\u94fe\u8868\u4e2d\u5220\u9664\u6b64\u5185\u5b58\u5757\uff0c\u5982\u679c\u6709\u5269\u4f59\u7684\u5c0f\u7684\u5185\u5b58\u5757\uff0c\u91cd\u65b0\u63d2\u5165\u94fe\u8868 \u91ca\u653e\u5185\u5b58\u7684\u51fd\u6570\u5b9e\u73b0\u4e3a\uff1a static void default_free_pages(struct Page *base, size_t n) { assert(n > 0); struct Page *p = base; for (; p != base + n; p ++) { //\u91ca\u653e\u533a\u57df\u4e0d\u662f\u64cd\u4f5c\u7cfb\u7edf\u7a7a\u95f4\u4e14\u4e0d\u542b\u7a7a\u95f2\u533a\u57df\u7684\u5934\u9875 assert(!PageReserved(p) && !PageProperty(p)); p->flags = p->property = 0; set_page_ref(p, 0); } base->property = n; SetPageProperty(base); while (le != &free_list) { p = le2page(le, page_link); le = list_next(le); // \u5bfb\u627e\u53ef\u4ee5\u5408\u5e76\u7684\u7a7a\u95f4 if (base + base->property == p) { base->property += p->property; ClearPageProperty(p); list_del(&(p->page_link)); //\u7531\u4e8e\u662ffirst-fit\u7a7a\u95f2\u5757\u6309\u5730\u5740\u6392\u5e8f\uff0c\u627e\u5230\u4e86\u53ef\u4ee5break\u8df3\u51fa\u5faa\u73af break; } else if (p + p->property == base) { p->property += base->property; ClearPageProperty(base); base = p; list_del(&(p->page_link)); } } nr_free += n; le = list_next(&free_list); // \u63d2\u5165\u7a7a\u95f2\u94fe\u8868 while (le != &free_list) { p = le2page(le, page_link); if (base + base->property <= p) { assert(base + base->property != p); break; } le = list_next(le); } list_add_before(le, &(base->page_link)); } \u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u4fee\u6539\u91ca\u653e\u9875\u7684\u6807\u5fd7\u4f4d \u627e\u5230\u94fe\u8868\u4e2d\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u5e76\u63d2\u5165 \u5224\u65ad\u6b64\u5757\u7a7a\u4f59\u7a7a\u95f4\u80fd\u5426\u4e0e\u524d\u540e\u7a7a\u4f59\u7a7a\u95f4\u5408\u5e76\uff0c\u5982\u679c\u53ef\u4ee5\u5c06\u5176\u5408\u5e76 \u95ee\u98981.1\uff1a \u4f60\u7684first fit\u7b97\u6cd5\u662f\u5426\u6709\u8fdb\u4e00\u6b65\u7684\u6539\u8fdb\u7a7a\u95f4 \u6709\uff0c\u53ef\u4ee5\u91c7\u7528\u5e73\u8861\u6811\u7684\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u7a7a\u95f2\u5730\u5740\u7a7a\u95f4\uff0c\u8fd9\u6837\u5728\u5206\u914d\u548c\u56de\u6536\u7a7a\u95f4\u65f6\uff0c\u67e5\u627e\u5185\u5b58\u7684\u64cd\u4f5c\u53ef\u4ee5\u66f4\u5feb\u3002","title":"1"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab2/1/#1first-fit","text":"\u4fee\u6539default_pmm.c\u4e2ddefault_alloc_pages\u51fd\u6570\u548cdefault_free_pages\u51fd\u6570\uff0c\u5b9e\u73b0first_fit\u5185\u5b58\u5206\u914d\u7b97\u6cd5\u3002 \u5b9e\u73b0\u4e2d\u6240\u7528\u5230\u7684\u6570\u636e\u7ed3\u6784\u4e3a\u53cc\u5411\u94fe\u8868\uff0c\u91c7\u7528\u5b9e\u9a8c\u6307\u5bfc\u4e66\u4e2d\u4ecb\u7ecd\u7684\u65b9\u6cd5\uff0c\u5728\u4e00\u5757\u8fde\u7eed\u7684\u9875\u7a7a\u95f4\u5185\uff0c\u4f7f\u7528\u5730\u5740\u6700\u5c0f\u7684\u4e00\u9875\uff08Head Page\uff09\u8bb0\u5f55\u8fd9\u5757\u5185\u5b58\u5730\u5740\u7684\u5927\u5c0f\uff0c\u5e76\u901a\u8fc7\u6210\u5458\u53d8\u91cfpage_link\u6765\u7ef4\u62a4\u94fe\u8868\u7ed3\u6784\u3002\u5177\u4f53\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a static struct Page * default_alloc_pages(size_t n) { assert(n > 0); if (n > nr_free) { return NULL; } struct Page *page = NULL; list_entry_t *le = &free_list; while ((le = list_next(le)) != &free_list) { struct Page *p = le2page(le, page_link); if (p->property >= n) { page = p; break; } } //\u5c06\u5269\u4f59\u7a7a\u95f2\u533a\u57df\u7531\u6dfb\u52a0\u5230\u94fe\u8868\u5934\u6539\u81f3\u6309\u5730\u5740\u6392\u5e8f\u7684\u4f4d\u7f6e if (page != NULL) { struct Page *p = page; if (page->property > n) { p = page + n; p->property = page->property - n; //Page.flags\u53ea\u5728\u5934\u4e00\u9875\u6709\u7528\uff0c\u5176\u4f59\u7a7a\u95f2\u9875\u5168\u4e3a0 SetPageProperty(p); page->property = n; list_add(&page->page_link, &(p->page_link)); } list_del(&(page->page_link)); nr_free -= n; } return page; } \u5206\u914d\u5185\u5b58\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u5224\u65ad\u7a7a\u95f2\u5730\u5740\u7a7a\u95f4\u662f\u5426\u5927\u4e8e\u6240\u9700\u7a7a\u95f4 \u4ecefree_list\u5f00\u59cb\uff0c\u904d\u5386\u94fe\u8868\uff0c\u76f4\u5230\u627e\u5230\u7b2c\u4e00\u5757\u4e0d\u5c0f\u4e8e\u6240\u9700\u7a7a\u95f4\u5927\u5c0f\u7684\u5185\u5b58\u5757 \u5206\u914d\u8fde\u7eed\u7684n\u9875\uff0c\u4fee\u6539\u6807\u5fd7\u4f4d \u4ece\u94fe\u8868\u4e2d\u5220\u9664\u6b64\u5185\u5b58\u5757\uff0c\u5982\u679c\u6709\u5269\u4f59\u7684\u5c0f\u7684\u5185\u5b58\u5757\uff0c\u91cd\u65b0\u63d2\u5165\u94fe\u8868 \u91ca\u653e\u5185\u5b58\u7684\u51fd\u6570\u5b9e\u73b0\u4e3a\uff1a static void default_free_pages(struct Page *base, size_t n) { assert(n > 0); struct Page *p = base; for (; p != base + n; p ++) { //\u91ca\u653e\u533a\u57df\u4e0d\u662f\u64cd\u4f5c\u7cfb\u7edf\u7a7a\u95f4\u4e14\u4e0d\u542b\u7a7a\u95f2\u533a\u57df\u7684\u5934\u9875 assert(!PageReserved(p) && !PageProperty(p)); p->flags = p->property = 0; set_page_ref(p, 0); } base->property = n; SetPageProperty(base); while (le != &free_list) { p = le2page(le, page_link); le = list_next(le); // \u5bfb\u627e\u53ef\u4ee5\u5408\u5e76\u7684\u7a7a\u95f4 if (base + base->property == p) { base->property += p->property; ClearPageProperty(p); list_del(&(p->page_link)); //\u7531\u4e8e\u662ffirst-fit\u7a7a\u95f2\u5757\u6309\u5730\u5740\u6392\u5e8f\uff0c\u627e\u5230\u4e86\u53ef\u4ee5break\u8df3\u51fa\u5faa\u73af break; } else if (p + p->property == base) { p->property += base->property; ClearPageProperty(base); base = p; list_del(&(p->page_link)); } } nr_free += n; le = list_next(&free_list); // \u63d2\u5165\u7a7a\u95f2\u94fe\u8868 while (le != &free_list) { p = le2page(le, page_link); if (base + base->property <= p) { assert(base + base->property != p); break; } le = list_next(le); } list_add_before(le, &(base->page_link)); } \u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u4fee\u6539\u91ca\u653e\u9875\u7684\u6807\u5fd7\u4f4d \u627e\u5230\u94fe\u8868\u4e2d\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u5e76\u63d2\u5165 \u5224\u65ad\u6b64\u5757\u7a7a\u4f59\u7a7a\u95f4\u80fd\u5426\u4e0e\u524d\u540e\u7a7a\u4f59\u7a7a\u95f4\u5408\u5e76\uff0c\u5982\u679c\u53ef\u4ee5\u5c06\u5176\u5408\u5e76 \u95ee\u98981.1\uff1a \u4f60\u7684first fit\u7b97\u6cd5\u662f\u5426\u6709\u8fdb\u4e00\u6b65\u7684\u6539\u8fdb\u7a7a\u95f4 \u6709\uff0c\u53ef\u4ee5\u91c7\u7528\u5e73\u8861\u6811\u7684\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u7a7a\u95f2\u5730\u5740\u7a7a\u95f4\uff0c\u8fd9\u6837\u5728\u5206\u914d\u548c\u56de\u6536\u7a7a\u95f4\u65f6\uff0c\u67e5\u627e\u5185\u5b58\u7684\u64cd\u4f5c\u53ef\u4ee5\u66f4\u5feb\u3002","title":"\u7ec3\u4e601\uff1a\u5b9e\u73b0first-fit\u8fde\u7eed\u7269\u7406\u5185\u5b58\u5206\u914d\u7b97\u6cd5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab2/2/","text":"\u7ec3\u4e602\uff1a\u5b9e\u73b0\u5bfb\u627e\u865a\u62df\u5730\u5740\u5bf9\u5e94\u7684\u9875\u8868\u9879 \u4fee\u6539pmm.c\u4e2d\u7684get_pte\u51fd\u6570\uff0c\u589e\u52a0\u4e0b\u9762\u4ee3\u7801\uff1a pde_t *pdep = &pgdir[PDX(la)]; if (!(*pdep & PTE_P)) { struct Page *page; if (!create || (page = alloc_page()) == NULL) { return NULL; } set_page_ref(page, 1); uintptr_t pa = page2pa(page); memset(KADDR(pa), 0, PGSIZE); *pdep = pa | PTE_U | PTE_W | PTE_P; } return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)]; \u4ee3\u7801\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u6839\u636e\u865a\u5730\u5740\u7684\u9ad8\u5341\u4f4d\u67e5\u8be2\u9875\u76ee\u5f55\uff0c\u627e\u5230\u9875\u8868\u9879\u7684pdep \u68c0\u67e5\u8be5\u9875\u662f\u5426\u5728\u5185\u5b58\u4e2d\uff0c\u5982\u679c\u4e0d\u5728\uff0c\u521b\u5efa\u8be5\u9875\uff0c\u5e76\u66f4\u65b0\u76f8\u5173\u4fe1\u606f \u6839\u636e\u865a\u62df\u5730\u5740\u7684\u4e2d\u95f4\u5341\u4f4d\uff0c\u627e\u5230\u865a\u62df\u5730\u5740\u5bf9\u5e94\u7684\u9875\u8868\u9879 \u95ee\u98982.1\uff1a\u8bf7\u63cf\u8ff0\u9875\u76ee\u5f55\u9879\uff08Pag Director Entry\uff09\u548c\u9875\u8868\uff08Page Table Entry\uff09\u4e2d\u6bcf\u4e2a\u7ec4\u6210\u90e8\u5206\u7684\u542b\u4e49\u548c\u4ee5\u53ca\u5bf9ucore\u800c\u8a00\u7684\u6f5c\u5728\u7528\u5904\u3002 \u9875\u76ee\u5f55\u9879\u5185\u5bb9 = (\u9875\u8868\u8d77\u59cb\u7269\u7406\u5730\u5740 & ~ 0x0FFF) | PTE_U | PTE_W | PTE_P \u9875\u8868\u9879\u5185\u5bb9 = (pa & ~0x0FFF) | PTE_P | PTE_W \u9875\u76ee\u5f55\u9879\u548c\u9875\u8868\u9879\u7684\u9ad820\u4f4d\u5b58\u50a8\u76f8\u5e94\u7684\u7269\u7406\u9875\u5e27\u53f7\uff0c\u4f4e12\u4f4d\u5b58\u50a8\u6807\u5fd7\u4f4d\u3002\u6807\u5fd7\u4f4d\u7684\u5b9a\u4e49\u4e3a\uff1a #define PTE_P 0x001 // Present #define PTE_W 0x002 // Writeable #define PTE_U 0x004 // User #define PTE_PWT 0x008 // Write-Through #define PTE_PCD 0x010 // Cache-Disable #define PTE_A 0x020 // Accessed #define PTE_D 0x040 // Dirty #define PTE_PS 0x080 // Page Size #define PTE_MBZ 0x180 // Bits must be zero #define PTE_AVAIL 0xE00 // Available for software use // The PTE_AVAIL bits aren't used by the kernel or interpreted by the // hardware, so user processes are allowed to set them arbitrarily. \u95ee\u98982.2\uff1a\u5982\u679cucore\u6267\u884c\u8fc7\u7a0b\u4e2d\u8bbf\u95ee\u5185\u5b58\uff0c\u51fa\u73b0\u4e86\u9875\u8bbf\u95ee\u5f02\u5e38\uff0c\u8bf7\u95ee\u786c\u4ef6\u8981\u505a\u54ea\u4e9b\u4e8b\u60c5\uff1f \u5728\u9875\u673a\u5236\u542f\u52a8\u540e\uff0c\u4f46\u4e2d\u65ad\u5411\u91cf\u8868\u672a\u52a0\u8f7d\u65f6\uff0c\u4f1a\u505c\u673a\u5d29\u6e83\u3002","title":"2"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab2/2/#2","text":"\u4fee\u6539pmm.c\u4e2d\u7684get_pte\u51fd\u6570\uff0c\u589e\u52a0\u4e0b\u9762\u4ee3\u7801\uff1a pde_t *pdep = &pgdir[PDX(la)]; if (!(*pdep & PTE_P)) { struct Page *page; if (!create || (page = alloc_page()) == NULL) { return NULL; } set_page_ref(page, 1); uintptr_t pa = page2pa(page); memset(KADDR(pa), 0, PGSIZE); *pdep = pa | PTE_U | PTE_W | PTE_P; } return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)]; \u4ee3\u7801\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u6839\u636e\u865a\u5730\u5740\u7684\u9ad8\u5341\u4f4d\u67e5\u8be2\u9875\u76ee\u5f55\uff0c\u627e\u5230\u9875\u8868\u9879\u7684pdep \u68c0\u67e5\u8be5\u9875\u662f\u5426\u5728\u5185\u5b58\u4e2d\uff0c\u5982\u679c\u4e0d\u5728\uff0c\u521b\u5efa\u8be5\u9875\uff0c\u5e76\u66f4\u65b0\u76f8\u5173\u4fe1\u606f \u6839\u636e\u865a\u62df\u5730\u5740\u7684\u4e2d\u95f4\u5341\u4f4d\uff0c\u627e\u5230\u865a\u62df\u5730\u5740\u5bf9\u5e94\u7684\u9875\u8868\u9879 \u95ee\u98982.1\uff1a\u8bf7\u63cf\u8ff0\u9875\u76ee\u5f55\u9879\uff08Pag Director Entry\uff09\u548c\u9875\u8868\uff08Page Table Entry\uff09\u4e2d\u6bcf\u4e2a\u7ec4\u6210\u90e8\u5206\u7684\u542b\u4e49\u548c\u4ee5\u53ca\u5bf9ucore\u800c\u8a00\u7684\u6f5c\u5728\u7528\u5904\u3002 \u9875\u76ee\u5f55\u9879\u5185\u5bb9 = (\u9875\u8868\u8d77\u59cb\u7269\u7406\u5730\u5740 & ~ 0x0FFF) | PTE_U | PTE_W | PTE_P \u9875\u8868\u9879\u5185\u5bb9 = (pa & ~0x0FFF) | PTE_P | PTE_W \u9875\u76ee\u5f55\u9879\u548c\u9875\u8868\u9879\u7684\u9ad820\u4f4d\u5b58\u50a8\u76f8\u5e94\u7684\u7269\u7406\u9875\u5e27\u53f7\uff0c\u4f4e12\u4f4d\u5b58\u50a8\u6807\u5fd7\u4f4d\u3002\u6807\u5fd7\u4f4d\u7684\u5b9a\u4e49\u4e3a\uff1a #define PTE_P 0x001 // Present #define PTE_W 0x002 // Writeable #define PTE_U 0x004 // User #define PTE_PWT 0x008 // Write-Through #define PTE_PCD 0x010 // Cache-Disable #define PTE_A 0x020 // Accessed #define PTE_D 0x040 // Dirty #define PTE_PS 0x080 // Page Size #define PTE_MBZ 0x180 // Bits must be zero #define PTE_AVAIL 0xE00 // Available for software use // The PTE_AVAIL bits aren't used by the kernel or interpreted by the // hardware, so user processes are allowed to set them arbitrarily. \u95ee\u98982.2\uff1a\u5982\u679cucore\u6267\u884c\u8fc7\u7a0b\u4e2d\u8bbf\u95ee\u5185\u5b58\uff0c\u51fa\u73b0\u4e86\u9875\u8bbf\u95ee\u5f02\u5e38\uff0c\u8bf7\u95ee\u786c\u4ef6\u8981\u505a\u54ea\u4e9b\u4e8b\u60c5\uff1f \u5728\u9875\u673a\u5236\u542f\u52a8\u540e\uff0c\u4f46\u4e2d\u65ad\u5411\u91cf\u8868\u672a\u52a0\u8f7d\u65f6\uff0c\u4f1a\u505c\u673a\u5d29\u6e83\u3002","title":"\u7ec3\u4e602\uff1a\u5b9e\u73b0\u5bfb\u627e\u865a\u62df\u5730\u5740\u5bf9\u5e94\u7684\u9875\u8868\u9879"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab2/3/","text":"\u7ec3\u4e603\uff1a\u91ca\u653e\u67d0\u865a\u5730\u5740\u6240\u5728\u7684\u9875\u5e76\u53d6\u6d88\u5bf9\u5e94\u4e8c\u7ea7\u9875\u8868\u9879\u7684\u6620\u5c04 \u4fee\u6539pmm.c\u4e2d\u7684page_remove_pte\u51fd\u6570\u3002 if (*ptep & PTE_P) { struct Page *page = pte2page(*ptep); if (page_ref_dec(page) == 0) { free_page(page); } *ptep = 0; tlb_invalidate(pgdir, la); } \u4ee3\u7801\u6267\u884c\u6b65\u9aa4\u4e3a\uff1a \u627e\u5230\u9875\u8868\u9879\u5bf9\u5e94\u7684\u7269\u7406\u9875\u5e27 \u5c06\u9875\u7684\u5bf9\u5e94\u7684\u88ab\u5f15\u7528\u6b21\u6570\u51cf\u4e00 \u5982\u679cref\u4e3a0\uff0c\u91ca\u653e\u8be5\u9875 \u6e05\u9664\u9875\u8868\u9879\uff0c\u5e76\u66f4\u65b0tlb \u95ee\u98983.1\uff1a\u6570\u636e\u7ed3\u6784Page\u7684\u5168\u5c40\u53d8\u91cf\uff08\u5176\u5b9e\u662f\u4e00\u4e2a\u6570\u7ec4\uff09\u7684\u6bcf\u4e00\u9879\u4e0e\u9875\u8868\u4e2d\u7684\u9875\u76ee\u5f55\u9879\u548c\u9875\u8868\u9879\u6709\u65e0\u5bf9\u5e94\u5173\u7cfb\uff1f\u5982\u679c\u6709\uff0c\u5176\u5bf9\u5e94\u5173\u7cfb\u662f\u5565\uff1f \u5728pmm.c\u7684page_init\u51fd\u6570\u4e2d\uff1a npage = maxpa / PGSIZE; pages = (struct Page *)ROUNDUP((void *)end, PGSIZE); for (i = 0; i < npage; i ++) { SetPageReserved(pages + i); } uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage); \u4ece\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u9996\u5148\u8ba1\u7b97\u51fa\u9875\u7684\u603b\u6570npage\uff0c\u7136\u540e\u5206\u914d\u5185\u5b58pages\u4e3aPage\u6570\u7ec4\u7684\u5934\u6307\u9488\uff0c\u5e76\u5bf9npage\u9879\u521d\u59cb\u5316\u3002\u53ef\u89c1\u6bcf\u4e00\u9879\u5bf9\u5e94\u7269\u7406\u7a7a\u95f4\u7684\u6bcf\u4e00\u9875\u3002\u9875\u8868\u9879\u4e2d\u7684\u57fa\u5740\u4e3a\u7269\u7406\u5730\u5740\uff0c\u53ef\u4ee5\u8f6c\u5316\u4e3aPage\u4e2d\u76f8\u5e94\u7684\u9879\u3002 \u95ee\u98983.2\uff1a\u5982\u679c\u5e0c\u671b\u865a\u62df\u5730\u5740\u4e0e\u7269\u7406\u5730\u5740\u76f8\u7b49\uff0c\u5219\u9700\u8981\u5982\u4f55\u4fee\u6539lab2\uff0c\u5b8c\u6210\u6b64\u4e8b\uff1f\u9f13\u52b1\u901a\u8fc7\u7f16\u7a0b\u6765\u5177\u4f53\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898 \u4fee\u6539memlayout.h\uff1a #define KERNBASE 0x00000000 #define VPT 0x3AC00000 \u4fee\u6539kernel.ld\uff1a . = 0x00100000; \u5728entry.s\u4e2d\u53bb\u6389\u7f6eboot_pgdir[0]\u4e3a0\u7684\u9879\uff0c\u56e0\u4e3a\u6b64\u65f6\u865a\u5730\u5740\u4e0e\u5b9e\u5730\u5740\u4e00\u4e00\u5bf9\u5e94\uff1a # xorl %eax, %eax # movl %eax, __boot_pgdir","title":"3"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab2/3/#3","text":"\u4fee\u6539pmm.c\u4e2d\u7684page_remove_pte\u51fd\u6570\u3002 if (*ptep & PTE_P) { struct Page *page = pte2page(*ptep); if (page_ref_dec(page) == 0) { free_page(page); } *ptep = 0; tlb_invalidate(pgdir, la); } \u4ee3\u7801\u6267\u884c\u6b65\u9aa4\u4e3a\uff1a \u627e\u5230\u9875\u8868\u9879\u5bf9\u5e94\u7684\u7269\u7406\u9875\u5e27 \u5c06\u9875\u7684\u5bf9\u5e94\u7684\u88ab\u5f15\u7528\u6b21\u6570\u51cf\u4e00 \u5982\u679cref\u4e3a0\uff0c\u91ca\u653e\u8be5\u9875 \u6e05\u9664\u9875\u8868\u9879\uff0c\u5e76\u66f4\u65b0tlb \u95ee\u98983.1\uff1a\u6570\u636e\u7ed3\u6784Page\u7684\u5168\u5c40\u53d8\u91cf\uff08\u5176\u5b9e\u662f\u4e00\u4e2a\u6570\u7ec4\uff09\u7684\u6bcf\u4e00\u9879\u4e0e\u9875\u8868\u4e2d\u7684\u9875\u76ee\u5f55\u9879\u548c\u9875\u8868\u9879\u6709\u65e0\u5bf9\u5e94\u5173\u7cfb\uff1f\u5982\u679c\u6709\uff0c\u5176\u5bf9\u5e94\u5173\u7cfb\u662f\u5565\uff1f \u5728pmm.c\u7684page_init\u51fd\u6570\u4e2d\uff1a npage = maxpa / PGSIZE; pages = (struct Page *)ROUNDUP((void *)end, PGSIZE); for (i = 0; i < npage; i ++) { SetPageReserved(pages + i); } uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage); \u4ece\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u9996\u5148\u8ba1\u7b97\u51fa\u9875\u7684\u603b\u6570npage\uff0c\u7136\u540e\u5206\u914d\u5185\u5b58pages\u4e3aPage\u6570\u7ec4\u7684\u5934\u6307\u9488\uff0c\u5e76\u5bf9npage\u9879\u521d\u59cb\u5316\u3002\u53ef\u89c1\u6bcf\u4e00\u9879\u5bf9\u5e94\u7269\u7406\u7a7a\u95f4\u7684\u6bcf\u4e00\u9875\u3002\u9875\u8868\u9879\u4e2d\u7684\u57fa\u5740\u4e3a\u7269\u7406\u5730\u5740\uff0c\u53ef\u4ee5\u8f6c\u5316\u4e3aPage\u4e2d\u76f8\u5e94\u7684\u9879\u3002 \u95ee\u98983.2\uff1a\u5982\u679c\u5e0c\u671b\u865a\u62df\u5730\u5740\u4e0e\u7269\u7406\u5730\u5740\u76f8\u7b49\uff0c\u5219\u9700\u8981\u5982\u4f55\u4fee\u6539lab2\uff0c\u5b8c\u6210\u6b64\u4e8b\uff1f\u9f13\u52b1\u901a\u8fc7\u7f16\u7a0b\u6765\u5177\u4f53\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898 \u4fee\u6539memlayout.h\uff1a #define KERNBASE 0x00000000 #define VPT 0x3AC00000 \u4fee\u6539kernel.ld\uff1a . = 0x00100000; \u5728entry.s\u4e2d\u53bb\u6389\u7f6eboot_pgdir[0]\u4e3a0\u7684\u9879\uff0c\u56e0\u4e3a\u6b64\u65f6\u865a\u5730\u5740\u4e0e\u5b9e\u5730\u5740\u4e00\u4e00\u5bf9\u5e94\uff1a # xorl %eax, %eax # movl %eax, __boot_pgdir","title":"\u7ec3\u4e603\uff1a\u91ca\u653e\u67d0\u865a\u5730\u5740\u6240\u5728\u7684\u9875\u5e76\u53d6\u6d88\u5bf9\u5e94\u4e8c\u7ea7\u9875\u8868\u9879\u7684\u6620\u5c04"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab2/data_stuct/","text":"\u6570\u636e\u7ed3\u6784 \u7269\u7406\u9875\u7ba1\u7406 struct Page { int ref; // page frame's reference counter uint32_t flags; // array of flags that describe the status of the page frame unsigned int property; // the num of free block, used in first fit pm manager list_entry_t page_link; // free list link // lab3\u4e2d\u52a0\u5165\uff0c\u5b9e\u73b0\u9875\u66ff\u6362\u7b97\u6cd5 list_entry_t pra_page_link; // used for pra (page replace algorithm) uintptr_t pra_vaddr; // used for pra (page replace algorithm) }; /* Flags describing the status of a page frame */ #define PG_reserved 0 // the page descriptor is reserved for kernel or unusable #define PG_property 1 // the member 'property' is valid \u9875\u76ee\u5f55\u8868/\u9875\u8868 /* page table/directory entry flags */ #define PTE_P 0x001 // Present #define PTE_W 0x002 // Writeable #define PTE_U 0x004 // User #define PTE_PWT 0x008 // Write-Through #define PTE_PCD 0x010 // Cache-Disable #define PTE_A 0x020 // Accessed #define PTE_D 0x040 // Dirty #define PTE_PS 0x080 // Page Size #define PTE_MBZ 0x180 // Bits must be zero #define PTE_AVAIL 0xE00 // Available for software use // The PTE_AVAIL bits aren't used by the kernel or interpreted by the // hardware, so user processes are allowed to set them arbitrarily. #define PTE_USER (PTE_U | PTE_W | PTE_P)","title":"Data stuct"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab2/data_stuct/#_1","text":"\u7269\u7406\u9875\u7ba1\u7406 struct Page { int ref; // page frame's reference counter uint32_t flags; // array of flags that describe the status of the page frame unsigned int property; // the num of free block, used in first fit pm manager list_entry_t page_link; // free list link // lab3\u4e2d\u52a0\u5165\uff0c\u5b9e\u73b0\u9875\u66ff\u6362\u7b97\u6cd5 list_entry_t pra_page_link; // used for pra (page replace algorithm) uintptr_t pra_vaddr; // used for pra (page replace algorithm) }; /* Flags describing the status of a page frame */ #define PG_reserved 0 // the page descriptor is reserved for kernel or unusable #define PG_property 1 // the member 'property' is valid \u9875\u76ee\u5f55\u8868/\u9875\u8868 /* page table/directory entry flags */ #define PTE_P 0x001 // Present #define PTE_W 0x002 // Writeable #define PTE_U 0x004 // User #define PTE_PWT 0x008 // Write-Through #define PTE_PCD 0x010 // Cache-Disable #define PTE_A 0x020 // Accessed #define PTE_D 0x040 // Dirty #define PTE_PS 0x080 // Page Size #define PTE_MBZ 0x180 // Bits must be zero #define PTE_AVAIL 0xE00 // Available for software use // The PTE_AVAIL bits aren't used by the kernel or interpreted by the // hardware, so user processes are allowed to set them arbitrarily. #define PTE_USER (PTE_U | PTE_W | PTE_P)","title":"\u6570\u636e\u7ed3\u6784"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab2/my_note/","text":"\u7b14\u8bb0 probe_memory e820map: memory: 0009fc00, [00000000, 0009fbff], type = 1. memory: 00000400, [0009fc00, 0009ffff], type = 2. memory: 00010000, [000f0000, 000fffff], type = 2. memory: 07ee0000, [00100000, 07fdffff], type = 1. memory: 00020000, [07fe0000, 07ffffff], type = 2. memory: 00040000, [fffc0000, ffffffff], type = 2. kern_entry \u548cgdt\u4e0eidt\u4e0d\u540c\uff0cpdt\u7684\u9996\u5730\u5740\u4fdd\u5b58\u5728cr3\u4e2d\uff0c\u4f7f\u7528movl\u52a0\u8f7d\uff0c\u800cgdt\u4e0eidt\u5206\u522b\u4f7f\u7528lgdt\u4e0elidt\u52a0\u8f7d\u5230gdtr\u4e0eidtr\u4e2d\u3002\u9875\u673a\u5236\u7684\u542f\u52a8\u5bf9\u5e94cr0\u7684bit31\uff0c\u6bb5\u673a\u5236\u662fbit0\u3002 \u9875\u673a\u5236\u542f\u7528\u524d\uff0c\u64cd\u4f5c\u7cfb\u7edf\u8fd0\u884c\u5728\u4f4e\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u6240\u4ee5\u9875\u673a\u5236\u542f\u7528\u540e\u8981\u4fdd\u6301\u4f4e\u865a\u62df\u5730\u5740\u7684\u5bf9\u7b49\u6620\u5c04\uff0c\u540c\u65f6\u4e5f\u8981\u5c06\u9ad8\u865a\u62df\u5730\u5740\u6620\u5c04\u5230\u4f4e\u7269\u7406\u5730\u5740\uff0c\u5728\u8df3\u8f6c\u5230\u9ad8\u865a\u62df\u5730\u5740\u540e\u5c31\u53ef\u4ee5\u53d6\u6d88\u5bf9\u7b49\u6620\u5c04\u4e86\u3002 page_init() \u4e0b\u56fe\u4e3a\u6267\u884c page_init() \u540e\u7684\u7269\u7406\u7a7a\u95f4\u3002\u5171128.87M\uff0c struct Page \u4e00\u517132736\u4e2a, \u7cfb\u7edf\u5360\u7528 443\u4e2a\u3002 mem_end ---------> +---------------------------------+ 0x07fe0000 | Empty Memory (*) | freemem_begin ----> +---------------------------------+ 0x001bb000 pages_end --------> +---------------------------------+ 0x001bad80 | pages for free_mem | freepages_begin --> +---------------------------------+ 0x0011d29c | pages for kern + pages_begin ------> +---------------------------------+ 0x0011b000 end --------------> +---------------------------------+ 0x0011af28 | ucore bss | edata ------------> +---------------------------------+ 0x0011a000 | ucore data | etext ------------> +---------------------------------+ 0x00105a94 | | entry-------------> +--- ----+ 0x00100036 | ucore text | | | | | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W) \u5f53kern\u865a\u62df\u5730\u5740\u6269\u5c55\u5230\u6700\u5927\u65f6\uff0cpdt\u4e2d 0xc00>>2 =768\u5230 0xf7f>>2 =991\u9879\u88ab\u586b\u5145\u3002\u7531\u4e8e\u591a\u4e2a\u865a\u62df\u5730\u5740\u53ef\u4ee5\u5bf9\u5e94\u4e00\u4e2a\u7269\u7406\u5730\u5740\uff0c\u9009\u53d6\u7b2c (VPT=0xfac<<20)>>22 =1003\u9879\u8868\u793apdt\u53e6\u4e00\u4e2a\u865a\u62df\u5730\u5740\uff0c\u5373\u4e3avpd= {VPT>>22, VPT>>12, 12{1b'0}} \uff0c\u8fd9\u662f\u4e00\u79cd\u81ea\u6620\u5c04\uff0c\u628apdt\u672c\u8eab\u6620\u5c04\u4e3a\u4e00\u4e2apt\u4e0e\u4e00\u4e2a\u7269\u7406\u9875\u3002\u540c\u7406\u9875\u76ee\u5f55\u8868\u4e2d\u7b2ci\u4e2a\u9875\u8868\u7684\u865a\u62df\u5730\u5740\u5c31\u4e3avpt_i= {VPT>>22, (10-i\u7684\u4f4d\u6570){1b'0}, {i}, 12{1b'0}} \u3002 \u6700\u540e\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e3a\u4e0b\u56fe\u3002 4G ---------------> +---------------------------------+ | | | Empty Memory (*) | | | +---------------------------------+ 0xFB000000 | Cur. Page Table (Kern, RW) | RW/-- PTSIZE VPT --------------> +---------------------------------+ 0xFAC00000 | Invalid Memory (*) | --/-- KERNTOP ----------> +---------------------------------+ 0xF8000000 | | | Remapped Physical Memory | RW/-- KMEMSIZE | | KERNBASE ---------> +---------------------------------+ 0xC0000000 | | | | | | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ boot_map_segment() \u7a7a\u95f2\u7a7a\u95f4\u5f00\u59cb\u4e8e0x001bb000\u5904\uff0c\u57280~4M\u7a7a\u95f4\u5185\uff0c\u6240\u4ee5 boot_map_segment() \u6269\u5c55\u6620\u5c04\u7a7a\u95f4\u65f6\uff0c\u53ef \u4ee5\u4f7f\u7528\u5176\u865a\u62df\u5730\u5740\u6765\u521d\u59cb\u5316\u9875\u8868\uff0c\u4e0b\u56fe\u4e3a\u6267\u884c boot_map_segment() \u540e\u7684\u7269\u7406\u7a7a\u95f4\uff0c\u5171KMEMSIZE / 4M = 224\u4e2a\u9875\u8868\uff0c\u5360\u7528224 * 4K = 0xe0000\u7684\u7269\u7406\u7a7a\u95f4\uff0c0x0029b000\u4e5f\u57280~4M\u7a7a\u95f4\u5185\u3002 mem_end ---------> +---------------------------------+ 0x07fe0000 | Empty Memory (*) | page_table_end ---> +---------------------------------+ 0x0029b000 | page table | page_table_begin -> +---------------------------------+ 0x001bb000 gdt_init() \u5206\u6bb5\uff0ckern\u7684\u5185\u6838\u6808\u4e3a0-2k\u7684\u865a\u62df\u5730\u5740\u3002 ltr\u662f\u5c06gdt\u4e2dtss\u63cf\u8ff0\u7b26\u7d22\u5f15\u503c\u52a0\u8f7d\u5230tr\u4e2d\u3002 print_pgdir() -------------------- BEGIN -------------------- PDE(0e0) c0000000-f8000000 38000000 urw |-- PTE(38000) c0000000-f8000000 38000000 -rw PDE(001) fac00000-fb000000 00400000 -rw |-- PTE(000e0) faf00000-fafe0000 000e0000 urw |-- PTE(00001) fafeb000-fafec000 00001000 -rw --------------------- END --------------------- \u901a\u8fc7 \u9057\u7559\u95ee\u9898 KMEMSIZE \u5b9a\u4e49\u4e3a0x38000000\u7684\u4f9d\u636e\u662f\u4ec0\u4e48\uff1b \u6267\u884c\u5b8c boot_map_segment \u540e\uff0c\u9ad8\u7ebf\u6027\u5730\u5740\u59820xe8000000\u6620\u5c04\u7684\u7269\u7406\u5730\u5740\u5e94\u4e3a0x28000000\uff0c\u4f46\u5b9e\u9645\u63a2\u6d4b\u5230\u7684\u7269\u7406\u5730\u5740\u6700\u5927\u4e3a0x07fdffff\uff0c\u6d4b\u8bd5\u4e2d\u8fd9\u7c7b\u5730\u5740\u8bfb\u4e3a0\uff0c\u5199\u5165\u65e0\u6cd5\u4fdd\u5b58\u3002","title":"My note"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab2/my_note/#_1","text":"probe_memory e820map: memory: 0009fc00, [00000000, 0009fbff], type = 1. memory: 00000400, [0009fc00, 0009ffff], type = 2. memory: 00010000, [000f0000, 000fffff], type = 2. memory: 07ee0000, [00100000, 07fdffff], type = 1. memory: 00020000, [07fe0000, 07ffffff], type = 2. memory: 00040000, [fffc0000, ffffffff], type = 2. kern_entry \u548cgdt\u4e0eidt\u4e0d\u540c\uff0cpdt\u7684\u9996\u5730\u5740\u4fdd\u5b58\u5728cr3\u4e2d\uff0c\u4f7f\u7528movl\u52a0\u8f7d\uff0c\u800cgdt\u4e0eidt\u5206\u522b\u4f7f\u7528lgdt\u4e0elidt\u52a0\u8f7d\u5230gdtr\u4e0eidtr\u4e2d\u3002\u9875\u673a\u5236\u7684\u542f\u52a8\u5bf9\u5e94cr0\u7684bit31\uff0c\u6bb5\u673a\u5236\u662fbit0\u3002 \u9875\u673a\u5236\u542f\u7528\u524d\uff0c\u64cd\u4f5c\u7cfb\u7edf\u8fd0\u884c\u5728\u4f4e\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u6240\u4ee5\u9875\u673a\u5236\u542f\u7528\u540e\u8981\u4fdd\u6301\u4f4e\u865a\u62df\u5730\u5740\u7684\u5bf9\u7b49\u6620\u5c04\uff0c\u540c\u65f6\u4e5f\u8981\u5c06\u9ad8\u865a\u62df\u5730\u5740\u6620\u5c04\u5230\u4f4e\u7269\u7406\u5730\u5740\uff0c\u5728\u8df3\u8f6c\u5230\u9ad8\u865a\u62df\u5730\u5740\u540e\u5c31\u53ef\u4ee5\u53d6\u6d88\u5bf9\u7b49\u6620\u5c04\u4e86\u3002 page_init() \u4e0b\u56fe\u4e3a\u6267\u884c page_init() \u540e\u7684\u7269\u7406\u7a7a\u95f4\u3002\u5171128.87M\uff0c struct Page \u4e00\u517132736\u4e2a, \u7cfb\u7edf\u5360\u7528 443\u4e2a\u3002 mem_end ---------> +---------------------------------+ 0x07fe0000 | Empty Memory (*) | freemem_begin ----> +---------------------------------+ 0x001bb000 pages_end --------> +---------------------------------+ 0x001bad80 | pages for free_mem | freepages_begin --> +---------------------------------+ 0x0011d29c | pages for kern + pages_begin ------> +---------------------------------+ 0x0011b000 end --------------> +---------------------------------+ 0x0011af28 | ucore bss | edata ------------> +---------------------------------+ 0x0011a000 | ucore data | etext ------------> +---------------------------------+ 0x00105a94 | | entry-------------> +--- ----+ 0x00100036 | ucore text | | | | | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W) \u5f53kern\u865a\u62df\u5730\u5740\u6269\u5c55\u5230\u6700\u5927\u65f6\uff0cpdt\u4e2d 0xc00>>2 =768\u5230 0xf7f>>2 =991\u9879\u88ab\u586b\u5145\u3002\u7531\u4e8e\u591a\u4e2a\u865a\u62df\u5730\u5740\u53ef\u4ee5\u5bf9\u5e94\u4e00\u4e2a\u7269\u7406\u5730\u5740\uff0c\u9009\u53d6\u7b2c (VPT=0xfac<<20)>>22 =1003\u9879\u8868\u793apdt\u53e6\u4e00\u4e2a\u865a\u62df\u5730\u5740\uff0c\u5373\u4e3avpd= {VPT>>22, VPT>>12, 12{1b'0}} \uff0c\u8fd9\u662f\u4e00\u79cd\u81ea\u6620\u5c04\uff0c\u628apdt\u672c\u8eab\u6620\u5c04\u4e3a\u4e00\u4e2apt\u4e0e\u4e00\u4e2a\u7269\u7406\u9875\u3002\u540c\u7406\u9875\u76ee\u5f55\u8868\u4e2d\u7b2ci\u4e2a\u9875\u8868\u7684\u865a\u62df\u5730\u5740\u5c31\u4e3avpt_i= {VPT>>22, (10-i\u7684\u4f4d\u6570){1b'0}, {i}, 12{1b'0}} \u3002 \u6700\u540e\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e3a\u4e0b\u56fe\u3002 4G ---------------> +---------------------------------+ | | | Empty Memory (*) | | | +---------------------------------+ 0xFB000000 | Cur. Page Table (Kern, RW) | RW/-- PTSIZE VPT --------------> +---------------------------------+ 0xFAC00000 | Invalid Memory (*) | --/-- KERNTOP ----------> +---------------------------------+ 0xF8000000 | | | Remapped Physical Memory | RW/-- KMEMSIZE | | KERNBASE ---------> +---------------------------------+ 0xC0000000 | | | | | | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ boot_map_segment() \u7a7a\u95f2\u7a7a\u95f4\u5f00\u59cb\u4e8e0x001bb000\u5904\uff0c\u57280~4M\u7a7a\u95f4\u5185\uff0c\u6240\u4ee5 boot_map_segment() \u6269\u5c55\u6620\u5c04\u7a7a\u95f4\u65f6\uff0c\u53ef \u4ee5\u4f7f\u7528\u5176\u865a\u62df\u5730\u5740\u6765\u521d\u59cb\u5316\u9875\u8868\uff0c\u4e0b\u56fe\u4e3a\u6267\u884c boot_map_segment() \u540e\u7684\u7269\u7406\u7a7a\u95f4\uff0c\u5171KMEMSIZE / 4M = 224\u4e2a\u9875\u8868\uff0c\u5360\u7528224 * 4K = 0xe0000\u7684\u7269\u7406\u7a7a\u95f4\uff0c0x0029b000\u4e5f\u57280~4M\u7a7a\u95f4\u5185\u3002 mem_end ---------> +---------------------------------+ 0x07fe0000 | Empty Memory (*) | page_table_end ---> +---------------------------------+ 0x0029b000 | page table | page_table_begin -> +---------------------------------+ 0x001bb000 gdt_init() \u5206\u6bb5\uff0ckern\u7684\u5185\u6838\u6808\u4e3a0-2k\u7684\u865a\u62df\u5730\u5740\u3002 ltr\u662f\u5c06gdt\u4e2dtss\u63cf\u8ff0\u7b26\u7d22\u5f15\u503c\u52a0\u8f7d\u5230tr\u4e2d\u3002 print_pgdir() -------------------- BEGIN -------------------- PDE(0e0) c0000000-f8000000 38000000 urw |-- PTE(38000) c0000000-f8000000 38000000 -rw PDE(001) fac00000-fb000000 00400000 -rw |-- PTE(000e0) faf00000-fafe0000 000e0000 urw |-- PTE(00001) fafeb000-fafec000 00001000 -rw --------------------- END --------------------- \u901a\u8fc7 \u9057\u7559\u95ee\u9898 KMEMSIZE \u5b9a\u4e49\u4e3a0x38000000\u7684\u4f9d\u636e\u662f\u4ec0\u4e48\uff1b \u6267\u884c\u5b8c boot_map_segment \u540e\uff0c\u9ad8\u7ebf\u6027\u5730\u5740\u59820xe8000000\u6620\u5c04\u7684\u7269\u7406\u5730\u5740\u5e94\u4e3a0x28000000\uff0c\u4f46\u5b9e\u9645\u63a2\u6d4b\u5230\u7684\u7269\u7406\u5730\u5740\u6700\u5927\u4e3a0x07fdffff\uff0c\u6d4b\u8bd5\u4e2d\u8fd9\u7c7b\u5730\u5740\u8bfb\u4e3a0\uff0c\u5199\u5165\u65e0\u6cd5\u4fdd\u5b58\u3002","title":"\u7b14\u8bb0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab3/1/","text":"\u7ec3\u4e601\uff1a\u7ed9\u672a\u88ab\u6620\u5c04\u7684\u5730\u5740\u6620\u5c04\u4e0a\u7269\u7406\u9875 \u5728kern/mm/vmm.c\u4e2d\u5b8c\u6210do_pgfault()\u51fd\u6570\uff0c\u7ed9\u672a\u88ab\u6620\u5c04\u7684\u5730\u5740\u6620\u5c04\u7269\u7406\u9875\u3002\u6dfb\u52a0\u7684\u4ee3\u7801\u4e3a\uff1a ptep = get_pte(mm->pgdir, addr, 1); if(ptep == NULL) { cprintf(\"do_pgfault failed: get_pte error!\\n\"); goto failed; } if(*ptep == 0) { if(pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) { cprintf(\"do_pgfault failed: pgdir_alloc_page failed!\\n\"); goto failed; } } else{ } \u6267\u884c\u8fc7\u7a0b\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u6839\u636e\u865a\u62df\u5730\u5740\u83b7\u5f97pte \u5982\u679cpte\u4e3a\u7a7a\uff0c\u5219\u62a5\u9519 \u5982\u679cpte\u5185\u5bb9\u4e3a0\uff0c\u5219\u5206\u914d\u76f8\u5e94\u7684\u7269\u7406\u9875 \u95ee\u98981.1\uff1a\u8bf7\u63cf\u8ff0\u9875\u76ee\u5f55\u9879\uff08Pag Director Entry\uff09\u548c\u9875\u8868\uff08Page Table Entry\uff09\u4e2d\u7ec4\u6210\u90e8\u5206\u5bf9ucore\u5b9e\u73b0\u9875\u66ff\u6362\u7b97\u6cd5\u7684\u6f5c\u5728\u7528\u5904\u3002 \u63d0\u4f9b\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\u7684\u8f6c\u6362\uff0c\u7528\u4e8e\u5224\u65ad\u76f8\u5e94\u7684\u7269\u7406\u5730\u5740\u662f\u5426\u5408\u6cd5\u3001\u7269\u7406\u9875\u662f\u5426\u5728\u5185\u5b58\u4e2d\u4ee5\u53ca\u76f8\u5e94\u7684\u8bbf\u95ee\u6743\u9650 \u95ee\u98981.2\uff1a\u5982\u679cucore\u7684\u7f3a\u9875\u670d\u52a1\u4f8b\u7a0b\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u8bbf\u95ee\u5185\u5b58\uff0c\u51fa\u73b0\u4e86\u9875\u8bbf\u95ee\u5f02\u5e38\uff0c\u8bf7\u95ee\u786c\u4ef6\u8981\u505a\u54ea\u4e9b\u4e8b\u60c5\uff1f \u786c\u4ef6\u4ea7\u751f\u4e2d\u65ad\uff0c\u518d\u6b21\u6761\u7528\u7f3a\u9875\u670d\u52a1\u4f8b\u7a0b\u3002","title":"1"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab3/1/#1","text":"\u5728kern/mm/vmm.c\u4e2d\u5b8c\u6210do_pgfault()\u51fd\u6570\uff0c\u7ed9\u672a\u88ab\u6620\u5c04\u7684\u5730\u5740\u6620\u5c04\u7269\u7406\u9875\u3002\u6dfb\u52a0\u7684\u4ee3\u7801\u4e3a\uff1a ptep = get_pte(mm->pgdir, addr, 1); if(ptep == NULL) { cprintf(\"do_pgfault failed: get_pte error!\\n\"); goto failed; } if(*ptep == 0) { if(pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) { cprintf(\"do_pgfault failed: pgdir_alloc_page failed!\\n\"); goto failed; } } else{ } \u6267\u884c\u8fc7\u7a0b\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u6839\u636e\u865a\u62df\u5730\u5740\u83b7\u5f97pte \u5982\u679cpte\u4e3a\u7a7a\uff0c\u5219\u62a5\u9519 \u5982\u679cpte\u5185\u5bb9\u4e3a0\uff0c\u5219\u5206\u914d\u76f8\u5e94\u7684\u7269\u7406\u9875 \u95ee\u98981.1\uff1a\u8bf7\u63cf\u8ff0\u9875\u76ee\u5f55\u9879\uff08Pag Director Entry\uff09\u548c\u9875\u8868\uff08Page Table Entry\uff09\u4e2d\u7ec4\u6210\u90e8\u5206\u5bf9ucore\u5b9e\u73b0\u9875\u66ff\u6362\u7b97\u6cd5\u7684\u6f5c\u5728\u7528\u5904\u3002 \u63d0\u4f9b\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\u7684\u8f6c\u6362\uff0c\u7528\u4e8e\u5224\u65ad\u76f8\u5e94\u7684\u7269\u7406\u5730\u5740\u662f\u5426\u5408\u6cd5\u3001\u7269\u7406\u9875\u662f\u5426\u5728\u5185\u5b58\u4e2d\u4ee5\u53ca\u76f8\u5e94\u7684\u8bbf\u95ee\u6743\u9650 \u95ee\u98981.2\uff1a\u5982\u679cucore\u7684\u7f3a\u9875\u670d\u52a1\u4f8b\u7a0b\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u8bbf\u95ee\u5185\u5b58\uff0c\u51fa\u73b0\u4e86\u9875\u8bbf\u95ee\u5f02\u5e38\uff0c\u8bf7\u95ee\u786c\u4ef6\u8981\u505a\u54ea\u4e9b\u4e8b\u60c5\uff1f \u786c\u4ef6\u4ea7\u751f\u4e2d\u65ad\uff0c\u518d\u6b21\u6761\u7528\u7f3a\u9875\u670d\u52a1\u4f8b\u7a0b\u3002","title":"\u7ec3\u4e601\uff1a\u7ed9\u672a\u88ab\u6620\u5c04\u7684\u5730\u5740\u6620\u5c04\u4e0a\u7269\u7406\u9875"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab3/2/","text":"\u7ec3\u4e602\uff1a\u8865\u5145\u5b8c\u6210\u57fa\u4e8eFIFO\u7684\u9875\u9762\u66ff\u6362\u7b97\u6cd5 \u5728do_pgfault()\u51fd\u6570\u4e2d\u589e\u52a0\u4ee5\u4e0b\u4ee3\u7801\uff1a else if ((*ptep & 1) == 0){ // if this pte is a swap entry, then load data from disk to a page with phy addr // and call page_insert to map the phy addr with logical addr if(swap_init_ok) { struct Page *page=NULL; if ((ret = swap_in(mm, addr, &page)) != 0) { cprintf(\"swap_in in do_pgfault failed\\n\"); goto failed; } page_insert(mm->pgdir, page, addr, perm); swap_map_swappable(mm, addr, page, 1); page->pra_vaddr = addr; } else { cprintf(\"no swap_init_ok but ptep is %x, failed\\n\",*ptep); goto failed; } } \u4ee3\u7801\u6267\u884c\u6b65\u9aa4\u4e3a\uff1a \u5982\u679c\u7269\u7406\u9875\u5728\u5916\u5b58\u4e2d\uff0c\u6362\u5165\u76f8\u5e94\u7684\u9875 \u66f4\u65b0\u9875\u8868\u7684\u6620\u5c04\u5173\u7cfb \u8bbe\u7f6e\u9875\u53ef\u4ea4\u6362 \u66f4\u65b0\u9875\u7684\u865a\u62df\u5730\u5740 \u5728\u6267\u884c\u7f3a\u9875\u6362\u5165\u7684FIFO\u7b97\u6cd5\u65f6\uff0c\u5728kern/mm/swap_fifo.c\u4e2d\uff0c\u4fee\u6539_fifo_map_swappable()\u51fd\u6570\u548c_fifo_swap_out_victim()\u51fd\u6570\uff1a static int _fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in) { list_entry_t *head=(list_entry_t*) mm->sm_priv; list_entry_t *entry=&(page->pra_page_link); assert(entry != NULL && head != NULL); //record the page access situlation /*LAB3 EXERCISE 2: YOUR CODE*/ //(1)link the most recent arrival page at the back of the pra_list_head qeueue. list_add(head, entry); return 0; } /* * (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the earliest arrival page in front of pra_list_head qeueue, * then set the addr of addr of this page to ptr_page. */ static int _fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick) { list_entry_t *head=(list_entry_t*) mm->sm_priv; assert(head != NULL); assert(in_tick==0); /* Select the victim */ /*LAB3 EXERCISE 2: YOUR CODE*/ //(1) unlink the earliest arrival page in front of pra_list_head qeueue //(2) set the addr of addr of this page to ptr_page list_entry_t *out = head->prev; assert(out != head); struct Page *page = le2page(out, pra_page_link); list_del(out); assert(page != NULL); *ptr_page = page; return 0; } \u5373\u6bcf\u6b21\u5728\u94fe\u8868\u5934\u90e8\u63d2\u5165\u76f8\u5e94\u7684\u7269\u7406\u9875\uff0c\u5220\u9664\u94fe\u8868\u672b\u5c3e\u7684\u9875\uff0c\u7ef4\u62a4FIFO\u961f\u5217\u3002 \u95ee\u98982.1\uff1a\u5982\u679c\u8981\u5728ucore\u4e0a\u5b9e\u73b0\"extended clock\u9875\u66ff\u6362\u7b97\u6cd5\"\u8bf7\u7ed9\u4f60\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u73b0\u6709\u7684swap_manager\u6846\u67b6\u662f\u5426\u8db3\u4ee5\u652f\u6301\u5728ucore\u4e2d\u5b9e\u73b0\u6b64\u7b97\u6cd5\uff1f\u5982\u679c\u662f\uff0c\u8bf7\u7ed9\u4f60\u7684\u8bbe\u8ba1\u65b9\u6848\u3002\u5982\u679c\u4e0d\u662f\uff0c\u8bf7\u7ed9\u51fa\u4f60\u7684\u65b0\u7684\u6269\u5c55\u548c\u57fa\u6b64\u6269\u5c55\u7684\u8bbe\u8ba1\u65b9\u6848\u3002\u5e76\u9700\u8981\u56de\u7b54\u5982\u4e0b\u95ee\u9898 \u9700\u8981\u88ab\u6362\u51fa\u7684\u9875\u7684\u7279\u5f81\u662f\u4ec0\u4e48\uff1f \u5728ucore\u4e2d\u5982\u4f55\u5224\u65ad\u5177\u6709\u8fd9\u6837\u7279\u5f81\u7684\u9875\uff1f \u4f55\u65f6\u8fdb\u884c\u6362\u5165\u548c\u6362\u51fa\u64cd\u4f5c\uff1f \u73b0\u6709\u7684\u6846\u67b6\u4e0d\u8db3\u4ee5\u652f\u6301extended clock\u66ff\u6362\u7b97\u6cd5\u3002\u539f\u56e0\u5982\u4e0b\uff1a\u73b0\u6709\u7684\u6846\u67b6\u4e2d\u6ca1\u6709\u52a8\u6001\u4fee\u6539\u8bbf\u95ee\u9875\u9762\u7684\u51fd\u6570\u3002\u9700\u8981\u5728\u73b0\u6709\u7684\u6846\u67b6\u4e2d\u52a0\u5165\u8bbf\u95ee\u67d0\u9875\u65f6\u7684\u51fd\u6570\uff0c\u52a8\u6001\u5730\u4fee\u6539\u9875\u9762\u7684\u8bbf\u95ee\u4f4d\u548c\u4fee\u6539\u4f4d\u3002 extended clock\u7b97\u6cd5\u7684\u6267\u884c\u8fc7\u7a0b\u4e3a\uff1a\u5c06\u88ab\u904d\u5386\u7684\u8282\u70b9\u7684\u8bbf\u95ee\u4f4d\u6216\u4fee\u6539\u4f4d\u6e05\u96f6\uff0c\u76f4\u5230\u627e\u5230\u5168\u4e3a0\u7684\u9875\u66ff\u6362\u3002\u88ab\u6362\u51fa\u7684\u9875\u5728\u76f8\u5e94\u7684\u65f6\u95f4\u95f4\u9694\u4e2d\uff0c\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\u6216\u4fee\u6539\u8fc7\u3002\u5982\u679c\u90fd\u88ab\u8bbf\u95ee\u6216\u4fee\u6539\u8fc7\uff0c\u5219extended clock\u7b97\u6cd5\u4f1a\u904d\u5386\u4e00\u904d\u540e\u627e\u5230\u6700\u5f00\u59cb\u7684\u9875 \u5728ucore\u4e2d\uff0c\u901a\u8fc7\u4ece\u5bf9\u5e94\u4f4d\u7f6e\u904d\u5386\uff0c\u5224\u65ad\u76f8\u5e94\u9875\u7684\u6807\u5fd7\u4f4d\u6765\u627e\u5230\u8fd9\u6837\u7684\u9875 \u5728\u7f3a\u9875\u5f02\u5e38\u53d1\u751f\u65f6\u8fdb\u884c\u6362\u5165\u6362\u51fa","title":"2"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab3/2/#2fifo","text":"\u5728do_pgfault()\u51fd\u6570\u4e2d\u589e\u52a0\u4ee5\u4e0b\u4ee3\u7801\uff1a else if ((*ptep & 1) == 0){ // if this pte is a swap entry, then load data from disk to a page with phy addr // and call page_insert to map the phy addr with logical addr if(swap_init_ok) { struct Page *page=NULL; if ((ret = swap_in(mm, addr, &page)) != 0) { cprintf(\"swap_in in do_pgfault failed\\n\"); goto failed; } page_insert(mm->pgdir, page, addr, perm); swap_map_swappable(mm, addr, page, 1); page->pra_vaddr = addr; } else { cprintf(\"no swap_init_ok but ptep is %x, failed\\n\",*ptep); goto failed; } } \u4ee3\u7801\u6267\u884c\u6b65\u9aa4\u4e3a\uff1a \u5982\u679c\u7269\u7406\u9875\u5728\u5916\u5b58\u4e2d\uff0c\u6362\u5165\u76f8\u5e94\u7684\u9875 \u66f4\u65b0\u9875\u8868\u7684\u6620\u5c04\u5173\u7cfb \u8bbe\u7f6e\u9875\u53ef\u4ea4\u6362 \u66f4\u65b0\u9875\u7684\u865a\u62df\u5730\u5740 \u5728\u6267\u884c\u7f3a\u9875\u6362\u5165\u7684FIFO\u7b97\u6cd5\u65f6\uff0c\u5728kern/mm/swap_fifo.c\u4e2d\uff0c\u4fee\u6539_fifo_map_swappable()\u51fd\u6570\u548c_fifo_swap_out_victim()\u51fd\u6570\uff1a static int _fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in) { list_entry_t *head=(list_entry_t*) mm->sm_priv; list_entry_t *entry=&(page->pra_page_link); assert(entry != NULL && head != NULL); //record the page access situlation /*LAB3 EXERCISE 2: YOUR CODE*/ //(1)link the most recent arrival page at the back of the pra_list_head qeueue. list_add(head, entry); return 0; } /* * (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the earliest arrival page in front of pra_list_head qeueue, * then set the addr of addr of this page to ptr_page. */ static int _fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick) { list_entry_t *head=(list_entry_t*) mm->sm_priv; assert(head != NULL); assert(in_tick==0); /* Select the victim */ /*LAB3 EXERCISE 2: YOUR CODE*/ //(1) unlink the earliest arrival page in front of pra_list_head qeueue //(2) set the addr of addr of this page to ptr_page list_entry_t *out = head->prev; assert(out != head); struct Page *page = le2page(out, pra_page_link); list_del(out); assert(page != NULL); *ptr_page = page; return 0; } \u5373\u6bcf\u6b21\u5728\u94fe\u8868\u5934\u90e8\u63d2\u5165\u76f8\u5e94\u7684\u7269\u7406\u9875\uff0c\u5220\u9664\u94fe\u8868\u672b\u5c3e\u7684\u9875\uff0c\u7ef4\u62a4FIFO\u961f\u5217\u3002 \u95ee\u98982.1\uff1a\u5982\u679c\u8981\u5728ucore\u4e0a\u5b9e\u73b0\"extended clock\u9875\u66ff\u6362\u7b97\u6cd5\"\u8bf7\u7ed9\u4f60\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u73b0\u6709\u7684swap_manager\u6846\u67b6\u662f\u5426\u8db3\u4ee5\u652f\u6301\u5728ucore\u4e2d\u5b9e\u73b0\u6b64\u7b97\u6cd5\uff1f\u5982\u679c\u662f\uff0c\u8bf7\u7ed9\u4f60\u7684\u8bbe\u8ba1\u65b9\u6848\u3002\u5982\u679c\u4e0d\u662f\uff0c\u8bf7\u7ed9\u51fa\u4f60\u7684\u65b0\u7684\u6269\u5c55\u548c\u57fa\u6b64\u6269\u5c55\u7684\u8bbe\u8ba1\u65b9\u6848\u3002\u5e76\u9700\u8981\u56de\u7b54\u5982\u4e0b\u95ee\u9898 \u9700\u8981\u88ab\u6362\u51fa\u7684\u9875\u7684\u7279\u5f81\u662f\u4ec0\u4e48\uff1f \u5728ucore\u4e2d\u5982\u4f55\u5224\u65ad\u5177\u6709\u8fd9\u6837\u7279\u5f81\u7684\u9875\uff1f \u4f55\u65f6\u8fdb\u884c\u6362\u5165\u548c\u6362\u51fa\u64cd\u4f5c\uff1f \u73b0\u6709\u7684\u6846\u67b6\u4e0d\u8db3\u4ee5\u652f\u6301extended clock\u66ff\u6362\u7b97\u6cd5\u3002\u539f\u56e0\u5982\u4e0b\uff1a\u73b0\u6709\u7684\u6846\u67b6\u4e2d\u6ca1\u6709\u52a8\u6001\u4fee\u6539\u8bbf\u95ee\u9875\u9762\u7684\u51fd\u6570\u3002\u9700\u8981\u5728\u73b0\u6709\u7684\u6846\u67b6\u4e2d\u52a0\u5165\u8bbf\u95ee\u67d0\u9875\u65f6\u7684\u51fd\u6570\uff0c\u52a8\u6001\u5730\u4fee\u6539\u9875\u9762\u7684\u8bbf\u95ee\u4f4d\u548c\u4fee\u6539\u4f4d\u3002 extended clock\u7b97\u6cd5\u7684\u6267\u884c\u8fc7\u7a0b\u4e3a\uff1a\u5c06\u88ab\u904d\u5386\u7684\u8282\u70b9\u7684\u8bbf\u95ee\u4f4d\u6216\u4fee\u6539\u4f4d\u6e05\u96f6\uff0c\u76f4\u5230\u627e\u5230\u5168\u4e3a0\u7684\u9875\u66ff\u6362\u3002\u88ab\u6362\u51fa\u7684\u9875\u5728\u76f8\u5e94\u7684\u65f6\u95f4\u95f4\u9694\u4e2d\uff0c\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\u6216\u4fee\u6539\u8fc7\u3002\u5982\u679c\u90fd\u88ab\u8bbf\u95ee\u6216\u4fee\u6539\u8fc7\uff0c\u5219extended clock\u7b97\u6cd5\u4f1a\u904d\u5386\u4e00\u904d\u540e\u627e\u5230\u6700\u5f00\u59cb\u7684\u9875 \u5728ucore\u4e2d\uff0c\u901a\u8fc7\u4ece\u5bf9\u5e94\u4f4d\u7f6e\u904d\u5386\uff0c\u5224\u65ad\u76f8\u5e94\u9875\u7684\u6807\u5fd7\u4f4d\u6765\u627e\u5230\u8fd9\u6837\u7684\u9875 \u5728\u7f3a\u9875\u5f02\u5e38\u53d1\u751f\u65f6\u8fdb\u884c\u6362\u5165\u6362\u51fa","title":"\u7ec3\u4e602\uff1a\u8865\u5145\u5b8c\u6210\u57fa\u4e8eFIFO\u7684\u9875\u9762\u66ff\u6362\u7b97\u6cd5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab3/data_struct/","text":"\u6570\u636e\u7ed3\u6784 \u865a\u5b58\u7ba1\u7406 struct vma_struct { // the set of vma using the same PDT struct mm_struct *vm_mm; uintptr_t vm_start; // start addr of vma uintptr_t vm_end; // end addr of vma uint32_t vm_flags; // flags of vma //linear list link which sorted by start addr of vma list_entry_t list_link; }; #define VM_READ 0x00000001 //\u53ea\u8bfb #define VM_WRITE 0x00000002 //\u53ef\u8bfb\u5199 #define VM_EXEC 0x00000004 //\u53ef\u6267\u884c struct mm_struct { // linear list link which sorted by start addr of vma list_entry_t mmap_list; // current accessed vma, used for speed purpose struct vma_struct *mmap_cache; pde_t *pgdir; // the PDT of these vma int map_count; // the count of these vma void *sm_priv; // the private data for swap manager };","title":"Data struct"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab3/data_struct/#_1","text":"\u865a\u5b58\u7ba1\u7406 struct vma_struct { // the set of vma using the same PDT struct mm_struct *vm_mm; uintptr_t vm_start; // start addr of vma uintptr_t vm_end; // end addr of vma uint32_t vm_flags; // flags of vma //linear list link which sorted by start addr of vma list_entry_t list_link; }; #define VM_READ 0x00000001 //\u53ea\u8bfb #define VM_WRITE 0x00000002 //\u53ef\u8bfb\u5199 #define VM_EXEC 0x00000004 //\u53ef\u6267\u884c struct mm_struct { // linear list link which sorted by start addr of vma list_entry_t mmap_list; // current accessed vma, used for speed purpose struct vma_struct *mmap_cache; pde_t *pgdir; // the PDT of these vma int map_count; // the count of these vma void *sm_priv; // the private data for swap manager };","title":"\u6570\u636e\u7ed3\u6784"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab3/my_note/","text":"\u7b14\u8bb0 check_pgfault() \u5728 check_pgfault() \u53ef\u4ee5\u770b\u5230\u4ea7\u751f\u9875\u5f02\u5e38\u65f6\uff0c\u662f\u5bf9\u5168\u5c40\u6307\u9488 check_mm_struct \u8fdb\u884c\u68c0\u67e5\uff0c\u4f46\u662f\u4ea7\u751f\u9875\u5f02\u5e38\u5bf9\u5e94\u7684\u9875\u76ee\u5f55\u5728CR3\u4e2d\uff0c\u6240\u4ee5\u8981\u4fdd\u6301 check_mm_struct->pgdir \u548cCR3\u4e2d\u7684\u9875\u76ee\u5f55\u5730\u5740\u76f8\u7b49\u3002 do_pgfault() \u4e2d\u65ad\u53f7 #define T_PGFLT 14 // page fault \u9519\u8bef\u7801\u7684\u4f4e\u4e09\u4f4d\u7684\u610f\u4e49\u5982\u4e0b\u3002lab3\u4e2d\u53ea\u68c0\u6d4b\u4e86\u6700\u4f4e2\u4f4d\uff0c\u53ea\u6709 (W/R=0, P=1)\u65f6\u76f4\u63a5\u5904\u7406\u5931\u8d25\uff0c\u5176\u4f59\u60c5\u51b5\u5747\u8981\u68c0\u6d4b vma->flags \u662f\u5426\u5141\u8bb8\u8bfb\u6216\u5199\u64cd\u4f5c\u3002 The P flag (bit 0) indicates whether the exception was due to a not-present page (0) or to either an access rights violation or the use of a reserved bit (1). The W/R flag (bit 1) indicates whether the memory access that caused the exception was a read (0) or write (1). The U/S flag (bit 2) indicates whether the processor was executing at user mode (1) or supervisor mode (0) at the time of the exception. \u5f53\u524d\u7269\u7406\u9875\u548c\u865a\u62df\u9875\u4ea7\u751f\u5173\u8054\u5171\u91c7\u7528\u4e86\u4e24\u79cd\u65b9\u6cd5\uff0c\u90fd\u662f\u5148\u901a\u8fc7 ptep = get_pte(pgdir, la, 1) \uff1a \u5728 boot_map_segment() \u4e2d\u7531\u4e8e\u5df2\u77e5pa\u4e0eva\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u4f7f\u7528 *ptep = pa | PTE_P | perm \u5728 page_insert() \u5219\u9700\u8981\u4f20\u5165\u4e00\u4e2a\u7a7a\u95f2pa\u7684\u5730\u5740\uff0c\u6700\u540e\u4e5f\u662f *ptep = page2pa(page) | PTE_P | perm swap_in() \u5f53pte\u8868\u793a\u786c\u76d8\u4e0a\u7684\u4fe1\u606f\u65f6\uff0c\u7ed3\u6784\u5982\u4e0b\u3002\u4e3a\u533a\u5206\u4e0e\u65e0\u6548pte\u7684\u533a\u522b\uff0cswap\u7684\u7b2c\u4e00\u4e2a\u9875\u4e0d\u4f7f\u7528\uff0c\u5373\u5f53pte_p\u4e3a0\u4e14offset\u4e0d\u4e3a0\u65f6\uff0cpte\u8868\u793a\u9875\u5230\u786c\u76d8\u6247\u533a\u7684\u4e00\u4e2a\u6620\u5c04\u3002offset\u8868\u793a\u786c\u76d8\u4e0a\u7684\u7b2coffset\u9875\u3002 swap_entry_t ------------------------- | offset | reserved | 0 | ------------------------- 24 bits 7 bits 1 bit swap_out() \u4f7f\u7528\u7684\u662f\u6d88\u6781\u7684\u6362\u51fa\u7b56\u7565\uff0c\u5728 alloc_pages() \u4e2d\u6709\u7a7a\u95f2\u5757\u4e0d\u591f\u65f6\uff0c\u6362\u51fa\u5df2\u6709\u5757\uff0c\u5982\u679c\u4e00\u76f4\u4e0d\u591f\uff0c\u5c06\u4e00\u76f4\u5faa\u73af\u3002 \u865a\u62df\u5730\u5740\u548c\u5bf9\u5e94\u7684\u786c\u76d8\u6247\u533a\u6709\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb\uff0c\u540e\u7eed\u663e\u7136\u4e0d\u80fd\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u5b58\u5728\u591a\u4e2a\u8fdb\u7a0b\u65f6\uff0c\u82e5\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u548c\u5f53\u524d\u7684\u76f8\u540c\u4e14\u5b58\u5728\u4e8e\u786c\u76d8\u4e2d\uff0c\u5c31\u65e0\u6cd5\u6362\u51fa\u3002 swap_check() \u8c03\u7528mm_create\u5efa\u7acbmm\u53d8\u91cf\uff0c\u5e76\u8c03\u7528vma_create\u521b\u5efavma\u53d8\u91cf\uff0c\u8bbe\u7f6e\u5408\u6cd5\u7684\u8bbf\u95ee\u8303\u56f4\u4e3a4KB\\~24KB\uff1b \u8c03\u7528free_page\u7b49\u64cd\u4f5c\uff0c\u6a21\u62df\u5f62\u6210\u4e00\u4e2a\u53ea\u67094\u4e2a\u7a7a\u95f2 physical page\uff1b\u5e76\u8bbe\u7f6e\u4e86\u4ece4KB\\~24KB\u7684\u8fde\u7eed5\u4e2a\u865a\u62df\u9875\u7684\u8bbf\u95ee\u64cd\u4f5c\uff1b \u8bbe\u7f6e\u8bb0\u5f55\u7f3a\u9875\u6b21\u6570\u7684\u53d8\u91cfpgfault_num=0\uff0c\u6267\u884ccheck_content_set\u51fd\u6570\uff0c\u4f7f\u5f97\u8d77\u59cb\u5730\u5740\u5206\u522b\u5bf9\u8d77\u59cb\u5730\u5740\u4e3a0x1000, 0x2000, 0x3000, 0x4000\u7684\u865a\u62df\u9875\u6309\u65f6\u95f4\u987a\u5e8f\u5148\u540e\u5199\u64cd\u4f5c\u8bbf\u95ee\uff0c\u7531\u4e8e\u4e4b\u524d\u6ca1\u6709\u5efa\u7acb\u9875\u8868\uff0c\u6240\u4ee5\u4f1a\u4ea7\u751fpage fault\u5f02\u5e38\uff0c\u5982\u679c\u5b8c\u6210\u7ec3\u4e601\uff0c\u5219\u8fd9\u4e9b\u4ece4KB\\~20KB\u76844\u865a\u62df\u9875\u4f1a\u4e0eucore\u4fdd\u5b58\u76844\u4e2a\u7269\u7406\u9875\u5e27\u5efa\u7acb\u6620\u5c04\u5173\u7cfb\uff1b \u7136\u540e\u5bf9\u865a\u9875\u5bf9\u5e94\u7684\u65b0\u4ea7\u751f\u7684\u9875\u8868\u9879\u8fdb\u884c\u5408\u6cd5\u6027\u68c0\u67e5\uff1b \u7136\u540e\u8fdb\u5165\u6d4b\u8bd5\u9875\u66ff\u6362\u7b97\u6cd5\u7684\u4e3b\u4f53\uff0c\u6267\u884c\u51fd\u6570check_content_access\uff0c\u5e76\u8fdb\u4e00\u6b65\u8c03\u7528\u5230_fifo_check_swap\u51fd\u6570\uff0c\u5982\u679c\u901a\u8fc7\u4e86\u6240\u6709\u7684assert\u3002\u8fd9\u8fdb\u4e00\u6b65\u8868\u793aFIFO\u9875\u66ff\u6362\u7b97\u6cd5\u57fa\u672c\u6b63\u786e\u5b9e\u73b0\uff1b \u6700\u540e\u6062\u590ducore\u73af\u5883\u3002","title":"My note"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab3/my_note/#_1","text":"check_pgfault() \u5728 check_pgfault() \u53ef\u4ee5\u770b\u5230\u4ea7\u751f\u9875\u5f02\u5e38\u65f6\uff0c\u662f\u5bf9\u5168\u5c40\u6307\u9488 check_mm_struct \u8fdb\u884c\u68c0\u67e5\uff0c\u4f46\u662f\u4ea7\u751f\u9875\u5f02\u5e38\u5bf9\u5e94\u7684\u9875\u76ee\u5f55\u5728CR3\u4e2d\uff0c\u6240\u4ee5\u8981\u4fdd\u6301 check_mm_struct->pgdir \u548cCR3\u4e2d\u7684\u9875\u76ee\u5f55\u5730\u5740\u76f8\u7b49\u3002 do_pgfault() \u4e2d\u65ad\u53f7 #define T_PGFLT 14 // page fault \u9519\u8bef\u7801\u7684\u4f4e\u4e09\u4f4d\u7684\u610f\u4e49\u5982\u4e0b\u3002lab3\u4e2d\u53ea\u68c0\u6d4b\u4e86\u6700\u4f4e2\u4f4d\uff0c\u53ea\u6709 (W/R=0, P=1)\u65f6\u76f4\u63a5\u5904\u7406\u5931\u8d25\uff0c\u5176\u4f59\u60c5\u51b5\u5747\u8981\u68c0\u6d4b vma->flags \u662f\u5426\u5141\u8bb8\u8bfb\u6216\u5199\u64cd\u4f5c\u3002 The P flag (bit 0) indicates whether the exception was due to a not-present page (0) or to either an access rights violation or the use of a reserved bit (1). The W/R flag (bit 1) indicates whether the memory access that caused the exception was a read (0) or write (1). The U/S flag (bit 2) indicates whether the processor was executing at user mode (1) or supervisor mode (0) at the time of the exception. \u5f53\u524d\u7269\u7406\u9875\u548c\u865a\u62df\u9875\u4ea7\u751f\u5173\u8054\u5171\u91c7\u7528\u4e86\u4e24\u79cd\u65b9\u6cd5\uff0c\u90fd\u662f\u5148\u901a\u8fc7 ptep = get_pte(pgdir, la, 1) \uff1a \u5728 boot_map_segment() \u4e2d\u7531\u4e8e\u5df2\u77e5pa\u4e0eva\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u4f7f\u7528 *ptep = pa | PTE_P | perm \u5728 page_insert() \u5219\u9700\u8981\u4f20\u5165\u4e00\u4e2a\u7a7a\u95f2pa\u7684\u5730\u5740\uff0c\u6700\u540e\u4e5f\u662f *ptep = page2pa(page) | PTE_P | perm swap_in() \u5f53pte\u8868\u793a\u786c\u76d8\u4e0a\u7684\u4fe1\u606f\u65f6\uff0c\u7ed3\u6784\u5982\u4e0b\u3002\u4e3a\u533a\u5206\u4e0e\u65e0\u6548pte\u7684\u533a\u522b\uff0cswap\u7684\u7b2c\u4e00\u4e2a\u9875\u4e0d\u4f7f\u7528\uff0c\u5373\u5f53pte_p\u4e3a0\u4e14offset\u4e0d\u4e3a0\u65f6\uff0cpte\u8868\u793a\u9875\u5230\u786c\u76d8\u6247\u533a\u7684\u4e00\u4e2a\u6620\u5c04\u3002offset\u8868\u793a\u786c\u76d8\u4e0a\u7684\u7b2coffset\u9875\u3002 swap_entry_t ------------------------- | offset | reserved | 0 | ------------------------- 24 bits 7 bits 1 bit swap_out() \u4f7f\u7528\u7684\u662f\u6d88\u6781\u7684\u6362\u51fa\u7b56\u7565\uff0c\u5728 alloc_pages() \u4e2d\u6709\u7a7a\u95f2\u5757\u4e0d\u591f\u65f6\uff0c\u6362\u51fa\u5df2\u6709\u5757\uff0c\u5982\u679c\u4e00\u76f4\u4e0d\u591f\uff0c\u5c06\u4e00\u76f4\u5faa\u73af\u3002 \u865a\u62df\u5730\u5740\u548c\u5bf9\u5e94\u7684\u786c\u76d8\u6247\u533a\u6709\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb\uff0c\u540e\u7eed\u663e\u7136\u4e0d\u80fd\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u5b58\u5728\u591a\u4e2a\u8fdb\u7a0b\u65f6\uff0c\u82e5\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u548c\u5f53\u524d\u7684\u76f8\u540c\u4e14\u5b58\u5728\u4e8e\u786c\u76d8\u4e2d\uff0c\u5c31\u65e0\u6cd5\u6362\u51fa\u3002 swap_check() \u8c03\u7528mm_create\u5efa\u7acbmm\u53d8\u91cf\uff0c\u5e76\u8c03\u7528vma_create\u521b\u5efavma\u53d8\u91cf\uff0c\u8bbe\u7f6e\u5408\u6cd5\u7684\u8bbf\u95ee\u8303\u56f4\u4e3a4KB\\~24KB\uff1b \u8c03\u7528free_page\u7b49\u64cd\u4f5c\uff0c\u6a21\u62df\u5f62\u6210\u4e00\u4e2a\u53ea\u67094\u4e2a\u7a7a\u95f2 physical page\uff1b\u5e76\u8bbe\u7f6e\u4e86\u4ece4KB\\~24KB\u7684\u8fde\u7eed5\u4e2a\u865a\u62df\u9875\u7684\u8bbf\u95ee\u64cd\u4f5c\uff1b \u8bbe\u7f6e\u8bb0\u5f55\u7f3a\u9875\u6b21\u6570\u7684\u53d8\u91cfpgfault_num=0\uff0c\u6267\u884ccheck_content_set\u51fd\u6570\uff0c\u4f7f\u5f97\u8d77\u59cb\u5730\u5740\u5206\u522b\u5bf9\u8d77\u59cb\u5730\u5740\u4e3a0x1000, 0x2000, 0x3000, 0x4000\u7684\u865a\u62df\u9875\u6309\u65f6\u95f4\u987a\u5e8f\u5148\u540e\u5199\u64cd\u4f5c\u8bbf\u95ee\uff0c\u7531\u4e8e\u4e4b\u524d\u6ca1\u6709\u5efa\u7acb\u9875\u8868\uff0c\u6240\u4ee5\u4f1a\u4ea7\u751fpage fault\u5f02\u5e38\uff0c\u5982\u679c\u5b8c\u6210\u7ec3\u4e601\uff0c\u5219\u8fd9\u4e9b\u4ece4KB\\~20KB\u76844\u865a\u62df\u9875\u4f1a\u4e0eucore\u4fdd\u5b58\u76844\u4e2a\u7269\u7406\u9875\u5e27\u5efa\u7acb\u6620\u5c04\u5173\u7cfb\uff1b \u7136\u540e\u5bf9\u865a\u9875\u5bf9\u5e94\u7684\u65b0\u4ea7\u751f\u7684\u9875\u8868\u9879\u8fdb\u884c\u5408\u6cd5\u6027\u68c0\u67e5\uff1b \u7136\u540e\u8fdb\u5165\u6d4b\u8bd5\u9875\u66ff\u6362\u7b97\u6cd5\u7684\u4e3b\u4f53\uff0c\u6267\u884c\u51fd\u6570check_content_access\uff0c\u5e76\u8fdb\u4e00\u6b65\u8c03\u7528\u5230_fifo_check_swap\u51fd\u6570\uff0c\u5982\u679c\u901a\u8fc7\u4e86\u6240\u6709\u7684assert\u3002\u8fd9\u8fdb\u4e00\u6b65\u8868\u793aFIFO\u9875\u66ff\u6362\u7b97\u6cd5\u57fa\u672c\u6b63\u786e\u5b9e\u73b0\uff1b \u6700\u540e\u6062\u590ducore\u73af\u5883\u3002","title":"\u7b14\u8bb0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab4/1/","text":"\u7ec3\u4e601\uff1a\u5206\u914d\u5e76\u521d\u59cb\u5316\u4e00\u4e2a\u8fdb\u7a0b\u63a7\u5236\u5757 \u5728kern/process/proc.c\u4e2d\u5b8c\u6210alloc_proc()\u51fd\u6570\u3002\u4ee3\u7801\u4e3a\uff1a proc->state = PROC_UNINIT; proc->pid = -1; proc->runs = 0; proc->kstack = 0; proc->need_resched = 0; proc->parent = NULL; proc->mm = NULL; memset(&(proc->context), 0, sizeof(struct context)); proc->tf = NULL; proc->cr3 = boot_cr3; proc->flags = 0; memset(proc->name, 0, PROC_NAME_LEN); \u8be5\u51fd\u6570\u4e3b\u8981\u5bf9state/pid/runs/kstack/need_resched/parent/mm/context/tf/cr3/flags/name\u7b49\u53d8\u91cf\u8fdb\u884c\u521d\u59cb\u5316\u64cd\u4f5c\u3002 \u95ee\u98981.1\uff1a\u8bf7\u8bf4\u660eproc_struct\u4e2dstruct context context\u548cstruct trapframe *tf\u6210\u5458\u53d8\u91cf\u542b\u4e49\u548c\u5728\u672c\u5b9e\u9a8c\u4e2d\u7684\u4f5c\u7528\u662f\uff1f context\u4f5c\u7528\u65f6\u5728\u8fdb\u884c\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4fdd\u5b58\u5f53\u524d\u5bc4\u5b58\u5668\u7684\u503c\u3002\u5176\u5b9a\u4e49\u5728kern/process/proc.h\u4e2d\uff1a struct context { uint32_t eip; uint32_t esp; uint32_t ebx; uint32_t ecx; uint32_t edx; uint32_t esi; uint32_t edi; uint32_t ebp; }; trapframe *tf\u7528\u4e8e\u8bb0\u5f55\u53d1\u751f\u4e2d\u65ad\u4e4b\u524d\u7684\u6808\u5e27\u7684\u5185\u5bb9\uff0c\u5176\u4e2d\u4e00\u90e8\u5206\u4e3a\u786c\u4ef6\u4fdd\u5b58\u3002\u5b9a\u4e49\u5728kern/trap/trap.h\u4e2d\uff1a struct trapframe { struct pushregs tf_regs; uint16_t tf_gs; uint16_t tf_padding0; uint16_t tf_fs; uint16_t tf_padding1; uint16_t tf_es; uint16_t tf_padding2; uint16_t tf_ds; uint16_t tf_padding3; uint32_t tf_trapno; /* below here defined by x86 hardware */ uint32_t tf_err; uintptr_t tf_eip; uint16_t tf_cs; uint16_t tf_padding4; uint32_t tf_eflags; /* below here only when crossing rings, such as from user to kernel */ uintptr_t tf_esp; uint16_t tf_ss; uint16_t tf_padding5; } __attribute__((packed));","title":"1"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab4/1/#1","text":"\u5728kern/process/proc.c\u4e2d\u5b8c\u6210alloc_proc()\u51fd\u6570\u3002\u4ee3\u7801\u4e3a\uff1a proc->state = PROC_UNINIT; proc->pid = -1; proc->runs = 0; proc->kstack = 0; proc->need_resched = 0; proc->parent = NULL; proc->mm = NULL; memset(&(proc->context), 0, sizeof(struct context)); proc->tf = NULL; proc->cr3 = boot_cr3; proc->flags = 0; memset(proc->name, 0, PROC_NAME_LEN); \u8be5\u51fd\u6570\u4e3b\u8981\u5bf9state/pid/runs/kstack/need_resched/parent/mm/context/tf/cr3/flags/name\u7b49\u53d8\u91cf\u8fdb\u884c\u521d\u59cb\u5316\u64cd\u4f5c\u3002 \u95ee\u98981.1\uff1a\u8bf7\u8bf4\u660eproc_struct\u4e2dstruct context context\u548cstruct trapframe *tf\u6210\u5458\u53d8\u91cf\u542b\u4e49\u548c\u5728\u672c\u5b9e\u9a8c\u4e2d\u7684\u4f5c\u7528\u662f\uff1f context\u4f5c\u7528\u65f6\u5728\u8fdb\u884c\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4fdd\u5b58\u5f53\u524d\u5bc4\u5b58\u5668\u7684\u503c\u3002\u5176\u5b9a\u4e49\u5728kern/process/proc.h\u4e2d\uff1a struct context { uint32_t eip; uint32_t esp; uint32_t ebx; uint32_t ecx; uint32_t edx; uint32_t esi; uint32_t edi; uint32_t ebp; }; trapframe *tf\u7528\u4e8e\u8bb0\u5f55\u53d1\u751f\u4e2d\u65ad\u4e4b\u524d\u7684\u6808\u5e27\u7684\u5185\u5bb9\uff0c\u5176\u4e2d\u4e00\u90e8\u5206\u4e3a\u786c\u4ef6\u4fdd\u5b58\u3002\u5b9a\u4e49\u5728kern/trap/trap.h\u4e2d\uff1a struct trapframe { struct pushregs tf_regs; uint16_t tf_gs; uint16_t tf_padding0; uint16_t tf_fs; uint16_t tf_padding1; uint16_t tf_es; uint16_t tf_padding2; uint16_t tf_ds; uint16_t tf_padding3; uint32_t tf_trapno; /* below here defined by x86 hardware */ uint32_t tf_err; uintptr_t tf_eip; uint16_t tf_cs; uint16_t tf_padding4; uint32_t tf_eflags; /* below here only when crossing rings, such as from user to kernel */ uintptr_t tf_esp; uint16_t tf_ss; uint16_t tf_padding5; } __attribute__((packed));","title":"\u7ec3\u4e601\uff1a\u5206\u914d\u5e76\u521d\u59cb\u5316\u4e00\u4e2a\u8fdb\u7a0b\u63a7\u5236\u5757"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab4/2/","text":"\u7ec3\u4e602\uff1a\u4e3a\u65b0\u521b\u5efa\u7684\u5185\u6838\u7ebf\u7a0b\u5206\u914d\u8d44\u6e90 \u5728kern/process/proc.c\u4e2d\u5b8c\u6210do_fork()\u51fd\u6570\uff0c\u589e\u52a0\u4ee5\u4e0b\u4ee3\u7801\uff1a proc = alloc_proc(); if(proc == NULL) goto fork_out; proc->parent = current; if(setup_kstack(proc) != 0) goto bad_fork_cleanup_proc; if(copy_mm(clone_flags, proc) != 0) goto bad_fork_cleanup_kstack; copy_thread(proc, stack, tf); bool flag; local_intr_save(flag); { proc->pid = get_pid(); hash_proc(proc); list_add(&proc_list, &(proc->list_link)); nr_process++; } local_intr_restore(flag); wakeup_proc(proc); ret = proc->pid; \u4ee3\u7801\u6267\u884c\u6b65\u9aa4\u4e3a\uff1a \u5206\u914d\u5e76\u521d\u59cb\u5316\u8fdb\u7a0b\u63a7\u5236\u5757\uff08alloc_proc\u51fd\u6570\uff09\uff1b \u5206\u914d\u5e76\u521d\u59cb\u5316\u5185\u6838\u6808\uff08setup_stack\u51fd\u6570\uff09\uff1b \u6839\u636eclone_flag\u6807\u5fd7\u590d\u5236\u6216\u5171\u4eab\u8fdb\u7a0b\u5185\u5b58\u7ba1\u7406\u7ed3\u6784\uff08copy_mm\u51fd\u6570\uff09\uff1b \u8bbe\u7f6e\u8fdb\u7a0b\u5728\u5185\u6838\uff08\u5c06\u6765\u4e5f\u5305\u62ec\u7528\u6237\u6001\uff09\u6b63\u5e38\u8fd0\u884c\u548c\u8c03\u5ea6\u6240\u9700\u7684\u4e2d\u65ad\u5e27\u548c\u6267\u884c\u4e0a\u4e0b\u6587\uff08copy_thread\u51fd\u6570\uff09\uff1b \u628a\u8bbe\u7f6e\u597d\u7684\u8fdb\u7a0b\u63a7\u5236\u5757\u653e\u5165hash_list\u548cproc_list\u4e24\u4e2a\u5168\u5c40\u8fdb\u7a0b\u94fe\u8868\u4e2d\uff1b \u81ea\u6b64\uff0c\u8fdb\u7a0b\u5df2\u7ecf\u51c6\u5907\u597d\u6267\u884c\u4e86\uff0c\u628a\u8fdb\u7a0b\u72b6\u6001\u8bbe\u7f6e\u4e3a\u201c\u5c31\u7eea\u201d\u6001\uff1b \u8bbe\u7f6e\u8fd4\u56de\u7801\u4e3a\u5b50\u8fdb\u7a0b\u7684id\u53f7\u3002 \u95ee\u98982.1\uff1a\u8bf7\u8bf4\u660eucore\u662f\u5426\u505a\u5230\u7ed9\u6bcf\u4e2a\u65b0fork\u7684\u7ebf\u7a0b\u4e00\u4e2a\u552f\u4e00\u7684id\uff1f\u8bf7\u8bf4\u660e\u4f60\u7684\u5206\u6790\u548c\u7406\u7531\u3002 \u662f\u3002\u5728do_fork\u51fd\u6570\u4e2d\uff0c\u901a\u8fc7get_pid\u51fd\u6570\u4e3a\u65b0\u8fdb\u7a0b\u5206\u914d\u4e00\u4e2apid\u3002\u800c\u5728get_pid\u7684\u5b9e\u73b0\u4e2d\uff0c\u901a\u8fc7\u904d\u5386\u8fdb\u7a0b\u94fe\u8868\uff0c\u627e\u5230\u4e00\u4e2a\u552f\u4e00\u7684pid\u8fd4\u56de\u3002","title":"2"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab4/2/#2","text":"\u5728kern/process/proc.c\u4e2d\u5b8c\u6210do_fork()\u51fd\u6570\uff0c\u589e\u52a0\u4ee5\u4e0b\u4ee3\u7801\uff1a proc = alloc_proc(); if(proc == NULL) goto fork_out; proc->parent = current; if(setup_kstack(proc) != 0) goto bad_fork_cleanup_proc; if(copy_mm(clone_flags, proc) != 0) goto bad_fork_cleanup_kstack; copy_thread(proc, stack, tf); bool flag; local_intr_save(flag); { proc->pid = get_pid(); hash_proc(proc); list_add(&proc_list, &(proc->list_link)); nr_process++; } local_intr_restore(flag); wakeup_proc(proc); ret = proc->pid; \u4ee3\u7801\u6267\u884c\u6b65\u9aa4\u4e3a\uff1a \u5206\u914d\u5e76\u521d\u59cb\u5316\u8fdb\u7a0b\u63a7\u5236\u5757\uff08alloc_proc\u51fd\u6570\uff09\uff1b \u5206\u914d\u5e76\u521d\u59cb\u5316\u5185\u6838\u6808\uff08setup_stack\u51fd\u6570\uff09\uff1b \u6839\u636eclone_flag\u6807\u5fd7\u590d\u5236\u6216\u5171\u4eab\u8fdb\u7a0b\u5185\u5b58\u7ba1\u7406\u7ed3\u6784\uff08copy_mm\u51fd\u6570\uff09\uff1b \u8bbe\u7f6e\u8fdb\u7a0b\u5728\u5185\u6838\uff08\u5c06\u6765\u4e5f\u5305\u62ec\u7528\u6237\u6001\uff09\u6b63\u5e38\u8fd0\u884c\u548c\u8c03\u5ea6\u6240\u9700\u7684\u4e2d\u65ad\u5e27\u548c\u6267\u884c\u4e0a\u4e0b\u6587\uff08copy_thread\u51fd\u6570\uff09\uff1b \u628a\u8bbe\u7f6e\u597d\u7684\u8fdb\u7a0b\u63a7\u5236\u5757\u653e\u5165hash_list\u548cproc_list\u4e24\u4e2a\u5168\u5c40\u8fdb\u7a0b\u94fe\u8868\u4e2d\uff1b \u81ea\u6b64\uff0c\u8fdb\u7a0b\u5df2\u7ecf\u51c6\u5907\u597d\u6267\u884c\u4e86\uff0c\u628a\u8fdb\u7a0b\u72b6\u6001\u8bbe\u7f6e\u4e3a\u201c\u5c31\u7eea\u201d\u6001\uff1b \u8bbe\u7f6e\u8fd4\u56de\u7801\u4e3a\u5b50\u8fdb\u7a0b\u7684id\u53f7\u3002 \u95ee\u98982.1\uff1a\u8bf7\u8bf4\u660eucore\u662f\u5426\u505a\u5230\u7ed9\u6bcf\u4e2a\u65b0fork\u7684\u7ebf\u7a0b\u4e00\u4e2a\u552f\u4e00\u7684id\uff1f\u8bf7\u8bf4\u660e\u4f60\u7684\u5206\u6790\u548c\u7406\u7531\u3002 \u662f\u3002\u5728do_fork\u51fd\u6570\u4e2d\uff0c\u901a\u8fc7get_pid\u51fd\u6570\u4e3a\u65b0\u8fdb\u7a0b\u5206\u914d\u4e00\u4e2apid\u3002\u800c\u5728get_pid\u7684\u5b9e\u73b0\u4e2d\uff0c\u901a\u8fc7\u904d\u5386\u8fdb\u7a0b\u94fe\u8868\uff0c\u627e\u5230\u4e00\u4e2a\u552f\u4e00\u7684pid\u8fd4\u56de\u3002","title":"\u7ec3\u4e602\uff1a\u4e3a\u65b0\u521b\u5efa\u7684\u5185\u6838\u7ebf\u7a0b\u5206\u914d\u8d44\u6e90"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab4/3/","text":"\u7ec3\u4e603\uff1a\u9605\u8bfb\u4ee3\u7801\uff0c\u7406\u89e3proc_run\u51fd\u6570\u548c\u5b83\u8c03\u7528\u7684\u51fd\u6570\u5982\u4f55\u5b8c\u6210\u8fdb\u7a0b\u5207\u6362\u7684. \u4ee3\u7801\u7684\u6267\u884c\u8fc7\u7a0b\u5982\u4e0b\uff1a \u9996\u5148\u5224\u65ad\u9700\u8981\u5207\u6362\u7684\u8fdb\u7a0b\u662f\u5426\u4e3a\u5f53\u524d\u8fdb\u7a0b \u5173\u4e2d\u65ad \u8bbe\u7f6ecurrent\u4e3a\u9700\u8981\u8fd0\u884c\u7684\u8fdb\u7a0b \u5207\u6362\u6808 \u8bbe\u7f6eCR3\u5bc4\u5b58\u5668 \u4fdd\u5b58\u6062\u590d\u901a\u7528\u5bc4\u5b58\u5668 \u5f00\u4e2d\u65ad \u95ee\u98983.1\uff1a\u5728\u672c\u5b9e\u9a8c\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u521b\u5efa\u4e14\u8fd0\u884c\u4e86\u51e0\u4e2a\u5185\u6838\u7ebf\u7a0b\uff1f \u4e24\u4e2a\u3002\u7b2c\u4e00\u4e2a\u4e3aidle\u7ebf\u7a0b\uff0c\u7b2c\u4e8c\u4e2a\u4e3ainit\u7ebf\u7a0b \u95ee\u98983.2\uff1a\u8bed\u53e5local_intr_save(intr_flag);....local_intr_restore(intr_flag);\u5728\u8fd9\u91cc\u6709\u4f55\u4f5c\u7528?\u8bf7\u8bf4\u660e\u7406\u7531 \u7528\u4e8e\u5173\u4e2d\u65ad\u548c\u5f00\u4e2d\u65ad\u3002\u4f7f\u5728\u5207\u6362\u8fdb\u7a0b\u7684\u8fc7\u7a0b\u4e2d\u4e0d\u88ab\u4e2d\u65ad\u6253\u65ad\u3002","title":"3"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab4/3/#3proc_run","text":"\u4ee3\u7801\u7684\u6267\u884c\u8fc7\u7a0b\u5982\u4e0b\uff1a \u9996\u5148\u5224\u65ad\u9700\u8981\u5207\u6362\u7684\u8fdb\u7a0b\u662f\u5426\u4e3a\u5f53\u524d\u8fdb\u7a0b \u5173\u4e2d\u65ad \u8bbe\u7f6ecurrent\u4e3a\u9700\u8981\u8fd0\u884c\u7684\u8fdb\u7a0b \u5207\u6362\u6808 \u8bbe\u7f6eCR3\u5bc4\u5b58\u5668 \u4fdd\u5b58\u6062\u590d\u901a\u7528\u5bc4\u5b58\u5668 \u5f00\u4e2d\u65ad \u95ee\u98983.1\uff1a\u5728\u672c\u5b9e\u9a8c\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u521b\u5efa\u4e14\u8fd0\u884c\u4e86\u51e0\u4e2a\u5185\u6838\u7ebf\u7a0b\uff1f \u4e24\u4e2a\u3002\u7b2c\u4e00\u4e2a\u4e3aidle\u7ebf\u7a0b\uff0c\u7b2c\u4e8c\u4e2a\u4e3ainit\u7ebf\u7a0b \u95ee\u98983.2\uff1a\u8bed\u53e5local_intr_save(intr_flag);....local_intr_restore(intr_flag);\u5728\u8fd9\u91cc\u6709\u4f55\u4f5c\u7528?\u8bf7\u8bf4\u660e\u7406\u7531 \u7528\u4e8e\u5173\u4e2d\u65ad\u548c\u5f00\u4e2d\u65ad\u3002\u4f7f\u5728\u5207\u6362\u8fdb\u7a0b\u7684\u8fc7\u7a0b\u4e2d\u4e0d\u88ab\u4e2d\u65ad\u6253\u65ad\u3002","title":"\u7ec3\u4e603\uff1a\u9605\u8bfb\u4ee3\u7801\uff0c\u7406\u89e3proc_run\u51fd\u6570\u548c\u5b83\u8c03\u7528\u7684\u51fd\u6570\u5982\u4f55\u5b8c\u6210\u8fdb\u7a0b\u5207\u6362\u7684."},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab4/data_struct/","text":"\u6570\u636e\u7ed3\u6784 PCB struct proc_struct { enum proc_state state; // Process state int pid; // Process ID int runs; // the running times of Proces uintptr_t kstack; // Process kernel stack volatile bool need_resched; // bool value: need to be rescheduled to release CPU? struct proc_struct *parent; // the parent process struct mm_struct *mm; // Process's memory management field struct context context; // Switch here to run process struct trapframe *tf; // Trap frame for current interrupt uintptr_t cr3; // CR3 register: the base addr of Page Directroy Table(PDT) uint32_t flags; // Process flag char name[PROC_NAME_LEN + 1]; // Process name list_entry_t list_link; // Process link list list_entry_t hash_link; // Process hash list }; context struct context { uint32_t eip; uint32_t esp; uint32_t ebx; uint32_t ecx; uint32_t edx; uint32_t esi; uint32_t edi; uint32_t ebp; };","title":"Data struct"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab4/data_struct/#_1","text":"PCB struct proc_struct { enum proc_state state; // Process state int pid; // Process ID int runs; // the running times of Proces uintptr_t kstack; // Process kernel stack volatile bool need_resched; // bool value: need to be rescheduled to release CPU? struct proc_struct *parent; // the parent process struct mm_struct *mm; // Process's memory management field struct context context; // Switch here to run process struct trapframe *tf; // Trap frame for current interrupt uintptr_t cr3; // CR3 register: the base addr of Page Directroy Table(PDT) uint32_t flags; // Process flag char name[PROC_NAME_LEN + 1]; // Process name list_entry_t list_link; // Process link list list_entry_t hash_link; // Process hash list }; context struct context { uint32_t eip; uint32_t esp; uint32_t ebx; uint32_t ecx; uint32_t edx; uint32_t esi; uint32_t edi; uint32_t ebp; };","title":"\u6570\u636e\u7ed3\u6784"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab4/my_note/","text":"\u7b14\u8bb0 kmalloc() \u7531\u539f\u5148\u7684\u63094KB\u7684\u500d\u6570\u5206\u914d\uff0c\u6539\u4e3a\u4f7f\u7528slub\u7b97\u6cd5\u5206\u914d\u66f4\u5c0f\u7c92\u5ea6\u7684\u5185\u5b58\u5757\u3002 copy_thread() \u5185\u6838\u7ebf\u7a0b\u7684 tf->tf_esp \u4e3a0\uff0c\u7531\u6b64cpu\u5728 iret \u65f6\u4e0d\u4f1a\u5207\u6362\u7279\u6743\u7ea7\uff0c\u4ecd\u8fd0\u884c\u5728\u5185\u6838\u6001\u3002 forkrets forkrets \u662f\u5728 forkret() \u4e2d\u8fdb\u884c\u8c03\u7528\u7684\uff0c\u6240\u4ee5\u6709 movl 4(%esp), %esp \u9057\u7559\u95ee\u9898 forkrets \u7ecf forkret() \u8c03\u7528\u6709\u4ec0\u4e48\u610f\u4e49\u3002","title":"My note"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab4/my_note/#_1","text":"kmalloc() \u7531\u539f\u5148\u7684\u63094KB\u7684\u500d\u6570\u5206\u914d\uff0c\u6539\u4e3a\u4f7f\u7528slub\u7b97\u6cd5\u5206\u914d\u66f4\u5c0f\u7c92\u5ea6\u7684\u5185\u5b58\u5757\u3002 copy_thread() \u5185\u6838\u7ebf\u7a0b\u7684 tf->tf_esp \u4e3a0\uff0c\u7531\u6b64cpu\u5728 iret \u65f6\u4e0d\u4f1a\u5207\u6362\u7279\u6743\u7ea7\uff0c\u4ecd\u8fd0\u884c\u5728\u5185\u6838\u6001\u3002 forkrets forkrets \u662f\u5728 forkret() \u4e2d\u8fdb\u884c\u8c03\u7528\u7684\uff0c\u6240\u4ee5\u6709 movl 4(%esp), %esp \u9057\u7559\u95ee\u9898 forkrets \u7ecf forkret() \u8c03\u7528\u6709\u4ec0\u4e48\u610f\u4e49\u3002","title":"\u7b14\u8bb0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/data_struct/","text":"\u6570\u636e\u7ed3\u6784 #define SYS_exit 1 #define SYS_fork 2 #define SYS_wait 3 #define SYS_exec 4 #define SYS_clone 5 #define SYS_yield 10 #define SYS_sleep 11 #define SYS_kill 12 #define SYS_gettime 17 #define SYS_getpid 18 #define SYS_brk 19 #define SYS_mmap 20 #define SYS_munmap 21 #define SYS_shmem 22 #define SYS_putc 30 #define SYS_pgdir 31 struct mm_struct { list_entry_t mmap_list; // linear list link which sorted by start addr of vma struct vma_struct *mmap_cache; // current accessed vma, used for speed purpose pde_t *pgdir; // the PDT of these vma int map_count; // the count of these vma void *sm_priv; // the private data for swap manager int mm_count; // the number ofprocess which shared the mm lock_t mm_lock; // mutex for using dup_mmap fun to duplicat the mm };","title":"Data struct"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/data_struct/#_1","text":"#define SYS_exit 1 #define SYS_fork 2 #define SYS_wait 3 #define SYS_exec 4 #define SYS_clone 5 #define SYS_yield 10 #define SYS_sleep 11 #define SYS_kill 12 #define SYS_gettime 17 #define SYS_getpid 18 #define SYS_brk 19 #define SYS_mmap 20 #define SYS_munmap 21 #define SYS_shmem 22 #define SYS_putc 30 #define SYS_pgdir 31 struct mm_struct { list_entry_t mmap_list; // linear list link which sorted by start addr of vma struct vma_struct *mmap_cache; // current accessed vma, used for speed purpose pde_t *pgdir; // the PDT of these vma int map_count; // the count of these vma void *sm_priv; // the private data for swap manager int mm_count; // the number ofprocess which shared the mm lock_t mm_lock; // mutex for using dup_mmap fun to duplicat the mm };","title":"\u6570\u636e\u7ed3\u6784"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/lab5/","text":"Lab5 Report \u7ec3\u4e601\uff1a\u52a0\u8f7d\u5e94\u7528\u7a0b\u5e8f\u5e76\u6267\u884c \u5728kern/process/proc.c\u4e2d\u8865\u5145load_icode()\u51fd\u6570\u3002\u4ee3\u7801\u4e3a\uff1a tf->tf_cs = USER_CS; tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS; tf->tf_esp = USTACKTOP; tf->tf_eip = elf->e_entry; tf->tf_eflags = FL_IF; \u5b8c\u6210\u5bf9trapframe\u4e2d\u4ee3\u7801\u6bb5\u3001\u6570\u636e\u6bb5\u7684\u521d\u59cb\u5316\u3002 \u95ee\u98981.1\uff1a\u63cf\u8ff0\u5f53\u521b\u5efa\u4e00\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u5e76\u52a0\u8f7d\u4e86\u5e94\u7528\u7a0b\u5e8f\u540e\uff0cCPU\u662f\u5982\u4f55\u8ba9\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u6700\u7ec8\u5728\u7528\u6237\u6001\u6267\u884c\u8d77\u6765\u7684\u3002\u5373\u8fd9\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u88abucore\u9009\u62e9\u5360\u7528CPU\u6267\u884c\uff08RUNNING\u6001\uff09\u5230\u5177\u4f53\u6267\u884c\u5e94\u7528\u7a0b\u5e8f\u7b2c\u4e00\u6761\u6307\u4ee4\u7684\u6574\u4e2a\u7ecf\u8fc7\u3002 \u901a\u8fc7schedule\u627e\u5230\u9700\u8981\u6267\u884c\u7684\u8fdb\u7a0b\u6216\u7ebf\u7a0b \u8c03\u7528proc_run\uff0c\u5207\u6362\u6808\u548c\u9875\u8868\uff0c\u8c03\u7528switch_to\u51fd\u6570\u5207\u6362\u4e0a\u4e0b\u6587 switch_to\u51fd\u6570\u8fd4\u56de\u81f3forkret\uff0c\u8fdb\u800c\u6267\u884cforkrets\u51fd\u6570 \u8bbe\u7f6e\u6808\u6307\u9488\uff0c\u5f39\u51fa\u6bb5\u5bc4\u5b58\u5668\uff0c\u6267\u884ctf->tf_eip\u7684\u6307\u4ee4 \u7531\u4e8etf->tf_eip\u88ab\u8bbe\u7f6e\u4e3a\u4e86elf->e_entry\uff0c\u4ece\u800c\u5f00\u59cb\u6267\u884c\u7528\u6237\u7a0b\u5e8f \u7ec3\u4e602\uff1a\u7236\u8fdb\u7a0b\u590d\u5236\u81ea\u5df1\u7684\u5185\u5b58\u7a7a\u95f4\u7ed9\u5b50\u8fdb\u7a0b \u5728kern/mm/pmm.c\u4e2d\u5b8c\u6210copy_range()\u51fd\u6570\uff0c\u589e\u52a0\u4ee5\u4e0b\u4ee3\u7801\uff1a void *src_kvaddr = page2kva(page); void *dst_kvaddr = page2kva(npage); memcpy(dst_kvaddr, src_kvaddr, PGSIZE); ret = page_insert(to, npage, start, perm); \u4ee3\u7801\u6267\u884c\u6b65\u9aa4\u4e3a\uff1a \u83b7\u5f97\u6e90\u9875\u3001\u76ee\u6807\u9875\u5730\u5740 \u7528memcpy\u8fdb\u884c\u62f7\u8d1d \u8bbe\u7f6e\u4e0e\u7269\u7406\u9875\u7684\u6620\u5c04\u5173\u7cfb \u95ee\u98982.1\uff1a\u8bf7\u5728\u5b9e\u9a8c\u62a5\u544a\u4e2d\u7b80\u8981\u8bf4\u660e\u5982\u4f55\u8bbe\u8ba1\u5b9e\u73b0\u201dCopy on Write \u673a\u5236\u201c\uff0c\u7ed9\u51fa\u6982\u8981\u8bbe\u8ba1\uff0c\u9f13\u52b1\u7ed9\u51fa\u8be6\u7ec6\u8bbe\u8ba1\u3002 \u5728copy_range\u51fd\u6570\u4e2d\uff0c\u4e0d\u76f4\u63a5\u62f7\u8d1d\uff0c\u800c\u662f\u7528\u4e00\u4e2a\u6807\u8bb0\u4e3a\u8868\u793a\u6b64\u9875\u88ab\u591a\u4e2a\u4f7f\u7528\u8005\u8bbf\u95ee\u3002\u5f53\u8fdb\u884c\u8bfb\u64cd\u4f5c\u65f6\uff0c\u53ef\u4ee5\u5171\u4eab\u8d44\u6e90\u3002\u5f53\u8fdb\u884c\u5199\u64cd\u4f5c\u65f6\uff0c\u901a\u8fc7\u5224\u65ad\u6b64\u9875\u662f\u5426\u5171\u4eab\uff0c\u518d\u8fdb\u884c\u62f7\u8d1d\u7684\u64cd\u4f5c\u3002 \u7ec3\u4e603\uff1a\u9605\u8bfb\u5206\u6790\u6e90\u4ee3\u7801\uff0c\u7406\u89e3\u8fdb\u7a0b\u6267\u884c fork/exec/wait/exit \u7684\u5b9e\u73b0\uff0c\u4ee5\u53ca\u7cfb\u7edf\u8c03\u7528\u7684\u5b9e\u73b0 fork: \u901a\u8fc7do_fork\u51fd\u6570\u5b9e\u73b0\uff0c\u5206\u914d\u8fdb\u7a0b\u7684TCB\u548cpid\uff0c\u5728\u94fe\u8868\u4e2d\u52a0\u5165\u6b64\u8fdb\u7a0b\uff0c\u6700\u540e\u901a\u8fc7wakeup_proc\u5524\u9192\u8fdb\u7a0b exec: \u901a\u8fc7do_execve\u51fd\u6570\u5b9e\u73b0\uff0c\u9996\u5148\u4e3a\u52a0\u8f7d\u65b0\u7684\u6267\u884c\u7801\u505a\u597d\u7528\u6237\u6001\u5185\u5b58\u7a7a\u95f4\u6e05\u7a7a\u51c6\u5907\u3002\u5982\u679cmm\u4e0d\u4e3aNULL\uff0c\u5219\u8bbe\u7f6e\u9875\u8868\u4e3a\u5185\u6838\u7a7a\u95f4\u9875\u8868\uff0c\u4e14\u8fdb\u4e00\u6b65\u5224\u65admm\u7684\u5f15\u7528\u8ba1\u6570\u51cf1\u540e\u662f\u5426\u4e3a0\uff0c\u5982\u679c\u4e3a0\uff0c\u5219\u8868\u660e\u6ca1\u6709\u8fdb\u7a0b\u518d\u9700\u8981\u6b64\u8fdb\u7a0b\u6240\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u4e3a\u6b64\u5c06\u6839\u636emm\u4e2d\u7684\u8bb0\u5f55\uff0c\u91ca\u653e\u8fdb\u7a0b\u6240\u5360\u7528\u6237\u7a7a\u95f4\u5185\u5b58\u548c\u8fdb\u7a0b\u9875\u8868\u672c\u8eab\u6240\u5360\u7a7a\u95f4\u3002\u6700\u540e\u628a\u5f53\u524d\u8fdb\u7a0b\u7684mm\u5185\u5b58\u7ba1\u7406\u6307\u9488\u4e3a\u7a7a\u3002\u63a5\u4e0b\u6765\u7684\u4e00\u6b65\u662f\u52a0\u8f7d\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u7801\u5230\u5f53\u524d\u8fdb\u7a0b\u7684\u65b0\u521b\u5efa\u7684\u7528\u6237\u6001\u865a\u62df\u7a7a\u95f4\u4e2d\u3002\u8fd9\u91cc\u6d89\u53ca\u5230\u8bfbELF\u683c\u5f0f\u7684\u6587\u4ef6\uff0c\u7533\u8bf7\u5185\u5b58\u7a7a\u95f4\uff0c\u5efa\u7acb\u7528\u6237\u6001\u865a\u5b58\u7a7a\u95f4\uff0c\u52a0\u8f7d\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u7801\u7b49\u3002load_icode\u51fd\u6570\u5b8c\u6210\u4e86\u6574\u4e2a\u590d\u6742\u7684\u5de5\u4f5c\u3002 wait: \u901a\u8fc7do_wait\u51fd\u6570\u5b9e\u73b0\u3002\u5982\u679cpid!=0\uff0c\u8868\u793a\u53ea\u627e\u4e00\u4e2a\u8fdb\u7a0bid\u53f7\u4e3apid\u7684\u9000\u51fa\u72b6\u6001\u7684\u5b50\u8fdb\u7a0b\uff0c\u5426\u5219\u627e\u4efb\u610f\u4e00\u4e2a\u5904\u4e8e\u9000\u51fa\u72b6\u6001\u7684\u5b50\u8fdb\u7a0b\uff1b\u5982\u679c\u6b64\u5b50\u8fdb\u7a0b\u7684\u6267\u884c\u72b6\u6001\u4e0d\u4e3aPROC_ZOMBIE\uff0c\u8868\u660e\u6b64\u5b50\u8fdb\u7a0b\u8fd8\u6ca1\u6709\u9000\u51fa\uff0c\u5219\u5f53\u524d\u8fdb\u7a0b\u53ea\u597d\u8bbe\u7f6e\u81ea\u5df1\u7684\u6267\u884c\u72b6\u6001\u4e3aPROC_SLEEPING\uff0c\u7761\u7720\u539f\u56e0\u4e3aWT_CHILD\uff08\u5373\u7b49\u5f85\u5b50\u8fdb\u7a0b\u9000\u51fa\uff09\uff0c\u8c03\u7528schedule()\u51fd\u6570\u9009\u62e9\u65b0\u7684\u8fdb\u7a0b\u6267\u884c\uff0c\u81ea\u5df1\u7761\u7720\u7b49\u5f85\uff0c\u5982\u679c\u88ab\u5524\u9192\uff0c\u5219\u91cd\u590d\u8df3\u56de\u6b65\u9aa41\u5904\u6267\u884c\uff1b\u5982\u679c\u6b64\u5b50\u8fdb\u7a0b\u7684\u6267\u884c\u72b6\u6001\u4e3aPROC_ZOMBIE\uff0c\u8868\u660e\u6b64\u5b50\u8fdb\u7a0b\u5904\u4e8e\u9000\u51fa\u72b6\u6001\uff0c\u9700\u8981\u5f53\u524d\u8fdb\u7a0b\uff08\u5373\u5b50\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\uff09\u5b8c\u6210\u5bf9\u5b50\u8fdb\u7a0b\u7684\u6700\u7ec8\u56de\u6536\u5de5\u4f5c\uff0c\u5373\u9996\u5148\u628a\u5b50\u8fdb\u7a0b\u63a7\u5236\u5757\u4ece\u4e24\u4e2a\u8fdb\u7a0b\u961f\u5217proc_list\u548chash_list\u4e2d\u5220\u9664\uff0c\u5e76\u91ca\u653e\u5b50\u8fdb\u7a0b\u7684\u5185\u6838\u5806\u6808\u548c\u8fdb\u7a0b\u63a7\u5236\u5757\u3002\u81ea\u6b64\uff0c\u5b50\u8fdb\u7a0b\u624d\u5f7b\u5e95\u5730\u7ed3\u675f\u4e86\u5b83\u7684\u6267\u884c\u8fc7\u7a0b\uff0c\u6d88\u9664\u4e86\u5b83\u6240\u5360\u7528\u7684\u6240\u6709\u8d44\u6e90\u3002 exit: \u901a\u8fc7do_exit\u51fd\u6570\u5b9e\u73b0\u30021. \u5982\u679ccurrent->mm != NULL\uff0c\u8868\u793a\u662f\u7528\u6237\u8fdb\u7a0b\uff0c\u5219\u5f00\u59cb\u56de\u6536\u6b64\u7528\u6237\u8fdb\u7a0b\u6240\u5360\u7528\u7684\u7528\u6237\u6001\u865a\u62df\u5185\u5b58\u7a7a\u95f4\uff0c\u5305\u62ec\u5207\u6362\u9875\u8868\u548c\u56de\u6536\u8d44\u6e90\u30022. \u8fd9\u65f6\uff0c\u8bbe\u7f6e\u5f53\u524d\u8fdb\u7a0b\u7684\u6267\u884c\u72b6\u6001current->state=PROC_ZOMBIE\uff0c\u5f53\u524d\u8fdb\u7a0b\u7684\u9000\u51fa\u7801current->exit_code=error_code\u3002\u6b64\u65f6\u5f53\u524d\u8fdb\u7a0b\u5df2\u7ecf\u4e0d\u80fd\u88ab\u8c03\u5ea6\u4e86\uff0c\u9700\u8981\u6b64\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u6765\u505a\u6700\u540e\u7684\u56de\u6536\u5de5\u4f5c\uff08\u5373\u56de\u6536\u63cf\u8ff0\u6b64\u8fdb\u7a0b\u7684\u5185\u6838\u6808\u548c\u8fdb\u7a0b\u63a7\u5236\u5757\uff1b3. \u5982\u679c\u5f53\u524d\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0bcurrent->parent\u5904\u4e8e\u7b49\u5f85\u5b50\u8fdb\u7a0b\u72b6\u6001:current->parent->wait_state==WT_CHILD\uff0c\u5219\u5524\u9192\u7236\u8fdb\u7a0b\uff08\u5373\u6267\u884c\u201cwakup_proc(current->parent)\u201d\uff09\uff0c\u8ba9\u7236\u8fdb\u7a0b\u5e2e\u52a9\u81ea\u5df1\u5b8c\u6210\u6700\u540e\u7684\u8d44\u6e90\u56de\u6536\u30024. \u5982\u679c\u5f53\u524d\u8fdb\u7a0b\u8fd8\u6709\u5b50\u8fdb\u7a0b\uff0c\u5219\u9700\u8981\u628a\u8fd9\u4e9b\u5b50\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u6307\u9488\u8bbe\u7f6e\u4e3a\u5185\u6838\u7ebf\u7a0binitproc\uff0c\u4e14\u5404\u4e2a\u5b50\u8fdb\u7a0b\u6307\u9488\u9700\u8981\u63d2\u5165\u5230initproc\u7684\u5b50\u8fdb\u7a0b\u94fe\u8868\u4e2d\u3002\u5982\u679c\u67d0\u4e2a\u5b50\u8fdb\u7a0b\u7684\u6267\u884c\u72b6\u6001\u662fPROC_ZOMBIE\uff0c\u5219\u9700\u8981\u5524\u9192initproc\u6765\u5b8c\u6210\u5bf9\u6b64\u5b50\u8fdb\u7a0b\u7684\u6700\u540e\u56de\u6536\u5de5\u4f5c\u30025. \u6267\u884cschedule()\u51fd\u6570\uff0c\u9009\u62e9\u65b0\u7684\u8fdb\u7a0b\u6267\u884c. \u7cfb\u7edf\u8c03\u7528\uff1a\u9996\u5148\u521d\u59cb\u5316\u7cfb\u7edf\u8c03\u7528\u7684\u4e2d\u65ad\u63cf\u8ff0\u7b26\uff0c\u8bbe\u7f6e\u7279\u6743\u7ea7\u4e3aDPL_USER\uff1b\u7136\u540e\u5efa\u7acb\u7cfb\u7edf\u8c03\u7528\u7684\u7528\u6237\u5e93\u51c6\u5907\uff1b\u5728\u7528\u6237\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u6839\u636e\u7cfb\u7edf\u8c03\u7528\u7f16\u53f7\uff0c\u8df3\u8f6c\u5230\u76f8\u5e94\u7684\u5165\u53e3\u8fdb\u884c\u5904\u7406\u3002 \u95ee\u98983.1\uff1a\u8bf7\u5206\u6790fork/exec/wait/exit\u5728\u5b9e\u73b0\u4e2d\u662f\u5982\u4f55\u5f71\u54cd\u8fdb\u7a0b\u7684\u6267\u884c\u72b6\u6001\u7684\uff1f fork: runnable exec: runnable wait: sleeping exit: zombie \u95ee\u98983.2\uff1a\u8bf7\u7ed9\u51faucore\u4e2d\u4e00\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u7684\u6267\u884c\u72b6\u6001\u751f\u547d\u5468\u671f\u56fe\uff08\u5305\u6267\u884c\u72b6\u6001\uff0c\u6267\u884c\u72b6\u6001\u4e4b\u95f4\u7684\u53d8\u6362\u5173\u7cfb\uff0c\u4ee5\u53ca\u4ea7\u751f\u53d8\u6362\u7684\u4e8b\u4ef6\u6216\u51fd\u6570\u8c03\u7528\uff09\u3002 process state changing: alloc_proc RUNNING + +--<----<--+ + + proc_run + V +-->---->--+ PROC_UNINIT -- proc_init/wakeup_proc --> PROC_RUNNABLE -- try_free_pages/do_wait/do_sleep --> PROC_SLEEPING -- A + + | +--- do_exit --> PROC_ZOMBIE + + + -----------------------wakeup_proc---------------------------------- ----------------------------- \u5217\u51fa\u4f60\u8ba4\u4e3a\u672c\u5b9e\u9a8c\u4e2d\u91cd\u8981\u7684\u77e5\u8bc6\u70b9\uff0c\u4ee5\u53ca\u4e0e\u5bf9\u5e94\u7684OS\u539f\u7406\u4e2d\u7684\u77e5\u8bc6\u70b9\uff0c\u5e76\u7b80\u8981\u8bf4\u660e\u4f60\u5bf9\u4e8c\u8005\u7684\u542b\u4e49\uff0c\u5173\u7cfb\uff0c\u5dee\u5f02\u7b49\u65b9\u9762\u7684\u7406\u89e3\uff08\u4e5f\u53ef\u80fd\u51fa\u73b0\u5b9e\u9a8c\u4e2d\u7684\u77e5\u8bc6\u70b9\u6ca1\u6709\u5bf9\u5e94\u7684\u539f\u7406\u77e5\u8bc6\u70b9\uff09 \u7528\u6237\u8fdb\u7a0b\u7684\u52a0\u8f7d\u4e0e\u6267\u884c \u8fdb\u7a0b\u63a7\u5236\u7684\u5404\u4e2a\u72b6\u6001\u53ca\u5176\u8f6c\u6362","title":"Lab5 Report"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/lab5/#lab5-report","text":"","title":"Lab5 Report"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/lab5/#1","text":"\u5728kern/process/proc.c\u4e2d\u8865\u5145load_icode()\u51fd\u6570\u3002\u4ee3\u7801\u4e3a\uff1a tf->tf_cs = USER_CS; tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS; tf->tf_esp = USTACKTOP; tf->tf_eip = elf->e_entry; tf->tf_eflags = FL_IF; \u5b8c\u6210\u5bf9trapframe\u4e2d\u4ee3\u7801\u6bb5\u3001\u6570\u636e\u6bb5\u7684\u521d\u59cb\u5316\u3002","title":"\u7ec3\u4e601\uff1a\u52a0\u8f7d\u5e94\u7528\u7a0b\u5e8f\u5e76\u6267\u884c"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/lab5/#11cpuucorecpurunning","text":"\u901a\u8fc7schedule\u627e\u5230\u9700\u8981\u6267\u884c\u7684\u8fdb\u7a0b\u6216\u7ebf\u7a0b \u8c03\u7528proc_run\uff0c\u5207\u6362\u6808\u548c\u9875\u8868\uff0c\u8c03\u7528switch_to\u51fd\u6570\u5207\u6362\u4e0a\u4e0b\u6587 switch_to\u51fd\u6570\u8fd4\u56de\u81f3forkret\uff0c\u8fdb\u800c\u6267\u884cforkrets\u51fd\u6570 \u8bbe\u7f6e\u6808\u6307\u9488\uff0c\u5f39\u51fa\u6bb5\u5bc4\u5b58\u5668\uff0c\u6267\u884ctf->tf_eip\u7684\u6307\u4ee4 \u7531\u4e8etf->tf_eip\u88ab\u8bbe\u7f6e\u4e3a\u4e86elf->e_entry\uff0c\u4ece\u800c\u5f00\u59cb\u6267\u884c\u7528\u6237\u7a0b\u5e8f","title":"\u95ee\u98981.1\uff1a\u63cf\u8ff0\u5f53\u521b\u5efa\u4e00\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u5e76\u52a0\u8f7d\u4e86\u5e94\u7528\u7a0b\u5e8f\u540e\uff0cCPU\u662f\u5982\u4f55\u8ba9\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u6700\u7ec8\u5728\u7528\u6237\u6001\u6267\u884c\u8d77\u6765\u7684\u3002\u5373\u8fd9\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u88abucore\u9009\u62e9\u5360\u7528CPU\u6267\u884c\uff08RUNNING\u6001\uff09\u5230\u5177\u4f53\u6267\u884c\u5e94\u7528\u7a0b\u5e8f\u7b2c\u4e00\u6761\u6307\u4ee4\u7684\u6574\u4e2a\u7ecf\u8fc7\u3002"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/lab5/#2","text":"\u5728kern/mm/pmm.c\u4e2d\u5b8c\u6210copy_range()\u51fd\u6570\uff0c\u589e\u52a0\u4ee5\u4e0b\u4ee3\u7801\uff1a void *src_kvaddr = page2kva(page); void *dst_kvaddr = page2kva(npage); memcpy(dst_kvaddr, src_kvaddr, PGSIZE); ret = page_insert(to, npage, start, perm); \u4ee3\u7801\u6267\u884c\u6b65\u9aa4\u4e3a\uff1a \u83b7\u5f97\u6e90\u9875\u3001\u76ee\u6807\u9875\u5730\u5740 \u7528memcpy\u8fdb\u884c\u62f7\u8d1d \u8bbe\u7f6e\u4e0e\u7269\u7406\u9875\u7684\u6620\u5c04\u5173\u7cfb","title":"\u7ec3\u4e602\uff1a\u7236\u8fdb\u7a0b\u590d\u5236\u81ea\u5df1\u7684\u5185\u5b58\u7a7a\u95f4\u7ed9\u5b50\u8fdb\u7a0b"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/lab5/#21copy-on-write","text":"\u5728copy_range\u51fd\u6570\u4e2d\uff0c\u4e0d\u76f4\u63a5\u62f7\u8d1d\uff0c\u800c\u662f\u7528\u4e00\u4e2a\u6807\u8bb0\u4e3a\u8868\u793a\u6b64\u9875\u88ab\u591a\u4e2a\u4f7f\u7528\u8005\u8bbf\u95ee\u3002\u5f53\u8fdb\u884c\u8bfb\u64cd\u4f5c\u65f6\uff0c\u53ef\u4ee5\u5171\u4eab\u8d44\u6e90\u3002\u5f53\u8fdb\u884c\u5199\u64cd\u4f5c\u65f6\uff0c\u901a\u8fc7\u5224\u65ad\u6b64\u9875\u662f\u5426\u5171\u4eab\uff0c\u518d\u8fdb\u884c\u62f7\u8d1d\u7684\u64cd\u4f5c\u3002","title":"\u95ee\u98982.1\uff1a\u8bf7\u5728\u5b9e\u9a8c\u62a5\u544a\u4e2d\u7b80\u8981\u8bf4\u660e\u5982\u4f55\u8bbe\u8ba1\u5b9e\u73b0\u201dCopy on Write \u673a\u5236\u201c\uff0c\u7ed9\u51fa\u6982\u8981\u8bbe\u8ba1\uff0c\u9f13\u52b1\u7ed9\u51fa\u8be6\u7ec6\u8bbe\u8ba1\u3002"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/lab5/#3-forkexecwaitexit","text":"fork: \u901a\u8fc7do_fork\u51fd\u6570\u5b9e\u73b0\uff0c\u5206\u914d\u8fdb\u7a0b\u7684TCB\u548cpid\uff0c\u5728\u94fe\u8868\u4e2d\u52a0\u5165\u6b64\u8fdb\u7a0b\uff0c\u6700\u540e\u901a\u8fc7wakeup_proc\u5524\u9192\u8fdb\u7a0b exec: \u901a\u8fc7do_execve\u51fd\u6570\u5b9e\u73b0\uff0c\u9996\u5148\u4e3a\u52a0\u8f7d\u65b0\u7684\u6267\u884c\u7801\u505a\u597d\u7528\u6237\u6001\u5185\u5b58\u7a7a\u95f4\u6e05\u7a7a\u51c6\u5907\u3002\u5982\u679cmm\u4e0d\u4e3aNULL\uff0c\u5219\u8bbe\u7f6e\u9875\u8868\u4e3a\u5185\u6838\u7a7a\u95f4\u9875\u8868\uff0c\u4e14\u8fdb\u4e00\u6b65\u5224\u65admm\u7684\u5f15\u7528\u8ba1\u6570\u51cf1\u540e\u662f\u5426\u4e3a0\uff0c\u5982\u679c\u4e3a0\uff0c\u5219\u8868\u660e\u6ca1\u6709\u8fdb\u7a0b\u518d\u9700\u8981\u6b64\u8fdb\u7a0b\u6240\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u4e3a\u6b64\u5c06\u6839\u636emm\u4e2d\u7684\u8bb0\u5f55\uff0c\u91ca\u653e\u8fdb\u7a0b\u6240\u5360\u7528\u6237\u7a7a\u95f4\u5185\u5b58\u548c\u8fdb\u7a0b\u9875\u8868\u672c\u8eab\u6240\u5360\u7a7a\u95f4\u3002\u6700\u540e\u628a\u5f53\u524d\u8fdb\u7a0b\u7684mm\u5185\u5b58\u7ba1\u7406\u6307\u9488\u4e3a\u7a7a\u3002\u63a5\u4e0b\u6765\u7684\u4e00\u6b65\u662f\u52a0\u8f7d\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u7801\u5230\u5f53\u524d\u8fdb\u7a0b\u7684\u65b0\u521b\u5efa\u7684\u7528\u6237\u6001\u865a\u62df\u7a7a\u95f4\u4e2d\u3002\u8fd9\u91cc\u6d89\u53ca\u5230\u8bfbELF\u683c\u5f0f\u7684\u6587\u4ef6\uff0c\u7533\u8bf7\u5185\u5b58\u7a7a\u95f4\uff0c\u5efa\u7acb\u7528\u6237\u6001\u865a\u5b58\u7a7a\u95f4\uff0c\u52a0\u8f7d\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u7801\u7b49\u3002load_icode\u51fd\u6570\u5b8c\u6210\u4e86\u6574\u4e2a\u590d\u6742\u7684\u5de5\u4f5c\u3002 wait: \u901a\u8fc7do_wait\u51fd\u6570\u5b9e\u73b0\u3002\u5982\u679cpid!=0\uff0c\u8868\u793a\u53ea\u627e\u4e00\u4e2a\u8fdb\u7a0bid\u53f7\u4e3apid\u7684\u9000\u51fa\u72b6\u6001\u7684\u5b50\u8fdb\u7a0b\uff0c\u5426\u5219\u627e\u4efb\u610f\u4e00\u4e2a\u5904\u4e8e\u9000\u51fa\u72b6\u6001\u7684\u5b50\u8fdb\u7a0b\uff1b\u5982\u679c\u6b64\u5b50\u8fdb\u7a0b\u7684\u6267\u884c\u72b6\u6001\u4e0d\u4e3aPROC_ZOMBIE\uff0c\u8868\u660e\u6b64\u5b50\u8fdb\u7a0b\u8fd8\u6ca1\u6709\u9000\u51fa\uff0c\u5219\u5f53\u524d\u8fdb\u7a0b\u53ea\u597d\u8bbe\u7f6e\u81ea\u5df1\u7684\u6267\u884c\u72b6\u6001\u4e3aPROC_SLEEPING\uff0c\u7761\u7720\u539f\u56e0\u4e3aWT_CHILD\uff08\u5373\u7b49\u5f85\u5b50\u8fdb\u7a0b\u9000\u51fa\uff09\uff0c\u8c03\u7528schedule()\u51fd\u6570\u9009\u62e9\u65b0\u7684\u8fdb\u7a0b\u6267\u884c\uff0c\u81ea\u5df1\u7761\u7720\u7b49\u5f85\uff0c\u5982\u679c\u88ab\u5524\u9192\uff0c\u5219\u91cd\u590d\u8df3\u56de\u6b65\u9aa41\u5904\u6267\u884c\uff1b\u5982\u679c\u6b64\u5b50\u8fdb\u7a0b\u7684\u6267\u884c\u72b6\u6001\u4e3aPROC_ZOMBIE\uff0c\u8868\u660e\u6b64\u5b50\u8fdb\u7a0b\u5904\u4e8e\u9000\u51fa\u72b6\u6001\uff0c\u9700\u8981\u5f53\u524d\u8fdb\u7a0b\uff08\u5373\u5b50\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\uff09\u5b8c\u6210\u5bf9\u5b50\u8fdb\u7a0b\u7684\u6700\u7ec8\u56de\u6536\u5de5\u4f5c\uff0c\u5373\u9996\u5148\u628a\u5b50\u8fdb\u7a0b\u63a7\u5236\u5757\u4ece\u4e24\u4e2a\u8fdb\u7a0b\u961f\u5217proc_list\u548chash_list\u4e2d\u5220\u9664\uff0c\u5e76\u91ca\u653e\u5b50\u8fdb\u7a0b\u7684\u5185\u6838\u5806\u6808\u548c\u8fdb\u7a0b\u63a7\u5236\u5757\u3002\u81ea\u6b64\uff0c\u5b50\u8fdb\u7a0b\u624d\u5f7b\u5e95\u5730\u7ed3\u675f\u4e86\u5b83\u7684\u6267\u884c\u8fc7\u7a0b\uff0c\u6d88\u9664\u4e86\u5b83\u6240\u5360\u7528\u7684\u6240\u6709\u8d44\u6e90\u3002 exit: \u901a\u8fc7do_exit\u51fd\u6570\u5b9e\u73b0\u30021. \u5982\u679ccurrent->mm != NULL\uff0c\u8868\u793a\u662f\u7528\u6237\u8fdb\u7a0b\uff0c\u5219\u5f00\u59cb\u56de\u6536\u6b64\u7528\u6237\u8fdb\u7a0b\u6240\u5360\u7528\u7684\u7528\u6237\u6001\u865a\u62df\u5185\u5b58\u7a7a\u95f4\uff0c\u5305\u62ec\u5207\u6362\u9875\u8868\u548c\u56de\u6536\u8d44\u6e90\u30022. \u8fd9\u65f6\uff0c\u8bbe\u7f6e\u5f53\u524d\u8fdb\u7a0b\u7684\u6267\u884c\u72b6\u6001current->state=PROC_ZOMBIE\uff0c\u5f53\u524d\u8fdb\u7a0b\u7684\u9000\u51fa\u7801current->exit_code=error_code\u3002\u6b64\u65f6\u5f53\u524d\u8fdb\u7a0b\u5df2\u7ecf\u4e0d\u80fd\u88ab\u8c03\u5ea6\u4e86\uff0c\u9700\u8981\u6b64\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u6765\u505a\u6700\u540e\u7684\u56de\u6536\u5de5\u4f5c\uff08\u5373\u56de\u6536\u63cf\u8ff0\u6b64\u8fdb\u7a0b\u7684\u5185\u6838\u6808\u548c\u8fdb\u7a0b\u63a7\u5236\u5757\uff1b3. \u5982\u679c\u5f53\u524d\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0bcurrent->parent\u5904\u4e8e\u7b49\u5f85\u5b50\u8fdb\u7a0b\u72b6\u6001:current->parent->wait_state==WT_CHILD\uff0c\u5219\u5524\u9192\u7236\u8fdb\u7a0b\uff08\u5373\u6267\u884c\u201cwakup_proc(current->parent)\u201d\uff09\uff0c\u8ba9\u7236\u8fdb\u7a0b\u5e2e\u52a9\u81ea\u5df1\u5b8c\u6210\u6700\u540e\u7684\u8d44\u6e90\u56de\u6536\u30024. \u5982\u679c\u5f53\u524d\u8fdb\u7a0b\u8fd8\u6709\u5b50\u8fdb\u7a0b\uff0c\u5219\u9700\u8981\u628a\u8fd9\u4e9b\u5b50\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u6307\u9488\u8bbe\u7f6e\u4e3a\u5185\u6838\u7ebf\u7a0binitproc\uff0c\u4e14\u5404\u4e2a\u5b50\u8fdb\u7a0b\u6307\u9488\u9700\u8981\u63d2\u5165\u5230initproc\u7684\u5b50\u8fdb\u7a0b\u94fe\u8868\u4e2d\u3002\u5982\u679c\u67d0\u4e2a\u5b50\u8fdb\u7a0b\u7684\u6267\u884c\u72b6\u6001\u662fPROC_ZOMBIE\uff0c\u5219\u9700\u8981\u5524\u9192initproc\u6765\u5b8c\u6210\u5bf9\u6b64\u5b50\u8fdb\u7a0b\u7684\u6700\u540e\u56de\u6536\u5de5\u4f5c\u30025. \u6267\u884cschedule()\u51fd\u6570\uff0c\u9009\u62e9\u65b0\u7684\u8fdb\u7a0b\u6267\u884c. \u7cfb\u7edf\u8c03\u7528\uff1a\u9996\u5148\u521d\u59cb\u5316\u7cfb\u7edf\u8c03\u7528\u7684\u4e2d\u65ad\u63cf\u8ff0\u7b26\uff0c\u8bbe\u7f6e\u7279\u6743\u7ea7\u4e3aDPL_USER\uff1b\u7136\u540e\u5efa\u7acb\u7cfb\u7edf\u8c03\u7528\u7684\u7528\u6237\u5e93\u51c6\u5907\uff1b\u5728\u7528\u6237\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u6839\u636e\u7cfb\u7edf\u8c03\u7528\u7f16\u53f7\uff0c\u8df3\u8f6c\u5230\u76f8\u5e94\u7684\u5165\u53e3\u8fdb\u884c\u5904\u7406\u3002","title":"\u7ec3\u4e603\uff1a\u9605\u8bfb\u5206\u6790\u6e90\u4ee3\u7801\uff0c\u7406\u89e3\u8fdb\u7a0b\u6267\u884c fork/exec/wait/exit \u7684\u5b9e\u73b0\uff0c\u4ee5\u53ca\u7cfb\u7edf\u8c03\u7528\u7684\u5b9e\u73b0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/lab5/#31forkexecwaitexit","text":"fork: runnable exec: runnable wait: sleeping exit: zombie","title":"\u95ee\u98983.1\uff1a\u8bf7\u5206\u6790fork/exec/wait/exit\u5728\u5b9e\u73b0\u4e2d\u662f\u5982\u4f55\u5f71\u54cd\u8fdb\u7a0b\u7684\u6267\u884c\u72b6\u6001\u7684\uff1f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/lab5/#32ucore","text":"process state changing: alloc_proc RUNNING + +--<----<--+ + + proc_run + V +-->---->--+ PROC_UNINIT -- proc_init/wakeup_proc --> PROC_RUNNABLE -- try_free_pages/do_wait/do_sleep --> PROC_SLEEPING -- A + + | +--- do_exit --> PROC_ZOMBIE + + + -----------------------wakeup_proc---------------------------------- -----------------------------","title":"\u95ee\u98983.2\uff1a\u8bf7\u7ed9\u51faucore\u4e2d\u4e00\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u7684\u6267\u884c\u72b6\u6001\u751f\u547d\u5468\u671f\u56fe\uff08\u5305\u6267\u884c\u72b6\u6001\uff0c\u6267\u884c\u72b6\u6001\u4e4b\u95f4\u7684\u53d8\u6362\u5173\u7cfb\uff0c\u4ee5\u53ca\u4ea7\u751f\u53d8\u6362\u7684\u4e8b\u4ef6\u6216\u51fd\u6570\u8c03\u7528\uff09\u3002"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/lab5/#os","text":"\u7528\u6237\u8fdb\u7a0b\u7684\u52a0\u8f7d\u4e0e\u6267\u884c \u8fdb\u7a0b\u63a7\u5236\u7684\u5404\u4e2a\u72b6\u6001\u53ca\u5176\u8f6c\u6362","title":"\u5217\u51fa\u4f60\u8ba4\u4e3a\u672c\u5b9e\u9a8c\u4e2d\u91cd\u8981\u7684\u77e5\u8bc6\u70b9\uff0c\u4ee5\u53ca\u4e0e\u5bf9\u5e94\u7684OS\u539f\u7406\u4e2d\u7684\u77e5\u8bc6\u70b9\uff0c\u5e76\u7b80\u8981\u8bf4\u660e\u4f60\u5bf9\u4e8c\u8005\u7684\u542b\u4e49\uff0c\u5173\u7cfb\uff0c\u5dee\u5f02\u7b49\u65b9\u9762\u7684\u7406\u89e3\uff08\u4e5f\u53ef\u80fd\u51fa\u73b0\u5b9e\u9a8c\u4e2d\u7684\u77e5\u8bc6\u70b9\u6ca1\u6709\u5bf9\u5e94\u7684\u539f\u7406\u77e5\u8bc6\u70b9\uff09"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/my_note/","text":"\u7b14\u8bb0 copy_mm() \u5185\u6838\u7ebf\u7a0b\u7684mm\u662f\u7a7a\u6307\u9488\u3002 kernel_execve() T_SYSCALL \uff080x80\uff09\u4e3a\u7cfb\u7edf\u8c03\u7528\u4e2d\u65ad\u53f7\uff0c SYS_exec \uff084\uff09\u5b58\u5165eax\u4e2d\uff0c\u4e3a\u529f\u80fd\u53f7\u3002 kernel_execve() - > syscall() name -> edx -> arg[0] name_size -> ecx -> arg[1] start_address -> ebx -> arg[2] size -> edi -> arg[3] \u7528\u6237\u8fdb\u7a0b\u7684\u865a\u62df\u7a7a\u95f4 KERNBASE ------------> +---------------------------------+ 0xC0000000 | Invalid Memory () | --/-- USERTOP -------------> +---------------------------------+ 0xB0000000 | User stack | +---------------------------------+ | | : : | ~~~~~~~~~~~~~~~~ | : : | | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ | User Program & Heap | UTEXT ---------------> +---------------------------------+ 0x00800000 | Invalid Memory () | --/-- | - - - - - - - - - - - - - - - | | User STAB Data (optional) | USERBASE, USTAB------> +---------------------------------+ 0x00200000 | Invalid Memory () | --/-- 0 -------------------> +---------------------------------+ 0x00000000 \u7ebf\u7a0b\u5207\u6362 \u5f53\u6240\u6709\u8fdb\u7a0b\u90fd\u521b\u5efa\u597d\u540e\uff0c\u5185\u6838\u7ebf\u7a0b\u5207\u6362\u662f\u4e3b\u52a8\u8c03\u7528 schedule() \uff0c\u5c31\u76f4\u63a5\u7ecf\u8fc7 switch_to \uff0ceip\u5c31\u53d8\u6210\u4e86\u4e0b\u4e2a\u7ebf\u7a0b\u8c03\u7528 schedule() \u65f6\u7684\u5730\u5740\u3002\u800c\u6bcf\u4e2a\u7528\u6237\u7ebf\u7a0b\u90fd\u6709\u4e00\u4e2a\u5185\u6838\u6808\u7a7a\u95f4\uff0c\u5229\u7528\u7cfb\u7edf\u8c03\u7528\u53ef\u4ee5\u8fdb\u884c\u5207\u6362\uff0c\u6808\u7a7a\u95f4\u5148\u53d8\u6210\u5185\u6838\u6808\uff0c\u5728\u8c03\u7528 schedule() \u5207\u6362\u5230\u4e0b\u4e00\u4e2a\u7528\u6237\u7ebf\u7a0b\u7684\u5185\u6838\u6808\uff0c\u7531\u4e0a\u4e0b\u6587\u548c\u4e2d\u65ad\u8fd4\u56de\uff0c\u53ef\u4ee5\u8fd4\u56de\u81f3\u4e0b\u4e00\u7528\u6237\u7ebf\u7a0b\u7684\u7528\u6237\u6808\u7a7a\u95f4\u3002","title":"My note"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab5/my_note/#_1","text":"copy_mm() \u5185\u6838\u7ebf\u7a0b\u7684mm\u662f\u7a7a\u6307\u9488\u3002 kernel_execve() T_SYSCALL \uff080x80\uff09\u4e3a\u7cfb\u7edf\u8c03\u7528\u4e2d\u65ad\u53f7\uff0c SYS_exec \uff084\uff09\u5b58\u5165eax\u4e2d\uff0c\u4e3a\u529f\u80fd\u53f7\u3002 kernel_execve() - > syscall() name -> edx -> arg[0] name_size -> ecx -> arg[1] start_address -> ebx -> arg[2] size -> edi -> arg[3] \u7528\u6237\u8fdb\u7a0b\u7684\u865a\u62df\u7a7a\u95f4 KERNBASE ------------> +---------------------------------+ 0xC0000000 | Invalid Memory () | --/-- USERTOP -------------> +---------------------------------+ 0xB0000000 | User stack | +---------------------------------+ | | : : | ~~~~~~~~~~~~~~~~ | : : | | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ | User Program & Heap | UTEXT ---------------> +---------------------------------+ 0x00800000 | Invalid Memory () | --/-- | - - - - - - - - - - - - - - - | | User STAB Data (optional) | USERBASE, USTAB------> +---------------------------------+ 0x00200000 | Invalid Memory () | --/-- 0 -------------------> +---------------------------------+ 0x00000000 \u7ebf\u7a0b\u5207\u6362 \u5f53\u6240\u6709\u8fdb\u7a0b\u90fd\u521b\u5efa\u597d\u540e\uff0c\u5185\u6838\u7ebf\u7a0b\u5207\u6362\u662f\u4e3b\u52a8\u8c03\u7528 schedule() \uff0c\u5c31\u76f4\u63a5\u7ecf\u8fc7 switch_to \uff0ceip\u5c31\u53d8\u6210\u4e86\u4e0b\u4e2a\u7ebf\u7a0b\u8c03\u7528 schedule() \u65f6\u7684\u5730\u5740\u3002\u800c\u6bcf\u4e2a\u7528\u6237\u7ebf\u7a0b\u90fd\u6709\u4e00\u4e2a\u5185\u6838\u6808\u7a7a\u95f4\uff0c\u5229\u7528\u7cfb\u7edf\u8c03\u7528\u53ef\u4ee5\u8fdb\u884c\u5207\u6362\uff0c\u6808\u7a7a\u95f4\u5148\u53d8\u6210\u5185\u6838\u6808\uff0c\u5728\u8c03\u7528 schedule() \u5207\u6362\u5230\u4e0b\u4e00\u4e2a\u7528\u6237\u7ebf\u7a0b\u7684\u5185\u6838\u6808\uff0c\u7531\u4e0a\u4e0b\u6587\u548c\u4e2d\u65ad\u8fd4\u56de\uff0c\u53ef\u4ee5\u8fd4\u56de\u81f3\u4e0b\u4e00\u7528\u6237\u7ebf\u7a0b\u7684\u7528\u6237\u6808\u7a7a\u95f4\u3002","title":"\u7b14\u8bb0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab6/1/","text":"\u7ec3\u4e601\uff1a\u4f7f\u7528 Round Robin \u8c03\u5ea6\u7b97\u6cd5 \u95ee\u98981.1\uff1a\u8bf7\u7406\u89e3\u5e76\u5206\u6790 sched_calss \u4e2d\u5404\u4e2a\u51fd\u6570\u6307\u9488\u7684\u7528\u6cd5\uff0c\u5e76\u7ed3\u5408Round Robin\u8c03\u5ea6\u7b97\u6cd5\u63cfucore\u7684\u8c03\u5ea6\u6267\u884c\u8fc7\u7a0b\u3002 sched_class \u7684\u5b9a\u4e49\u5728 kern/schedule/sched.h \u4e2d\uff1a struct sched_class { // the name of sched_class const char *name; // Init the run queue void (*init)(struct run_queue *rq); // put the proc into runqueue, and this function must be called with rq_lock void (*enqueue)(struct run_queue *rq, struct proc_struct *proc); // get the proc out runqueue, and this function must be called with rq_lock void (*dequeue)(struct run_queue *rq, struct proc_struct *proc); // choose the next runnable task struct proc_struct *(*pick_next)(struct run_queue *rq); // dealer of the time-tick void (*proc_tick)(struct run_queue *rq, struct proc_struct *proc); /* for SMP support in the future * load_balance * void (*load_balance)(struct rq* rq); * get some proc from this rq, used in load_balance, * return value is the num of gotten proc * int (*get_proc)(struct rq* rq, struct proc* procs_moved[]); */ } \u5728 sched.c \u4e2d\uff0c\u5b9e\u4f8b\u5316\u4e00\u4e2a sched_class \u5bf9\u8c61\u4e3a sched_class = &default_sched_class \uff0c\u5e76\u8fdb\u884c\u521d\u59cb\u5316\u3002\u5728\u540e\u7eed\u8fdb\u884c\u8fdb\u7a0b\u9009\u62e9\u548c\u5207\u6362\u7684\u65f6\u5019\uff0c\u5206\u522b\u8c03\u7528 sched_class_enqueue sched_class_pick_next sched_class_dequeue \u51fd\u6570\u8c03\u7528 sched_class \u7c7b\u4e2d\u7684\u51fd\u6570\u6307\u9488\uff0c\u6267\u884c\u76f8\u5e94\u7684\u529f\u80fd\u3002 \u5728Round Robin\u8c03\u5ea6\u7b97\u6cd5\u4e2d\uff0c\u901a\u8fc7\u5c06 default_sched_class \u6307\u5411\u4e3a\u76f8\u5e94\u7684\u5b9e\u73b0\uff0c\u5373\u53ef\u4f7f\u7528RR\u8c03\u5ea6\u7b97\u6cd5\u3002 struct sched_class default_sched_class = { .name = \"RR_scheduler\", .init = RR_init, .enqueue = RR_enqueue, .dequeue = RR_dequeue, .pick_next = RR_pick_next, .proc_tick = RR_proc_tick, }; \u95ee\u98981.2\uff1a\u8bf7\u5728\u5b9e\u9a8c\u62a5\u544a\u4e2d\u7b80\u8981\u8bf4\u660e\u5982\u4f55\u8bbe\u8ba1\u5b9e\u73b0\u201d\u591a\u7ea7\u53cd\u9988\u961f\u5217\u8c03\u5ea6\u7b97\u6cd5\u201c\uff0c\u7ed9\u51fa\u6982\u8981\u8bbe\u8ba1\uff0c\u9f13\u52b1\u7ed9\u51fa\u8be6\u7ec6\u8bbe\u8ba1 \u9996\u5148\u7ef4\u62a4\u591a\u4e2a\u94fe\u8868\uff0c\u6bcf\u4e2a\u94fe\u8868\u4fdd\u5b58\u4f18\u5148\u7ea7\u4e0d\u540c\u7684\u5c31\u7eea\u961f\u5217 \u8fdb\u7a0b\u5728\u521d\u59cb\u5316\u65f6\u9996\u5148\u63d2\u5165\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u961f\u5217\u7b49\u5f85 \u5728\u8c03\u5ea6\u65f6\uff0c\u4ece\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u961f\u5217\u4e2d\u5f00\u59cb\u5bfb\u627e\u8fdb\u7a0b\uff0c\u82e5\u4e3a\u7a7a\u5219\u8fdb\u5165\u4e0b\u4e00\u4f18\u5148\u7ea7\u961f\u5217\u5bfb\u627e \u5bf9\u4e8e\u67d0\u4e2a\u8fdb\u7a0b\uff0c\u5982\u679c\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u7247\u5185\u6ca1\u6709\u5b8c\u6210\uff0c\u5219\u5c06\u5176\u63d2\u5165\u4e0b\u4e00\u4f18\u5148\u7ea7\u961f\u5217\u7684\u94fe\u8868\u4e2d","title":"1"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab6/1/#1-round-robin","text":"\u95ee\u98981.1\uff1a\u8bf7\u7406\u89e3\u5e76\u5206\u6790 sched_calss \u4e2d\u5404\u4e2a\u51fd\u6570\u6307\u9488\u7684\u7528\u6cd5\uff0c\u5e76\u7ed3\u5408Round Robin\u8c03\u5ea6\u7b97\u6cd5\u63cfucore\u7684\u8c03\u5ea6\u6267\u884c\u8fc7\u7a0b\u3002 sched_class \u7684\u5b9a\u4e49\u5728 kern/schedule/sched.h \u4e2d\uff1a struct sched_class { // the name of sched_class const char *name; // Init the run queue void (*init)(struct run_queue *rq); // put the proc into runqueue, and this function must be called with rq_lock void (*enqueue)(struct run_queue *rq, struct proc_struct *proc); // get the proc out runqueue, and this function must be called with rq_lock void (*dequeue)(struct run_queue *rq, struct proc_struct *proc); // choose the next runnable task struct proc_struct *(*pick_next)(struct run_queue *rq); // dealer of the time-tick void (*proc_tick)(struct run_queue *rq, struct proc_struct *proc); /* for SMP support in the future * load_balance * void (*load_balance)(struct rq* rq); * get some proc from this rq, used in load_balance, * return value is the num of gotten proc * int (*get_proc)(struct rq* rq, struct proc* procs_moved[]); */ } \u5728 sched.c \u4e2d\uff0c\u5b9e\u4f8b\u5316\u4e00\u4e2a sched_class \u5bf9\u8c61\u4e3a sched_class = &default_sched_class \uff0c\u5e76\u8fdb\u884c\u521d\u59cb\u5316\u3002\u5728\u540e\u7eed\u8fdb\u884c\u8fdb\u7a0b\u9009\u62e9\u548c\u5207\u6362\u7684\u65f6\u5019\uff0c\u5206\u522b\u8c03\u7528 sched_class_enqueue sched_class_pick_next sched_class_dequeue \u51fd\u6570\u8c03\u7528 sched_class \u7c7b\u4e2d\u7684\u51fd\u6570\u6307\u9488\uff0c\u6267\u884c\u76f8\u5e94\u7684\u529f\u80fd\u3002 \u5728Round Robin\u8c03\u5ea6\u7b97\u6cd5\u4e2d\uff0c\u901a\u8fc7\u5c06 default_sched_class \u6307\u5411\u4e3a\u76f8\u5e94\u7684\u5b9e\u73b0\uff0c\u5373\u53ef\u4f7f\u7528RR\u8c03\u5ea6\u7b97\u6cd5\u3002 struct sched_class default_sched_class = { .name = \"RR_scheduler\", .init = RR_init, .enqueue = RR_enqueue, .dequeue = RR_dequeue, .pick_next = RR_pick_next, .proc_tick = RR_proc_tick, }; \u95ee\u98981.2\uff1a\u8bf7\u5728\u5b9e\u9a8c\u62a5\u544a\u4e2d\u7b80\u8981\u8bf4\u660e\u5982\u4f55\u8bbe\u8ba1\u5b9e\u73b0\u201d\u591a\u7ea7\u53cd\u9988\u961f\u5217\u8c03\u5ea6\u7b97\u6cd5\u201c\uff0c\u7ed9\u51fa\u6982\u8981\u8bbe\u8ba1\uff0c\u9f13\u52b1\u7ed9\u51fa\u8be6\u7ec6\u8bbe\u8ba1 \u9996\u5148\u7ef4\u62a4\u591a\u4e2a\u94fe\u8868\uff0c\u6bcf\u4e2a\u94fe\u8868\u4fdd\u5b58\u4f18\u5148\u7ea7\u4e0d\u540c\u7684\u5c31\u7eea\u961f\u5217 \u8fdb\u7a0b\u5728\u521d\u59cb\u5316\u65f6\u9996\u5148\u63d2\u5165\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u961f\u5217\u7b49\u5f85 \u5728\u8c03\u5ea6\u65f6\uff0c\u4ece\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u961f\u5217\u4e2d\u5f00\u59cb\u5bfb\u627e\u8fdb\u7a0b\uff0c\u82e5\u4e3a\u7a7a\u5219\u8fdb\u5165\u4e0b\u4e00\u4f18\u5148\u7ea7\u961f\u5217\u5bfb\u627e \u5bf9\u4e8e\u67d0\u4e2a\u8fdb\u7a0b\uff0c\u5982\u679c\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u7247\u5185\u6ca1\u6709\u5b8c\u6210\uff0c\u5219\u5c06\u5176\u63d2\u5165\u4e0b\u4e00\u4f18\u5148\u7ea7\u961f\u5217\u7684\u94fe\u8868\u4e2d","title":"\u7ec3\u4e601\uff1a\u4f7f\u7528 Round Robin \u8c03\u5ea6\u7b97\u6cd5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab6/2/","text":"\u7ec3\u4e602\uff1a\u5b9e\u73b0 Stride Scheduling \u8c03\u5ea6\u7b97\u6cd5 \u5b9e\u73b0\u5728 kern/schedule/default_sched.c \u4e2d\u7684\u4e94\u4e2a\u51fd\u6570\uff0c\u5b9e\u73b0\u5982\u4e0b\uff1a stride_init static void stride_init(struct run_queue *rq) { /* LAB6: YOUR CODE * (1) init the ready process list: rq->run_list * (2) init the run pool: rq->lab6_run_pool * (3) set number of process: rq->proc_num to 0 */ list_init(&(rq->run_list)); rq->lab6_run_pool = NULL; rq->proc_num = 0; } \u8fdb\u884c\u521d\u59cb\u5316\u64cd\u4f5c\uff0c\u5c06\u8fd0\u884c\u961f\u5217\u7f6e\u7a7a\uff0c\u540c\u65f6\u5c06 proc_num \u7f6e\u96f6\u3002 stride_enqueue static void stride_enqueue(struct run_queue *rq, struct proc_struct *proc) { /* LAB6: YOUR CODE * (1) insert the proc into rq correctly * NOTICE: you can use skew_heap or list. Important functions * skew_heap_insert: insert a entry into skew_heap * list_add_before: insert a entry into the last of list * (2) recalculate proc->time_slice * (3) set proc->rq pointer to rq * (4) increase rq->proc_num */ #if USE_SKEW_HEAP rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f); #else list_add_before(&(rq->run_list), &(proc->run_link)); #endif if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) { proc->time_slice = rq->max_time_slice; } proc->rq = rq; rq->proc_num++; } \u8fd9\u91cc\u9700\u8981\u6839\u636e\u662f\u5426\u4f7f\u7528\u4f18\u5148\u7ea7\u961f\u5217\u6765\u8fdb\u884c\u4e0d\u540c\u7684\u64cd\u4f5c\uff0c\u5982\u679c\u4f7f\u7528\uff0c\u76f4\u63a5\u63d2\u5165\uff0c\u5426\u5219\u63d2\u5165\u5230\u94fe\u8868\u672b\u7aef\u3002\u5c06 proc->rq \u7f6e\u4e3a\u5f53\u524d rq \uff0c\u540c\u65f6\u5c06 proc_num \u52a0\u4e00\u3002 stride_dequeue static void stride_dequeue(struct run_queue *rq, struct proc_struct *proc) { /* LAB6: YOUR CODE * (1) remove the proc from rq correctly * NOTICE: you can use skew_heap or list. Important functions * skew_heap_remove: remove a entry from skew_heap * list_del_init: remove a entry from the list */ #if USE_SKEW_HEAP rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f); #else list_del_init(&(proc->run_link)); #endif rq->proc_num--; } \u5c06\u8fdb\u7a0b\u4ece\u6570\u636e\u7ed3\u6784\u4e2d\u5220\u9664\uff0c\u540c\u65f6 proc_num \u51cf\u4e00\u3002 stride_pick_next static struct proc_struct * stride_pick_next(struct run_queue *rq) { /* LAB6: YOUR CODE * (1) get a proc_struct pointer p with the minimum value of stride (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll (1.2) If using list, we have to search list to find the p with minimum stride value * (2) update p;s stride value: p->lab6_stride * (3) return p */ #if USE_SKEW_HEAP if (!rq->lab6_run_pool) { return NULL; } struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool); #else list_entry_t *le = list_next(&(rq->run_list)); if(le == &(rq->run_list)) { return NULL; } struct proc_struct *p = le2proc(le, run_link); for (le = list_next(le); le != &(rq->run_list); le = list_next(le)) { struct proc_struct *p1 = le2proc(le, run_link); if((int32_t)(p->lab6_stride - p1->lab6_stride) < 0) { p = p1; } } #endif if(p->lab6_priority == 0) { p->lab6_stride += BIG_STRIDE; } else { p->lab6_stride += BIG_STRIDE / p->lab6_priority; } return p; } \u9996\u5148\u9700\u8981\u9488\u5bf9\u4e0d\u540c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u627e\u5230\u4e0b\u4e00\u4e2a\u9009\u62e9\u7684\u8fdb\u7a0b\u3002\u5982\u679c\u662f\u4f18\u5148\u7ea7\u961f\u5217\uff0c\u5806\u9876\u7aef\u7684\u8fdb\u7a0b\u5373\u4e3a\u7ed3\u679c\uff0c\u5426\u5219\u9700\u8981\u904d\u5386\u94fe\u8868\uff0c\u627e\u5230 lab6_stride \u6700\u5c0f\u7684\u8fdb\u7a0b\u3002\u7136\u540e\u6839\u636e\u7b97\u6cd5\u5c06 lab6_stride \u52a0\u4e0a BIG_STRIDE / p->lab6_priority . stride_proc_tick static void stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) { /* LAB6: YOUR CODE */ if(proc->time_slice > 0) { proc->time_slice--; } if(proc->time_slice == 0) { proc->need_resched = 1; } } \u5224\u65ad\u5f53\u524d\u8fdb\u7a0b\u7684\u65f6\u95f4\u7247\u4e2a\u6570\u662f\u5426\u5927\u4e8e\u96f6\uff0c\u5982\u679c\u662f\u5219\u51cf\u4e00\uff0c\u5426\u5219\u5c06 need_resched \u7f6e1\uff0c\u5728\u4e0b\u6b21\u65f6\u949f\u4e2d\u65ad\u65f6\u8fdb\u884c\u5207\u6362\u8fdb\u7a0b\u3002 \u6267\u884c make run-priority \uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5982\u4e0b\uff1a kernel_execve: pid = 2, name = \"priority\". main: fork ok,now need to wait pids. child pid 6, acc 740000, time 1001 child pid 7, acc 912000, time 1002 child pid 4, acc 380000, time 1003 child pid 5, acc 560000, time 1003 child pid 3, acc 196000, time 1004 main: pid 3, acc 196000, time 1005 main: pid 4, acc 380000, time 1005 main: pid 5, acc 560000, time 1005 main: pid 6, acc 740000, time 1005 main: pid 7, acc 912000, time 1005 main: wait pids over stride sched correct result: 1 2 3 4 5 all user-mode processes have quit. \u53ef\u4ee5\u770b\u5230\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u3002","title":"2"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab6/2/#2-stride-scheduling","text":"\u5b9e\u73b0\u5728 kern/schedule/default_sched.c \u4e2d\u7684\u4e94\u4e2a\u51fd\u6570\uff0c\u5b9e\u73b0\u5982\u4e0b\uff1a stride_init static void stride_init(struct run_queue *rq) { /* LAB6: YOUR CODE * (1) init the ready process list: rq->run_list * (2) init the run pool: rq->lab6_run_pool * (3) set number of process: rq->proc_num to 0 */ list_init(&(rq->run_list)); rq->lab6_run_pool = NULL; rq->proc_num = 0; } \u8fdb\u884c\u521d\u59cb\u5316\u64cd\u4f5c\uff0c\u5c06\u8fd0\u884c\u961f\u5217\u7f6e\u7a7a\uff0c\u540c\u65f6\u5c06 proc_num \u7f6e\u96f6\u3002 stride_enqueue static void stride_enqueue(struct run_queue *rq, struct proc_struct *proc) { /* LAB6: YOUR CODE * (1) insert the proc into rq correctly * NOTICE: you can use skew_heap or list. Important functions * skew_heap_insert: insert a entry into skew_heap * list_add_before: insert a entry into the last of list * (2) recalculate proc->time_slice * (3) set proc->rq pointer to rq * (4) increase rq->proc_num */ #if USE_SKEW_HEAP rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f); #else list_add_before(&(rq->run_list), &(proc->run_link)); #endif if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) { proc->time_slice = rq->max_time_slice; } proc->rq = rq; rq->proc_num++; } \u8fd9\u91cc\u9700\u8981\u6839\u636e\u662f\u5426\u4f7f\u7528\u4f18\u5148\u7ea7\u961f\u5217\u6765\u8fdb\u884c\u4e0d\u540c\u7684\u64cd\u4f5c\uff0c\u5982\u679c\u4f7f\u7528\uff0c\u76f4\u63a5\u63d2\u5165\uff0c\u5426\u5219\u63d2\u5165\u5230\u94fe\u8868\u672b\u7aef\u3002\u5c06 proc->rq \u7f6e\u4e3a\u5f53\u524d rq \uff0c\u540c\u65f6\u5c06 proc_num \u52a0\u4e00\u3002 stride_dequeue static void stride_dequeue(struct run_queue *rq, struct proc_struct *proc) { /* LAB6: YOUR CODE * (1) remove the proc from rq correctly * NOTICE: you can use skew_heap or list. Important functions * skew_heap_remove: remove a entry from skew_heap * list_del_init: remove a entry from the list */ #if USE_SKEW_HEAP rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f); #else list_del_init(&(proc->run_link)); #endif rq->proc_num--; } \u5c06\u8fdb\u7a0b\u4ece\u6570\u636e\u7ed3\u6784\u4e2d\u5220\u9664\uff0c\u540c\u65f6 proc_num \u51cf\u4e00\u3002 stride_pick_next static struct proc_struct * stride_pick_next(struct run_queue *rq) { /* LAB6: YOUR CODE * (1) get a proc_struct pointer p with the minimum value of stride (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll (1.2) If using list, we have to search list to find the p with minimum stride value * (2) update p;s stride value: p->lab6_stride * (3) return p */ #if USE_SKEW_HEAP if (!rq->lab6_run_pool) { return NULL; } struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool); #else list_entry_t *le = list_next(&(rq->run_list)); if(le == &(rq->run_list)) { return NULL; } struct proc_struct *p = le2proc(le, run_link); for (le = list_next(le); le != &(rq->run_list); le = list_next(le)) { struct proc_struct *p1 = le2proc(le, run_link); if((int32_t)(p->lab6_stride - p1->lab6_stride) < 0) { p = p1; } } #endif if(p->lab6_priority == 0) { p->lab6_stride += BIG_STRIDE; } else { p->lab6_stride += BIG_STRIDE / p->lab6_priority; } return p; } \u9996\u5148\u9700\u8981\u9488\u5bf9\u4e0d\u540c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u627e\u5230\u4e0b\u4e00\u4e2a\u9009\u62e9\u7684\u8fdb\u7a0b\u3002\u5982\u679c\u662f\u4f18\u5148\u7ea7\u961f\u5217\uff0c\u5806\u9876\u7aef\u7684\u8fdb\u7a0b\u5373\u4e3a\u7ed3\u679c\uff0c\u5426\u5219\u9700\u8981\u904d\u5386\u94fe\u8868\uff0c\u627e\u5230 lab6_stride \u6700\u5c0f\u7684\u8fdb\u7a0b\u3002\u7136\u540e\u6839\u636e\u7b97\u6cd5\u5c06 lab6_stride \u52a0\u4e0a BIG_STRIDE / p->lab6_priority . stride_proc_tick static void stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) { /* LAB6: YOUR CODE */ if(proc->time_slice > 0) { proc->time_slice--; } if(proc->time_slice == 0) { proc->need_resched = 1; } } \u5224\u65ad\u5f53\u524d\u8fdb\u7a0b\u7684\u65f6\u95f4\u7247\u4e2a\u6570\u662f\u5426\u5927\u4e8e\u96f6\uff0c\u5982\u679c\u662f\u5219\u51cf\u4e00\uff0c\u5426\u5219\u5c06 need_resched \u7f6e1\uff0c\u5728\u4e0b\u6b21\u65f6\u949f\u4e2d\u65ad\u65f6\u8fdb\u884c\u5207\u6362\u8fdb\u7a0b\u3002 \u6267\u884c make run-priority \uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5982\u4e0b\uff1a kernel_execve: pid = 2, name = \"priority\". main: fork ok,now need to wait pids. child pid 6, acc 740000, time 1001 child pid 7, acc 912000, time 1002 child pid 4, acc 380000, time 1003 child pid 5, acc 560000, time 1003 child pid 3, acc 196000, time 1004 main: pid 3, acc 196000, time 1005 main: pid 4, acc 380000, time 1005 main: pid 5, acc 560000, time 1005 main: pid 6, acc 740000, time 1005 main: pid 7, acc 912000, time 1005 main: wait pids over stride sched correct result: 1 2 3 4 5 all user-mode processes have quit. \u53ef\u4ee5\u770b\u5230\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u3002","title":"\u7ec3\u4e602\uff1a\u5b9e\u73b0 Stride Scheduling \u8c03\u5ea6\u7b97\u6cd5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab7/1/","text":"\u7ec3\u4e601\uff1a\u7406\u89e3\u5185\u6838\u7ea7\u4fe1\u53f7\u91cf\u7684\u5b9e\u73b0\u548c\u57fa\u4e8e\u5185\u6838\u7ea7\u4fe1\u53f7\u91cf\u7684\u54f2\u5b66\u5bb6\u5c31\u9910\u95ee\u9898 \u95ee\u98981.1\uff1a\u7ed9\u51fa\u5185\u6838\u7ea7\u4fe1\u53f7\u91cf\u7684\u8bbe\u8ba1\u63cf\u8ff0\uff0c\u5e76\u8bf4\u5176\u5927\u81f4\u6267\u884c\u6d41\u6d41\u7a0b\u3002 \u5185\u6838\u7ea7\u4fe1\u53f7\u91cf\u7684\u5b9a\u4e49\u5728 kern/sync/sem.h \u4e2d\uff1a typedef struct { int value; wait_queue_t wait_queue; } semaphore_t; value \u7528\u4e8e\u8868\u793a\u4fe1\u53f7\u91cf\u4e2d\u8d44\u6e90\u7684\u6574\u6570\u503c\uff0c wait_queue \u8868\u793a\u7b49\u5f85\u961f\u5217\u3002 \u5bf9\u4e8e\u4fe1\u53f7\u91cf\u5b58\u5728\u4ee5\u4e0b\u51e0\u79cd\u64cd\u4f5c\uff1a sem_init(semaphore_t *sem, int value) : \u521d\u59cb\u5316\u4fe1\u53f7\u91cf\uff0c\u8bbe\u7f6e value \u5e76\u65b0\u5efa\u4e00\u4e2a\u7b49\u5f85\u961f\u5217 void up(semaphore_t *sem) : V\u64cd\u4f5c\uff0c\u8c03\u7528 __up() \u51fd\u6570\u5b9e\u73b0\u3002 void down(semaphore_t *sem) : P\u64cd\u4f5c\uff0c\u8c03\u7528 __down() \u51fd\u6570\u5b9e\u73b0\u3002 bool try_down(semaphore_t *sem) : \u975e\u963b\u585e\u7684P\u64cd\u4f5c\uff0c\u5982\u679c\u4fe1\u53f7\u91cf\u7684 value \u5927\u4e8e0\uff0c\u5219\u76f4\u63a5\u51cf\u4e00\u3002 \u4ece\u4ee5\u4e0a\u7684\u64cd\u4f5c\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u5173\u4e8e\u4fe1\u53f7\u91cf\u7684\u6838\u5fc3\u7684\u5b9e\u73b0\u4e3a __up() \u548c __down() \u51fd\u6570\u3002\u4e0b\u9762\u5bf9\u8fd9\u4e24\u4e2a\u51fd\u6570\u505a\u8fdb\u4e00\u6b65\u5206\u6790\u3002 static __noinline void __up(semaphore_t *sem, uint32_t wait_state) { bool intr_flag; local_intr_save(intr_flag); { wait_t *wait; if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) { sem->value ++; } else { assert(wait->proc->wait_state == wait_state); wakeup_wait(&(sem->wait_queue), wait, wait_state, 1); } } local_intr_restore(intr_flag); } V\u64cd\u4f5c\u7684\u6267\u884c\u8fc7\u7a0b\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u5173\u4e2d\u65ad \u5224\u65ad\u7b49\u5f85\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff0c\u82e5\u4e3a\u7a7a\uff0c\u5c06 value \u503c\u52a0\u4e00 \u5426\u5219\uff0c\u8c03\u7528 wake_up \u5c06\u7761\u7720\u7684\u8fdb\u7a0b\u5524\u9192 \u5f00\u4e2d\u65ad\u8fd4\u56de static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) { bool intr_flag; local_intr_save(intr_flag); if (sem->value > 0) { sem->value --; local_intr_restore(intr_flag); return 0; } wait_t __wait, *wait = &__wait; wait_current_set(&(sem->wait_queue), wait, wait_state); local_intr_restore(intr_flag); schedule(); local_intr_save(intr_flag); wait_current_del(&(sem->wait_queue), wait); local_intr_restore(intr_flag); if (wait->wakeup_flags != wait_state) { return wait->wakeup_flags; } return 0; } P\u64cd\u4f5c\u7684\u6267\u884c\u8fc7\u7a0b\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u5173\u4e2d\u65ad \u5224\u65ad\u4fe1\u53f7\u91cf\u7684 value \u662f\u5426\u5927\u4e8e0\uff0c\u5982\u679c\u662f\uff0c\u5219\u5c06 value \u51cf\u4e00\u540e\u5f00\u4e2d\u65ad\u8fd4\u56de \u5426\u5219\uff0c\u5c06\u5f53\u524d\u8fdb\u7a0b\u52a0\u5165\u5230\u7b49\u5f85\u961f\u5217\uff0c\u5f00\u4e2d\u65ad\u3002\u6267\u884c schedule \u8fdb\u884c\u8fdb\u7a0b\u8c03\u5ea6 \u5982\u679c\u88ab\u5524\u9192\uff0c\u5219\u5173\u4e2d\u65ad \u4ece\u7b49\u5f85\u961f\u5217\u4e2d\u5220\u9664\u6b64\u8fdb\u7a0b \u5f00\u4e2d\u65ad\u5e76\u8fd4\u56de \u95ee\u98981.2\uff1a\u7ed9\u51fa\u7ed9\u7528\u6237\u6001\u8fdb\u7a0b/\u7ebf\u7a0b\u63d0\u4f9b\u4fe1\u53f7\u91cf\u673a\u5236\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5e76\u6bd4\u8f83\u8bf4\u660e\u7ed9\u5185\u6838\u7ea7\u63d0\u4f9b\u4fe1\u53f7\u91cf\u673a\u5236\u7684\u5f02\u540c\u3002 \u7531\u4e8e\u5b9e\u73b0\u4fe1\u53f7\u91cf\u673a\u5236\u9700\u8981\u5305\u542b\u5f00\u5173\u4e2d\u65ad\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u5728\u7528\u6237\u6001\u65e0\u6cd5\u76f4\u63a5\u6267\u884c\uff0c\u9700\u8981\u7cfb\u7edf\u8c03\u7528\u6765\u5b8c\u6210\u7528\u6237\u6001\u7684\u4fe1\u53f7\u91cf\u673a\u5236\u3002\u53ef\u4ee5\u589e\u52a0\u4e0e\u4fe1\u53f7\u91cf\u76f8\u5173\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u6bd4\u5982 SYS_SEMINIT , SYS_UP , SYS_DOWN \u7b49\u3002 \u76f8\u540c\u70b9\uff1a\u5b9e\u73b0\u673a\u5236\u76f8\u540c \u4e0d\u540c\u70b9\uff1a\u7528\u6237\u6001\u9700\u8981\u7cfb\u7edf\u8c03\u7528 \u200b","title":"1"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab7/1/#1","text":"\u95ee\u98981.1\uff1a\u7ed9\u51fa\u5185\u6838\u7ea7\u4fe1\u53f7\u91cf\u7684\u8bbe\u8ba1\u63cf\u8ff0\uff0c\u5e76\u8bf4\u5176\u5927\u81f4\u6267\u884c\u6d41\u6d41\u7a0b\u3002 \u5185\u6838\u7ea7\u4fe1\u53f7\u91cf\u7684\u5b9a\u4e49\u5728 kern/sync/sem.h \u4e2d\uff1a typedef struct { int value; wait_queue_t wait_queue; } semaphore_t; value \u7528\u4e8e\u8868\u793a\u4fe1\u53f7\u91cf\u4e2d\u8d44\u6e90\u7684\u6574\u6570\u503c\uff0c wait_queue \u8868\u793a\u7b49\u5f85\u961f\u5217\u3002 \u5bf9\u4e8e\u4fe1\u53f7\u91cf\u5b58\u5728\u4ee5\u4e0b\u51e0\u79cd\u64cd\u4f5c\uff1a sem_init(semaphore_t *sem, int value) : \u521d\u59cb\u5316\u4fe1\u53f7\u91cf\uff0c\u8bbe\u7f6e value \u5e76\u65b0\u5efa\u4e00\u4e2a\u7b49\u5f85\u961f\u5217 void up(semaphore_t *sem) : V\u64cd\u4f5c\uff0c\u8c03\u7528 __up() \u51fd\u6570\u5b9e\u73b0\u3002 void down(semaphore_t *sem) : P\u64cd\u4f5c\uff0c\u8c03\u7528 __down() \u51fd\u6570\u5b9e\u73b0\u3002 bool try_down(semaphore_t *sem) : \u975e\u963b\u585e\u7684P\u64cd\u4f5c\uff0c\u5982\u679c\u4fe1\u53f7\u91cf\u7684 value \u5927\u4e8e0\uff0c\u5219\u76f4\u63a5\u51cf\u4e00\u3002 \u4ece\u4ee5\u4e0a\u7684\u64cd\u4f5c\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u5173\u4e8e\u4fe1\u53f7\u91cf\u7684\u6838\u5fc3\u7684\u5b9e\u73b0\u4e3a __up() \u548c __down() \u51fd\u6570\u3002\u4e0b\u9762\u5bf9\u8fd9\u4e24\u4e2a\u51fd\u6570\u505a\u8fdb\u4e00\u6b65\u5206\u6790\u3002 static __noinline void __up(semaphore_t *sem, uint32_t wait_state) { bool intr_flag; local_intr_save(intr_flag); { wait_t *wait; if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) { sem->value ++; } else { assert(wait->proc->wait_state == wait_state); wakeup_wait(&(sem->wait_queue), wait, wait_state, 1); } } local_intr_restore(intr_flag); } V\u64cd\u4f5c\u7684\u6267\u884c\u8fc7\u7a0b\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u5173\u4e2d\u65ad \u5224\u65ad\u7b49\u5f85\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff0c\u82e5\u4e3a\u7a7a\uff0c\u5c06 value \u503c\u52a0\u4e00 \u5426\u5219\uff0c\u8c03\u7528 wake_up \u5c06\u7761\u7720\u7684\u8fdb\u7a0b\u5524\u9192 \u5f00\u4e2d\u65ad\u8fd4\u56de static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) { bool intr_flag; local_intr_save(intr_flag); if (sem->value > 0) { sem->value --; local_intr_restore(intr_flag); return 0; } wait_t __wait, *wait = &__wait; wait_current_set(&(sem->wait_queue), wait, wait_state); local_intr_restore(intr_flag); schedule(); local_intr_save(intr_flag); wait_current_del(&(sem->wait_queue), wait); local_intr_restore(intr_flag); if (wait->wakeup_flags != wait_state) { return wait->wakeup_flags; } return 0; } P\u64cd\u4f5c\u7684\u6267\u884c\u8fc7\u7a0b\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u5173\u4e2d\u65ad \u5224\u65ad\u4fe1\u53f7\u91cf\u7684 value \u662f\u5426\u5927\u4e8e0\uff0c\u5982\u679c\u662f\uff0c\u5219\u5c06 value \u51cf\u4e00\u540e\u5f00\u4e2d\u65ad\u8fd4\u56de \u5426\u5219\uff0c\u5c06\u5f53\u524d\u8fdb\u7a0b\u52a0\u5165\u5230\u7b49\u5f85\u961f\u5217\uff0c\u5f00\u4e2d\u65ad\u3002\u6267\u884c schedule \u8fdb\u884c\u8fdb\u7a0b\u8c03\u5ea6 \u5982\u679c\u88ab\u5524\u9192\uff0c\u5219\u5173\u4e2d\u65ad \u4ece\u7b49\u5f85\u961f\u5217\u4e2d\u5220\u9664\u6b64\u8fdb\u7a0b \u5f00\u4e2d\u65ad\u5e76\u8fd4\u56de \u95ee\u98981.2\uff1a\u7ed9\u51fa\u7ed9\u7528\u6237\u6001\u8fdb\u7a0b/\u7ebf\u7a0b\u63d0\u4f9b\u4fe1\u53f7\u91cf\u673a\u5236\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5e76\u6bd4\u8f83\u8bf4\u660e\u7ed9\u5185\u6838\u7ea7\u63d0\u4f9b\u4fe1\u53f7\u91cf\u673a\u5236\u7684\u5f02\u540c\u3002 \u7531\u4e8e\u5b9e\u73b0\u4fe1\u53f7\u91cf\u673a\u5236\u9700\u8981\u5305\u542b\u5f00\u5173\u4e2d\u65ad\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u5728\u7528\u6237\u6001\u65e0\u6cd5\u76f4\u63a5\u6267\u884c\uff0c\u9700\u8981\u7cfb\u7edf\u8c03\u7528\u6765\u5b8c\u6210\u7528\u6237\u6001\u7684\u4fe1\u53f7\u91cf\u673a\u5236\u3002\u53ef\u4ee5\u589e\u52a0\u4e0e\u4fe1\u53f7\u91cf\u76f8\u5173\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u6bd4\u5982 SYS_SEMINIT , SYS_UP , SYS_DOWN \u7b49\u3002 \u76f8\u540c\u70b9\uff1a\u5b9e\u73b0\u673a\u5236\u76f8\u540c \u4e0d\u540c\u70b9\uff1a\u7528\u6237\u6001\u9700\u8981\u7cfb\u7edf\u8c03\u7528 \u200b","title":"\u7ec3\u4e601\uff1a\u7406\u89e3\u5185\u6838\u7ea7\u4fe1\u53f7\u91cf\u7684\u5b9e\u73b0\u548c\u57fa\u4e8e\u5185\u6838\u7ea7\u4fe1\u53f7\u91cf\u7684\u54f2\u5b66\u5bb6\u5c31\u9910\u95ee\u9898"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab7/2/","text":"\u7ec3\u4e602\uff1a\u5b8c\u6210\u5185\u6838\u7ea7\u6761\u4ef6\u53d8\u91cf\u548c\u57fa\u4e8e\u5185\u6838\u7ea7\u6761\u4ef6\u53d8\u91cf\u7684\u54f2\u5b66\u5bb6\u5c31\u9910\u95ee\u9898 \u95ee\u98982.1\uff1a\u7ed9\u51fa\u5185\u6838\u7ea7\u6761\u4ef6\u53d8\u91cf\u7684\u8bbe\u8ba1\u63cf\u8ff0\uff0c\u5e76\u8bf4\u5176\u5927\u81f4\u6267\u884c\u6d41\u6d41\u7a0b\u3002 ucore\u4e2d\u7ba1\u7a0b\u6570\u636e\u7ed3\u6784 monitor_t \u7684\u5b9a\u4e49\u5982\u4e0b\uff1a typedef struct monitor{ semaphore_t mutex; // the mutex lock for going into the routines in monitor, should be initialized to 1 semaphore_t next; // the next semaphore is used to down the signaling proc itself, and the other OR wakeuped waiting proc should wake up the sleeped signaling proc. int next_count; // the number of of sleeped signaling proc condvar_t *cv; // the condvars in monitor } monitor_t; \u5176\u6210\u5458\u53d8\u91cf\u7684\u542b\u4e49\u53ca\u529f\u80fd\u4e3a\uff1a mutex : \u4e8c\u503c\u4fe1\u53f7\u91cf\uff0c\u5b9e\u73b0\u6bcf\u6b21\u53ea\u5141\u8bb8\u4e00\u4e2a\u8fdb\u7a0b\u8fdb\u5165\u7ba1\u7a0b\u7684\u4fe1\u53f7\u91cf\uff0c\u786e\u4fdd\u4e86\u4e92\u65a5\u8bbf\u95ee\u6027\u8d28. cv : \u7ba1\u7a0b\u4e2d\u7684\u6761\u4ef6\u53d8\u91cf cv \u901a\u8fc7\u6267\u884c wait_cv \uff0c\u4f1a\u4f7f\u5f97\u7b49\u5f85\u67d0\u4e2a\u6761\u4ef6C\u4e3a\u771f\u7684\u8fdb\u7a0b\u80fd\u591f\u79bb\u5f00\u7ba1\u7a0b\u5e76\u7761\u7720\uff0c\u4e14\u8ba9\u5176\u4ed6\u8fdb\u7a0b\u8fdb\u5165\u7ba1\u7a0b\u7ee7\u7eed\u6267\u884c\uff1b\u800c\u8fdb\u5165\u7ba1\u7a0b\u7684\u67d0\u8fdb\u7a0b\u8bbe\u7f6e\u6761\u4ef6C\u4e3a\u771f\u5e76\u6267\u884c signal_cv \u65f6\uff0c\u80fd\u591f\u8ba9\u7b49\u5f85\u67d0\u4e2a\u6761\u4ef6C\u4e3a\u771f\u7684\u7761\u7720\u8fdb\u7a0b\u88ab\u5524\u9192\uff0c\u4ece\u800c\u7ee7\u7eed\u8fdb\u5165\u7ba1\u7a0b\u4e2d\u6267\u884c\u3002 next / next_count : \u914d\u5408\u8fdb\u7a0b\u5bf9\u6761\u4ef6\u53d8\u91cf cv \u7684\u64cd\u4f5c\u800c\u8bbe\u7f6e\u7684\uff0c\u8fd9\u662f\u7531\u4e8e\u53d1\u51fa signal_cv \u7684\u8fdb\u7a0bA\u4f1a\u5524\u9192\u7761\u7720\u8fdb\u7a0bB\uff0c\u8fdb\u7a0bB\u6267\u884c\u4f1a\u5bfc\u81f4\u8fdb\u7a0bA\u7761\u7720\uff0c\u76f4\u5230\u8fdb\u7a0bB\u79bb\u5f00\u7ba1\u7a0b\uff0c\u8fdb\u7a0bA\u624d\u80fd\u7ee7\u7eed\u6267\u884c\uff0c\u8fd9\u4e2a\u540c\u6b65\u8fc7\u7a0b\u662f\u901a\u8fc7\u4fe1\u53f7\u91cf next \u5b8c\u6210\u7684\uff1b\u800c next_count \u8868\u793a\u4e86\u7531\u4e8e\u53d1\u51fasingal_cv\u800c\u7761\u7720\u7684\u8fdb\u7a0b\u4e2a\u6570\u3002 \u6761\u4ef6\u53d8\u91cf\u7684\u6570\u636e\u7ed3\u6784 condvar_t \u5b9a\u4e49\u5982\u4e0b\uff1a typedef struct condvar{ semaphore_t sem; // the sem semaphore is used to down the waiting proc, and the signaling proc should up the waiting proc int count; // the number of waiters on condvar monitor_t * owner; // the owner(monitor) of this condvar } condvar_t; \u5176\u6210\u5458\u53d8\u91cf\u7684\u542b\u4e49\u53ca\u529f\u80fd\u4e3a\uff1a sem : \u7528\u4e8e\u8ba9\u53d1\u51fa wait_cv \u64cd\u4f5c\u7684\u7b49\u5f85\u67d0\u4e2a\u6761\u4ef6C\u4e3a\u771f\u7684\u8fdb\u7a0b\u7761\u7720\uff0c\u800c\u8ba9\u53d1\u51fa signal_cv \u64cd\u4f5c\u7684\u8fdb\u7a0b\u901a\u8fc7\u8fd9\u4e2asem\u6765\u5524\u9192\u7761\u7720\u7684\u8fdb\u7a0b\u3002 count : \u8868\u793a\u7b49\u5728\u8fd9\u4e2a\u6761\u4ef6\u53d8\u91cf\u4e0a\u7684\u7761\u7720\u8fdb\u7a0b\u7684\u4e2a\u6570. owner : \u8868\u793a\u6b64\u6761\u4ef6\u53d8\u91cf\u7684\u5bbf\u4e3b\u662f\u54ea\u4e2a\u7ba1\u7a0b\u3002 \u5bf9\u4e8e\u7ba1\u7a0b\u7684\u4e24\u4e2a\u91cd\u8981\u7684\u51fd\u6570\u4e3a cond_wait \u548c cond_signal void cond_wait (condvar_t *cvp) { //LAB7 EXERCISE1: YOUR CODE cprintf(\"cond_wait begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\\n\", cvp, cvp->count, cvp->owner->next_count); /* * cv.count ++; * if(mt.next_count>0) * signal(mt.next) * else * signal(mt.mutex); * wait(cv.sem); * cv.count --; */ cvp->count++; if (cvp->owner->next_count > 0) { up(&(cvp->owner->next)); } else { up(&(cvp->owner->mutex)); } down(&(cvp->sem)); cvp->count--; cprintf(\"cond_wait end: cvp %x, cvp->count %d, cvp->owner->next_count %d\\n\", cvp, cvp->count, cvp->owner->next_count); } \u6267\u884c\u8fc7\u7a0b\u5982\u4e0b\uff1a \u6761\u4ef6\u53d8\u91cf\u7684 count \u52a0\u4e00 \u5982\u679c monitor.next_count \u5927\u4e8e0\uff0c\u8868\u793a\u6709\u8fdb\u7a0b\u6267\u884c cond_signal \u51fd\u6570\u7761\u7720\u4e86\uff0c\u8fd9\u4e9b\u8fdb\u7a0b\u6784\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u9700\u8981\u5524\u9192\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a\u8fdb\u7a0b\u3002 \u5426\u5219\uff0c\u9700\u8981\u5524\u9192\u7531\u4e8e\u4e92\u65a5\u800c\u4e0d\u80fd\u8fdb\u5165\u7ba1\u7a0b\u7684\u8fdb\u7a0b\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a\u8fdb\u7a0b \u5bf9\u6761\u4ef6\u53d8\u91cf\u7684\u4fe1\u53f7\u91cf\u6267\u884cP\u64cd\u4f5c\uff0c\u8bf7\u6c42\u8bbf\u95ee\u8d44\u6e90 \u6761\u4ef6\u53d8\u91cf\u7684 count \u51cf\u4e00 void cond_signal (condvar_t *cvp) { //LAB7 EXERCISE1: YOUR CODE cprintf(\"cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\\n\", cvp, cvp->count, cvp->owner->next_count); /* * cond_signal(cv) { * if(cv.count>0) { * mt.next_count ++; * signal(cv.sem); * wait(mt.next); * mt.next_count--; * } * } */ if (cvp->count > 0) { cvp->owner->next_count++; up(&(cvp->sem)); down(&(cvp->owner->next)); cvp->owner->next_count--; } cprintf(\"cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\\n\", cvp, cvp->count, cvp->owner->next_count); } \u6267\u884c\u8fc7\u7a0b\u5982\u4e0b\uff1a \u5224\u65ad\u662f\u5426\u5b58\u5728\u7b49\u5f85\u6b64\u6761\u4ef6\u7684\u8fdb\u7a0b \u5982\u679c\u6709\uff0c\u5c06\u6b64\u8fdb\u7a0b\u7761\u7720\u5728 cvp->owner->next \u4e0a\uff0c\u7b49\u5f85\u5176\u4ed6\u8fdb\u7a0b\u5c06\u672c\u8fdb\u7a0b\u518d\u6b21\u5524\u9192 \u95ee\u98982.2\uff1a\u7ed9\u51fa\u7ed9\u7528\u6237\u6001\u8fdb\u7a0b/\u7ebf\u7a0b\u63d0\u4f9b\u6761\u4ef6\u53d8\u91cf\u673a\u5236\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5e76\u6bd4\u8f83\u8bf4\u660e\u7ed9\u5185\u6838\u7ea7\u63d0\u4f9b\u6761\u4ef6\u53d8\u91cf\u673a\u5236\u7684\u5f02\u540c\u3002 \u540c\u4fe1\u53f7\u91cf\u4e00\u6837\uff0c\u9700\u8981\u5c01\u88c5\u4e3a\u7cfb\u7edf\u8c03\u7528\u63a5\u53e3\u3002\u5728\u6b64\u4e0d\u518d\u8d58\u8ff0\u3002","title":"2"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab7/2/#2","text":"\u95ee\u98982.1\uff1a\u7ed9\u51fa\u5185\u6838\u7ea7\u6761\u4ef6\u53d8\u91cf\u7684\u8bbe\u8ba1\u63cf\u8ff0\uff0c\u5e76\u8bf4\u5176\u5927\u81f4\u6267\u884c\u6d41\u6d41\u7a0b\u3002 ucore\u4e2d\u7ba1\u7a0b\u6570\u636e\u7ed3\u6784 monitor_t \u7684\u5b9a\u4e49\u5982\u4e0b\uff1a typedef struct monitor{ semaphore_t mutex; // the mutex lock for going into the routines in monitor, should be initialized to 1 semaphore_t next; // the next semaphore is used to down the signaling proc itself, and the other OR wakeuped waiting proc should wake up the sleeped signaling proc. int next_count; // the number of of sleeped signaling proc condvar_t *cv; // the condvars in monitor } monitor_t; \u5176\u6210\u5458\u53d8\u91cf\u7684\u542b\u4e49\u53ca\u529f\u80fd\u4e3a\uff1a mutex : \u4e8c\u503c\u4fe1\u53f7\u91cf\uff0c\u5b9e\u73b0\u6bcf\u6b21\u53ea\u5141\u8bb8\u4e00\u4e2a\u8fdb\u7a0b\u8fdb\u5165\u7ba1\u7a0b\u7684\u4fe1\u53f7\u91cf\uff0c\u786e\u4fdd\u4e86\u4e92\u65a5\u8bbf\u95ee\u6027\u8d28. cv : \u7ba1\u7a0b\u4e2d\u7684\u6761\u4ef6\u53d8\u91cf cv \u901a\u8fc7\u6267\u884c wait_cv \uff0c\u4f1a\u4f7f\u5f97\u7b49\u5f85\u67d0\u4e2a\u6761\u4ef6C\u4e3a\u771f\u7684\u8fdb\u7a0b\u80fd\u591f\u79bb\u5f00\u7ba1\u7a0b\u5e76\u7761\u7720\uff0c\u4e14\u8ba9\u5176\u4ed6\u8fdb\u7a0b\u8fdb\u5165\u7ba1\u7a0b\u7ee7\u7eed\u6267\u884c\uff1b\u800c\u8fdb\u5165\u7ba1\u7a0b\u7684\u67d0\u8fdb\u7a0b\u8bbe\u7f6e\u6761\u4ef6C\u4e3a\u771f\u5e76\u6267\u884c signal_cv \u65f6\uff0c\u80fd\u591f\u8ba9\u7b49\u5f85\u67d0\u4e2a\u6761\u4ef6C\u4e3a\u771f\u7684\u7761\u7720\u8fdb\u7a0b\u88ab\u5524\u9192\uff0c\u4ece\u800c\u7ee7\u7eed\u8fdb\u5165\u7ba1\u7a0b\u4e2d\u6267\u884c\u3002 next / next_count : \u914d\u5408\u8fdb\u7a0b\u5bf9\u6761\u4ef6\u53d8\u91cf cv \u7684\u64cd\u4f5c\u800c\u8bbe\u7f6e\u7684\uff0c\u8fd9\u662f\u7531\u4e8e\u53d1\u51fa signal_cv \u7684\u8fdb\u7a0bA\u4f1a\u5524\u9192\u7761\u7720\u8fdb\u7a0bB\uff0c\u8fdb\u7a0bB\u6267\u884c\u4f1a\u5bfc\u81f4\u8fdb\u7a0bA\u7761\u7720\uff0c\u76f4\u5230\u8fdb\u7a0bB\u79bb\u5f00\u7ba1\u7a0b\uff0c\u8fdb\u7a0bA\u624d\u80fd\u7ee7\u7eed\u6267\u884c\uff0c\u8fd9\u4e2a\u540c\u6b65\u8fc7\u7a0b\u662f\u901a\u8fc7\u4fe1\u53f7\u91cf next \u5b8c\u6210\u7684\uff1b\u800c next_count \u8868\u793a\u4e86\u7531\u4e8e\u53d1\u51fasingal_cv\u800c\u7761\u7720\u7684\u8fdb\u7a0b\u4e2a\u6570\u3002 \u6761\u4ef6\u53d8\u91cf\u7684\u6570\u636e\u7ed3\u6784 condvar_t \u5b9a\u4e49\u5982\u4e0b\uff1a typedef struct condvar{ semaphore_t sem; // the sem semaphore is used to down the waiting proc, and the signaling proc should up the waiting proc int count; // the number of waiters on condvar monitor_t * owner; // the owner(monitor) of this condvar } condvar_t; \u5176\u6210\u5458\u53d8\u91cf\u7684\u542b\u4e49\u53ca\u529f\u80fd\u4e3a\uff1a sem : \u7528\u4e8e\u8ba9\u53d1\u51fa wait_cv \u64cd\u4f5c\u7684\u7b49\u5f85\u67d0\u4e2a\u6761\u4ef6C\u4e3a\u771f\u7684\u8fdb\u7a0b\u7761\u7720\uff0c\u800c\u8ba9\u53d1\u51fa signal_cv \u64cd\u4f5c\u7684\u8fdb\u7a0b\u901a\u8fc7\u8fd9\u4e2asem\u6765\u5524\u9192\u7761\u7720\u7684\u8fdb\u7a0b\u3002 count : \u8868\u793a\u7b49\u5728\u8fd9\u4e2a\u6761\u4ef6\u53d8\u91cf\u4e0a\u7684\u7761\u7720\u8fdb\u7a0b\u7684\u4e2a\u6570. owner : \u8868\u793a\u6b64\u6761\u4ef6\u53d8\u91cf\u7684\u5bbf\u4e3b\u662f\u54ea\u4e2a\u7ba1\u7a0b\u3002 \u5bf9\u4e8e\u7ba1\u7a0b\u7684\u4e24\u4e2a\u91cd\u8981\u7684\u51fd\u6570\u4e3a cond_wait \u548c cond_signal void cond_wait (condvar_t *cvp) { //LAB7 EXERCISE1: YOUR CODE cprintf(\"cond_wait begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\\n\", cvp, cvp->count, cvp->owner->next_count); /* * cv.count ++; * if(mt.next_count>0) * signal(mt.next) * else * signal(mt.mutex); * wait(cv.sem); * cv.count --; */ cvp->count++; if (cvp->owner->next_count > 0) { up(&(cvp->owner->next)); } else { up(&(cvp->owner->mutex)); } down(&(cvp->sem)); cvp->count--; cprintf(\"cond_wait end: cvp %x, cvp->count %d, cvp->owner->next_count %d\\n\", cvp, cvp->count, cvp->owner->next_count); } \u6267\u884c\u8fc7\u7a0b\u5982\u4e0b\uff1a \u6761\u4ef6\u53d8\u91cf\u7684 count \u52a0\u4e00 \u5982\u679c monitor.next_count \u5927\u4e8e0\uff0c\u8868\u793a\u6709\u8fdb\u7a0b\u6267\u884c cond_signal \u51fd\u6570\u7761\u7720\u4e86\uff0c\u8fd9\u4e9b\u8fdb\u7a0b\u6784\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u9700\u8981\u5524\u9192\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a\u8fdb\u7a0b\u3002 \u5426\u5219\uff0c\u9700\u8981\u5524\u9192\u7531\u4e8e\u4e92\u65a5\u800c\u4e0d\u80fd\u8fdb\u5165\u7ba1\u7a0b\u7684\u8fdb\u7a0b\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a\u8fdb\u7a0b \u5bf9\u6761\u4ef6\u53d8\u91cf\u7684\u4fe1\u53f7\u91cf\u6267\u884cP\u64cd\u4f5c\uff0c\u8bf7\u6c42\u8bbf\u95ee\u8d44\u6e90 \u6761\u4ef6\u53d8\u91cf\u7684 count \u51cf\u4e00 void cond_signal (condvar_t *cvp) { //LAB7 EXERCISE1: YOUR CODE cprintf(\"cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\\n\", cvp, cvp->count, cvp->owner->next_count); /* * cond_signal(cv) { * if(cv.count>0) { * mt.next_count ++; * signal(cv.sem); * wait(mt.next); * mt.next_count--; * } * } */ if (cvp->count > 0) { cvp->owner->next_count++; up(&(cvp->sem)); down(&(cvp->owner->next)); cvp->owner->next_count--; } cprintf(\"cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\\n\", cvp, cvp->count, cvp->owner->next_count); } \u6267\u884c\u8fc7\u7a0b\u5982\u4e0b\uff1a \u5224\u65ad\u662f\u5426\u5b58\u5728\u7b49\u5f85\u6b64\u6761\u4ef6\u7684\u8fdb\u7a0b \u5982\u679c\u6709\uff0c\u5c06\u6b64\u8fdb\u7a0b\u7761\u7720\u5728 cvp->owner->next \u4e0a\uff0c\u7b49\u5f85\u5176\u4ed6\u8fdb\u7a0b\u5c06\u672c\u8fdb\u7a0b\u518d\u6b21\u5524\u9192 \u95ee\u98982.2\uff1a\u7ed9\u51fa\u7ed9\u7528\u6237\u6001\u8fdb\u7a0b/\u7ebf\u7a0b\u63d0\u4f9b\u6761\u4ef6\u53d8\u91cf\u673a\u5236\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5e76\u6bd4\u8f83\u8bf4\u660e\u7ed9\u5185\u6838\u7ea7\u63d0\u4f9b\u6761\u4ef6\u53d8\u91cf\u673a\u5236\u7684\u5f02\u540c\u3002 \u540c\u4fe1\u53f7\u91cf\u4e00\u6837\uff0c\u9700\u8981\u5c01\u88c5\u4e3a\u7cfb\u7edf\u8c03\u7528\u63a5\u53e3\u3002\u5728\u6b64\u4e0d\u518d\u8d58\u8ff0\u3002","title":"\u7ec3\u4e602\uff1a\u5b8c\u6210\u5185\u6838\u7ea7\u6761\u4ef6\u53d8\u91cf\u548c\u57fa\u4e8e\u5185\u6838\u7ea7\u6761\u4ef6\u53d8\u91cf\u7684\u54f2\u5b66\u5bb6\u5c31\u9910\u95ee\u9898"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab8/lab8/","text":"Lab8 Report \u7ec3\u4e601\uff1a\u5b8c\u6210\u8bfb\u6587\u4ef6\u64cd\u4f5c\u7684\u5b9e\u73b0 \u5728 kern/fs/sfs/sfs_inode.c \u4e2d\u5b8c\u6210 sys_io_nolock \u51fd\u6570\uff0c\u5b8c\u6210\u8bfb\u53d6\u5199\u5165\u64cd\u4f5c\u3002\u4ee3\u7801\u5982\u4e0b\uff1a static int sfs_io_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, void *buf, off_t offset, size_t *alenp, bool write) { struct sfs_disk_inode *din = sin->din; assert(din->type != SFS_TYPE_DIR); off_t endpos = offset + *alenp, blkoff; *alenp = 0; // calculate the Rd/Wr end position if (offset < 0 || offset >= SFS_MAX_FILE_SIZE || offset > endpos) { return -E_INVAL; } if (offset == endpos) { return 0; } if (endpos > SFS_MAX_FILE_SIZE) { endpos = SFS_MAX_FILE_SIZE; } if (!write) { if (offset >= din->size) { return 0; } if (endpos > din->size) { endpos = din->size; } } int (*sfs_buf_op)(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset); int (*sfs_block_op)(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks); if (write) { sfs_buf_op = sfs_wbuf, sfs_block_op = sfs_wblock; } else { sfs_buf_op = sfs_rbuf, sfs_block_op = sfs_rblock; } int ret = 0; size_t size, alen = 0; uint32_t ino; uint32_t blkno = offset / SFS_BLKSIZE; // The NO. of Rd/Wr begin block uint32_t nblks = endpos / SFS_BLKSIZE - blkno; // The size of Rd/Wr blocks //LAB8:EXERCISE1 YOUR CODE HINT: call sfs_bmap_load_nolock, sfs_rbuf, sfs_rblock,etc. read different kind of blocks in file /* * (1) If offset isn't aligned with the first block, Rd/Wr some content from offset to the end of the first block * NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op * Rd/Wr size = (nblks != 0) ? (SFS_BLKSIZE - blkoff) : (endpos - offset) * (2) Rd/Wr aligned blocks * NOTICE: useful function: sfs_bmap_load_nolock, sfs_block_op * (3) If end position isn't aligned with the last block, Rd/Wr some content from begin to the (endpos % SFS_BLKSIZE) of the last block * NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op */ blkoff = offset % SFS_BLKSIZE; if (blkoff != 0) { size = (nblks != 0) ? (SFS_BLKSIZE - blkoff) : (endpos - offset); if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) { goto out; } if ((ret = sfs_buf_op(sfs, buf, size, ino, blkoff)) != 0) { goto out; } alen += size; if (nblks == 0) { goto out; } buf += size; blkno++; nblks--; } size = SFS_BLKSIZE; while (nblks > 0) { if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) { goto out; } if ((ret = sfs_block_op(sfs, buf, ino, 1)) != 0) { goto out; } alen += size; buf += size; blkno++; nblks--; } blkoff = 0; size = endpos % SFS_BLKSIZE; if (size > 0) { if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) { goto out; } if ((ret = sfs_buf_op(sfs, buf, size, ino, blkoff)) != 0) { goto out; } alen += size; } out: *alenp = alen; if (offset + alen > sin->din->size) { sin->din->size = offset + alen; sin->dirty = 1; } return ret; } \u4ee3\u7801\u7684\u6267\u884c\u6b65\u9aa4\u4e3a\uff1a \u5904\u7406\u8d77\u59cb\u5730\u5740\u6240\u5728\u7684\u5757\u3002\u5224\u65ad\u8d77\u59cb\u5730\u5740\u7684 offset \u662f\u5426\u5bf9\u9f50\uff0c\u5982\u679c\u4e0d\u5bf9\u9f50\uff0c\u8ba1\u7b97\u5757\u5185\u504f\u79fb blkoff \u548c\u5927\u5c0f size \u3002\u8c03\u7528 sfs_bmap_load_nolock \u83b7\u53d6 ino \uff0c\u518d\u8c03\u7528 sfs_buf_op \u5b8c\u6210\u5b9e\u9645\u7684\u8bfb\u5199\u64cd\u4f5c\u3002\u5b8c\u6210\u540e\uff0c\u9700\u8981\u589e\u52a0\u5b8c\u6210\u7684\u5927\u5c0f alen \uff0c\u7f13\u51b2\u533a\u6307\u9488 buf \u524d\u79fb\uff0c\u5e76\u5bf9 blkno \u548c nblks \u66f4\u65b0\u3002 \u5904\u7406\u4e2d\u95f4\u5b8c\u6574\u7684\u5757\u3002\u5bf9\u4e8e\u6bcf\u4e00\u5757\uff0c\u8c03\u7528 sfs_bmap_load_nolock \u83b7\u53d6 ino \uff0c\u518d\u8c03\u7528 sfs_buf_op \u5b8c\u6210\u5b9e\u9645\u7684\u8bfb\u5199\u64cd\u4f5c\u3002\u5bf9\u5176\u4ed6\u53d8\u91cf\u7684\u66f4\u65b0\u4e0e\u6b65\u9aa4\u4e00\u7c7b\u4f3c\u3002 \u5904\u7406\u6700\u540e\u7684\u6ca1\u6709\u5bf9\u9f50\u7684\u5757\u3002\u8fd9\u65f6\uff0c blkoff \u4e3a0\uff0c\u8ba1\u7b97 size \u3002\u8c03\u7528 sfs_bmap_load_nolock \u83b7\u53d6 ino \uff0c\u518d\u8c03\u7528 sfs_buf_op \u5b8c\u6210\u5b9e\u9645\u7684\u8bfb\u5199\u64cd\u4f5c\u3002 \u95ee\u98981.1\uff1a\u7ed9\u51fa\u8bbe\u8ba1\u5b9e\u73b0\u201cUNIX\u7684PIPE\u673a\u5236\u201d\u7684\u6982\u8981\u8bbe\u65b9\u6848\uff0c\u9f13\u52b1\u7ed9\u51fa\u8be6\u7ec6\u8bbe\u8ba1\u65b9\u6848 \u8bbe\u7f6e\u4e00\u4e2a\u94fe\u8868\u7ef4\u62a4\u7f13\u51b2\u533a\u7684\u6570\u636e\u3002\u5f53\u94fe\u8868\u4e3a\u7a7a\u65f6\uff0c\u8868\u793a\u7f13\u51b2\u533a\u5185\u6ca1\u6709\u6570\u636e\u3002\u7f13\u51b2\u533a\u6ca1\u6709\u6ee1\u65f6\uff0c\u8fdb\u7a0b\u53ef\u4ee5\u5199\u6570\u636e\uff0c\u5199\u7684\u6570\u636e\u63d2\u5165\u94fe\u8868\u5c3e\u90e8\uff0c\u5426\u5219\u5c06\u8fdb\u7a0b\u963b\u585e\u3002\u5f53\u7f13\u51b2\u533a\u4e0d\u662f\u7a7a\u65f6\uff0c\u8fdb\u7a0b\u53ef\u4ee5\u8bfb\u6570\u636e\uff0c\u8bfb\u51fa\u7684\u6570\u636e\u4ece\u94fe\u8868\u5934\u90e8\u5220\u9664\uff0c\u5426\u5219\u4e5f\u5c06\u8fdb\u7a0b\u963b\u585e\u3002 \u4e0e\u201c\u8bfb\u8005-\u5199\u8005\u201d\u95ee\u9898\u7c7b\u4f3c\uff0c\u9700\u8981\u8003\u8651\u5230\u4e92\u65a5\u8bbf\u95ee\u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u53ef\u4ee5\u4f7f\u7528\u4fe1\u53f7\u91cf\u6216\u8005\u7ba1\u7a0b\u6765\u5b9e\u73b0\u4e92\u65a5\u64cd\u4f5c\u3002 \u7ec3\u4e602\uff1a\u5b8c\u6210\u57fa\u4e8e\u6587\u4ef6\u7cfb\u7edf\u7684\u6267\u884c\u7a0b\u5e8f\u673a\u5236\u7684\u5b9e\u73b0 \u5728 kern/process/proc.c \u4e2d\u5b8c\u6210 load_icode \u51fd\u6570\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a static int load_icode(int fd, int argc, char **kargv) { /* LAB8:EXERCISE2 YOUR CODE HINT:how to load the file with handler fd in to process's memory? how to setup argc/argv? * MACROs or Functions: * mm_create - create a mm * setup_pgdir - setup pgdir in mm * load_icode_read - read raw data content of program file * mm_map - build new vma * pgdir_alloc_page - allocate new memory for TEXT/DATA/BSS/stack parts * lcr3 - update Page Directory Addr Register -- CR3 */ /* (1) create a new mm for current process * (2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT * (3) copy TEXT/DATA/BSS parts in binary to memory space of process * (3.1) read raw data content in file and resolve elfhdr * (3.2) read raw data content in file and resolve proghdr based on info in elfhdr * (3.3) call mm_map to build vma related to TEXT/DATA * (3.4) callpgdir_alloc_page to allocate page for TEXT/DATA, read contents in file * and copy them into the new allocated pages * (3.5) callpgdir_alloc_page to allocate pages for BSS, memset zero in these pages * (4) call mm_map to setup user stack, and put parameters into user stack * (5) setup current process's mm, cr3, reset pgidr (using lcr3 MARCO) * (6) setup uargc and uargv in user stacks * (7) setup trapframe for user environment * (8) if up steps failed, you should cleanup the env. */ int ret = 0; struct mm_struct *mm = mm_create(); if (!mm) { ret = -E_NO_MEM; goto bad_mm; } if ((ret = setup_pgdir(mm)) != 0) { goto bad_pgdir_cleanup_mm; } struct Page *page; struct elfhdr __elf, *elf = &__elf; if ((ret = load_icode_read(fd, elf, sizeof(struct elfhdr), 0)) != 0) { goto bad_elf_cleanup_pgdir; } if (elf->e_magic != ELF_MAGIC) { ret = -E_INVAL_ELF; goto bad_elf_cleanup_pgdir; } struct proghdr __ph, *ph = &__ph; uint32_t vm_flags, perm, phnum; for (phnum = 0; phnum < elf->e_phnum; phnum ++) { off_t phoff = elf->e_phoff + sizeof(struct proghdr) * phnum; if ((ret = load_icode_read(fd, ph, sizeof(struct proghdr), phoff)) != 0) { goto bad_cleanup_mmap; } if (ph->p_type != ELF_PT_LOAD) { continue; } if (ph->p_filesz > ph->p_memsz) { ret = -E_INVAL_ELF; goto bad_cleanup_mmap; } if (ph->p_filesz == 0) { continue; } vm_flags = 0, perm = PTE_U; if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC; if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE; if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ; if (vm_flags & VM_WRITE) perm |= PTE_W; if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) { goto bad_cleanup_mmap; } off_t offset = ph->p_offset; size_t off, size; uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE); ret = -E_NO_MEM; end = ph->p_va + ph->p_filesz; while (start < end) { if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) { ret = -E_NO_MEM; goto bad_cleanup_mmap; } off = start - la, size = PGSIZE - off, la += PGSIZE; if (end < la) { size -= la - end; } if ((ret = load_icode_read(fd, page2kva(page) + off, size, offset)) != 0) { goto bad_cleanup_mmap; } start += size, offset += size; } end = ph->p_va + ph->p_memsz; if (start < la) { if (start == end) { continue ; } off = start + PGSIZE - la, size = PGSIZE - off; if (end < la) { size -= la - end; } memset(page2kva(page) + off, 0, size); start += size; assert((end < la && start == end) || (end >= la && start == la)); } while (start < end) { if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) { ret = -E_NO_MEM; goto bad_cleanup_mmap; } off = start - la, size = PGSIZE - off, la += PGSIZE; if (end < la) { size -= la - end; } memset(page2kva(page) + off, 0, size); start += size; } } sysfile_close(fd); vm_flags = VM_READ | VM_WRITE | VM_STACK; if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) { goto bad_cleanup_mmap; } assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL); assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL); assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL); assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL); mm_count_inc(mm); current->mm = mm; current->cr3 = PADDR(mm->pgdir); lcr3(PADDR(mm->pgdir)); uint32_t argv_size = 0, i; for (i = 0; i < argc; i ++) { argv_size += strnlen(kargv[i], EXEC_MAX_ARG_LEN + 1) + 1; } uintptr_t stacktop = USTACKTOP - (argv_size / sizeof(long) + 1) * sizeof(long); char** uargv=(char **)(stacktop - argc * sizeof(char *)); argv_size = 0; for (i = 0; i < argc; i ++) { uint32_t _len = strnlen(kargv[i], EXEC_MAX_ARG_LEN); char *_buf = (char *)(stacktop + argv_size); memcpy(_buf, kargv[i], _len); _buf[_len] = '\\0'; argv_size += strnlen(kargv[i], EXEC_MAX_ARG_LEN + 1) + 1; } stacktop = (uintptr_t)uargv - sizeof(int); *(int *)stacktop = argc; struct trapframe *tf = current->tf; memset(tf, 0, sizeof(struct trapframe)); tf->tf_cs = USER_CS; tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS; tf->tf_esp = stacktop; tf->tf_eip = elf->e_entry; tf->tf_eflags = FL_IF; ret = 0; out: return ret; bad_cleanup_mmap: exit_mmap(mm); bad_elf_cleanup_pgdir: put_pgdir(mm); bad_pgdir_cleanup_mm: mm_destroy(mm); bad_mm: goto out; } \u4ee3\u7801\u7684\u6267\u884c\u8fc7\u7a0b\u6309\u7167\u63d0\u793a\u6240\u7ed9\u51fa\u7684\u6d41\u7a0b\u6267\u884c\u3002 \u95ee\u98982.1\uff1a\u7ed9\u51fa\u8bbe\u8ba1\u5b9e\u73b0\u57fa\u4e8e\u201dUNIX\u7684\u786c\u94fe\u63a5\u548c\u8f6f\u94fe\u63a5\u673a\u5236\u201c\u7684\u6982\u8981\u8bbe\u65b9\u6848\uff0c\u9f13\u52b1\u7ed9\u51fa\u8be6\u7ec6\u8bbe\u8ba1\u65b9\u6848 \u786c\u94fe\u63a5\uff1a\u5728\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e2d\u52a0\u5165\u4e00\u4e2a\u6807\u8bb0\u4f4d\u548c\u6307\u9488\uff0c\u5f53\u6587\u4ef6\u4e3a\u786c\u94fe\u63a5\u65f6\uff0c\u6807\u8bb0\u4f4d\u4e3a1\uff0c\u6307\u9488\u6307\u5411\u94fe\u63a5\u7684\u6587\u4ef6 \u8f6f\u94fe\u63a5\uff1a\u76f4\u63a5\u62f7\u8d1d\u6587\u4ef6\u5bf9\u5e94\u7684 inode \u4fe1\u606f\u3002 \u5217\u51fa\u4f60\u8ba4\u4e3a\u672c\u5b9e\u9a8c\u4e2d\u91cd\u8981\u7684\u77e5\u8bc6\u70b9\uff0c\u4ee5\u53ca\u4e0e\u5bf9\u5e94\u7684OS\u539f\u7406\u4e2d\u7684\u77e5\u8bc6\u70b9\uff0c\u5e76\u7b80\u8981\u8bf4\u660e\u4f60\u5bf9\u4e8c\u8005\u7684\u542b\u4e49\uff0c\u5173\u7cfb\uff0c\u5dee\u5f02\u7b49\u65b9\u9762\u7684\u7406\u89e3\uff08\u4e5f\u53ef\u80fd\u51fa\u73b0\u5b9e\u9a8c\u4e2d\u7684\u77e5\u8bc6\u70b9\u6ca1\u6709\u5bf9\u5e94\u7684\u539f\u7406\u77e5\u8bc6\u70b9\uff09 SFS\u7684\u63a5\u53e3\u4e0e\u5b9e\u73b0 VFS\u7684\u63a5\u53e3\u4e0e\u5b9e\u73b0 \u6570\u636e\u7ed3\u6784\u7684\u8bbe\u8ba1","title":"Lab8 Report"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab8/lab8/#lab8-report","text":"","title":"Lab8 Report"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab8/lab8/#1","text":"\u5728 kern/fs/sfs/sfs_inode.c \u4e2d\u5b8c\u6210 sys_io_nolock \u51fd\u6570\uff0c\u5b8c\u6210\u8bfb\u53d6\u5199\u5165\u64cd\u4f5c\u3002\u4ee3\u7801\u5982\u4e0b\uff1a static int sfs_io_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, void *buf, off_t offset, size_t *alenp, bool write) { struct sfs_disk_inode *din = sin->din; assert(din->type != SFS_TYPE_DIR); off_t endpos = offset + *alenp, blkoff; *alenp = 0; // calculate the Rd/Wr end position if (offset < 0 || offset >= SFS_MAX_FILE_SIZE || offset > endpos) { return -E_INVAL; } if (offset == endpos) { return 0; } if (endpos > SFS_MAX_FILE_SIZE) { endpos = SFS_MAX_FILE_SIZE; } if (!write) { if (offset >= din->size) { return 0; } if (endpos > din->size) { endpos = din->size; } } int (*sfs_buf_op)(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset); int (*sfs_block_op)(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks); if (write) { sfs_buf_op = sfs_wbuf, sfs_block_op = sfs_wblock; } else { sfs_buf_op = sfs_rbuf, sfs_block_op = sfs_rblock; } int ret = 0; size_t size, alen = 0; uint32_t ino; uint32_t blkno = offset / SFS_BLKSIZE; // The NO. of Rd/Wr begin block uint32_t nblks = endpos / SFS_BLKSIZE - blkno; // The size of Rd/Wr blocks //LAB8:EXERCISE1 YOUR CODE HINT: call sfs_bmap_load_nolock, sfs_rbuf, sfs_rblock,etc. read different kind of blocks in file /* * (1) If offset isn't aligned with the first block, Rd/Wr some content from offset to the end of the first block * NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op * Rd/Wr size = (nblks != 0) ? (SFS_BLKSIZE - blkoff) : (endpos - offset) * (2) Rd/Wr aligned blocks * NOTICE: useful function: sfs_bmap_load_nolock, sfs_block_op * (3) If end position isn't aligned with the last block, Rd/Wr some content from begin to the (endpos % SFS_BLKSIZE) of the last block * NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op */ blkoff = offset % SFS_BLKSIZE; if (blkoff != 0) { size = (nblks != 0) ? (SFS_BLKSIZE - blkoff) : (endpos - offset); if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) { goto out; } if ((ret = sfs_buf_op(sfs, buf, size, ino, blkoff)) != 0) { goto out; } alen += size; if (nblks == 0) { goto out; } buf += size; blkno++; nblks--; } size = SFS_BLKSIZE; while (nblks > 0) { if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) { goto out; } if ((ret = sfs_block_op(sfs, buf, ino, 1)) != 0) { goto out; } alen += size; buf += size; blkno++; nblks--; } blkoff = 0; size = endpos % SFS_BLKSIZE; if (size > 0) { if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) { goto out; } if ((ret = sfs_buf_op(sfs, buf, size, ino, blkoff)) != 0) { goto out; } alen += size; } out: *alenp = alen; if (offset + alen > sin->din->size) { sin->din->size = offset + alen; sin->dirty = 1; } return ret; } \u4ee3\u7801\u7684\u6267\u884c\u6b65\u9aa4\u4e3a\uff1a \u5904\u7406\u8d77\u59cb\u5730\u5740\u6240\u5728\u7684\u5757\u3002\u5224\u65ad\u8d77\u59cb\u5730\u5740\u7684 offset \u662f\u5426\u5bf9\u9f50\uff0c\u5982\u679c\u4e0d\u5bf9\u9f50\uff0c\u8ba1\u7b97\u5757\u5185\u504f\u79fb blkoff \u548c\u5927\u5c0f size \u3002\u8c03\u7528 sfs_bmap_load_nolock \u83b7\u53d6 ino \uff0c\u518d\u8c03\u7528 sfs_buf_op \u5b8c\u6210\u5b9e\u9645\u7684\u8bfb\u5199\u64cd\u4f5c\u3002\u5b8c\u6210\u540e\uff0c\u9700\u8981\u589e\u52a0\u5b8c\u6210\u7684\u5927\u5c0f alen \uff0c\u7f13\u51b2\u533a\u6307\u9488 buf \u524d\u79fb\uff0c\u5e76\u5bf9 blkno \u548c nblks \u66f4\u65b0\u3002 \u5904\u7406\u4e2d\u95f4\u5b8c\u6574\u7684\u5757\u3002\u5bf9\u4e8e\u6bcf\u4e00\u5757\uff0c\u8c03\u7528 sfs_bmap_load_nolock \u83b7\u53d6 ino \uff0c\u518d\u8c03\u7528 sfs_buf_op \u5b8c\u6210\u5b9e\u9645\u7684\u8bfb\u5199\u64cd\u4f5c\u3002\u5bf9\u5176\u4ed6\u53d8\u91cf\u7684\u66f4\u65b0\u4e0e\u6b65\u9aa4\u4e00\u7c7b\u4f3c\u3002 \u5904\u7406\u6700\u540e\u7684\u6ca1\u6709\u5bf9\u9f50\u7684\u5757\u3002\u8fd9\u65f6\uff0c blkoff \u4e3a0\uff0c\u8ba1\u7b97 size \u3002\u8c03\u7528 sfs_bmap_load_nolock \u83b7\u53d6 ino \uff0c\u518d\u8c03\u7528 sfs_buf_op \u5b8c\u6210\u5b9e\u9645\u7684\u8bfb\u5199\u64cd\u4f5c\u3002","title":"\u7ec3\u4e601\uff1a\u5b8c\u6210\u8bfb\u6587\u4ef6\u64cd\u4f5c\u7684\u5b9e\u73b0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab8/lab8/#11unixpipe","text":"\u8bbe\u7f6e\u4e00\u4e2a\u94fe\u8868\u7ef4\u62a4\u7f13\u51b2\u533a\u7684\u6570\u636e\u3002\u5f53\u94fe\u8868\u4e3a\u7a7a\u65f6\uff0c\u8868\u793a\u7f13\u51b2\u533a\u5185\u6ca1\u6709\u6570\u636e\u3002\u7f13\u51b2\u533a\u6ca1\u6709\u6ee1\u65f6\uff0c\u8fdb\u7a0b\u53ef\u4ee5\u5199\u6570\u636e\uff0c\u5199\u7684\u6570\u636e\u63d2\u5165\u94fe\u8868\u5c3e\u90e8\uff0c\u5426\u5219\u5c06\u8fdb\u7a0b\u963b\u585e\u3002\u5f53\u7f13\u51b2\u533a\u4e0d\u662f\u7a7a\u65f6\uff0c\u8fdb\u7a0b\u53ef\u4ee5\u8bfb\u6570\u636e\uff0c\u8bfb\u51fa\u7684\u6570\u636e\u4ece\u94fe\u8868\u5934\u90e8\u5220\u9664\uff0c\u5426\u5219\u4e5f\u5c06\u8fdb\u7a0b\u963b\u585e\u3002 \u4e0e\u201c\u8bfb\u8005-\u5199\u8005\u201d\u95ee\u9898\u7c7b\u4f3c\uff0c\u9700\u8981\u8003\u8651\u5230\u4e92\u65a5\u8bbf\u95ee\u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u53ef\u4ee5\u4f7f\u7528\u4fe1\u53f7\u91cf\u6216\u8005\u7ba1\u7a0b\u6765\u5b9e\u73b0\u4e92\u65a5\u64cd\u4f5c\u3002","title":"\u95ee\u98981.1\uff1a\u7ed9\u51fa\u8bbe\u8ba1\u5b9e\u73b0\u201cUNIX\u7684PIPE\u673a\u5236\u201d\u7684\u6982\u8981\u8bbe\u65b9\u6848\uff0c\u9f13\u52b1\u7ed9\u51fa\u8be6\u7ec6\u8bbe\u8ba1\u65b9\u6848"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab8/lab8/#2","text":"\u5728 kern/process/proc.c \u4e2d\u5b8c\u6210 load_icode \u51fd\u6570\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a static int load_icode(int fd, int argc, char **kargv) { /* LAB8:EXERCISE2 YOUR CODE HINT:how to load the file with handler fd in to process's memory? how to setup argc/argv? * MACROs or Functions: * mm_create - create a mm * setup_pgdir - setup pgdir in mm * load_icode_read - read raw data content of program file * mm_map - build new vma * pgdir_alloc_page - allocate new memory for TEXT/DATA/BSS/stack parts * lcr3 - update Page Directory Addr Register -- CR3 */ /* (1) create a new mm for current process * (2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT * (3) copy TEXT/DATA/BSS parts in binary to memory space of process * (3.1) read raw data content in file and resolve elfhdr * (3.2) read raw data content in file and resolve proghdr based on info in elfhdr * (3.3) call mm_map to build vma related to TEXT/DATA * (3.4) callpgdir_alloc_page to allocate page for TEXT/DATA, read contents in file * and copy them into the new allocated pages * (3.5) callpgdir_alloc_page to allocate pages for BSS, memset zero in these pages * (4) call mm_map to setup user stack, and put parameters into user stack * (5) setup current process's mm, cr3, reset pgidr (using lcr3 MARCO) * (6) setup uargc and uargv in user stacks * (7) setup trapframe for user environment * (8) if up steps failed, you should cleanup the env. */ int ret = 0; struct mm_struct *mm = mm_create(); if (!mm) { ret = -E_NO_MEM; goto bad_mm; } if ((ret = setup_pgdir(mm)) != 0) { goto bad_pgdir_cleanup_mm; } struct Page *page; struct elfhdr __elf, *elf = &__elf; if ((ret = load_icode_read(fd, elf, sizeof(struct elfhdr), 0)) != 0) { goto bad_elf_cleanup_pgdir; } if (elf->e_magic != ELF_MAGIC) { ret = -E_INVAL_ELF; goto bad_elf_cleanup_pgdir; } struct proghdr __ph, *ph = &__ph; uint32_t vm_flags, perm, phnum; for (phnum = 0; phnum < elf->e_phnum; phnum ++) { off_t phoff = elf->e_phoff + sizeof(struct proghdr) * phnum; if ((ret = load_icode_read(fd, ph, sizeof(struct proghdr), phoff)) != 0) { goto bad_cleanup_mmap; } if (ph->p_type != ELF_PT_LOAD) { continue; } if (ph->p_filesz > ph->p_memsz) { ret = -E_INVAL_ELF; goto bad_cleanup_mmap; } if (ph->p_filesz == 0) { continue; } vm_flags = 0, perm = PTE_U; if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC; if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE; if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ; if (vm_flags & VM_WRITE) perm |= PTE_W; if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) { goto bad_cleanup_mmap; } off_t offset = ph->p_offset; size_t off, size; uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE); ret = -E_NO_MEM; end = ph->p_va + ph->p_filesz; while (start < end) { if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) { ret = -E_NO_MEM; goto bad_cleanup_mmap; } off = start - la, size = PGSIZE - off, la += PGSIZE; if (end < la) { size -= la - end; } if ((ret = load_icode_read(fd, page2kva(page) + off, size, offset)) != 0) { goto bad_cleanup_mmap; } start += size, offset += size; } end = ph->p_va + ph->p_memsz; if (start < la) { if (start == end) { continue ; } off = start + PGSIZE - la, size = PGSIZE - off; if (end < la) { size -= la - end; } memset(page2kva(page) + off, 0, size); start += size; assert((end < la && start == end) || (end >= la && start == la)); } while (start < end) { if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) { ret = -E_NO_MEM; goto bad_cleanup_mmap; } off = start - la, size = PGSIZE - off, la += PGSIZE; if (end < la) { size -= la - end; } memset(page2kva(page) + off, 0, size); start += size; } } sysfile_close(fd); vm_flags = VM_READ | VM_WRITE | VM_STACK; if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) { goto bad_cleanup_mmap; } assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL); assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL); assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL); assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL); mm_count_inc(mm); current->mm = mm; current->cr3 = PADDR(mm->pgdir); lcr3(PADDR(mm->pgdir)); uint32_t argv_size = 0, i; for (i = 0; i < argc; i ++) { argv_size += strnlen(kargv[i], EXEC_MAX_ARG_LEN + 1) + 1; } uintptr_t stacktop = USTACKTOP - (argv_size / sizeof(long) + 1) * sizeof(long); char** uargv=(char **)(stacktop - argc * sizeof(char *)); argv_size = 0; for (i = 0; i < argc; i ++) { uint32_t _len = strnlen(kargv[i], EXEC_MAX_ARG_LEN); char *_buf = (char *)(stacktop + argv_size); memcpy(_buf, kargv[i], _len); _buf[_len] = '\\0'; argv_size += strnlen(kargv[i], EXEC_MAX_ARG_LEN + 1) + 1; } stacktop = (uintptr_t)uargv - sizeof(int); *(int *)stacktop = argc; struct trapframe *tf = current->tf; memset(tf, 0, sizeof(struct trapframe)); tf->tf_cs = USER_CS; tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS; tf->tf_esp = stacktop; tf->tf_eip = elf->e_entry; tf->tf_eflags = FL_IF; ret = 0; out: return ret; bad_cleanup_mmap: exit_mmap(mm); bad_elf_cleanup_pgdir: put_pgdir(mm); bad_pgdir_cleanup_mm: mm_destroy(mm); bad_mm: goto out; } \u4ee3\u7801\u7684\u6267\u884c\u8fc7\u7a0b\u6309\u7167\u63d0\u793a\u6240\u7ed9\u51fa\u7684\u6d41\u7a0b\u6267\u884c\u3002","title":"\u7ec3\u4e602\uff1a\u5b8c\u6210\u57fa\u4e8e\u6587\u4ef6\u7cfb\u7edf\u7684\u6267\u884c\u7a0b\u5e8f\u673a\u5236\u7684\u5b9e\u73b0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab8/lab8/#21unix","text":"\u786c\u94fe\u63a5\uff1a\u5728\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e2d\u52a0\u5165\u4e00\u4e2a\u6807\u8bb0\u4f4d\u548c\u6307\u9488\uff0c\u5f53\u6587\u4ef6\u4e3a\u786c\u94fe\u63a5\u65f6\uff0c\u6807\u8bb0\u4f4d\u4e3a1\uff0c\u6307\u9488\u6307\u5411\u94fe\u63a5\u7684\u6587\u4ef6 \u8f6f\u94fe\u63a5\uff1a\u76f4\u63a5\u62f7\u8d1d\u6587\u4ef6\u5bf9\u5e94\u7684 inode \u4fe1\u606f\u3002","title":"\u95ee\u98982.1\uff1a\u7ed9\u51fa\u8bbe\u8ba1\u5b9e\u73b0\u57fa\u4e8e\u201dUNIX\u7684\u786c\u94fe\u63a5\u548c\u8f6f\u94fe\u63a5\u673a\u5236\u201c\u7684\u6982\u8981\u8bbe\u65b9\u6848\uff0c\u9f13\u52b1\u7ed9\u51fa\u8be6\u7ec6\u8bbe\u8ba1\u65b9\u6848"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab8/lab8/#os","text":"SFS\u7684\u63a5\u53e3\u4e0e\u5b9e\u73b0 VFS\u7684\u63a5\u53e3\u4e0e\u5b9e\u73b0 \u6570\u636e\u7ed3\u6784\u7684\u8bbe\u8ba1","title":"\u5217\u51fa\u4f60\u8ba4\u4e3a\u672c\u5b9e\u9a8c\u4e2d\u91cd\u8981\u7684\u77e5\u8bc6\u70b9\uff0c\u4ee5\u53ca\u4e0e\u5bf9\u5e94\u7684OS\u539f\u7406\u4e2d\u7684\u77e5\u8bc6\u70b9\uff0c\u5e76\u7b80\u8981\u8bf4\u660e\u4f60\u5bf9\u4e8c\u8005\u7684\u542b\u4e49\uff0c\u5173\u7cfb\uff0c\u5dee\u5f02\u7b49\u65b9\u9762\u7684\u7406\u89e3\uff08\u4e5f\u53ef\u80fd\u51fa\u73b0\u5b9e\u9a8c\u4e2d\u7684\u77e5\u8bc6\u70b9\u6ca1\u6709\u5bf9\u5e94\u7684\u539f\u7406\u77e5\u8bc6\u70b9\uff09"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab8/my_note/","text":"\u7b14\u8bb0","title":"\u7b14\u8bb0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/ucore%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/lab8/my_note/#_1","text":"","title":"\u7b14\u8bb0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/dsa/","text":"\u539f\u7406 \u4e3b\u5b9a\u7406 n=b^k n=b^k , k k and b b is integer, c, k > 0 c, k > 0 , b > 1 b > 1 , a \\ge 1 a \\ge 1 , d \\ge 0 d \\ge 0 . f(n) = af(n/b)+cn^d f(n) = af(n/b)+cn^d Compare a a and b^d b^d . less: O(n^d) O(n^d) . equal: O(n^d \\log n) O(n^d \\log n) . greater: O(n^{\\log_b a}) O(n^{\\log_b a}) Akra-Bazzi\u65b9\u6cd5 T(n) = \\sum_{i = 1}^k a_iT(b_i n) + f(n) T(n) = \\sum_{i = 1}^k a_iT(b_i n) + f(n) p p \u6ee1\u8db3 \\sum_{i=1}^k a_ib_i^p = 1 \\sum_{i=1}^k a_ib_i^p = 1 \uff0c\u5219\uff1a T(n) = \\Theta\\left(n^p\\left(1 + \\int_1^n \\frac{f(u)}{u^{p+1}}\\mathrm{d}u\\right)\\right) T(n) = \\Theta\\left(n^p\\left(1 + \\int_1^n \\frac{f(u)}{u^{p+1}}\\mathrm{d}u\\right)\\right) \u6570\u5b66\u7ed3\u8bba x(g, h) x(g, h) \u4e3a g g \u548c h h \u7ebf\u6027\u7ec4\u5408\u51fa\u7684\u6700\u5927\u81ea\u7136\u6570\uff0c x(g,h) = (g - 1)(h - 1) x(g,h) = (g - 1)(h - 1) \\ln n = \\ln 2 \\log_2n \\ln n = \\ln 2 \\log_2n \uff0c \\phi^{\\lg n}=n^{\\lg\\phi} \\phi^{\\lg n}=n^{\\lg\\phi} \\omega(2^n)=n!=o(n^n) \\omega(2^n)=n!=o(n^n) \uff1b \\lg n! = \\Theta(n\\lg n) \\lg n! = \\Theta(n\\lg n) Fibonacci\u6570\uff1a F_i = \\frac{\\phi^i - \\hat{\\phi}^i}{\\sqrt{5}}=\\left\\lfloor\\frac{\\phi^i}{\\sqrt{5}}+\\frac{1}{2}\\right\\rfloor F_i = \\frac{\\phi^i - \\hat{\\phi}^i}{\\sqrt{5}}=\\left\\lfloor\\frac{\\phi^i}{\\sqrt{5}}+\\frac{1}{2}\\right\\rfloor \uff1b \\phi,\\hat{\\phi} \\phi,\\hat{\\phi} \u4e3a x^2=x+1 x^2=x+1 \u200b\u7684\u5171\u8f6d\u53cc\u6839\u3002 Catalan\u6570\uff1a Catalan_n=\\sum\\limits_{i=1}^{n-1}Catalan_{i}\\cdot Catalan_{n-i}=\\frac{1}{n-1}C_{2n}^{n} Catalan_n=\\sum\\limits_{i=1}^{n-1}Catalan_{i}\\cdot Catalan_{n-i}=\\frac{1}{n-1}C_{2n}^{n} \u200b\u3002\u200b \\sum\\limits_{i = 1}^n \\frac{1}{i} = \\ln n + \\gamma + \\Theta\\left(\\frac{1}{2n}\\right) \\sum\\limits_{i = 1}^n \\frac{1}{i} = \\ln n + \\gamma + \\Theta\\left(\\frac{1}{2n}\\right) \u3002 \u6982\u5ff5 \u6808 \u9006\u5e8f\u8f93\u51fa \u9012\u5f52\u5d4c\u5957 n n \u4e2a\u6570\u8fdb\u884c\u6808\u6df7\u6d17\uff0c\u5171\u6709 Catalan_n Catalan_n \u79cd\u53ef\u80fd\u3002 \u5408\u6cd5\u5d4c\u5957\u548c\u76f8\u5e94\u957f\u5ea6\u7684\u6808\u6df7\u6d17\u4e00\u4e00\u5bf9\u5e94\u3002 \u5ef6\u8fdf\u7f13\u51b2 \u8868\u8fbe\u5f0f\u6c42\u503c\uff0c\u9006\u6ce2\u5170\u5f0f\u3002 \u8bd5\u63a2\u56de\u6eaf\u6cd5 \u6811 \u5355\u8282\u70b9\u7684\u6811\u9ad8\u4e3a 0 0 \u3002 \u9ad8\u4e3a h h \u200b \u7684\u6ee1\u4e8c\u53c9\u6811\u8282\u70b9\u6570\u91cf\u4e3a 2^{h+1} -1 2^{h+1} -1 \u200b \u3002 \u4e8c\u53c9\u6811\u5ea6\u4e3a 2 2 \u7684\u8282\u70b9\u6570\u91cf\u6bd4\u53f6\u8282\u70b9\u6570\u91cf\u5c11 1 1 \uff0c\u5b8c\u5168\u4e8c\u53c9\u6811\u53f6\u8282\u70b9\u6570\u91cf\u6bd4\u5185\u90e8\u8282\u70b9\u6570\u91cf\u591a 1 1 \u6216\u76f8\u7b49\u3002 \u56fe \u6b27\u62c9\u73af\u8def\uff1a\u5404\u9876\u70b9\u4e00\u6b21\uff1b\u54c8\u5bc6\u987f\u73af\u8def\uff1a\u5404\u8fb9\u4e00\u6b21\u3002 BFS\u6811\u6bcf\u6761\u8fb9\u6df1\u5ea6\u5173\u7cfb \u6709\u5411\u56fe\u8fb9 (v, u) (v, u) \uff1a depth(v) \\le depth(u) + 1 depth(v) \\le depth(u) + 1 \uff0c\u53d6\u7b49\u65f6\u4e3a\u6811\u8fb9\u3002 \u65e0\u5411\u56fe\u5dee\u503c\u4e3a 1 1 \u3002 DFS\u6811\uff0c\u540e\u5411\u8fb9\uff0c\u524d\u5411\u8fb9\uff0c\u8de8\u8fb9\uff0c v v \u4e3a u u \u7684\u7956\u5148\u5373 dtime[v] < dtime[u] < ftime[u] < ftime[v] \u3002 \u5173\u8282\u70b9 \u6839\u8282\u70b9\uff1a\u6709\u65e0\u5206\u652f \u5185\u90e8\u8282\u70b9\uff1a\u6709\u65e0\u9ad8\u4e8e\u7236\u8282\u70b9\u7684\u540e\u5411\u8fb9 \u53f6\u8282\u70b9\uff1a\u65e0 BST \u5220\u9664\uff0c\u5355\u5206\u652f\uff0c\u65e0\u5206\u652f\u76f4\u63a5\u5220\uff1b\u53cc\u5206\u652f\uff0c\u5bfb\u627e\u540e\u7ee7\u4ea4\u6362\u540e\u5220 \u9ad8\u4e3a h h \u200b\u7684AVL\u7684\u81f3\u5c11\u5305\u542b F_{h+3}-1 F_{h+3}-1 \u200b\u200b\u4e2a\u8282\u70b9 \u4f38\u5c55\u6811 \u6bcf\u4e2a\u8282\u70b9 v v \u4f7f\u7528\u52bf\u80fd\u51fd\u6570 lg |v| lg |v| \u200b\uff0c |v| |v| \u4e3a\u8282\u70b9\u540e\u4ee3\u6570\u76ee\u3002 \u6bcf\u6b65\u8c03\u6574\u6240\u9700\u65f6\u95f4 A=T_i + \\Delta\\phi_i\\le 3[\\phi'(v)-\\phi(v)] A=T_i + \\Delta\\phi_i\\le 3[\\phi'(v)-\\phi(v)] \u3002 \u603b\u4f53\u5206\u644a\u65f6\u95f4 A\\le 1+3[\\phi(r)-\\phi(v)] A\\le 1+3[\\phi(r)-\\phi(v)] \u3002 B-\u6811 \u9ad8\u4e3a h h \u200b \u7684 B-\u6811\u5305\u62ec\u5916\u90e8\u8282\u70b9\u3002 m m \u200b\u200b \u9636B-\u6811\u9664\u6839\u8282\u70b9\u5bf9\u5e94\u5206\u652f\u6570\u4e3a \\left[\\lceil m/2\\rceil,m\\right] \\left[\\lceil m/2\\rceil,m\\right] \u200b\u200b \uff0c\u5916\u90e8\u8282\u70b9\u6570\u5bf9\u5e94\u5931\u8d25\u67e5\u627e\u7684\u6570\u91cf\uff0c\u6bd4\u5185\u90e8\u5173\u952e\u7801\u6570\u91cf\u591a 1 1 \u200b \u3002 m m \u9636B-\u6811\u6ee1\u8db3 \\log_m(N+1) \\le h \\le \\log_{\\lceil m/2\\rceil}((N+1)/2)+1 \\log_m(N+1) \\le h \\le \\log_{\\lceil m/2\\rceil}((N+1)/2)+1 \u200b\u200b\u3002 \u7ea2\u9ed1\u6811 \u5bf9\u5e94\u7684 (2,4) (2,4) -\u6811 T_B T_B \u9ad8\u4e3a H H \u3002 \\lg (n+1) \\le h \\le 2H \\le 2\\lg(n+1) \\lg (n+1) \\le h \\le 2H \\le 2\\lg(n+1) \u200b\u200b\u200b \u3002 \u8df3\u8f6c\u8868 \u8868\u7684\u9ad8\u5ea6 Pr(h < k)=1-n/2^k,E(h)=O(\\lg n) Pr(h < k)=1-n/2^k,E(h)=O(\\lg n) \u200b\u200b\u200b \u3002 \u6bcf\u5c42\u6a2a\u5411\u8df3\u8f6c k k \u200b\u200b \u4e2a\u5854\u9876\uff0c 1 1 \u200b\u200b \u4e2a\u975e\u5854\u9876\uff0c\u8df3\u8f6c\u6b21\u6570 Pr(Y=k)=(1-p)^k p Pr(Y=k)=(1-p)^k p \u200b\u200b\u200b\u200b \u3002 \u6563\u5217\u8868 \u957f\u5ea6\u4e3a M M \u200b \uff0c\u88c5\u586b\u56e0\u5b50\u4e3a \\lambda \\lambda \u200b \u3002 \u6a21\u4f59\u6cd5\u95f4\u9694\u4e3a T T \u7684 M M \u4e2a\u5173\u952e\u7801\u63d2\u5165\u5230\u6563\u5217\u8868\uff0c g=gcd(M,T) g=gcd(M,T) \uff0c\u6bcf\u4e2a\u5173\u952e\u7801\u7ea6\u4e0e g g \u4e2a\u5173\u952e\u7801\u51b2\u7a81\u3002 M M \u200b \u4e3a\u7d20\u6570\u4e14 \\lambda \\le 50\\% \\lambda \\le 50\\% \u200b\uff0c\u5e73\u65b9\u8bd5\u63a2\u5c06\u7ec8\u6b62\u4e8e\u67d0\u4e2a\u7a7a\u6876\u3002\u200b \u5de6\u5f0f\u5806 npl(x)=npl(rc(x))+1 npl(x)=npl(rc(x))+1 \u200b\u3002 KMP N(P,j)=\\left\\{ 0\\le t<j|P[0,t)=P[j-t,j)\\right\\} N(P,j)=\\left\\{ 0\\le t<j|P[0,t)=P[j-t,j)\\right\\} \u4e14 P[t]\\neq P[j]) P[t]\\neq P[j]) \u200b\uff0c next[j]=max(N(P,j)) next[j]=max(N(P,j)) \u200b\u3002 \u4ee4 t=next[j] t=next[j] \uff0c\u5219 $$ next[j+1]=\\begin{cases} P[j+1]=P[t+1]?next[t+1]:t+1 &,P[j]=P[t]\\ next[t]+1,next[next[t]]+1,\\cdots &,others \\end{cases} $$ BM m m \u4e3a P P \u7684\u957f\u5ea6\uff0c ss[j]=max\\left\\{ 0\\le s<j|P(j-s,j]=P[m-s,m)\\right\\} ss[j]=max\\left\\{ 0\\le s<j|P(j-s,j]=P[m-s,m)\\right\\} \u200b\u200b\u200b \u3002 \u4ee4 (lo,hi] (lo,hi] \u4e3a\u6781\u957f\u5339\u914d\u540e\u7f00\uff0c\u5219 $$ ss[j]=\\begin{cases} ss[m-1-hi+j]&,j-lo\\le ss[m-1-hi+j]\\ updated(hi)-updated(lo)&, others \\end{cases} $$ $$ \\begin{cases} \\forall i<m-j-1, gs[i]=m-j-1&,ss[i]=j+1\\ gs[m-ss[j]-1]=m-j-1 &,others \\end{cases} $$ \u6392\u5e8f \u5411\u91cf S S \u5df2\u7ecf (g,h) (g,h) \u6709\u5e8f\uff0c\u4e14 g,h g,h \u5c5e\u4e8e O(d) O(d) \u6570\u91cf\u7ea7\uff0c\u5219\u4f7f\u7528\u63d2\u5165\u7b97\u6cd5\u8fdb\u884c d d -\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u7684\u4e3a O(dn) O(dn) \u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \u5e73\u5747\u8fd0\u884c\u65f6\u95f4 \u57fa\u6570\u6392\u5e8f\uff1a O(t(m+n)) O(t(m+n)) \u200b \u5feb\u901f\u6392\u5e8f\uff1a T(n) = n + 1 + \\frac{1}{n}\\sum\\limits_{i = 1}^{n}T(i - 1) + T(n - i) T(n) = n + 1 + \\frac{1}{n}\\sum\\limits_{i = 1}^{n}T(i - 1) + T(n - i) k-\u9009\u53d6\u7b97\u6cd5\uff1a T(n) = cn + T(n/Q) + T(3n/4) T(n) = cn + T(n/Q) + T(3n/4) \u200b","title":"\u539f\u7406"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/dsa/#_1","text":"\u4e3b\u5b9a\u7406 n=b^k n=b^k , k k and b b is integer, c, k > 0 c, k > 0 , b > 1 b > 1 , a \\ge 1 a \\ge 1 , d \\ge 0 d \\ge 0 . f(n) = af(n/b)+cn^d f(n) = af(n/b)+cn^d Compare a a and b^d b^d . less: O(n^d) O(n^d) . equal: O(n^d \\log n) O(n^d \\log n) . greater: O(n^{\\log_b a}) O(n^{\\log_b a}) Akra-Bazzi\u65b9\u6cd5 T(n) = \\sum_{i = 1}^k a_iT(b_i n) + f(n) T(n) = \\sum_{i = 1}^k a_iT(b_i n) + f(n) p p \u6ee1\u8db3 \\sum_{i=1}^k a_ib_i^p = 1 \\sum_{i=1}^k a_ib_i^p = 1 \uff0c\u5219\uff1a T(n) = \\Theta\\left(n^p\\left(1 + \\int_1^n \\frac{f(u)}{u^{p+1}}\\mathrm{d}u\\right)\\right) T(n) = \\Theta\\left(n^p\\left(1 + \\int_1^n \\frac{f(u)}{u^{p+1}}\\mathrm{d}u\\right)\\right) \u6570\u5b66\u7ed3\u8bba x(g, h) x(g, h) \u4e3a g g \u548c h h \u7ebf\u6027\u7ec4\u5408\u51fa\u7684\u6700\u5927\u81ea\u7136\u6570\uff0c x(g,h) = (g - 1)(h - 1) x(g,h) = (g - 1)(h - 1) \\ln n = \\ln 2 \\log_2n \\ln n = \\ln 2 \\log_2n \uff0c \\phi^{\\lg n}=n^{\\lg\\phi} \\phi^{\\lg n}=n^{\\lg\\phi} \\omega(2^n)=n!=o(n^n) \\omega(2^n)=n!=o(n^n) \uff1b \\lg n! = \\Theta(n\\lg n) \\lg n! = \\Theta(n\\lg n) Fibonacci\u6570\uff1a F_i = \\frac{\\phi^i - \\hat{\\phi}^i}{\\sqrt{5}}=\\left\\lfloor\\frac{\\phi^i}{\\sqrt{5}}+\\frac{1}{2}\\right\\rfloor F_i = \\frac{\\phi^i - \\hat{\\phi}^i}{\\sqrt{5}}=\\left\\lfloor\\frac{\\phi^i}{\\sqrt{5}}+\\frac{1}{2}\\right\\rfloor \uff1b \\phi,\\hat{\\phi} \\phi,\\hat{\\phi} \u4e3a x^2=x+1 x^2=x+1 \u200b\u7684\u5171\u8f6d\u53cc\u6839\u3002 Catalan\u6570\uff1a Catalan_n=\\sum\\limits_{i=1}^{n-1}Catalan_{i}\\cdot Catalan_{n-i}=\\frac{1}{n-1}C_{2n}^{n} Catalan_n=\\sum\\limits_{i=1}^{n-1}Catalan_{i}\\cdot Catalan_{n-i}=\\frac{1}{n-1}C_{2n}^{n} \u200b\u3002\u200b \\sum\\limits_{i = 1}^n \\frac{1}{i} = \\ln n + \\gamma + \\Theta\\left(\\frac{1}{2n}\\right) \\sum\\limits_{i = 1}^n \\frac{1}{i} = \\ln n + \\gamma + \\Theta\\left(\\frac{1}{2n}\\right) \u3002","title":"\u539f\u7406"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/dsa/#_2","text":"\u6808 \u9006\u5e8f\u8f93\u51fa \u9012\u5f52\u5d4c\u5957 n n \u4e2a\u6570\u8fdb\u884c\u6808\u6df7\u6d17\uff0c\u5171\u6709 Catalan_n Catalan_n \u79cd\u53ef\u80fd\u3002 \u5408\u6cd5\u5d4c\u5957\u548c\u76f8\u5e94\u957f\u5ea6\u7684\u6808\u6df7\u6d17\u4e00\u4e00\u5bf9\u5e94\u3002 \u5ef6\u8fdf\u7f13\u51b2 \u8868\u8fbe\u5f0f\u6c42\u503c\uff0c\u9006\u6ce2\u5170\u5f0f\u3002 \u8bd5\u63a2\u56de\u6eaf\u6cd5 \u6811 \u5355\u8282\u70b9\u7684\u6811\u9ad8\u4e3a 0 0 \u3002 \u9ad8\u4e3a h h \u200b \u7684\u6ee1\u4e8c\u53c9\u6811\u8282\u70b9\u6570\u91cf\u4e3a 2^{h+1} -1 2^{h+1} -1 \u200b \u3002 \u4e8c\u53c9\u6811\u5ea6\u4e3a 2 2 \u7684\u8282\u70b9\u6570\u91cf\u6bd4\u53f6\u8282\u70b9\u6570\u91cf\u5c11 1 1 \uff0c\u5b8c\u5168\u4e8c\u53c9\u6811\u53f6\u8282\u70b9\u6570\u91cf\u6bd4\u5185\u90e8\u8282\u70b9\u6570\u91cf\u591a 1 1 \u6216\u76f8\u7b49\u3002 \u56fe \u6b27\u62c9\u73af\u8def\uff1a\u5404\u9876\u70b9\u4e00\u6b21\uff1b\u54c8\u5bc6\u987f\u73af\u8def\uff1a\u5404\u8fb9\u4e00\u6b21\u3002 BFS\u6811\u6bcf\u6761\u8fb9\u6df1\u5ea6\u5173\u7cfb \u6709\u5411\u56fe\u8fb9 (v, u) (v, u) \uff1a depth(v) \\le depth(u) + 1 depth(v) \\le depth(u) + 1 \uff0c\u53d6\u7b49\u65f6\u4e3a\u6811\u8fb9\u3002 \u65e0\u5411\u56fe\u5dee\u503c\u4e3a 1 1 \u3002 DFS\u6811\uff0c\u540e\u5411\u8fb9\uff0c\u524d\u5411\u8fb9\uff0c\u8de8\u8fb9\uff0c v v \u4e3a u u \u7684\u7956\u5148\u5373 dtime[v] < dtime[u] < ftime[u] < ftime[v] \u3002 \u5173\u8282\u70b9 \u6839\u8282\u70b9\uff1a\u6709\u65e0\u5206\u652f \u5185\u90e8\u8282\u70b9\uff1a\u6709\u65e0\u9ad8\u4e8e\u7236\u8282\u70b9\u7684\u540e\u5411\u8fb9 \u53f6\u8282\u70b9\uff1a\u65e0 BST \u5220\u9664\uff0c\u5355\u5206\u652f\uff0c\u65e0\u5206\u652f\u76f4\u63a5\u5220\uff1b\u53cc\u5206\u652f\uff0c\u5bfb\u627e\u540e\u7ee7\u4ea4\u6362\u540e\u5220 \u9ad8\u4e3a h h \u200b\u7684AVL\u7684\u81f3\u5c11\u5305\u542b F_{h+3}-1 F_{h+3}-1 \u200b\u200b\u4e2a\u8282\u70b9 \u4f38\u5c55\u6811 \u6bcf\u4e2a\u8282\u70b9 v v \u4f7f\u7528\u52bf\u80fd\u51fd\u6570 lg |v| lg |v| \u200b\uff0c |v| |v| \u4e3a\u8282\u70b9\u540e\u4ee3\u6570\u76ee\u3002 \u6bcf\u6b65\u8c03\u6574\u6240\u9700\u65f6\u95f4 A=T_i + \\Delta\\phi_i\\le 3[\\phi'(v)-\\phi(v)] A=T_i + \\Delta\\phi_i\\le 3[\\phi'(v)-\\phi(v)] \u3002 \u603b\u4f53\u5206\u644a\u65f6\u95f4 A\\le 1+3[\\phi(r)-\\phi(v)] A\\le 1+3[\\phi(r)-\\phi(v)] \u3002 B-\u6811 \u9ad8\u4e3a h h \u200b \u7684 B-\u6811\u5305\u62ec\u5916\u90e8\u8282\u70b9\u3002 m m \u200b\u200b \u9636B-\u6811\u9664\u6839\u8282\u70b9\u5bf9\u5e94\u5206\u652f\u6570\u4e3a \\left[\\lceil m/2\\rceil,m\\right] \\left[\\lceil m/2\\rceil,m\\right] \u200b\u200b \uff0c\u5916\u90e8\u8282\u70b9\u6570\u5bf9\u5e94\u5931\u8d25\u67e5\u627e\u7684\u6570\u91cf\uff0c\u6bd4\u5185\u90e8\u5173\u952e\u7801\u6570\u91cf\u591a 1 1 \u200b \u3002 m m \u9636B-\u6811\u6ee1\u8db3 \\log_m(N+1) \\le h \\le \\log_{\\lceil m/2\\rceil}((N+1)/2)+1 \\log_m(N+1) \\le h \\le \\log_{\\lceil m/2\\rceil}((N+1)/2)+1 \u200b\u200b\u3002 \u7ea2\u9ed1\u6811 \u5bf9\u5e94\u7684 (2,4) (2,4) -\u6811 T_B T_B \u9ad8\u4e3a H H \u3002 \\lg (n+1) \\le h \\le 2H \\le 2\\lg(n+1) \\lg (n+1) \\le h \\le 2H \\le 2\\lg(n+1) \u200b\u200b\u200b \u3002 \u8df3\u8f6c\u8868 \u8868\u7684\u9ad8\u5ea6 Pr(h < k)=1-n/2^k,E(h)=O(\\lg n) Pr(h < k)=1-n/2^k,E(h)=O(\\lg n) \u200b\u200b\u200b \u3002 \u6bcf\u5c42\u6a2a\u5411\u8df3\u8f6c k k \u200b\u200b \u4e2a\u5854\u9876\uff0c 1 1 \u200b\u200b \u4e2a\u975e\u5854\u9876\uff0c\u8df3\u8f6c\u6b21\u6570 Pr(Y=k)=(1-p)^k p Pr(Y=k)=(1-p)^k p \u200b\u200b\u200b\u200b \u3002 \u6563\u5217\u8868 \u957f\u5ea6\u4e3a M M \u200b \uff0c\u88c5\u586b\u56e0\u5b50\u4e3a \\lambda \\lambda \u200b \u3002 \u6a21\u4f59\u6cd5\u95f4\u9694\u4e3a T T \u7684 M M \u4e2a\u5173\u952e\u7801\u63d2\u5165\u5230\u6563\u5217\u8868\uff0c g=gcd(M,T) g=gcd(M,T) \uff0c\u6bcf\u4e2a\u5173\u952e\u7801\u7ea6\u4e0e g g \u4e2a\u5173\u952e\u7801\u51b2\u7a81\u3002 M M \u200b \u4e3a\u7d20\u6570\u4e14 \\lambda \\le 50\\% \\lambda \\le 50\\% \u200b\uff0c\u5e73\u65b9\u8bd5\u63a2\u5c06\u7ec8\u6b62\u4e8e\u67d0\u4e2a\u7a7a\u6876\u3002\u200b \u5de6\u5f0f\u5806 npl(x)=npl(rc(x))+1 npl(x)=npl(rc(x))+1 \u200b\u3002 KMP N(P,j)=\\left\\{ 0\\le t<j|P[0,t)=P[j-t,j)\\right\\} N(P,j)=\\left\\{ 0\\le t<j|P[0,t)=P[j-t,j)\\right\\} \u4e14 P[t]\\neq P[j]) P[t]\\neq P[j]) \u200b\uff0c next[j]=max(N(P,j)) next[j]=max(N(P,j)) \u200b\u3002 \u4ee4 t=next[j] t=next[j] \uff0c\u5219 $$ next[j+1]=\\begin{cases} P[j+1]=P[t+1]?next[t+1]:t+1 &,P[j]=P[t]\\ next[t]+1,next[next[t]]+1,\\cdots &,others \\end{cases} $$ BM m m \u4e3a P P \u7684\u957f\u5ea6\uff0c ss[j]=max\\left\\{ 0\\le s<j|P(j-s,j]=P[m-s,m)\\right\\} ss[j]=max\\left\\{ 0\\le s<j|P(j-s,j]=P[m-s,m)\\right\\} \u200b\u200b\u200b \u3002 \u4ee4 (lo,hi] (lo,hi] \u4e3a\u6781\u957f\u5339\u914d\u540e\u7f00\uff0c\u5219 $$ ss[j]=\\begin{cases} ss[m-1-hi+j]&,j-lo\\le ss[m-1-hi+j]\\ updated(hi)-updated(lo)&, others \\end{cases} $$ $$ \\begin{cases} \\forall i<m-j-1, gs[i]=m-j-1&,ss[i]=j+1\\ gs[m-ss[j]-1]=m-j-1 &,others \\end{cases} $$ \u6392\u5e8f \u5411\u91cf S S \u5df2\u7ecf (g,h) (g,h) \u6709\u5e8f\uff0c\u4e14 g,h g,h \u5c5e\u4e8e O(d) O(d) \u6570\u91cf\u7ea7\uff0c\u5219\u4f7f\u7528\u63d2\u5165\u7b97\u6cd5\u8fdb\u884c d d -\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u7684\u4e3a O(dn) O(dn) \u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \u5e73\u5747\u8fd0\u884c\u65f6\u95f4 \u57fa\u6570\u6392\u5e8f\uff1a O(t(m+n)) O(t(m+n)) \u200b \u5feb\u901f\u6392\u5e8f\uff1a T(n) = n + 1 + \\frac{1}{n}\\sum\\limits_{i = 1}^{n}T(i - 1) + T(n - i) T(n) = n + 1 + \\frac{1}{n}\\sum\\limits_{i = 1}^{n}T(i - 1) + T(n - i) k-\u9009\u53d6\u7b97\u6cd5\uff1a T(n) = cn + T(n/Q) + T(3n/4) T(n) = cn + T(n/Q) + T(3n/4) \u200b","title":"\u6982\u5ff5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/graph/","text":"\u7b97\u6cd5\u56fe\u89e3 \u4e8c\u5206\u67e5\u627e \u56fe \u53cc\u8fde\u901a\u57df\u5206\u89e3 BST \u8282\u70b9\u5220\u9664 splay tree \u53cc\u5c42\u4f38\u5c55 \u63d2\u5165 \u5220\u9664 B-\u6811 \u4e0a\u6ea2 \u4e0b\u6ea2 V\u7684\u5de6\u5144\u5f1fL\u5b58\u5728,\u4e14\u81f3\u5c11\u5305\u542b \\lceil m/2\\rceil \\lceil m/2\\rceil \u4e2a\u5173\u952e\u7801 V\u7684\u53f3\u5144\u5f1fR\u5b58\u5728,\u4e14\u81f3\u5c11\u5305\u542b \\lceil m/2\\rceil \\lceil m/2\\rceil \u4e2a\u5173\u952e\u7801 V\u7684\u5de6\u3001\u53f3\u5144\u5f1fL\u548cR\u6216\u8005\u4e0d\u5b58\u5728,\u6216\u8005\u5176\u5305\u542b\u7684\u5173\u952e\u7801\u5747\u4e0d\u8db3 \\lceil m/2\\rceil \\lceil m/2\\rceil \u4e2a \u7ea2\u9ed1\u6811 \u63d2\u5165 \u53cc\u7ea2\u4fee\u6b63\uff08RR-1\uff09 \u53cc\u7ea2\u4fee\u6b63\uff08RR-2\uff09 \u590d\u6742\u5ea6 \u5220\u9664 \u53cc\u9ed1\u4fee\u6b63\uff08BB-1\uff09 \u53cc\u9ed1\u4fee\u6b63\uff08BB-2-R\uff09 \u53cc\u9ed1\u4fee\u6b63\uff08BB-2-B\uff09 \u53cc\u9ed1\u4fee\u6b63\uff08BB-3\uff09 \u53cc\u9ed1\u4fee\u6b63\u590d\u6742\u5ea6 \u5de6\u5f0f\u5806 \u5408\u5e76 BM \u574f\u5b57\u7b26 \u597d\u540e\u7f00 - ss2gs ![Screenshot_2021-11-14_16-35-01](./fig/Screenshot_2021-11-14_16-35-01.png) buildss \u590d\u6742\u5ea6 \u4e2d\u4f4d\u6570 \u5e76\u5f52\u6709\u5e8f\u5411\u91cf\u4e2d\u4f4d\u6570","title":"\u7b97\u6cd5\u56fe\u89e3"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/graph/#_1","text":"","title":"\u7b97\u6cd5\u56fe\u89e3"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/graph/#_2","text":"","title":"\u4e8c\u5206\u67e5\u627e"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/graph/#_3","text":"\u53cc\u8fde\u901a\u57df\u5206\u89e3","title":"\u56fe"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/graph/#bst","text":"\u8282\u70b9\u5220\u9664","title":"BST"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/graph/#splay-tree","text":"\u53cc\u5c42\u4f38\u5c55 \u63d2\u5165 \u5220\u9664","title":"splay tree"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/graph/#b-","text":"\u4e0a\u6ea2 \u4e0b\u6ea2 V\u7684\u5de6\u5144\u5f1fL\u5b58\u5728,\u4e14\u81f3\u5c11\u5305\u542b \\lceil m/2\\rceil \\lceil m/2\\rceil \u4e2a\u5173\u952e\u7801 V\u7684\u53f3\u5144\u5f1fR\u5b58\u5728,\u4e14\u81f3\u5c11\u5305\u542b \\lceil m/2\\rceil \\lceil m/2\\rceil \u4e2a\u5173\u952e\u7801 V\u7684\u5de6\u3001\u53f3\u5144\u5f1fL\u548cR\u6216\u8005\u4e0d\u5b58\u5728,\u6216\u8005\u5176\u5305\u542b\u7684\u5173\u952e\u7801\u5747\u4e0d\u8db3 \\lceil m/2\\rceil \\lceil m/2\\rceil \u4e2a","title":"B-\u6811"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/graph/#_4","text":"\u63d2\u5165 \u53cc\u7ea2\u4fee\u6b63\uff08RR-1\uff09 \u53cc\u7ea2\u4fee\u6b63\uff08RR-2\uff09 \u590d\u6742\u5ea6 \u5220\u9664 \u53cc\u9ed1\u4fee\u6b63\uff08BB-1\uff09 \u53cc\u9ed1\u4fee\u6b63\uff08BB-2-R\uff09 \u53cc\u9ed1\u4fee\u6b63\uff08BB-2-B\uff09 \u53cc\u9ed1\u4fee\u6b63\uff08BB-3\uff09 \u53cc\u9ed1\u4fee\u6b63\u590d\u6742\u5ea6","title":"\u7ea2\u9ed1\u6811"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/graph/#_5","text":"\u5408\u5e76","title":"\u5de6\u5f0f\u5806"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/graph/#bm","text":"\u574f\u5b57\u7b26 \u597d\u540e\u7f00 - ss2gs ![Screenshot_2021-11-14_16-35-01](./fig/Screenshot_2021-11-14_16-35-01.png) buildss \u590d\u6742\u5ea6","title":"BM"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/graph/#_6","text":"\u5e76\u5f52\u6709\u5e8f\u5411\u91cf\u4e2d\u4f4d\u6570","title":"\u4e2d\u4f4d\u6570"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/info/","text":"\u4ee3\u7801 \u5feb\u901f\u5e42 LL iterPower(LL a, LL b, LL m) { if(a >= m) a %= m; LL ans = 1; for(; b; b >>= 1) { if(b&1) ans = ans*a%m; a = a*a%m; } return ans; } \u6590\u6ce2\u90a3\u5951\u6570\u5217 __int64 fibI ( int n ) { //\u8ba1\u7b97Fibonacci\u6570\u5217\u7684\u7b2cn\u9879\uff08\u8fed\u4ee3\u7248\uff09\uff1aO(n) __int64 f = 1, g = 0; //\u521d\u59cb\u5316\uff1afib(-1)\u3001fib(0) while ( 0 < n-- ) { g += f; f = g - f; } //\u4f9d\u636e\u539f\u59cb\u5b9a\u4e49\uff0c\u901a\u8fc7n\u6b21\u52a0\u6cd5\u548c\u51cf\u6cd5\u8ba1\u7b97fib(n) return g; //\u8fd4\u56de } \u4e8c\u5206\u67e5\u627e // \u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\uff08\u7248\u672cC\uff09\uff1a\u5728\u6709\u5e8f\u5411\u91cf\u7684\u533a\u95f4[lo, hi)\u5185\u67e5\u627e\u5143\u7d20e\uff0c0 <= lo <= hi <= _size template <typename T> static Rank binSearch ( T* S, T const& e, Rank lo, Rank hi ) { /*DSA*/printf ( \"BIN search (C)\\n\" ); while ( lo < hi ) { //\u6bcf\u6b65\u8fed\u4ee3\u4ec5\u9700\u505a\u4e00\u6b21\u6bd4\u8f83\u5224\u65ad\uff0c\u6709\u4e24\u4e2a\u5206\u652f /*DSA*/ //for ( int i = 0; i < lo; i++ ) printf ( \" \" ); if ( lo >= 0 ) for ( int i = lo; i < hi; i++ ) printf ( \"....^\" ); printf ( \"\\n\" ); Rank mi = ( lo + hi ) >> 1; //\u4ee5\u4e2d\u70b9\u4e3a\u8f74\u70b9\uff08\u533a\u95f4\u5bbd\u5ea6\u7684\u6298\u534a\uff0c\u7b49\u6548\u4e8e\u5bbd\u5ea6\u4e4b\u6570\u503c\u8868\u793a\u7684\u53f3\u79fb\uff09 ( e < S[mi] ) ? hi = mi : lo = mi + 1; //\u7ecf\u6bd4\u8f83\u540e\u786e\u5b9a\u6df1\u5165[lo, mi)\u6216(mi, hi) } //\u6210\u529f\u67e5\u627e\u4e0d\u80fd\u63d0\u524d\u7ec8\u6b62 /*DSA*/ //for ( int i = 0; i < lo - 1; i++ ) printf ( \" \" ); if ( lo > 0 ) printf ( \"....|\\n\" ); else printf ( \"<<<<|\\n\" ); return lo - 1; //\u5faa\u73af\u7ed3\u675f\u65f6\uff0clo\u4e3a\u5927\u4e8ee\u7684\u5143\u7d20\u7684\u6700\u5c0f\u79e9\uff0c\u6545lo - 1\u5373\u4e0d\u5927\u4e8ee\u7684\u5143\u7d20\u7684\u6700\u5927\u79e9 } //\u6709\u591a\u4e2a\u547d\u4e2d\u5143\u7d20\u65f6\uff0c\u8fd4\u56de\u79e9\u6700\u5927\u8005\uff1b\u67e5\u627e\u5931\u8d25\u65f6\uff0c\u80fd\u591f\u8fd4\u56de\u5931\u8d25\u7684\u4f4d\u7f6e \u8fed\u4ee3\u7248\u4e8c\u53c9\u6811\u904d\u5386 // \u5148\u5e8f\u904d\u5386 //\u4ece\u5f53\u524d\u8282\u70b9\u51fa\u53d1\uff0c\u6cbf\u5de6\u5206\u652f\u4e0d\u65ad\u6df1\u5165\uff0c\u76f4\u81f3\u6ca1\u6709\u5de6\u5206\u652f\u7684\u8282\u70b9\uff1b\u6cbf\u9014\u8282\u70b9\u9047\u5230\u540e\u7acb\u5373\u8bbf\u95ee template <typename T, typename VST> //\u5143\u7d20\u7c7b\u578b\u3001\u64cd\u4f5c\u5668 static void visitAlongVine ( BinNodePosi<T> x, VST& visit, Stack<BinNodePosi<T>>& S ) { while ( x ) { visit ( x->data ); //\u8bbf\u95ee\u5f53\u524d\u8282\u70b9 S.push ( x->rc ); //\u53f3\u5b69\u5b50\u5165\u6808\u6682\u5b58\uff08\u53ef\u4f18\u5316\uff1a\u901a\u8fc7\u5224\u65ad\uff0c\u907f\u514d\u7a7a\u7684\u53f3\u5b69\u5b50\u5165\u6808\uff09 x = x->lc; //\u6cbf\u5de6\u5206\u652f\u6df1\u5165\u4e00\u5c42 } } template <typename T, typename VST> //\u5143\u7d20\u7c7b\u578b\u3001\u64cd\u4f5c\u5668 void travPre_I2 ( BinNodePosi<T> x, VST& visit ) { //\u4e8c\u53c9\u6811\u5148\u5e8f\u904d\u5386\u7b97\u6cd5\uff08\u8fed\u4ee3\u7248#2\uff09 Stack<BinNodePosi<T>> S; //\u8f85\u52a9\u6808 while ( true ) { visitAlongVine ( x, visit, S ); //\u4ece\u5f53\u524d\u8282\u70b9\u51fa\u53d1\uff0c\u9010\u6279\u8bbf\u95ee if ( S.empty() ) break; //\u76f4\u5230\u6808\u7a7a x = S.pop(); //\u5f39\u51fa\u4e0b\u4e00\u6279\u7684\u8d77\u70b9 } } // \u4e2d\u5e8f\u904d\u5386 template <typename T> BinNodePosi<T> BinNode<T>::succ() { //\u5b9a\u4f4d\u8282\u70b9v\u7684\u76f4\u63a5\u540e\u7ee7 BinNodePosi<T> s = this; //\u8bb0\u5f55\u540e\u7ee7\u7684\u4e34\u65f6\u53d8\u91cf if ( rc ) { //\u82e5\u6709\u53f3\u5b69\u5b50\uff0c\u5219\u76f4\u63a5\u540e\u7ee7\u5fc5\u5728\u53f3\u5b50\u6811\u4e2d\uff0c\u5177\u4f53\u5730\u5c31\u662f s = rc; //\u53f3\u5b50\u6811\u4e2d while ( HasLChild ( *s ) ) s = s->lc; //\u6700\u9760\u5de6\uff08\u6700\u5c0f\uff09\u7684\u8282\u70b9 } else { //\u5426\u5219\uff0c\u76f4\u63a5\u540e\u7ee7\u5e94\u662f\u201c\u5c06\u5f53\u524d\u8282\u70b9\u5305\u542b\u4e8e\u5176\u5de6\u5b50\u6811\u4e2d\u7684\u6700\u4f4e\u7956\u5148\u201d\uff0c\u5177\u4f53\u5730\u5c31\u662f while ( IsRChild ( *s ) ) s = s->parent; //\u9006\u5411\u5730\u6cbf\u53f3\u5411\u5206\u652f\uff0c\u4e0d\u65ad\u671d\u5de6\u4e0a\u65b9\u79fb\u52a8 s = s->parent; //\u6700\u540e\u518d\u671d\u53f3\u4e0a\u65b9\u79fb\u52a8\u4e00\u6b65\uff0c\u5373\u62b5\u8fbe\u76f4\u63a5\u540e\u7ee7\uff08\u5982\u679c\u5b58\u5728\uff09 } return s; } template <typename T, typename VST> void travIn ( BinNodePosi<T> x, VST& visit ) { while ( HasLChild ( *x ) ) x = x->lc; while ( x ) { visit ( x->data ); x = x->succ(); } return; } // \u540e\u5e8f\u904d\u5386 template <typename T> //\u5728\u4ee5S\u6808\u9876\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u627e\u5230\u6700\u9ad8\u5de6\u4fa7\u53ef\u89c1\u53f6\u8282\u70b9 static void gotoLeftmostLeaf ( Stack<BinNodePosi<T>>& S ) { //\u6cbf\u9014\u6240\u9047\u8282\u70b9\u4f9d\u6b21\u5165\u6808 while ( BinNodePosi<T> x = S.top() ) //\u81ea\u9876\u800c\u4e0b\uff0c\u53cd\u590d\u68c0\u67e5\u5f53\u524d\u8282\u70b9\uff08\u5373\u6808\u9876\uff09 if ( HasLChild ( *x ) ) { //\u5c3d\u53ef\u80fd\u5411\u5de6 if ( HasRChild ( *x ) ) S.push ( x->rc ); //\u82e5\u6709\u53f3\u5b69\u5b50\uff0c\u4f18\u5148\u5165\u6808 S.push ( x->lc ); //\u7136\u540e\u624d\u8f6c\u81f3\u5de6\u5b69\u5b50 } else //\u5b9e\u4e0d\u5f97\u5df2 S.push ( x->rc ); //\u624d\u5411\u53f3 S.pop(); //\u8fd4\u56de\u4e4b\u524d\uff0c\u5f39\u51fa\u6808\u9876\u7684\u7a7a\u8282\u70b9 } template <typename T, typename VST> void travPost_I ( BinNodePosi<T> x, VST& visit ) { //\u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386\uff08\u8fed\u4ee3\u7248\uff09 Stack<BinNodePosi<T>> S; //\u8f85\u52a9\u6808 if ( x ) S.push ( x ); //\u6839\u8282\u70b9\u5165\u6808 while ( !S.empty() ) { //x\u59cb\u7ec8\u4e3a\u5f53\u524d\u8282\u70b9 if ( S.top() != x->parent ) ////\u82e5\u6808\u9876\u975ex\u4e4b\u7236\uff08\u800c\u4e3a\u53f3\u5144\uff09 gotoLeftmostLeaf ( S ); //\u5219\u5728\u5176\u53f3\u5144\u5b50\u6811\u4e2d\u627e\u5230HLVFL\uff08\u76f8\u5f53\u4e8e\u9012\u5f52\u6df1\u5165\uff09 x = S.pop(); visit ( x->data ); //\u5f39\u51fa\u6808\u9876\uff08\u5373\u524d\u4e00\u8282\u70b9\u4e4b\u540e\u7ee7\uff09\uff0c\u5e76\u8bbf\u95ee\u4e4b } } \u56fe\u7684\u904d\u5386 // \u904d\u5386 template <typename Tv, typename Te> template <typename PU> //\u4f18\u5148\u7ea7\u641c\u7d22\uff08\u5168\u56fe\uff09 void Graph<Tv, Te>::pfs ( int s, PU prioUpdater ) { //assert: 0 <= s < n reset(); int v = s; //\u521d\u59cb\u5316 do //\u9010\u4e00\u68c0\u67e5\u6240\u6709\u9876\u70b9 if ( UNDISCOVERED == status ( v ) ) //\u4e00\u65e6\u9047\u5230\u5c1a\u672a\u53d1\u73b0\u7684\u9876\u70b9 PFS ( v, prioUpdater ); //\u5373\u4ece\u8be5\u9876\u70b9\u51fa\u53d1\u542f\u52a8\u4e00\u6b21PFS while ( s != ( v = ( ++v % n ) ) ); //\u6309\u5e8f\u53f7\u68c0\u67e5\uff0c\u6545\u4e0d\u6f0f\u4e0d\u91cd } template <typename Tv, typename Te> template <typename PU> //\u9876\u70b9\u7c7b\u578b\u3001\u8fb9\u7c7b\u578b\u3001\u4f18\u5148\u7ea7\u66f4\u65b0\u5668 void Graph<Tv, Te>::PFS ( int s, PU prioUpdater ) { //\u4f18\u5148\u7ea7\u641c\u7d22\uff08\u5355\u4e2a\u8fde\u901a\u57df\uff09 priority ( s ) = 0; status ( s ) = VISITED; parent ( s ) = -1; //\u521d\u59cb\u5316\uff0c\u8d77\u70b9s\u52a0\u81f3PFS\u6811\u4e2d while ( 1 ) { //\u5c06\u4e0b\u4e00\u9876\u70b9\u548c\u8fb9\u52a0\u81f3PFS\u6811\u4e2d for ( int w = firstNbr ( s ); -1 < w; w = nextNbr ( s, w ) ) //\u679a\u4e3es\u7684\u6240\u6709\u90bb\u5c45w prioUpdater ( this, s, w ); //\u66f4\u65b0\u9876\u70b9w\u7684\u4f18\u5148\u7ea7\u53ca\u5176\u7236\u9876\u70b9 for ( int shortest = INT32_MAX, w = 0; w < n; w++ ) if ( UNDISCOVERED == status ( w ) ) //\u4ece\u5c1a\u672a\u52a0\u5165\u904d\u5386\u6811\u7684\u9876\u70b9\u4e2d if ( shortest > priority ( w ) ) //\u9009\u51fa\u4e0b\u4e00\u4e2a { shortest = priority ( w ); s = w; } //\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u9876\u70b9s if ( VISITED == status ( s ) ) break; //\u76f4\u81f3\u6240\u6709\u9876\u70b9\u5747\u5df2\u52a0\u5165 status ( s ) = VISITED; type ( parent ( s ), s ) = TREE; //\u5c06s\u53ca\u4e0e\u5176\u7236\u7684\u8054\u8fb9\u52a0\u5165\u904d\u5386\u6811 } } //\u901a\u8fc7\u5b9a\u4e49\u5177\u4f53\u7684\u4f18\u5148\u7ea7\u66f4\u65b0\u7b56\u7565prioUpdater\uff0c\u5373\u53ef\u5b9e\u73b0\u4e0d\u540c\u7684\u7b97\u6cd5\u529f\u80fd template <typename Tv, typename Te> struct DfsPU { //\u9488\u5bf9DFS\u7b97\u6cd5\u7684\u9876\u70b9\u4f18\u5148\u7ea7\u66f4\u65b0\u5668 virtual void operator() ( Graph<Tv, Te>* g, int uk, int v ) { if ( g->status ( v ) == UNDISCOVERED ) //\u5bf9\u4e8euk\u6bcf\u4e00\u5c1a\u672a\u88ab\u53d1\u73b0\u7684\u90bb\u63a5\u9876\u70b9v if ( g->priority ( v ) > g->priority ( uk ) - 1 ) { //\u5c06\u5176\u5230\u8d77\u70b9\u8ddd\u79bb\u7684\u8d1f\u6570\u4f5c\u4e3a\u4f18\u5148\u7ea7\u6570 g->priority ( v ) = g->priority ( uk ) - 1; //\u66f4\u65b0\u4f18\u5148\u7ea7\uff08\u6570\uff09 g->parent ( v ) = uk; //\u66f4\u65b0\u7236\u8282\u70b9 return; //\u6ce8\u610f\uff1a\u4e0eBfsPU()\u4e0d\u540c\uff0c\u8fd9\u91cc\u53ea\u8981\u6709\u4e00\u4e2a\u90bb\u63a5\u9876\u70b9\u53ef\u66f4\u65b0\uff0c\u5373\u53ef\u7acb\u5373\u8fd4\u56de } //\u5982\u6b64\u6548\u679c\u7b49\u540c\u4e8e\uff0c\u540e\u88ab\u53d1\u73b0\u8005\u4f18\u5148 } }; // BFS \u7b49\u6548\u4e8e\u6743\u503c\u4e3a1\u7684dijkstra template <typename Tv, typename Te> struct DijkPU { //\u9488\u5bf9Dijkstra\u7b97\u6cd5\u7684\u9876\u70b9\u4f18\u5148\u7ea7\u66f4\u65b0\u5668 virtual void operator() ( Graph<Tv, Te>* g, int uk, int v ) { if ( UNDISCOVERED == g->status ( v ) ) //\u5bf9\u4e8euk\u6bcf\u4e00\u5c1a\u672a\u88ab\u53d1\u73b0\u7684\u90bb\u63a5\u9876\u70b9v\uff0c\u6309Dijkstra\u7b56\u7565 if ( g->priority ( v ) > g->priority ( uk ) + g->weight ( uk, v ) ) { //\u505a\u677e\u5f1b g->priority ( v ) = g->priority ( uk ) + g->weight ( uk, v ); //\u66f4\u65b0\u4f18\u5148\u7ea7\uff08\u6570\uff09 g->parent ( v ) = uk; //\u5e76\u540c\u65f6\u66f4\u65b0\u7236\u8282\u70b9 } } }; template <typename Tv, typename Te> struct PrimPU { //\u9488\u5bf9Prim\u7b97\u6cd5\u7684\u9876\u70b9\u4f18\u5148\u7ea7\u66f4\u65b0\u5668 virtual void operator() ( Graph<Tv, Te>* g, int uk, int v ) { if ( UNDISCOVERED == g->status ( v ) ) //\u5bf9\u4e8euk\u6bcf\u4e00\u5c1a\u672a\u88ab\u53d1\u73b0\u7684\u90bb\u63a5\u9876\u70b9v if ( g->priority ( v ) > g->weight ( uk, v ) ) { //\u6309Prim\u7b56\u7565\u505a\u677e\u5f1b g->priority ( v ) = g->weight ( uk, v ); //\u66f4\u65b0\u4f18\u5148\u7ea7\uff08\u6570\uff09 g->parent ( v ) = uk; //\u66f4\u65b0\u7236\u8282\u70b9 } } }; \u56fe\u7684\u53cc\u8fde\u901a\u57df\u5206\u89e3 \u540c\u4e00\u5206\u652f\u4e2d dtime[v] \u8d8a\u5c0f\u610f\u5473\u7740\u8d8a\u9ad8\uff0c\u4e14\u6bcf\u4e2a\u8282\u70b9\u53ea\u6709\u552f\u4e00\u7684 dtime[v] \u6545\u4f7f\u7528 dtime[v] \u66f4\u65b0 hca[v] \u3002 template <typename Tv, typename Te> void Graph<Tv, Te>::bcc ( int s ) { //\u57fa\u4e8eDFS\u7684BCC\u5206\u89e3\u7b97\u6cd5 reset(); int clock = 0; int v = s; Stack<int> S; //\u6808S\u7528\u4ee5\u8bb0\u5f55\u5df2\u8bbf\u95ee\u7684\u9876\u70b9 do if ( UNDISCOVERED == status ( v ) ) { //\u4e00\u65e6\u53d1\u73b0\u672a\u53d1\u73b0\u7684\u9876\u70b9\uff08\u65b0\u8fde\u901a\u5206\u91cf\uff09 BCC ( v, clock, S ); //\u5373\u4ece\u8be5\u9876\u70b9\u51fa\u53d1\u542f\u52a8\u4e00\u6b21BCC S.pop(); //\u904d\u5386\u8fd4\u56de\u540e\uff0c\u5f39\u51fa\u6808\u4e2d\u6700\u540e\u4e00\u4e2a\u9876\u70b9\u2014\u2014\u5f53\u524d\u8fde\u901a\u57df\u7684\u8d77\u70b9 } while ( s != ( v = ( ++v % n ) ) ); } #define hca(x) (fTime(x)) //\u5229\u7528\u6b64\u5904\u95f2\u7f6e\u7684fTime[]\u5145\u5f53hca[] template <typename Tv, typename Te> //\u9876\u70b9\u7c7b\u578b\u3001\u8fb9\u7c7b\u578b void Graph<Tv, Te>::BCC ( int v, int& clock, Stack<int>& S ) { //assert: 0 <= v < n hca ( v ) = dTime ( v ) = ++clock; status ( v ) = DISCOVERED; S.push ( v ); //v\u88ab\u53d1\u73b0\u5e76\u5165\u6808 for ( int u = firstNbr ( v ); -1 < u; u = nextNbr ( v, u ) ) //\u679a\u4e3ev\u7684\u6240\u6709\u90bb\u5c45u switch ( status ( u ) ) { //\u5e76\u89c6u\u7684\u72b6\u6001\u5206\u522b\u5904\u7406 case UNDISCOVERED: parent ( u ) = v; type ( v, u ) = TREE; BCC ( u, clock, S ); //\u4ece\u9876\u70b9u\u5904\u6df1\u5165 if ( hca ( u ) < dTime ( v ) ) //\u904d\u5386\u8fd4\u56de\u540e\uff0c\u82e5\u53d1\u73b0u\uff08\u901a\u8fc7\u540e\u5411\u8fb9\uff09\u53ef\u6307\u5411v\u7684\u771f\u7956\u5148 hca ( v ) = min ( hca ( v ), hca ( u ) ); //\u5219v\u4ea6\u5fc5\u5982\u6b64 else //\u5426\u5219\uff0c\u4ee5v\u4e3a\u5173\u8282\u70b9\uff08u\u4ee5\u4e0b\u5373\u662f\u4e00\u4e2aBCC\uff0c\u4e14\u5176\u4e2d\u9876\u70b9\u6b64\u65f6\u6b63\u96c6\u4e2d\u4e8e\u6808S\u7684\u9876\u90e8\uff09 /*DSA*/{ /*DSA*/printf ( \"BCC rooted at %c:\", vertex ( v ) ); /*DSA*/Stack<int> temp; do { temp.push ( S.pop() ); print ( vertex ( temp.top() ) ); } while ( u != temp.top() ); print( vertex ( parent(u) ) ); while ( !temp.empty() ) S.push ( temp.pop() ); while ( u != S.pop() ); //\u5f39\u51fa\u5f53\u524dBCC\u4e2d\uff08\u9664v\u5916\uff09\u7684\u6240\u6709\u8282\u70b9\uff0c\u53ef\u89c6\u9700\u8981\u505a\u8fdb\u4e00\u6b65\u5904\u7406 /*DSA*/printf ( \"\\n\" ); /*DSA*/} break; case DISCOVERED: type ( v, u ) = BACKWARD; //\u6807\u8bb0(v, u)\uff0c\u5e76\u6309\u7167\u201c\u8d8a\u5c0f\u8d8a\u9ad8\u201d\u7684\u51c6\u5219 if ( u != parent ( v ) ) hca ( v ) = min ( hca ( v ), dTime ( u ) ); //\u66f4\u65b0hca[v] break; default: //VISITED (digraphs only) type ( v, u ) = ( dTime ( v ) < dTime ( u ) ) ? FORWARD : CROSS; break; } status ( v ) = VISITED; //\u5bf9v\u7684\u8bbf\u95ee\u7ed3\u675f } BST \u8282\u70b9\u5220\u9664 template <typename T> static BinNodePosi<T> removeAt ( BinNodePosi<T> & x, BinNodePosi<T> & hot ) { BinNodePosi<T> w = x; //\u5b9e\u9645\u88ab\u6458\u9664\u7684\u8282\u70b9\uff0c\u521d\u503c\u540cx BinNodePosi<T> succ = NULL; //\u5b9e\u9645\u88ab\u5220\u9664\u8282\u70b9\u7684\u63a5\u66ff\u8005 if ( !HasLChild ( *x ) ) //\u82e5*x\u7684\u5de6\u5b50\u6811\u4e3a\u7a7a\uff0c\u5219\u53ef succ = x = x->rc; //\u76f4\u63a5\u5c06*x\u66ff\u6362\u4e3a\u5176\u53f3\u5b50\u6811 else if ( !HasRChild ( *x ) ) //\u82e5\u53f3\u5b50\u6811\u4e3a\u7a7a\uff0c\u5219\u53ef succ = x = x->lc; //\u5bf9\u79f0\u5730\u5904\u7406\u2014\u2014\u6ce8\u610f\uff1a\u6b64\u65f6succ != NULL else { //\u82e5\u5de6\u53f3\u5b50\u6811\u5747\u5b58\u5728\uff0c\u5219\u9009\u62e9x\u7684\u76f4\u63a5\u540e\u7ee7\u4f5c\u4e3a\u5b9e\u9645\u88ab\u6458\u9664\u8282\u70b9\uff0c\u4e3a\u6b64\u9700\u8981 w = w->succ(); //\uff08\u5728\u53f3\u5b50\u6811\u4e2d\uff09\u627e\u5230*x\u7684\u76f4\u63a5\u540e\u7ee7*w swap ( x->data, w->data ); //\u4ea4\u6362*x\u548c*w\u7684\u6570\u636e\u5143\u7d20 BinNodePosi<T> u = w->parent; ( ( u == x ) ? u->rc : u->lc ) = succ = w->rc; //\u9694\u79bb\u8282\u70b9*w } hot = w->parent; //\u8bb0\u5f55\u5b9e\u9645\u88ab\u5220\u9664\u8282\u70b9\u7684\u7236\u4eb2 if ( succ ) succ->parent = hot; //\u5e76\u5c06\u88ab\u5220\u9664\u8282\u70b9\u7684\u63a5\u66ff\u8005\u4e0ehot\u76f8\u8054 release ( w->data ); release ( w ); return succ; //\u91ca\u653e\u88ab\u6458\u9664\u8282\u70b9\uff0c\u8fd4\u56de\u63a5\u66ff\u8005 } \u57fa\u4e8e\u201c3+4\u201d\u91cd\u6784\u7684\u91cd\u5e73\u8861 template <typename T> BinNodePosi<T> BST<T>::rotateAt ( BinNodePosi<T> v ) { //v\u4e3a\u975e\u7a7a\u5b59\u8f88\u8282\u70b9 /*DSA*/if ( !v ) { printf ( \"\\a\\nFail to rotate a null node\\n\" ); exit ( -1 ); } BinNodePosi<T> p = v->parent; BinNodePosi<T> g = p->parent; //\u89c6v\u3001p\u548cg\u76f8\u5bf9\u4f4d\u7f6e\u5206\u56db\u79cd\u60c5\u51b5 if ( IsLChild ( *p ) ) /* zig */ if ( IsLChild ( *v ) ) { /* zig-zig */ //*DSA*/printf(\"\\tzIg-zIg: \"); p->parent = g->parent; //\u5411\u4e0a\u8054\u63a5 return connect34 ( v, p, g, v->lc, v->rc, p->rc, g->rc ); } else { /* zig-zag */ //*DSA*/printf(\"\\tzIg-zAg: \"); v->parent = g->parent; //\u5411\u4e0a\u8054\u63a5 return connect34 ( p, v, g, p->lc, v->lc, v->rc, g->rc ); } else /* zag */ if ( IsRChild ( *v ) ) { /* zag-zag */ //*DSA*/printf(\"\\tzAg-zAg: \"); p->parent = g->parent; //\u5411\u4e0a\u8054\u63a5 return connect34 ( g, p, v, g->lc, p->lc, v->lc, v->rc ); } else { /* zag-zig */ //*DSA*/printf(\"\\tzAg-zIg: \"); v->parent = g->parent; //\u5411\u4e0a\u8054\u63a5 return connect34 ( g, v, p, g->lc, v->lc, v->rc, p->rc ); } } splay tree \u53cc\u5c42\u4f38\u5c55 template <typename NodePosi> inline //\u5728\u8282\u70b9*p\u4e0e*lc\uff08\u53ef\u80fd\u4e3a\u7a7a\uff09\u4e4b\u95f4\u5efa\u7acb\u7236\uff08\u5de6\uff09\u5b50\u5173\u7cfb void attachAsLC ( NodePosi lc, NodePosi p ) { p->lc = lc; if ( lc ) lc->parent = p; } template <typename NodePosi> inline //\u5728\u8282\u70b9*p\u4e0e*rc\uff08\u53ef\u80fd\u4e3a\u7a7a\uff09\u4e4b\u95f4\u5efa\u7acb\u7236\uff08\u53f3\uff09\u5b50\u5173\u7cfb void attachAsRC ( NodePosi p, NodePosi rc ) { p->rc = rc; if ( rc ) rc->parent = p; } template <typename T> //Splay\u6811\u4f38\u5c55\u7b97\u6cd5\uff1a\u4ece\u8282\u70b9v\u51fa\u53d1\u9010\u5c42\u4f38\u5c55 BinNodePosi<T> Splay<T>::splay ( BinNodePosi<T> v ) { //v\u4e3a\u56e0\u6700\u8fd1\u8bbf\u95ee\u800c\u9700\u4f38\u5c55\u7684\u8282\u70b9\u4f4d\u7f6e if ( !v ) return NULL; BinNodePosi<T> p; BinNodePosi<T> g; //*v\u7684\u7236\u4eb2\u4e0e\u7956\u7236 while ( ( p = v->parent ) && ( g = p->parent ) ) { //\u81ea\u4e0b\u800c\u4e0a\uff0c\u53cd\u590d\u5bf9*v\u505a\u53cc\u5c42\u4f38\u5c55 BinNodePosi<T> gg = g->parent; //\u6bcf\u8f6e\u4e4b\u540e*v\u90fd\u4ee5\u539f\u66fe\u7956\u7236\uff08great-grand parent\uff09\u4e3a\u7236 if ( IsLChild ( *v ) ) if ( IsLChild ( *p ) ) { //zig-zig /*DSA*/printf ( \"\\tzIg-zIg :\" ); print ( g ); print ( p ); print ( v ); printf ( \"\\n\" ); attachAsLC ( p->rc, g ); attachAsLC ( v->rc, p ); attachAsRC ( p, g ); attachAsRC ( v, p ); } else { //zig-zag /*DSA*/printf ( \"\\tzIg-zAg :\" ); print ( g ); print ( p ); print ( v ); printf ( \"\\n\" ); attachAsLC ( v->rc, p ); attachAsRC ( g, v->lc ); attachAsLC ( g, v ); attachAsRC ( v, p ); } else if ( IsRChild ( *p ) ) { //zag-zag /*DSA*/printf ( \"\\tzAg-zAg :\" ); print ( g ); print ( p ); print ( v ); printf ( \"\\n\" ); attachAsRC ( g, p->lc ); attachAsRC ( p, v->lc ); attachAsLC ( g, p ); attachAsLC ( p, v ); } else { //zag-zig /*DSA*/printf ( \"\\tzAg-zIg :\" ); print ( g ); print ( p ); print ( v ); printf ( \"\\n\" ); attachAsRC ( p, v->lc ); attachAsLC ( v->rc, g ); attachAsRC ( v, g ); attachAsLC ( p, v ); } if ( !gg ) v->parent = NULL; //\u82e5*v\u539f\u5148\u7684\u66fe\u7956\u7236*gg\u4e0d\u5b58\u5728\uff0c\u5219*v\u73b0\u5728\u5e94\u4e3a\u6811\u6839 else //\u5426\u5219\uff0c*gg\u6b64\u540e\u5e94\u8be5\u4ee5*v\u4f5c\u4e3a\u5de6\u6216\u53f3\u5b69\u5b50 ( g == gg->lc ) ? attachAsLC ( v, gg ) : attachAsRC ( gg, v ); updateHeight ( g ); updateHeight ( p ); updateHeight ( v ); } //\u53cc\u5c42\u4f38\u5c55\u7ed3\u675f\u65f6\uff0c\u5fc5\u6709g == NULL\uff0c\u4f46p\u53ef\u80fd\u975e\u7a7a if ( p = v->parent ) { //\u82e5p\u679c\u771f\u975e\u7a7a\uff0c\u5219\u989d\u5916\u518d\u505a\u4e00\u6b21\u5355\u65cb /*DSA*/if ( IsLChild ( *v ) ) { printf ( \"\\tzIg :\" ); print ( p ); print ( v ); printf ( \"\\n\" ); } /*DSA*/else { printf ( \"\\tzAg :\" ); print ( p ); print ( v ); printf ( \"\\n\" ); } if ( IsLChild ( *v ) ) { attachAsLC ( v->rc, p ); attachAsRC ( v, p ); } else { attachAsRC ( p, v->lc ); attachAsLC ( p, v ); } updateHeight ( p ); updateHeight ( v ); } v->parent = NULL; return v; } //\u8c03\u6574\u4e4b\u540e\u65b0\u6811\u6839\u5e94\u4e3a\u88ab\u4f38\u5c55\u7684\u8282\u70b9\uff0c\u6545\u8fd4\u56de\u8be5\u8282\u70b9\u7684\u4f4d\u7f6e\u4ee5\u4fbf\u4e0a\u5c42\u51fd\u6570\u66f4\u65b0\u6811\u6839 B-\u6811 \u4e0a\u6ea2 template <typename T> //\u5173\u952e\u7801\u63d2\u5165\u540e\u82e5\u8282\u70b9\u4e0a\u6ea2\uff0c\u5219\u505a\u8282\u70b9\u5206\u88c2\u5904\u7406 void BTree<T>::solveOverflow ( BTNodePosi<T> v ) { if ( _order >= v->child.size() ) return; //\u9012\u5f52\u57fa\uff1a\u5f53\u524d\u8282\u70b9\u5e76\u672a\u4e0a\u6ea2 Rank s = _order / 2; //\u8f74\u70b9\uff08\u6b64\u65f6\u5e94\u6709_order = key.size() = child.size() - 1\uff09 BTNodePosi<T> u = new BTNode<T>(); //\u6ce8\u610f\uff1a\u65b0\u8282\u70b9\u5df2\u6709\u4e00\u4e2a\u7a7a\u5b69\u5b50 for ( Rank j = 0; j < _order - s - 1; j++ ) { //v\u53f3\u4fa7_order-s-1\u4e2a\u5b69\u5b50\u53ca\u5173\u952e\u7801\u5206\u88c2\u4e3a\u53f3\u4fa7\u8282\u70b9u u->child.insert ( j, v->child.remove ( s + 1 ) ); //\u9010\u4e2a\u79fb\u52a8\u6548\u7387\u4f4e u->key.insert ( j, v->key.remove ( s + 1 ) ); //\u6b64\u7b56\u7565\u53ef\u6539\u8fdb } u->child[_order - s - 1] = v->child.remove ( s + 1 ); //\u79fb\u52a8v\u6700\u9760\u53f3\u7684\u5b69\u5b50 if ( u->child[0] ) //\u82e5u\u7684\u5b69\u5b50\u4eec\u975e\u7a7a\uff0c\u5219 for ( Rank j = 0; j < _order - s; j++ ) //\u4ee4\u5b83\u4eec\u7684\u7236\u8282\u70b9\u7edf\u4e00 u->child[j]->parent = u; //\u6307\u5411u BTNodePosi<T> p = v->parent; //v\u5f53\u524d\u7684\u7236\u8282\u70b9p if ( !p ) { _root = p = new BTNode<T>(); p->child[0] = v; v->parent = p; } //\u82e5p\u7a7a\u5219\u521b\u5efa\u4e4b Rank r = 1 + p->key.search ( v->key[0] ); //p\u4e2d\u6307\u5411v\u7684\u6307\u9488\u7684\u79e9 p->key.insert ( r, v->key.remove ( s ) ); //\u8f74\u70b9\u5173\u952e\u7801\u4e0a\u5347 p->child.insert ( r + 1, u ); u->parent = p; //\u65b0\u8282\u70b9u\u4e0e\u7236\u8282\u70b9p\u4e92\u8054 solveOverflow ( p ); //\u4e0a\u5347\u4e00\u5c42\uff0c\u5982\u6709\u5fc5\u8981\u5219\u7ee7\u7eed\u5206\u88c2\u2014\u2014\u81f3\u591a\u9012\u5f52O(logn)\u5c42 } \u4e0b\u6ea2 template <typename T> //\u5173\u952e\u7801\u5220\u9664\u540e\u82e5\u8282\u70b9\u4e0b\u6ea2\uff0c\u5219\u505a\u8282\u70b9\u65cb\u8f6c\u6216\u5408\u5e76\u5904\u7406 void BTree<T>::solveUnderflow ( BTNodePosi<T> v ) { if ( ( _order + 1 ) / 2 <= v->child.size() ) return; //\u9012\u5f52\u57fa\uff1a\u5f53\u524d\u8282\u70b9\u5e76\u672a\u4e0b\u6ea2 BTNodePosi<T> p = v->parent; if ( !p ) { //\u9012\u5f52\u57fa\uff1a\u5df2\u5230\u6839\u8282\u70b9\uff0c\u6ca1\u6709\u5b69\u5b50\u7684\u4e0b\u9650 if ( !v->key.size() && v->child[0] ) { //\u4f46\u5018\u82e5\u4f5c\u4e3a\u6811\u6839\u7684v\u5df2\u4e0d\u542b\u5173\u952e\u7801\uff0c\u5374\u6709\uff08\u552f\u4e00\u7684\uff09\u975e\u7a7a\u5b69\u5b50\uff0c\u5219 /*DSA*/printf ( \"collapse\\n\" ); _root = v->child[0]; _root->parent = NULL; //\u8fd9\u4e2a\u8282\u70b9\u53ef\u88ab\u8df3\u8fc7 v->child[0] = NULL; release ( v ); //\u5e76\u56e0\u4e0d\u518d\u6709\u7528\u800c\u88ab\u9500\u6bc1 } //\u6574\u6811\u9ad8\u5ea6\u964d\u4f4e\u4e00\u5c42 return; } Rank r = 0; while ( p->child[r] != v ) r++; //\u786e\u5b9av\u662fp\u7684\u7b2cr\u4e2a\u5b69\u5b50\u2014\u2014\u6b64\u65f6v\u53ef\u80fd\u4e0d\u542b\u5173\u952e\u7801\uff0c\u6545\u4e0d\u80fd\u901a\u8fc7\u5173\u952e\u7801\u67e5\u627e //\u53e6\u5916\uff0c\u5728\u5b9e\u73b0\u4e86\u5b69\u5b50\u6307\u9488\u7684\u5224\u7b49\u5668\u4e4b\u540e\uff0c\u4e5f\u53ef\u76f4\u63a5\u8c03\u7528Vector::find()\u5b9a\u4f4d /*DSA*/printf ( \"\\nrank = %d\", r ); // \u60c5\u51b51\uff1a\u5411\u5de6\u5144\u5f1f\u501f\u5173\u952e\u7801 if ( 0 < r ) { //\u82e5v\u4e0d\u662fp\u7684\u7b2c\u4e00\u4e2a\u5b69\u5b50\uff0c\u5219 BTNodePosi<T> ls = p->child[r - 1]; //\u5de6\u5144\u5f1f\u5fc5\u5b58\u5728 if ( ( _order + 1 ) / 2 < ls->child.size() ) { //\u82e5\u8be5\u5144\u5f1f\u8db3\u591f\u201c\u80d6\u201d\uff0c\u5219 /*DSA*/printf ( \" ... case 1\\n\" ); v->key.insert ( 0, p->key[r - 1] ); //p\u501f\u51fa\u4e00\u4e2a\u5173\u952e\u7801\u7ed9v\uff08\u4f5c\u4e3a\u6700\u5c0f\u5173\u952e\u7801\uff09 p->key[r - 1] = ls->key.remove ( ls->key.size() - 1 ); //ls\u7684\u6700\u5927\u5173\u952e\u7801\u8f6c\u5165p v->child.insert ( 0, ls->child.remove ( ls->child.size() - 1 ) ); //\u540c\u65f6ls\u7684\u6700\u53f3\u4fa7\u5b69\u5b50\u8fc7\u7ee7\u7ed9v if ( v->child[0] ) v->child[0]->parent = v; //\u4f5c\u4e3av\u7684\u6700\u5de6\u4fa7\u5b69\u5b50 return; //\u81f3\u6b64\uff0c\u901a\u8fc7\u53f3\u65cb\u5df2\u5b8c\u6210\u5f53\u524d\u5c42\uff08\u4ee5\u53ca\u6240\u6709\u5c42\uff09\u7684\u4e0b\u6ea2\u5904\u7406 } } //\u81f3\u6b64\uff0c\u5de6\u5144\u5f1f\u8981\u4e48\u4e3a\u7a7a\uff0c\u8981\u4e48\u592a\u201c\u7626\u201d // \u60c5\u51b52\uff1a\u5411\u53f3\u5144\u5f1f\u501f\u5173\u952e\u7801 if ( p->child.size() - 1 > r ) { //\u82e5v\u4e0d\u662fp\u7684\u6700\u540e\u4e00\u4e2a\u5b69\u5b50\uff0c\u5219 BTNodePosi<T> rs = p->child[r + 1]; //\u53f3\u5144\u5f1f\u5fc5\u5b58\u5728 if ( ( _order + 1 ) / 2 < rs->child.size() ) { //\u82e5\u8be5\u5144\u5f1f\u8db3\u591f\u201c\u80d6\u201d\uff0c\u5219 /*DSA*/printf ( \" ... case 2\\n\" ); v->key.insert ( v->key.size(), p->key[r] ); //p\u501f\u51fa\u4e00\u4e2a\u5173\u952e\u7801\u7ed9v\uff08\u4f5c\u4e3a\u6700\u5927\u5173\u952e\u7801\uff09 p->key[r] = rs->key.remove ( 0 ); //rs\u7684\u6700\u5c0f\u5173\u952e\u7801\u8f6c\u5165p v->child.insert ( v->child.size(), rs->child.remove ( 0 ) ); //\u540c\u65f6rs\u7684\u6700\u5de6\u4fa7\u5b69\u5b50\u8fc7\u7ee7\u7ed9v if ( v->child[v->child.size() - 1] ) //\u4f5c\u4e3av\u7684\u6700\u53f3\u4fa7\u5b69\u5b50 v->child[v->child.size() - 1]->parent = v; return; //\u81f3\u6b64\uff0c\u901a\u8fc7\u5de6\u65cb\u5df2\u5b8c\u6210\u5f53\u524d\u5c42\uff08\u4ee5\u53ca\u6240\u6709\u5c42\uff09\u7684\u4e0b\u6ea2\u5904\u7406 } } //\u81f3\u6b64\uff0c\u53f3\u5144\u5f1f\u8981\u4e48\u4e3a\u7a7a\uff0c\u8981\u4e48\u592a\u201c\u7626\u201d // \u60c5\u51b53\uff1a\u5de6\u3001\u53f3\u5144\u5f1f\u8981\u4e48\u4e3a\u7a7a\uff08\u4f46\u4e0d\u53ef\u80fd\u540c\u65f6\uff09\uff0c\u8981\u4e48\u90fd\u592a\u201c\u7626\u201d\u2014\u2014\u5408\u5e76 if ( 0 < r ) { //\u4e0e\u5de6\u5144\u5f1f\u5408\u5e76 /*DSA*/printf ( \" ... case 3L\\n\" ); BTNodePosi<T> ls = p->child[r - 1]; //\u5de6\u5144\u5f1f\u5fc5\u5b58\u5728 ls->key.insert ( ls->key.size(), p->key.remove ( r - 1 ) ); p->child.remove ( r ); //p\u7684\u7b2cr - 1\u4e2a\u5173\u952e\u7801\u8f6c\u5165ls\uff0cv\u4e0d\u518d\u662fp\u7684\u7b2cr\u4e2a\u5b69\u5b50 ls->child.insert ( ls->child.size(), v->child.remove ( 0 ) ); if ( ls->child[ls->child.size() - 1] ) //v\u7684\u6700\u5de6\u4fa7\u5b69\u5b50\u8fc7\u7ee7\u7ed9ls\u505a\u6700\u53f3\u4fa7\u5b69\u5b50 ls->child[ls->child.size() - 1]->parent = ls; while ( !v->key.empty() ) { //v\u5269\u4f59\u7684\u5173\u952e\u7801\u548c\u5b69\u5b50\uff0c\u4f9d\u6b21\u8f6c\u5165ls ls->key.insert ( ls->key.size(), v->key.remove ( 0 ) ); ls->child.insert ( ls->child.size(), v->child.remove ( 0 ) ); if ( ls->child[ls->child.size() - 1] ) ls->child[ls->child.size() - 1]->parent = ls; } release ( v ); //\u91ca\u653ev } else { //\u4e0e\u53f3\u5144\u5f1f\u5408\u5e76 /*DSA*/printf ( \" ... case 3R\\n\" ); BTNodePosi<T> rs = p->child[r + 1]; //\u53f3\u5144\u5f1f\u5fc5\u5b58\u5728 rs->key.insert ( 0, p->key.remove ( r ) ); p->child.remove ( r ); //p\u7684\u7b2cr\u4e2a\u5173\u952e\u7801\u8f6c\u5165rs\uff0cv\u4e0d\u518d\u662fp\u7684\u7b2cr\u4e2a\u5b69\u5b50 rs->child.insert ( 0, v->child.remove ( v->child.size() - 1 ) ); if ( rs->child[0] ) rs->child[0]->parent = rs; //v\u7684\u6700\u53f3\u4fa7\u5b69\u5b50\u8fc7\u7ee7\u7ed9rs\u505a\u6700\u5de6\u4fa7\u5b69\u5b50 while ( !v->key.empty() ) { //v\u5269\u4f59\u7684\u5173\u952e\u7801\u548c\u5b69\u5b50\uff0c\u4f9d\u6b21\u8f6c\u5165rs rs->key.insert ( 0, v->key.remove ( v->key.size() - 1 ) ); rs->child.insert ( 0, v->child.remove ( v->child.size() - 1 ) ); if ( rs->child[0] ) rs->child[0]->parent = rs; } release ( v ); //\u91ca\u653ev } solveUnderflow ( p ); //\u4e0a\u5347\u4e00\u5c42\uff0c\u5982\u6709\u5fc5\u8981\u5219\u7ee7\u7eed\u5206\u88c2\u2014\u2014\u81f3\u591a\u9012\u5f52O(logn)\u5c42 return; } \u7ea2\u9ed1\u6811 \u63d2\u5165 /****************************************************************************************** * RedBlack\u53cc\u7ea2\u8c03\u6574\u7b97\u6cd5\uff1a\u89e3\u51b3\u8282\u70b9x\u4e0e\u5176\u7236\u5747\u4e3a\u7ea2\u8272\u7684\u95ee\u9898\u3002\u5206\u4e3a\u4e24\u5927\u7c7b\u60c5\u51b5\uff1a * RR-1\uff1a2\u6b21\u989c\u8272\u7ffb\u8f6c\uff0c2\u6b21\u9ed1\u9ad8\u5ea6\u66f4\u65b0\uff0c1~2\u6b21\u65cb\u8f6c\uff0c\u4e0d\u518d\u9012\u5f52 * RR-2\uff1a3\u6b21\u989c\u8272\u7ffb\u8f6c\uff0c3\u6b21\u9ed1\u9ad8\u5ea6\u66f4\u65b0\uff0c0\u6b21\u65cb\u8f6c\uff0c\u9700\u8981\u9012\u5f52 ******************************************************************************************/ template <typename T> void RedBlack<T>::solveDoubleRed ( BinNodePosi<T> x ) { //x\u5f53\u524d\u5fc5\u4e3a\u7ea2 if ( IsRoot ( *x ) ) //\u82e5\u5df2\uff08\u9012\u5f52\uff09\u8f6c\u81f3\u6811\u6839\uff0c\u5219\u5c06\u5176\u8f6c\u9ed1\uff0c\u6574\u6811\u9ed1\u9ad8\u5ea6\u4e5f\u968f\u4e4b\u9012\u589e { _root->color = RB_BLACK; _root->height++; return; } //\u5426\u5219\uff0cx\u7684\u7236\u4eb2p\u5fc5\u5b58\u5728 BinNodePosi<T> p = x->parent; if ( IsBlack ( p ) ) return; //\u82e5p\u4e3a\u9ed1\uff0c\u5219\u53ef\u7ec8\u6b62\u8c03\u6574\u3002\u5426\u5219 BinNodePosi<T> g = p->parent; //\u65e2\u7136p\u4e3a\u7ea2\uff0c\u5219x\u7684\u7956\u7236\u5fc5\u5b58\u5728\uff0c\u4e14\u5fc5\u4e3a\u9ed1\u8272 BinNodePosi<T> u = uncle ( x ); //\u4ee5\u4e0b\uff0c\u89c6x\u53d4\u7236u\u7684\u989c\u8272\u5206\u522b\u5904\u7406 if ( IsBlack ( u ) ) { //u\u4e3a\u9ed1\u8272\uff08\u542bNULL\uff09\u65f6 //*DSA*/printf(\" case RR-1:\\n\"); if ( IsLChild ( *x ) == IsLChild ( *p ) ) //\u82e5x\u4e0ep\u540c\u4fa7\uff08\u5373zIg-zIg\u6216zAg-zAg\uff09\uff0c\u5219 p->color = RB_BLACK; //p\u7531\u7ea2\u8f6c\u9ed1\uff0cx\u4fdd\u6301\u7ea2 else //\u82e5x\u4e0ep\u5f02\u4fa7\uff08\u5373zIg-zAg\u6216zAg-zIg\uff09\uff0c\u5219 x->color = RB_BLACK; //x\u7531\u7ea2\u8f6c\u9ed1\uff0cp\u4fdd\u6301\u7ea2 g->color = RB_RED; //g\u5fc5\u5b9a\u7531\u9ed1\u8f6c\u7ea2 ///// \u4ee5\u4e0a\u867d\u4fdd\u8bc1\u603b\u5171\u4e24\u6b21\u67d3\u8272\uff0c\u4f46\u56e0\u589e\u52a0\u4e86\u5224\u65ad\u800c\u5f97\u4e0d\u507f\u5931 ///// \u5728\u65cb\u8f6c\u540e\u5c06\u6839\u7f6e\u9ed1\u3001\u5b69\u5b50\u7f6e\u7ea2\uff0c\u867d\u9700\u4e09\u6b21\u67d3\u8272\u4f46\u6548\u7387\u66f4\u9ad8 BinNodePosi<T> gg = g->parent; //\u66fe\u7956\u7236\uff08great-grand parent\uff09 BinNodePosi<T> r = FromParentTo ( *g ) = rotateAt ( x ); //\u8c03\u6574\u540e\u7684\u5b50\u6811\u6839\u8282\u70b9 r->parent = gg; //\u4e0e\u539f\u66fe\u7956\u7236\u8054\u63a5 } else { //\u82e5u\u4e3a\u7ea2\u8272 //*DSA*/printf(\" case RR-2:\\n\"); p->color = RB_BLACK; p->height++; //p\u7531\u7ea2\u8f6c\u9ed1 u->color = RB_BLACK; u->height++; //u\u7531\u7ea2\u8f6c\u9ed1 if ( !IsRoot ( *g ) ) g->color = RB_RED; //g\u82e5\u975e\u6839\uff0c\u5219\u8f6c\u7ea2 solveDoubleRed ( g ); //\u7ee7\u7eed\u8c03\u6574g\uff08\u7c7b\u4f3c\u4e8e\u5c3e\u9012\u5f52\uff0c\u53ef\u4f18\u5316\u4e3a\u8fed\u4ee3\u5f62\u5f0f\uff09 } } \u5220\u9664 /****************************************************************************************** * RedBlack\u53cc\u9ed1\u8c03\u6574\u7b97\u6cd5\uff1a\u89e3\u51b3\u8282\u70b9x\u4e0e\u88ab\u5176\u66ff\u4ee3\u7684\u8282\u70b9\u5747\u4e3a\u9ed1\u8272\u7684\u95ee\u9898 * \u5206\u4e3a\u4e09\u5927\u7c7b\u5171\u56db\u79cd\u60c5\u51b5\uff1a * BB-1 \uff1a2\u6b21\u989c\u8272\u7ffb\u8f6c\uff0c2\u6b21\u9ed1\u9ad8\u5ea6\u66f4\u65b0\uff0c1~2\u6b21\u65cb\u8f6c\uff0c\u4e0d\u518d\u9012\u5f52 * BB-2R\uff1a2\u6b21\u989c\u8272\u7ffb\u8f6c\uff0c2\u6b21\u9ed1\u9ad8\u5ea6\u66f4\u65b0\uff0c0\u6b21\u65cb\u8f6c\uff0c\u4e0d\u518d\u9012\u5f52 * BB-2B\uff1a1\u6b21\u989c\u8272\u7ffb\u8f6c\uff0c1\u6b21\u9ed1\u9ad8\u5ea6\u66f4\u65b0\uff0c0\u6b21\u65cb\u8f6c\uff0c\u9700\u8981\u9012\u5f52 * BB-3 \uff1a2\u6b21\u989c\u8272\u7ffb\u8f6c\uff0c2\u6b21\u9ed1\u9ad8\u5ea6\u66f4\u65b0\uff0c1\u6b21\u65cb\u8f6c\uff0c\u8f6c\u4e3aBB-1\u6216BB2R ******************************************************************************************/ template <typename T> void RedBlack<T>::solveDoubleBlack ( BinNodePosi<T> r ) { BinNodePosi<T> p = r ? r->parent : _hot; if ( !p ) return; //r\u7684\u7236\u4eb2 BinNodePosi<T> s = ( r == p->lc ) ? p->rc : p->lc; //r\u7684\u5144\u5f1f if ( IsBlack ( s ) ) { //\u5144\u5f1fs\u4e3a\u9ed1 BinNodePosi<T> t = NULL; //s\u7684\u7ea2\u5b69\u5b50\uff08\u82e5\u5de6\u3001\u53f3\u5b69\u5b50\u7686\u7ea2\uff0c\u5de6\u8005\u4f18\u5148\uff1b\u7686\u9ed1\u65f6\u4e3aNULL\uff09 if ( IsRed ( s->rc ) ) t = s->rc; //\u53f3\u5b50 if ( IsRed ( s->lc ) ) t = s->lc; //\u5de6\u5b50 if ( t ) { //\u9ed1s\u6709\u7ea2\u5b69\u5b50\uff1aBB-1 //*DSA*/printf(\" case BB-1: Child (\"); print(s->lc); printf(\") of BLACK sibling (\"); print(s); printf(\") is RED\\n\"); RBColor oldColor = p->color; //\u5907\u4efd\u539f\u5b50\u6811\u6839\u8282\u70b9p\u989c\u8272\uff0c\u5e76\u5bf9t\u53ca\u5176\u7236\u4eb2\u3001\u7956\u7236 // \u4ee5\u4e0b\uff0c\u901a\u8fc7\u65cb\u8f6c\u91cd\u5e73\u8861\uff0c\u5e76\u5c06\u65b0\u5b50\u6811\u7684\u5de6\u3001\u53f3\u5b69\u5b50\u67d3\u9ed1 BinNodePosi<T> b = FromParentTo ( *p ) = rotateAt ( t ); //\u65cb\u8f6c if ( HasLChild ( *b ) ) { b->lc->color = RB_BLACK; updateHeight ( b->lc ); } //\u5de6\u5b50 if ( HasRChild ( *b ) ) { b->rc->color = RB_BLACK; updateHeight ( b->rc ); } //\u53f3\u5b50 b->color = oldColor; updateHeight ( b ); //\u65b0\u5b50\u6811\u6839\u8282\u70b9\u7ee7\u627f\u539f\u6839\u8282\u70b9\u7684\u989c\u8272 //*DSA*/printBinTree(b, 0, 0); } else { //\u9ed1s\u65e0\u7ea2\u5b69\u5b50 s->color = RB_RED; s->height--; //s\u8f6c\u7ea2 if ( IsRed ( p ) ) { //BB-2R //*DSA*/printf(\" case BB-2R: Both children (\"); print(s->lc); printf(\") and (\"); print(s->rc); printf(\") of BLACK sibling (\"); print(s); printf(\") are BLACK, and parent (\"); print(p); printf(\") is RED\\n\"); //s\u5b69\u5b50\u5747\u9ed1\uff0cp\u7ea2 p->color = RB_BLACK; //p\u8f6c\u9ed1\uff0c\u4f46\u9ed1\u9ad8\u5ea6\u4e0d\u53d8 //*DSA*/printBinTree(p, 0, 0); } else { //BB-2B //*DSA*/printf(\" case BB-2R: Both children (\"); print(s->lc); printf(\") and (\"); print(s->rc); printf(\") of BLACK sibling (\"); print(s); printf(\") are BLACK, and parent (\"); print(p); printf(\") is BLACK\\n\"); //s\u5b69\u5b50\u5747\u9ed1\uff0cp\u9ed1 p->height--; //p\u4fdd\u6301\u9ed1\uff0c\u4f46\u9ed1\u9ad8\u5ea6\u4e0b\u964d //*DSA*/printBinTree(p, 0, 0); solveDoubleBlack ( p ); //\u9012\u5f52\u4e0a\u6eaf } } } else { //\u5144\u5f1fs\u4e3a\u7ea2\uff1aBB-3 //*DSA*/printf(\" case BB-3: sibling (\"); print(s); printf(\" is RED\\n\"); //s\u7ea2\uff08\u53cc\u5b50\u4ff1\u9ed1\uff09 s->color = RB_BLACK; p->color = RB_RED; //s\u8f6c\u9ed1\uff0cp\u8f6c\u7ea2 BinNodePosi<T> t = IsLChild ( *s ) ? s->lc : s->rc; //\u53d6t\u4e0e\u5176\u7236s\u540c\u4fa7 _hot = p; FromParentTo ( *p ) = rotateAt ( t ); //\u5bf9t\u53ca\u5176\u7236\u4eb2\u3001\u7956\u7236\u505a\u5e73\u8861\u8c03\u6574 //*DSA*/printBinTree<T>(s, 0, 0); solveDoubleBlack ( r ); //\u7ee7\u7eed\u4fee\u6b63r\u5904\u53cc\u9ed1\u2014\u2014\u6b64\u65f6\u7684p\u5df2\u8f6c\u7ea2\uff0c\u6545\u540e\u7eed\u53ea\u80fd\u662fBB-1\u6216BB-2R } } \u5de6\u5f0f\u5806 template <typename T> //\u6839\u636e\u76f8\u5bf9\u4f18\u5148\u7ea7\u786e\u5b9a\u9002\u5b9c\u7684\u65b9\u5f0f\uff0c\u5408\u5e76\u4ee5a\u548cb\u4e3a\u6839\u8282\u70b9\u7684\u4e24\u4e2a\u5de6\u5f0f\u5806 static BinNodePosi<T> merge ( BinNodePosi<T> a, BinNodePosi<T> b ) { if ( ! a ) return b; //\u9000\u5316\u60c5\u51b5 if ( ! b ) return a; //\u9000\u5316\u60c5\u51b5 if ( lt ( a->data, b->data ) ) swap ( a, b ); //\u4e00\u822c\u60c5\u51b5\uff1a\u9996\u5148\u786e\u4fddb\u4e0d\u5927 ( a->rc = merge ( a->rc, b ) )->parent = a; //\u5c06a\u7684\u53f3\u5b50\u5806\uff0c\u4e0eb\u5408\u5e76 if ( !a->lc || a->lc->npl < a->rc->npl ) //\u82e5\u6709\u5fc5\u8981 swap ( a->lc, a->rc ); //\u4ea4\u6362a\u7684\u5de6\u3001\u53f3\u5b50\u5806\uff0c\u4ee5\u786e\u4fdd\u53f3\u5b50\u5806\u7684npl\u4e0d\u5927 a->npl = a->rc ? a->rc->npl + 1 : 1; //\u66f4\u65b0a\u7684npl return a; //\u8fd4\u56de\u5408\u5e76\u540e\u7684\u5806\u9876 } //\u672c\u7b97\u6cd5\u53ea\u5b9e\u73b0\u7ed3\u6784\u4e0a\u7684\u5408\u5e76\uff0c\u5806\u7684\u89c4\u6a21\u987b\u7531\u4e0a\u5c42\u8c03\u7528\u8005\u8d1f\u8d23\u66f4\u65b0 KMP \u4e3b\u7b97\u6cd5 int match ( char* P, char* T ) { //KMP\u7b97\u6cd5 int* next = buildNext ( P ); //\u6784\u9020next\u8868 int n = ( int ) strlen ( T ), i = 0; //\u6587\u672c\u4e32\u6307\u9488 int m = ( int ) strlen ( P ), j = 0; //\u6a21\u5f0f\u4e32\u6307\u9488 while ( j < m && i < n ) //\u81ea\u5de6\u5411\u53f3\u9010\u4e2a\u6bd4\u5bf9\u5b57\u7b26 /*DSA*/{ /*DSA*/showProgress ( T, P, i - j, j ); /*DSA*/printNext ( next, i - j, strlen ( P ) ); /*DSA*/getchar(); printf ( \"\\n\" ); if ( 0 > j || T[i] == P[j] ) //\u82e5\u5339\u914d\uff0c\u6216P\u5df2\u79fb\u51fa\u6700\u5de6\u4fa7\uff08\u4e24\u4e2a\u5224\u65ad\u7684\u6b21\u5e8f\u4e0d\u53ef\u4ea4\u6362\uff09 { i ++; j ++; } //\u5219\u8f6c\u5230\u4e0b\u4e00\u5b57\u7b26 else //\u5426\u5219 j = next[j]; //\u6a21\u5f0f\u4e32\u53f3\u79fb\uff08\u6ce8\u610f\uff1a\u6587\u672c\u4e32\u4e0d\u7528\u56de\u9000\uff09 /*DSA*/} delete [] next; //\u91ca\u653enext\u8868 return i - j; } \u5efa\u7acb next \u8868 int* buildNext ( char* P ) { //\u6784\u9020\u6a21\u5f0f\u4e32P\u7684next\u8868\uff08\u6539\u8fdb\u7248\u672c\uff09 size_t m = strlen ( P ), j = 0; //\u201c\u4e3b\u201d\u4e32\u6307\u9488 int* N = new int[m]; //next\u8868 int t = N[0] = -1; //\u6a21\u5f0f\u4e32\u6307\u9488 while ( j < m - 1 ) if ( 0 > t || P[j] == P[t] ) { //\u5339\u914d N[j] = ( P[++j] != P[++t] ? t : N[t] ); //\u6ce8\u610f\u6b64\u53e5\u4e0e\u672a\u6539\u8fdb\u4e4b\u524d\u7684\u533a\u522b } else //\u5931\u914d t = N[t]; /*DSA*/printString ( P ); printf ( \"\\n\" ); /*DSA*/printNext ( N, 0, m ); return N; } BM \u4e3b\u7b97\u6cd5 int match ( char* P, char* T ) { //Boyer-Morre\u7b97\u6cd5\uff08\u5b8c\u5168\u7248\uff0c\u517c\u987eBad Character\u4e0eGood Suffix\uff09 int* bc = buildBC ( P ); int* gs = buildGS ( P ); //\u6784\u9020BC\u8868\u548cGS\u8868 size_t i = 0; //\u6a21\u5f0f\u4e32\u76f8\u5bf9\u4e8e\u6587\u672c\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\uff08\u521d\u59cb\u65f6\u4e0e\u6587\u672c\u4e32\u5de6\u5bf9\u9f50\uff09 while ( strlen ( T ) >= i + strlen ( P ) ) { //\u4e0d\u65ad\u53f3\u79fb\uff08\u8ddd\u79bb\u53ef\u80fd\u4e0d\u6b62\u4e00\u4e2a\u5b57\u7b26\uff09\u6a21\u5f0f\u4e32 int j = strlen ( P ) - 1; //\u4ece\u6a21\u5f0f\u4e32\u6700\u672b\u5c3e\u7684\u5b57\u7b26\u5f00\u59cb while ( P[j] == T[i + j] ) //\u81ea\u53f3\u5411\u5de6\u6bd4\u5bf9 if ( 0 > --j ) break; /*DSA*/showProgress ( T, P, i, j ); printf ( \"\\n\" ); getchar(); if ( 0 > j ) //\u82e5\u6781\u5927\u5339\u914d\u540e\u7f00 == \u6574\u4e2a\u6a21\u5f0f\u4e32\uff08\u8bf4\u660e\u5df2\u7ecf\u5b8c\u5168\u5339\u914d\uff09 break; //\u8fd4\u56de\u5339\u914d\u4f4d\u7f6e else //\u5426\u5219\uff0c\u9002\u5f53\u5730\u79fb\u52a8\u6a21\u5f0f\u4e32 i += max ( gs[j], j - bc[ T[i + j] ] ); //\u4f4d\u79fb\u91cf\u6839\u636eBC\u8868\u548cGS\u8868\u9009\u62e9\u5927\u8005 } delete [] gs; delete [] bc; //\u9500\u6bc1GS\u8868\u548cBC\u8868 return i; } bc //***************************************************************************************** // 0 bc['X'] m-1 // | | | // ........................X*************************************** // .|<------------- 'X' free ------------>| //***************************************************************************************** int* buildBC ( char* P ) { //\u6784\u9020Bad Charactor Shift\u8868\uff1aO(m + 256) int* bc = new int[256]; //BC\u8868\uff0c\u4e0e\u5b57\u7b26\u8868\u7b49\u957f for ( size_t j = 0; j < 256; j ++ ) bc[j] = -1; //\u521d\u59cb\u5316\uff1a\u9996\u5148\u5047\u8bbe\u6240\u6709\u5b57\u7b26\u5747\u672a\u5728P\u4e2d\u51fa\u73b0 for ( size_t m = strlen ( P ), j = 0; j < m; j ++ ) //\u81ea\u5de6\u5411\u53f3\u626b\u63cf\u6a21\u5f0f\u4e32P bc[ P[j] ] = j; //\u5c06\u5b57\u7b26P[j]\u7684BC\u9879\u66f4\u65b0\u4e3aj\uff08\u5355\u8c03\u9012\u589e\uff09\u2014\u2014\u753b\u5bb6\u7b97\u6cd5 /*DSA*/printBC ( bc ); return bc; } gs int* buildSS ( char* P ) { //\u6784\u9020\u6700\u5927\u5339\u914d\u540e\u7f00\u957f\u5ea6\u8868\uff1aO(m) int m = strlen ( P ); int* ss = new int[m]; //Suffix Size\u8868 ss[m - 1] = m; //\u5bf9\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u800c\u8a00\uff0c\u4e0e\u4e4b\u5339\u914d\u7684\u6700\u957f\u540e\u7f00\u5c31\u662f\u6574\u4e2aP\u4e32 // \u4ee5\u4e0b\uff0c\u4ece\u5012\u6570\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u8d77\u81ea\u53f3\u5411\u5de6\u626b\u63cfP\uff0c\u4f9d\u6b21\u8ba1\u7b97\u51fass[]\u5176\u4f59\u5404\u9879 for ( int lo = m - 1, hi = m - 1, j = lo - 1; j >= 0; j -- ) if ( ( lo < j ) && ( ss[m - hi + j - 1] < j - lo ) ) //\u60c5\u51b5\u4e00 ss[j] = ss[m - hi + j - 1]; //\u76f4\u63a5\u5229\u7528\u6b64\u524d\u5df2\u8ba1\u7b97\u51fa\u7684ss[] else { //\u60c5\u51b5\u4e8c hi = j; lo = min ( lo, hi ); while ( ( 0 <= lo ) && ( P[lo] == P[m - hi + lo - 1] ) ) //\u4e8c\u91cd\u5faa\u73af\uff1f lo--; //\u9010\u4e2a\u5bf9\u6bd4\u5904\u4e8e(lo, hi]\u524d\u7aef\u7684\u5b57\u7b26 ss[j] = hi - lo; } /*DSA*/printf ( \"-- ss[] Table -------\\n\" ); /*DSA*/for ( int i = 0; i < m; i ++ ) printf ( \"%4d\", i ); printf ( \"\\n\" ); /*DSA*/printString ( P ); printf ( \"\\n\" ); /*DSA*/for ( int i = 0; i < m; i ++ ) printf ( \"%4d\", ss[i] ); printf ( \"\\n\\n\" ); return ss; } int* buildGS ( char* P ) { //\u6784\u9020\u597d\u540e\u7f00\u4f4d\u79fb\u91cf\u8868\uff1aO(m) int* ss = buildSS ( P ); //Suffix Size table size_t m = strlen ( P ); int* gs = new int[m]; //Good Suffix shift table for ( size_t j = 0; j < m; j ++ ) gs[j] = m; //\u521d\u59cb\u5316 for ( size_t i = 0, j = m - 1; j < UINT_MAX; j -- ) //\u9006\u5411\u9010\u4e00\u626b\u63cf\u5404\u5b57\u7b26P[j] if ( j + 1 == ss[j] ) //\u82e5P[0, j] = P[m - j - 1, m)\uff0c\u5219 while ( i < m - j - 1 ) //\u5bf9\u4e8eP[m - j - 1]\u5de6\u4fa7\u7684\u6bcf\u4e2a\u5b57\u7b26P[i]\u800c\u8a00\uff08\u4e8c\u91cd\u5faa\u73af\uff1f\uff09 gs[i++] = m - j - 1; //m - j - 1\u90fd\u662fgs[i]\u7684\u4e00\u79cd\u9009\u62e9 for ( size_t j = 0; j < m - 1; j ++ ) //\u753b\u5bb6\u7b97\u6cd5\uff1a\u6b63\u5411\u626b\u63cfP[]\u5404\u5b57\u7b26\uff0cgs[j]\u4e0d\u65ad\u9012\u51cf\uff0c\u76f4\u81f3\u6700\u5c0f gs[m - ss[j] - 1] = m - j - 1; //m - j - 1\u5fc5\u662f\u5176gs[m - ss[j] - 1]\u503c\u7684\u4e00\u79cd\u9009\u62e9 /*DSA*/printGS ( P, gs ); delete [] ss; return gs; } Karp-Rabin // \u5b50\u4e32\u6307\u7eb9\u5feb\u901f\u66f4\u65b0\u7b97\u6cd5 void updateHash ( HashCode& hashT, char* T, size_t m, size_t k, HashCode Dm ) { hashT = ( hashT - DIGIT ( T, k - 1 ) * Dm ) % M; //\u5728\u524d\u4e00\u6307\u7eb9\u57fa\u7840\u4e0a\uff0c\u53bb\u9664\u9996\u4f4dT[k - 1] hashT = ( hashT * R + DIGIT ( T, k + m - 1 ) ) % M; //\u6dfb\u52a0\u672b\u4f4dT[k + m - 1] if ( 0 > hashT ) hashT += M; //\u786e\u4fdd\u6563\u5217\u7801\u843d\u5728\u5408\u6cd5\u533a\u95f4\u5185 } \u4f17\u6570 template <typename T> T majEleCandidate ( Vector<T> A ) { //\u9009\u51fa\u5177\u5907\u5fc5\u8981\u6761\u4ef6\u7684\u4f17\u6570\u5019\u9009\u8005 T maj; //\u4f17\u6570\u5019\u9009\u8005 // \u7ebf\u6027\u626b\u63cf\uff1a\u501f\u52a9\u8ba1\u6570\u5668c\uff0c\u8bb0\u5f55maj\u4e0e\u5176\u5b83\u5143\u7d20\u7684\u6570\u91cf\u5dee\u989d for ( int c = 0, i = 0; i < A.size(); i++ ) if ( 0 == c ) { //\u6bcf\u5f53c\u5f52\u96f6\uff0c\u90fd\u610f\u5473\u7740\u6b64\u65f6\u7684\u524d\u7f00P\u53ef\u4ee5\u526a\u9664 maj = A[i]; c = 1; //\u4f17\u6570\u5019\u9009\u8005\u6539\u4e3a\u65b0\u7684\u5f53\u524d\u5143\u7d20 } else //\u5426\u5219 maj == A[i] ? c++ : c--; //\u76f8\u5e94\u5730\u66f4\u65b0\u5dee\u989d\u8ba1\u6570\u5668 return maj; //\u81f3\u6b64\uff0c\u539f\u5411\u91cf\u7684\u4f17\u6570\u82e5\u5b58\u5728\uff0c\u5219\u53ea\u80fd\u662fmaj \u2014\u2014 \u5c3d\u7ba1\u53cd\u4e4b\u4e0d\u7136 } \u4e2d\u4f4d\u6570 \u5e76\u5f52\u6709\u5e8f\u5411\u91cf\u4e2d\u4f4d\u6570 template <typename T> //\u5e8f\u5217S1[lo1, lo1 + n)\u548cS2[lo2, lo2 + n)\u5206\u522b\u6709\u5e8f\uff0cn > 0\uff0c\u6570\u636e\u9879\u53ef\u80fd\u91cd\u590d T median ( Vector<T>& S1, int lo1, Vector<T>& S2, int lo2, int n ) { //\u4e2d\u4f4d\u6570\u7b97\u6cd5\uff08\u9ad8\u6548\u7248\uff09 /*DSA*/printf ( \"median\\n\" ); /*DSA*/for ( int i = 0; i < lo1; i++ ) printf ( \" .\" ); for ( int i = 0; i < n; i++ ) print ( S1[lo1+i] ); for ( int i = lo1 + n; i < S1.size(); i++ ) printf ( \" .\" ); printf ( \"\\n\" ); /*DSA*/for ( int i = 0; i < lo2; i++ ) printf ( \" .\" ); for ( int i = 0; i < n; i++ ) print ( S2[lo2+i] ); for ( int i = lo2 + n; i < S2.size(); i++ ) printf ( \" .\" ); printf ( \"\\n--\\n\" ); if ( n < 3 ) return trivialMedian ( S1, lo1, n, S2, lo2, n ); //\u9012\u5f52\u57fa int mi1 = lo1 + n / 2, mi2 = lo2 + ( n - 1 ) / 2; //\u957f\u5ea6\uff08\u63a5\u8fd1\uff09\u51cf\u534a if ( S1[mi1] < S2[mi2] ) return median ( S1, mi1, S2, lo2, n + lo1 - mi1 ); //\u53d6S1\u53f3\u534a\u3001S2\u5de6\u534a else if ( S1[mi1] > S2[mi2] ) return median ( S1, lo1, S2, mi2, n + lo2 - mi2 ); //\u53d6S1\u5de6\u534a\u3001S2\u53f3\u534a else return S1[mi1]; } \u5feb\u901f\u6392\u5e8f \\\\partition \u7b80\u5316 template <typename T> //\u8f74\u70b9\u6784\u9020\u7b97\u6cd5\uff1a\u901a\u8fc7\u8c03\u6574\u5143\u7d20\u4f4d\u7f6e\u6784\u9020\u533a\u95f4[lo, hi)\u7684\u8f74\u70b9\uff0c\u5e76\u8fd4\u56de\u5176\u79e9 Rank Vector<T>::partition ( Rank lo, Rank hi ) { swap ( _elem[lo], _elem[ lo + rand() % ( hi - lo ) ] ); //\u4efb\u9009\u4e00\u4e2a\u5143\u7d20\u4e0e\u9996\u5143\u7d20\u4ea4\u6362 int x = _elem[lo], j = hi; // _elem(i, j) <= x < [j, hi)\u4e2d\u5143\u7d20 for (int i = hi - 1; i >= 0; --i) { if (x < _elem[i]) { swap(_elem[i], _elem[--j]); } } swap(_elem[j - 1], _elem[lo]); return j - 1; } shell\u6392\u5e8f \u5e95\u5c42\u6392\u5e8f\u5e94\u662f\u8f93\u5165\u654f\u611f\u578b\uff0c\u5982\u63d2\u5165\u6392\u5e8f\u5728\u5df2\u6392\u5e8f\u5217\u4e2d\u5e94\u4ece\u540e\u5411\u524d\u641c\u7d22\u3002","title":"\u4ee3\u7801"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/info/#_1","text":"","title":"\u4ee3\u7801"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/info/#_2","text":"LL iterPower(LL a, LL b, LL m) { if(a >= m) a %= m; LL ans = 1; for(; b; b >>= 1) { if(b&1) ans = ans*a%m; a = a*a%m; } return ans; }","title":"\u5feb\u901f\u5e42"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/info/#_3","text":"__int64 fibI ( int n ) { //\u8ba1\u7b97Fibonacci\u6570\u5217\u7684\u7b2cn\u9879\uff08\u8fed\u4ee3\u7248\uff09\uff1aO(n) __int64 f = 1, g = 0; //\u521d\u59cb\u5316\uff1afib(-1)\u3001fib(0) while ( 0 < n-- ) { g += f; f = g - f; } //\u4f9d\u636e\u539f\u59cb\u5b9a\u4e49\uff0c\u901a\u8fc7n\u6b21\u52a0\u6cd5\u548c\u51cf\u6cd5\u8ba1\u7b97fib(n) return g; //\u8fd4\u56de }","title":"\u6590\u6ce2\u90a3\u5951\u6570\u5217"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/info/#_4","text":"// \u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\uff08\u7248\u672cC\uff09\uff1a\u5728\u6709\u5e8f\u5411\u91cf\u7684\u533a\u95f4[lo, hi)\u5185\u67e5\u627e\u5143\u7d20e\uff0c0 <= lo <= hi <= _size template <typename T> static Rank binSearch ( T* S, T const& e, Rank lo, Rank hi ) { /*DSA*/printf ( \"BIN search (C)\\n\" ); while ( lo < hi ) { //\u6bcf\u6b65\u8fed\u4ee3\u4ec5\u9700\u505a\u4e00\u6b21\u6bd4\u8f83\u5224\u65ad\uff0c\u6709\u4e24\u4e2a\u5206\u652f /*DSA*/ //for ( int i = 0; i < lo; i++ ) printf ( \" \" ); if ( lo >= 0 ) for ( int i = lo; i < hi; i++ ) printf ( \"....^\" ); printf ( \"\\n\" ); Rank mi = ( lo + hi ) >> 1; //\u4ee5\u4e2d\u70b9\u4e3a\u8f74\u70b9\uff08\u533a\u95f4\u5bbd\u5ea6\u7684\u6298\u534a\uff0c\u7b49\u6548\u4e8e\u5bbd\u5ea6\u4e4b\u6570\u503c\u8868\u793a\u7684\u53f3\u79fb\uff09 ( e < S[mi] ) ? hi = mi : lo = mi + 1; //\u7ecf\u6bd4\u8f83\u540e\u786e\u5b9a\u6df1\u5165[lo, mi)\u6216(mi, hi) } //\u6210\u529f\u67e5\u627e\u4e0d\u80fd\u63d0\u524d\u7ec8\u6b62 /*DSA*/ //for ( int i = 0; i < lo - 1; i++ ) printf ( \" \" ); if ( lo > 0 ) printf ( \"....|\\n\" ); else printf ( \"<<<<|\\n\" ); return lo - 1; //\u5faa\u73af\u7ed3\u675f\u65f6\uff0clo\u4e3a\u5927\u4e8ee\u7684\u5143\u7d20\u7684\u6700\u5c0f\u79e9\uff0c\u6545lo - 1\u5373\u4e0d\u5927\u4e8ee\u7684\u5143\u7d20\u7684\u6700\u5927\u79e9 } //\u6709\u591a\u4e2a\u547d\u4e2d\u5143\u7d20\u65f6\uff0c\u8fd4\u56de\u79e9\u6700\u5927\u8005\uff1b\u67e5\u627e\u5931\u8d25\u65f6\uff0c\u80fd\u591f\u8fd4\u56de\u5931\u8d25\u7684\u4f4d\u7f6e","title":"\u4e8c\u5206\u67e5\u627e"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/info/#_5","text":"// \u5148\u5e8f\u904d\u5386 //\u4ece\u5f53\u524d\u8282\u70b9\u51fa\u53d1\uff0c\u6cbf\u5de6\u5206\u652f\u4e0d\u65ad\u6df1\u5165\uff0c\u76f4\u81f3\u6ca1\u6709\u5de6\u5206\u652f\u7684\u8282\u70b9\uff1b\u6cbf\u9014\u8282\u70b9\u9047\u5230\u540e\u7acb\u5373\u8bbf\u95ee template <typename T, typename VST> //\u5143\u7d20\u7c7b\u578b\u3001\u64cd\u4f5c\u5668 static void visitAlongVine ( BinNodePosi<T> x, VST& visit, Stack<BinNodePosi<T>>& S ) { while ( x ) { visit ( x->data ); //\u8bbf\u95ee\u5f53\u524d\u8282\u70b9 S.push ( x->rc ); //\u53f3\u5b69\u5b50\u5165\u6808\u6682\u5b58\uff08\u53ef\u4f18\u5316\uff1a\u901a\u8fc7\u5224\u65ad\uff0c\u907f\u514d\u7a7a\u7684\u53f3\u5b69\u5b50\u5165\u6808\uff09 x = x->lc; //\u6cbf\u5de6\u5206\u652f\u6df1\u5165\u4e00\u5c42 } } template <typename T, typename VST> //\u5143\u7d20\u7c7b\u578b\u3001\u64cd\u4f5c\u5668 void travPre_I2 ( BinNodePosi<T> x, VST& visit ) { //\u4e8c\u53c9\u6811\u5148\u5e8f\u904d\u5386\u7b97\u6cd5\uff08\u8fed\u4ee3\u7248#2\uff09 Stack<BinNodePosi<T>> S; //\u8f85\u52a9\u6808 while ( true ) { visitAlongVine ( x, visit, S ); //\u4ece\u5f53\u524d\u8282\u70b9\u51fa\u53d1\uff0c\u9010\u6279\u8bbf\u95ee if ( S.empty() ) break; //\u76f4\u5230\u6808\u7a7a x = S.pop(); //\u5f39\u51fa\u4e0b\u4e00\u6279\u7684\u8d77\u70b9 } } // \u4e2d\u5e8f\u904d\u5386 template <typename T> BinNodePosi<T> BinNode<T>::succ() { //\u5b9a\u4f4d\u8282\u70b9v\u7684\u76f4\u63a5\u540e\u7ee7 BinNodePosi<T> s = this; //\u8bb0\u5f55\u540e\u7ee7\u7684\u4e34\u65f6\u53d8\u91cf if ( rc ) { //\u82e5\u6709\u53f3\u5b69\u5b50\uff0c\u5219\u76f4\u63a5\u540e\u7ee7\u5fc5\u5728\u53f3\u5b50\u6811\u4e2d\uff0c\u5177\u4f53\u5730\u5c31\u662f s = rc; //\u53f3\u5b50\u6811\u4e2d while ( HasLChild ( *s ) ) s = s->lc; //\u6700\u9760\u5de6\uff08\u6700\u5c0f\uff09\u7684\u8282\u70b9 } else { //\u5426\u5219\uff0c\u76f4\u63a5\u540e\u7ee7\u5e94\u662f\u201c\u5c06\u5f53\u524d\u8282\u70b9\u5305\u542b\u4e8e\u5176\u5de6\u5b50\u6811\u4e2d\u7684\u6700\u4f4e\u7956\u5148\u201d\uff0c\u5177\u4f53\u5730\u5c31\u662f while ( IsRChild ( *s ) ) s = s->parent; //\u9006\u5411\u5730\u6cbf\u53f3\u5411\u5206\u652f\uff0c\u4e0d\u65ad\u671d\u5de6\u4e0a\u65b9\u79fb\u52a8 s = s->parent; //\u6700\u540e\u518d\u671d\u53f3\u4e0a\u65b9\u79fb\u52a8\u4e00\u6b65\uff0c\u5373\u62b5\u8fbe\u76f4\u63a5\u540e\u7ee7\uff08\u5982\u679c\u5b58\u5728\uff09 } return s; } template <typename T, typename VST> void travIn ( BinNodePosi<T> x, VST& visit ) { while ( HasLChild ( *x ) ) x = x->lc; while ( x ) { visit ( x->data ); x = x->succ(); } return; } // \u540e\u5e8f\u904d\u5386 template <typename T> //\u5728\u4ee5S\u6808\u9876\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u627e\u5230\u6700\u9ad8\u5de6\u4fa7\u53ef\u89c1\u53f6\u8282\u70b9 static void gotoLeftmostLeaf ( Stack<BinNodePosi<T>>& S ) { //\u6cbf\u9014\u6240\u9047\u8282\u70b9\u4f9d\u6b21\u5165\u6808 while ( BinNodePosi<T> x = S.top() ) //\u81ea\u9876\u800c\u4e0b\uff0c\u53cd\u590d\u68c0\u67e5\u5f53\u524d\u8282\u70b9\uff08\u5373\u6808\u9876\uff09 if ( HasLChild ( *x ) ) { //\u5c3d\u53ef\u80fd\u5411\u5de6 if ( HasRChild ( *x ) ) S.push ( x->rc ); //\u82e5\u6709\u53f3\u5b69\u5b50\uff0c\u4f18\u5148\u5165\u6808 S.push ( x->lc ); //\u7136\u540e\u624d\u8f6c\u81f3\u5de6\u5b69\u5b50 } else //\u5b9e\u4e0d\u5f97\u5df2 S.push ( x->rc ); //\u624d\u5411\u53f3 S.pop(); //\u8fd4\u56de\u4e4b\u524d\uff0c\u5f39\u51fa\u6808\u9876\u7684\u7a7a\u8282\u70b9 } template <typename T, typename VST> void travPost_I ( BinNodePosi<T> x, VST& visit ) { //\u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386\uff08\u8fed\u4ee3\u7248\uff09 Stack<BinNodePosi<T>> S; //\u8f85\u52a9\u6808 if ( x ) S.push ( x ); //\u6839\u8282\u70b9\u5165\u6808 while ( !S.empty() ) { //x\u59cb\u7ec8\u4e3a\u5f53\u524d\u8282\u70b9 if ( S.top() != x->parent ) ////\u82e5\u6808\u9876\u975ex\u4e4b\u7236\uff08\u800c\u4e3a\u53f3\u5144\uff09 gotoLeftmostLeaf ( S ); //\u5219\u5728\u5176\u53f3\u5144\u5b50\u6811\u4e2d\u627e\u5230HLVFL\uff08\u76f8\u5f53\u4e8e\u9012\u5f52\u6df1\u5165\uff09 x = S.pop(); visit ( x->data ); //\u5f39\u51fa\u6808\u9876\uff08\u5373\u524d\u4e00\u8282\u70b9\u4e4b\u540e\u7ee7\uff09\uff0c\u5e76\u8bbf\u95ee\u4e4b } }","title":"\u8fed\u4ee3\u7248\u4e8c\u53c9\u6811\u904d\u5386"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/info/#_6","text":"// \u904d\u5386 template <typename Tv, typename Te> template <typename PU> //\u4f18\u5148\u7ea7\u641c\u7d22\uff08\u5168\u56fe\uff09 void Graph<Tv, Te>::pfs ( int s, PU prioUpdater ) { //assert: 0 <= s < n reset(); int v = s; //\u521d\u59cb\u5316 do //\u9010\u4e00\u68c0\u67e5\u6240\u6709\u9876\u70b9 if ( UNDISCOVERED == status ( v ) ) //\u4e00\u65e6\u9047\u5230\u5c1a\u672a\u53d1\u73b0\u7684\u9876\u70b9 PFS ( v, prioUpdater ); //\u5373\u4ece\u8be5\u9876\u70b9\u51fa\u53d1\u542f\u52a8\u4e00\u6b21PFS while ( s != ( v = ( ++v % n ) ) ); //\u6309\u5e8f\u53f7\u68c0\u67e5\uff0c\u6545\u4e0d\u6f0f\u4e0d\u91cd } template <typename Tv, typename Te> template <typename PU> //\u9876\u70b9\u7c7b\u578b\u3001\u8fb9\u7c7b\u578b\u3001\u4f18\u5148\u7ea7\u66f4\u65b0\u5668 void Graph<Tv, Te>::PFS ( int s, PU prioUpdater ) { //\u4f18\u5148\u7ea7\u641c\u7d22\uff08\u5355\u4e2a\u8fde\u901a\u57df\uff09 priority ( s ) = 0; status ( s ) = VISITED; parent ( s ) = -1; //\u521d\u59cb\u5316\uff0c\u8d77\u70b9s\u52a0\u81f3PFS\u6811\u4e2d while ( 1 ) { //\u5c06\u4e0b\u4e00\u9876\u70b9\u548c\u8fb9\u52a0\u81f3PFS\u6811\u4e2d for ( int w = firstNbr ( s ); -1 < w; w = nextNbr ( s, w ) ) //\u679a\u4e3es\u7684\u6240\u6709\u90bb\u5c45w prioUpdater ( this, s, w ); //\u66f4\u65b0\u9876\u70b9w\u7684\u4f18\u5148\u7ea7\u53ca\u5176\u7236\u9876\u70b9 for ( int shortest = INT32_MAX, w = 0; w < n; w++ ) if ( UNDISCOVERED == status ( w ) ) //\u4ece\u5c1a\u672a\u52a0\u5165\u904d\u5386\u6811\u7684\u9876\u70b9\u4e2d if ( shortest > priority ( w ) ) //\u9009\u51fa\u4e0b\u4e00\u4e2a { shortest = priority ( w ); s = w; } //\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u9876\u70b9s if ( VISITED == status ( s ) ) break; //\u76f4\u81f3\u6240\u6709\u9876\u70b9\u5747\u5df2\u52a0\u5165 status ( s ) = VISITED; type ( parent ( s ), s ) = TREE; //\u5c06s\u53ca\u4e0e\u5176\u7236\u7684\u8054\u8fb9\u52a0\u5165\u904d\u5386\u6811 } } //\u901a\u8fc7\u5b9a\u4e49\u5177\u4f53\u7684\u4f18\u5148\u7ea7\u66f4\u65b0\u7b56\u7565prioUpdater\uff0c\u5373\u53ef\u5b9e\u73b0\u4e0d\u540c\u7684\u7b97\u6cd5\u529f\u80fd template <typename Tv, typename Te> struct DfsPU { //\u9488\u5bf9DFS\u7b97\u6cd5\u7684\u9876\u70b9\u4f18\u5148\u7ea7\u66f4\u65b0\u5668 virtual void operator() ( Graph<Tv, Te>* g, int uk, int v ) { if ( g->status ( v ) == UNDISCOVERED ) //\u5bf9\u4e8euk\u6bcf\u4e00\u5c1a\u672a\u88ab\u53d1\u73b0\u7684\u90bb\u63a5\u9876\u70b9v if ( g->priority ( v ) > g->priority ( uk ) - 1 ) { //\u5c06\u5176\u5230\u8d77\u70b9\u8ddd\u79bb\u7684\u8d1f\u6570\u4f5c\u4e3a\u4f18\u5148\u7ea7\u6570 g->priority ( v ) = g->priority ( uk ) - 1; //\u66f4\u65b0\u4f18\u5148\u7ea7\uff08\u6570\uff09 g->parent ( v ) = uk; //\u66f4\u65b0\u7236\u8282\u70b9 return; //\u6ce8\u610f\uff1a\u4e0eBfsPU()\u4e0d\u540c\uff0c\u8fd9\u91cc\u53ea\u8981\u6709\u4e00\u4e2a\u90bb\u63a5\u9876\u70b9\u53ef\u66f4\u65b0\uff0c\u5373\u53ef\u7acb\u5373\u8fd4\u56de } //\u5982\u6b64\u6548\u679c\u7b49\u540c\u4e8e\uff0c\u540e\u88ab\u53d1\u73b0\u8005\u4f18\u5148 } }; // BFS \u7b49\u6548\u4e8e\u6743\u503c\u4e3a1\u7684dijkstra template <typename Tv, typename Te> struct DijkPU { //\u9488\u5bf9Dijkstra\u7b97\u6cd5\u7684\u9876\u70b9\u4f18\u5148\u7ea7\u66f4\u65b0\u5668 virtual void operator() ( Graph<Tv, Te>* g, int uk, int v ) { if ( UNDISCOVERED == g->status ( v ) ) //\u5bf9\u4e8euk\u6bcf\u4e00\u5c1a\u672a\u88ab\u53d1\u73b0\u7684\u90bb\u63a5\u9876\u70b9v\uff0c\u6309Dijkstra\u7b56\u7565 if ( g->priority ( v ) > g->priority ( uk ) + g->weight ( uk, v ) ) { //\u505a\u677e\u5f1b g->priority ( v ) = g->priority ( uk ) + g->weight ( uk, v ); //\u66f4\u65b0\u4f18\u5148\u7ea7\uff08\u6570\uff09 g->parent ( v ) = uk; //\u5e76\u540c\u65f6\u66f4\u65b0\u7236\u8282\u70b9 } } }; template <typename Tv, typename Te> struct PrimPU { //\u9488\u5bf9Prim\u7b97\u6cd5\u7684\u9876\u70b9\u4f18\u5148\u7ea7\u66f4\u65b0\u5668 virtual void operator() ( Graph<Tv, Te>* g, int uk, int v ) { if ( UNDISCOVERED == g->status ( v ) ) //\u5bf9\u4e8euk\u6bcf\u4e00\u5c1a\u672a\u88ab\u53d1\u73b0\u7684\u90bb\u63a5\u9876\u70b9v if ( g->priority ( v ) > g->weight ( uk, v ) ) { //\u6309Prim\u7b56\u7565\u505a\u677e\u5f1b g->priority ( v ) = g->weight ( uk, v ); //\u66f4\u65b0\u4f18\u5148\u7ea7\uff08\u6570\uff09 g->parent ( v ) = uk; //\u66f4\u65b0\u7236\u8282\u70b9 } } };","title":"\u56fe\u7684\u904d\u5386"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/info/#_7","text":"\u540c\u4e00\u5206\u652f\u4e2d dtime[v] \u8d8a\u5c0f\u610f\u5473\u7740\u8d8a\u9ad8\uff0c\u4e14\u6bcf\u4e2a\u8282\u70b9\u53ea\u6709\u552f\u4e00\u7684 dtime[v] \u6545\u4f7f\u7528 dtime[v] \u66f4\u65b0 hca[v] \u3002 template <typename Tv, typename Te> void Graph<Tv, Te>::bcc ( int s ) { //\u57fa\u4e8eDFS\u7684BCC\u5206\u89e3\u7b97\u6cd5 reset(); int clock = 0; int v = s; Stack<int> S; //\u6808S\u7528\u4ee5\u8bb0\u5f55\u5df2\u8bbf\u95ee\u7684\u9876\u70b9 do if ( UNDISCOVERED == status ( v ) ) { //\u4e00\u65e6\u53d1\u73b0\u672a\u53d1\u73b0\u7684\u9876\u70b9\uff08\u65b0\u8fde\u901a\u5206\u91cf\uff09 BCC ( v, clock, S ); //\u5373\u4ece\u8be5\u9876\u70b9\u51fa\u53d1\u542f\u52a8\u4e00\u6b21BCC S.pop(); //\u904d\u5386\u8fd4\u56de\u540e\uff0c\u5f39\u51fa\u6808\u4e2d\u6700\u540e\u4e00\u4e2a\u9876\u70b9\u2014\u2014\u5f53\u524d\u8fde\u901a\u57df\u7684\u8d77\u70b9 } while ( s != ( v = ( ++v % n ) ) ); } #define hca(x) (fTime(x)) //\u5229\u7528\u6b64\u5904\u95f2\u7f6e\u7684fTime[]\u5145\u5f53hca[] template <typename Tv, typename Te> //\u9876\u70b9\u7c7b\u578b\u3001\u8fb9\u7c7b\u578b void Graph<Tv, Te>::BCC ( int v, int& clock, Stack<int>& S ) { //assert: 0 <= v < n hca ( v ) = dTime ( v ) = ++clock; status ( v ) = DISCOVERED; S.push ( v ); //v\u88ab\u53d1\u73b0\u5e76\u5165\u6808 for ( int u = firstNbr ( v ); -1 < u; u = nextNbr ( v, u ) ) //\u679a\u4e3ev\u7684\u6240\u6709\u90bb\u5c45u switch ( status ( u ) ) { //\u5e76\u89c6u\u7684\u72b6\u6001\u5206\u522b\u5904\u7406 case UNDISCOVERED: parent ( u ) = v; type ( v, u ) = TREE; BCC ( u, clock, S ); //\u4ece\u9876\u70b9u\u5904\u6df1\u5165 if ( hca ( u ) < dTime ( v ) ) //\u904d\u5386\u8fd4\u56de\u540e\uff0c\u82e5\u53d1\u73b0u\uff08\u901a\u8fc7\u540e\u5411\u8fb9\uff09\u53ef\u6307\u5411v\u7684\u771f\u7956\u5148 hca ( v ) = min ( hca ( v ), hca ( u ) ); //\u5219v\u4ea6\u5fc5\u5982\u6b64 else //\u5426\u5219\uff0c\u4ee5v\u4e3a\u5173\u8282\u70b9\uff08u\u4ee5\u4e0b\u5373\u662f\u4e00\u4e2aBCC\uff0c\u4e14\u5176\u4e2d\u9876\u70b9\u6b64\u65f6\u6b63\u96c6\u4e2d\u4e8e\u6808S\u7684\u9876\u90e8\uff09 /*DSA*/{ /*DSA*/printf ( \"BCC rooted at %c:\", vertex ( v ) ); /*DSA*/Stack<int> temp; do { temp.push ( S.pop() ); print ( vertex ( temp.top() ) ); } while ( u != temp.top() ); print( vertex ( parent(u) ) ); while ( !temp.empty() ) S.push ( temp.pop() ); while ( u != S.pop() ); //\u5f39\u51fa\u5f53\u524dBCC\u4e2d\uff08\u9664v\u5916\uff09\u7684\u6240\u6709\u8282\u70b9\uff0c\u53ef\u89c6\u9700\u8981\u505a\u8fdb\u4e00\u6b65\u5904\u7406 /*DSA*/printf ( \"\\n\" ); /*DSA*/} break; case DISCOVERED: type ( v, u ) = BACKWARD; //\u6807\u8bb0(v, u)\uff0c\u5e76\u6309\u7167\u201c\u8d8a\u5c0f\u8d8a\u9ad8\u201d\u7684\u51c6\u5219 if ( u != parent ( v ) ) hca ( v ) = min ( hca ( v ), dTime ( u ) ); //\u66f4\u65b0hca[v] break; default: //VISITED (digraphs only) type ( v, u ) = ( dTime ( v ) < dTime ( u ) ) ? FORWARD : CROSS; break; } status ( v ) = VISITED; //\u5bf9v\u7684\u8bbf\u95ee\u7ed3\u675f }","title":"\u56fe\u7684\u53cc\u8fde\u901a\u57df\u5206\u89e3"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/info/#bst","text":"\u8282\u70b9\u5220\u9664 template <typename T> static BinNodePosi<T> removeAt ( BinNodePosi<T> & x, BinNodePosi<T> & hot ) { BinNodePosi<T> w = x; //\u5b9e\u9645\u88ab\u6458\u9664\u7684\u8282\u70b9\uff0c\u521d\u503c\u540cx BinNodePosi<T> succ = NULL; //\u5b9e\u9645\u88ab\u5220\u9664\u8282\u70b9\u7684\u63a5\u66ff\u8005 if ( !HasLChild ( *x ) ) //\u82e5*x\u7684\u5de6\u5b50\u6811\u4e3a\u7a7a\uff0c\u5219\u53ef succ = x = x->rc; //\u76f4\u63a5\u5c06*x\u66ff\u6362\u4e3a\u5176\u53f3\u5b50\u6811 else if ( !HasRChild ( *x ) ) //\u82e5\u53f3\u5b50\u6811\u4e3a\u7a7a\uff0c\u5219\u53ef succ = x = x->lc; //\u5bf9\u79f0\u5730\u5904\u7406\u2014\u2014\u6ce8\u610f\uff1a\u6b64\u65f6succ != NULL else { //\u82e5\u5de6\u53f3\u5b50\u6811\u5747\u5b58\u5728\uff0c\u5219\u9009\u62e9x\u7684\u76f4\u63a5\u540e\u7ee7\u4f5c\u4e3a\u5b9e\u9645\u88ab\u6458\u9664\u8282\u70b9\uff0c\u4e3a\u6b64\u9700\u8981 w = w->succ(); //\uff08\u5728\u53f3\u5b50\u6811\u4e2d\uff09\u627e\u5230*x\u7684\u76f4\u63a5\u540e\u7ee7*w swap ( x->data, w->data ); //\u4ea4\u6362*x\u548c*w\u7684\u6570\u636e\u5143\u7d20 BinNodePosi<T> u = w->parent; ( ( u == x ) ? u->rc : u->lc ) = succ = w->rc; //\u9694\u79bb\u8282\u70b9*w } hot = w->parent; //\u8bb0\u5f55\u5b9e\u9645\u88ab\u5220\u9664\u8282\u70b9\u7684\u7236\u4eb2 if ( succ ) succ->parent = hot; //\u5e76\u5c06\u88ab\u5220\u9664\u8282\u70b9\u7684\u63a5\u66ff\u8005\u4e0ehot\u76f8\u8054 release ( w->data ); release ( w ); return succ; //\u91ca\u653e\u88ab\u6458\u9664\u8282\u70b9\uff0c\u8fd4\u56de\u63a5\u66ff\u8005 } \u57fa\u4e8e\u201c3+4\u201d\u91cd\u6784\u7684\u91cd\u5e73\u8861 template <typename T> BinNodePosi<T> BST<T>::rotateAt ( BinNodePosi<T> v ) { //v\u4e3a\u975e\u7a7a\u5b59\u8f88\u8282\u70b9 /*DSA*/if ( !v ) { printf ( \"\\a\\nFail to rotate a null node\\n\" ); exit ( -1 ); } BinNodePosi<T> p = v->parent; BinNodePosi<T> g = p->parent; //\u89c6v\u3001p\u548cg\u76f8\u5bf9\u4f4d\u7f6e\u5206\u56db\u79cd\u60c5\u51b5 if ( IsLChild ( *p ) ) /* zig */ if ( IsLChild ( *v ) ) { /* zig-zig */ //*DSA*/printf(\"\\tzIg-zIg: \"); p->parent = g->parent; //\u5411\u4e0a\u8054\u63a5 return connect34 ( v, p, g, v->lc, v->rc, p->rc, g->rc ); } else { /* zig-zag */ //*DSA*/printf(\"\\tzIg-zAg: \"); v->parent = g->parent; //\u5411\u4e0a\u8054\u63a5 return connect34 ( p, v, g, p->lc, v->lc, v->rc, g->rc ); } else /* zag */ if ( IsRChild ( *v ) ) { /* zag-zag */ //*DSA*/printf(\"\\tzAg-zAg: \"); p->parent = g->parent; //\u5411\u4e0a\u8054\u63a5 return connect34 ( g, p, v, g->lc, p->lc, v->lc, v->rc ); } else { /* zag-zig */ //*DSA*/printf(\"\\tzAg-zIg: \"); v->parent = g->parent; //\u5411\u4e0a\u8054\u63a5 return connect34 ( g, v, p, g->lc, v->lc, v->rc, p->rc ); } }","title":"BST"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/info/#splay-tree","text":"\u53cc\u5c42\u4f38\u5c55 template <typename NodePosi> inline //\u5728\u8282\u70b9*p\u4e0e*lc\uff08\u53ef\u80fd\u4e3a\u7a7a\uff09\u4e4b\u95f4\u5efa\u7acb\u7236\uff08\u5de6\uff09\u5b50\u5173\u7cfb void attachAsLC ( NodePosi lc, NodePosi p ) { p->lc = lc; if ( lc ) lc->parent = p; } template <typename NodePosi> inline //\u5728\u8282\u70b9*p\u4e0e*rc\uff08\u53ef\u80fd\u4e3a\u7a7a\uff09\u4e4b\u95f4\u5efa\u7acb\u7236\uff08\u53f3\uff09\u5b50\u5173\u7cfb void attachAsRC ( NodePosi p, NodePosi rc ) { p->rc = rc; if ( rc ) rc->parent = p; } template <typename T> //Splay\u6811\u4f38\u5c55\u7b97\u6cd5\uff1a\u4ece\u8282\u70b9v\u51fa\u53d1\u9010\u5c42\u4f38\u5c55 BinNodePosi<T> Splay<T>::splay ( BinNodePosi<T> v ) { //v\u4e3a\u56e0\u6700\u8fd1\u8bbf\u95ee\u800c\u9700\u4f38\u5c55\u7684\u8282\u70b9\u4f4d\u7f6e if ( !v ) return NULL; BinNodePosi<T> p; BinNodePosi<T> g; //*v\u7684\u7236\u4eb2\u4e0e\u7956\u7236 while ( ( p = v->parent ) && ( g = p->parent ) ) { //\u81ea\u4e0b\u800c\u4e0a\uff0c\u53cd\u590d\u5bf9*v\u505a\u53cc\u5c42\u4f38\u5c55 BinNodePosi<T> gg = g->parent; //\u6bcf\u8f6e\u4e4b\u540e*v\u90fd\u4ee5\u539f\u66fe\u7956\u7236\uff08great-grand parent\uff09\u4e3a\u7236 if ( IsLChild ( *v ) ) if ( IsLChild ( *p ) ) { //zig-zig /*DSA*/printf ( \"\\tzIg-zIg :\" ); print ( g ); print ( p ); print ( v ); printf ( \"\\n\" ); attachAsLC ( p->rc, g ); attachAsLC ( v->rc, p ); attachAsRC ( p, g ); attachAsRC ( v, p ); } else { //zig-zag /*DSA*/printf ( \"\\tzIg-zAg :\" ); print ( g ); print ( p ); print ( v ); printf ( \"\\n\" ); attachAsLC ( v->rc, p ); attachAsRC ( g, v->lc ); attachAsLC ( g, v ); attachAsRC ( v, p ); } else if ( IsRChild ( *p ) ) { //zag-zag /*DSA*/printf ( \"\\tzAg-zAg :\" ); print ( g ); print ( p ); print ( v ); printf ( \"\\n\" ); attachAsRC ( g, p->lc ); attachAsRC ( p, v->lc ); attachAsLC ( g, p ); attachAsLC ( p, v ); } else { //zag-zig /*DSA*/printf ( \"\\tzAg-zIg :\" ); print ( g ); print ( p ); print ( v ); printf ( \"\\n\" ); attachAsRC ( p, v->lc ); attachAsLC ( v->rc, g ); attachAsRC ( v, g ); attachAsLC ( p, v ); } if ( !gg ) v->parent = NULL; //\u82e5*v\u539f\u5148\u7684\u66fe\u7956\u7236*gg\u4e0d\u5b58\u5728\uff0c\u5219*v\u73b0\u5728\u5e94\u4e3a\u6811\u6839 else //\u5426\u5219\uff0c*gg\u6b64\u540e\u5e94\u8be5\u4ee5*v\u4f5c\u4e3a\u5de6\u6216\u53f3\u5b69\u5b50 ( g == gg->lc ) ? attachAsLC ( v, gg ) : attachAsRC ( gg, v ); updateHeight ( g ); updateHeight ( p ); updateHeight ( v ); } //\u53cc\u5c42\u4f38\u5c55\u7ed3\u675f\u65f6\uff0c\u5fc5\u6709g == NULL\uff0c\u4f46p\u53ef\u80fd\u975e\u7a7a if ( p = v->parent ) { //\u82e5p\u679c\u771f\u975e\u7a7a\uff0c\u5219\u989d\u5916\u518d\u505a\u4e00\u6b21\u5355\u65cb /*DSA*/if ( IsLChild ( *v ) ) { printf ( \"\\tzIg :\" ); print ( p ); print ( v ); printf ( \"\\n\" ); } /*DSA*/else { printf ( \"\\tzAg :\" ); print ( p ); print ( v ); printf ( \"\\n\" ); } if ( IsLChild ( *v ) ) { attachAsLC ( v->rc, p ); attachAsRC ( v, p ); } else { attachAsRC ( p, v->lc ); attachAsLC ( p, v ); } updateHeight ( p ); updateHeight ( v ); } v->parent = NULL; return v; } //\u8c03\u6574\u4e4b\u540e\u65b0\u6811\u6839\u5e94\u4e3a\u88ab\u4f38\u5c55\u7684\u8282\u70b9\uff0c\u6545\u8fd4\u56de\u8be5\u8282\u70b9\u7684\u4f4d\u7f6e\u4ee5\u4fbf\u4e0a\u5c42\u51fd\u6570\u66f4\u65b0\u6811\u6839","title":"splay tree"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/info/#b-","text":"\u4e0a\u6ea2 template <typename T> //\u5173\u952e\u7801\u63d2\u5165\u540e\u82e5\u8282\u70b9\u4e0a\u6ea2\uff0c\u5219\u505a\u8282\u70b9\u5206\u88c2\u5904\u7406 void BTree<T>::solveOverflow ( BTNodePosi<T> v ) { if ( _order >= v->child.size() ) return; //\u9012\u5f52\u57fa\uff1a\u5f53\u524d\u8282\u70b9\u5e76\u672a\u4e0a\u6ea2 Rank s = _order / 2; //\u8f74\u70b9\uff08\u6b64\u65f6\u5e94\u6709_order = key.size() = child.size() - 1\uff09 BTNodePosi<T> u = new BTNode<T>(); //\u6ce8\u610f\uff1a\u65b0\u8282\u70b9\u5df2\u6709\u4e00\u4e2a\u7a7a\u5b69\u5b50 for ( Rank j = 0; j < _order - s - 1; j++ ) { //v\u53f3\u4fa7_order-s-1\u4e2a\u5b69\u5b50\u53ca\u5173\u952e\u7801\u5206\u88c2\u4e3a\u53f3\u4fa7\u8282\u70b9u u->child.insert ( j, v->child.remove ( s + 1 ) ); //\u9010\u4e2a\u79fb\u52a8\u6548\u7387\u4f4e u->key.insert ( j, v->key.remove ( s + 1 ) ); //\u6b64\u7b56\u7565\u53ef\u6539\u8fdb } u->child[_order - s - 1] = v->child.remove ( s + 1 ); //\u79fb\u52a8v\u6700\u9760\u53f3\u7684\u5b69\u5b50 if ( u->child[0] ) //\u82e5u\u7684\u5b69\u5b50\u4eec\u975e\u7a7a\uff0c\u5219 for ( Rank j = 0; j < _order - s; j++ ) //\u4ee4\u5b83\u4eec\u7684\u7236\u8282\u70b9\u7edf\u4e00 u->child[j]->parent = u; //\u6307\u5411u BTNodePosi<T> p = v->parent; //v\u5f53\u524d\u7684\u7236\u8282\u70b9p if ( !p ) { _root = p = new BTNode<T>(); p->child[0] = v; v->parent = p; } //\u82e5p\u7a7a\u5219\u521b\u5efa\u4e4b Rank r = 1 + p->key.search ( v->key[0] ); //p\u4e2d\u6307\u5411v\u7684\u6307\u9488\u7684\u79e9 p->key.insert ( r, v->key.remove ( s ) ); //\u8f74\u70b9\u5173\u952e\u7801\u4e0a\u5347 p->child.insert ( r + 1, u ); u->parent = p; //\u65b0\u8282\u70b9u\u4e0e\u7236\u8282\u70b9p\u4e92\u8054 solveOverflow ( p ); //\u4e0a\u5347\u4e00\u5c42\uff0c\u5982\u6709\u5fc5\u8981\u5219\u7ee7\u7eed\u5206\u88c2\u2014\u2014\u81f3\u591a\u9012\u5f52O(logn)\u5c42 } \u4e0b\u6ea2 template <typename T> //\u5173\u952e\u7801\u5220\u9664\u540e\u82e5\u8282\u70b9\u4e0b\u6ea2\uff0c\u5219\u505a\u8282\u70b9\u65cb\u8f6c\u6216\u5408\u5e76\u5904\u7406 void BTree<T>::solveUnderflow ( BTNodePosi<T> v ) { if ( ( _order + 1 ) / 2 <= v->child.size() ) return; //\u9012\u5f52\u57fa\uff1a\u5f53\u524d\u8282\u70b9\u5e76\u672a\u4e0b\u6ea2 BTNodePosi<T> p = v->parent; if ( !p ) { //\u9012\u5f52\u57fa\uff1a\u5df2\u5230\u6839\u8282\u70b9\uff0c\u6ca1\u6709\u5b69\u5b50\u7684\u4e0b\u9650 if ( !v->key.size() && v->child[0] ) { //\u4f46\u5018\u82e5\u4f5c\u4e3a\u6811\u6839\u7684v\u5df2\u4e0d\u542b\u5173\u952e\u7801\uff0c\u5374\u6709\uff08\u552f\u4e00\u7684\uff09\u975e\u7a7a\u5b69\u5b50\uff0c\u5219 /*DSA*/printf ( \"collapse\\n\" ); _root = v->child[0]; _root->parent = NULL; //\u8fd9\u4e2a\u8282\u70b9\u53ef\u88ab\u8df3\u8fc7 v->child[0] = NULL; release ( v ); //\u5e76\u56e0\u4e0d\u518d\u6709\u7528\u800c\u88ab\u9500\u6bc1 } //\u6574\u6811\u9ad8\u5ea6\u964d\u4f4e\u4e00\u5c42 return; } Rank r = 0; while ( p->child[r] != v ) r++; //\u786e\u5b9av\u662fp\u7684\u7b2cr\u4e2a\u5b69\u5b50\u2014\u2014\u6b64\u65f6v\u53ef\u80fd\u4e0d\u542b\u5173\u952e\u7801\uff0c\u6545\u4e0d\u80fd\u901a\u8fc7\u5173\u952e\u7801\u67e5\u627e //\u53e6\u5916\uff0c\u5728\u5b9e\u73b0\u4e86\u5b69\u5b50\u6307\u9488\u7684\u5224\u7b49\u5668\u4e4b\u540e\uff0c\u4e5f\u53ef\u76f4\u63a5\u8c03\u7528Vector::find()\u5b9a\u4f4d /*DSA*/printf ( \"\\nrank = %d\", r ); // \u60c5\u51b51\uff1a\u5411\u5de6\u5144\u5f1f\u501f\u5173\u952e\u7801 if ( 0 < r ) { //\u82e5v\u4e0d\u662fp\u7684\u7b2c\u4e00\u4e2a\u5b69\u5b50\uff0c\u5219 BTNodePosi<T> ls = p->child[r - 1]; //\u5de6\u5144\u5f1f\u5fc5\u5b58\u5728 if ( ( _order + 1 ) / 2 < ls->child.size() ) { //\u82e5\u8be5\u5144\u5f1f\u8db3\u591f\u201c\u80d6\u201d\uff0c\u5219 /*DSA*/printf ( \" ... case 1\\n\" ); v->key.insert ( 0, p->key[r - 1] ); //p\u501f\u51fa\u4e00\u4e2a\u5173\u952e\u7801\u7ed9v\uff08\u4f5c\u4e3a\u6700\u5c0f\u5173\u952e\u7801\uff09 p->key[r - 1] = ls->key.remove ( ls->key.size() - 1 ); //ls\u7684\u6700\u5927\u5173\u952e\u7801\u8f6c\u5165p v->child.insert ( 0, ls->child.remove ( ls->child.size() - 1 ) ); //\u540c\u65f6ls\u7684\u6700\u53f3\u4fa7\u5b69\u5b50\u8fc7\u7ee7\u7ed9v if ( v->child[0] ) v->child[0]->parent = v; //\u4f5c\u4e3av\u7684\u6700\u5de6\u4fa7\u5b69\u5b50 return; //\u81f3\u6b64\uff0c\u901a\u8fc7\u53f3\u65cb\u5df2\u5b8c\u6210\u5f53\u524d\u5c42\uff08\u4ee5\u53ca\u6240\u6709\u5c42\uff09\u7684\u4e0b\u6ea2\u5904\u7406 } } //\u81f3\u6b64\uff0c\u5de6\u5144\u5f1f\u8981\u4e48\u4e3a\u7a7a\uff0c\u8981\u4e48\u592a\u201c\u7626\u201d // \u60c5\u51b52\uff1a\u5411\u53f3\u5144\u5f1f\u501f\u5173\u952e\u7801 if ( p->child.size() - 1 > r ) { //\u82e5v\u4e0d\u662fp\u7684\u6700\u540e\u4e00\u4e2a\u5b69\u5b50\uff0c\u5219 BTNodePosi<T> rs = p->child[r + 1]; //\u53f3\u5144\u5f1f\u5fc5\u5b58\u5728 if ( ( _order + 1 ) / 2 < rs->child.size() ) { //\u82e5\u8be5\u5144\u5f1f\u8db3\u591f\u201c\u80d6\u201d\uff0c\u5219 /*DSA*/printf ( \" ... case 2\\n\" ); v->key.insert ( v->key.size(), p->key[r] ); //p\u501f\u51fa\u4e00\u4e2a\u5173\u952e\u7801\u7ed9v\uff08\u4f5c\u4e3a\u6700\u5927\u5173\u952e\u7801\uff09 p->key[r] = rs->key.remove ( 0 ); //rs\u7684\u6700\u5c0f\u5173\u952e\u7801\u8f6c\u5165p v->child.insert ( v->child.size(), rs->child.remove ( 0 ) ); //\u540c\u65f6rs\u7684\u6700\u5de6\u4fa7\u5b69\u5b50\u8fc7\u7ee7\u7ed9v if ( v->child[v->child.size() - 1] ) //\u4f5c\u4e3av\u7684\u6700\u53f3\u4fa7\u5b69\u5b50 v->child[v->child.size() - 1]->parent = v; return; //\u81f3\u6b64\uff0c\u901a\u8fc7\u5de6\u65cb\u5df2\u5b8c\u6210\u5f53\u524d\u5c42\uff08\u4ee5\u53ca\u6240\u6709\u5c42\uff09\u7684\u4e0b\u6ea2\u5904\u7406 } } //\u81f3\u6b64\uff0c\u53f3\u5144\u5f1f\u8981\u4e48\u4e3a\u7a7a\uff0c\u8981\u4e48\u592a\u201c\u7626\u201d // \u60c5\u51b53\uff1a\u5de6\u3001\u53f3\u5144\u5f1f\u8981\u4e48\u4e3a\u7a7a\uff08\u4f46\u4e0d\u53ef\u80fd\u540c\u65f6\uff09\uff0c\u8981\u4e48\u90fd\u592a\u201c\u7626\u201d\u2014\u2014\u5408\u5e76 if ( 0 < r ) { //\u4e0e\u5de6\u5144\u5f1f\u5408\u5e76 /*DSA*/printf ( \" ... case 3L\\n\" ); BTNodePosi<T> ls = p->child[r - 1]; //\u5de6\u5144\u5f1f\u5fc5\u5b58\u5728 ls->key.insert ( ls->key.size(), p->key.remove ( r - 1 ) ); p->child.remove ( r ); //p\u7684\u7b2cr - 1\u4e2a\u5173\u952e\u7801\u8f6c\u5165ls\uff0cv\u4e0d\u518d\u662fp\u7684\u7b2cr\u4e2a\u5b69\u5b50 ls->child.insert ( ls->child.size(), v->child.remove ( 0 ) ); if ( ls->child[ls->child.size() - 1] ) //v\u7684\u6700\u5de6\u4fa7\u5b69\u5b50\u8fc7\u7ee7\u7ed9ls\u505a\u6700\u53f3\u4fa7\u5b69\u5b50 ls->child[ls->child.size() - 1]->parent = ls; while ( !v->key.empty() ) { //v\u5269\u4f59\u7684\u5173\u952e\u7801\u548c\u5b69\u5b50\uff0c\u4f9d\u6b21\u8f6c\u5165ls ls->key.insert ( ls->key.size(), v->key.remove ( 0 ) ); ls->child.insert ( ls->child.size(), v->child.remove ( 0 ) ); if ( ls->child[ls->child.size() - 1] ) ls->child[ls->child.size() - 1]->parent = ls; } release ( v ); //\u91ca\u653ev } else { //\u4e0e\u53f3\u5144\u5f1f\u5408\u5e76 /*DSA*/printf ( \" ... case 3R\\n\" ); BTNodePosi<T> rs = p->child[r + 1]; //\u53f3\u5144\u5f1f\u5fc5\u5b58\u5728 rs->key.insert ( 0, p->key.remove ( r ) ); p->child.remove ( r ); //p\u7684\u7b2cr\u4e2a\u5173\u952e\u7801\u8f6c\u5165rs\uff0cv\u4e0d\u518d\u662fp\u7684\u7b2cr\u4e2a\u5b69\u5b50 rs->child.insert ( 0, v->child.remove ( v->child.size() - 1 ) ); if ( rs->child[0] ) rs->child[0]->parent = rs; //v\u7684\u6700\u53f3\u4fa7\u5b69\u5b50\u8fc7\u7ee7\u7ed9rs\u505a\u6700\u5de6\u4fa7\u5b69\u5b50 while ( !v->key.empty() ) { //v\u5269\u4f59\u7684\u5173\u952e\u7801\u548c\u5b69\u5b50\uff0c\u4f9d\u6b21\u8f6c\u5165rs rs->key.insert ( 0, v->key.remove ( v->key.size() - 1 ) ); rs->child.insert ( 0, v->child.remove ( v->child.size() - 1 ) ); if ( rs->child[0] ) rs->child[0]->parent = rs; } release ( v ); //\u91ca\u653ev } solveUnderflow ( p ); //\u4e0a\u5347\u4e00\u5c42\uff0c\u5982\u6709\u5fc5\u8981\u5219\u7ee7\u7eed\u5206\u88c2\u2014\u2014\u81f3\u591a\u9012\u5f52O(logn)\u5c42 return; }","title":"B-\u6811"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/info/#_8","text":"\u63d2\u5165 /****************************************************************************************** * RedBlack\u53cc\u7ea2\u8c03\u6574\u7b97\u6cd5\uff1a\u89e3\u51b3\u8282\u70b9x\u4e0e\u5176\u7236\u5747\u4e3a\u7ea2\u8272\u7684\u95ee\u9898\u3002\u5206\u4e3a\u4e24\u5927\u7c7b\u60c5\u51b5\uff1a * RR-1\uff1a2\u6b21\u989c\u8272\u7ffb\u8f6c\uff0c2\u6b21\u9ed1\u9ad8\u5ea6\u66f4\u65b0\uff0c1~2\u6b21\u65cb\u8f6c\uff0c\u4e0d\u518d\u9012\u5f52 * RR-2\uff1a3\u6b21\u989c\u8272\u7ffb\u8f6c\uff0c3\u6b21\u9ed1\u9ad8\u5ea6\u66f4\u65b0\uff0c0\u6b21\u65cb\u8f6c\uff0c\u9700\u8981\u9012\u5f52 ******************************************************************************************/ template <typename T> void RedBlack<T>::solveDoubleRed ( BinNodePosi<T> x ) { //x\u5f53\u524d\u5fc5\u4e3a\u7ea2 if ( IsRoot ( *x ) ) //\u82e5\u5df2\uff08\u9012\u5f52\uff09\u8f6c\u81f3\u6811\u6839\uff0c\u5219\u5c06\u5176\u8f6c\u9ed1\uff0c\u6574\u6811\u9ed1\u9ad8\u5ea6\u4e5f\u968f\u4e4b\u9012\u589e { _root->color = RB_BLACK; _root->height++; return; } //\u5426\u5219\uff0cx\u7684\u7236\u4eb2p\u5fc5\u5b58\u5728 BinNodePosi<T> p = x->parent; if ( IsBlack ( p ) ) return; //\u82e5p\u4e3a\u9ed1\uff0c\u5219\u53ef\u7ec8\u6b62\u8c03\u6574\u3002\u5426\u5219 BinNodePosi<T> g = p->parent; //\u65e2\u7136p\u4e3a\u7ea2\uff0c\u5219x\u7684\u7956\u7236\u5fc5\u5b58\u5728\uff0c\u4e14\u5fc5\u4e3a\u9ed1\u8272 BinNodePosi<T> u = uncle ( x ); //\u4ee5\u4e0b\uff0c\u89c6x\u53d4\u7236u\u7684\u989c\u8272\u5206\u522b\u5904\u7406 if ( IsBlack ( u ) ) { //u\u4e3a\u9ed1\u8272\uff08\u542bNULL\uff09\u65f6 //*DSA*/printf(\" case RR-1:\\n\"); if ( IsLChild ( *x ) == IsLChild ( *p ) ) //\u82e5x\u4e0ep\u540c\u4fa7\uff08\u5373zIg-zIg\u6216zAg-zAg\uff09\uff0c\u5219 p->color = RB_BLACK; //p\u7531\u7ea2\u8f6c\u9ed1\uff0cx\u4fdd\u6301\u7ea2 else //\u82e5x\u4e0ep\u5f02\u4fa7\uff08\u5373zIg-zAg\u6216zAg-zIg\uff09\uff0c\u5219 x->color = RB_BLACK; //x\u7531\u7ea2\u8f6c\u9ed1\uff0cp\u4fdd\u6301\u7ea2 g->color = RB_RED; //g\u5fc5\u5b9a\u7531\u9ed1\u8f6c\u7ea2 ///// \u4ee5\u4e0a\u867d\u4fdd\u8bc1\u603b\u5171\u4e24\u6b21\u67d3\u8272\uff0c\u4f46\u56e0\u589e\u52a0\u4e86\u5224\u65ad\u800c\u5f97\u4e0d\u507f\u5931 ///// \u5728\u65cb\u8f6c\u540e\u5c06\u6839\u7f6e\u9ed1\u3001\u5b69\u5b50\u7f6e\u7ea2\uff0c\u867d\u9700\u4e09\u6b21\u67d3\u8272\u4f46\u6548\u7387\u66f4\u9ad8 BinNodePosi<T> gg = g->parent; //\u66fe\u7956\u7236\uff08great-grand parent\uff09 BinNodePosi<T> r = FromParentTo ( *g ) = rotateAt ( x ); //\u8c03\u6574\u540e\u7684\u5b50\u6811\u6839\u8282\u70b9 r->parent = gg; //\u4e0e\u539f\u66fe\u7956\u7236\u8054\u63a5 } else { //\u82e5u\u4e3a\u7ea2\u8272 //*DSA*/printf(\" case RR-2:\\n\"); p->color = RB_BLACK; p->height++; //p\u7531\u7ea2\u8f6c\u9ed1 u->color = RB_BLACK; u->height++; //u\u7531\u7ea2\u8f6c\u9ed1 if ( !IsRoot ( *g ) ) g->color = RB_RED; //g\u82e5\u975e\u6839\uff0c\u5219\u8f6c\u7ea2 solveDoubleRed ( g ); //\u7ee7\u7eed\u8c03\u6574g\uff08\u7c7b\u4f3c\u4e8e\u5c3e\u9012\u5f52\uff0c\u53ef\u4f18\u5316\u4e3a\u8fed\u4ee3\u5f62\u5f0f\uff09 } } \u5220\u9664 /****************************************************************************************** * RedBlack\u53cc\u9ed1\u8c03\u6574\u7b97\u6cd5\uff1a\u89e3\u51b3\u8282\u70b9x\u4e0e\u88ab\u5176\u66ff\u4ee3\u7684\u8282\u70b9\u5747\u4e3a\u9ed1\u8272\u7684\u95ee\u9898 * \u5206\u4e3a\u4e09\u5927\u7c7b\u5171\u56db\u79cd\u60c5\u51b5\uff1a * BB-1 \uff1a2\u6b21\u989c\u8272\u7ffb\u8f6c\uff0c2\u6b21\u9ed1\u9ad8\u5ea6\u66f4\u65b0\uff0c1~2\u6b21\u65cb\u8f6c\uff0c\u4e0d\u518d\u9012\u5f52 * BB-2R\uff1a2\u6b21\u989c\u8272\u7ffb\u8f6c\uff0c2\u6b21\u9ed1\u9ad8\u5ea6\u66f4\u65b0\uff0c0\u6b21\u65cb\u8f6c\uff0c\u4e0d\u518d\u9012\u5f52 * BB-2B\uff1a1\u6b21\u989c\u8272\u7ffb\u8f6c\uff0c1\u6b21\u9ed1\u9ad8\u5ea6\u66f4\u65b0\uff0c0\u6b21\u65cb\u8f6c\uff0c\u9700\u8981\u9012\u5f52 * BB-3 \uff1a2\u6b21\u989c\u8272\u7ffb\u8f6c\uff0c2\u6b21\u9ed1\u9ad8\u5ea6\u66f4\u65b0\uff0c1\u6b21\u65cb\u8f6c\uff0c\u8f6c\u4e3aBB-1\u6216BB2R ******************************************************************************************/ template <typename T> void RedBlack<T>::solveDoubleBlack ( BinNodePosi<T> r ) { BinNodePosi<T> p = r ? r->parent : _hot; if ( !p ) return; //r\u7684\u7236\u4eb2 BinNodePosi<T> s = ( r == p->lc ) ? p->rc : p->lc; //r\u7684\u5144\u5f1f if ( IsBlack ( s ) ) { //\u5144\u5f1fs\u4e3a\u9ed1 BinNodePosi<T> t = NULL; //s\u7684\u7ea2\u5b69\u5b50\uff08\u82e5\u5de6\u3001\u53f3\u5b69\u5b50\u7686\u7ea2\uff0c\u5de6\u8005\u4f18\u5148\uff1b\u7686\u9ed1\u65f6\u4e3aNULL\uff09 if ( IsRed ( s->rc ) ) t = s->rc; //\u53f3\u5b50 if ( IsRed ( s->lc ) ) t = s->lc; //\u5de6\u5b50 if ( t ) { //\u9ed1s\u6709\u7ea2\u5b69\u5b50\uff1aBB-1 //*DSA*/printf(\" case BB-1: Child (\"); print(s->lc); printf(\") of BLACK sibling (\"); print(s); printf(\") is RED\\n\"); RBColor oldColor = p->color; //\u5907\u4efd\u539f\u5b50\u6811\u6839\u8282\u70b9p\u989c\u8272\uff0c\u5e76\u5bf9t\u53ca\u5176\u7236\u4eb2\u3001\u7956\u7236 // \u4ee5\u4e0b\uff0c\u901a\u8fc7\u65cb\u8f6c\u91cd\u5e73\u8861\uff0c\u5e76\u5c06\u65b0\u5b50\u6811\u7684\u5de6\u3001\u53f3\u5b69\u5b50\u67d3\u9ed1 BinNodePosi<T> b = FromParentTo ( *p ) = rotateAt ( t ); //\u65cb\u8f6c if ( HasLChild ( *b ) ) { b->lc->color = RB_BLACK; updateHeight ( b->lc ); } //\u5de6\u5b50 if ( HasRChild ( *b ) ) { b->rc->color = RB_BLACK; updateHeight ( b->rc ); } //\u53f3\u5b50 b->color = oldColor; updateHeight ( b ); //\u65b0\u5b50\u6811\u6839\u8282\u70b9\u7ee7\u627f\u539f\u6839\u8282\u70b9\u7684\u989c\u8272 //*DSA*/printBinTree(b, 0, 0); } else { //\u9ed1s\u65e0\u7ea2\u5b69\u5b50 s->color = RB_RED; s->height--; //s\u8f6c\u7ea2 if ( IsRed ( p ) ) { //BB-2R //*DSA*/printf(\" case BB-2R: Both children (\"); print(s->lc); printf(\") and (\"); print(s->rc); printf(\") of BLACK sibling (\"); print(s); printf(\") are BLACK, and parent (\"); print(p); printf(\") is RED\\n\"); //s\u5b69\u5b50\u5747\u9ed1\uff0cp\u7ea2 p->color = RB_BLACK; //p\u8f6c\u9ed1\uff0c\u4f46\u9ed1\u9ad8\u5ea6\u4e0d\u53d8 //*DSA*/printBinTree(p, 0, 0); } else { //BB-2B //*DSA*/printf(\" case BB-2R: Both children (\"); print(s->lc); printf(\") and (\"); print(s->rc); printf(\") of BLACK sibling (\"); print(s); printf(\") are BLACK, and parent (\"); print(p); printf(\") is BLACK\\n\"); //s\u5b69\u5b50\u5747\u9ed1\uff0cp\u9ed1 p->height--; //p\u4fdd\u6301\u9ed1\uff0c\u4f46\u9ed1\u9ad8\u5ea6\u4e0b\u964d //*DSA*/printBinTree(p, 0, 0); solveDoubleBlack ( p ); //\u9012\u5f52\u4e0a\u6eaf } } } else { //\u5144\u5f1fs\u4e3a\u7ea2\uff1aBB-3 //*DSA*/printf(\" case BB-3: sibling (\"); print(s); printf(\" is RED\\n\"); //s\u7ea2\uff08\u53cc\u5b50\u4ff1\u9ed1\uff09 s->color = RB_BLACK; p->color = RB_RED; //s\u8f6c\u9ed1\uff0cp\u8f6c\u7ea2 BinNodePosi<T> t = IsLChild ( *s ) ? s->lc : s->rc; //\u53d6t\u4e0e\u5176\u7236s\u540c\u4fa7 _hot = p; FromParentTo ( *p ) = rotateAt ( t ); //\u5bf9t\u53ca\u5176\u7236\u4eb2\u3001\u7956\u7236\u505a\u5e73\u8861\u8c03\u6574 //*DSA*/printBinTree<T>(s, 0, 0); solveDoubleBlack ( r ); //\u7ee7\u7eed\u4fee\u6b63r\u5904\u53cc\u9ed1\u2014\u2014\u6b64\u65f6\u7684p\u5df2\u8f6c\u7ea2\uff0c\u6545\u540e\u7eed\u53ea\u80fd\u662fBB-1\u6216BB-2R } }","title":"\u7ea2\u9ed1\u6811"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/info/#_9","text":"template <typename T> //\u6839\u636e\u76f8\u5bf9\u4f18\u5148\u7ea7\u786e\u5b9a\u9002\u5b9c\u7684\u65b9\u5f0f\uff0c\u5408\u5e76\u4ee5a\u548cb\u4e3a\u6839\u8282\u70b9\u7684\u4e24\u4e2a\u5de6\u5f0f\u5806 static BinNodePosi<T> merge ( BinNodePosi<T> a, BinNodePosi<T> b ) { if ( ! a ) return b; //\u9000\u5316\u60c5\u51b5 if ( ! b ) return a; //\u9000\u5316\u60c5\u51b5 if ( lt ( a->data, b->data ) ) swap ( a, b ); //\u4e00\u822c\u60c5\u51b5\uff1a\u9996\u5148\u786e\u4fddb\u4e0d\u5927 ( a->rc = merge ( a->rc, b ) )->parent = a; //\u5c06a\u7684\u53f3\u5b50\u5806\uff0c\u4e0eb\u5408\u5e76 if ( !a->lc || a->lc->npl < a->rc->npl ) //\u82e5\u6709\u5fc5\u8981 swap ( a->lc, a->rc ); //\u4ea4\u6362a\u7684\u5de6\u3001\u53f3\u5b50\u5806\uff0c\u4ee5\u786e\u4fdd\u53f3\u5b50\u5806\u7684npl\u4e0d\u5927 a->npl = a->rc ? a->rc->npl + 1 : 1; //\u66f4\u65b0a\u7684npl return a; //\u8fd4\u56de\u5408\u5e76\u540e\u7684\u5806\u9876 } //\u672c\u7b97\u6cd5\u53ea\u5b9e\u73b0\u7ed3\u6784\u4e0a\u7684\u5408\u5e76\uff0c\u5806\u7684\u89c4\u6a21\u987b\u7531\u4e0a\u5c42\u8c03\u7528\u8005\u8d1f\u8d23\u66f4\u65b0","title":"\u5de6\u5f0f\u5806"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/info/#kmp","text":"\u4e3b\u7b97\u6cd5 int match ( char* P, char* T ) { //KMP\u7b97\u6cd5 int* next = buildNext ( P ); //\u6784\u9020next\u8868 int n = ( int ) strlen ( T ), i = 0; //\u6587\u672c\u4e32\u6307\u9488 int m = ( int ) strlen ( P ), j = 0; //\u6a21\u5f0f\u4e32\u6307\u9488 while ( j < m && i < n ) //\u81ea\u5de6\u5411\u53f3\u9010\u4e2a\u6bd4\u5bf9\u5b57\u7b26 /*DSA*/{ /*DSA*/showProgress ( T, P, i - j, j ); /*DSA*/printNext ( next, i - j, strlen ( P ) ); /*DSA*/getchar(); printf ( \"\\n\" ); if ( 0 > j || T[i] == P[j] ) //\u82e5\u5339\u914d\uff0c\u6216P\u5df2\u79fb\u51fa\u6700\u5de6\u4fa7\uff08\u4e24\u4e2a\u5224\u65ad\u7684\u6b21\u5e8f\u4e0d\u53ef\u4ea4\u6362\uff09 { i ++; j ++; } //\u5219\u8f6c\u5230\u4e0b\u4e00\u5b57\u7b26 else //\u5426\u5219 j = next[j]; //\u6a21\u5f0f\u4e32\u53f3\u79fb\uff08\u6ce8\u610f\uff1a\u6587\u672c\u4e32\u4e0d\u7528\u56de\u9000\uff09 /*DSA*/} delete [] next; //\u91ca\u653enext\u8868 return i - j; } \u5efa\u7acb next \u8868 int* buildNext ( char* P ) { //\u6784\u9020\u6a21\u5f0f\u4e32P\u7684next\u8868\uff08\u6539\u8fdb\u7248\u672c\uff09 size_t m = strlen ( P ), j = 0; //\u201c\u4e3b\u201d\u4e32\u6307\u9488 int* N = new int[m]; //next\u8868 int t = N[0] = -1; //\u6a21\u5f0f\u4e32\u6307\u9488 while ( j < m - 1 ) if ( 0 > t || P[j] == P[t] ) { //\u5339\u914d N[j] = ( P[++j] != P[++t] ? t : N[t] ); //\u6ce8\u610f\u6b64\u53e5\u4e0e\u672a\u6539\u8fdb\u4e4b\u524d\u7684\u533a\u522b } else //\u5931\u914d t = N[t]; /*DSA*/printString ( P ); printf ( \"\\n\" ); /*DSA*/printNext ( N, 0, m ); return N; }","title":"KMP"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/info/#bm","text":"\u4e3b\u7b97\u6cd5 int match ( char* P, char* T ) { //Boyer-Morre\u7b97\u6cd5\uff08\u5b8c\u5168\u7248\uff0c\u517c\u987eBad Character\u4e0eGood Suffix\uff09 int* bc = buildBC ( P ); int* gs = buildGS ( P ); //\u6784\u9020BC\u8868\u548cGS\u8868 size_t i = 0; //\u6a21\u5f0f\u4e32\u76f8\u5bf9\u4e8e\u6587\u672c\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\uff08\u521d\u59cb\u65f6\u4e0e\u6587\u672c\u4e32\u5de6\u5bf9\u9f50\uff09 while ( strlen ( T ) >= i + strlen ( P ) ) { //\u4e0d\u65ad\u53f3\u79fb\uff08\u8ddd\u79bb\u53ef\u80fd\u4e0d\u6b62\u4e00\u4e2a\u5b57\u7b26\uff09\u6a21\u5f0f\u4e32 int j = strlen ( P ) - 1; //\u4ece\u6a21\u5f0f\u4e32\u6700\u672b\u5c3e\u7684\u5b57\u7b26\u5f00\u59cb while ( P[j] == T[i + j] ) //\u81ea\u53f3\u5411\u5de6\u6bd4\u5bf9 if ( 0 > --j ) break; /*DSA*/showProgress ( T, P, i, j ); printf ( \"\\n\" ); getchar(); if ( 0 > j ) //\u82e5\u6781\u5927\u5339\u914d\u540e\u7f00 == \u6574\u4e2a\u6a21\u5f0f\u4e32\uff08\u8bf4\u660e\u5df2\u7ecf\u5b8c\u5168\u5339\u914d\uff09 break; //\u8fd4\u56de\u5339\u914d\u4f4d\u7f6e else //\u5426\u5219\uff0c\u9002\u5f53\u5730\u79fb\u52a8\u6a21\u5f0f\u4e32 i += max ( gs[j], j - bc[ T[i + j] ] ); //\u4f4d\u79fb\u91cf\u6839\u636eBC\u8868\u548cGS\u8868\u9009\u62e9\u5927\u8005 } delete [] gs; delete [] bc; //\u9500\u6bc1GS\u8868\u548cBC\u8868 return i; } bc //***************************************************************************************** // 0 bc['X'] m-1 // | | | // ........................X*************************************** // .|<------------- 'X' free ------------>| //***************************************************************************************** int* buildBC ( char* P ) { //\u6784\u9020Bad Charactor Shift\u8868\uff1aO(m + 256) int* bc = new int[256]; //BC\u8868\uff0c\u4e0e\u5b57\u7b26\u8868\u7b49\u957f for ( size_t j = 0; j < 256; j ++ ) bc[j] = -1; //\u521d\u59cb\u5316\uff1a\u9996\u5148\u5047\u8bbe\u6240\u6709\u5b57\u7b26\u5747\u672a\u5728P\u4e2d\u51fa\u73b0 for ( size_t m = strlen ( P ), j = 0; j < m; j ++ ) //\u81ea\u5de6\u5411\u53f3\u626b\u63cf\u6a21\u5f0f\u4e32P bc[ P[j] ] = j; //\u5c06\u5b57\u7b26P[j]\u7684BC\u9879\u66f4\u65b0\u4e3aj\uff08\u5355\u8c03\u9012\u589e\uff09\u2014\u2014\u753b\u5bb6\u7b97\u6cd5 /*DSA*/printBC ( bc ); return bc; } gs int* buildSS ( char* P ) { //\u6784\u9020\u6700\u5927\u5339\u914d\u540e\u7f00\u957f\u5ea6\u8868\uff1aO(m) int m = strlen ( P ); int* ss = new int[m]; //Suffix Size\u8868 ss[m - 1] = m; //\u5bf9\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u800c\u8a00\uff0c\u4e0e\u4e4b\u5339\u914d\u7684\u6700\u957f\u540e\u7f00\u5c31\u662f\u6574\u4e2aP\u4e32 // \u4ee5\u4e0b\uff0c\u4ece\u5012\u6570\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u8d77\u81ea\u53f3\u5411\u5de6\u626b\u63cfP\uff0c\u4f9d\u6b21\u8ba1\u7b97\u51fass[]\u5176\u4f59\u5404\u9879 for ( int lo = m - 1, hi = m - 1, j = lo - 1; j >= 0; j -- ) if ( ( lo < j ) && ( ss[m - hi + j - 1] < j - lo ) ) //\u60c5\u51b5\u4e00 ss[j] = ss[m - hi + j - 1]; //\u76f4\u63a5\u5229\u7528\u6b64\u524d\u5df2\u8ba1\u7b97\u51fa\u7684ss[] else { //\u60c5\u51b5\u4e8c hi = j; lo = min ( lo, hi ); while ( ( 0 <= lo ) && ( P[lo] == P[m - hi + lo - 1] ) ) //\u4e8c\u91cd\u5faa\u73af\uff1f lo--; //\u9010\u4e2a\u5bf9\u6bd4\u5904\u4e8e(lo, hi]\u524d\u7aef\u7684\u5b57\u7b26 ss[j] = hi - lo; } /*DSA*/printf ( \"-- ss[] Table -------\\n\" ); /*DSA*/for ( int i = 0; i < m; i ++ ) printf ( \"%4d\", i ); printf ( \"\\n\" ); /*DSA*/printString ( P ); printf ( \"\\n\" ); /*DSA*/for ( int i = 0; i < m; i ++ ) printf ( \"%4d\", ss[i] ); printf ( \"\\n\\n\" ); return ss; } int* buildGS ( char* P ) { //\u6784\u9020\u597d\u540e\u7f00\u4f4d\u79fb\u91cf\u8868\uff1aO(m) int* ss = buildSS ( P ); //Suffix Size table size_t m = strlen ( P ); int* gs = new int[m]; //Good Suffix shift table for ( size_t j = 0; j < m; j ++ ) gs[j] = m; //\u521d\u59cb\u5316 for ( size_t i = 0, j = m - 1; j < UINT_MAX; j -- ) //\u9006\u5411\u9010\u4e00\u626b\u63cf\u5404\u5b57\u7b26P[j] if ( j + 1 == ss[j] ) //\u82e5P[0, j] = P[m - j - 1, m)\uff0c\u5219 while ( i < m - j - 1 ) //\u5bf9\u4e8eP[m - j - 1]\u5de6\u4fa7\u7684\u6bcf\u4e2a\u5b57\u7b26P[i]\u800c\u8a00\uff08\u4e8c\u91cd\u5faa\u73af\uff1f\uff09 gs[i++] = m - j - 1; //m - j - 1\u90fd\u662fgs[i]\u7684\u4e00\u79cd\u9009\u62e9 for ( size_t j = 0; j < m - 1; j ++ ) //\u753b\u5bb6\u7b97\u6cd5\uff1a\u6b63\u5411\u626b\u63cfP[]\u5404\u5b57\u7b26\uff0cgs[j]\u4e0d\u65ad\u9012\u51cf\uff0c\u76f4\u81f3\u6700\u5c0f gs[m - ss[j] - 1] = m - j - 1; //m - j - 1\u5fc5\u662f\u5176gs[m - ss[j] - 1]\u503c\u7684\u4e00\u79cd\u9009\u62e9 /*DSA*/printGS ( P, gs ); delete [] ss; return gs; }","title":"BM"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/info/#karp-rabin","text":"// \u5b50\u4e32\u6307\u7eb9\u5feb\u901f\u66f4\u65b0\u7b97\u6cd5 void updateHash ( HashCode& hashT, char* T, size_t m, size_t k, HashCode Dm ) { hashT = ( hashT - DIGIT ( T, k - 1 ) * Dm ) % M; //\u5728\u524d\u4e00\u6307\u7eb9\u57fa\u7840\u4e0a\uff0c\u53bb\u9664\u9996\u4f4dT[k - 1] hashT = ( hashT * R + DIGIT ( T, k + m - 1 ) ) % M; //\u6dfb\u52a0\u672b\u4f4dT[k + m - 1] if ( 0 > hashT ) hashT += M; //\u786e\u4fdd\u6563\u5217\u7801\u843d\u5728\u5408\u6cd5\u533a\u95f4\u5185 }","title":"Karp-Rabin"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/info/#_10","text":"template <typename T> T majEleCandidate ( Vector<T> A ) { //\u9009\u51fa\u5177\u5907\u5fc5\u8981\u6761\u4ef6\u7684\u4f17\u6570\u5019\u9009\u8005 T maj; //\u4f17\u6570\u5019\u9009\u8005 // \u7ebf\u6027\u626b\u63cf\uff1a\u501f\u52a9\u8ba1\u6570\u5668c\uff0c\u8bb0\u5f55maj\u4e0e\u5176\u5b83\u5143\u7d20\u7684\u6570\u91cf\u5dee\u989d for ( int c = 0, i = 0; i < A.size(); i++ ) if ( 0 == c ) { //\u6bcf\u5f53c\u5f52\u96f6\uff0c\u90fd\u610f\u5473\u7740\u6b64\u65f6\u7684\u524d\u7f00P\u53ef\u4ee5\u526a\u9664 maj = A[i]; c = 1; //\u4f17\u6570\u5019\u9009\u8005\u6539\u4e3a\u65b0\u7684\u5f53\u524d\u5143\u7d20 } else //\u5426\u5219 maj == A[i] ? c++ : c--; //\u76f8\u5e94\u5730\u66f4\u65b0\u5dee\u989d\u8ba1\u6570\u5668 return maj; //\u81f3\u6b64\uff0c\u539f\u5411\u91cf\u7684\u4f17\u6570\u82e5\u5b58\u5728\uff0c\u5219\u53ea\u80fd\u662fmaj \u2014\u2014 \u5c3d\u7ba1\u53cd\u4e4b\u4e0d\u7136 }","title":"\u4f17\u6570"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/info/#_11","text":"\u5e76\u5f52\u6709\u5e8f\u5411\u91cf\u4e2d\u4f4d\u6570 template <typename T> //\u5e8f\u5217S1[lo1, lo1 + n)\u548cS2[lo2, lo2 + n)\u5206\u522b\u6709\u5e8f\uff0cn > 0\uff0c\u6570\u636e\u9879\u53ef\u80fd\u91cd\u590d T median ( Vector<T>& S1, int lo1, Vector<T>& S2, int lo2, int n ) { //\u4e2d\u4f4d\u6570\u7b97\u6cd5\uff08\u9ad8\u6548\u7248\uff09 /*DSA*/printf ( \"median\\n\" ); /*DSA*/for ( int i = 0; i < lo1; i++ ) printf ( \" .\" ); for ( int i = 0; i < n; i++ ) print ( S1[lo1+i] ); for ( int i = lo1 + n; i < S1.size(); i++ ) printf ( \" .\" ); printf ( \"\\n\" ); /*DSA*/for ( int i = 0; i < lo2; i++ ) printf ( \" .\" ); for ( int i = 0; i < n; i++ ) print ( S2[lo2+i] ); for ( int i = lo2 + n; i < S2.size(); i++ ) printf ( \" .\" ); printf ( \"\\n--\\n\" ); if ( n < 3 ) return trivialMedian ( S1, lo1, n, S2, lo2, n ); //\u9012\u5f52\u57fa int mi1 = lo1 + n / 2, mi2 = lo2 + ( n - 1 ) / 2; //\u957f\u5ea6\uff08\u63a5\u8fd1\uff09\u51cf\u534a if ( S1[mi1] < S2[mi2] ) return median ( S1, mi1, S2, lo2, n + lo1 - mi1 ); //\u53d6S1\u53f3\u534a\u3001S2\u5de6\u534a else if ( S1[mi1] > S2[mi2] ) return median ( S1, lo1, S2, mi2, n + lo2 - mi2 ); //\u53d6S1\u5de6\u534a\u3001S2\u53f3\u534a else return S1[mi1]; }","title":"\u4e2d\u4f4d\u6570"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/info/#_12","text":"\\\\partition \u7b80\u5316 template <typename T> //\u8f74\u70b9\u6784\u9020\u7b97\u6cd5\uff1a\u901a\u8fc7\u8c03\u6574\u5143\u7d20\u4f4d\u7f6e\u6784\u9020\u533a\u95f4[lo, hi)\u7684\u8f74\u70b9\uff0c\u5e76\u8fd4\u56de\u5176\u79e9 Rank Vector<T>::partition ( Rank lo, Rank hi ) { swap ( _elem[lo], _elem[ lo + rand() % ( hi - lo ) ] ); //\u4efb\u9009\u4e00\u4e2a\u5143\u7d20\u4e0e\u9996\u5143\u7d20\u4ea4\u6362 int x = _elem[lo], j = hi; // _elem(i, j) <= x < [j, hi)\u4e2d\u5143\u7d20 for (int i = hi - 1; i >= 0; --i) { if (x < _elem[i]) { swap(_elem[i], _elem[--j]); } } swap(_elem[j - 1], _elem[lo]); return j - 1; }","title":"\u5feb\u901f\u6392\u5e8f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88C%2B%2B%E7%89%88%EF%BC%89/info/#shell","text":"\u5e95\u5c42\u6392\u5e8f\u5e94\u662f\u8f93\u5165\u654f\u611f\u578b\uff0c\u5982\u63d2\u5165\u6392\u5e8f\u5728\u5df2\u6392\u5e8f\u5217\u4e2d\u5e94\u4ece\u540e\u5411\u524d\u641c\u7d22\u3002","title":"shell\u6392\u5e8f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/","text":"\u786c\u4ef6\u57fa\u7840 \u8ba1\u7b97\u673a\u7684\u6307\u4ee4\u7cfb\u7edf \u6307\u4ee4\u529f\u80fd\uff1a\u6570\u636e\u8fd0\u7b97\u3001\u6570\u636e\u4f20\u8f93\u3001\u8f93\u5165\u8f93\u51fa\u6307\u4ee4\u3001\u63a7\u5236\u6307\u4ee4\u3001\u5176\u4ed6 \u6307\u4ee4\u683c\u5f0f\uff1a\u6307\u4ee4\u5b57(\u64cd\u4f5c\u7801+\u64cd\u4f5c\u6570\u5730\u5740) \u6570\u636e\u8868\u793a\u53ca\u68c0\u9519\u7ea0\u9519 \u5206\u7c7b \u903b\u8f91\u578b \u5b57\u7b26\u578b \u6570\u503c\u578b \u6574\u6570\u7684\u7f16\u7801 \u539f\u7801\u3001\u53cd\u7801\u548c\u8865\u7801(\u6b63\u6570\u4e00\u81f4,\u96f6\u7684\u539f\u7801\u548c\u53cd\u7801\u5747\u6709 2 \u4e2a\u7f16\u7801,\u8865\u7801\u53ea 1 \u4e2a\u7801) \u539f\u7801(Sign Magnitude)\uff1a\u7b26\u53f7\u4f4d||\u6570\u7684\u7edd\u5bf9\u503c \u53cd\u7801(One\u2019s Complement)\uff1a\u7b26\u53f7\u4f4d||\u6570\u503c\u6309\u4f4d\u6c42\u53cd \u8865\u7801(Two\u2019s Complement)\uff1a\u53cd\u7801\u7684\u6700\u4f4e\u4f4d+1(\u4e0d\u540c\u4f4d\u6570\u8865\u7801\u76f8\u52a0\u51cf\u65f6,\u8981\u7b26\u53f7\u6269\u5c55) \u8865\u7801\u52a0\u6cd5\uff1a[x+y]\u8865=[x]\u8865+[y]\u8865 \u8865\u7801\u51cf\u6cd5\uff1a[x-y]\u8865= [x+(-y)]\u8865= [x]\u8865+[-y]\u8865 [-x] \u8865 \uff1a[x] \u8865 \u8fde\u540c\u7b26\u53f7\u4f4d\u5728\u5185,\u9010\u4f4d\u6c42\u53cd,\u518d\u5728\u6700\u4f4e\u4f4d\u52a0 1 [x/2] \u8865 \uff1a[x] \u8865 \u7b97\u672f\u53f3\u79fb 1 \u4f4d \u6570\u636e\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u5b58\u50a8 \u5927\u7aef\uff1a\u6570\u636e\u7684\u4f4e\u4f4d\u4fdd\u5b58\u5728\u5185\u5b58\u7684\u9ad8\u5730\u5740\u5b57\u8282\u4e2d\u3002 \u5c0f\u7aef\uff1a\u6570\u636e\u7684\u4f4e\u4f4d\u4fdd\u5b58\u5728\u5185\u5b58\u7684\u4f4e\u5730\u5740\u5b57\u8282\u4e2d\u3002\uff08\u4ee5\u5c0f\u7aef\u673a\u4e3a\u4e3b\uff09 \u7ea0\u68c0\u9519\u7801 \u5757\u7801\uff0c (n,m) (n,m) \u7801\uff0c\u6570\u636e\u4f4d\u4e3a m m \uff0c\u6821\u9a8c\u4f4d\u4e3a r=n-m r=n-m \u3002 \u53ef\u80fd\u53d1\u751f d d \u4f4d\u9519\uff0c\u9700\u8981\u7801\u8ddd\u4e3a d+1 d+1 \u7684\u68c0\u9519\u7801\u6216 2d+1 2d+1 \u7684\u7ea0\u9519\u7801\u3002 \u5947\u5076\u6821\u9a8c\u7801\uff1a\u7528\u4e8e\u5e76\u884c\u6570\u636e\u4f20\u9001\u4e2d\uff0c\u7801\u8ddd\u4e3a 2 2 \u200b\u3002 \u6c49\u660e\u6821\u9a8c\u7801\uff1a\u7528\u4e8e\u5e76\u884c\u6570\u636e\u4f20\u9001\u4e2d 2^r \\ge m+r+1 2^r \\ge m+r+1 \uff0c\u7801\u8ddd\u4e3a 4 4 \u200b\u200b\uff0c\u5076\u6821\u9a8c\u7f16\u89e3\u7801\u90fd\u76f4\u63a5\u5f02\u6216\u3002 \u82e5\u8981\u5b9e\u73b0\u7ea0\u4e00\u4f4d\u9519\uff0c\u4e14\u540c\u65f6\u53d1\u73b0\u4e24\u4f4d\u9519\uff0c\u53ef\u518d\u52a0\u4e00\u4f4d\u603b\u6821\u9a8c\u4f4d\uff0c\u8bd1\u7801\u540e\u603b\u6821\u9a8c\u4f4d\u4e3a 0 0 \u8bf4\u660e\u6709\u4e24\u4f4d\u9519\u3002 \u5faa\u73af\u5197\u4f59\u6821\u9a8c\u7801\uff1a\u7528\u4e8e\u4e32\u884c\u6570\u636e\u4f20\u9001\u4e2d \u63a5\u53d7\u53cc\u65b9\u5546\u5b9a\u4e00\u4e2a\u751f\u6210\u591a\u9879\u5f0f G(x) G(x) \u200b\uff0c\u5728\u5e27\u7684\u5c3e\u90e8\u9644\u52a0\u4e00\u4e2a\u6821\u9a8c\u548c,\u4f7f\u5f97\u9644\u52a0\u4e4b\u540e\u7684\u5e27\u6240\u5bf9\u5e94\u7684\u591a\u9879\u5f0f\u80fd\u591f\u88ab G(x) G(x) \u9664\u5c3d\u3002\u5f53\u63a5\u6536\u65b9\u6536\u5230\u4e86\u5e26\u6821\u9a8c\u548c\u7684\u5e27\u4e4b\u540e,\u5b83\u8bd5\u7740\u7528 G(x) G(x) \u200b\u53bb\u9664\u5b83\u3002\u5982\u679c\u6709\u4f59\u6570\u7684\u8bdd,\u5219\u8868\u660e\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u6709\u9519\u8bef\u3002 \u5982 G(x)=x^4+x+1 G(x)=x^4+x+1 \u200b\uff0c\u5e27\u4e3a 1101011111 1101011111 \u200b\u200b \u7b97\u672f\u8fd0\u7b97\u53ca\u7535\u8def\u5b9e\u73b0 ALU \u57fa\u4e8e\u4e00\u4f4d\u52a0\u6cd5\u5668\u5b9e\u73b0 \u57fa\u4e8e\u8d85\u524d\u8fdb\u4f4d\u5668 P_i=a_i+b_i P_i=a_i+b_i \uff0c G_i=a_ib_i G_i=a_ib_i \u200b\uff0c P^* P^* \u548c G^* G^* \u7528\u4e8e\u7ea7\u8054\u66f4\u9ad8\u4f4d\u7684\u8fdb\u4f4d\u5668\u3002 \u4e58\u6cd5 \u539f\u7801 \u8865\u7801 dsapp\uff1a\u8865\u7801\u5728\u4e0d\u6ea2\u51fa\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u7528\u76f4\u63a5\u4f7f\u7528\u539f\u7801\u7684\u4e58\u6cd5\u6765\u4ee3\u66ff\u3002 \u5e03\u65af\u7b97\u6cd5\uff1a \u4ee4 [x]_{\\text{\u8865}}=x_{n-1}\\cdots x_0 [x]_{\\text{\u8865}}=x_{n-1}\\cdots x_0 \uff0c [y]_{\\text{\u8865}} [y]_{\\text{\u8865}} \u540c\u7406\uff0c\u5219\uff1a $$ [x\\cdot y] {\\text{\u8865}}=[x] {\\text{\u8865}}\\cdot\\sum_{i=0}^{n-1}(y_{i-1}-y_i) $$ \u5176\u4e2d y_{-1}=0 y_{-1}=0 \uff0c\u5373\u521d\u59cb\u5316\u9644\u52a0\u4f4d\u3002 \u9664\u6cd5 \u539f\u7801 [x/y]_{\\text{\u539f}}=(x\\oplus y)(|x|/|y|) [x/y]_{\\text{\u539f}}=(x\\oplus y)(|x|/|y|) \u6062\u590d\u4f59\u6570\u6cd5\uff1a\u88ab\u9664\u6570-\u9664\u6570,\u82e5\u7ed3\u679c>=0,\u5219\u4e0a\u55461,\u79fb\u4f4d;\u82e5\u7ed3\u679c<0,\u5219\u55460,\u6062\u590d\u4f59\u6570\u540e,\u518d\u79fb\u4f4d; \u52a0\u51cf\u4ea4\u66ff\u9664\u6cd5 x=-0.1101 x=-0.1101 \uff0c y=0.1011 y=0.1011 \u6d6e\u70b9\u6570 IEEE V = (-1)^s \\times M \\times 2^E V = (-1)^s \\times M \\times 2^E // s-exp-frac //Single precision k = 8, n = 23, Bias = 127 //Double precision k = 11, n = 52, Bias = 1023 \u7b49\u4e8e 1 1 \u6307\u5168 1 1 \uff0c\u7b49\u4e8e 0 0 \u6307\u5168 0 0 \u3002 Normalized Values $$ e \\neq 0\\neq 2^k - 1\\ M = 1 + f, E = e - Bias $$ Denormalized Values $$ e = 0\\ M = f, E = 1 - Bias $$ Special Values NaN: e = 1, f \\neq 0\\\\ \\infty: e =1, f = 1 NaN: e = 1, f \\neq 0\\\\ \\infty: e =1, f = 1 \u6d6e\u70b9\u52a0\u3001\u51cf\u6cd5\u4e0d\u6ee1\u8db3\u7ed3\u5408\u5f8b \u6d6e\u70b9\u6570\u52a0\u6cd5\u3001\u51cf\u6cd5\u4e0d\u53ef\u7ed3\u5408 \u6d6e\u70b9\u6570\u4e5f\u4e0d\u80fd\u8fdb\u884c\u76f8\u7b49\u6bd4\u8f83","title":"\u786c\u4ef6\u57fa\u7840"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_1","text":"","title":"\u786c\u4ef6\u57fa\u7840"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_2","text":"\u6307\u4ee4\u529f\u80fd\uff1a\u6570\u636e\u8fd0\u7b97\u3001\u6570\u636e\u4f20\u8f93\u3001\u8f93\u5165\u8f93\u51fa\u6307\u4ee4\u3001\u63a7\u5236\u6307\u4ee4\u3001\u5176\u4ed6 \u6307\u4ee4\u683c\u5f0f\uff1a\u6307\u4ee4\u5b57(\u64cd\u4f5c\u7801+\u64cd\u4f5c\u6570\u5730\u5740)","title":"\u8ba1\u7b97\u673a\u7684\u6307\u4ee4\u7cfb\u7edf"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_3","text":"","title":"\u6570\u636e\u8868\u793a\u53ca\u68c0\u9519\u7ea0\u9519"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_4","text":"\u903b\u8f91\u578b \u5b57\u7b26\u578b \u6570\u503c\u578b","title":"\u5206\u7c7b"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_5","text":"\u539f\u7801\u3001\u53cd\u7801\u548c\u8865\u7801(\u6b63\u6570\u4e00\u81f4,\u96f6\u7684\u539f\u7801\u548c\u53cd\u7801\u5747\u6709 2 \u4e2a\u7f16\u7801,\u8865\u7801\u53ea 1 \u4e2a\u7801) \u539f\u7801(Sign Magnitude)\uff1a\u7b26\u53f7\u4f4d||\u6570\u7684\u7edd\u5bf9\u503c \u53cd\u7801(One\u2019s Complement)\uff1a\u7b26\u53f7\u4f4d||\u6570\u503c\u6309\u4f4d\u6c42\u53cd \u8865\u7801(Two\u2019s Complement)\uff1a\u53cd\u7801\u7684\u6700\u4f4e\u4f4d+1(\u4e0d\u540c\u4f4d\u6570\u8865\u7801\u76f8\u52a0\u51cf\u65f6,\u8981\u7b26\u53f7\u6269\u5c55) \u8865\u7801\u52a0\u6cd5\uff1a[x+y]\u8865=[x]\u8865+[y]\u8865 \u8865\u7801\u51cf\u6cd5\uff1a[x-y]\u8865= [x+(-y)]\u8865= [x]\u8865+[-y]\u8865 [-x] \u8865 \uff1a[x] \u8865 \u8fde\u540c\u7b26\u53f7\u4f4d\u5728\u5185,\u9010\u4f4d\u6c42\u53cd,\u518d\u5728\u6700\u4f4e\u4f4d\u52a0 1 [x/2] \u8865 \uff1a[x] \u8865 \u7b97\u672f\u53f3\u79fb 1 \u4f4d \u6570\u636e\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u5b58\u50a8 \u5927\u7aef\uff1a\u6570\u636e\u7684\u4f4e\u4f4d\u4fdd\u5b58\u5728\u5185\u5b58\u7684\u9ad8\u5730\u5740\u5b57\u8282\u4e2d\u3002 \u5c0f\u7aef\uff1a\u6570\u636e\u7684\u4f4e\u4f4d\u4fdd\u5b58\u5728\u5185\u5b58\u7684\u4f4e\u5730\u5740\u5b57\u8282\u4e2d\u3002\uff08\u4ee5\u5c0f\u7aef\u673a\u4e3a\u4e3b\uff09","title":"\u6574\u6570\u7684\u7f16\u7801"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_6","text":"\u5757\u7801\uff0c (n,m) (n,m) \u7801\uff0c\u6570\u636e\u4f4d\u4e3a m m \uff0c\u6821\u9a8c\u4f4d\u4e3a r=n-m r=n-m \u3002 \u53ef\u80fd\u53d1\u751f d d \u4f4d\u9519\uff0c\u9700\u8981\u7801\u8ddd\u4e3a d+1 d+1 \u7684\u68c0\u9519\u7801\u6216 2d+1 2d+1 \u7684\u7ea0\u9519\u7801\u3002 \u5947\u5076\u6821\u9a8c\u7801\uff1a\u7528\u4e8e\u5e76\u884c\u6570\u636e\u4f20\u9001\u4e2d\uff0c\u7801\u8ddd\u4e3a 2 2 \u200b\u3002 \u6c49\u660e\u6821\u9a8c\u7801\uff1a\u7528\u4e8e\u5e76\u884c\u6570\u636e\u4f20\u9001\u4e2d 2^r \\ge m+r+1 2^r \\ge m+r+1 \uff0c\u7801\u8ddd\u4e3a 4 4 \u200b\u200b\uff0c\u5076\u6821\u9a8c\u7f16\u89e3\u7801\u90fd\u76f4\u63a5\u5f02\u6216\u3002 \u82e5\u8981\u5b9e\u73b0\u7ea0\u4e00\u4f4d\u9519\uff0c\u4e14\u540c\u65f6\u53d1\u73b0\u4e24\u4f4d\u9519\uff0c\u53ef\u518d\u52a0\u4e00\u4f4d\u603b\u6821\u9a8c\u4f4d\uff0c\u8bd1\u7801\u540e\u603b\u6821\u9a8c\u4f4d\u4e3a 0 0 \u8bf4\u660e\u6709\u4e24\u4f4d\u9519\u3002 \u5faa\u73af\u5197\u4f59\u6821\u9a8c\u7801\uff1a\u7528\u4e8e\u4e32\u884c\u6570\u636e\u4f20\u9001\u4e2d \u63a5\u53d7\u53cc\u65b9\u5546\u5b9a\u4e00\u4e2a\u751f\u6210\u591a\u9879\u5f0f G(x) G(x) \u200b\uff0c\u5728\u5e27\u7684\u5c3e\u90e8\u9644\u52a0\u4e00\u4e2a\u6821\u9a8c\u548c,\u4f7f\u5f97\u9644\u52a0\u4e4b\u540e\u7684\u5e27\u6240\u5bf9\u5e94\u7684\u591a\u9879\u5f0f\u80fd\u591f\u88ab G(x) G(x) \u9664\u5c3d\u3002\u5f53\u63a5\u6536\u65b9\u6536\u5230\u4e86\u5e26\u6821\u9a8c\u548c\u7684\u5e27\u4e4b\u540e,\u5b83\u8bd5\u7740\u7528 G(x) G(x) \u200b\u53bb\u9664\u5b83\u3002\u5982\u679c\u6709\u4f59\u6570\u7684\u8bdd,\u5219\u8868\u660e\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u6709\u9519\u8bef\u3002 \u5982 G(x)=x^4+x+1 G(x)=x^4+x+1 \u200b\uff0c\u5e27\u4e3a 1101011111 1101011111 \u200b\u200b","title":"\u7ea0\u68c0\u9519\u7801"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_7","text":"","title":"\u7b97\u672f\u8fd0\u7b97\u53ca\u7535\u8def\u5b9e\u73b0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#alu","text":"","title":"ALU"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_8","text":"","title":"\u57fa\u4e8e\u4e00\u4f4d\u52a0\u6cd5\u5668\u5b9e\u73b0"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_9","text":"P_i=a_i+b_i P_i=a_i+b_i \uff0c G_i=a_ib_i G_i=a_ib_i \u200b\uff0c P^* P^* \u548c G^* G^* \u7528\u4e8e\u7ea7\u8054\u66f4\u9ad8\u4f4d\u7684\u8fdb\u4f4d\u5668\u3002","title":"\u57fa\u4e8e\u8d85\u524d\u8fdb\u4f4d\u5668"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_10","text":"","title":"\u4e58\u6cd5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_11","text":"","title":"\u539f\u7801"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_12","text":"dsapp\uff1a\u8865\u7801\u5728\u4e0d\u6ea2\u51fa\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u7528\u76f4\u63a5\u4f7f\u7528\u539f\u7801\u7684\u4e58\u6cd5\u6765\u4ee3\u66ff\u3002 \u5e03\u65af\u7b97\u6cd5\uff1a \u4ee4 [x]_{\\text{\u8865}}=x_{n-1}\\cdots x_0 [x]_{\\text{\u8865}}=x_{n-1}\\cdots x_0 \uff0c [y]_{\\text{\u8865}} [y]_{\\text{\u8865}} \u540c\u7406\uff0c\u5219\uff1a $$ [x\\cdot y] {\\text{\u8865}}=[x] {\\text{\u8865}}\\cdot\\sum_{i=0}^{n-1}(y_{i-1}-y_i) $$ \u5176\u4e2d y_{-1}=0 y_{-1}=0 \uff0c\u5373\u521d\u59cb\u5316\u9644\u52a0\u4f4d\u3002","title":"\u8865\u7801"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_13","text":"","title":"\u9664\u6cd5"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_14","text":"[x/y]_{\\text{\u539f}}=(x\\oplus y)(|x|/|y|) [x/y]_{\\text{\u539f}}=(x\\oplus y)(|x|/|y|) \u6062\u590d\u4f59\u6570\u6cd5\uff1a\u88ab\u9664\u6570-\u9664\u6570,\u82e5\u7ed3\u679c>=0,\u5219\u4e0a\u55461,\u79fb\u4f4d;\u82e5\u7ed3\u679c<0,\u5219\u55460,\u6062\u590d\u4f59\u6570\u540e,\u518d\u79fb\u4f4d; \u52a0\u51cf\u4ea4\u66ff\u9664\u6cd5 x=-0.1101 x=-0.1101 \uff0c y=0.1011 y=0.1011","title":"\u539f\u7801"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#_15","text":"","title":"\u6d6e\u70b9\u6570"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/gen/#ieee","text":"V = (-1)^s \\times M \\times 2^E V = (-1)^s \\times M \\times 2^E // s-exp-frac //Single precision k = 8, n = 23, Bias = 127 //Double precision k = 11, n = 52, Bias = 1023 \u7b49\u4e8e 1 1 \u6307\u5168 1 1 \uff0c\u7b49\u4e8e 0 0 \u6307\u5168 0 0 \u3002 Normalized Values $$ e \\neq 0\\neq 2^k - 1\\ M = 1 + f, E = e - Bias $$ Denormalized Values $$ e = 0\\ M = f, E = 1 - Bias $$ Special Values NaN: e = 1, f \\neq 0\\\\ \\infty: e =1, f = 1 NaN: e = 1, f \\neq 0\\\\ \\infty: e =1, f = 1 \u6d6e\u70b9\u52a0\u3001\u51cf\u6cd5\u4e0d\u6ee1\u8db3\u7ed3\u5408\u5f8b \u6d6e\u70b9\u6570\u52a0\u6cd5\u3001\u51cf\u6cd5\u4e0d\u53ef\u7ed3\u5408 \u6d6e\u70b9\u6570\u4e5f\u4e0d\u80fd\u8fdb\u884c\u76f8\u7b49\u6bd4\u8f83","title":"IEEE"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/","text":"MIPS CPU \u6307\u4ee4 \u7c7b\u578b \u4ee3\u8868\u6307\u4ee4 \u4f5c\u7528 R add $rd, $rs, $rt $rd = $rs + $rt I addi $rt, $rs, imm $rt = $rs + imm I beq if ($rt==$rs) PC+=4+(imm<<2) I lw/sw $rt, imm($rs) J j addr PC=PC&0xf0000000|(addr<<2) \u5355\u5468\u671f \u6307\u4ee4\u5468\u671f\u957f\uff0c\u6240\u6709\u6307\u4ee4\u5fc5\u987b\u4f7f\u7528\u6700\u957f\u5468\u671f(lw) \u5404\u90e8\u4ef6\u5229\u7528\u7387\u4f4e \u63a7\u5236\u5668 \u6570\u636e\u901a\u8def \u5668\u4ef6 \u7aef\u53e3 \u53ef\u80fd\u503c Registers Write reg rt(I), rd(R) Write data $rs+$rt (R), mem data(lw) ALU $rt (R), imm(I) Data memory Address imm+$rs (I) Write data $rt (sw) \u591a\u5468\u671f \u6309\u6307\u4ee4\u7684\u6267\u884c\u5212\u5206\u591a\u4e2a\u5468\u671f\uff0c\u4e0d\u540c\u6307\u4ee4\u5468\u671f\u6570\u4e0d\u540c \u6307\u4ee4\u4e32\u884c\u6267\u884c \u5229\u7528\u7387\u4f9d\u7136\u504f\u4f4e \u6570\u636e\u901a\u8def \u6d41\u6c34\u7ebf\u6280\u672f \u5728\u6d41\u6c34\u7ebf\u7684\u5404\u4e2a\u6d41\u6c34\u6bb5\u4e4b\u95f4\u52a0\u5165\u4e86\u88ab\u79f0\u4e3a\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668(\u6d41\u6c34\u7ebf\u9501\u5b58\u5668)\u7684\u5bc4\u5b58\u5668\u5806\u3002 PC\u503c\u591a\u8def\u9009\u62e9\u5668\u88ab\u79fb\u5230IF\u6bb5\uff0c\u4fdd\u8bc1\u5bf9PC\u503c\u7684\u5199\u64cd\u4f5c\u53ea\u51fa\u73b0\u5728\u4e00\u4e2a\u6d41\u6c34\u6bb5\u5185\u3002 \u6bcf\u6761\u6307\u4ee4\u90fd\u53ea\u5728\u4e00\u4e2a\u6d41\u6c34\u6bb5\u4e0a\u662f\u6d3b\u52a8\u3002 \u7ed3\u6784\u51b2\u7a81 \u56e0\u8d44\u6e90\u51b2\u7a81\u800c\u65e0\u6cd5\u4f7f\u7528\u67d0\u79cd\u6307\u4ee4\u7ec4\u5408 \u6682\u505c\u6d41\u6c34\u7ebf\u6267\u884c,\u63d2\u5165\u7b49\u5f85\u5468\u671f \u589e\u52a0\u8d44\u6e90,\u89e3\u51b3\u8d44\u6e90\u51b2\u7a81 \u6570\u636e\u51b2\u7a81 \u5199\u540e\u8bfb\u51b2\u7a81 \u5199\u540e\u5199\u51b2\u7a81 \u8bfb\u540e\u5199\u51b2\u7a81 MIPS\u6307\u4ee4\u6d41\u6c34\u65e0\u540e\u4e24\u79cd\u51b2\u7a81\uff0c\u5728ID\u6bb5\u5b8c\u6210\u6240\u6709\u8bfb\u64cd\u4f5c\uff0cWB\u6bb5\u6240\u6709\u5199\u64cd\u4f5c\u3002 CC2, CC3\u53d1\u751f\u5199\u540e\u8bfb\u51b2\u7a81\u3002 \u65c1\u8def\u6280\u672f \u68c0\u6d4b Rd\u53ef\u80fd\u662f\u539f\u6307\u4ee4\u7684rt\u6216rd\u503c\u3002 // R\u578b\u6307\u4ee4 1a. EX/MEM.RegisterRd = ID/EX.RegisterRs 1b. EX/MEM.RegisterRd = ID/EX.RegisterRt // R\u578b\u6307\u4ee4\uff0c\u6216lw\u9694\u4e00\u5468\u671f\u540eR\u578b\u6307\u4ee4 2a. MEM/WB.RegisterRd = ID/EX.RegisterRs 2b. MEM/WB.RegisterRd = ID/EX.RegisterRt \u65c1\u8def\u5355\u5143 EX hazard: if (EX/MEM.RegWrite and (EX/MEM.RegisterRd \u2260 0) and (EX/MEM.RegisterRd = ID/EX.RegisterRs)) ForwardA = 10 if (EX/MEM.RegWrite and (EX/MEM.RegisterRd \u2260 0) and (EX/MEM.RegisterRd = ID/EX.RegisterRt)) ForwardB = 10 MEM hazard: if (MEM/WB.RegWrite and (MEM/WB.RegisterRd \u2260 0) and not(EX/MEM.RegWrite and (EX/MEM.RegisterRd \u2260 0) and (EX/MEM.RegisterRd \u2260 ID/EX.RegisterRs)) and (MEM/WB.RegisterRd = ID/EX.RegisterRs)) ForwardA = 01 if (MEM/WB.RegWrite and (MEM/WB.RegisterRd \u2260 0) and not(EX/MEM.RegWrite and (EX/MEM.RegisterRd \u2260 0) and (EX/MEM.RegisterRd \u2260 ID/EX.RegisterRt)) and (MEM/WB.RegisterRd = ID/EX.RegisterRt)) ForwardB = 01 \u6682\u505c if (ID/EX.MemRead and ((ID/EX.RegisterRt = IF/ID.RegisterRs) or (ID/EX.RegisterRt = IF/ID.RegisterRt))) stall the pipeline \u6682\u505c\uff1a \u5f53\u524d\u6307\u4ee4\u63a7\u5236\u4fe1\u53f7\u4e3a\uff10 PC\uff0cIF/ID\u503c\u4e0d\u53d8 \u9759\u6001\u8c03\u5ea6\u4e0e\u52a8\u6001\u8c03\u5ea6 \u52a8\u6001\u8c03\u5ea6\u5e76\u4e0d\u80fd\u771f\u6b63\u6d88\u9664\u6570\u636e\u51b2\u7a81\uff0c\u4f46\u5b83\u80fd\u5728\u51fa\u73b0\u6570\u636e\u51b2\u7a81\u65f6\u5c3d\u91cf\u907f\u514d\u51fa\u73b0\u5904\u7406\u5668\u6682\u505c\u3002\u800c\u9759\u6001\u8c03\u5ea6\u65b9\u6cd5 \u5219\u662f\u5c3d\u91cf\u901a\u8fc7\u5206\u79bb\u6709\u51b2\u7a81\u95ee\u9898\u7684\u6307\u4ee4\u4f7f\u5b83\u4eec\u4e0d\u4f1a\u5bfc\u81f4\u51b2\u7a81\uff0c\u4ece\u800c\u51cf\u5c11\u6682\u505c\u7684\u5f71\u54cd\u3002 \u6570\u636e\u901a\u8def \u63a7\u5236\u51b2\u7a81 \u6682\u505c\u6d41\u6c34\u7ebf \u5c3d\u65e9\u5224\u65ad\u5206\u652f\u8f6c\u79fb\u662f\u5426\u6210\u529f\uff0c\u5c3d\u65e9\u8ba1\u7b97\u6210\u529f\u8f6c\u79fb\u7684PC\u503c \u6570\u636e\u901a\u8def \u5728ID\u6bb5\u589e\u52a0\u6bd4\u8f83\u5668\uff0c\u5b8c\u6210\u6e90\u64cd\u4f5c\u6570\u7684\u6bd4\u8f83\uff0c\u8c03\u6574\u52a0\u6cd5\u5668\u5230ID\u6bb5\uff0c\u5b8c\u6210\u8f6c\u79fb\u5730\u5740\u7684\u8ba1\u7b97\u3002 \u82e5\u76f8\u7b49\u5219\u8f6c\u79fb PCsrc\u9009\u62e9\u8f6c\u79fb\u76ee\u6807\u5730\u5740(PC=\u76ee\u7684\u5730\u5740) \u6e05\u9664IF/ID\u6bb5\u5bc4\u5b58\u5668\u7684\u503c(IF/ID\u5bc4\u5b58\u5668=NOP) \u5f53\u524d\u6307\u4ee4\u7684\u63a7\u5236\u4fe1\u53f7\u4e3a0(ID/EX\u5bc4\u5b58\u5668=0) \u82e5\u4e0d\u7b49\uff0c\u5219\u987a\u5e8f\u6267\u884c PCsrc\u9009\u62e9\u987a\u5e8f\u6267\u884c(PC=PC+4) \u4fdd\u7559IF/ID\u6bb5\u5bc4\u5b58\u5668\u7684\u503c(IF/ID\u5bc4\u5b58\u5668=BEQ\u7684\u540e\u4e00\u6761\u6307\u4ee4) \u5f53\u524d\u6307\u4ee4\u7684\u63a7\u5236\u4fe1\u53f7\u4e3a0(ID/EX\u5bc4\u5b58\u5668=0) \u7531\u4e8ebeq\u548c\u524d\u4e00\u6761\u6307\u4ee4\u53ef\u80fd\u5b58\u5728\u6570\u636e\u51b2\u7a81\uff0c\u6240\u4ee5\u6570\u636e\u65c1\u8def\u8fd8\u9700\u8981\u63d0\u524d\u3002 \u5206\u652f\u9884\u6d4b \u9884\u6d4b\u6210\u529f\uff0c\u9884\u6d4b\u4e0d\u6210\u529f \u4e0a\u56fe\u5b9e\u9645\u4e0a\u662f\u9884\u6d4b\u4e0d\u6210\u529f\u7684\u4e00\u79cd\u5b9e\u73b0\u3002 \u52a8\u6001\u9884\u6d4b \u786c\u4ef6\u6839\u636e\u4e0a\u6b21\u5206\u652f\u7684\u7ed3\u679c\u8fdb\u884c\u672c\u6b21\u9884\u6d4b \u53ef\u589e\u52a0\u81f3\uff12\u4f4d\u9884\u6d4b\u4f4d\u3002 \u7f16\u8bd1\u5668\u5904\u7406 \u5ef6\u8fdf\u69fd \u5f02\u5e38 \u589e\u52a0\u5f02\u5e38\u539f\u56e0\u5bc4\u5b58\u5668\uff0c\u4fdd\u5b58\u5f02\u5e38\u7684\u539f\u56e0 \u53d1\u73b0\u5f02\u5e38 \u5355\u5468\u671f\uff0c\u591a\u5468\u671f \u5728\u6bcf\u6761\u6307\u4ee4\u7ed3\u675f\u65f6\uff0c\u589e\u52a0\u4e00\u4e2a\u68c0\u67e5\u5f02\u5e38\uff08\u4e2d\u65ad\uff09\u662f\u5426\u53d1\u751f\u7684\u6b65\u9aa4 \u6d41\u6c34 \u5904\u7406\u8981\u6c42 \u6307\u4ee4\u6d41\u6c34\u7ebf\u4e2d\u67095\u6761\u6307\u4ee4\u6b63\u5728\u6267\u884c \u5224\u65ad\u53d1\u751f\u5f02\u5e38\u7684\u4f4d\u7f6e \u4fdd\u7559\u53d1\u751f\u5f02\u5e38\u7684\u73b0\u573a \u6267\u884c\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f \u786c\u4ef6 EPC Cause MIPS CP0 \u5982\u4e0b\u56fe\u4e3a\u5728EX\u9636\u6bb5\u589e\u52a0\u4e00\u4e2a\u5f02\u5e38\u68c0\u6d4b\u7684\u6570\u636e\u901a\u8def\uff0c\u82e5\u53d1\u751f\u5f02\u5e38\uff0c\u8fd8\u9700\u5c06IF/ID\u5199\u5165nop\uff0cID/EX\uff0cEX/MEM\u7684\u63a7\u5236\u4fe1\u53f7\u51990\u3002","title":"MIPS CPU"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#mips-cpu","text":"","title":"MIPS CPU"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_1","text":"\u7c7b\u578b \u4ee3\u8868\u6307\u4ee4 \u4f5c\u7528 R add $rd, $rs, $rt $rd = $rs + $rt I addi $rt, $rs, imm $rt = $rs + imm I beq if ($rt==$rs) PC+=4+(imm<<2) I lw/sw $rt, imm($rs) J j addr PC=PC&0xf0000000|(addr<<2)","title":"\u6307\u4ee4"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_2","text":"\u6307\u4ee4\u5468\u671f\u957f\uff0c\u6240\u6709\u6307\u4ee4\u5fc5\u987b\u4f7f\u7528\u6700\u957f\u5468\u671f(lw) \u5404\u90e8\u4ef6\u5229\u7528\u7387\u4f4e","title":"\u5355\u5468\u671f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_3","text":"","title":"\u63a7\u5236\u5668"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_4","text":"\u5668\u4ef6 \u7aef\u53e3 \u53ef\u80fd\u503c Registers Write reg rt(I), rd(R) Write data $rs+$rt (R), mem data(lw) ALU $rt (R), imm(I) Data memory Address imm+$rs (I) Write data $rt (sw)","title":"\u6570\u636e\u901a\u8def"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_5","text":"\u6309\u6307\u4ee4\u7684\u6267\u884c\u5212\u5206\u591a\u4e2a\u5468\u671f\uff0c\u4e0d\u540c\u6307\u4ee4\u5468\u671f\u6570\u4e0d\u540c \u6307\u4ee4\u4e32\u884c\u6267\u884c \u5229\u7528\u7387\u4f9d\u7136\u504f\u4f4e","title":"\u591a\u5468\u671f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_6","text":"","title":"\u6570\u636e\u901a\u8def"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_7","text":"\u5728\u6d41\u6c34\u7ebf\u7684\u5404\u4e2a\u6d41\u6c34\u6bb5\u4e4b\u95f4\u52a0\u5165\u4e86\u88ab\u79f0\u4e3a\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668(\u6d41\u6c34\u7ebf\u9501\u5b58\u5668)\u7684\u5bc4\u5b58\u5668\u5806\u3002 PC\u503c\u591a\u8def\u9009\u62e9\u5668\u88ab\u79fb\u5230IF\u6bb5\uff0c\u4fdd\u8bc1\u5bf9PC\u503c\u7684\u5199\u64cd\u4f5c\u53ea\u51fa\u73b0\u5728\u4e00\u4e2a\u6d41\u6c34\u6bb5\u5185\u3002 \u6bcf\u6761\u6307\u4ee4\u90fd\u53ea\u5728\u4e00\u4e2a\u6d41\u6c34\u6bb5\u4e0a\u662f\u6d3b\u52a8\u3002","title":"\u6d41\u6c34\u7ebf\u6280\u672f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_8","text":"\u56e0\u8d44\u6e90\u51b2\u7a81\u800c\u65e0\u6cd5\u4f7f\u7528\u67d0\u79cd\u6307\u4ee4\u7ec4\u5408 \u6682\u505c\u6d41\u6c34\u7ebf\u6267\u884c,\u63d2\u5165\u7b49\u5f85\u5468\u671f \u589e\u52a0\u8d44\u6e90,\u89e3\u51b3\u8d44\u6e90\u51b2\u7a81","title":"\u7ed3\u6784\u51b2\u7a81"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_9","text":"\u5199\u540e\u8bfb\u51b2\u7a81 \u5199\u540e\u5199\u51b2\u7a81 \u8bfb\u540e\u5199\u51b2\u7a81 MIPS\u6307\u4ee4\u6d41\u6c34\u65e0\u540e\u4e24\u79cd\u51b2\u7a81\uff0c\u5728ID\u6bb5\u5b8c\u6210\u6240\u6709\u8bfb\u64cd\u4f5c\uff0cWB\u6bb5\u6240\u6709\u5199\u64cd\u4f5c\u3002 CC2, CC3\u53d1\u751f\u5199\u540e\u8bfb\u51b2\u7a81\u3002","title":"\u6570\u636e\u51b2\u7a81"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_10","text":"\u68c0\u6d4b Rd\u53ef\u80fd\u662f\u539f\u6307\u4ee4\u7684rt\u6216rd\u503c\u3002 // R\u578b\u6307\u4ee4 1a. EX/MEM.RegisterRd = ID/EX.RegisterRs 1b. EX/MEM.RegisterRd = ID/EX.RegisterRt // R\u578b\u6307\u4ee4\uff0c\u6216lw\u9694\u4e00\u5468\u671f\u540eR\u578b\u6307\u4ee4 2a. MEM/WB.RegisterRd = ID/EX.RegisterRs 2b. MEM/WB.RegisterRd = ID/EX.RegisterRt \u65c1\u8def\u5355\u5143 EX hazard: if (EX/MEM.RegWrite and (EX/MEM.RegisterRd \u2260 0) and (EX/MEM.RegisterRd = ID/EX.RegisterRs)) ForwardA = 10 if (EX/MEM.RegWrite and (EX/MEM.RegisterRd \u2260 0) and (EX/MEM.RegisterRd = ID/EX.RegisterRt)) ForwardB = 10 MEM hazard: if (MEM/WB.RegWrite and (MEM/WB.RegisterRd \u2260 0) and not(EX/MEM.RegWrite and (EX/MEM.RegisterRd \u2260 0) and (EX/MEM.RegisterRd \u2260 ID/EX.RegisterRs)) and (MEM/WB.RegisterRd = ID/EX.RegisterRs)) ForwardA = 01 if (MEM/WB.RegWrite and (MEM/WB.RegisterRd \u2260 0) and not(EX/MEM.RegWrite and (EX/MEM.RegisterRd \u2260 0) and (EX/MEM.RegisterRd \u2260 ID/EX.RegisterRt)) and (MEM/WB.RegisterRd = ID/EX.RegisterRt)) ForwardB = 01","title":"\u65c1\u8def\u6280\u672f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_11","text":"if (ID/EX.MemRead and ((ID/EX.RegisterRt = IF/ID.RegisterRs) or (ID/EX.RegisterRt = IF/ID.RegisterRt))) stall the pipeline \u6682\u505c\uff1a \u5f53\u524d\u6307\u4ee4\u63a7\u5236\u4fe1\u53f7\u4e3a\uff10 PC\uff0cIF/ID\u503c\u4e0d\u53d8","title":"\u6682\u505c"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_12","text":"\u52a8\u6001\u8c03\u5ea6\u5e76\u4e0d\u80fd\u771f\u6b63\u6d88\u9664\u6570\u636e\u51b2\u7a81\uff0c\u4f46\u5b83\u80fd\u5728\u51fa\u73b0\u6570\u636e\u51b2\u7a81\u65f6\u5c3d\u91cf\u907f\u514d\u51fa\u73b0\u5904\u7406\u5668\u6682\u505c\u3002\u800c\u9759\u6001\u8c03\u5ea6\u65b9\u6cd5 \u5219\u662f\u5c3d\u91cf\u901a\u8fc7\u5206\u79bb\u6709\u51b2\u7a81\u95ee\u9898\u7684\u6307\u4ee4\u4f7f\u5b83\u4eec\u4e0d\u4f1a\u5bfc\u81f4\u51b2\u7a81\uff0c\u4ece\u800c\u51cf\u5c11\u6682\u505c\u7684\u5f71\u54cd\u3002","title":"\u9759\u6001\u8c03\u5ea6\u4e0e\u52a8\u6001\u8c03\u5ea6"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_13","text":"","title":"\u6570\u636e\u901a\u8def"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_14","text":"","title":"\u63a7\u5236\u51b2\u7a81"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_15","text":"\u5c3d\u65e9\u5224\u65ad\u5206\u652f\u8f6c\u79fb\u662f\u5426\u6210\u529f\uff0c\u5c3d\u65e9\u8ba1\u7b97\u6210\u529f\u8f6c\u79fb\u7684PC\u503c","title":"\u6682\u505c\u6d41\u6c34\u7ebf"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_16","text":"\u5728ID\u6bb5\u589e\u52a0\u6bd4\u8f83\u5668\uff0c\u5b8c\u6210\u6e90\u64cd\u4f5c\u6570\u7684\u6bd4\u8f83\uff0c\u8c03\u6574\u52a0\u6cd5\u5668\u5230ID\u6bb5\uff0c\u5b8c\u6210\u8f6c\u79fb\u5730\u5740\u7684\u8ba1\u7b97\u3002 \u82e5\u76f8\u7b49\u5219\u8f6c\u79fb PCsrc\u9009\u62e9\u8f6c\u79fb\u76ee\u6807\u5730\u5740(PC=\u76ee\u7684\u5730\u5740) \u6e05\u9664IF/ID\u6bb5\u5bc4\u5b58\u5668\u7684\u503c(IF/ID\u5bc4\u5b58\u5668=NOP) \u5f53\u524d\u6307\u4ee4\u7684\u63a7\u5236\u4fe1\u53f7\u4e3a0(ID/EX\u5bc4\u5b58\u5668=0) \u82e5\u4e0d\u7b49\uff0c\u5219\u987a\u5e8f\u6267\u884c PCsrc\u9009\u62e9\u987a\u5e8f\u6267\u884c(PC=PC+4) \u4fdd\u7559IF/ID\u6bb5\u5bc4\u5b58\u5668\u7684\u503c(IF/ID\u5bc4\u5b58\u5668=BEQ\u7684\u540e\u4e00\u6761\u6307\u4ee4) \u5f53\u524d\u6307\u4ee4\u7684\u63a7\u5236\u4fe1\u53f7\u4e3a0(ID/EX\u5bc4\u5b58\u5668=0) \u7531\u4e8ebeq\u548c\u524d\u4e00\u6761\u6307\u4ee4\u53ef\u80fd\u5b58\u5728\u6570\u636e\u51b2\u7a81\uff0c\u6240\u4ee5\u6570\u636e\u65c1\u8def\u8fd8\u9700\u8981\u63d0\u524d\u3002","title":"\u6570\u636e\u901a\u8def"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_17","text":"","title":"\u5206\u652f\u9884\u6d4b"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_18","text":"\u4e0a\u56fe\u5b9e\u9645\u4e0a\u662f\u9884\u6d4b\u4e0d\u6210\u529f\u7684\u4e00\u79cd\u5b9e\u73b0\u3002","title":"\u9884\u6d4b\u6210\u529f\uff0c\u9884\u6d4b\u4e0d\u6210\u529f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_19","text":"\u786c\u4ef6\u6839\u636e\u4e0a\u6b21\u5206\u652f\u7684\u7ed3\u679c\u8fdb\u884c\u672c\u6b21\u9884\u6d4b \u53ef\u589e\u52a0\u81f3\uff12\u4f4d\u9884\u6d4b\u4f4d\u3002","title":"\u52a8\u6001\u9884\u6d4b"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_20","text":"\u5ef6\u8fdf\u69fd","title":"\u7f16\u8bd1\u5668\u5904\u7406"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_21","text":"\u589e\u52a0\u5f02\u5e38\u539f\u56e0\u5bc4\u5b58\u5668\uff0c\u4fdd\u5b58\u5f02\u5e38\u7684\u539f\u56e0 \u53d1\u73b0\u5f02\u5e38","title":"\u5f02\u5e38"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_22","text":"\u5728\u6bcf\u6761\u6307\u4ee4\u7ed3\u675f\u65f6\uff0c\u589e\u52a0\u4e00\u4e2a\u68c0\u67e5\u5f02\u5e38\uff08\u4e2d\u65ad\uff09\u662f\u5426\u53d1\u751f\u7684\u6b65\u9aa4","title":"\u5355\u5468\u671f\uff0c\u591a\u5468\u671f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/mips_cpu/#_23","text":"\u5904\u7406\u8981\u6c42 \u6307\u4ee4\u6d41\u6c34\u7ebf\u4e2d\u67095\u6761\u6307\u4ee4\u6b63\u5728\u6267\u884c \u5224\u65ad\u53d1\u751f\u5f02\u5e38\u7684\u4f4d\u7f6e \u4fdd\u7559\u53d1\u751f\u5f02\u5e38\u7684\u73b0\u573a \u6267\u884c\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f \u786c\u4ef6 EPC Cause MIPS CP0 \u5982\u4e0b\u56fe\u4e3a\u5728EX\u9636\u6bb5\u589e\u52a0\u4e00\u4e2a\u5f02\u5e38\u68c0\u6d4b\u7684\u6570\u636e\u901a\u8def\uff0c\u82e5\u53d1\u751f\u5f02\u5e38\uff0c\u8fd8\u9700\u5c06IF/ID\u5199\u5165nop\uff0cID/EX\uff0cEX/MEM\u7684\u63a7\u5236\u4fe1\u53f7\u51990\u3002","title":"\u6d41\u6c34"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/","text":"\u5b58\u50a8\u5668\u4e0eIO \u5c42\u6b21\u5b58\u50a8\u5668\u7cfb\u7edf \u7a0b\u5e8f\u8fd0\u884c\u7684\u5c40\u90e8\u6027\u539f\u7406 \u65f6\u95f4\u5c40\u90e8\u6027:\u6700\u8fd1\u88ab\u8bbf\u95ee\u8fc7\u7684\u7a0b\u5e8f\u548c\u6570\u636e\u5f88\u53ef\u80fd\u518d\u6b21\u88ab\u8bbf\u95ee \u7a7a\u95f4\u5c40\u90e8\u6027:CPU \u5f88\u53ef\u80fd\u8bbf\u95ee\u6700\u8fd1\u88ab\u8bbf\u95ee\u8fc7\u7684\u5730\u5740\u5355\u5143\u9644\u8fd1\u7684\u5730\u5740\u5355\u5143\u3002 \u5c42\u6b21\u4e4b\u95f4\u5e94\u6ee1\u8db3\u7684\u539f\u5219: \u4e00\u81f4\u6027\u539f\u5219:\u5904\u5728\u4e0d\u540c\u5c42\u6b21\u5b58\u50a8\u5668\u4e2d\u7684\u540c\u4e00\u4e2a\u4fe1\u606f\u5e94\u4fdd\u6301\u76f8\u540c\u7684\u503c\u3002 \u5305\u542b\u6027\u539f\u5219:\u5904\u5728\u5185\u5c42\u7684\u4fe1\u606f\u4e00\u5b9a\u88ab\u5305\u542b\u5728\u5176\u5916\u5c42\u7684\u5b58\u50a8\u5668\u4e2d,\u53cd\u4e4b\u5219\u4e0d\u6210\u7acb\u3002 \u603b\u7ebf\uff1a \u5730\u5740\u603b\u7ebf\u7528\u4e8e\u9009\u62e9\u4e3b\u5b58\u50a8\u5668\u7684\u4e00\u4e2a\u5b58\u50a8\u5355\u5143(\u5b57\u6216\u5b57\u8282),\u5176\u4f4d\u6570\u51b3\u5b9a\u4e86\u80fd\u591f\u8bbf\u95ee\u7684\u5b58\u50a8\u5355\u5143\u7684\u6700\u5927\u6570\u76ee,\u79f0\u4e3a\u6700\u5927\u53ef\u5bfb\u5740\u7a7a\u95f4\u3002 \u6570\u636e\u603b\u7ebf\u7528\u4e8e\u5728\u8ba1\u7b97\u673a\u5404\u529f\u80fd\u90e8\u4ef6\u4e4b\u95f4\u4f20\u9001\u6570\u636e,\u5176\u4f4d\u6570(\u603b\u7ebf\u7684\u5bbd\u5ea6)\u4e0e\u603b\u7ebf\u65f6\u949f\u9891\u7387\u7684\u4e58\u79ef,\u4e0e\u8be5\u603b\u7ebf\u6240\u652f\u6301\u7684\u6700\u9ad8\u6570\u636e\u541e\u5410(\u8f93\u5165/\u8f93\u51fa)\u80fd\u529b\u6210\u6b63\u6bd4\u3002 \u63a7\u5236\u603b\u7ebf\u7528\u4e8e\u6307\u660e\u603b\u7ebf\u7684\u5de5\u4f5c\u5468\u671f\u7c7b\u578b\u548c\u672c\u6b21\u5165/\u51fa\u5b8c\u6210\u7684\u65f6\u523b\u3002 \u52a8\u6001\u5b58\u50a8\u5668 DRAM\uff0c\u9759\u6001\u5b58\u50a8\u5668 \u52a8\u6001\u5b58\u50a8\u5668\uff1a\u7528\u91d1\u5c5e\u6c27\u5316\u7269\u534a\u5bfc\u4f53(MOS)\u7684\u5355\u4e2a MOS \u7ba1\u5b58\u50a8\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d(bit)\u4fe1\u606f\u3002\u4fe1\u606f\u88ab\u5b58\u50a8\u5728 MOS \u7ba1 T \u7684\u6e90\u6781\u7684\u5bc4\u751f\u7535\u5bb9 C S \u4e2d,\u6709\u7535\u8377\u8868\u793a 1,\u65e0\u7535\u8377\u8868\u793a 0\u3002 \u5b58\u50a8\u4fe1\u606f \u9001\u884c\u5217\u5730\u5740 \u96c6\u6210\u5ea6 \u53d1\u70ed\u91cf SRAM \u89e6\u53d1\u5668 \u540c\u65f6 \u4f4e \u5927 DRAM \u7535\u5bb9 \u5206\u4e24\u6b21 \u9ad8 \u5c0f \u9ad8\u901f\u7f13\u51b2\u5b58\u50a8\u5668 Cache \u4e3b\u5b58\u548c CPU \u4e4b\u95f4\u7684\u5b58\u50a8\u5668,\u7528\u9ad8\u901f\u7684\u9759\u6001\u5b58\u50a8\u5668\u5b9e\u73b0,\u7f13\u5b58\u4e86CPU \u9891\u7e41\u8bbf\u95ee\u7684\u4fe1\u606f\u3002\u9ad8\u901f,\u900f\u660e\u3002 Cache \u63a5\u5165\u7cfb\u7edf\u7684\u4f53\u7cfb\u7ed3\u6784\uff1a\u4fa7\u63a5\u6cd5\uff0c\u9694\u65ad\u6cd5 \u8981\u89e3\u51b3\u7684\u95ee\u9898 \u5730\u5740\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb:\u5982\u4f55\u6839\u636e\u4e3b\u5b58\u5730\u5740\u5f97\u5230 Cache \u4e2d\u7684\u6570\u636e? \u6570\u636e\u4e4b\u95f4\u4e00\u81f4\u6027:Cache \u4e2d\u7684\u5185\u5bb9\u662f\u5426\u5df2\u7ecf\u662f\u4e3b\u5b58\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9? \u6570\u636e\u4ea4\u6362\u7684\u7c92\u5ea6:Cache \u4e2d\u7684\u5185\u5bb9\u4e0e\u4e3b\u5b58\u5185\u5bb9\u4ee5\u591a\u5927\u7684\u7c92\u5ea6\u4ea4\u6362? Cache \u5185\u5bb9\u88c5\u5165\u548c\u66ff\u6362\u7b56\u7565:\u5982\u4f55\u63d0\u9ad8 Cache \u7684\u547d\u4e2d\u7387? \\text{\u5e73\u5747\u8bbf\u95ee\u65f6\u95f4}=HR*\\text{\u547d\u4e2d\u65f6\u95f4}+(1-HR)*\\text{\u5931\u6548\u635f\u5931} \\text{\u5e73\u5747\u8bbf\u95ee\u65f6\u95f4}=HR*\\text{\u547d\u4e2d\u65f6\u95f4}+(1-HR)*\\text{\u5931\u6548\u635f\u5931} HR HR \u4e3a\u547d\u4e2d\u7387\u3002 \u5730\u5740\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb \u5168\u76f8\u8054\u65b9\u5f0f \u76f4\u63a5\u6620\u5c04 \u591a\u8def\u7ec4\u76f8\u8054 \u4e00\u81f4\u6027\u4fdd\u8bc1 Cache\uff08\u4e0d\u547d\u4e2d\uff09\u5199 \u63d0\u9ad8 Cache \u7684\u547d\u4e2d\u7387 \u5fc5\u7136\u7f3a\u5931 Compulsory Miss(\u5f00\u673a\u6216\u8005\u662f\u8fdb\u7a0b\u5207\u6362\u3001\u9996\u6b21\u8bbf\u95ee \u6570\u636e\u5757) \u5bb9\u91cf\u7f3a\u5931 Capacity Miss(\u6d3b\u52a8\u6570\u636e\u96c6\u8d85\u51fa\u4e86 Cache \u7684\u5927\u5c0f) \u51b2\u7a81\u7f3a\u5931 Conflict Miss (\u591a\u4e2a\u5185\u5b58\u5757\u6620\u5c04\u5230\u540c\u4e00 Cache \u5757\u3001\u67d0\u4e00 Cache \u7ec4\u5757\u5df2\u6ee1\u4f46\u7a7a\u95f2\u7684 Cache \u5757\u5728\u5176\u4ed6 \u7ec4) \u65e0\u6548\u7f3a\u5931(\u5176\u4ed6\u8fdb\u7a0b\u4fee\u6539\u4e86\u4e3b\u5b58\u6570\u636e) \u66ff\u6362\u7b97\u6cd5:\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u7684(LRU)\u3001\u5148\u8fdb\u5148\u51fa(FIFO)\u3001\u968f\u673a\u66ff\u6362(RAND) \u865a\u62df\u5b58\u50a8\u5668 \u865a\u5b58 Cache \u4e3b\u8981\u76ee\u7684\u662f\u5b9e\u73b0\u5b58\u50a8\u7ba1\u7406,\u5e2e\u52a9\u89e3\u51b3\u5b58\u50a8\u5bb9\u91cf\u7684\u95ee\u9898\u3002 \u4e3b\u8981\u76ee\u7684\u662f\u89e3\u51b3\u5b58\u50a8\u901f\u5ea6\u95ee\u9898,\u4f7f\u5b58\u50a8\u5668\u8bbf\u95ee\u901f\u5ea6\u4e0d\u592a\u5f71\u54cd CPU \u7684\u8fd0\u884c\u901f\u5ea6\u3002 \u5355\u4f4d\u65f6\u95f4\u5185\u6570\u636e\u4ea4\u6362\u6b21\u6570\u5c11,\u6bcf\u6b21\u4ea4\u6362\u6570\u636e\u91cf\u5927 \u5355\u4f4d\u65f6\u95f4\u5185\u6570\u636e\u4ea4\u6362\u7684\u6b21\u6570\u591a,\u6bcf\u6b21\u4ea4\u6362\u6570\u636e\u91cf\u5c0f \u7531\u64cd\u4f5c\u7cfb\u7edf\u7ba1\u7406 \u7531\u786c\u4ef6\u5b9e\u73b0 \u865a\u62df\u5b58\u50a8\u5668\u7ba1\u7406 \u6bb5\u5f0f\u5b58\u50a8\u7ba1\u7406 \u4ee5\u6bb5\u4f5c\u4e3a\u5b58\u50a8\u7ba1\u7406\u7684\u5bf9\u8c61,\u6bb5\u957f\u52a8\u6001\u53ef\u53d8,\u6bb5\u8d77\u70b9\u3001\u7ec8\u70b9\u4e0d\u5b9a\u3002\u6613\u4e8e\u7f16\u8bd1\u3001\u7ba1\u7406\u3001\u4fee\u6539\u3001\u4fdd\u62a4\u548c\u5171\u4eab,\u7a7a\u95f4\u5206\u914d\u56f0\u96be,\u5bb9\u6613\u4ea7\u751f\u788e\u7247\u3002 \u6bb5(Segment)\u7a0b\u5e8f\u6a21\u5757\u5316\u8bbe\u8ba1\u7684\u7ed3\u679c(\u8fc7\u7a0b\u3001\u51fd\u6570\u3001\u6570\u7ec4\u3001...),\u903b\u8f91\u4e0a\u76f8\u5bf9\u72ec\u7acb,\u662f\u5171\u4eab\u548c\u4fdd\u62a4\u7684\u6700\u5c0f\u5355\u5143\u3002 \u5b9e\u73b0:\u8bbe\u7f6e\u6bb5\u8868\u8fdb\u884c\u7ba1\u7406,\u6bb5\u8868\u57fa\u5730\u5740,\u6bb5\u8d77\u59cb\u5730\u5740,\u6bb5\u957f,\u88c5\u5165\u4f4d,\u4fdd\u62a4\u3001\u5171\u4eab\u7b49\u6807\u5fd7\u3002 \u9875\u5f0f\u5b58\u50a8\u7ba1\u7406 \u5c06\u4e3b\u5b58\u548c\u865a\u5b58\u5212\u5206\u4e3a\u56fa\u5b9a\u5927\u5c0f\u7684\u9875,\u4ee5\u9875\u4e3a\u5355\u4f4d\u8fdb\u884c\u7ba1\u7406\u548c\u6570\u636e\u4ea4\u6362\u3002 \u865a\u5730\u5740=\u865a\u9875\u53f7+\u9875\u5185\u5730\u5740;\u5b9e\u5730\u5740=\u5b9e\u9875\u53f7+\u9875\u5185\u5730\u5740\u3002 \u5b9e\u73b0:\u901a\u8fc7\u9875\u8868\u8fdb\u884c\u7ba1\u7406,\u9875\u8868\u57fa\u5730\u5740\u5bc4\u5b58\u5668,\u5b9e\u9875\u53f7,\u63a7\u5236\u4f4d\u3002 \u9875\u5f0f\u865a\u62df\u5b58\u50a8\u5668\u7684\u8bbf\u95ee\u8fc7\u7a0b: \u5f97\u5230\u7a0b\u5e8f\u7ed9\u51fa\u7684\u865a\u5730\u5740; \u7531\u865a\u5730\u5740\u5f97\u5230\u865a\u9875\u53f7; \u8bbf\u95ee\u9875\u8868,\u5f97\u5230\u5bf9\u5e94\u7684\u5b9e\u9875\u53f7; \u82e5\u8be5\u9875\u5df2\u5728\u5185\u5b58\u4e2d,\u5219\u6839\u636e\u5b9e\u9875\u53f7\u5f97\u5230\u5b9e\u5730\u5740,\u8bbf\u95ee\u5185\u5b58; \u5426\u5219,\u542f\u52a8\u8f93\u5165\u8f93\u51fa\u7cfb\u7edf,\u8bfb\u51fa\u5bf9\u5e94\u9875\u88c5\u5165\u4e3b\u5b58,\u518d\u8fdb\u884c\u8bbf\u95ee\u3002 \u8f6c\u6362\u65c1\u8def\u7f13\u51b2(TLB) \u4e3a\u9875\u8868\u8bbe\u7f6e\u7684\u4e13\u7528 Cache,\u9ad8\u6548\u5b9e\u73b0\u865a\u9875\u53f7\u5230\u5b9e\u9875\u53f7\u7684\u8f6c\u6362,\u5bb9\u91cf\u8f83\u5c0f,128~256 \u4e2a\u8868\u9879\u3002 TLB \u7f3a\u5931:\u6d41\u6c34\u7ebf\u505c,\u901a\u77e5\u64cd\u4f5c\u7cfb\u7edf,\u8bfb\u9875\u8868,\u5c06\u8868\u9879\u5199\u5165 TLB,\u8fd4\u56de\u7528\u6237\u7a0b\u5e8f,\u91cd\u65b0\u8bbf\u95ee\u3002 \u9875\u9762\u5927\u5c0f:\u7f29\u5c0f\u9875\u9762\u5927\u5c0f\u53ef\u51cf\u5c11\u5185\u90e8\u788e\u7247,\u4f46\u9700\u66f4\u5927\u7684\u9875\u8868\u3002 \u9875\u9762\u66ff\u6362\u7b97\u6cd5:\u6700\u8fd1\u6700\u5c11\u4f7f\u7528(LRU) Pentium \u7684\u865a\u5b58\u7ba1\u7406 \u7a0b\u5e8f\u5458\u7ed9\u51fa\u7684\u865a\u62df\u5730\u5740,\u683c\u5f0f\u4e3a\u6bb5\u53f7+\u6bb5\u5185\u504f\u79fb(16\u4f4d+32\u4f4d),\u6bcf\u6bb5\u5927\u5c0f\u4e0d\u8d85\u8fc74GB\u3002 \u78c1\u8868\u9762\u5b58\u50a8\u8bbe\u5907 \u5bb9\u91cf\u5927,\u6210\u672c\u4f4e,\u65ad\u7535\u4fdd\u5b58,\u8131\u673a\u4fdd\u5b58,\u4e32\u884c\u8bbf\u95ee,\u6570\u636e\u4ea4\u6362\u9891\u7387\u4f4e,\u6570 \u636e\u4ea4\u6362\u91cf\u5927\u3002\u4e00\u822c\u4e3a\u78c1\u76d8\u3001\u5149\u76d8\u7b49\u3002 \u968f\u673a\u8bbf\u95ee \u968f\u673a\u8bbf\u95ee\u4efb\u4f55\u5355\u5143,\u8bbf\u95ee\u65f6\u95f4\u4e0e\u5b58\u653e\u4f4d\u7f6e\u65e0\u5173,\u6bcf\u4e00\u4f4d\u90fd\u6709\u5404\u81ea\u7684\u8bfb\u5199\u8bbe\u5907\u3002 \u4e32\u884c\u8bbf\u95ee \u987a\u5e8f\u6309\u4f4d\u8fdb\u884c,\u8bbf\u95ee\u65f6\u95f4\u4e0e\u5b58\u50a8\u4f4d\u7684\u7269\u7406\u4f4d\u7f6e\u6709\u5173,\u5171\u7528\u4e00\u4e2a\u8bfb\u5199\u8bbe\u5907\u3002 \u4e3b\u8981\u6307\u6807 \u5b58\u50a8\u5bc6\u5ea6,\u5b58\u50a8\u5bb9\u91cf,\u5bfb\u5740\u65f6\u95f4,\u6570\u636e\u4f20\u8f93\u7387,\u8bef\u7801\u7387,\u4ef7\u683c\u3002 \u78c1\u8bb0\u5f55\u65b9\u5f0f \u4e00\u79cd\u7f16\u7801\u65b9\u6cd5,\u5373\u5982\u4f55\u5c06\u4e00\u4e32\u4e8c\u8fdb\u5236\u4fe1\u606f,\u901a\u8fc7\u8bfb\u5199\u7535\u8def\u53d8\u6362\u6210\u78c1\u5c42\u4ecb\u8d28\u4e2d\u7684\u78c1\u5316\u7ffb\u8f6c\u5e8f\u5217\u3002(\u7f16\u7801\u6548\u7387,\u81ea\u540c\u6b65\u80fd\u529b,\u8bfb\u5199\u53ef\u9760\u6027) \u5f52\u96f6\u5236(RZ),\u4e0d\u5f52\u96f6\u5236(NRZ),\u89c1 1 \u7ffb\u8f6c\u7684\u4e0d\u5f52\u96f6\u5236(NRZ1),\u8c03\u76f8\u5236(PM),\u8c03\u9891\u5236(FM),\u6539\u8fdb\u7684\u8c03\u9891\u5236(MFM) \u78c1\u76d8 \u78c1\u76d8\u8bbf\u95ee\u65f6\u95f4= \u5bfb\u9053\u65f6\u95f4+ \u5e73\u5747\u65cb\u8f6c\u5ef6\u8fdf+ \u4f20\u8f93\u65f6\u95f4+ \u78c1\u76d8\u63a7\u5236\u5668\u5ef6\u8fdf \u4f8b:\u5e73\u5747\u5bfb\u9053\u65f6\u95f4= 12ms,\u65cb\u8f6c\u901f\u5ea6= 5400rpm,\u78c1\u76d8\u63a7\u5236\u5668\u5ef6\u8fdf=2ms,\u4f20\u8f93\u901f\u5ea6=5MB,\u6247\u533a\u5927\u5c0f= 512 bytes,\u9875\u5927\u5c0f 8KB\u3002 \u65cb\u8f6c 1 \u5468: 1/5400 minutes = 11.1ms => 1/2 \u5468:5.6 ms \u8bfb 1 \u4e2a\u6247\u533a:12ms + 5.6ms + .5K/5MB s+ 2ms = 12 + 5.6 + .1ms + 2ms = 19.7ms \u8bfb 1 \u9875\u7684\u65f6\u95f4:12 ms + 5.6ms + 8K/5MB s + 2ms = 12ms + 5.6ms + 1.6ms + 2ms = 21.2 ms \u91c7\u7528\u6d41\u6c34\u65b9\u5f0f\u548c\u5927\u5bb9\u91cf\u4f20\u8f93\u65b9\u5f0f(\u6bcf\u6b21\u8bfb\u53d6\u591a\u4e2a\u6247\u533a)\u514b\u670d\u78c1\u76d8\u63a7\u5236\u5668\u5ef6\u8fdf\u3002 \u989d\u5916\u5f00\u9500\u5728\u603b\u5f00\u9500\u4e2d\u6bd4\u4f8b\u8f83\u5927 => \u4e00\u6b21\u4f20\u8f93\u5927\u91cf\u6570\u636e\u6bd4\u8f83\u6709\u6548\u3002 \u5c06\u9875\u9762\u5b58\u653e\u5728\u76f8\u90bb\u6247\u533a\u4e2d\u53ef\u4ee5\u907f\u514d\u989d\u5916\u7684\u5bfb\u9053\u5f00\u9500\u3002 RAID \u6280\u672f \u53ef\u9760\u6027(reliability):\u8bbe\u5907\u51fa\u73b0\u6545\u969c\u7684\u51e0\u7387\u6765\u8861\u91cf\u3002 \u53ef\u7528\u6027(availability):\u7cfb\u7edf\u80fd\u6b63\u5e38\u8fd0\u884c\u7684\u51e0\u7387\u6765\u8861\u91cf\u3002 \u51fa\u6545\u969c\u540e\u4ecd\u80fd\u8fd0\u884c\u3002 \u76ee\u6807: N \u4e2a\u78c1\u76d8\u7684\u5bb9\u91cf, 1/N \u7684\u8bbf\u95ee\u65f6\u95f4,\u66f4\u9ad8\u7684\u6027\u4ef7\u6bd4,\u7528\u5197\u4f59\u6280\u672f\u63d0\u9ad8\u5b58\u50a8\u4fe1\u606f\u53ef\u7528\u6027\u3002\u63d0\u9ad8\u78c1\u76d8\u7684\u53ef\u7528\u6027\u548c\u6027\u80fd raid0 raid1 raid2 raid3 raid4 raid5 \u8f93\u5165/\u8f93\u51fa\u7cfb\u7edf \u8981\u89e3\u51b3\u7684\u95ee\u9898 \u63a7\u5236\u65b9\u5f0f:CPU \u5982\u4f55\u63a7\u5236\u8f93\u5165/\u8f93\u51fa?(\u8f93\u5165/\u8f93\u51fa\u65b9\u5f0f) \u4f20\u8f93\u65b9\u5f0f:\u4f20\u8f93\u901a\u9053\u3001\u65b9\u5f0f\u3001\u901f\u7387\u7b49(\u603b\u7ebf\u3001\u63a5\u53e3) \u6570\u636e\u8bc6\u522b\u548c\u8f6c\u6362:\u6570/\u6a21\u8f6c\u6362\u3001\u8bed\u97f3\u8bc6\u522b\u7b49,\u8f6c\u4e3a\u5b57\u7b26\u3001\u6570\u636e\u7b49\u8ba1\u7b97\u673a\u80fd\u8bc6\u522b\u7684\u683c\u5f0f(\u8bbe\u5907)\u3002 \u8f93\u5165/\u8f93\u51fa\u65b9\u5f0f \u7a0b\u5e8f\u76f4\u63a5\u63a7\u5236 CPU \u76f4\u63a5\u4f7f\u7528\u8f93\u5165/\u8f93\u51fa\u6307\u4ee4\u6765\u63a7\u5236\u5916\u90e8\u8bbe\u5907\u3002 CPU \u65b9\u67e5\u8be2\u63a5\u53e3\u72b6\u6001(\u5faa\u73af\u7b49\u5f85),\u76f4\u5230\u5916\u8bbe\u5df2\u7ecf\u63a5\u6536\u5230\u8be5\u5b57\u7b26,\u8bfb\u5b57\u7b26;\u5916\u8bbe\u65b9\u5f80\u63a5\u53e3\u6570\u636e\u7f13\u51b2\u4e2d\u9001\u5b57\u7b26,\u5904\u7406\u5b8c\u540e,\u7f6e\u72b6\u6001\u5bc4\u5b58\u5668,\u7b49\u5f85\u4e0b\u4e00\u4e2a\u5b57\u7b26\u3002 \u7a0b\u5e8f\u4e2d\u65ad \u5916\u90e8\u8bbe\u5907\u8bf7\u6c42,CPU \u6682\u505c\u6b63\u5728\u6267\u884c\u7684\u7a0b\u5e8f\u5e76\u54cd\u5e94,CPU \u4e0e\u5916\u8bbe\u5e76\u884c\u5de5\u4f5c,\u5b8c\u6210\u540e\u7ee7\u7eed\u6267\u884c\u539f\u6765\u7684\u7a0b\u5e8f\u3002\u6709\u4e2d\u65ad\u4f18\u5148\u7ea7\u3002 \u4e2d\u65ad\u6e90:\u5916\u4e2d\u65ad(I/O \u8bbe\u5907\u7b49),\u5f02\u5e38(\u5185\u4e2d\u65ad:\u5904\u7406\u5668\u786c\u4ef6\u6545\u969c\u3001\u7a0b\u5e8f\u201c\u51fa\u9519\u201d,Trap),\u4e2d\u65ad\u89e6\u53d1\u5668,\u4e2d\u65ad\u72b6\u6001\u5bc4\u5b58\u5668\u3002 \u5b8c\u6574\u8fc7\u7a0b:\u4e2d\u65ad\u8bf7\u6c42(\u4e2d\u65ad\u6e90\u8bbe\u5907\u8bbe\u7f6e\u4e2d\u65ad\u89e6\u53d1\u5668),\u4e2d\u65ad\u54cd\u5e94(\u54cd\u5e94\u6761\u4ef6:\u5141\u8bb8\u4e2d\u65ad\u3001\u5f53\u524d\u6307\u4ee4\u7ed3\u675f\u3001\u4f18\u5148\u7ea7,\u54cd\u5e94\u5b9e\u73b0:\u786c\u4ef6\u5b9e\u73b0\u7684\u4e2d\u65ad\u9690\u6307\u4ee4,\u4fdd\u5b58\u65ad\u70b9),\u4e2d\u65ad\u5904\u7406(\u4fdd\u5b58\u73b0\u573a\u4fe1\u606f,\u8fd0\u884c\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f,\u4e2d\u65ad\u8fd4\u56de)\u3002 \u5173\u4e2d\u65ad;\u4fdd\u5b58\u65ad\u70b9;\u5224\u4e2d\u65ad\u6e90,\u8f6c\u4e2d\u65ad\u670d\u52a1;\u5f00\u4e2d\u65ad;\u6267\u884c\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f;\u5173\u4e2d\u65ad;\u6062\u590d\u65ad\u70b9;\u5f00\u4e2d\u65ad;\u8fd4\u56de\u65ad\u70b9 \u76f4\u63a5\u5b58\u50a8\u8bbf\u95ee(DMA) I/O \u8bbe\u5907\u548c\u4e3b\u5b58\u50a8\u5668\u4e4b\u95f4\u7684\u76f4\u63a5\u6570\u636e\u901a\u8def,\u4e3a\u4e13\u8bbe\u7684\u786c\u4ef6,\u7528\u4e8e\u9ad8\u901f I/O \u8bbe\u5907\u548c\u4e3b\u5b58\u50a8\u5668\u4e4b\u95f4\u6210\u7ec4\u4f20\u9001\u6570\u636e\u3002 \u6570\u636e\u4f20\u9001\u5f00\u59cb\u524d\u548c\u7ed3\u675f\u540e\u901a\u8fc7\u7a0b\u5e8f\u6216\u4e2d\u65ad\u65b9\u5f0f\u5bf9 DMA \u8fdb\u884c\u9884\u5904\u7406\u548c\u540e\u5904\u7406\u3002 DMA \u5de5\u4f5c\u65b9\u5f0f:\u72ec\u5360\u603b\u7ebf\u65b9\u5f0f,\u5468\u671f\u7a83\u53d6\u65b9\u5f0f\u3002 Cache \u4e00\u81f4\u6027:\u4e3b\u5b58\u4e2d\u7684\u6570\u636e\u53ef\u80fd\u4e0d\u662f\u6700\u65b0\u7684,\u91c7\u7528\u76f4\u63a5\u5199\u4f1a\u5e26\u6765\u6027\u80fd\u7684\u964d\u4f4e,DMA \u67e5\u8be2Cache \u4f1a\u964d\u4f4e\u6027\u80fd,\u76f4\u63a5\u8bbe\u8ba1\u786c\u4ef6\u63a7\u5236\u3002 \u901a\u9053 I/O \u901a\u9053\u662f\u7cfb\u7edf\u4e2d\u4ee3\u66ff CPU \u7ba1\u7406\u63a7\u5236\u5916\u8bbe\u7684\u72ec\u7acb\u90e8\u4ef6,\u80fd\u6267\u884c\u6709\u9650 I/O \u6307\u4ee4\u96c6\u5408\u3002 \u901a\u9053\u7c7b\u578b:\u5b57\u8282\u591a\u8def\u901a\u9053(\u7b80\u5355\u7684\u5171\u4eab\u901a\u9053,\u5206\u65f6\u5904\u7406,\u9762\u5411\u4f4e\u3001\u4e2d\u901f\u5b57\u7b26\u8bbe\u5907);\u9009\u62e9\u901a\u9053(\u9009\u62e9\u4e00\u53f0\u5916\u8bbe\u72ec\u5360\u6574\u4e2a\u901a\u9053,\u4ee5\u6210\u7ec4\u4f20\u9001\u65b9\u5f0f\u4f20\u9001\u6570\u636e\u5757,\u6548\u7387\u9ad8,\u9002\u5408\u5feb\u901f\u8bbe\u5907);\u6570\u7ec4\u591a\u8def\u901a\u9053(\u4e0a\u4e24\u79cd\u65b9\u5f0f\u7684\u7ed3\u5408,\u6548\u7387\u9ad8,\u63a7\u5236\u590d\u6742) \u5916\u56f4\u5904\u7406\u673a \u901a\u9053\u578b\u5904\u7406\u673a:\u5171\u4eab\u5185\u5b58 \u603b\u7ebf \u5206\u7c7b \u5904\u7406\u5668-\u4e3b\u5b58\u603b\u7ebf(\u4e13\u7528) \u4f20\u8f93\u8ddd\u79bb\u77ed\u3001\u901f\u5ea6\u9ad8,\u4e3b\u5b58\u50a8\u5668\u4e13\u7528 \u76f4\u63a5\u548c\u5904\u7406\u5668\u8fde\u63a5 \u76f4\u63a5\u548c\u5904\u7406\u5668\u8fde\u63a5 \u8f93\u5165 / \u8f93\u51fa\u603b\u7ebf(\u884c\u4e1a\u6807\u51c6) \u901a\u5e38\u8ddd\u79bb\u8f83\u957f,\u901f\u5ea6\u8f83\u6162 \u9700\u8981\u9002\u5e94\u591a\u79cd\u8f93\u5165/\u8f93\u51fa\u8bbe\u5907 \u548c\u5904\u7406\u5668-\u4e3b\u5b58\u603b\u7ebf\u901a\u8fc7\u6865\u8fde\u63a5(\u6216\u901a\u8fc7\u4e3b\u677f\u603b\u7ebf) \u4e3b\u677f\u603b\u7ebf(\u884c\u4e1a\u6807\u51c6\u6216\u4e13\u95e8\u8bbe\u8ba1) \u4e3b\u677f:\u8fde\u63a5\u5404\u90e8\u4ef6\u5668\u4ef6\u7684\u5e95\u76d8 \u5e94\u5141\u8bb8\u5904\u7406\u5668\u3001\u4e3b\u5b58\u50a8\u5668\u548c\u8f93\u5165/\u8f93\u51fa\u8bbe\u5907\u4e92\u8fde \u5e94\u6709\u4ef7\u683c\u4f18\u52bf:\u6240\u6709\u7ec4\u4ef6\u8fde\u63a5\u5728\u4e00\u6761\u603b\u7ebf\u4e0a \u7ec4\u6210 \u63a7\u5236\u7ebf:\u6807\u8bb0\u603b\u7ebf\u4e8b\u52a1\u7684\u5f00\u59cb\u548c\u7ed3\u675f,\u6307\u660e\u6570\u636e\u7ebf\u4e0a\u4f20\u8f93\u4fe1\u606f\u7684\u7c7b\u578b\u3002 \u6570\u636e\u7ebf:\u5728\u6e90\u8bbe\u5907\u548c\u76ee\u6807\u8bbe\u5907\u95f4\u4f20\u9001\u4fe1\u606f\u3002 \u76f8\u5173\u6982\u5ff5: \u603b\u7ebf\u4e3b\u8bbe\u5907:\u6709\u80fd\u529b\u63a7\u5236\u603b\u7ebf,\u53d1\u8d77\u603b\u7ebf\u4e8b\u52a1 \u603b\u7ebf\u4ece\u8bbe\u5907:\u54cd\u5e94\u4e3b\u8bbe\u5907\u8bf7\u6c42 \u603b\u7ebf\u901a\u4fe1\u534f\u8bae:\u5b9a\u4e49\u603b\u7ebf\u4f20\u8f93\u4e2d\u7684\u4e8b\u4ef6\u987a\u5e8f\u548c\u65f6\u5e8f\u8981\u6c42 \u5f02\u6b65\u603b\u7ebf\u4f20\u8f93:\u63a7\u5236\u4fe1\u53f7(\u8bf7\u6c42,\u5e94\u7b54)\u4f5c\u4e3a\u603b\u63a7\u4fe1\u53f7 \u540c\u6b65\u603b\u7ebf\u4f20\u8f93:\u4f7f\u7528\u5171\u540c\u7684\u65f6\u949f\u4fe1\u53f7 \u603b\u7ebf\u4e8b\u52a1:\u53d1\u8d77\u547d\u4ee4(\u548c\u5730\u5740),\u4f20\u8f93\u6570\u636e\u3002 \u603b\u7ebf\u4ef2\u88c1 \u95ee\u9898:\u5982\u4f55\u4e3a\u9700\u8981\u4f7f\u7528\u603b\u7ebf\u7684\u8bbe\u5907\u5b89\u6392\u603b\u7ebf? \u53ef\u901a\u8fc7\u4e3b\u2014\u4ece\u8bbe\u5907\u7684\u5b89\u6392\u6765\u907f\u514d\u51b2\u7a81:\u53ea\u5141\u8bb8\u4e3b\u8bbe\u5907\u53d1\u8d77\u603b\u7ebf\u4e8b\u52a1,\u63a7\u5236\u6240\u6709\u603b\u7ebf\u8bf7\u6c42,\u4ece\u8bbe\u5907\u54cd\u5e94\u4e3b\u8bbe\u5907\u7684\u8bfb\u5199\u8bf7\u6c42\u3002 \u6700\u7b80\u5355\u7684\u8bbe\u8ba1:\u5904\u7406\u5668\u4f5c\u4e3a\u552f\u4e00\u7684\u603b\u7ebf\u4e3b\u8bbe\u5907,\u6240\u6709\u603b\u7ebf\u8bf7\u6c42\u5747\u7531\u5904\u7406\u5668\u63a7\u5236,\u4e3b\u8981\u7f3a\u70b9\u662f\u5904\u7406\u5668\u88ab\u5377\u5165\u5230\u6bcf\u4e00\u4e2a\u603b\u7ebf\u4e8b\u52a1\u4e2d\u3002 \u603b\u7ebf\u4ef2\u88c1\u7684\u57fa\u672c\u8981\u6c42:\u67d0\u603b\u7ebf\u4e3b\u8bbe\u5907\u4f7f\u7528\u603b\u7ebf\u524d\u5e94\u53d1\u51fa\u603b\u7ebf\u8bf7\u6c42,\u53ea\u6709\u5f97\u5230\u6388\u6743\u540e,\u4e3b\u8bbe\u5907\u624d\u80fd\u4f7f\u7528\u603b\u7ebf,\u4f7f\u7528\u5b8c\u6bd5\u540e,\u4e3b\u8bbe\u5907\u5e94\u901a\u77e5\u4ef2\u88c1\u5668\u3002 \u603b\u7ebf\u4ef2\u88c1\u65b9\u5f0f: \u96c6\u4e2d\u4ef2\u88c1 \u83ca\u94fe\u4ef2\u88c1(\u6240\u6709\u8bbe\u5907\u5171\u7528\u4e00\u4e2a\u603b\u7ebf\u8bf7\u6c42\u4fe1\u53f7) \u7b80\u5355 \u65e0\u6cd5\u4fdd\u8bc1\u516c\u5e73\u6027,\u4f4e\u4f18\u5148\u7ea7\u8bbe\u5907\u53ef\u80fd\u5f97\u4e0d\u5230\u603b\u7ebf\u4f7f\u7528\u6743 \u603b\u7ebf\u6388\u6743\u4fe1\u53f7\u7684\u9010\u7ea7\u4f20\u9012\u9650\u5236\u4e86\u7533\u8bf7\u603b\u7ebf\u7684\u901f\u5ea6\u3002 \u96c6\u4e2d\u5e73\u884c\u4ef2\u88c1(\u901a\u8fc7\u96c6\u4e2d\u7684\u4ef2\u88c1\u5668\u8fdb\u884c) \u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u5904\u7406\u5668-\u4e3b\u5b58\u603b\u7ebf\u548c\u4e00\u4e9b\u9ad8\u901f\u8f93\u5165/\u8f93\u51fa\u603b\u7ebf\u3002 \u5206\u5e03\u4ef2\u88c1 \u901a\u8fc7\u81ea\u6211\u9009\u62e9\u8fdb\u884c\u5206\u5e03\u5f0f\u4ef2\u88c1(\u6bcf\u4e2a\u8981\u4f7f\u7528\u603b\u7ebf\u7684\u8bbe\u5907\u5c06\u81ea\u5df1\u7684\u6807\u8bc6\u653e\u5728\u603b\u7ebf\u4e0a)\u3002 \u78b0\u649e\u68c0\u6d4b(\u4ee5\u592a\u7f51) \u901a\u4fe1\u65b9\u5f0f \u540c\u6b65\u603b\u7ebf:\u63a7\u5236\u7ebf\u4e2d\u5305\u542b\u6709\u4e00\u6839\u65f6\u949f\u4fe1\u53f7\u7ebf,\u4f20\u8f93\u534f\u8bae\u6839\u636e\u65f6\u949f\u4fe1\u53f7\u5236\u5b9a\u3002 \u4f8b\u5982:\u4e3b\u8bbe\u5907\u63d0\u51fa\u603b\u7ebf\u8bf7\u6c42\u540e 5 \u4e2a\u65f6\u949f\u5468\u671f,\u53ef\u4ee5\u83b7\u5f97\u80fd\u5426\u4f7f\u7528\u603b\u7ebf\u7684\u4fe1\u53f7\u3002 \u4f18\u70b9:\u903b\u8f91\u7b80\u5355\u3001\u9ad8\u901f\u3002\u7f3a\u70b9:\u603b\u7ebf\u4e0a\u8bbe\u5907\u987b\u6309\u65f6\u949f\u9891\u7387\u5de5\u4f5c,\u4e3a\u9632\u6b62\u65f6\u949f\u4fe1\u53f7\u626d\u66f2,\u9ad8\u901f\u5de5\u4f5c\u65f6\u603b\u7ebf\u8ddd\u79bb\u987b\u591f\u77ed\u3002 \u5f02\u6b65\u603b\u7ebf:\u4e0d\u4f7f\u7528\u7edf\u4e00\u7684\u65f6\u949f,\u53ef\u9002\u5e94\u8bbe\u5907\u7684\u4e0d\u540c\u901f\u5ea6,\u4e0d\u7528\u62c5\u5fc3\u65f6\u949f\u4fe1\u53f7\u626d\u66f2,\u8ddd\u79bb\u53ef\u8f83\u957f,\u4f7f\u7528\u63e1\u624b\u534f\u8bae\u3002 \u589e\u52a0\u603b\u7ebf\u5e26\u5bbd \u589e\u52a0\u603b\u7ebf\u7684\u5bbd\u5ea6:\u53ef\u589e\u52a0\u6bcf\u4e2a\u5468\u671f\u4f20\u9001\u6570\u636e\u7684\u91cf,\u63d0\u9ad8\u4e86\u6210\u672c\u3002 \u5206\u522b\u8bbe\u7f6e\u6570\u636e\u603b\u7ebf\u548c\u5730\u5740\u603b\u7ebf:\u53ef\u540c\u65f6\u4f20\u9001\u6570\u636e\u548c\u5730\u5740,\u63d0\u9ad8\u4e86\u6210\u672c\u3002 \u91c7\u7528\u6210\u7ec4\u4f20\u9001\u65b9\u5f0f:\u4e00\u4e2a\u603b\u7ebf\u4e8b\u52a1\u4f20\u9001\u591a\u4e2a\u6570\u636e,\u6bcf\u6b21\u53ea\u9700\u8981\u5728\u5f00\u59cb\u7684\u65f6\u5019\u4f20\u9001\u4e00\u4e2a\u5730\u5740,\u76f4\u5230\u6570\u636e\u4f20\u9001\u5b8c\u6bd5\u624d\u91ca\u653e\u603b\u7ebf,\u590d\u6742\u5ea6\u63d0\u9ad8,\u5ef6\u957f\u540e\u7eed\u603b\u7ebf\u8bf7\u6c42\u7684\u7b49\u5f85\u65f6\u95f4\u3002 \u591a\u4e3b\u8bbe\u5907\u603b\u7ebf\u63d0\u9ad8\u4e8b\u52a1\u6570\u91cf \u4ef2\u88c1\u91cd\u53e0:\u5728\u5f53\u524d\u4e8b\u52a1\u65f6,\u4e3a\u4e0b\u4e00\u603b\u7ebf\u4e8b\u52a1\u8fdb\u884c\u4ef2\u88c1\u3002 \u603b\u7ebf\u5360\u7528:\u6ca1\u6709\u5176\u4ed6\u4e3b\u8bbe\u5907\u8bf7\u6c42\u603b\u7ebf\u7684\u60c5\u51b5\u4e0b,\u67d0\u4e3b\u8bbe\u5907\u4e00\u76f4\u5360\u7528\u603b\u7ebf,\u5b8c\u6210\u591a\u4e2a\u603b\u7ebf\u4e8b\u52a1\u3002 \u5730\u5740\u3001\u6570\u636e\u4f20\u9001\u91cd\u53e0\u3002 \u63a5\u53e3\u7535\u8def\u548c\u5916\u90e8\u8bbe\u5907 \u63d0\u4f9b\u4e3b\u673a\u8bc6\u522b(\u6307\u5b9a\u3001\u627e\u5230)\u4f7f\u7528\u7684 I/O \u8bbe\u5907\u7684\u652f\u6301:\u4e3a\u6bcf\u4e2a\u8bbe\u5907\u89c4\u5b9a\u51e0\u4e2a\u5730\u5740\u7801\u6216\u7f16\u53f7\u3002 \u5efa\u7acb\u4e3b\u673a\u548c\u8bbe\u5907\u4e4b\u95f4\u7684\u63a7\u5236\u4e0e\u901a\u4fe1\u673a\u5236:\u63a5\u6536\u5904\u7406\u5668(\u4e3b\u8bbe\u5907)\u7684\u547d\u4ee4,\u5e76\u63d0\u4ea4\u7ed9\u5916\u90e8\u8bbe\u5907,\u540c\u65f6,\u4e3a\u4e3b\u8bbe\u5907\u63d0\u4f9b\u5916\u90e8\u8bbe\u5907\u7684\u72b6\u6001\u3002 \u63d0\u4f9b\u4e3b\u673a\u548c\u8bbe\u5907\u4e4b\u95f4\u4fe1\u606f\u4ea4\u6362\u8fc7\u7a0b\u4e2d\u7684\u6570\u636e\u7f13\u51b2\u673a\u6784\u3002 \u63d0\u4f9b\u4e3b\u673a\u548c\u8bbe\u5907\u4e4b\u95f4\u4fe1\u606f\u4ea4\u6362\u8fc7\u7a0b\u4e2d\u7684\u5176\u4ed6\u7279\u522b\u9700\u6c42\u652f\u6301:\u5c4f\u853d\u5916\u90e8\u8bbe\u5907\u7684\u5dee\u5f02\u3002","title":"\u5b58\u50a8\u5668\u4e0eIO"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#io","text":"","title":"\u5b58\u50a8\u5668\u4e0eIO"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_1","text":"\u7a0b\u5e8f\u8fd0\u884c\u7684\u5c40\u90e8\u6027\u539f\u7406 \u65f6\u95f4\u5c40\u90e8\u6027:\u6700\u8fd1\u88ab\u8bbf\u95ee\u8fc7\u7684\u7a0b\u5e8f\u548c\u6570\u636e\u5f88\u53ef\u80fd\u518d\u6b21\u88ab\u8bbf\u95ee \u7a7a\u95f4\u5c40\u90e8\u6027:CPU \u5f88\u53ef\u80fd\u8bbf\u95ee\u6700\u8fd1\u88ab\u8bbf\u95ee\u8fc7\u7684\u5730\u5740\u5355\u5143\u9644\u8fd1\u7684\u5730\u5740\u5355\u5143\u3002 \u5c42\u6b21\u4e4b\u95f4\u5e94\u6ee1\u8db3\u7684\u539f\u5219: \u4e00\u81f4\u6027\u539f\u5219:\u5904\u5728\u4e0d\u540c\u5c42\u6b21\u5b58\u50a8\u5668\u4e2d\u7684\u540c\u4e00\u4e2a\u4fe1\u606f\u5e94\u4fdd\u6301\u76f8\u540c\u7684\u503c\u3002 \u5305\u542b\u6027\u539f\u5219:\u5904\u5728\u5185\u5c42\u7684\u4fe1\u606f\u4e00\u5b9a\u88ab\u5305\u542b\u5728\u5176\u5916\u5c42\u7684\u5b58\u50a8\u5668\u4e2d,\u53cd\u4e4b\u5219\u4e0d\u6210\u7acb\u3002 \u603b\u7ebf\uff1a \u5730\u5740\u603b\u7ebf\u7528\u4e8e\u9009\u62e9\u4e3b\u5b58\u50a8\u5668\u7684\u4e00\u4e2a\u5b58\u50a8\u5355\u5143(\u5b57\u6216\u5b57\u8282),\u5176\u4f4d\u6570\u51b3\u5b9a\u4e86\u80fd\u591f\u8bbf\u95ee\u7684\u5b58\u50a8\u5355\u5143\u7684\u6700\u5927\u6570\u76ee,\u79f0\u4e3a\u6700\u5927\u53ef\u5bfb\u5740\u7a7a\u95f4\u3002 \u6570\u636e\u603b\u7ebf\u7528\u4e8e\u5728\u8ba1\u7b97\u673a\u5404\u529f\u80fd\u90e8\u4ef6\u4e4b\u95f4\u4f20\u9001\u6570\u636e,\u5176\u4f4d\u6570(\u603b\u7ebf\u7684\u5bbd\u5ea6)\u4e0e\u603b\u7ebf\u65f6\u949f\u9891\u7387\u7684\u4e58\u79ef,\u4e0e\u8be5\u603b\u7ebf\u6240\u652f\u6301\u7684\u6700\u9ad8\u6570\u636e\u541e\u5410(\u8f93\u5165/\u8f93\u51fa)\u80fd\u529b\u6210\u6b63\u6bd4\u3002 \u63a7\u5236\u603b\u7ebf\u7528\u4e8e\u6307\u660e\u603b\u7ebf\u7684\u5de5\u4f5c\u5468\u671f\u7c7b\u578b\u548c\u672c\u6b21\u5165/\u51fa\u5b8c\u6210\u7684\u65f6\u523b\u3002","title":"\u5c42\u6b21\u5b58\u50a8\u5668\u7cfb\u7edf"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#dram","text":"\u52a8\u6001\u5b58\u50a8\u5668\uff1a\u7528\u91d1\u5c5e\u6c27\u5316\u7269\u534a\u5bfc\u4f53(MOS)\u7684\u5355\u4e2a MOS \u7ba1\u5b58\u50a8\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d(bit)\u4fe1\u606f\u3002\u4fe1\u606f\u88ab\u5b58\u50a8\u5728 MOS \u7ba1 T \u7684\u6e90\u6781\u7684\u5bc4\u751f\u7535\u5bb9 C S \u4e2d,\u6709\u7535\u8377\u8868\u793a 1,\u65e0\u7535\u8377\u8868\u793a 0\u3002 \u5b58\u50a8\u4fe1\u606f \u9001\u884c\u5217\u5730\u5740 \u96c6\u6210\u5ea6 \u53d1\u70ed\u91cf SRAM \u89e6\u53d1\u5668 \u540c\u65f6 \u4f4e \u5927 DRAM \u7535\u5bb9 \u5206\u4e24\u6b21 \u9ad8 \u5c0f","title":"\u52a8\u6001\u5b58\u50a8\u5668 DRAM\uff0c\u9759\u6001\u5b58\u50a8\u5668"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#cache","text":"\u4e3b\u5b58\u548c CPU \u4e4b\u95f4\u7684\u5b58\u50a8\u5668,\u7528\u9ad8\u901f\u7684\u9759\u6001\u5b58\u50a8\u5668\u5b9e\u73b0,\u7f13\u5b58\u4e86CPU \u9891\u7e41\u8bbf\u95ee\u7684\u4fe1\u606f\u3002\u9ad8\u901f,\u900f\u660e\u3002 Cache \u63a5\u5165\u7cfb\u7edf\u7684\u4f53\u7cfb\u7ed3\u6784\uff1a\u4fa7\u63a5\u6cd5\uff0c\u9694\u65ad\u6cd5 \u8981\u89e3\u51b3\u7684\u95ee\u9898 \u5730\u5740\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb:\u5982\u4f55\u6839\u636e\u4e3b\u5b58\u5730\u5740\u5f97\u5230 Cache \u4e2d\u7684\u6570\u636e? \u6570\u636e\u4e4b\u95f4\u4e00\u81f4\u6027:Cache \u4e2d\u7684\u5185\u5bb9\u662f\u5426\u5df2\u7ecf\u662f\u4e3b\u5b58\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9? \u6570\u636e\u4ea4\u6362\u7684\u7c92\u5ea6:Cache \u4e2d\u7684\u5185\u5bb9\u4e0e\u4e3b\u5b58\u5185\u5bb9\u4ee5\u591a\u5927\u7684\u7c92\u5ea6\u4ea4\u6362? Cache \u5185\u5bb9\u88c5\u5165\u548c\u66ff\u6362\u7b56\u7565:\u5982\u4f55\u63d0\u9ad8 Cache \u7684\u547d\u4e2d\u7387? \\text{\u5e73\u5747\u8bbf\u95ee\u65f6\u95f4}=HR*\\text{\u547d\u4e2d\u65f6\u95f4}+(1-HR)*\\text{\u5931\u6548\u635f\u5931} \\text{\u5e73\u5747\u8bbf\u95ee\u65f6\u95f4}=HR*\\text{\u547d\u4e2d\u65f6\u95f4}+(1-HR)*\\text{\u5931\u6548\u635f\u5931} HR HR \u4e3a\u547d\u4e2d\u7387\u3002","title":"\u9ad8\u901f\u7f13\u51b2\u5b58\u50a8\u5668 Cache"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_2","text":"\u5168\u76f8\u8054\u65b9\u5f0f \u76f4\u63a5\u6620\u5c04 \u591a\u8def\u7ec4\u76f8\u8054","title":"\u5730\u5740\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_3","text":"Cache\uff08\u4e0d\u547d\u4e2d\uff09\u5199","title":"\u4e00\u81f4\u6027\u4fdd\u8bc1"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#cache_1","text":"\u5fc5\u7136\u7f3a\u5931 Compulsory Miss(\u5f00\u673a\u6216\u8005\u662f\u8fdb\u7a0b\u5207\u6362\u3001\u9996\u6b21\u8bbf\u95ee \u6570\u636e\u5757) \u5bb9\u91cf\u7f3a\u5931 Capacity Miss(\u6d3b\u52a8\u6570\u636e\u96c6\u8d85\u51fa\u4e86 Cache \u7684\u5927\u5c0f) \u51b2\u7a81\u7f3a\u5931 Conflict Miss (\u591a\u4e2a\u5185\u5b58\u5757\u6620\u5c04\u5230\u540c\u4e00 Cache \u5757\u3001\u67d0\u4e00 Cache \u7ec4\u5757\u5df2\u6ee1\u4f46\u7a7a\u95f2\u7684 Cache \u5757\u5728\u5176\u4ed6 \u7ec4) \u65e0\u6548\u7f3a\u5931(\u5176\u4ed6\u8fdb\u7a0b\u4fee\u6539\u4e86\u4e3b\u5b58\u6570\u636e) \u66ff\u6362\u7b97\u6cd5:\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u7684(LRU)\u3001\u5148\u8fdb\u5148\u51fa(FIFO)\u3001\u968f\u673a\u66ff\u6362(RAND)","title":"\u63d0\u9ad8 Cache \u7684\u547d\u4e2d\u7387"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_4","text":"\u865a\u5b58 Cache \u4e3b\u8981\u76ee\u7684\u662f\u5b9e\u73b0\u5b58\u50a8\u7ba1\u7406,\u5e2e\u52a9\u89e3\u51b3\u5b58\u50a8\u5bb9\u91cf\u7684\u95ee\u9898\u3002 \u4e3b\u8981\u76ee\u7684\u662f\u89e3\u51b3\u5b58\u50a8\u901f\u5ea6\u95ee\u9898,\u4f7f\u5b58\u50a8\u5668\u8bbf\u95ee\u901f\u5ea6\u4e0d\u592a\u5f71\u54cd CPU \u7684\u8fd0\u884c\u901f\u5ea6\u3002 \u5355\u4f4d\u65f6\u95f4\u5185\u6570\u636e\u4ea4\u6362\u6b21\u6570\u5c11,\u6bcf\u6b21\u4ea4\u6362\u6570\u636e\u91cf\u5927 \u5355\u4f4d\u65f6\u95f4\u5185\u6570\u636e\u4ea4\u6362\u7684\u6b21\u6570\u591a,\u6bcf\u6b21\u4ea4\u6362\u6570\u636e\u91cf\u5c0f \u7531\u64cd\u4f5c\u7cfb\u7edf\u7ba1\u7406 \u7531\u786c\u4ef6\u5b9e\u73b0","title":"\u865a\u62df\u5b58\u50a8\u5668"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_5","text":"\u6bb5\u5f0f\u5b58\u50a8\u7ba1\u7406 \u4ee5\u6bb5\u4f5c\u4e3a\u5b58\u50a8\u7ba1\u7406\u7684\u5bf9\u8c61,\u6bb5\u957f\u52a8\u6001\u53ef\u53d8,\u6bb5\u8d77\u70b9\u3001\u7ec8\u70b9\u4e0d\u5b9a\u3002\u6613\u4e8e\u7f16\u8bd1\u3001\u7ba1\u7406\u3001\u4fee\u6539\u3001\u4fdd\u62a4\u548c\u5171\u4eab,\u7a7a\u95f4\u5206\u914d\u56f0\u96be,\u5bb9\u6613\u4ea7\u751f\u788e\u7247\u3002 \u6bb5(Segment)\u7a0b\u5e8f\u6a21\u5757\u5316\u8bbe\u8ba1\u7684\u7ed3\u679c(\u8fc7\u7a0b\u3001\u51fd\u6570\u3001\u6570\u7ec4\u3001...),\u903b\u8f91\u4e0a\u76f8\u5bf9\u72ec\u7acb,\u662f\u5171\u4eab\u548c\u4fdd\u62a4\u7684\u6700\u5c0f\u5355\u5143\u3002 \u5b9e\u73b0:\u8bbe\u7f6e\u6bb5\u8868\u8fdb\u884c\u7ba1\u7406,\u6bb5\u8868\u57fa\u5730\u5740,\u6bb5\u8d77\u59cb\u5730\u5740,\u6bb5\u957f,\u88c5\u5165\u4f4d,\u4fdd\u62a4\u3001\u5171\u4eab\u7b49\u6807\u5fd7\u3002 \u9875\u5f0f\u5b58\u50a8\u7ba1\u7406 \u5c06\u4e3b\u5b58\u548c\u865a\u5b58\u5212\u5206\u4e3a\u56fa\u5b9a\u5927\u5c0f\u7684\u9875,\u4ee5\u9875\u4e3a\u5355\u4f4d\u8fdb\u884c\u7ba1\u7406\u548c\u6570\u636e\u4ea4\u6362\u3002 \u865a\u5730\u5740=\u865a\u9875\u53f7+\u9875\u5185\u5730\u5740;\u5b9e\u5730\u5740=\u5b9e\u9875\u53f7+\u9875\u5185\u5730\u5740\u3002 \u5b9e\u73b0:\u901a\u8fc7\u9875\u8868\u8fdb\u884c\u7ba1\u7406,\u9875\u8868\u57fa\u5730\u5740\u5bc4\u5b58\u5668,\u5b9e\u9875\u53f7,\u63a7\u5236\u4f4d\u3002 \u9875\u5f0f\u865a\u62df\u5b58\u50a8\u5668\u7684\u8bbf\u95ee\u8fc7\u7a0b: \u5f97\u5230\u7a0b\u5e8f\u7ed9\u51fa\u7684\u865a\u5730\u5740; \u7531\u865a\u5730\u5740\u5f97\u5230\u865a\u9875\u53f7; \u8bbf\u95ee\u9875\u8868,\u5f97\u5230\u5bf9\u5e94\u7684\u5b9e\u9875\u53f7; \u82e5\u8be5\u9875\u5df2\u5728\u5185\u5b58\u4e2d,\u5219\u6839\u636e\u5b9e\u9875\u53f7\u5f97\u5230\u5b9e\u5730\u5740,\u8bbf\u95ee\u5185\u5b58; \u5426\u5219,\u542f\u52a8\u8f93\u5165\u8f93\u51fa\u7cfb\u7edf,\u8bfb\u51fa\u5bf9\u5e94\u9875\u88c5\u5165\u4e3b\u5b58,\u518d\u8fdb\u884c\u8bbf\u95ee\u3002","title":"\u865a\u62df\u5b58\u50a8\u5668\u7ba1\u7406"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#tlb","text":"\u4e3a\u9875\u8868\u8bbe\u7f6e\u7684\u4e13\u7528 Cache,\u9ad8\u6548\u5b9e\u73b0\u865a\u9875\u53f7\u5230\u5b9e\u9875\u53f7\u7684\u8f6c\u6362,\u5bb9\u91cf\u8f83\u5c0f,128~256 \u4e2a\u8868\u9879\u3002 TLB \u7f3a\u5931:\u6d41\u6c34\u7ebf\u505c,\u901a\u77e5\u64cd\u4f5c\u7cfb\u7edf,\u8bfb\u9875\u8868,\u5c06\u8868\u9879\u5199\u5165 TLB,\u8fd4\u56de\u7528\u6237\u7a0b\u5e8f,\u91cd\u65b0\u8bbf\u95ee\u3002 \u9875\u9762\u5927\u5c0f:\u7f29\u5c0f\u9875\u9762\u5927\u5c0f\u53ef\u51cf\u5c11\u5185\u90e8\u788e\u7247,\u4f46\u9700\u66f4\u5927\u7684\u9875\u8868\u3002 \u9875\u9762\u66ff\u6362\u7b97\u6cd5:\u6700\u8fd1\u6700\u5c11\u4f7f\u7528(LRU)","title":"\u8f6c\u6362\u65c1\u8def\u7f13\u51b2(TLB)"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#pentium","text":"\u7a0b\u5e8f\u5458\u7ed9\u51fa\u7684\u865a\u62df\u5730\u5740,\u683c\u5f0f\u4e3a\u6bb5\u53f7+\u6bb5\u5185\u504f\u79fb(16\u4f4d+32\u4f4d),\u6bcf\u6bb5\u5927\u5c0f\u4e0d\u8d85\u8fc74GB\u3002","title":"Pentium \u7684\u865a\u5b58\u7ba1\u7406"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_6","text":"\u5bb9\u91cf\u5927,\u6210\u672c\u4f4e,\u65ad\u7535\u4fdd\u5b58,\u8131\u673a\u4fdd\u5b58,\u4e32\u884c\u8bbf\u95ee,\u6570\u636e\u4ea4\u6362\u9891\u7387\u4f4e,\u6570 \u636e\u4ea4\u6362\u91cf\u5927\u3002\u4e00\u822c\u4e3a\u78c1\u76d8\u3001\u5149\u76d8\u7b49\u3002 \u968f\u673a\u8bbf\u95ee \u968f\u673a\u8bbf\u95ee\u4efb\u4f55\u5355\u5143,\u8bbf\u95ee\u65f6\u95f4\u4e0e\u5b58\u653e\u4f4d\u7f6e\u65e0\u5173,\u6bcf\u4e00\u4f4d\u90fd\u6709\u5404\u81ea\u7684\u8bfb\u5199\u8bbe\u5907\u3002 \u4e32\u884c\u8bbf\u95ee \u987a\u5e8f\u6309\u4f4d\u8fdb\u884c,\u8bbf\u95ee\u65f6\u95f4\u4e0e\u5b58\u50a8\u4f4d\u7684\u7269\u7406\u4f4d\u7f6e\u6709\u5173,\u5171\u7528\u4e00\u4e2a\u8bfb\u5199\u8bbe\u5907\u3002 \u4e3b\u8981\u6307\u6807 \u5b58\u50a8\u5bc6\u5ea6,\u5b58\u50a8\u5bb9\u91cf,\u5bfb\u5740\u65f6\u95f4,\u6570\u636e\u4f20\u8f93\u7387,\u8bef\u7801\u7387,\u4ef7\u683c\u3002","title":"\u78c1\u8868\u9762\u5b58\u50a8\u8bbe\u5907"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_7","text":"\u4e00\u79cd\u7f16\u7801\u65b9\u6cd5,\u5373\u5982\u4f55\u5c06\u4e00\u4e32\u4e8c\u8fdb\u5236\u4fe1\u606f,\u901a\u8fc7\u8bfb\u5199\u7535\u8def\u53d8\u6362\u6210\u78c1\u5c42\u4ecb\u8d28\u4e2d\u7684\u78c1\u5316\u7ffb\u8f6c\u5e8f\u5217\u3002(\u7f16\u7801\u6548\u7387,\u81ea\u540c\u6b65\u80fd\u529b,\u8bfb\u5199\u53ef\u9760\u6027) \u5f52\u96f6\u5236(RZ),\u4e0d\u5f52\u96f6\u5236(NRZ),\u89c1 1 \u7ffb\u8f6c\u7684\u4e0d\u5f52\u96f6\u5236(NRZ1),\u8c03\u76f8\u5236(PM),\u8c03\u9891\u5236(FM),\u6539\u8fdb\u7684\u8c03\u9891\u5236(MFM)","title":"\u78c1\u8bb0\u5f55\u65b9\u5f0f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_8","text":"\u78c1\u76d8\u8bbf\u95ee\u65f6\u95f4= \u5bfb\u9053\u65f6\u95f4+ \u5e73\u5747\u65cb\u8f6c\u5ef6\u8fdf+ \u4f20\u8f93\u65f6\u95f4+ \u78c1\u76d8\u63a7\u5236\u5668\u5ef6\u8fdf \u4f8b:\u5e73\u5747\u5bfb\u9053\u65f6\u95f4= 12ms,\u65cb\u8f6c\u901f\u5ea6= 5400rpm,\u78c1\u76d8\u63a7\u5236\u5668\u5ef6\u8fdf=2ms,\u4f20\u8f93\u901f\u5ea6=5MB,\u6247\u533a\u5927\u5c0f= 512 bytes,\u9875\u5927\u5c0f 8KB\u3002 \u65cb\u8f6c 1 \u5468: 1/5400 minutes = 11.1ms => 1/2 \u5468:5.6 ms \u8bfb 1 \u4e2a\u6247\u533a:12ms + 5.6ms + .5K/5MB s+ 2ms = 12 + 5.6 + .1ms + 2ms = 19.7ms \u8bfb 1 \u9875\u7684\u65f6\u95f4:12 ms + 5.6ms + 8K/5MB s + 2ms = 12ms + 5.6ms + 1.6ms + 2ms = 21.2 ms \u91c7\u7528\u6d41\u6c34\u65b9\u5f0f\u548c\u5927\u5bb9\u91cf\u4f20\u8f93\u65b9\u5f0f(\u6bcf\u6b21\u8bfb\u53d6\u591a\u4e2a\u6247\u533a)\u514b\u670d\u78c1\u76d8\u63a7\u5236\u5668\u5ef6\u8fdf\u3002 \u989d\u5916\u5f00\u9500\u5728\u603b\u5f00\u9500\u4e2d\u6bd4\u4f8b\u8f83\u5927 => \u4e00\u6b21\u4f20\u8f93\u5927\u91cf\u6570\u636e\u6bd4\u8f83\u6709\u6548\u3002 \u5c06\u9875\u9762\u5b58\u653e\u5728\u76f8\u90bb\u6247\u533a\u4e2d\u53ef\u4ee5\u907f\u514d\u989d\u5916\u7684\u5bfb\u9053\u5f00\u9500\u3002","title":"\u78c1\u76d8"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#raid","text":"\u53ef\u9760\u6027(reliability):\u8bbe\u5907\u51fa\u73b0\u6545\u969c\u7684\u51e0\u7387\u6765\u8861\u91cf\u3002 \u53ef\u7528\u6027(availability):\u7cfb\u7edf\u80fd\u6b63\u5e38\u8fd0\u884c\u7684\u51e0\u7387\u6765\u8861\u91cf\u3002 \u51fa\u6545\u969c\u540e\u4ecd\u80fd\u8fd0\u884c\u3002 \u76ee\u6807: N \u4e2a\u78c1\u76d8\u7684\u5bb9\u91cf, 1/N \u7684\u8bbf\u95ee\u65f6\u95f4,\u66f4\u9ad8\u7684\u6027\u4ef7\u6bd4,\u7528\u5197\u4f59\u6280\u672f\u63d0\u9ad8\u5b58\u50a8\u4fe1\u606f\u53ef\u7528\u6027\u3002\u63d0\u9ad8\u78c1\u76d8\u7684\u53ef\u7528\u6027\u548c\u6027\u80fd raid0 raid1 raid2 raid3 raid4 raid5","title":"RAID \u6280\u672f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_9","text":"\u8981\u89e3\u51b3\u7684\u95ee\u9898 \u63a7\u5236\u65b9\u5f0f:CPU \u5982\u4f55\u63a7\u5236\u8f93\u5165/\u8f93\u51fa?(\u8f93\u5165/\u8f93\u51fa\u65b9\u5f0f) \u4f20\u8f93\u65b9\u5f0f:\u4f20\u8f93\u901a\u9053\u3001\u65b9\u5f0f\u3001\u901f\u7387\u7b49(\u603b\u7ebf\u3001\u63a5\u53e3) \u6570\u636e\u8bc6\u522b\u548c\u8f6c\u6362:\u6570/\u6a21\u8f6c\u6362\u3001\u8bed\u97f3\u8bc6\u522b\u7b49,\u8f6c\u4e3a\u5b57\u7b26\u3001\u6570\u636e\u7b49\u8ba1\u7b97\u673a\u80fd\u8bc6\u522b\u7684\u683c\u5f0f(\u8bbe\u5907)\u3002","title":"\u8f93\u5165/\u8f93\u51fa\u7cfb\u7edf"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_10","text":"\u7a0b\u5e8f\u76f4\u63a5\u63a7\u5236 CPU \u76f4\u63a5\u4f7f\u7528\u8f93\u5165/\u8f93\u51fa\u6307\u4ee4\u6765\u63a7\u5236\u5916\u90e8\u8bbe\u5907\u3002 CPU \u65b9\u67e5\u8be2\u63a5\u53e3\u72b6\u6001(\u5faa\u73af\u7b49\u5f85),\u76f4\u5230\u5916\u8bbe\u5df2\u7ecf\u63a5\u6536\u5230\u8be5\u5b57\u7b26,\u8bfb\u5b57\u7b26;\u5916\u8bbe\u65b9\u5f80\u63a5\u53e3\u6570\u636e\u7f13\u51b2\u4e2d\u9001\u5b57\u7b26,\u5904\u7406\u5b8c\u540e,\u7f6e\u72b6\u6001\u5bc4\u5b58\u5668,\u7b49\u5f85\u4e0b\u4e00\u4e2a\u5b57\u7b26\u3002 \u7a0b\u5e8f\u4e2d\u65ad \u5916\u90e8\u8bbe\u5907\u8bf7\u6c42,CPU \u6682\u505c\u6b63\u5728\u6267\u884c\u7684\u7a0b\u5e8f\u5e76\u54cd\u5e94,CPU \u4e0e\u5916\u8bbe\u5e76\u884c\u5de5\u4f5c,\u5b8c\u6210\u540e\u7ee7\u7eed\u6267\u884c\u539f\u6765\u7684\u7a0b\u5e8f\u3002\u6709\u4e2d\u65ad\u4f18\u5148\u7ea7\u3002 \u4e2d\u65ad\u6e90:\u5916\u4e2d\u65ad(I/O \u8bbe\u5907\u7b49),\u5f02\u5e38(\u5185\u4e2d\u65ad:\u5904\u7406\u5668\u786c\u4ef6\u6545\u969c\u3001\u7a0b\u5e8f\u201c\u51fa\u9519\u201d,Trap),\u4e2d\u65ad\u89e6\u53d1\u5668,\u4e2d\u65ad\u72b6\u6001\u5bc4\u5b58\u5668\u3002 \u5b8c\u6574\u8fc7\u7a0b:\u4e2d\u65ad\u8bf7\u6c42(\u4e2d\u65ad\u6e90\u8bbe\u5907\u8bbe\u7f6e\u4e2d\u65ad\u89e6\u53d1\u5668),\u4e2d\u65ad\u54cd\u5e94(\u54cd\u5e94\u6761\u4ef6:\u5141\u8bb8\u4e2d\u65ad\u3001\u5f53\u524d\u6307\u4ee4\u7ed3\u675f\u3001\u4f18\u5148\u7ea7,\u54cd\u5e94\u5b9e\u73b0:\u786c\u4ef6\u5b9e\u73b0\u7684\u4e2d\u65ad\u9690\u6307\u4ee4,\u4fdd\u5b58\u65ad\u70b9),\u4e2d\u65ad\u5904\u7406(\u4fdd\u5b58\u73b0\u573a\u4fe1\u606f,\u8fd0\u884c\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f,\u4e2d\u65ad\u8fd4\u56de)\u3002 \u5173\u4e2d\u65ad;\u4fdd\u5b58\u65ad\u70b9;\u5224\u4e2d\u65ad\u6e90,\u8f6c\u4e2d\u65ad\u670d\u52a1;\u5f00\u4e2d\u65ad;\u6267\u884c\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f;\u5173\u4e2d\u65ad;\u6062\u590d\u65ad\u70b9;\u5f00\u4e2d\u65ad;\u8fd4\u56de\u65ad\u70b9 \u76f4\u63a5\u5b58\u50a8\u8bbf\u95ee(DMA) I/O \u8bbe\u5907\u548c\u4e3b\u5b58\u50a8\u5668\u4e4b\u95f4\u7684\u76f4\u63a5\u6570\u636e\u901a\u8def,\u4e3a\u4e13\u8bbe\u7684\u786c\u4ef6,\u7528\u4e8e\u9ad8\u901f I/O \u8bbe\u5907\u548c\u4e3b\u5b58\u50a8\u5668\u4e4b\u95f4\u6210\u7ec4\u4f20\u9001\u6570\u636e\u3002 \u6570\u636e\u4f20\u9001\u5f00\u59cb\u524d\u548c\u7ed3\u675f\u540e\u901a\u8fc7\u7a0b\u5e8f\u6216\u4e2d\u65ad\u65b9\u5f0f\u5bf9 DMA \u8fdb\u884c\u9884\u5904\u7406\u548c\u540e\u5904\u7406\u3002 DMA \u5de5\u4f5c\u65b9\u5f0f:\u72ec\u5360\u603b\u7ebf\u65b9\u5f0f,\u5468\u671f\u7a83\u53d6\u65b9\u5f0f\u3002 Cache \u4e00\u81f4\u6027:\u4e3b\u5b58\u4e2d\u7684\u6570\u636e\u53ef\u80fd\u4e0d\u662f\u6700\u65b0\u7684,\u91c7\u7528\u76f4\u63a5\u5199\u4f1a\u5e26\u6765\u6027\u80fd\u7684\u964d\u4f4e,DMA \u67e5\u8be2Cache \u4f1a\u964d\u4f4e\u6027\u80fd,\u76f4\u63a5\u8bbe\u8ba1\u786c\u4ef6\u63a7\u5236\u3002 \u901a\u9053 I/O \u901a\u9053\u662f\u7cfb\u7edf\u4e2d\u4ee3\u66ff CPU \u7ba1\u7406\u63a7\u5236\u5916\u8bbe\u7684\u72ec\u7acb\u90e8\u4ef6,\u80fd\u6267\u884c\u6709\u9650 I/O \u6307\u4ee4\u96c6\u5408\u3002 \u901a\u9053\u7c7b\u578b:\u5b57\u8282\u591a\u8def\u901a\u9053(\u7b80\u5355\u7684\u5171\u4eab\u901a\u9053,\u5206\u65f6\u5904\u7406,\u9762\u5411\u4f4e\u3001\u4e2d\u901f\u5b57\u7b26\u8bbe\u5907);\u9009\u62e9\u901a\u9053(\u9009\u62e9\u4e00\u53f0\u5916\u8bbe\u72ec\u5360\u6574\u4e2a\u901a\u9053,\u4ee5\u6210\u7ec4\u4f20\u9001\u65b9\u5f0f\u4f20\u9001\u6570\u636e\u5757,\u6548\u7387\u9ad8,\u9002\u5408\u5feb\u901f\u8bbe\u5907);\u6570\u7ec4\u591a\u8def\u901a\u9053(\u4e0a\u4e24\u79cd\u65b9\u5f0f\u7684\u7ed3\u5408,\u6548\u7387\u9ad8,\u63a7\u5236\u590d\u6742) \u5916\u56f4\u5904\u7406\u673a \u901a\u9053\u578b\u5904\u7406\u673a:\u5171\u4eab\u5185\u5b58","title":"\u8f93\u5165/\u8f93\u51fa\u65b9\u5f0f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_11","text":"","title":"\u603b\u7ebf"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_12","text":"\u5904\u7406\u5668-\u4e3b\u5b58\u603b\u7ebf(\u4e13\u7528) \u4f20\u8f93\u8ddd\u79bb\u77ed\u3001\u901f\u5ea6\u9ad8,\u4e3b\u5b58\u50a8\u5668\u4e13\u7528 \u76f4\u63a5\u548c\u5904\u7406\u5668\u8fde\u63a5 \u76f4\u63a5\u548c\u5904\u7406\u5668\u8fde\u63a5 \u8f93\u5165 / \u8f93\u51fa\u603b\u7ebf(\u884c\u4e1a\u6807\u51c6) \u901a\u5e38\u8ddd\u79bb\u8f83\u957f,\u901f\u5ea6\u8f83\u6162 \u9700\u8981\u9002\u5e94\u591a\u79cd\u8f93\u5165/\u8f93\u51fa\u8bbe\u5907 \u548c\u5904\u7406\u5668-\u4e3b\u5b58\u603b\u7ebf\u901a\u8fc7\u6865\u8fde\u63a5(\u6216\u901a\u8fc7\u4e3b\u677f\u603b\u7ebf) \u4e3b\u677f\u603b\u7ebf(\u884c\u4e1a\u6807\u51c6\u6216\u4e13\u95e8\u8bbe\u8ba1) \u4e3b\u677f:\u8fde\u63a5\u5404\u90e8\u4ef6\u5668\u4ef6\u7684\u5e95\u76d8 \u5e94\u5141\u8bb8\u5904\u7406\u5668\u3001\u4e3b\u5b58\u50a8\u5668\u548c\u8f93\u5165/\u8f93\u51fa\u8bbe\u5907\u4e92\u8fde \u5e94\u6709\u4ef7\u683c\u4f18\u52bf:\u6240\u6709\u7ec4\u4ef6\u8fde\u63a5\u5728\u4e00\u6761\u603b\u7ebf\u4e0a","title":"\u5206\u7c7b"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_13","text":"\u63a7\u5236\u7ebf:\u6807\u8bb0\u603b\u7ebf\u4e8b\u52a1\u7684\u5f00\u59cb\u548c\u7ed3\u675f,\u6307\u660e\u6570\u636e\u7ebf\u4e0a\u4f20\u8f93\u4fe1\u606f\u7684\u7c7b\u578b\u3002 \u6570\u636e\u7ebf:\u5728\u6e90\u8bbe\u5907\u548c\u76ee\u6807\u8bbe\u5907\u95f4\u4f20\u9001\u4fe1\u606f\u3002 \u76f8\u5173\u6982\u5ff5: \u603b\u7ebf\u4e3b\u8bbe\u5907:\u6709\u80fd\u529b\u63a7\u5236\u603b\u7ebf,\u53d1\u8d77\u603b\u7ebf\u4e8b\u52a1 \u603b\u7ebf\u4ece\u8bbe\u5907:\u54cd\u5e94\u4e3b\u8bbe\u5907\u8bf7\u6c42 \u603b\u7ebf\u901a\u4fe1\u534f\u8bae:\u5b9a\u4e49\u603b\u7ebf\u4f20\u8f93\u4e2d\u7684\u4e8b\u4ef6\u987a\u5e8f\u548c\u65f6\u5e8f\u8981\u6c42 \u5f02\u6b65\u603b\u7ebf\u4f20\u8f93:\u63a7\u5236\u4fe1\u53f7(\u8bf7\u6c42,\u5e94\u7b54)\u4f5c\u4e3a\u603b\u63a7\u4fe1\u53f7 \u540c\u6b65\u603b\u7ebf\u4f20\u8f93:\u4f7f\u7528\u5171\u540c\u7684\u65f6\u949f\u4fe1\u53f7 \u603b\u7ebf\u4e8b\u52a1:\u53d1\u8d77\u547d\u4ee4(\u548c\u5730\u5740),\u4f20\u8f93\u6570\u636e\u3002","title":"\u7ec4\u6210"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_14","text":"\u95ee\u9898:\u5982\u4f55\u4e3a\u9700\u8981\u4f7f\u7528\u603b\u7ebf\u7684\u8bbe\u5907\u5b89\u6392\u603b\u7ebf? \u53ef\u901a\u8fc7\u4e3b\u2014\u4ece\u8bbe\u5907\u7684\u5b89\u6392\u6765\u907f\u514d\u51b2\u7a81:\u53ea\u5141\u8bb8\u4e3b\u8bbe\u5907\u53d1\u8d77\u603b\u7ebf\u4e8b\u52a1,\u63a7\u5236\u6240\u6709\u603b\u7ebf\u8bf7\u6c42,\u4ece\u8bbe\u5907\u54cd\u5e94\u4e3b\u8bbe\u5907\u7684\u8bfb\u5199\u8bf7\u6c42\u3002 \u6700\u7b80\u5355\u7684\u8bbe\u8ba1:\u5904\u7406\u5668\u4f5c\u4e3a\u552f\u4e00\u7684\u603b\u7ebf\u4e3b\u8bbe\u5907,\u6240\u6709\u603b\u7ebf\u8bf7\u6c42\u5747\u7531\u5904\u7406\u5668\u63a7\u5236,\u4e3b\u8981\u7f3a\u70b9\u662f\u5904\u7406\u5668\u88ab\u5377\u5165\u5230\u6bcf\u4e00\u4e2a\u603b\u7ebf\u4e8b\u52a1\u4e2d\u3002 \u603b\u7ebf\u4ef2\u88c1\u7684\u57fa\u672c\u8981\u6c42:\u67d0\u603b\u7ebf\u4e3b\u8bbe\u5907\u4f7f\u7528\u603b\u7ebf\u524d\u5e94\u53d1\u51fa\u603b\u7ebf\u8bf7\u6c42,\u53ea\u6709\u5f97\u5230\u6388\u6743\u540e,\u4e3b\u8bbe\u5907\u624d\u80fd\u4f7f\u7528\u603b\u7ebf,\u4f7f\u7528\u5b8c\u6bd5\u540e,\u4e3b\u8bbe\u5907\u5e94\u901a\u77e5\u4ef2\u88c1\u5668\u3002 \u603b\u7ebf\u4ef2\u88c1\u65b9\u5f0f: \u96c6\u4e2d\u4ef2\u88c1 \u83ca\u94fe\u4ef2\u88c1(\u6240\u6709\u8bbe\u5907\u5171\u7528\u4e00\u4e2a\u603b\u7ebf\u8bf7\u6c42\u4fe1\u53f7) \u7b80\u5355 \u65e0\u6cd5\u4fdd\u8bc1\u516c\u5e73\u6027,\u4f4e\u4f18\u5148\u7ea7\u8bbe\u5907\u53ef\u80fd\u5f97\u4e0d\u5230\u603b\u7ebf\u4f7f\u7528\u6743 \u603b\u7ebf\u6388\u6743\u4fe1\u53f7\u7684\u9010\u7ea7\u4f20\u9012\u9650\u5236\u4e86\u7533\u8bf7\u603b\u7ebf\u7684\u901f\u5ea6\u3002 \u96c6\u4e2d\u5e73\u884c\u4ef2\u88c1(\u901a\u8fc7\u96c6\u4e2d\u7684\u4ef2\u88c1\u5668\u8fdb\u884c) \u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u5904\u7406\u5668-\u4e3b\u5b58\u603b\u7ebf\u548c\u4e00\u4e9b\u9ad8\u901f\u8f93\u5165/\u8f93\u51fa\u603b\u7ebf\u3002 \u5206\u5e03\u4ef2\u88c1 \u901a\u8fc7\u81ea\u6211\u9009\u62e9\u8fdb\u884c\u5206\u5e03\u5f0f\u4ef2\u88c1(\u6bcf\u4e2a\u8981\u4f7f\u7528\u603b\u7ebf\u7684\u8bbe\u5907\u5c06\u81ea\u5df1\u7684\u6807\u8bc6\u653e\u5728\u603b\u7ebf\u4e0a)\u3002 \u78b0\u649e\u68c0\u6d4b(\u4ee5\u592a\u7f51)","title":"\u603b\u7ebf\u4ef2\u88c1"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_15","text":"\u540c\u6b65\u603b\u7ebf:\u63a7\u5236\u7ebf\u4e2d\u5305\u542b\u6709\u4e00\u6839\u65f6\u949f\u4fe1\u53f7\u7ebf,\u4f20\u8f93\u534f\u8bae\u6839\u636e\u65f6\u949f\u4fe1\u53f7\u5236\u5b9a\u3002 \u4f8b\u5982:\u4e3b\u8bbe\u5907\u63d0\u51fa\u603b\u7ebf\u8bf7\u6c42\u540e 5 \u4e2a\u65f6\u949f\u5468\u671f,\u53ef\u4ee5\u83b7\u5f97\u80fd\u5426\u4f7f\u7528\u603b\u7ebf\u7684\u4fe1\u53f7\u3002 \u4f18\u70b9:\u903b\u8f91\u7b80\u5355\u3001\u9ad8\u901f\u3002\u7f3a\u70b9:\u603b\u7ebf\u4e0a\u8bbe\u5907\u987b\u6309\u65f6\u949f\u9891\u7387\u5de5\u4f5c,\u4e3a\u9632\u6b62\u65f6\u949f\u4fe1\u53f7\u626d\u66f2,\u9ad8\u901f\u5de5\u4f5c\u65f6\u603b\u7ebf\u8ddd\u79bb\u987b\u591f\u77ed\u3002 \u5f02\u6b65\u603b\u7ebf:\u4e0d\u4f7f\u7528\u7edf\u4e00\u7684\u65f6\u949f,\u53ef\u9002\u5e94\u8bbe\u5907\u7684\u4e0d\u540c\u901f\u5ea6,\u4e0d\u7528\u62c5\u5fc3\u65f6\u949f\u4fe1\u53f7\u626d\u66f2,\u8ddd\u79bb\u53ef\u8f83\u957f,\u4f7f\u7528\u63e1\u624b\u534f\u8bae\u3002 \u589e\u52a0\u603b\u7ebf\u5e26\u5bbd \u589e\u52a0\u603b\u7ebf\u7684\u5bbd\u5ea6:\u53ef\u589e\u52a0\u6bcf\u4e2a\u5468\u671f\u4f20\u9001\u6570\u636e\u7684\u91cf,\u63d0\u9ad8\u4e86\u6210\u672c\u3002 \u5206\u522b\u8bbe\u7f6e\u6570\u636e\u603b\u7ebf\u548c\u5730\u5740\u603b\u7ebf:\u53ef\u540c\u65f6\u4f20\u9001\u6570\u636e\u548c\u5730\u5740,\u63d0\u9ad8\u4e86\u6210\u672c\u3002 \u91c7\u7528\u6210\u7ec4\u4f20\u9001\u65b9\u5f0f:\u4e00\u4e2a\u603b\u7ebf\u4e8b\u52a1\u4f20\u9001\u591a\u4e2a\u6570\u636e,\u6bcf\u6b21\u53ea\u9700\u8981\u5728\u5f00\u59cb\u7684\u65f6\u5019\u4f20\u9001\u4e00\u4e2a\u5730\u5740,\u76f4\u5230\u6570\u636e\u4f20\u9001\u5b8c\u6bd5\u624d\u91ca\u653e\u603b\u7ebf,\u590d\u6742\u5ea6\u63d0\u9ad8,\u5ef6\u957f\u540e\u7eed\u603b\u7ebf\u8bf7\u6c42\u7684\u7b49\u5f85\u65f6\u95f4\u3002 \u591a\u4e3b\u8bbe\u5907\u603b\u7ebf\u63d0\u9ad8\u4e8b\u52a1\u6570\u91cf \u4ef2\u88c1\u91cd\u53e0:\u5728\u5f53\u524d\u4e8b\u52a1\u65f6,\u4e3a\u4e0b\u4e00\u603b\u7ebf\u4e8b\u52a1\u8fdb\u884c\u4ef2\u88c1\u3002 \u603b\u7ebf\u5360\u7528:\u6ca1\u6709\u5176\u4ed6\u4e3b\u8bbe\u5907\u8bf7\u6c42\u603b\u7ebf\u7684\u60c5\u51b5\u4e0b,\u67d0\u4e3b\u8bbe\u5907\u4e00\u76f4\u5360\u7528\u603b\u7ebf,\u5b8c\u6210\u591a\u4e2a\u603b\u7ebf\u4e8b\u52a1\u3002 \u5730\u5740\u3001\u6570\u636e\u4f20\u9001\u91cd\u53e0\u3002","title":"\u901a\u4fe1\u65b9\u5f0f"},{"location":"%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%20%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3/store/#_16","text":"\u63d0\u4f9b\u4e3b\u673a\u8bc6\u522b(\u6307\u5b9a\u3001\u627e\u5230)\u4f7f\u7528\u7684 I/O \u8bbe\u5907\u7684\u652f\u6301:\u4e3a\u6bcf\u4e2a\u8bbe\u5907\u89c4\u5b9a\u51e0\u4e2a\u5730\u5740\u7801\u6216\u7f16\u53f7\u3002 \u5efa\u7acb\u4e3b\u673a\u548c\u8bbe\u5907\u4e4b\u95f4\u7684\u63a7\u5236\u4e0e\u901a\u4fe1\u673a\u5236:\u63a5\u6536\u5904\u7406\u5668(\u4e3b\u8bbe\u5907)\u7684\u547d\u4ee4,\u5e76\u63d0\u4ea4\u7ed9\u5916\u90e8\u8bbe\u5907,\u540c\u65f6,\u4e3a\u4e3b\u8bbe\u5907\u63d0\u4f9b\u5916\u90e8\u8bbe\u5907\u7684\u72b6\u6001\u3002 \u63d0\u4f9b\u4e3b\u673a\u548c\u8bbe\u5907\u4e4b\u95f4\u4fe1\u606f\u4ea4\u6362\u8fc7\u7a0b\u4e2d\u7684\u6570\u636e\u7f13\u51b2\u673a\u6784\u3002 \u63d0\u4f9b\u4e3b\u673a\u548c\u8bbe\u5907\u4e4b\u95f4\u4fe1\u606f\u4ea4\u6362\u8fc7\u7a0b\u4e2d\u7684\u5176\u4ed6\u7279\u522b\u9700\u6c42\u652f\u6301:\u5c4f\u853d\u5916\u90e8\u8bbe\u5907\u7684\u5dee\u5f02\u3002","title":"\u63a5\u53e3\u7535\u8def\u548c\u5916\u90e8\u8bbe\u5907"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Digital%20Signal%20Processing/","text":"\u6570\u5b57\u4fe1\u53f7\u5904\u7406 \u5085\u91cc\u53f6\u53d8\u6362 \u8fde\u7eed\u4fe1\u53f7\u9891\u8c31\u975e\u5468\u671f\uff0c\u79bb\u6563\u4fe1\u53f7\u9891\u8c31\u5468\u671f \u79bb\u6563\u5468\u671f\u4fe1\u53f7\u9891\u8c31\u79bb\u6563\u5468\u671f \u5e38\u7528\u7684z\u53d8\u6362 $a^n u(n)$ $\\frac{1}{1-az^{-1}}$ $|z|>|a|$ $a^n u(-n-1)$ $\\frac{-1}{1-a^{-1}}$ $|z| < |a|$ \u5185\u63d2\u516c\u5f0f \u65f6\u57df\u91c7\u6837\uff1a x_a(t) = \\sum_{n = -\\infty}^{\\infty} x_a(nT)h(t-nT) = \\sum_{n = -\\infty}^{\\infty} x_a(nT)\\frac{sin[\\pi(t-nT)/T]}{\\pi(t-nT)/T} x_a(t) = \\sum_{n = -\\infty}^{\\infty} x_a(nT)h(t-nT) = \\sum_{n = -\\infty}^{\\infty} x_a(nT)\\frac{sin[\\pi(t-nT)/T]}{\\pi(t-nT)/T} \u9891\u57df\u91c7\u6837\uff1a H(z) = \\frac{1-z^{-N}}{N}\\sum_{k = 0}^{N-1} \\frac{H(k)}{1-W_N^{-k}z^{-1}} H(z) = \\frac{1-z^{-N}}{N}\\sum_{k = 0}^{N-1} \\frac{H(k)}{1-W_N^{-k}z^{-1}} H(e^{j\\omega}) = \\sum_{k = 0}^{N-1}\\phi(\\omega-\\frac{2\\pi}{N}k) H(e^{j\\omega}) = \\sum_{k = 0}^{N-1}\\phi(\\omega-\\frac{2\\pi}{N}k) \u5f0f\u4e2d \\phi(\\omega) \\phi(\\omega) \u4e3a\u5185\u63d2\u51fd\u6570\uff1a \\phi(\\omega) = \\frac{1}{N}\\sum_{k = 0}^{N-1} \\frac{sin(N\\omega/2)}{\\omega/2} e^{j\\omega(\\frac{N-1}{2})} \\phi(\\omega) = \\frac{1}{N}\\sum_{k = 0}^{N-1} \\frac{sin(N\\omega/2)}{\\omega/2} e^{j\\omega(\\frac{N-1}{2})} IIR\u6570\u5b57\u6ee4\u6ce2\u5668 \u8109\u51b2\u54cd\u5e94\u4e0d\u53d8\u6cd5 H_a(s) = \\sum_{k = 1}^N \\frac{A_k}{s-s_k} \\rightarrow H(z) = \\sum_{k = 1}^N \\frac{TA_k}{1-e^{s_kT}z^{-1}} H_a(s) = \\sum_{k = 1}^N \\frac{A_k}{s-s_k} \\rightarrow H(z) = \\sum_{k = 1}^N \\frac{TA_k}{1-e^{s_kT}z^{-1}} \u53cc\u7ebf\u6027\u53d8\u6362\u6cd5 \u538b\u7f29\uff1a \\Omega = c \\cdot tan(\\frac{\\omega_1 T}{2}) \\Omega = c \\cdot tan(\\frac{\\omega_1 T}{2}) s\u5e73\u9762\u5230z\u5e73\u9762\u5355\u503c\u6620\u5c04\uff1a s = \\frac{1-z^{-1}}{1+z^{-1}} s = \\frac{1-z^{-1}}{1+z^{-1}} FIR\u6570\u5b57\u6ee4\u6ce2\u5668\u8bbe\u8ba1\u65b9\u6cd5 \u7a97\u51fd\u6570\u6cd5\uff1b\u4ece\u65f6\u57df\u51fa\u53d1\uff0c\u628a\u7406\u60f3\u7684 h_d(n) h_d(n) \u7528\u4e00\u5b9a\u5f62\u72b6\u7684\u7a97\u51fd\u6570\u622a\u53d6\u6210\u6709\u9650\u957f\u7684 h(n) h(n) \uff0c\u4ee5\u6b64\u6765\u903c\u8fd1\u7406\u60f3\u7684 h_d(n) h_d(n) \uff0c\u5f97\u5230\u7684\u9891\u7387\u54cd\u5e94\u903c\u8fd1\u7406\u60f3\u7684 H_d(e^{j\\omega}) H_d(e^{j\\omega}) \u9891\u7387\u91c7\u6837\u6cd5\uff1a\u4ece\u9891\u57df\u51fa\u53d1\uff0c\u628a\u7ed9\u5b9a\u7684 H_d(e^{j\\omega}) H_d(e^{j\\omega}) \u7b49\u95f4\u9694\u91c7\u6837\uff0c\u5373 H_d(e^{j\\omega})|_{\\omega = \\frac{2\\pi k}{N}} = H_d(k) H_d(e^{j\\omega})|_{\\omega = \\frac{2\\pi k}{N}} = H_d(k) \u7136\u540e\u4ee5\u6b64 H_d(k) H_d(k) \u4f5c\u4e3a\u5b9e\u9645FIR\u6570\u5b57\u6ee4\u6ce2\u5668\u7684\u9891\u7387\u7279\u6027\u91c7\u6837\u503c H(k) H(k) \uff0c\u5373\u4ee4 H(k) = H_d(k)\\qquad,k = 0,1,\\cdots ,N-1 H(k) = H_d(k)\\qquad,k = 0,1,\\cdots ,N-1 \u518d\u5229\u7528\u5185\u63d2\u516c\u5f0f\u4f7f H(z) H(z) \u903c\u8fd1 H_d(z) H_d(z) \u7a97\u51fd\u6570\u6cd5 \u7a97\u51fd\u6570\u8981\u6c42\uff1a 1. \u4e3b\u74e3\u5c3d\u53ef\u80fd\u7a84\uff0c\u4ee5\u83b7\u5f97\u8f83\u9661\u7684\u8fc7\u6e21\u5e26 2. \u5c3d\u91cf\u51cf\u5c11\u7a97\u8c31\u6700\u5927\u65c1\u74e3\u7684\u76f8\u5bf9\u5e45\u5ea6\uff0c\u4f7f\u80fd\u91cf\u5c3d\u91cf\u96c6\u4e2d\u4e8e\u4e3b\u74e3 \u56db\u79cd\u7ebf\u6027\u76f8\u4f4d\u7684FIR\u6ee4\u6ce2\u5668\uff1a 1. h(n) h(n) \u4e3a\u5947\uff08\u5076\uff09\u5bf9\u79f0\uff0c H(\\omega) H(\\omega) \u5173\u4e8e 0 ,2\\pi 0 ,2\\pi \u5947\uff08\u5076\uff09\u5bf9\u79f0 2. N N \u4e3a\u57fa\u6570\uff0c\u4e0d\u5f71\u54cd \\pi \\pi \u5bf9\u79f0\u6027\uff0c\u5076\u6570\u5f71\u54cd \u591a\u91c7\u6837\u7387\u6570\u5b57\u4fe1\u53f7\u5904\u7406 \u62bd\u53d6\uff1a Y(z) = \\frac{1}{M} \\sum_{k = 0}^{M-1}X(e^{j\\frac{2\\pi k}{M}}z^{-M}) Y(z) = \\frac{1}{M} \\sum_{k = 0}^{M-1}X(e^{j\\frac{2\\pi k}{M}}z^{-M}) \u5185\u63d2\uff1a Y(z) = X(z^L) Y(z) = X(z^L)","title":"\u6570\u5b57\u4fe1\u53f7\u5904\u7406"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Digital%20Signal%20Processing/#_1","text":"","title":"\u6570\u5b57\u4fe1\u53f7\u5904\u7406"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Digital%20Signal%20Processing/#_2","text":"\u8fde\u7eed\u4fe1\u53f7\u9891\u8c31\u975e\u5468\u671f\uff0c\u79bb\u6563\u4fe1\u53f7\u9891\u8c31\u5468\u671f \u79bb\u6563\u5468\u671f\u4fe1\u53f7\u9891\u8c31\u79bb\u6563\u5468\u671f","title":"\u5085\u91cc\u53f6\u53d8\u6362"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Digital%20Signal%20Processing/#z","text":"$a^n u(n)$ $\\frac{1}{1-az^{-1}}$ $|z|>|a|$ $a^n u(-n-1)$ $\\frac{-1}{1-a^{-1}}$ $|z| < |a|$","title":"\u5e38\u7528\u7684z\u53d8\u6362"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Digital%20Signal%20Processing/#_3","text":"\u65f6\u57df\u91c7\u6837\uff1a x_a(t) = \\sum_{n = -\\infty}^{\\infty} x_a(nT)h(t-nT) = \\sum_{n = -\\infty}^{\\infty} x_a(nT)\\frac{sin[\\pi(t-nT)/T]}{\\pi(t-nT)/T} x_a(t) = \\sum_{n = -\\infty}^{\\infty} x_a(nT)h(t-nT) = \\sum_{n = -\\infty}^{\\infty} x_a(nT)\\frac{sin[\\pi(t-nT)/T]}{\\pi(t-nT)/T} \u9891\u57df\u91c7\u6837\uff1a H(z) = \\frac{1-z^{-N}}{N}\\sum_{k = 0}^{N-1} \\frac{H(k)}{1-W_N^{-k}z^{-1}} H(z) = \\frac{1-z^{-N}}{N}\\sum_{k = 0}^{N-1} \\frac{H(k)}{1-W_N^{-k}z^{-1}} H(e^{j\\omega}) = \\sum_{k = 0}^{N-1}\\phi(\\omega-\\frac{2\\pi}{N}k) H(e^{j\\omega}) = \\sum_{k = 0}^{N-1}\\phi(\\omega-\\frac{2\\pi}{N}k) \u5f0f\u4e2d \\phi(\\omega) \\phi(\\omega) \u4e3a\u5185\u63d2\u51fd\u6570\uff1a \\phi(\\omega) = \\frac{1}{N}\\sum_{k = 0}^{N-1} \\frac{sin(N\\omega/2)}{\\omega/2} e^{j\\omega(\\frac{N-1}{2})} \\phi(\\omega) = \\frac{1}{N}\\sum_{k = 0}^{N-1} \\frac{sin(N\\omega/2)}{\\omega/2} e^{j\\omega(\\frac{N-1}{2})}","title":"\u5185\u63d2\u516c\u5f0f"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Digital%20Signal%20Processing/#iir","text":"","title":"IIR\u6570\u5b57\u6ee4\u6ce2\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Digital%20Signal%20Processing/#_4","text":"H_a(s) = \\sum_{k = 1}^N \\frac{A_k}{s-s_k} \\rightarrow H(z) = \\sum_{k = 1}^N \\frac{TA_k}{1-e^{s_kT}z^{-1}} H_a(s) = \\sum_{k = 1}^N \\frac{A_k}{s-s_k} \\rightarrow H(z) = \\sum_{k = 1}^N \\frac{TA_k}{1-e^{s_kT}z^{-1}}","title":"\u8109\u51b2\u54cd\u5e94\u4e0d\u53d8\u6cd5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Digital%20Signal%20Processing/#_5","text":"\u538b\u7f29\uff1a \\Omega = c \\cdot tan(\\frac{\\omega_1 T}{2}) \\Omega = c \\cdot tan(\\frac{\\omega_1 T}{2}) s\u5e73\u9762\u5230z\u5e73\u9762\u5355\u503c\u6620\u5c04\uff1a s = \\frac{1-z^{-1}}{1+z^{-1}} s = \\frac{1-z^{-1}}{1+z^{-1}}","title":"\u53cc\u7ebf\u6027\u53d8\u6362\u6cd5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Digital%20Signal%20Processing/#fir","text":"\u7a97\u51fd\u6570\u6cd5\uff1b\u4ece\u65f6\u57df\u51fa\u53d1\uff0c\u628a\u7406\u60f3\u7684 h_d(n) h_d(n) \u7528\u4e00\u5b9a\u5f62\u72b6\u7684\u7a97\u51fd\u6570\u622a\u53d6\u6210\u6709\u9650\u957f\u7684 h(n) h(n) \uff0c\u4ee5\u6b64\u6765\u903c\u8fd1\u7406\u60f3\u7684 h_d(n) h_d(n) \uff0c\u5f97\u5230\u7684\u9891\u7387\u54cd\u5e94\u903c\u8fd1\u7406\u60f3\u7684 H_d(e^{j\\omega}) H_d(e^{j\\omega}) \u9891\u7387\u91c7\u6837\u6cd5\uff1a\u4ece\u9891\u57df\u51fa\u53d1\uff0c\u628a\u7ed9\u5b9a\u7684 H_d(e^{j\\omega}) H_d(e^{j\\omega}) \u7b49\u95f4\u9694\u91c7\u6837\uff0c\u5373 H_d(e^{j\\omega})|_{\\omega = \\frac{2\\pi k}{N}} = H_d(k) H_d(e^{j\\omega})|_{\\omega = \\frac{2\\pi k}{N}} = H_d(k) \u7136\u540e\u4ee5\u6b64 H_d(k) H_d(k) \u4f5c\u4e3a\u5b9e\u9645FIR\u6570\u5b57\u6ee4\u6ce2\u5668\u7684\u9891\u7387\u7279\u6027\u91c7\u6837\u503c H(k) H(k) \uff0c\u5373\u4ee4 H(k) = H_d(k)\\qquad,k = 0,1,\\cdots ,N-1 H(k) = H_d(k)\\qquad,k = 0,1,\\cdots ,N-1 \u518d\u5229\u7528\u5185\u63d2\u516c\u5f0f\u4f7f H(z) H(z) \u903c\u8fd1 H_d(z) H_d(z)","title":"FIR\u6570\u5b57\u6ee4\u6ce2\u5668\u8bbe\u8ba1\u65b9\u6cd5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Digital%20Signal%20Processing/#_6","text":"\u7a97\u51fd\u6570\u8981\u6c42\uff1a 1. \u4e3b\u74e3\u5c3d\u53ef\u80fd\u7a84\uff0c\u4ee5\u83b7\u5f97\u8f83\u9661\u7684\u8fc7\u6e21\u5e26 2. \u5c3d\u91cf\u51cf\u5c11\u7a97\u8c31\u6700\u5927\u65c1\u74e3\u7684\u76f8\u5bf9\u5e45\u5ea6\uff0c\u4f7f\u80fd\u91cf\u5c3d\u91cf\u96c6\u4e2d\u4e8e\u4e3b\u74e3 \u56db\u79cd\u7ebf\u6027\u76f8\u4f4d\u7684FIR\u6ee4\u6ce2\u5668\uff1a 1. h(n) h(n) \u4e3a\u5947\uff08\u5076\uff09\u5bf9\u79f0\uff0c H(\\omega) H(\\omega) \u5173\u4e8e 0 ,2\\pi 0 ,2\\pi \u5947\uff08\u5076\uff09\u5bf9\u79f0 2. N N \u4e3a\u57fa\u6570\uff0c\u4e0d\u5f71\u54cd \\pi \\pi \u5bf9\u79f0\u6027\uff0c\u5076\u6570\u5f71\u54cd","title":"\u7a97\u51fd\u6570\u6cd5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Digital%20Signal%20Processing/#_7","text":"\u62bd\u53d6\uff1a Y(z) = \\frac{1}{M} \\sum_{k = 0}^{M-1}X(e^{j\\frac{2\\pi k}{M}}z^{-M}) Y(z) = \\frac{1}{M} \\sum_{k = 0}^{M-1}X(e^{j\\frac{2\\pi k}{M}}z^{-M}) \u5185\u63d2\uff1a Y(z) = X(z^L) Y(z) = X(z^L)","title":"\u591a\u91c7\u6837\u7387\u6570\u5b57\u4fe1\u53f7\u5904\u7406"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/EMC/","text":"EMC \u4ea7\u751f\u7535\u78c1\u5e72\u6270\u7684\u6839\u672c\u539f\u56e0\uff1a\u5e72\u6270\u6e90\u548c\u654f\u611f\u8bbe\u5907\u5de5\u4f5c\u9891\u7387\uff08\u6bb5\uff09\u4e0a\u6240\u4ea7\u751f\u7684\u540c\u9891\u7387\uff08\u6bb5\uff09\u7684\u80fd\u91cf\u8026\u5408\uff0c\u4ece\u800c\u4f7f\u654f\u611f\u8bbe\u5907\u65e0\u6cd5\u5de5\u4f5c\u3002 EMC\u9886\u57df\u7684\u9891\u7387\u662f\u6307\u9891\u57df\u4e2d\u7684\u9891\u7387\uff0c\u5373\u5bf9\u5e94\u7b80\u8c10\u6ce2\u7684\u9891\u7387\u3002 \u6807\u51c6\uff1a 1. \u57fa\u7840\u6807\u51c6\uff1a\u662f\u5176\u4ed6\u7535\u78c1\u517c\u5bb9\u6807\u51c6\u7684\u57fa\u7840\uff0c\u4e00\u822c\u4e0d\u6d89\u53ca\u5177\u4f53\u7684\u4ea7\u54c1\uff0c\u5b83\u89c4\u5b9a\u4e86\u73b0\u8c61\uff0c\u73af\u5883\u7279\u5f81\uff0c\u8bd5\u9a8c\u548c\u6d4b\u8bd5\u65b9\u6cd5\uff0c\u8bd5\u9a8c\u4eea\u5668\u548c\u57fa\u672c\u8bd5\u9a8c\u88c5\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u89c4\u5b9a\u4e0d\u540c\u7684\u8bd5\u9a8c\u7535\u5e73\u8303\u56f4 2. \u901a\u7528\u6807\u51c6\uff1a\u89c4\u5b9a\u4e86\u4e00\u7cfb\u5217\u6807\u51c6\u5316\u5b9e\u9a8c\u65b9\u6cd5\u548c\u8981\u6c42\uff08\u9650\u503c\uff09\uff0c\u5e76\u7ed9\u51fa\u4e86\u8fd9\u4e9b\u65b9\u6cd5\u9002\u7528\u7684\u73af\u5883\uff0c\u5982\u679c\u67d0\u79cd\u4ea7\u54c1\u6ca1\u6709\u4ea7\u54c1\u7c7b\u6807\u51c6\u6216\u4ea7\u54c1\u6807\u51c6\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u901a\u7528\u6807\u51c6 3. \u4ea7\u54c1\u7c7b\u6807\u51c6\uff1a\u9488\u5bf9\u67d0\u7c7b\u4ea7\u54c1\u89c4\u5b9a\u4e86\u7279\u6b8a\u7684\u7535\u78c1\u517c\u5bb9\u8981\u6c42\uff08\u53d1\u5c04\u548c\u6297\u6270\u5ea6\uff09\uff0c\u4ee5\u53ca\u8be6\u7ec6\u7684\u6d4b\u91cf\u7a0b\u5e8f 4. \u4e13\u7528\u4ea7\u54c1\u6807\u51c6\uff1a\u901a\u5e38\u4e13\u7528\u4ea7\u54c1EMC\u6807\u51c6\u5305\u542b\u5728\u67d0\u79cd\u7279\u5b9a\u4ea7\u54c1\u4e2d\u7684\u4e00\u822c\u7528\u9014\u6807\u51c6\u4e2d\uff0c\u800c\u4e0d\u80fd\u5f62\u6210\u5355\u72ec\u7684\u6807\u51c6 LISN\u4f5c\u7528\uff1a 1. \u572810KHz-30MHz\u5185\uff0c\u7ed9\u76f8\u7ebf\u4e0e\u5730\u7ebf\u548c\u4e2d\u7ebf\u4e0e\u5730\u7ebf\u4e4b\u95f4\u63d0\u4f9b50 \\Omega \\Omega \u7684\u6052\u5b9a\u7535\u963b 2. \u4f7f50Hz\u621660Hz\u7684\u6709\u7528\u4fe1\u53f7\u5438\u6536\u901a\u8fc7 3. \u7ed9\u88ab\u6d4b\u8bbe\u5907\u63d0\u4f9b\u4f20\u5bfc\u5e72\u6270\u901a\u9053\u5e76\u963b\u6b62\u7535\u6e90\u4fa7\u7684\u4f20\u5bfc\u5e72\u6270 \u6d4b\u8bd5\u573a\u5730\uff1a\u51e1\u662f\u53ef\u4ee5\u8fdb\u884c\u8f90\u5c04\u53d1\u5c04\u548c\u8f90\u5c04\u6297\u6270\u5ea6\u6d4b\u8bd5\u7684\u8bbe\u65bd \u5206\u4e3a\uff1a\u7535\u78c1\u5c4f\u853d\u5ba4\uff0c\u5f00\u9614\u8bd5\u9a8c\u573a\uff0c\u534a\u7535\u6ce2\u6697\u5ba4\uff0c\u5168\u7535\u6ce2\u6697\u5ba4 \u5c4f\u853d\u6548\u80fd\uff1a\u5728\u65e0\u5c4f\u853d\u6761\u4ef6\u4e0b\u4ece\u4e00\u53d1\u5c04\u6e90\u63a5\u6536\u4fe1\u53f7\u7684\u5f3a\u5ea6\u548c\u5c4f\u853d\u5ba4\u5185\u63a5\u6536\u7684\u4fe1\u53f7\u5f3a\u5ea6\u7684\u6bd4\u503c SE_H = 20lg \\frac{H_1}{H_2} SE_H = 20lg \\frac{H_1}{H_2} \u89d2\u9525\u7684\u957f\u5ea6\u6700\u597d\u80fd\u957f\u8fc7\u6ce2\u957f\u7684 \\frac{1}{4} \\frac{1}{4} \uff0c\u9002\u5408\u9ad8\u9891 \u5bf9\u6570\u5468\u671f\u5929\u7ebf\uff1a \\alpha \\alpha \u8d8a\u5c0f\uff0c\u5438\u6536\u8d8a\u6162\uff0c\u5e26\u5bbd\u8d8a\u5927 \u6ee4\u6ce2\uff1a\u6ee4\u6ce2\u662f\u6307\u5c06\u5404\u7c7b\u4fe1\u53f7\u6309\u9891\u7387\u7279\u6027\u5206\u7c7b\u5e76\u63a7\u5236\u5b83\u4eec\u7684\u65b9\u5411\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u9891\u7387\u70b9\u8303\u56f4\u7c7b\u7684\u4fe1\u53f7\u63d0\u4f9b\u901a\u8def\uff0c\u800c\u5bf9\u53e6\u4e00\u4e9b\u9891\u7387\u70b9\u8303\u56f4\u5185\u7684\u4fe1\u53f7\u63d0\u4f9b\u963b\u65ad\u7684\u6280\u672f \u53cd\u5c04\u5f0f\u6ee4\u6ce2\u5668\uff1a\u5c06\u4e0d\u9700\u8981\u9891\u7387\u5206\u91cf\u7684\u80fd\u91cf\u53cd\u5c04\u56de\u4fe1\u53f7\u6e90\u6216\u9a9a\u6270\u6e90\uff0c\u800c\u8ba9\u9700\u8981\u9891\u7387\u5206\u91cf\u7684\u80fd\u91cf\u901a\u8fc7\u6ee4\u6ce2\u5668\u65bd\u52a0\u4e8e\u8d1f\u8f7d\uff0c\u4ece\u800c\u8fbe\u5230\u9009\u62e9\u548c\u6291\u5236\u4fe1\u53f7\u7684\u76ee\u7684 \u5438\u6536\u5f0f\u6ee4\u6ce2\u5668\uff1a\u5c06\u4e0d\u9700\u8981\u9891\u7387\u5206\u91cf\u7684\u80fd\u91cf\u6d88\u8017\u5728\u6ee4\u6ce2\u5668\u4e2d\uff0c\u5141\u8bb8\u9700\u8981\u9891\u7387\u5206\u91cf\u7684\u80fd\u91cf\u901a\u8fc7\uff0c\u8fbe\u5230\u6291\u5236\u5e72\u6270\u7684\u76ee\u7684 \u63d2\u5165\u635f\u8017\uff1a\u6ee4\u6ce2\u5668\u6ca1\u6709\u63a5\u5165\u7535\u8def\u65f6\u548c\u63a5\u5165\u7535\u8def\u65f6\uff0c\u7531\u6e90\u4f20\u9001\u7ed9\u8d1f\u8f7d\u7684\u529f\u7387\u4e4b\u6bd4\uff0c\u7531\u5206\u8d1d\u8868\u793a I_L = 10lg\\frac{P_1}{P_2} I_L = 10lg\\frac{P_1}{P_2} \u8d8a\u5927\u8d8a\u597d \u622a\u6b62\u9891\u7387\uff1a\u4fe1\u53f7\u632f\u5e45\u4e0b\u964d\u7684\u6700\u5927\u503c0.707\u500d\u7684\u9891\u7387 \u5171\u6a21\u627c\u6d41\u5708\uff1a 1. \u6291\u5236\u5171\u6a21\u5e72\u6270\u4fe1\u53f7\uff1a\u5171\u6a21\u7535\u6d41\u65b9\u5411\u76f8\u540c\uff0c\u4f20\u9012\u8fc7\u7a0b\u4e2d\uff0c\u4ea7\u751f\u5f88\u5927\u7684 \\phi \\phi \uff0c\u4e14\u4e92\u76f8\u589e\u5f3a\uff0c\u4ea7\u751f\u5f88\u5927\u7684 L_{cm} L_{cm} \uff0c z_{cm} z_{cm} \u5f88\u5927 2. \u4f7f\u5dee\u6a21\u4fe1\u53f7\u987a\u5229\u901a\u8fc7\uff1a\u5dee\u6a21\u7535\u6d41\u65b9\u5411\u76f8\u53cd\uff0c\u4ea7\u751f\u7684 \\phi \\phi \uff0c\u4e92\u76f8\u62b5\u6d88\uff0c\u5dee\u6a21\u963b\u6297\u51e0\u4e4e\u4e3a0 \u9759\u7535\u5c4f\u853d\u539f\u7406\uff1a\u5229\u7528\u5bfc\u4f53\u5728\u7535\u573a\u4e2d\u7684\u9759\u7535\u611f\u5e94\u73b0\u8c61\uff0c\u4f7f\u5bfc\u4f53\u5904\u4e8e\u9759\u7535\u5e73\u8861\u72b6\u6001\uff0c\u800c\u5904\u4e8e\u9759\u7535\u5e73\u8861\u72b6\u6001\u7684\u5bfc\u4f53\u5185\u90e8\u573a\u5f3a\u5904\u5904\u4e3a0\uff0c\u9759\u7535\u8377\u5168\u90e8\u5206\u5e03\u5728\u5bfc\u4f53\u8868\u9762\uff0c\u5185\u90e8\u6ca1\u6709\u9759\u7535\u8377 \u6750\u6599\uff1a\u7535\u826f\u5bfc\u4f53 \u5b8c\u5168\u9759\u7535\u5c4f\u853d\u5fc5\u8981\u6761\u4ef6\uff1a\u5b8c\u6574\u7684\u5bfc\u4f53\uff0c\u63a5\u5730 \u4ea4\u53d8\u7535\u573a\u5c4f\u853d\u539f\u7406\uff0c\u6750\u6599\u540c\u4e0a \u4ea4\u53d8\u78c1\u573a\u5c4f\u853d\u539f\u7406\uff1a 1. \u4f4e\u9891\uff1a\u5229\u7528\u9ad8\u78c1\u5bfc\u7684\u94c1\u78c1\u6750\u6599\uff0c\u5bf9\u9a9a\u6270\u78c1\u573a\u8fdb\u884c\u5206\u8def\uff0c\u628a\u78c1\u529b\u7ebf\u96c6\u4e2d\u5728\u5176\u5185\u90e8\u901a\u8fc7\uff0c\u9650\u5236\u5728\u7a7a\u6c14\u4e2d\u7684\u53d1\u6563 \u6750\u6599\uff1a\u9ad8\u78c1\u5bfc\u7684\u94c1\u78c1\u6750\u6599 \u9ad8\u9891\uff1a\u5229\u7528\u7535\u78c1\u611f\u5e94\u73b0\u8c61\u4ea7\u751f\u7684\u6da1\u6d41\u7684\u53cd\u78c1\u573a\u6765\u8fbe\u5230\u5c4f\u853d\u7684\u76ee\u7684\uff0c\u5373\u5229\u7528\u4e86\u6da1\u6d41\u53cd\u78c1\u573a\u5bf9\u539f\u9a9a\u6270\u78c1\u573a\u7684\u6392\u65a5\u4f5c\u7528\uff0c\u6291\u5236\u6216\u62b5\u6d88\u5c4f\u853d\u4f53\u5916\u7684\u78c1\u573a \u6750\u6599\uff1a\u4f4e\u7535\u963b\u7387\u7684\u826f\u5bfc\u4f53 \u89e3\u51b3\u5730\u73af\u8def\u5e72\u6270\u7684\u65b9\u6cd5\uff1a\u9694\u79bb\u53d8\u538b\u5668\uff0c\u5149\u8026\u5408\uff0c\u5171\u6a21\u627c\u6d41\u5708\uff0c\u5e73\u8861\u7535\u8def \u4e32\u8054\u5355\u70b9\uff1a\u4f18\uff1a\u65b9\u6cd5\u7b80\u5355\uff1b\u7f3a\uff1a\u901a\u8fc7\u516c\u5171\u7ebf\u963b\u6297\u4ea7\u751f\u76f4\u63a5\u4f20\u5bfc\u8026\u5408 \u5e76\u8054\u5355\u70b9\uff1a\u4f18\uff1a\u907f\u514d\u516c\u5171\u963b\u6297\u8026\u5408\uff1b\u7f3a\uff1a\u63a5\u5730\u7ebf\u8fc7\u591a \u591a\u70b9\u63a5\u5730\uff1a\u4f18\uff1a\u5730\u7ebf\u77ed\uff0c\u9002\u7528\u4e8e\u9ad8\u9891\uff1b\u7f3a\uff1a\u5f62\u6210\u5730\u7ebf\u56de\u8def\uff0c\u9020\u6210\u5730\u73af\u8def\u5e72\u6270","title":"EMC"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/EMC/#emc","text":"\u4ea7\u751f\u7535\u78c1\u5e72\u6270\u7684\u6839\u672c\u539f\u56e0\uff1a\u5e72\u6270\u6e90\u548c\u654f\u611f\u8bbe\u5907\u5de5\u4f5c\u9891\u7387\uff08\u6bb5\uff09\u4e0a\u6240\u4ea7\u751f\u7684\u540c\u9891\u7387\uff08\u6bb5\uff09\u7684\u80fd\u91cf\u8026\u5408\uff0c\u4ece\u800c\u4f7f\u654f\u611f\u8bbe\u5907\u65e0\u6cd5\u5de5\u4f5c\u3002 EMC\u9886\u57df\u7684\u9891\u7387\u662f\u6307\u9891\u57df\u4e2d\u7684\u9891\u7387\uff0c\u5373\u5bf9\u5e94\u7b80\u8c10\u6ce2\u7684\u9891\u7387\u3002 \u6807\u51c6\uff1a 1. \u57fa\u7840\u6807\u51c6\uff1a\u662f\u5176\u4ed6\u7535\u78c1\u517c\u5bb9\u6807\u51c6\u7684\u57fa\u7840\uff0c\u4e00\u822c\u4e0d\u6d89\u53ca\u5177\u4f53\u7684\u4ea7\u54c1\uff0c\u5b83\u89c4\u5b9a\u4e86\u73b0\u8c61\uff0c\u73af\u5883\u7279\u5f81\uff0c\u8bd5\u9a8c\u548c\u6d4b\u8bd5\u65b9\u6cd5\uff0c\u8bd5\u9a8c\u4eea\u5668\u548c\u57fa\u672c\u8bd5\u9a8c\u88c5\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u89c4\u5b9a\u4e0d\u540c\u7684\u8bd5\u9a8c\u7535\u5e73\u8303\u56f4 2. \u901a\u7528\u6807\u51c6\uff1a\u89c4\u5b9a\u4e86\u4e00\u7cfb\u5217\u6807\u51c6\u5316\u5b9e\u9a8c\u65b9\u6cd5\u548c\u8981\u6c42\uff08\u9650\u503c\uff09\uff0c\u5e76\u7ed9\u51fa\u4e86\u8fd9\u4e9b\u65b9\u6cd5\u9002\u7528\u7684\u73af\u5883\uff0c\u5982\u679c\u67d0\u79cd\u4ea7\u54c1\u6ca1\u6709\u4ea7\u54c1\u7c7b\u6807\u51c6\u6216\u4ea7\u54c1\u6807\u51c6\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u901a\u7528\u6807\u51c6 3. \u4ea7\u54c1\u7c7b\u6807\u51c6\uff1a\u9488\u5bf9\u67d0\u7c7b\u4ea7\u54c1\u89c4\u5b9a\u4e86\u7279\u6b8a\u7684\u7535\u78c1\u517c\u5bb9\u8981\u6c42\uff08\u53d1\u5c04\u548c\u6297\u6270\u5ea6\uff09\uff0c\u4ee5\u53ca\u8be6\u7ec6\u7684\u6d4b\u91cf\u7a0b\u5e8f 4. \u4e13\u7528\u4ea7\u54c1\u6807\u51c6\uff1a\u901a\u5e38\u4e13\u7528\u4ea7\u54c1EMC\u6807\u51c6\u5305\u542b\u5728\u67d0\u79cd\u7279\u5b9a\u4ea7\u54c1\u4e2d\u7684\u4e00\u822c\u7528\u9014\u6807\u51c6\u4e2d\uff0c\u800c\u4e0d\u80fd\u5f62\u6210\u5355\u72ec\u7684\u6807\u51c6 LISN\u4f5c\u7528\uff1a 1. \u572810KHz-30MHz\u5185\uff0c\u7ed9\u76f8\u7ebf\u4e0e\u5730\u7ebf\u548c\u4e2d\u7ebf\u4e0e\u5730\u7ebf\u4e4b\u95f4\u63d0\u4f9b50 \\Omega \\Omega \u7684\u6052\u5b9a\u7535\u963b 2. \u4f7f50Hz\u621660Hz\u7684\u6709\u7528\u4fe1\u53f7\u5438\u6536\u901a\u8fc7 3. \u7ed9\u88ab\u6d4b\u8bbe\u5907\u63d0\u4f9b\u4f20\u5bfc\u5e72\u6270\u901a\u9053\u5e76\u963b\u6b62\u7535\u6e90\u4fa7\u7684\u4f20\u5bfc\u5e72\u6270 \u6d4b\u8bd5\u573a\u5730\uff1a\u51e1\u662f\u53ef\u4ee5\u8fdb\u884c\u8f90\u5c04\u53d1\u5c04\u548c\u8f90\u5c04\u6297\u6270\u5ea6\u6d4b\u8bd5\u7684\u8bbe\u65bd \u5206\u4e3a\uff1a\u7535\u78c1\u5c4f\u853d\u5ba4\uff0c\u5f00\u9614\u8bd5\u9a8c\u573a\uff0c\u534a\u7535\u6ce2\u6697\u5ba4\uff0c\u5168\u7535\u6ce2\u6697\u5ba4 \u5c4f\u853d\u6548\u80fd\uff1a\u5728\u65e0\u5c4f\u853d\u6761\u4ef6\u4e0b\u4ece\u4e00\u53d1\u5c04\u6e90\u63a5\u6536\u4fe1\u53f7\u7684\u5f3a\u5ea6\u548c\u5c4f\u853d\u5ba4\u5185\u63a5\u6536\u7684\u4fe1\u53f7\u5f3a\u5ea6\u7684\u6bd4\u503c SE_H = 20lg \\frac{H_1}{H_2} SE_H = 20lg \\frac{H_1}{H_2} \u89d2\u9525\u7684\u957f\u5ea6\u6700\u597d\u80fd\u957f\u8fc7\u6ce2\u957f\u7684 \\frac{1}{4} \\frac{1}{4} \uff0c\u9002\u5408\u9ad8\u9891 \u5bf9\u6570\u5468\u671f\u5929\u7ebf\uff1a \\alpha \\alpha \u8d8a\u5c0f\uff0c\u5438\u6536\u8d8a\u6162\uff0c\u5e26\u5bbd\u8d8a\u5927 \u6ee4\u6ce2\uff1a\u6ee4\u6ce2\u662f\u6307\u5c06\u5404\u7c7b\u4fe1\u53f7\u6309\u9891\u7387\u7279\u6027\u5206\u7c7b\u5e76\u63a7\u5236\u5b83\u4eec\u7684\u65b9\u5411\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u9891\u7387\u70b9\u8303\u56f4\u7c7b\u7684\u4fe1\u53f7\u63d0\u4f9b\u901a\u8def\uff0c\u800c\u5bf9\u53e6\u4e00\u4e9b\u9891\u7387\u70b9\u8303\u56f4\u5185\u7684\u4fe1\u53f7\u63d0\u4f9b\u963b\u65ad\u7684\u6280\u672f \u53cd\u5c04\u5f0f\u6ee4\u6ce2\u5668\uff1a\u5c06\u4e0d\u9700\u8981\u9891\u7387\u5206\u91cf\u7684\u80fd\u91cf\u53cd\u5c04\u56de\u4fe1\u53f7\u6e90\u6216\u9a9a\u6270\u6e90\uff0c\u800c\u8ba9\u9700\u8981\u9891\u7387\u5206\u91cf\u7684\u80fd\u91cf\u901a\u8fc7\u6ee4\u6ce2\u5668\u65bd\u52a0\u4e8e\u8d1f\u8f7d\uff0c\u4ece\u800c\u8fbe\u5230\u9009\u62e9\u548c\u6291\u5236\u4fe1\u53f7\u7684\u76ee\u7684 \u5438\u6536\u5f0f\u6ee4\u6ce2\u5668\uff1a\u5c06\u4e0d\u9700\u8981\u9891\u7387\u5206\u91cf\u7684\u80fd\u91cf\u6d88\u8017\u5728\u6ee4\u6ce2\u5668\u4e2d\uff0c\u5141\u8bb8\u9700\u8981\u9891\u7387\u5206\u91cf\u7684\u80fd\u91cf\u901a\u8fc7\uff0c\u8fbe\u5230\u6291\u5236\u5e72\u6270\u7684\u76ee\u7684 \u63d2\u5165\u635f\u8017\uff1a\u6ee4\u6ce2\u5668\u6ca1\u6709\u63a5\u5165\u7535\u8def\u65f6\u548c\u63a5\u5165\u7535\u8def\u65f6\uff0c\u7531\u6e90\u4f20\u9001\u7ed9\u8d1f\u8f7d\u7684\u529f\u7387\u4e4b\u6bd4\uff0c\u7531\u5206\u8d1d\u8868\u793a I_L = 10lg\\frac{P_1}{P_2} I_L = 10lg\\frac{P_1}{P_2} \u8d8a\u5927\u8d8a\u597d \u622a\u6b62\u9891\u7387\uff1a\u4fe1\u53f7\u632f\u5e45\u4e0b\u964d\u7684\u6700\u5927\u503c0.707\u500d\u7684\u9891\u7387 \u5171\u6a21\u627c\u6d41\u5708\uff1a 1. \u6291\u5236\u5171\u6a21\u5e72\u6270\u4fe1\u53f7\uff1a\u5171\u6a21\u7535\u6d41\u65b9\u5411\u76f8\u540c\uff0c\u4f20\u9012\u8fc7\u7a0b\u4e2d\uff0c\u4ea7\u751f\u5f88\u5927\u7684 \\phi \\phi \uff0c\u4e14\u4e92\u76f8\u589e\u5f3a\uff0c\u4ea7\u751f\u5f88\u5927\u7684 L_{cm} L_{cm} \uff0c z_{cm} z_{cm} \u5f88\u5927 2. \u4f7f\u5dee\u6a21\u4fe1\u53f7\u987a\u5229\u901a\u8fc7\uff1a\u5dee\u6a21\u7535\u6d41\u65b9\u5411\u76f8\u53cd\uff0c\u4ea7\u751f\u7684 \\phi \\phi \uff0c\u4e92\u76f8\u62b5\u6d88\uff0c\u5dee\u6a21\u963b\u6297\u51e0\u4e4e\u4e3a0 \u9759\u7535\u5c4f\u853d\u539f\u7406\uff1a\u5229\u7528\u5bfc\u4f53\u5728\u7535\u573a\u4e2d\u7684\u9759\u7535\u611f\u5e94\u73b0\u8c61\uff0c\u4f7f\u5bfc\u4f53\u5904\u4e8e\u9759\u7535\u5e73\u8861\u72b6\u6001\uff0c\u800c\u5904\u4e8e\u9759\u7535\u5e73\u8861\u72b6\u6001\u7684\u5bfc\u4f53\u5185\u90e8\u573a\u5f3a\u5904\u5904\u4e3a0\uff0c\u9759\u7535\u8377\u5168\u90e8\u5206\u5e03\u5728\u5bfc\u4f53\u8868\u9762\uff0c\u5185\u90e8\u6ca1\u6709\u9759\u7535\u8377 \u6750\u6599\uff1a\u7535\u826f\u5bfc\u4f53 \u5b8c\u5168\u9759\u7535\u5c4f\u853d\u5fc5\u8981\u6761\u4ef6\uff1a\u5b8c\u6574\u7684\u5bfc\u4f53\uff0c\u63a5\u5730 \u4ea4\u53d8\u7535\u573a\u5c4f\u853d\u539f\u7406\uff0c\u6750\u6599\u540c\u4e0a \u4ea4\u53d8\u78c1\u573a\u5c4f\u853d\u539f\u7406\uff1a 1. \u4f4e\u9891\uff1a\u5229\u7528\u9ad8\u78c1\u5bfc\u7684\u94c1\u78c1\u6750\u6599\uff0c\u5bf9\u9a9a\u6270\u78c1\u573a\u8fdb\u884c\u5206\u8def\uff0c\u628a\u78c1\u529b\u7ebf\u96c6\u4e2d\u5728\u5176\u5185\u90e8\u901a\u8fc7\uff0c\u9650\u5236\u5728\u7a7a\u6c14\u4e2d\u7684\u53d1\u6563 \u6750\u6599\uff1a\u9ad8\u78c1\u5bfc\u7684\u94c1\u78c1\u6750\u6599 \u9ad8\u9891\uff1a\u5229\u7528\u7535\u78c1\u611f\u5e94\u73b0\u8c61\u4ea7\u751f\u7684\u6da1\u6d41\u7684\u53cd\u78c1\u573a\u6765\u8fbe\u5230\u5c4f\u853d\u7684\u76ee\u7684\uff0c\u5373\u5229\u7528\u4e86\u6da1\u6d41\u53cd\u78c1\u573a\u5bf9\u539f\u9a9a\u6270\u78c1\u573a\u7684\u6392\u65a5\u4f5c\u7528\uff0c\u6291\u5236\u6216\u62b5\u6d88\u5c4f\u853d\u4f53\u5916\u7684\u78c1\u573a \u6750\u6599\uff1a\u4f4e\u7535\u963b\u7387\u7684\u826f\u5bfc\u4f53 \u89e3\u51b3\u5730\u73af\u8def\u5e72\u6270\u7684\u65b9\u6cd5\uff1a\u9694\u79bb\u53d8\u538b\u5668\uff0c\u5149\u8026\u5408\uff0c\u5171\u6a21\u627c\u6d41\u5708\uff0c\u5e73\u8861\u7535\u8def \u4e32\u8054\u5355\u70b9\uff1a\u4f18\uff1a\u65b9\u6cd5\u7b80\u5355\uff1b\u7f3a\uff1a\u901a\u8fc7\u516c\u5171\u7ebf\u963b\u6297\u4ea7\u751f\u76f4\u63a5\u4f20\u5bfc\u8026\u5408 \u5e76\u8054\u5355\u70b9\uff1a\u4f18\uff1a\u907f\u514d\u516c\u5171\u963b\u6297\u8026\u5408\uff1b\u7f3a\uff1a\u63a5\u5730\u7ebf\u8fc7\u591a \u591a\u70b9\u63a5\u5730\uff1a\u4f18\uff1a\u5730\u7ebf\u77ed\uff0c\u9002\u7528\u4e8e\u9ad8\u9891\uff1b\u7f3a\uff1a\u5f62\u6210\u5730\u7ebf\u56de\u8def\uff0c\u9020\u6210\u5730\u73af\u8def\u5e72\u6270","title":"EMC"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/","text":"\u901a\u4fe1\u7535\u5b50\u7ebf\u8def \u7eea\u8bba \u901a\u4fe1\u7cfb\u7edf \u5b9a\u4e49\uff1a\u5b9e\u73b0\u4fe1\u606f\u7684\u4f20\u8f93\u6240\u9700\u8bbe\u5907\u7efc\u5408 graph LR; \u4fe1\u606f-->\u8f93\u5165\u53d8\u6362\u5668; \u8f93\u5165\u53d8\u6362\u5668-->\u53d1\u9001\u8bbe\u5907; \u53d1\u9001\u8bbe\u5907-->\u4f20\u8f93\u4fe1\u9053; \u4f20\u8f93\u4fe1\u9053-->\u63a5\u53d7\u8bbe\u5907; \u63a5\u53d7\u8bbe\u5907-->\u8f93\u51fa\u53d8\u6362\u5668; \u8f93\u51fa\u53d8\u6362\u5668-->\u53d7\u4fe1\u8005; \u566a\u58f0-->\u4f20\u8f93\u4fe1\u9053; \u7ec4\u6210\uff1a\u4ee5\u4e0a5\u4e2a\u57fa\u672c\u90e8\u5206 \u8f93\u5165\u53d8\u6362\u5668\uff1a\u975e\u7535\u91cf\u8f6c\u6362\u4e3a\u57fa\u5e26\u4fe1\u53f7\u3002 \u53d1\u9001\u8bbe\u5907\uff1a\u57fa\u5e26\u4fe1\u53f7\u53d8\u6362\u4e3a\u9002\u5408\u4fe1\u9053\u4f20\u8f93\u7684\u4fe1\u53f7 \u4e24\u5927\u4efb\u52a1\uff1a 1. \u4fe1\u53f7\u53d8\u6362\uff08\u8c03\u5236\uff09 2. \u4fe1\u53f7\u653e\u5927\uff08\u7535\u538b\u548c\u529f\u7387\uff09 \u63a5\u6536\u8bbe\u5907\uff1a 1. \u89e3\u8c03 2. \u9009\u62e9\u6709\u7528\u4fe1\u53f7\uff0c\u6291\u5236\u5e72\u6270\u4fe1\u53f7 \u5206\u7c7b\uff1a\u6309\u4fe1\u9053\uff0c\u901a\u4fe1\u65b9\u5f0f\uff0c\u4f20\u8f93\u7684\u57fa\u5e26\u4fe1\u53f7\u5206 \u65e0\u7ebf\u4fe1\u9053\u53ca\u4f20\u64ad\u65b9\u5f0f \u9891\u6bb5\u7684\u5212\u5206 \u4f20\u64ad\u65b9\u5f0f\uff1a\u5730\u6ce2\uff08\u7ed5\u5c04\uff09\uff0c\u5929\u6ce2\uff08\u6298\u5c04\u548c\u53cd\u5c04\uff09\uff0c\u76f4\u7ebf\uff08\u89c6\u8ddd\uff09\u4f20\u64ad\uff0c\u51b3\u5b9a\u65b9\u5f0f\u4e3a\u4fe1\u53f7\u7684\u6ce2\u957f\uff0c\u957f\u4e2d\u6ce2\u5730\u6ce2\uff0c\u77ed\u6ce2\u5929\u6ce2\uff0c\u8d85\u77ed\u6ce2\u76f4\u7ebf \u65e0\u7ebf\u7535\u53d1\u9001\u8bbe\u5907 \u57fa\u672c\u4efb\u52a1\uff1a\u4ee5\u81ea\u7531\u7a7a\u95f4\u4e3a\u4fe1\u9053\uff0c\u628a\u4fe1\u606f\u53d8\u6362\u4e3a\u65e0\u7ebf\u7535\u6ce2\u4f20\u9001\u5230\u8fdc\u65b9 \u8981\u6c42\uff1a\u8fdc\uff0c\u591a\u8def\u4f20\u8f93 \u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u53d1\u9001\u57fa\u5e26\u4fe1\u53f7\uff1a 1. \u57fa\u5e26\u4fe1\u53f7\u662f\u4f4e\u9891\u4fe1\u53f7\uff0c\u8981\u7528\u5f88\u957f\u7684\u5929\u7ebf 2. \u5e26\u5bbd\u4e0d\u540c\uff0c\u591a\u8def\u901a\u4fe1\u56f0\u96be \u8f7d\u6ce2\u8c03\u5236\uff1a\u7528\u57fa\u5e26\u4fe1\u53f7\u53bb\u63a7\u5236\u9ad8\u9891\u8f7d\u6ce2\u4fe1\u53f7\u7684\u4e09\u53c2\u91cf\u4e4b\u4e00\uff0c\u4f7f\u5176\u968f\u57fa\u6ce2\u7ebf\u6027\u53d8\u5316 \u65b9\u5f0f\uff1a 1. \u6a21\u62df\u8c03\u5236 2. \u6570\u5b57\u8c03\u5236 graph LR; \u4e3b\u632f\u5668-->\u7f13\u51b2\u5668; \u7f13\u51b2\u5668-->\u9ad8\u9891\u653e\u5927; \u9ad8\u9891\u653e\u5927-->\u8c03\u5236\u5668; \u8c03\u5236\u5668-->\u529f\u7387\u653e\u5927; \u529f\u7387\u653e\u5927-->\u5929\u7ebf; \u8c03\u5236\u4fe1\u53f7-->\u8c03\u5236\u5668; \u8c03\u5e45\u5e7f\u64ad\u4e3a\u4f8b\uff0c\u53d8\u5316\u4e3a\uff1a graph LR; \u58f0\u7535\u53d8\u6362\u5668-->\u524d\u7f6e\u653e\u5927\u5668; \u524d\u7f6e\u653e\u5927\u5668-->\u4f4e\u9891\u529f\u7387\u653e\u5927; \u4f4e\u9891\u529f\u7387\u653e\u5927-->AM\u8c03\u5236\u5668; \u4f4e\u9891\u90e8\u5206+\u9ad8\u9891\u90e8\u5206+\u5929\u7ebf \u65e0\u7ebf\u7535\u63a5\u53d7\u8bbe\u5907 \u89e3\u8c03\uff1a\u68c0\u6ce2\uff0c\u9274\u9891\u548c\u9274\u76f8 \u76f4\u63a5\u68c0\u6ce2\u5f0f\u63a5\u6536\u673a\uff0c\u7075\u654f\u5ea6\uff0c\u9009\u62e9\u6027\u4f4e \u76f4\u63a5\u653e\u5927\u5f0f\u63a5\u6536\u673a\uff1a\u9002\u7528\u4e8e\u56fa\u5b9a\u9891\u7387\u7684\u63a5\u6536 \u8d85\u5916\u5dee\u63a5\u6536\u673a\uff0c\u540c\u65f6\u517c\u987e\u9ad8\u7075\u654f\u5ea6\u548c\u9ad8\u9009\u62e9\u6027\uff0c\u8c03\u5e45\u5e7f\u64ad\u4e3a\u4f8b\uff1a graph LR; \u5929\u7ebf-->\u9ad8\u9891\u5c0f\u4fe1\u53f7\u653e\u5927\u5668; \u9ad8\u9891\u5c0f\u4fe1\u53f7\u653e\u5927\u5668-->\u6df7\u9891\u5668; \u6df7\u9891\u5668-->\u4e2d\u9891\u653e\u5927; \u4e2d\u9891\u653e\u5927-->\u68c0\u6ce2\u5668; \u68c0\u6ce2\u5668-->\u4f4e\u9891\u7535\u538b\u653e\u5927; \u4f4e\u9891\u7535\u538b\u653e\u5927-->\u4f4e\u9891\u529f\u7387\u653e\u5927; \u672c\u673a\u632f\u8361-->\u6df7\u9891\u5668; \u901a\u4fe1\u7535\u5b50\u7ebf\u8def\u7814\u7a76\u5bf9\u8c61 \u53d1\u5c04\u8bbe\u5907\u548c\u63a5\u6536\u8bbe\u5907\u7684\u5404\u79cd\u9ad8\u9891\u7535\u8def \u9ad8\u9891\uff1a\u51e0\u767eKHz\u5230\u51e0\u767eMHz \u9ad8\u9891\u57fa\u7840\u7535\u8def LC\u4e32\u5e76\u8054\u8c10\u632f\u56de\u8def \u9ad8\u9891\u7b49\u6548\uff1a \u7535\u611f\uff1a\u7406\u60f3\u7535\u611f\u4e0e\u635f\u8017\u7535\u963b\u4e32\u8054\u6216\u635f\u8017\u7535\u5bfc\u5e76\u8054\u3002 Q_0 Q_0 \u4e3a\u7406\u60f3\u54c1\u8d28\u56e0\u6570\uff0c\u53ef\u5728\u5de5\u4f5c\u9891\u7387\u4e0b\u901a\u8fc7Q\u8868\u76f4\u63a5\u6d4b\u5f97\uff0c Q_0 \\gg 1 Q_0 \\gg 1 \u65f6\uff0c r_0=\\frac{\\omega_0L}{Q_0} r_0=\\frac{\\omega_0L}{Q_0} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">r_0=\\frac{\\omega_0L}{Q_0}</span><script type=\"math/tex\">r_0=\\frac{\\omega_0L}{Q_0} g_0=\\frac{1}{\\omega_0LQ_0} g_0=\\frac{1}{\\omega_0LQ_0} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">g_0=\\frac{1}{\\omega_0LQ_0}</span><script type=\"math/tex\">g_0=\\frac{1}{\\omega_0LQ_0} \u7535\u5bb9\uff1a\u7b49\u6548\u4e3a\u7406\u60f3\u7535\u5bb9 Q=\\frac{\\omega L}{R} Q=\\frac{\\omega L}{R} \uff0c\u5e76\u8054\u8c10\u632f\u56de\u8def Q=\\frac{R}{\\omega L}= Q=\\frac{R}{\\omega L}= \u4e32\u8054\u8c10\u632f\u56de\u8def \u8c10\u632f\u65f6\u7535\u6d41\u6700\u5927\uff0c\u963b\u6297\u6700\u5c0f\uff0c\u56de\u8def\u54c1\u8d28\u56e0\u7d20\u8d8a\u5927\uff0c\u76f8\u5bf9\u5e45\u9891\u7279\u6027\uff0c\u76f8\u5bf9\u76f8\u9891\u7279\u6027\u8d8a\u9661\uff0c\u968f \\omega \\omega \u589e\u52a0\uff0c\u963b\u6297\u7531\u5bb9\u6297\u5411\u611f\u6297\u8f6c\u5316 \u5e76\u8054\u8c10\u632f\u56de\u8def\uff1a \u7a7a\u8f7d\u65f6 \u8c10\u632f\u9891\u7387:\\omega_p=\\omega_0\\sqrt{1-\\frac{1}{Q_0^2}} \u8c10\u632f\u9891\u7387:\\omega_p=\\omega_0\\sqrt{1-\\frac{1}{Q_0^2}} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">\u8c10\u632f\u9891\u7387:\\omega_p=\\omega_0\\sqrt{1-\\frac{1}{Q_0^2}}</span><script type=\"math/tex\">\u8c10\u632f\u9891\u7387:\\omega_p=\\omega_0\\sqrt{1-\\frac{1}{Q_0^2}} Q_0 \\gg 1 Q_0 \\gg 1 \u65f6\uff0c \\omega_p=\\omega_0 \\omega_p=\\omega_0 \uff0c\u4e14\u6b64\u65f6\u6709\u56de\u8def\u7535\u963b R_p=Q_0^2r_0 R_p=Q_0^2r_0 \u5e26\u8f7d \u52a0\u4e00\u8d1f\u8f7d\uff0c\u4e0d\u5f71\u54cd\u8c10\u632f\u9891\u7387\uff0c\u8c10\u632f\u65f6\uff0c\u7535\u963b\u51cf\u5c0f\uff0c\u54c1\u8d28\u56e0\u7d20\u51cf\u5c0f\u3002 \u8c10\u632f\u65f6\u7535\u538b\u6700\u5927\uff0c\u963b\u6297\u6700\u5927\uff0c\u56de\u8def\u54c1\u8d28\u56e0\u7d20\u8d8a\u5927\uff0c\u76f8\u5bf9\u5e45\u9891\u7279\u6027\uff0c\u76f8\u5bf9\u76f8\u9891\u7279\u6027\u8d8a\u9661\uff0c\u968f \\omega \\omega \u589e\u52a0\uff0c\u963b\u6297\u7531\u611f\u6297\u5411\u5bb9\u6297\u8f6c\u5316 \u63a5\u5165\u7cfb\u6570\u4e0e\u53d8\u5316\u5173\u7cfb \u963b\u6297\u53d8\u6362\u4e3a\u9664\u4ee5 p^2 p^2 \uff0c\u5bfc\u7eb3\u53d8\u6362\u4e3a\u4e58\u4ee5 p^2 p^2 \uff0c\u7535\u538b\u6e90\u4e3a\u9664\uff0c\u7535\u6d41\u6e90\u4e3a\u4e58\u3002 \u9ad8\u9891\u5c0f\u4fe1\u53f7\u653e\u5927\u5668 \u529f\u80fd\uff1a\u5bf9\u5fae\u5f31\u9ad8\u9891\u4fe1\u53f7\u7684\u4e0d\u5931\u771f\u653e\u5927\u548c\u9009\u9891\u6ee4\u6ce2 \u7279\u70b9\uff1a 1. \u9891\u7387\u9ad8\uff0c\u4e09\u6781\u7ba1\u6781\u95f4\u7535\u5bb9\u4e0d\u80fd\u5ffd\u7565 2. \u8f93\u5165\u4fe1\u53f7\u5c0f\uff0c\u6676\u4f53\u7ba1\u5de5\u4f5c\u5728\u7ebf\u6027\u8303\u56f4 \u5206\u7c7b\uff1a\u6309\u653e\u5927\u4fe1\u53f7\u7684\u5e26\u5bbd\uff0c\u6309\u8d1f\u8f7d\u6027\u8d28 \u6280\u672f\u6307\u6807\uff1a A_u,A_p,2\\triangle f_{0.7},K_{r0.1},N_F=\\frac{P_{si}/P_{ni}}{P_{so}/P_{no}} A_u,A_p,2\\triangle f_{0.7},K_{r0.1},N_F=\\frac{P_{si}/P_{ni}}{P_{so}/P_{no}} \u5b9e\u9645\u653e\u5927\u5668\u77e9\u5f62\u7cfb\u6570\u6052\u5927\u4e8e1\uff0c\u8d8a\u5c0f\u8d8a\u597d\uff0c\u566a\u58f0\u7cfb\u6570\u63a5\u8fd1\u4e8e1\u597d \u6676\u4f53\u7ba1\u9ad8\u9891\u53c2\u6570 \u622a\u81f3\u9891\u7387 f_\\beta f_\\beta \uff0c\u7279\u5f81\u9891\u7387 f_T f_T \uff0c\u6700\u9ad8\u632f\u8361\u9891\u7387 f_{max} f_{max} |\\beta |=\\frac{\\beta_0}{\\sqrt{1-(\\frac{f}{f_\\beta})^2}} |\\beta |=\\frac{\\beta_0}{\\sqrt{1-(\\frac{f}{f_\\beta})^2}} \u5f53 \\beta \\gg 1 \\beta \\gg 1 \u65f6\uff0c f_T=\\beta_0 f_b f_T=\\beta_0 f_b \u5355\u8c03\u8c10\u56de\u8def\u8c10\u632f\u653e\u5927\u5668 \u5206\u4e3aY\u53c2\u6570\u7b49\u6548\u7535\u8def\u548c\u6df7\u5408 \\pi \\pi \u578b\u7b49\u6548\u7535\u8def Y\u53c2\u6570\u7b49\u6548\u7535\u8def y_i=\\dot{I_1}/\\dot{U_1}|_{U_2=0} y_i=\\dot{I_1}/\\dot{U_1}|_{U_2=0} \uff0c\u8f93\u51fa\u77ed\u8def\u8f93\u5165\u5bfc\u7eb3\uff0c y_o y_o \uff0c\u8f93\u51fa\u5bfc\u7eb3\uff0c y_r y_r \uff0c\u53cd\u5411\u4f20\u8f93\u5bfc\u7eb3\uff0c y_f y_f \uff0c\u6b63\u5411\u4f20\u8f93\u5bfc\u7eb3 \u5171\u5c04\u7535\u8def\uff0c\u7b80\u5316\u4e3a\uff0c y_{re}=0 y_{re}=0 \u6bcf\u7ea7\u4e09\u6781\u7ba1\u53c2\u6570\u90fd\u76f8\u540c\u65f6\uff0c\u7b49\u6548\u5230\u8c10\u632f\u56de\u8def\uff1a 1. \u5de6\u8fb9\uff1a p_1\\dot{U_i}y_{fe},p_1^2g_{oe},p_1^2C_{oe} p_1\\dot{U_i}y_{fe},p_1^2g_{oe},p_1^2C_{oe} 2. \u4e2d\u95f4\uff1a C,g_0,L C,g_0,L 3. \u53f3\u8fb9\uff1a p_2^2g_{ie},p_2^2C_{ie},\\frac{\\dot{U_o}}{p_2} p_2^2g_{ie},p_2^2C_{ie},\\frac{\\dot{U_o}}{p_2} \u7531 \\dot{U_o}=-\\frac{p_1\\dot{U_i}y_{fe}}{Y_{\\Sigma}} \\dot{U_o}=-\\frac{p_1\\dot{U_i}y_{fe}}{Y_{\\Sigma}} \u5f97\uff1a \\dot{A_u}=-\\frac{p_1p_2y_{fe}}{Y_\\Sigma} \\dot{A_u}=-\\frac{p_1p_2y_{fe}}{Y_\\Sigma} \u8c10\u632f\u65f6\u6700\u5927\uff0c\u5176\u4e2d Y_{\\Sigma}=g_{\\Sigma} Y_{\\Sigma}=g_{\\Sigma} \u76f8\u5bf9\u7535\u538b\u589e\u76ca\uff1a \\frac{\\dot{A_u}}{\\dot{A_{u0}}}=\\frac{1}{1+jQ_L2\\triangle f/f_0} \\frac{\\dot{A_u}}{\\dot{A_{u0}}}=\\frac{1}{1+jQ_L2\\triangle f/f_0} \u5176\u4e2d Q_L=1/(\\omega_0 g_{\\Sigma} L) Q_L=1/(\\omega_0 g_{\\Sigma} L) \uff0c\u82e5 \\xi=Q_L 2\\triangle f/f_0 \\xi=Q_L 2\\triangle f/f_0 \uff0c\u79f0\u4e3a\u5e7f\u4e49\u5931\u8c10 \u901a\u9891\u5e26\uff1a \\triangle 2f_{0.7} = f_0/Q_L \\triangle 2f_{0.7} = f_0/Q_L \uff0c\u77e9\u5f62\u7cfb\u6570\uff1a K_{r0.1}=\\sqrt{99} \\gg 1 K_{r0.1}=\\sqrt{99} \\gg 1 \u9009\u62e9\u6027\u5dee \u901a\u9891\u5e26\u548c\u8c10\u632f\u7535\u538b\u589e\u76ca\u4e3a\u5e38\u6570 \u591a\u7ea7\u5355\u8c03\u8c10\u56de\u8def\u8c10\u632f\u653e\u5927\u5668 A_m=(A_{u1})^m A_m=(A_{u1})^m \\frac{A_m}{A_{mo}} = \\frac{1}{(1+(Q_L 2 \\triangle f/f_0)^2)^{m/2}} \\frac{A_m}{A_{mo}} = \\frac{1}{(1+(Q_L 2 \\triangle f/f_0)^2)^{m/2}} (2 \\triangle f_{0.7})_m = \\sqrt{2^{1/m}-1} (2 \\triangle f_{0.7})_1 (2 \\triangle f_{0.7})_m = \\sqrt{2^{1/m}-1} (2 \\triangle f_{0.7})_1 \u7ea7\u6570\u8d8a\u591a\uff0c\u901a\u9891\u5e26\u8d8a\u7a84\uff0c\u77e9\u5f62\u7cfb\u6570\u8d8a\u5c0f \u7a33\u5b9a\u6027 \u5f15\u8d77\u4e0d\u7a33\u5b9a\u7684\u539f\u56e0\uff1a y_{re} \\neq 0 y_{re} \\neq 0 \uff0c\u53ef\u80fd\u6784\u6210\u6b63\u53cd\u9988 \u7a33\u5b9a\u7cfb\u6570\uff1a S = \\dot{U_i}/\\dot{U_i'} S = \\dot{U_i}/\\dot{U_i'} \uff0c\u5176\u4e2d \\dot{U_i'} \\dot{U_i'} \u4e3a\u6b63\u53cd\u9988\u7535\u538b S\u8d8a\u5927\uff0c\u8d8a\u7a33\u5b9a\uff0c\u4e00\u822c\u8981\u6c42 \\ge 5 \\ge 5 \u7a33\u5b9a\u7535\u538b\u589e\u76ca\uff1a\u4e0d\u52a0\u7a33\u5b9a\u63aa\u65bd\uff0c\u5e76\u6ee1\u8db3S\u7684\u5de5\u4f5c\u4e8e\u8c10\u632f\u9891\u7387\u7684\u6700\u5927\u7535\u538b\u589e\u76ca |A_{u0}|=\\sqrt{\\frac{2|y_{fe|}}{S|y_{re}|(1+cos(\\phi_{re}+\\phi_{fe}))}} |A_{u0}|=\\sqrt{\\frac{2|y_{fe|}}{S|y_{re}|(1+cos(\\phi_{re}+\\phi_{fe}))}} \u63d0\u9ad8\u7a33\u5b9a\u6027\u63aa\u65bd\uff1a 1. \u4e2d\u548c\u6cd5\uff1a\u7535\u6d41\u5927\u5c0f\u76f8\u540c\uff0c\u65b9\u5411\u76f8\u53cd \u53ea\u80fd\u5bf9\u4e00\u4e2a\u9891\u7387\u70b9\u8d77\u5230\u5b8c\u5168\u4e2d\u548c\u4f5c\u7528 2. \u5931\u914d\u6cd5\uff1a\u5b9e\u8d28\u662f\u964d\u4f4e\u7535\u538b\u589e\u76ca \u9ad8\u9891\u529f\u7387\u653e\u5927\u5668 \u529f\u80fd\uff1a\u7528\u5c0f\u529f\u7387\u7684\u9ad8\u9891\u8f93\u5165\u4fe1\u53f7\u53bb\u63a7\u5236\u9ad8\u9891\u529f\u7387\u653e\u5927\u5668\u5c06\u76f4\u6d41\u7535\u6e90\u4f9b\u7ed9\u7684\u80fd\u91cf\u8f6c\u5316\u4e3a\u5927\u529f\u7387\u9ad8\u9891\u80fd\u91cf\u8f93\u51fa \u5206\u7c7b\uff1a\u6309\u5de5\u4f5c\u9891\u7387\uff0c\u6309\u5de5\u4f5c\u7c7b\u578b \u6280\u672f\u6307\u6807\uff1a\u8f93\u51fa\u529f\u7387\uff0c\u6548\u7387\uff0c\u529f\u7387\u589e\u76ca\uff0c\u8c10\u6ce2\u6291\u5236\u5ea6\uff08\u975e\u7ebf\u6027\u529f\u653e\uff09 \u4e2d\u95f4\u7ea7\u548c\u8f93\u51fa\u7ea7\u90fd\u53ef\u7b49\u6548\u4e3a\u8f93\u5165\u56de\u8def\uff0c\u975e\u7ebf\u6027\u5668\u4ef6\uff0c\u5e26\u901a\u6ee4\u6ce2 \u7279\u70b9\uff1a 1. \u653e\u5927\u5668\uff1a\u9759\u6001\u622a\u6b62\uff0c\u52a8\u6001\u5bfc\u901a\u548c\u622a\u6b62 2. \u8c10\u632f\u56de\u8def\uff1a\u9009\u9891\uff0c\u963b\u6297\u5339\u914d \u6298\u7ebf\u5206\u6790\u6cd5 \u4e09\u6781\u7ba1\u7684\u4e09\u79cd\u7279\u6027\u66f2\u7ebf\uff1a\u8f93\u5165\u7279\u6027\uff0c\u8f93\u51fa\u7279\u6027\uff0c\u6b63\u5411\u4f20\u8f93\u7279\u6027 g_r g_r \u4e3a\u6b63\u5411\u4f20\u8f93\u7279\u6027\u66f2\u7ebf\u659c\u7387\uff0c g_{cr} g_{cr} \u8f93\u51fa\u7279\u6027\u66f2\u7ebf\u9971\u548c\u533a\u7684\u659c\u7387\uff0c\u5176\u653e\u5927\u533a\u95f4\u9694\u9664\u4ee5 u_{be} u_{be} \u53d8\u6362\u5e94\u4e3a g_r g_r \u8f93\u5165\u4fe1\u53f7 u_{bm}cos(\\omega t) u_{bm}cos(\\omega t) \uff0c \\omega t = 0 \\omega t = 0 \u65f6\uff0c i_c i_c \u6700\u5927\uff0c \\omega t = \\theta_c \\omega t = \\theta_c \u65f6\uff0c i_c i_c \u4e3a0\uff0c \\theta_c \\theta_c \u5373\u4e3a\u5bfc\u901a\u89d2 cos \\theta_c = \\frac{U_{BZ}-V_{BB}}{U_{bm}} cos \\theta_c = \\frac{U_{BZ}-V_{BB}}{U_{bm}} i_c = I_{cM}\\frac{cos(\\omega t)-cos\\theta_c}{1-cos\\theta_c} i_c = I_{cM}\\frac{cos(\\omega t)-cos\\theta_c}{1-cos\\theta_c} \u4ee4\u96c6\u7535\u6781\u7535\u538b\u5229\u7528\u7cfb\u6570 \\xi = U_{cm}/V_{cc} \\xi = U_{cm}/V_{cc} \uff0c\u6ce2\u5f62\u7cfb\u6570 g_1 = \\alpha_1/\\alpha_0 g_1 = \\alpha_1/\\alpha_0 \uff0c U_{cm}=I_{c1m}R_P U_{cm}=I_{c1m}R_P \\eta = \\frac{P_o}{P_=} = \\frac{1}{2} \\frac{U_{cm}I_{c1m}}{V_{cc}I_{c0}} = \\frac{1}{2} \\xi g_1(\\theta_c) \\eta = \\frac{P_o}{P_=} = \\frac{1}{2} \\frac{U_{cm}I_{c1m}}{V_{cc}I_{c0}} = \\frac{1}{2} \\xi g_1(\\theta_c) \u517c\u987e\u6548\u7387\u548c\u8f93\u51fa\u529f\u7387\uff1a \\theta_c \\theta_c \u4e00\u822c\u53d660-80\u00b0 \u52a8\u6001\u7279\u6027 \u6676\u4f53\u7ba1\uff0c\u7535\u6e90\u53c2\u6570\u786e\u5b9a\u6761\u4ef6\u4e0b\uff0c\u4fe1\u53f7\u632f\u5e45\u4e00\u5b9a\uff0c i_c = f(u_{be},u{ce}) i_c = f(u_{be},u{ce}) \u7684\u5173\u7cfb \u622a\u8ddd\u6cd5\uff1a\u659c\u7387+\u622a\u8ddd+ (u_{cemax},0) (u_{cemax},0) i_c = g_d(u_{ce}-U_0) i_c = g_d(u_{ce}-U_0) \u5f0f\u4e2d g_d = -g_c \\frac{u_{bm}}{u_{cm}} g_d = -g_c \\frac{u_{bm}}{u_{cm}} \uff0c U_0 = V_{cc}-u_{cm}cos\\theta_c U_0 = V_{cc}-u_{cm}cos\\theta_c \u865a\u62df\u7535\u6d41\u6cd5\uff1a (u_{cemin},u_{bemax}) (u_{cemin},u_{bemax}) + (V_{cc},I_Q) (V_{cc},I_Q) + (u_{cemax},0) (u_{cemax},0) I_Q = -g_c (U_{BZ}-V_{BB}) I_Q = -g_c (U_{BZ}-V_{BB}) \u5de5\u4f5c\u72b6\u6001\uff1a\u6b20\u538b\uff0c\u4e34\u754c\u548c\u8fc7\u538b \u8d1f\u8f7d\u7279\u6027 \u7535\u6e90\uff0c\u4e09\u6781\u7ba1\u53c2\u6570\uff0c U_{bm} U_{bm} \u4e00\u5b9a\uff0c\u6539\u53d8 R_P R_P \u5de5\u4f5c\u72b6\u6001\uff0c\u7535\u538b\uff0c\u7535\u6d41\uff0c\u529f\u7387\uff0c\u6548\u7387\u7684\u53d8\u5316 \u7528\u52a8\u6001\u7279\u6027\u5206\u6790\uff1a\u968f R_P R_P \u589e\u5927\uff0c I_Q ,u_{bemin} ,\\theta_c ,I_{cM} I_Q ,u_{bemin} ,\\theta_c ,I_{cM} \u4e0d\u53d8\uff0c u_{cm} u_{cm} \u589e\u5927\uff0c\u659c\u7387\u51cf\u5c0f\uff0c\u5de5\u4f5c\u72b6\u6001\u7531\u6b20\u538b\u5411\u8fc7\u538b\u8f6c\u5316\u3002 \u4f46\u5728\u8fc7\u538b\u533a\uff0c\u7535\u6d41\u4e0d\u518d\u662f\u5c16\u9876\u8109\u51b2\uff0c\u5206\u89e3\u7cfb\u6570\u6539\u53d8\uff0c\u7535\u6d41\u51cf\u5c0f\uff0c\u4f46 u_{cm} u_{cm} \u589e\u957f\u51cf\u7f13 \u8f93\u51fa\u529f\u7387\u5728\u4e34\u754c\u72b6\u6001\u8fbe\u5230\u5cf0\u503c\uff0c\u7528\u4e8e\u672b\u7ea7\uff0c\u6548\u7387\u5728\u5f31\u8fc7\u538b\u533a\u8fbe\u5230\u5cf0\u503c\uff0c\u968f\u540e\u4e0b\u964d\uff0c\u7528\u4e8e\u4e2d\u95f4\u653e\u5927\u7ea7 \u6b64\u5916 R_P R_P \u4e00\u5b9a\u4e0d\u8981\u4e3a0 \u5404\u7ea7\u7535\u538b\u5f71\u54cd \u7528\u52a8\u6001\u7279\u6027\u5206\u6790\u5373\u53ef \u4e19\u7c7b\u529f\u653e\u7535\u8def \u8f93\u5165\u8f93\u51fa\u56de\u8def\u529f\u80fd\uff1a 1. \u6b63\u5e38\u504f\u7f6e 2. \u9009\u9891 3. \u963b\u6297\u5339\u914d \u96c6\u7535\u6781\u9988\u7535\uff1a\u4e32\u8054\u9988\u7535\uff0c\u5e76\u8054\u9988\u7535 \u57fa\u6781\u9988\u7535\uff1a\u3010\u4e32\u8054\u9988\u7535\uff0c\u5e76\u8054\u9988\u7535\u3011\u3010\u5916\u52a0\u504f\u538b\uff0c\u81ea\u7ed9\u504f\u538b\u3011 \u5339\u914d\u7f51\u7edc \u5bbd\u9891\u5e26\u529f\u653e \u4f20\u8f93\u7ebf\u53d8\u538b\u5668\uff1a\u4f20\u9012\u80fd\u91cf\u7684\u4e24\u79cd\u65b9\u5f0f 1:1\u4f20\u8f93\u7ebf\u53d8\u538b\u5668\u6700\u4f73\u5339\u914d\u6761\u4ef6\uff1a Z_C = R_S = R_L Z_C = R_S = R_L \uff0c\u7528\u4f5c\u5012\u76f8\u5668 \u963b\u6297\u53d8\u6362\u4f20\u8f93\u7ebf\u53d8\u538b\u5668\uff0c Z_i/Z_o Z_i/Z_o \u5c31\u662f\u51e0\u6bd4\u51e0\u7684\u963b\u6297\u53d8\u6362 \u529f\u7387\u5408\u6210 \u7531\u529f\u7387\u653e\u5927\u5668\uff0c\u529f\u7387\u5206\u914d\u5668\uff0c\u529f\u7387\u5408\u6210\u7f51\u7edc\u7ec4\u6210 \u539f\u7406\uff1aN\u4e2a\u529f\u653e\uff0c\u901a\u8fc7\u6df7\u5408\u7535\u8def\u4f7f\u8f93\u51fa\u529f\u7387\u5728\u516c\u5171\u8d1f\u8f7d\u4e0a\u53e0\u52a0\u8d77\u6765 \u6b63\u5f26\u6ce2\u632f\u8361\u5668 \u5206\u7c7b\uff1a\u6309\u6ce2\u5f62\uff0c\u6309\u539f\u7406\uff0c\u6309\u5143\u4ef6 \u4e3b\u8981\u6280\u672f\u6307\u6807\uff1a\u632f\u8361\u9891\u7387\uff0c\u9891\u7387\u7a33\u5b9a\u5ea6\uff0c\u632f\u8361\u5e45\u5ea6\uff0c\u632f\u8361\u6ce2\u5f62 \u53cd\u9988\u578bLC\u632f\u8361 \u8c03\u8c10\u653e\u5927\u5668+\u6b63\u53cd\u9988\u7f51\u7edc \u8d77\u632f\u6761\u4ef6\uff1a\u589e\u5e45\u632f\u8361 1. \u632f\u5e45\u8d77\u632f\uff1a A_0 F > 1 A_0 F > 1 2. \u76f8\u4f4d\u8d77\u632f\uff1a \\phi_A + \\phi_F = 2n\\pi \\phi_A + \\phi_F = 2n\\pi \u5e73\u8861\u6761\u4ef6\uff1a\u7b49\u5e45\u632f\u8361 A = g_c R_P (1-cos\\theta_c)\\alpha_1(\\theta_c) = A_0v(\\theta_c) A = g_c R_P (1-cos\\theta_c)\\alpha_1(\\theta_c) = A_0v(\\theta_c) \u6700\u540e\u5de5\u4f5c\u72b6\u6001\u7531 A_0 F A_0 F \u51b3\u5b9a\uff0c\u4e5f\u51b3\u5b9a\u4e86\u632f\u5e45 \\dot{U_i}\\xrightarrow[\\phi_Y]{Y_{fe}} \\dot{I_c}\\xrightarrow[\\phi_z]{Z_{p1}} \\dot{U_{c1}}\\xrightarrow[\\phi_F]{F} \\dot{U_F} \\dot{U_i}\\xrightarrow[\\phi_Y]{Y_{fe}} \\dot{I_c}\\xrightarrow[\\phi_z]{Z_{p1}} \\dot{U_{c1}}\\xrightarrow[\\phi_F]{F} \\dot{U_F} \\phi_F + \\phi_Y \\neq 0 \\phi_F + \\phi_Y \\neq 0 \uff0c\u56de\u8def\u5fae\u5c0f\u5931\u8c03\uff0c\u4f46\u8fd1\u4f3c\u4e3a\u56de\u8def\u8c10\u632f\u9891\u7387 \u7a33\u5b9a\u6761\u4ef6\uff1a 1. \u632f\u5e45\u7a33\u5b9a\uff1a \\frac{\\partial A}{\\partial U_c}|_{U_c = U_{cQ}} < 0 \\frac{\\partial A}{\\partial U_c}|_{U_c = U_{cQ}} < 0 <span class=\"arithmatex\"><span class=\"MathJax_Preview\">\\frac{\\partial A}{\\partial U_c}|_{U_c = U_{cQ}} &lt; 0</span><script type=\"math/tex\">\\frac{\\partial A}{\\partial U_c}|_{U_c = U_{cQ}} < 0 \u63aa\u65bd\uff1a\u8c03\u8282\u9759\u6001\u5de5\u4f5c\u70b9\uff0c\u5373 A_0 A_0 \uff1b\u8c03\u8282F 2. \u76f8\u4f4d\u7a33\u5b9a\uff1a \\frac{\\partial \\phi_Z}{\\partial \\omega} < 0 \\frac{\\partial \\phi_Z}{\\partial \\omega} < 0 <span class=\"arithmatex\"><span class=\"MathJax_Preview\">\\frac{\\partial \\phi_Z}{\\partial \\omega} &lt; 0</span><script type=\"math/tex\">\\frac{\\partial \\phi_Z}{\\partial \\omega} < 0 \u6309\u53cd\u9988\u8026\u5408\u5143\u4ef6\u5206\uff1a\u4e92\u611f\u8026\u5408\u632f\u8361\u5668\uff0c\u7535\u5bb9\u53cd\u9988\u5f0f\u632f\u8361\u5668\uff0c\u7535\u611f\u53cd\u9988\u5f0f\u632f\u8361\u5668 \u4e92\u611f\u8026\u5408\u632f\u8361\u7535\u8def \u5171\u3010\u3011\u8c03\u3010\u3011\u578b\uff0c\u77ac\u65f6\u6781\u6027\u6cd5\u5224\u65ad\uff0c f_0 = \\frac{1}{2\\pi\\sqrt{L_1 C}} f_0 = \\frac{1}{2\\pi\\sqrt{L_1 C}} \u4f18\u70b9\uff1a\u8c03\u6574\u53cd\u9988\u65f6\uff0c\u4e0d\u4f1a\u5f71\u54cd\u632f\u8361\u9891\u7387 \u7f3a\u70b9\uff1a\u9891\u7387\u4e0d\u5b9c\u8fc7\u9ad8 \u8003\u6bd4\u5179\u632f\u8361\u5668 \u5171\u5c04\u65f6\uff1a A_0 = \\frac{|y_{fe}|}{g_\\Sigma} ,F = \\frac{c_1'}{c_2'} A_0 = \\frac{|y_{fe}|}{g_\\Sigma} ,F = \\frac{c_1'}{c_2'} \u5f0f\u4e2d g_\\Sigma = g_{oe}+g_0 p_1^2+g_{ie} p^2+g_L g_\\Sigma = g_{oe}+g_0 p_1^2+g_{ie} p^2+g_L \u8d77\u632f\u6761\u4ef6\uff1a\u4e09\u6781\u7ba1\u9009\u5b9a\u540e\uff0c\u66f4\u6539F\u548c g_L g_L \u7684\u503c \u8c10\u632f\u9891\u7387\uff1a \\omega_0 = 1/\\sqrt{C_\\Sigma L} \\omega_0 = 1/\\sqrt{C_\\Sigma L} \u54c8\u83b1\u7279\u632f\u8361\u5668 \u5171\u5c04\uff1a F = \\frac{L_2+M}{L_1+M} F = \\frac{L_2+M}{L_1+M} \u8d77\u632f\u6761\u4ef6\u548c\u8003\u6bd4\u5179\u76f8\u540c\uff0c\u4f46 g_0' g_0' \u4e0d\u540c \u632f\u8361\u9891\u7387\uff1a \\omega_0 = \\frac{1}{\\sqrt{LC}} \\omega_0 = \\frac{1}{\\sqrt{LC}} \uff0c L = L_1+L_2+2M L = L_1+L_2+2M \u4e24\u79cd\u7535\u8def\u6bd4\u8f83\uff1a\u611f\u89c9\u7535\u5bb9\u4e09\u70b9\u5f0f\u597d\u70b9 \u5224\u65ad\u51c6\u5219 \u6ce8\u610f\uff1ac ,e ,b \u5bf9\u4e8e\u632f\u8361\u9891\u7387\uff1a X_{ce}+X_{eb}+X_{cb}=0 X_{ce}+X_{eb}+X_{cb}=0 \u9891\u7387\u7a33\u5b9a\u539f\u7406 \u7edd\u5bf9\u9891\u7387\u504f\u5dee\uff0c\u76f8\u5bf9\u9891\u7387\u504f\u5dee \u7a33\u5b9a\u5ea6\uff1a\u4e00\u5b9a\u65f6\u95f4\u95f4\u9694\u5185\uff0c\u76f8\u5bf9\u9891\u7387\u504f\u5dee\u6700\u5927\u503c\uff0c\u957f\uff0c\u77ed\uff0c\u77ac\u65f6 \\omega_0 ,\\phi_{YF} ,Q_L \\omega_0 ,\\phi_{YF} ,Q_L \u53d8\u6362\uff0c\u4f1a\u5f15\u8d77\u7a33\u5b9a\u5ea6\u53d8\u5316 \u5916\u56e0\u4f1a\u5f15\u8d77\u8fd9\u4e09\u8005\u53d8\u5316 \u63aa\u65bd\uff1a\u51cf\u5c0f\u5916\u56e0\uff0c\u63d0\u9ad8\u53c2\u6570\u6297\u5916\u56e0\u80fd\u529b \u9ad8\u7a33\u5b9a\u5ea6LC\u632f\u8361\u5668 \u4e00\u822c\u7684 \\triangle C_\\Sigma = p_1^2 \\triangle C_o+p_2^2 \\triangle C_i \\triangle C_\\Sigma = p_1^2 \\triangle C_o+p_2^2 \\triangle C_i p_1 ,p_2 p_1 ,p_2 \u4e0d\u53ef\u80fd\u540c\u65f6\u51cf\u5c0f\uff0c\u6545\u7a33\u5b9a\u5ea6\u4e0d\u9ad8 Clapp \u4e32\u4e00\u4e2a C_3 C_3 \uff0c\u6ee1\u8db3\u4e8e C_3 \\ll C_1 ,C_3 \\ll C_2 C_3 \\ll C_1 ,C_3 \\ll C_2 \uff0c \u5c31\u6709 C_\\Sigma \\approx C_3 C_\\Sigma \\approx C_3 p_1 \\approx \\frac{C_3}{C_1'} p_1 \\approx \\frac{C_3}{C_1'} \uff0c P_2 \\approx \\frac{C_3}{C_2'} P_2 \\approx \\frac{C_3}{C_2'} p_1 ,p_2 p_1 ,p_2 \u53ef\u4ee5\u540c\u65f6\u51cf\u5c0f\uff0c\u4f46\u53d7\u8d77\u632f\u6761\u4ef6\u7684\u9650\u5236\uff0c\u7528\u4f5c\u56fa\u5b9a\u9891\u7387\u632f\u8361\u5668 Siler \u5728Clapp\u57fa\u7840\u4e0a\u5728L\u4e0a\u5e76\u4e00\u4e2a C_4 C_4 \uff0c\u548c C_3 C_3 \u4e00\u4e2a\u6570\u91cf\u7ea7 \u7528\u4f5c\u53d8\u9891\u632f\u8361\u5668 \u6676\u4f53\u632f\u8361\u7535\u8def \u538b\u7535\u6548\u5e94 \u7b49\u6548\u4e3a L_q ,C_q ,r_q ,C_0 L_q ,C_q ,r_q ,C_0 \uff0c\u5176 Q_q Q_q \u5f88\u9ad8 \\omega_p - \\omega_q \\omega_p - \\omega_q \u5f88\u5c0f \u4e24\u79cd\u6a21\u5f0f\uff1a \\omega = \\omega_q \\omega = \\omega_q \uff0c\u77ed\u8def\u7ebf\uff0c \\omega_q < \\omega < \\omega_p \\omega_q < \\omega < \\omega_p \uff0c\u7535\u611f \u632f\u5e45\u8c03\u5236\u7535\u8def \u666e\u901a\u8c03\u5e45\u6ce2\uff08AM\uff09 u(t) = U_{cm}(1+m_a cos(\\Omega t))cos(\\omega_c t) u(t) = U_{cm}(1+m_a cos(\\Omega t))cos(\\omega_c t) \u5f0f\u4e2d m_a = \\frac{K_a U_{\\Omega m}}{U_{cm}} m_a = \\frac{K_a U_{\\Omega m}}{U_{cm}} \u4e3a\u8c03\u5e45\u6307\u6570 \u9891\u8c31\uff1a\u8fb9\u9891\u5e45\u5ea6\u4e3a \\frac{1}{2} m_a U_{cm} \\frac{1}{2} m_a U_{cm} \uff0c\u8f7d\u9891\u5e45\u5ea6\u4e3a U_{cm} U_{cm} \u52a0\u5728R\u4e24\u7aef\u529f\u7387\uff1a 1. \u8f7d\u6ce2\u529f\u7387 P_{OT} P_{OT} 2. \u8fb9\u9891\u529f\u7387 \\frac{1}{4} m_a^2 P_{OT} \\frac{1}{4} m_a^2 P_{OT} DSB\u6ce2 AM\u6ce2\u57fa\u7840\u4e0a\u53bb\u6389\u8f7d\u6ce2\u9891\u6bb5 \u5b9e\u8d28\u5c31\u662f\u8f7d\u6ce2\u632f\u8361\u4fe1\u53f7\u76f4\u63a5\u4e58\u4ee5\u8c03\u5236\u4fe1\u53f7 u(t) = \\frac{1}{2}U_{cm}U_{\\Omega m}(\\cdots) u(t) = \\frac{1}{2}U_{cm}U_{\\Omega m}(\\cdots) \u6ce8\u610f\u4e0b\uff1a\u8f7d\u6ce2\u76f8\u4f4d\u5728\u8c03\u5236\u7535\u538b\u96f6\u70b9\u7a81\u53d8180\u00b0 SSB\u6ce2 \u53bb\u6389DSB\u6ce2\u7684\u67d0\u4e00\u8fb9\u9891 \u7535\u8def \u5206\u7c7b\uff1a 1. \u4f4e\u7535\u9891\u8c03\u5236 \u91cd\u70b9\u662f\u63d0\u9ad8\u8c03\u5236\u7684\u7ebf\u6027 2. \u9ad8\u7535\u5e73\u8c03\u5236 \u8981\u517c\u987e\u8f93\u51fa\u529f\u7387\uff0c\u6548\u7387\u548c\u8c03\u5236\u7ebf\u6027 \u7ec4\u6210\uff1a\u8f93\u5165\u56de\u8def\uff0c\u975e\u7ebf\u6027\u5668\u4ef6\u548c\u5e26\u901a\u6ee4\u6ce2\u5668 \u4f4e\u7535\u5e73\u8c03\u5e45\u7535\u8def \u7b97\u51fa\u7ecf\u8fc7\u8d1f\u8f7d\u7684\u7535\u6d41\uff0c\u5e26\u901a\u6ee4\u6ce2\u53d6\u5176\u4e0a\u7684\u7535\u538b \u5f00\u5173\u51fd\u6570\u542b\u76f4\u6d41\u548c\u9891\u7387\u7684\u5947\u6570\u5206\u91cf\uff0c\u53bb\u6389\u76f4\u6d41\u5206\u91cf\uff0c\u5176\u5076\u6570\u9879\u4e3a\u8d1f \u5355\u4e8c\u6781\u7ba1\u5f00\u5173\u8c03\u5e45\u7535\u8def\uff1a U_{cm} \\gg U_{\\Omega m} U_{cm} \\gg U_{\\Omega m} \uff0c U_{cm} U_{cm} \u63a7\u5236\u4e8c\u6781\u7ba1\u7684\u5f00\u5173\u72b6\u6001 \u53ea\u80fd\u5b9e\u73b0AM\u6ce2 \u4e8c\u6781\u7ba1\u5e73\u8861\u8c03\u5e45\u7535\u8def \u6ce8\u610f\u4e0b\u531d\u6570\u6bd4\uff0c\u5373\u8d1f\u8f7d\u503c \u8ba1\u7b97\u5148\u5224\u65ad\u4e8c\u6781\u7ba1\u5728\u8f7d\u6ce2\u6b63\u8d1f\u5468\u671f\u7684\u5de5\u4f5c\u72b6\u6001\uff0c\u6b63\u8d1f\u5468\u671f\u7535\u6d41\u5206\u5f00\u8ba1\u7b97\uff0c\u6b64\u7535\u8def\u90fd\u662f\u6b63\u5468\u671f\u5bfc\u901a \u7136\u540e\u6839\u636e\u4e8c\u6781\u7ba1\u5bfc\u901a\u6807\u7535\u6d41\u65b9\u5411\uff0c\u6309\u7535\u6d41\u65b9\u5411\u786e\u5b9a\u7535\u538b\u6b63\u8d1f \u53ef\u4ee5DSB\u6ce2 \u4e8c\u6781\u7ba1\u73af\u5f62\u8c03\u5e45\u7535\u8def \u6ce8\u610f\u5224\u65ad\u4e8c\u6781\u7ba1\u5bfc\u901a\u53cd\u5411\uff0c\u6b64\u5916\u8f7d\u6ce2\u8d1f\u534a\u5468\u671f\u5f00\u5173\u51fd\u6570\u5947\u6570\u9879\u4e3a\u8d1f DSB\u6ce2\uff0c\u6bd4\u8d77\u5e73\u8861\u8c03\u5e45\uff0c\u8fdb\u4e00\u6b65\u6291\u5236\u4e86 \\Omega \\Omega \u5206\u91cf\uff0c\u4e14\u5e45\u5ea6\u662f\u5176\u4e8c\u500d \u6a21\u62df\u4e58\u6cd5\u5668\u8c03\u5e45\u7535\u8def\uff08\u53cc\u5dee\u5206\u5bf9\u7ba1\u632f\u5e45\u8c03\u5236\u7535\u8def\uff09 i = I_0 th(\\frac{qu_1}{2kT}) th(\\frac{qu_2}{2kT}) i = I_0 th(\\frac{qu_1}{2kT}) th(\\frac{qu_2}{2kT}) <span class=\"arithmatex\"><span class=\"MathJax_Preview\">i = I_0 th(\\frac{qu_1}{2kT}) th(\\frac{qu_2}{2kT})</span><script type=\"math/tex\">i = I_0 th(\\frac{qu_1}{2kT}) th(\\frac{qu_2}{2kT}) \u5c06\u6052\u6d41\u6e90\u5206\u4e3a\u4e24\u4e2a\u540e\uff0c\u63a5\u5165\u8d1f\u53cd\u9988\u7535\u963b\uff0c\u53d8\u4e3a\uff1a i = \\frac{2 u_2}{R_y} th(\\frac{qu_1}{2kT}) i = \\frac{2 u_2}{R_y} th(\\frac{qu_1}{2kT}) <span class=\"arithmatex\"><span class=\"MathJax_Preview\">i = \\frac{2 u_2}{R_y} th(\\frac{qu_1}{2kT})</span><script type=\"math/tex\">i = \\frac{2 u_2}{R_y} th(\\frac{qu_1}{2kT}) \u5f0f\u4e2d -I_0/2 \\le u_2/R_y \\le I_0/2 -I_0/2 \\le u_2/R_y \\le I_0/2 \u9ad8\u7535\u5e73\u8c03\u5e45\u7535\u8def \u53ea\u80fd\u8c03AM\u6ce2 \u96c6\u7535\u6781\u8c03\u5e45\u7535\u8def\uff1a \u4e19\u7c7b\u529f\u653e\u8fc7\u538b\u533a\u5177\u6709\u8c03\u5e45\u7279\u6027\uff0c I_{c0} ,I_{c1m} I_{c0} ,I_{c1m} \u968f V_{cc} V_{cc} \u7ebf\u6027\u53d8\u5316 V_{cc} = V_{CT}(1+m_a cos(\\Omega t)) V_{cc} = V_{CT}(1+m_a cos(\\Omega t)) \u8c03\u5236\u4fe1\u53f7\u4e00\u5468\u5e73\u5747\u72b6\u6001\u4e0b\uff0c P_{= av} = P_{=} + P_{\\omega} = (1+(\\frac{m_a}{2})^2)P_{=T} P_{= av} = P_{=} + P_{\\omega} = (1+(\\frac{m_a}{2})^2)P_{=T} \\eta_c = constant \\eta_c = constant \u6ce8\u610f\uff1a\u9009\u62e9\u6676\u4f53\u7ba1\u662f P_{CM} > P_{=av} P_{CM} > P_{=av} \uff0c\u8c03\u5236\u4fe1\u53f7\u6e90\u5fc5\u987b\u662f\u529f\u7387\u6e90 \u57fa\u6781\u8c03\u5e45\u7535\u8def\uff1a \u6b20\u538b\u533a\uff0c\u6548\u7387\u53d8\u5316\uff0c\u8f93\u51fa\u529f\u7387\u90fd\u662f\u76f4\u6d41\u7535\u6e90\u63d0\u4f9b\uff0c\u7ebf\u6027\u8303\u56f4\u5c0f \u5355\u8fb9\u5e26\u4fe1\u53f7\u4ea7\u751f \u6ee4\u6ce2\u6cd5\u548c\u79fb\u5411\u6cd5 \u6ee4\u6ce2\u6cd5 \u76f4\u63a5\u6ee4\u6ce2\u56f0\u96be\uff0c\u76f8\u5bf9\u5e26\u5bbd\u5f88\u5c0f\uff0c\u5b9e\u9645\u4e2d\u964d\u4f4e\u6bcf\u6b21\u7684\u8f7d\u6ce2\u9891\u7387\uff0c\u589e\u5927\u76f8\u5bf9\u5e26\u5bbd\uff0c\u8fdb\u884c\u591a\u6b21\u8c03\u5236 \u79fb\u76f8\u6cd5 cos()cos()-sin()sin() cos()cos()-sin()sin() \u8981\u6c42\u51c6\u786e\u79fb90\u00b0 \u68c0\u6ce2\u5668 \u7ec4\u6210\uff1a\u8f93\u5165\u56de\u8def\uff0c\u975e\u7ebf\u6027\u5668\u4ef6\uff0c\u4f4e\u901a\u6ee4\u6ce2 \u5206\u7c7b\uff1a 1. \u5305\u7edc\u68c0\u6ce2\uff0c\u666e\u901a\u8c03\u5e45\u6ce2\u548c\u9ad8\u9891\u7b49\u5e45\u6ce2 2. \u540c\u6b65\u68c0\u6ce2\uff0c\u53cc\u8fb9\u5e26\u548c\u5355\u8fb9\u5e26\u68c0\u6ce2 \u6307\u6807\uff1a\u7535\u538b\u4f20\u8f93\u7cfb\u6570\uff0c\u7b49\u6548\u8f93\u5165\u7535\u963b\uff0c\u975e\u7ebf\u6027\u5931\u771f\u7cfb\u6570 \u4e8c\u6781\u7ba1\u5927\u4fe1\u53f7\u68c0\u6ce2\u7535\u8def \u8f93\u5165\u4fe1\u53f7\u5927\u4e8e0.5V\uff0c\u8c03\u597d\u53c2\u6570\uff0c\u4e8c\u6781\u7ba1\u5145\u653e\u7535\u66f2\u7ebf\u548c\u5305\u7edc\u76f8\u5339\u914d \u68c0\u6ce2\u4e8c\u6781\u7ba1\u5bfc\u901a\u89d2\uff1a U_{BZ} = 0 ,\\theta < \\pi/6 U_{BZ} = 0 ,\\theta < \\pi/6 \u4e0b\uff0c \\theta \\approx \\sqrt[3]{\\frac{3 \\pi r_d}{R}} \\theta \\approx \\sqrt[3]{\\frac{3 \\pi r_d}{R}} \u7ed9\u68c0\u6ce2\u7535\u8def\u52a0\u56fa\u5b9a\u504f\u538b\u53ef\u6ee1\u8db3 U_{BZ} = 0 U_{BZ} = 0 \uff0c R R \u5927\uff0c r_d r_d \u5c0f\u53ef\u6ee1\u8db3 \\theta < \\pi/6 \\theta < \\pi/6 \u6b64\u65f6 u_o u_o \u4e3a\u8f93\u5165\u7684\u9ad8\u9891\u632f\u5e45\u4e58\u4ee5 cos\\theta cos\\theta \uff0c\u5bf9\u4e8eAM\u6ce2\uff0c\u518d\u52a0\u4e00\u4e2a\u9694\u503c\u7535\u5bb9\u540e\uff0c\u53ef\u53d6\u51fa\u539f\u8c03\u5236\u4fe1\u53f7\uff0c\u7b49\u4e8e\u9ad8\u9891\u7b49\u5e45\u6ce2\u7684 K_d K_d \\theta \\theta \u5f88\u5c0f\u65f6\uff0c R_{id} \\approx \\frac{1}{2} R R_{id} \\approx \\frac{1}{2} R \u9891\u7387\u5931\u771f \\frac{1}{\\omega_i C} \\ll R ,\\frac{1}{\\Omega_{max} \\gg R} ,\\frac{1}{\\Omega_{min} C_c} \\ll R \\frac{1}{\\omega_i C} \\ll R ,\\frac{1}{\\Omega_{max} \\gg R} ,\\frac{1}{\\Omega_{min} C_c} \\ll R <span class=\"arithmatex\"><span class=\"MathJax_Preview\">\\frac{1}{\\omega_i C} \\ll R ,\\frac{1}{\\Omega_{max} \\gg R} ,\\frac{1}{\\Omega_{min} C_c} \\ll R</span><script type=\"math/tex\">\\frac{1}{\\omega_i C} \\ll R ,\\frac{1}{\\Omega_{max} \\gg R} ,\\frac{1}{\\Omega_{min} C_c} \\ll R \u975e\u7ebf\u6027\u5931\u771f\u5c0f \u60f0\u6027\u5931\u771f RC\u592a\u5927\uff0c\u653e\u7535\u8ddf\u4e0d\u4e0a\u5305\u7edc \u591a\u9891\u4e0d\u4ea7\u751f\u6761\u4ef6\uff1a RC\\Omega_{max} \\le \\frac{\\sqrt{1-m_a}}{m_a} RC\\Omega_{max} \\le \\frac{\\sqrt{1-m_a}}{m_a} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">RC\\Omega_{max} \\le \\frac{\\sqrt{1-m_a}}{m_a}</span><script type=\"math/tex\">RC\\Omega_{max} \\le \\frac{\\sqrt{1-m_a}}{m_a} \u8d1f\u5cf0\u5207\u5272\u5931\u771f \u4e0d\u4ea7\u751f\u6761\u4ef6\uff1a U_{im}(1-m_a) \\ge U_{im} \\frac{R}{R_L + R} U_{im}(1-m_a) \\ge U_{im} \\frac{R}{R_L + R} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">U_{im}(1-m_a) \\ge U_{im} \\frac{R}{R_L + R}</span><script type=\"math/tex\">U_{im}(1-m_a) \\ge U_{im} \\frac{R}{R_L + R} \u4ea4\u76f4\u6d41\u7535\u963b\u5dee\u503c\u8d8a\u5c0f\uff0c\u8d8a\u4e0d\u5bb9\u6613\u4ea7\u751f \u5c0f\u4fe1\u53f7\u68c0\u6ce2 \u5c0f\u4e8e0.2V\uff0c\u5728\u5927\u4fe1\u53f7\u68c0\u6ce2\u57fa\u7840\u4e0a\u52a0\u4ee5\u504f\u7f6e\uff0c\u4f7f\u4e8c\u6781\u7ba1\u9759\u6001\u5de5\u4f5c\u70b9\u4f4d\u4e8e\u66f2\u7ebf\u7684\u5f2f\u66f2\u90e8\u5206 \u540c\u6b65\u68c0\u6ce2\u5668 \u7528\u672c\u5730\u8f7d\u9891\u4e58\u4ee5\u8c03\u5e45\u6ce2\uff0c\u518d\u901a\u8fc7\u4f4e\u901a\u6ee4\u6ce2 \u9891\u7387\uff0c\u76f8\u4f4d\u4e0d\u540c\u6b65\u65f6\uff0c\u4f1a\u5931\u771f \u89d2\u5ea6\u8c03\u5236\u7535\u8def \u5206\u7c7b\uff1a 1. \u76f8\u4f4d\u8c03\u5236\uff0c\u77ac\u65f6\u76f8\u4f4d\u968f u_\\omega (t) u_\\omega (t) \u7ebf\u6027\u53d8\u5316 2. \u9891\u7387\u8c03\u5236 \u4e00\u822c\u6570\u5b66\u8868\u8fbe\u5f0f\uff1a 1. \u8c03\u76f8\u6ce2\uff1a U_m cos(\\omega_c t+K_p u_\\Omega(t)) U_m cos(\\omega_c t+K_p u_\\Omega(t)) <span class=\"arithmatex\"><span class=\"MathJax_Preview\">U_m cos(\\omega_c t+K_p u_\\Omega(t))</span><script type=\"math/tex\">U_m cos(\\omega_c t+K_p u_\\Omega(t)) 2. \u8c03\u9891\u6ce2\uff1a U_m cos(\\omega_c t+k_f\\int_0^t u_\\Omega(t)) U_m cos(\\omega_c t+k_f\\int_0^t u_\\Omega(t)) <span class=\"arithmatex\"><span class=\"MathJax_Preview\">U_m cos(\\omega_c t+k_f\\int_0^t u_\\Omega(t))</span><script type=\"math/tex\">U_m cos(\\omega_c t+k_f\\int_0^t u_\\Omega(t)) \u8c03\u89d2\u6ce2\u7684\u8c03\u5236\u6307\u6570\u5b9a\u4e49\u4e3a\u6700\u5927\u76f8\u79fb\uff0c m_p = K_p U_{\\Omega m} \\qquad m_f = \\frac{K_f U_{\\Omega m}}{\\Omega} m_p = K_p U_{\\Omega m} \\qquad m_f = \\frac{K_f U_{\\Omega m}}{\\Omega} \u800c\u6700\u5927\u9891\u79fb\u7b49\u4e8e\u8c03\u5236\u6307\u6570\u4e0e\u8c03\u5236\u4fe1\u53f7\u9891\u7387\u7684\u4e58\u79ef \u4e09\u4e2a\u9891\u7387\u53c2\u6570 \u9891\u8c31\uff1a\u7531\u8f7d\u9891\u4e3a\u4e2d\u5fc3\uff0c\u65e0\u6570\u8fb9\u9891\u7ec4\u6210 \u4e2d\u7b49\u8d28\u91cf\u901a\u4fe1\u7cfb\u7edf\uff0c B_{CR} = 2(m+1)F B_{CR} = 2(m+1)F \uff0cm\u4e3a\u5c0f\u6570\u65f6\uff0c7\u820d8\u5165 \u8c03\u9891\u6ce2 B_{CR} B_{CR} \u57fa\u672c\u4e0d\u53d8\uff0c\u8c03\u76f8\u6ce2 B_{CR} B_{CR} \u53d8\u5316\u5927 \u8c03\u9891\u7535\u8def \u76f4\u63a5\u8c03\u5236\uff1a\u7528\u8c03\u5236\u4fe1\u53f7\u63a7\u5236\u51b3\u5b9a\u632f\u8361\u5668\u7684\u9891\u7387\u7684\u53ef\u53d8\u7535\u6297\u7684\u503c \u95f4\u63a5\u8c03\u5236\uff1a\u5148\u901a\u8fc7\u79ef\u5206\u7535\u8def\uff0c\u518d\u901a\u8fc7\u76f8\u4f4d\u8c03\u5236 \u53d8\u5bb9\u4e8c\u6781\u7ba1\u76f4\u63a5\u8c03\u9891\u7535\u8def \u53ea\u80fd\u52a0\u53cd\u5411\u7535\u538b\uff0c\u548cPN\u7ed3\u7ed3\u7535\u5bb9\u6709\u4e00\u5b9a\u5173\u7cfb C_j = \\frac{C_{j0}}{(1+\\frac{u_r}{U_D})^\\gamma} = \\frac{C_{jQ}}{(1+m cos(\\Omega t))^\\gamma} C_j = \\frac{C_{j0}}{(1+\\frac{u_r}{U_D})^\\gamma} = \\frac{C_{jQ}}{(1+m cos(\\Omega t))^\\gamma} \u5f0f\u4e2d m = U_{\\Omega m}/(V_Q+U_D) m = U_{\\Omega m}/(V_Q+U_D) \uff0c\u4e3a\u7535\u5bb9\u8c03\u5236\u5ea6 \u4f5c\u4e3a\u56de\u8def\u603b\u7535\u5bb9\u65f6\uff0c\u5b9e\u73b0\u7ebf\u6027\u8c03\u9891\u7684\u6761\u4ef6\u662f \\gamma = 2 \\gamma = 2 \uff0c\u6b64\u65f6 \\omega_c = \\omega_c + \\frac{\\omega_c}{U_D + V_Q} u_{\\Omega m}(t) \\omega_c = \\omega_c + \\frac{\\omega_c}{U_D + V_Q} u_{\\Omega m}(t) \u82e5 \\gamma \\neq 2 \\gamma \\neq 2 \uff0c\u5219\u4f1a\u4ea7\u751f\u4e2d\u5fc3\u9891\u7387\u504f\u79fb\u548c\u7ebf\u6027\u5931\u771f \u7279\u70b9\uff1a\u7075\u654f\u5ea6\u9ad8\uff0c\u9891\u504f\u5927\uff0c\u9891\u7387\u7a33\u5b9a\u5ea6\u4e0d\u597d \u6676\u4f53\u632f\u8361\u5668\u76f4\u63a5\u8c03\u9891 \u8c03\u76f8\u7535\u8def \u53ef\u53d8\u79fb\u76f8\u6cd5 \u53d8\u5bb9\u4e8c\u6781\u7ba1\u8c03\u76f8\u7f51\u7edc\uff1a\u5b9e\u8d28\u548c\u76f4\u63a5\u8c03\u9891\u4e00\u6837\uff0c\u90fd\u662f\u79fb\u52a8\u4e86\u4e2d\u5fc3\u9891\u7387\uff0c\u53ea\u4e0d\u8fc7\u5206\u6790\u65f6\u4f7f\u7528\u4e86\u8c10\u632f\u56de\u8def\u7684\u76f8\u9891\u7279\u6027\u66f2\u7ebf \u82e5\u8c03\u5236\u4fe1\u53f7\u7684\u9694\u76f4\u7535\u5bb9\u9009\u5927\u4e86\uff0c\u5c31\u53d8\u6210\u79ef\u5206\u7535\u8def\uff0c\u53ef\u5b9e\u73b0\u95f4\u63a5\u8c03\u9891 \u53ef\u53d8\u65f6\u5ef6\u6cd5 \u77e2\u91cf\u5408\u6210\u6cd5 \u9274\u9891\u5668\u548c\u9274\u76f8\u5668 \u6280\u672f\u6307\u6807\uff1a 1. \u9274\u76f8\u5668\uff1a\u9274\u76f8\u7279\u6027\u66f2\u7ebf\uff0c\u9274\u76f8\u8de8\u5bfc\uff0c\u9274\u76f8\u7ebf\u6027\u8303\u56f4\uff0c\u975e\u7ebf\u6027\u5931\u771f 2. \u9274\u9891\u5668\uff1a\u540c\u7406 \u9274\u76f8\u5668 \u5206\u7c7b\uff1a\u6a21\u62df\u7535\u8def\u578b\uff08\u4e58\u79ef\u578b\uff09\uff0c\u6570\u5b57\u7535\u8def\u578b\uff08\u95e8\u7535\u8def\uff09 \u4e58\u79ef\u578b \u6a21\u62df\u4e58\u6cd5\u5668\u76f8\u4e58\uff0c\u518d\u7531\u4f4e\u901a\u53d6\u51fa u_1 u_1 \u9700\u8981\u89e3\u8c03\u4fe1\u53f7\uff0c u_2 u_2 \u8981\u4e0e u_1 u_1 \u6b63\u4ea4\uff0c\u5206\u4e09\u79cd\u60c5\u51b5\u8ba8\u8bba\uff1a\u4e24\u4e2a\u90fd\u662f\u5c0f\u4fe1\u53f7\u6216\u5927\u4fe1\u53f7\u4ee5\u53ca u_1 u_1 \u5c0f\u4fe1\u53f7\uff0c u_2 u_2 \u5927\u4fe1\u53f7 \u9274\u76f8\u7279\u6027\uff1a\u6b63\u5f26\u5f62 \u8303\u56f4 \\phi_{emax} = \\pm \\frac{\\pi}{6} rad \\phi_{emax} = \\pm \\frac{\\pi}{6} rad \u4e09\u89d2\u6ce2\u5f62 \\phi_{emax} = \\pm \\frac{\\pi}{2} rad \\phi_{emax} = \\pm \\frac{\\pi}{2} rad \u6b63\u5f26\u5f62 \\phi_{emax} = \\pm \\frac{\\pi}{6} rad \\phi_{emax} = \\pm \\frac{\\pi}{6} rad \u9274\u9891\u5668 \u5206\u7c7b\uff1a\u8c03\u9891-\u8c03\u5e45\u8c03\u9891\u53d8\u6362\u578b\uff0c\u76f8\u79fb\u4e58\u6cd5\u9274\u9891\u578b\uff0c\u8109\u51b2\u5747\u503c\u578b \u8c03\u9891-\u8c03\u5e45\u8c03\u9891\u53d8\u6362\u578b \u53cc\u5931\u8c10\u56de\u8def\u9274\u9891\u5668 \u5229\u7528\u4e24\u4e2a\u5931\u8c10\u56de\u8def\u548c\u4e24\u4e2a\u68c0\u6ce2\u5668 \u76f8\u4f4d\u9274\u9891\u5668 \u53cc\u8026\u5408\u56de\u8def\u548c\u4e24\u4e2a\u68c0\u6ce2\u5668 \u6ce8\u610f\uff1a\u521d\u7ea7\u56de\u8def\u8c10\u632f\u9891\u7387\u4e0e\u5bf9\u79f0\u6027\u6709\u5173\uff0c\u4e8c\u7ea7\u56de\u8def\u548c\u4e2d\u5fc3\u9891\u7387\u6709\u5173 \u9274\u9891\u7279\u6027\u66f2\u7ebf\u7531\u8026\u5408\u56e0\u6570 \\eta = kQ_L \\eta = kQ_L \u51b3\u5b9a\uff0c \\eta \\eta \u4e00\u5b9a\u65f6\uff0c\u5bbd\u5ea6\u7531\u8026\u5408\u7cfb\u6570 k = \\frac{M}{\\sqrt{L_1 L_2}} k = \\frac{M}{\\sqrt{L_1 L_2}} \u51b3\u5b9a \u6bd4\u4f8b\u9274\u9891\u5668 \u5728\u76f8\u4f4d\u9274\u9891\u5668\u5373\u57fa\u7840\u4e0a\u66f4\u6539\uff0c\u727a\u7272\u8f93\u51fa\u7535\u538b\u7684\u5e45\u5ea6\u6765\u6362\u53d6\u6291\u5236\u5bc4\u751f\u8c03\u5e45\u7684\u80fd\u529b\uff0c\u539f\u7406\u662f\u5e45\u5ea6\u53d8\u5316\u65f6\uff0c |U_{D1}| ,|U_{D2}| |U_{D1}| ,|U_{D2}| \u6bd4\u503c\u4e0d\u53d8\uff0c U_o U_o \u4e0d\u53d8 \u6df7\u9891\u5668 \u5e72\u6270\u4e0e\u5931\u771f \u4fe1\u53f7\u4e0e\u672c\u632f\u9891\u7387\u5e72\u6270\uff08\u5e72\u6270\u54e8\u58f0\uff09 pf_L - qf_s = f_I \\pm F \\qquad qf_s - pf_L = f_I \\pm F pf_L - qf_s = f_I \\pm F \\qquad qf_s - pf_L = f_I \\pm F <span class=\"arithmatex\"><span class=\"MathJax_Preview\">pf_L - qf_s = f_I \\pm F \\qquad qf_s - pf_L = f_I \\pm F</span><script type=\"math/tex\">pf_L - qf_s = f_I \\pm F \\qquad qf_s - pf_L = f_I \\pm F \u5916\u6765\u5e72\u6270\u548c\u672c\u632f\u9891\u7387\uff08\u526f\u6ce2\u9053\u5e72\u6270\uff09 f_n = \\frac{p}{q}f_L \\pm \\frac{f_I}{q} f_n = \\frac{p}{q}f_L \\pm \\frac{f_I}{q} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">f_n = \\frac{p}{q}f_L \\pm \\frac{f_I}{q}</span><script type=\"math/tex\">f_n = \\frac{p}{q}f_L \\pm \\frac{f_I}{q} q = 1 ,p = 0 q = 1 ,p = 0 \u65f6\u79f0\u4e3a\u4e2d\u9891\u5e72\u6270 q = 1 ,p = 1 q = 1 ,p = 1 \u65f6\u79f0\u4e3a\u955c\u50cf\u9891\u7387\u5e72\u6270\uff0c\u5e38\u7528 f_n = 2f_I + f_s f_n = 2f_I + f_s \u8ba1\u7b97 \u53cd\u9988\u63a7\u5236\u7535\u8def\u4e0e\u9891\u7387\u5408\u6210 \u7ec4\u6210\uff1a\u9274\u76f8\u5668\uff0c\u73af\u8def\u6ee4\u6ce2\u5668\uff0c\u538b\u63a7\u632f\u8361\u5668 p\\theta_e + K_dK_p(p)K_v sin(\\theta_e) = p\\theta_1 p\\theta_e + K_dK_p(p)K_v sin(\\theta_e) = p\\theta_1","title":"\u901a\u4fe1\u7535\u5b50\u7ebf\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_1","text":"","title":"\u901a\u4fe1\u7535\u5b50\u7ebf\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_2","text":"","title":"\u7eea\u8bba"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_3","text":"\u5b9a\u4e49\uff1a\u5b9e\u73b0\u4fe1\u606f\u7684\u4f20\u8f93\u6240\u9700\u8bbe\u5907\u7efc\u5408 graph LR; \u4fe1\u606f-->\u8f93\u5165\u53d8\u6362\u5668; \u8f93\u5165\u53d8\u6362\u5668-->\u53d1\u9001\u8bbe\u5907; \u53d1\u9001\u8bbe\u5907-->\u4f20\u8f93\u4fe1\u9053; \u4f20\u8f93\u4fe1\u9053-->\u63a5\u53d7\u8bbe\u5907; \u63a5\u53d7\u8bbe\u5907-->\u8f93\u51fa\u53d8\u6362\u5668; \u8f93\u51fa\u53d8\u6362\u5668-->\u53d7\u4fe1\u8005; \u566a\u58f0-->\u4f20\u8f93\u4fe1\u9053; \u7ec4\u6210\uff1a\u4ee5\u4e0a5\u4e2a\u57fa\u672c\u90e8\u5206 \u8f93\u5165\u53d8\u6362\u5668\uff1a\u975e\u7535\u91cf\u8f6c\u6362\u4e3a\u57fa\u5e26\u4fe1\u53f7\u3002 \u53d1\u9001\u8bbe\u5907\uff1a\u57fa\u5e26\u4fe1\u53f7\u53d8\u6362\u4e3a\u9002\u5408\u4fe1\u9053\u4f20\u8f93\u7684\u4fe1\u53f7 \u4e24\u5927\u4efb\u52a1\uff1a 1. \u4fe1\u53f7\u53d8\u6362\uff08\u8c03\u5236\uff09 2. \u4fe1\u53f7\u653e\u5927\uff08\u7535\u538b\u548c\u529f\u7387\uff09 \u63a5\u6536\u8bbe\u5907\uff1a 1. \u89e3\u8c03 2. \u9009\u62e9\u6709\u7528\u4fe1\u53f7\uff0c\u6291\u5236\u5e72\u6270\u4fe1\u53f7 \u5206\u7c7b\uff1a\u6309\u4fe1\u9053\uff0c\u901a\u4fe1\u65b9\u5f0f\uff0c\u4f20\u8f93\u7684\u57fa\u5e26\u4fe1\u53f7\u5206","title":"\u901a\u4fe1\u7cfb\u7edf"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_4","text":"\u9891\u6bb5\u7684\u5212\u5206 \u4f20\u64ad\u65b9\u5f0f\uff1a\u5730\u6ce2\uff08\u7ed5\u5c04\uff09\uff0c\u5929\u6ce2\uff08\u6298\u5c04\u548c\u53cd\u5c04\uff09\uff0c\u76f4\u7ebf\uff08\u89c6\u8ddd\uff09\u4f20\u64ad\uff0c\u51b3\u5b9a\u65b9\u5f0f\u4e3a\u4fe1\u53f7\u7684\u6ce2\u957f\uff0c\u957f\u4e2d\u6ce2\u5730\u6ce2\uff0c\u77ed\u6ce2\u5929\u6ce2\uff0c\u8d85\u77ed\u6ce2\u76f4\u7ebf","title":"\u65e0\u7ebf\u4fe1\u9053\u53ca\u4f20\u64ad\u65b9\u5f0f"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_5","text":"\u57fa\u672c\u4efb\u52a1\uff1a\u4ee5\u81ea\u7531\u7a7a\u95f4\u4e3a\u4fe1\u9053\uff0c\u628a\u4fe1\u606f\u53d8\u6362\u4e3a\u65e0\u7ebf\u7535\u6ce2\u4f20\u9001\u5230\u8fdc\u65b9 \u8981\u6c42\uff1a\u8fdc\uff0c\u591a\u8def\u4f20\u8f93 \u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u53d1\u9001\u57fa\u5e26\u4fe1\u53f7\uff1a 1. \u57fa\u5e26\u4fe1\u53f7\u662f\u4f4e\u9891\u4fe1\u53f7\uff0c\u8981\u7528\u5f88\u957f\u7684\u5929\u7ebf 2. \u5e26\u5bbd\u4e0d\u540c\uff0c\u591a\u8def\u901a\u4fe1\u56f0\u96be \u8f7d\u6ce2\u8c03\u5236\uff1a\u7528\u57fa\u5e26\u4fe1\u53f7\u53bb\u63a7\u5236\u9ad8\u9891\u8f7d\u6ce2\u4fe1\u53f7\u7684\u4e09\u53c2\u91cf\u4e4b\u4e00\uff0c\u4f7f\u5176\u968f\u57fa\u6ce2\u7ebf\u6027\u53d8\u5316 \u65b9\u5f0f\uff1a 1. \u6a21\u62df\u8c03\u5236 2. \u6570\u5b57\u8c03\u5236 graph LR; \u4e3b\u632f\u5668-->\u7f13\u51b2\u5668; \u7f13\u51b2\u5668-->\u9ad8\u9891\u653e\u5927; \u9ad8\u9891\u653e\u5927-->\u8c03\u5236\u5668; \u8c03\u5236\u5668-->\u529f\u7387\u653e\u5927; \u529f\u7387\u653e\u5927-->\u5929\u7ebf; \u8c03\u5236\u4fe1\u53f7-->\u8c03\u5236\u5668; \u8c03\u5e45\u5e7f\u64ad\u4e3a\u4f8b\uff0c\u53d8\u5316\u4e3a\uff1a graph LR; \u58f0\u7535\u53d8\u6362\u5668-->\u524d\u7f6e\u653e\u5927\u5668; \u524d\u7f6e\u653e\u5927\u5668-->\u4f4e\u9891\u529f\u7387\u653e\u5927; \u4f4e\u9891\u529f\u7387\u653e\u5927-->AM\u8c03\u5236\u5668; \u4f4e\u9891\u90e8\u5206+\u9ad8\u9891\u90e8\u5206+\u5929\u7ebf","title":"\u65e0\u7ebf\u7535\u53d1\u9001\u8bbe\u5907"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_6","text":"\u89e3\u8c03\uff1a\u68c0\u6ce2\uff0c\u9274\u9891\u548c\u9274\u76f8 \u76f4\u63a5\u68c0\u6ce2\u5f0f\u63a5\u6536\u673a\uff0c\u7075\u654f\u5ea6\uff0c\u9009\u62e9\u6027\u4f4e \u76f4\u63a5\u653e\u5927\u5f0f\u63a5\u6536\u673a\uff1a\u9002\u7528\u4e8e\u56fa\u5b9a\u9891\u7387\u7684\u63a5\u6536 \u8d85\u5916\u5dee\u63a5\u6536\u673a\uff0c\u540c\u65f6\u517c\u987e\u9ad8\u7075\u654f\u5ea6\u548c\u9ad8\u9009\u62e9\u6027\uff0c\u8c03\u5e45\u5e7f\u64ad\u4e3a\u4f8b\uff1a graph LR; \u5929\u7ebf-->\u9ad8\u9891\u5c0f\u4fe1\u53f7\u653e\u5927\u5668; \u9ad8\u9891\u5c0f\u4fe1\u53f7\u653e\u5927\u5668-->\u6df7\u9891\u5668; \u6df7\u9891\u5668-->\u4e2d\u9891\u653e\u5927; \u4e2d\u9891\u653e\u5927-->\u68c0\u6ce2\u5668; \u68c0\u6ce2\u5668-->\u4f4e\u9891\u7535\u538b\u653e\u5927; \u4f4e\u9891\u7535\u538b\u653e\u5927-->\u4f4e\u9891\u529f\u7387\u653e\u5927; \u672c\u673a\u632f\u8361-->\u6df7\u9891\u5668;","title":"\u65e0\u7ebf\u7535\u63a5\u53d7\u8bbe\u5907"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_7","text":"\u53d1\u5c04\u8bbe\u5907\u548c\u63a5\u6536\u8bbe\u5907\u7684\u5404\u79cd\u9ad8\u9891\u7535\u8def \u9ad8\u9891\uff1a\u51e0\u767eKHz\u5230\u51e0\u767eMHz","title":"\u901a\u4fe1\u7535\u5b50\u7ebf\u8def\u7814\u7a76\u5bf9\u8c61"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_8","text":"","title":"\u9ad8\u9891\u57fa\u7840\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#lc","text":"","title":"LC\u4e32\u5e76\u8054\u8c10\u632f\u56de\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_9","text":"\u7535\u611f\uff1a\u7406\u60f3\u7535\u611f\u4e0e\u635f\u8017\u7535\u963b\u4e32\u8054\u6216\u635f\u8017\u7535\u5bfc\u5e76\u8054\u3002 Q_0 Q_0 \u4e3a\u7406\u60f3\u54c1\u8d28\u56e0\u6570\uff0c\u53ef\u5728\u5de5\u4f5c\u9891\u7387\u4e0b\u901a\u8fc7Q\u8868\u76f4\u63a5\u6d4b\u5f97\uff0c Q_0 \\gg 1 Q_0 \\gg 1 \u65f6\uff0c r_0=\\frac{\\omega_0L}{Q_0} r_0=\\frac{\\omega_0L}{Q_0} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">r_0=\\frac{\\omega_0L}{Q_0}</span><script type=\"math/tex\">r_0=\\frac{\\omega_0L}{Q_0} g_0=\\frac{1}{\\omega_0LQ_0} g_0=\\frac{1}{\\omega_0LQ_0} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">g_0=\\frac{1}{\\omega_0LQ_0}</span><script type=\"math/tex\">g_0=\\frac{1}{\\omega_0LQ_0} \u7535\u5bb9\uff1a\u7b49\u6548\u4e3a\u7406\u60f3\u7535\u5bb9 Q=\\frac{\\omega L}{R} Q=\\frac{\\omega L}{R} \uff0c\u5e76\u8054\u8c10\u632f\u56de\u8def Q=\\frac{R}{\\omega L}= Q=\\frac{R}{\\omega L}=","title":"\u9ad8\u9891\u7b49\u6548\uff1a"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_10","text":"\u8c10\u632f\u65f6\u7535\u6d41\u6700\u5927\uff0c\u963b\u6297\u6700\u5c0f\uff0c\u56de\u8def\u54c1\u8d28\u56e0\u7d20\u8d8a\u5927\uff0c\u76f8\u5bf9\u5e45\u9891\u7279\u6027\uff0c\u76f8\u5bf9\u76f8\u9891\u7279\u6027\u8d8a\u9661\uff0c\u968f \\omega \\omega \u589e\u52a0\uff0c\u963b\u6297\u7531\u5bb9\u6297\u5411\u611f\u6297\u8f6c\u5316","title":"\u4e32\u8054\u8c10\u632f\u56de\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_11","text":"\u7a7a\u8f7d\u65f6 \u8c10\u632f\u9891\u7387:\\omega_p=\\omega_0\\sqrt{1-\\frac{1}{Q_0^2}} \u8c10\u632f\u9891\u7387:\\omega_p=\\omega_0\\sqrt{1-\\frac{1}{Q_0^2}} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">\u8c10\u632f\u9891\u7387:\\omega_p=\\omega_0\\sqrt{1-\\frac{1}{Q_0^2}}</span><script type=\"math/tex\">\u8c10\u632f\u9891\u7387:\\omega_p=\\omega_0\\sqrt{1-\\frac{1}{Q_0^2}} Q_0 \\gg 1 Q_0 \\gg 1 \u65f6\uff0c \\omega_p=\\omega_0 \\omega_p=\\omega_0 \uff0c\u4e14\u6b64\u65f6\u6709\u56de\u8def\u7535\u963b R_p=Q_0^2r_0 R_p=Q_0^2r_0 \u5e26\u8f7d \u52a0\u4e00\u8d1f\u8f7d\uff0c\u4e0d\u5f71\u54cd\u8c10\u632f\u9891\u7387\uff0c\u8c10\u632f\u65f6\uff0c\u7535\u963b\u51cf\u5c0f\uff0c\u54c1\u8d28\u56e0\u7d20\u51cf\u5c0f\u3002 \u8c10\u632f\u65f6\u7535\u538b\u6700\u5927\uff0c\u963b\u6297\u6700\u5927\uff0c\u56de\u8def\u54c1\u8d28\u56e0\u7d20\u8d8a\u5927\uff0c\u76f8\u5bf9\u5e45\u9891\u7279\u6027\uff0c\u76f8\u5bf9\u76f8\u9891\u7279\u6027\u8d8a\u9661\uff0c\u968f \\omega \\omega \u589e\u52a0\uff0c\u963b\u6297\u7531\u611f\u6297\u5411\u5bb9\u6297\u8f6c\u5316","title":"\u5e76\u8054\u8c10\u632f\u56de\u8def\uff1a"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_12","text":"\u963b\u6297\u53d8\u6362\u4e3a\u9664\u4ee5 p^2 p^2 \uff0c\u5bfc\u7eb3\u53d8\u6362\u4e3a\u4e58\u4ee5 p^2 p^2 \uff0c\u7535\u538b\u6e90\u4e3a\u9664\uff0c\u7535\u6d41\u6e90\u4e3a\u4e58\u3002","title":"\u63a5\u5165\u7cfb\u6570\u4e0e\u53d8\u5316\u5173\u7cfb"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_13","text":"\u529f\u80fd\uff1a\u5bf9\u5fae\u5f31\u9ad8\u9891\u4fe1\u53f7\u7684\u4e0d\u5931\u771f\u653e\u5927\u548c\u9009\u9891\u6ee4\u6ce2 \u7279\u70b9\uff1a 1. \u9891\u7387\u9ad8\uff0c\u4e09\u6781\u7ba1\u6781\u95f4\u7535\u5bb9\u4e0d\u80fd\u5ffd\u7565 2. \u8f93\u5165\u4fe1\u53f7\u5c0f\uff0c\u6676\u4f53\u7ba1\u5de5\u4f5c\u5728\u7ebf\u6027\u8303\u56f4 \u5206\u7c7b\uff1a\u6309\u653e\u5927\u4fe1\u53f7\u7684\u5e26\u5bbd\uff0c\u6309\u8d1f\u8f7d\u6027\u8d28 \u6280\u672f\u6307\u6807\uff1a A_u,A_p,2\\triangle f_{0.7},K_{r0.1},N_F=\\frac{P_{si}/P_{ni}}{P_{so}/P_{no}} A_u,A_p,2\\triangle f_{0.7},K_{r0.1},N_F=\\frac{P_{si}/P_{ni}}{P_{so}/P_{no}} \u5b9e\u9645\u653e\u5927\u5668\u77e9\u5f62\u7cfb\u6570\u6052\u5927\u4e8e1\uff0c\u8d8a\u5c0f\u8d8a\u597d\uff0c\u566a\u58f0\u7cfb\u6570\u63a5\u8fd1\u4e8e1\u597d","title":"\u9ad8\u9891\u5c0f\u4fe1\u53f7\u653e\u5927\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_14","text":"\u622a\u81f3\u9891\u7387 f_\\beta f_\\beta \uff0c\u7279\u5f81\u9891\u7387 f_T f_T \uff0c\u6700\u9ad8\u632f\u8361\u9891\u7387 f_{max} f_{max} |\\beta |=\\frac{\\beta_0}{\\sqrt{1-(\\frac{f}{f_\\beta})^2}} |\\beta |=\\frac{\\beta_0}{\\sqrt{1-(\\frac{f}{f_\\beta})^2}} \u5f53 \\beta \\gg 1 \\beta \\gg 1 \u65f6\uff0c f_T=\\beta_0 f_b f_T=\\beta_0 f_b","title":"\u6676\u4f53\u7ba1\u9ad8\u9891\u53c2\u6570"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_15","text":"\u5206\u4e3aY\u53c2\u6570\u7b49\u6548\u7535\u8def\u548c\u6df7\u5408 \\pi \\pi \u578b\u7b49\u6548\u7535\u8def","title":"\u5355\u8c03\u8c10\u56de\u8def\u8c10\u632f\u653e\u5927\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#y","text":"y_i=\\dot{I_1}/\\dot{U_1}|_{U_2=0} y_i=\\dot{I_1}/\\dot{U_1}|_{U_2=0} \uff0c\u8f93\u51fa\u77ed\u8def\u8f93\u5165\u5bfc\u7eb3\uff0c y_o y_o \uff0c\u8f93\u51fa\u5bfc\u7eb3\uff0c y_r y_r \uff0c\u53cd\u5411\u4f20\u8f93\u5bfc\u7eb3\uff0c y_f y_f \uff0c\u6b63\u5411\u4f20\u8f93\u5bfc\u7eb3 \u5171\u5c04\u7535\u8def\uff0c\u7b80\u5316\u4e3a\uff0c y_{re}=0 y_{re}=0 \u6bcf\u7ea7\u4e09\u6781\u7ba1\u53c2\u6570\u90fd\u76f8\u540c\u65f6\uff0c\u7b49\u6548\u5230\u8c10\u632f\u56de\u8def\uff1a 1. \u5de6\u8fb9\uff1a p_1\\dot{U_i}y_{fe},p_1^2g_{oe},p_1^2C_{oe} p_1\\dot{U_i}y_{fe},p_1^2g_{oe},p_1^2C_{oe} 2. \u4e2d\u95f4\uff1a C,g_0,L C,g_0,L 3. \u53f3\u8fb9\uff1a p_2^2g_{ie},p_2^2C_{ie},\\frac{\\dot{U_o}}{p_2} p_2^2g_{ie},p_2^2C_{ie},\\frac{\\dot{U_o}}{p_2} \u7531 \\dot{U_o}=-\\frac{p_1\\dot{U_i}y_{fe}}{Y_{\\Sigma}} \\dot{U_o}=-\\frac{p_1\\dot{U_i}y_{fe}}{Y_{\\Sigma}} \u5f97\uff1a \\dot{A_u}=-\\frac{p_1p_2y_{fe}}{Y_\\Sigma} \\dot{A_u}=-\\frac{p_1p_2y_{fe}}{Y_\\Sigma} \u8c10\u632f\u65f6\u6700\u5927\uff0c\u5176\u4e2d Y_{\\Sigma}=g_{\\Sigma} Y_{\\Sigma}=g_{\\Sigma} \u76f8\u5bf9\u7535\u538b\u589e\u76ca\uff1a \\frac{\\dot{A_u}}{\\dot{A_{u0}}}=\\frac{1}{1+jQ_L2\\triangle f/f_0} \\frac{\\dot{A_u}}{\\dot{A_{u0}}}=\\frac{1}{1+jQ_L2\\triangle f/f_0} \u5176\u4e2d Q_L=1/(\\omega_0 g_{\\Sigma} L) Q_L=1/(\\omega_0 g_{\\Sigma} L) \uff0c\u82e5 \\xi=Q_L 2\\triangle f/f_0 \\xi=Q_L 2\\triangle f/f_0 \uff0c\u79f0\u4e3a\u5e7f\u4e49\u5931\u8c10 \u901a\u9891\u5e26\uff1a \\triangle 2f_{0.7} = f_0/Q_L \\triangle 2f_{0.7} = f_0/Q_L \uff0c\u77e9\u5f62\u7cfb\u6570\uff1a K_{r0.1}=\\sqrt{99} \\gg 1 K_{r0.1}=\\sqrt{99} \\gg 1 \u9009\u62e9\u6027\u5dee \u901a\u9891\u5e26\u548c\u8c10\u632f\u7535\u538b\u589e\u76ca\u4e3a\u5e38\u6570","title":"Y\u53c2\u6570\u7b49\u6548\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_16","text":"A_m=(A_{u1})^m A_m=(A_{u1})^m \\frac{A_m}{A_{mo}} = \\frac{1}{(1+(Q_L 2 \\triangle f/f_0)^2)^{m/2}} \\frac{A_m}{A_{mo}} = \\frac{1}{(1+(Q_L 2 \\triangle f/f_0)^2)^{m/2}} (2 \\triangle f_{0.7})_m = \\sqrt{2^{1/m}-1} (2 \\triangle f_{0.7})_1 (2 \\triangle f_{0.7})_m = \\sqrt{2^{1/m}-1} (2 \\triangle f_{0.7})_1 \u7ea7\u6570\u8d8a\u591a\uff0c\u901a\u9891\u5e26\u8d8a\u7a84\uff0c\u77e9\u5f62\u7cfb\u6570\u8d8a\u5c0f","title":"\u591a\u7ea7\u5355\u8c03\u8c10\u56de\u8def\u8c10\u632f\u653e\u5927\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_17","text":"\u5f15\u8d77\u4e0d\u7a33\u5b9a\u7684\u539f\u56e0\uff1a y_{re} \\neq 0 y_{re} \\neq 0 \uff0c\u53ef\u80fd\u6784\u6210\u6b63\u53cd\u9988 \u7a33\u5b9a\u7cfb\u6570\uff1a S = \\dot{U_i}/\\dot{U_i'} S = \\dot{U_i}/\\dot{U_i'} \uff0c\u5176\u4e2d \\dot{U_i'} \\dot{U_i'} \u4e3a\u6b63\u53cd\u9988\u7535\u538b S\u8d8a\u5927\uff0c\u8d8a\u7a33\u5b9a\uff0c\u4e00\u822c\u8981\u6c42 \\ge 5 \\ge 5 \u7a33\u5b9a\u7535\u538b\u589e\u76ca\uff1a\u4e0d\u52a0\u7a33\u5b9a\u63aa\u65bd\uff0c\u5e76\u6ee1\u8db3S\u7684\u5de5\u4f5c\u4e8e\u8c10\u632f\u9891\u7387\u7684\u6700\u5927\u7535\u538b\u589e\u76ca |A_{u0}|=\\sqrt{\\frac{2|y_{fe|}}{S|y_{re}|(1+cos(\\phi_{re}+\\phi_{fe}))}} |A_{u0}|=\\sqrt{\\frac{2|y_{fe|}}{S|y_{re}|(1+cos(\\phi_{re}+\\phi_{fe}))}} \u63d0\u9ad8\u7a33\u5b9a\u6027\u63aa\u65bd\uff1a 1. \u4e2d\u548c\u6cd5\uff1a\u7535\u6d41\u5927\u5c0f\u76f8\u540c\uff0c\u65b9\u5411\u76f8\u53cd \u53ea\u80fd\u5bf9\u4e00\u4e2a\u9891\u7387\u70b9\u8d77\u5230\u5b8c\u5168\u4e2d\u548c\u4f5c\u7528 2. \u5931\u914d\u6cd5\uff1a\u5b9e\u8d28\u662f\u964d\u4f4e\u7535\u538b\u589e\u76ca","title":"\u7a33\u5b9a\u6027"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_18","text":"\u529f\u80fd\uff1a\u7528\u5c0f\u529f\u7387\u7684\u9ad8\u9891\u8f93\u5165\u4fe1\u53f7\u53bb\u63a7\u5236\u9ad8\u9891\u529f\u7387\u653e\u5927\u5668\u5c06\u76f4\u6d41\u7535\u6e90\u4f9b\u7ed9\u7684\u80fd\u91cf\u8f6c\u5316\u4e3a\u5927\u529f\u7387\u9ad8\u9891\u80fd\u91cf\u8f93\u51fa \u5206\u7c7b\uff1a\u6309\u5de5\u4f5c\u9891\u7387\uff0c\u6309\u5de5\u4f5c\u7c7b\u578b \u6280\u672f\u6307\u6807\uff1a\u8f93\u51fa\u529f\u7387\uff0c\u6548\u7387\uff0c\u529f\u7387\u589e\u76ca\uff0c\u8c10\u6ce2\u6291\u5236\u5ea6\uff08\u975e\u7ebf\u6027\u529f\u653e\uff09 \u4e2d\u95f4\u7ea7\u548c\u8f93\u51fa\u7ea7\u90fd\u53ef\u7b49\u6548\u4e3a\u8f93\u5165\u56de\u8def\uff0c\u975e\u7ebf\u6027\u5668\u4ef6\uff0c\u5e26\u901a\u6ee4\u6ce2 \u7279\u70b9\uff1a 1. \u653e\u5927\u5668\uff1a\u9759\u6001\u622a\u6b62\uff0c\u52a8\u6001\u5bfc\u901a\u548c\u622a\u6b62 2. \u8c10\u632f\u56de\u8def\uff1a\u9009\u9891\uff0c\u963b\u6297\u5339\u914d","title":"\u9ad8\u9891\u529f\u7387\u653e\u5927\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_19","text":"\u4e09\u6781\u7ba1\u7684\u4e09\u79cd\u7279\u6027\u66f2\u7ebf\uff1a\u8f93\u5165\u7279\u6027\uff0c\u8f93\u51fa\u7279\u6027\uff0c\u6b63\u5411\u4f20\u8f93\u7279\u6027 g_r g_r \u4e3a\u6b63\u5411\u4f20\u8f93\u7279\u6027\u66f2\u7ebf\u659c\u7387\uff0c g_{cr} g_{cr} \u8f93\u51fa\u7279\u6027\u66f2\u7ebf\u9971\u548c\u533a\u7684\u659c\u7387\uff0c\u5176\u653e\u5927\u533a\u95f4\u9694\u9664\u4ee5 u_{be} u_{be} \u53d8\u6362\u5e94\u4e3a g_r g_r \u8f93\u5165\u4fe1\u53f7 u_{bm}cos(\\omega t) u_{bm}cos(\\omega t) \uff0c \\omega t = 0 \\omega t = 0 \u65f6\uff0c i_c i_c \u6700\u5927\uff0c \\omega t = \\theta_c \\omega t = \\theta_c \u65f6\uff0c i_c i_c \u4e3a0\uff0c \\theta_c \\theta_c \u5373\u4e3a\u5bfc\u901a\u89d2 cos \\theta_c = \\frac{U_{BZ}-V_{BB}}{U_{bm}} cos \\theta_c = \\frac{U_{BZ}-V_{BB}}{U_{bm}} i_c = I_{cM}\\frac{cos(\\omega t)-cos\\theta_c}{1-cos\\theta_c} i_c = I_{cM}\\frac{cos(\\omega t)-cos\\theta_c}{1-cos\\theta_c} \u4ee4\u96c6\u7535\u6781\u7535\u538b\u5229\u7528\u7cfb\u6570 \\xi = U_{cm}/V_{cc} \\xi = U_{cm}/V_{cc} \uff0c\u6ce2\u5f62\u7cfb\u6570 g_1 = \\alpha_1/\\alpha_0 g_1 = \\alpha_1/\\alpha_0 \uff0c U_{cm}=I_{c1m}R_P U_{cm}=I_{c1m}R_P \\eta = \\frac{P_o}{P_=} = \\frac{1}{2} \\frac{U_{cm}I_{c1m}}{V_{cc}I_{c0}} = \\frac{1}{2} \\xi g_1(\\theta_c) \\eta = \\frac{P_o}{P_=} = \\frac{1}{2} \\frac{U_{cm}I_{c1m}}{V_{cc}I_{c0}} = \\frac{1}{2} \\xi g_1(\\theta_c) \u517c\u987e\u6548\u7387\u548c\u8f93\u51fa\u529f\u7387\uff1a \\theta_c \\theta_c \u4e00\u822c\u53d660-80\u00b0","title":"\u6298\u7ebf\u5206\u6790\u6cd5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_20","text":"\u6676\u4f53\u7ba1\uff0c\u7535\u6e90\u53c2\u6570\u786e\u5b9a\u6761\u4ef6\u4e0b\uff0c\u4fe1\u53f7\u632f\u5e45\u4e00\u5b9a\uff0c i_c = f(u_{be},u{ce}) i_c = f(u_{be},u{ce}) \u7684\u5173\u7cfb \u622a\u8ddd\u6cd5\uff1a\u659c\u7387+\u622a\u8ddd+ (u_{cemax},0) (u_{cemax},0) i_c = g_d(u_{ce}-U_0) i_c = g_d(u_{ce}-U_0) \u5f0f\u4e2d g_d = -g_c \\frac{u_{bm}}{u_{cm}} g_d = -g_c \\frac{u_{bm}}{u_{cm}} \uff0c U_0 = V_{cc}-u_{cm}cos\\theta_c U_0 = V_{cc}-u_{cm}cos\\theta_c \u865a\u62df\u7535\u6d41\u6cd5\uff1a (u_{cemin},u_{bemax}) (u_{cemin},u_{bemax}) + (V_{cc},I_Q) (V_{cc},I_Q) + (u_{cemax},0) (u_{cemax},0) I_Q = -g_c (U_{BZ}-V_{BB}) I_Q = -g_c (U_{BZ}-V_{BB}) \u5de5\u4f5c\u72b6\u6001\uff1a\u6b20\u538b\uff0c\u4e34\u754c\u548c\u8fc7\u538b","title":"\u52a8\u6001\u7279\u6027"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_21","text":"\u7535\u6e90\uff0c\u4e09\u6781\u7ba1\u53c2\u6570\uff0c U_{bm} U_{bm} \u4e00\u5b9a\uff0c\u6539\u53d8 R_P R_P \u5de5\u4f5c\u72b6\u6001\uff0c\u7535\u538b\uff0c\u7535\u6d41\uff0c\u529f\u7387\uff0c\u6548\u7387\u7684\u53d8\u5316 \u7528\u52a8\u6001\u7279\u6027\u5206\u6790\uff1a\u968f R_P R_P \u589e\u5927\uff0c I_Q ,u_{bemin} ,\\theta_c ,I_{cM} I_Q ,u_{bemin} ,\\theta_c ,I_{cM} \u4e0d\u53d8\uff0c u_{cm} u_{cm} \u589e\u5927\uff0c\u659c\u7387\u51cf\u5c0f\uff0c\u5de5\u4f5c\u72b6\u6001\u7531\u6b20\u538b\u5411\u8fc7\u538b\u8f6c\u5316\u3002 \u4f46\u5728\u8fc7\u538b\u533a\uff0c\u7535\u6d41\u4e0d\u518d\u662f\u5c16\u9876\u8109\u51b2\uff0c\u5206\u89e3\u7cfb\u6570\u6539\u53d8\uff0c\u7535\u6d41\u51cf\u5c0f\uff0c\u4f46 u_{cm} u_{cm} \u589e\u957f\u51cf\u7f13 \u8f93\u51fa\u529f\u7387\u5728\u4e34\u754c\u72b6\u6001\u8fbe\u5230\u5cf0\u503c\uff0c\u7528\u4e8e\u672b\u7ea7\uff0c\u6548\u7387\u5728\u5f31\u8fc7\u538b\u533a\u8fbe\u5230\u5cf0\u503c\uff0c\u968f\u540e\u4e0b\u964d\uff0c\u7528\u4e8e\u4e2d\u95f4\u653e\u5927\u7ea7 \u6b64\u5916 R_P R_P \u4e00\u5b9a\u4e0d\u8981\u4e3a0","title":"\u8d1f\u8f7d\u7279\u6027"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_22","text":"\u7528\u52a8\u6001\u7279\u6027\u5206\u6790\u5373\u53ef","title":"\u5404\u7ea7\u7535\u538b\u5f71\u54cd"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_23","text":"\u8f93\u5165\u8f93\u51fa\u56de\u8def\u529f\u80fd\uff1a 1. \u6b63\u5e38\u504f\u7f6e 2. \u9009\u9891 3. \u963b\u6297\u5339\u914d \u96c6\u7535\u6781\u9988\u7535\uff1a\u4e32\u8054\u9988\u7535\uff0c\u5e76\u8054\u9988\u7535 \u57fa\u6781\u9988\u7535\uff1a\u3010\u4e32\u8054\u9988\u7535\uff0c\u5e76\u8054\u9988\u7535\u3011\u3010\u5916\u52a0\u504f\u538b\uff0c\u81ea\u7ed9\u504f\u538b\u3011","title":"\u4e19\u7c7b\u529f\u653e\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_24","text":"","title":"\u5339\u914d\u7f51\u7edc"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_25","text":"\u4f20\u8f93\u7ebf\u53d8\u538b\u5668\uff1a\u4f20\u9012\u80fd\u91cf\u7684\u4e24\u79cd\u65b9\u5f0f 1:1\u4f20\u8f93\u7ebf\u53d8\u538b\u5668\u6700\u4f73\u5339\u914d\u6761\u4ef6\uff1a Z_C = R_S = R_L Z_C = R_S = R_L \uff0c\u7528\u4f5c\u5012\u76f8\u5668 \u963b\u6297\u53d8\u6362\u4f20\u8f93\u7ebf\u53d8\u538b\u5668\uff0c Z_i/Z_o Z_i/Z_o \u5c31\u662f\u51e0\u6bd4\u51e0\u7684\u963b\u6297\u53d8\u6362","title":"\u5bbd\u9891\u5e26\u529f\u653e"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_26","text":"\u7531\u529f\u7387\u653e\u5927\u5668\uff0c\u529f\u7387\u5206\u914d\u5668\uff0c\u529f\u7387\u5408\u6210\u7f51\u7edc\u7ec4\u6210 \u539f\u7406\uff1aN\u4e2a\u529f\u653e\uff0c\u901a\u8fc7\u6df7\u5408\u7535\u8def\u4f7f\u8f93\u51fa\u529f\u7387\u5728\u516c\u5171\u8d1f\u8f7d\u4e0a\u53e0\u52a0\u8d77\u6765","title":"\u529f\u7387\u5408\u6210"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_27","text":"\u5206\u7c7b\uff1a\u6309\u6ce2\u5f62\uff0c\u6309\u539f\u7406\uff0c\u6309\u5143\u4ef6 \u4e3b\u8981\u6280\u672f\u6307\u6807\uff1a\u632f\u8361\u9891\u7387\uff0c\u9891\u7387\u7a33\u5b9a\u5ea6\uff0c\u632f\u8361\u5e45\u5ea6\uff0c\u632f\u8361\u6ce2\u5f62","title":"\u6b63\u5f26\u6ce2\u632f\u8361\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#lc_1","text":"\u8c03\u8c10\u653e\u5927\u5668+\u6b63\u53cd\u9988\u7f51\u7edc \u8d77\u632f\u6761\u4ef6\uff1a\u589e\u5e45\u632f\u8361 1. \u632f\u5e45\u8d77\u632f\uff1a A_0 F > 1 A_0 F > 1 2. \u76f8\u4f4d\u8d77\u632f\uff1a \\phi_A + \\phi_F = 2n\\pi \\phi_A + \\phi_F = 2n\\pi \u5e73\u8861\u6761\u4ef6\uff1a\u7b49\u5e45\u632f\u8361 A = g_c R_P (1-cos\\theta_c)\\alpha_1(\\theta_c) = A_0v(\\theta_c) A = g_c R_P (1-cos\\theta_c)\\alpha_1(\\theta_c) = A_0v(\\theta_c) \u6700\u540e\u5de5\u4f5c\u72b6\u6001\u7531 A_0 F A_0 F \u51b3\u5b9a\uff0c\u4e5f\u51b3\u5b9a\u4e86\u632f\u5e45 \\dot{U_i}\\xrightarrow[\\phi_Y]{Y_{fe}} \\dot{I_c}\\xrightarrow[\\phi_z]{Z_{p1}} \\dot{U_{c1}}\\xrightarrow[\\phi_F]{F} \\dot{U_F} \\dot{U_i}\\xrightarrow[\\phi_Y]{Y_{fe}} \\dot{I_c}\\xrightarrow[\\phi_z]{Z_{p1}} \\dot{U_{c1}}\\xrightarrow[\\phi_F]{F} \\dot{U_F} \\phi_F + \\phi_Y \\neq 0 \\phi_F + \\phi_Y \\neq 0 \uff0c\u56de\u8def\u5fae\u5c0f\u5931\u8c03\uff0c\u4f46\u8fd1\u4f3c\u4e3a\u56de\u8def\u8c10\u632f\u9891\u7387 \u7a33\u5b9a\u6761\u4ef6\uff1a 1. \u632f\u5e45\u7a33\u5b9a\uff1a \\frac{\\partial A}{\\partial U_c}|_{U_c = U_{cQ}} < 0 \\frac{\\partial A}{\\partial U_c}|_{U_c = U_{cQ}} < 0 <span class=\"arithmatex\"><span class=\"MathJax_Preview\">\\frac{\\partial A}{\\partial U_c}|_{U_c = U_{cQ}} &lt; 0</span><script type=\"math/tex\">\\frac{\\partial A}{\\partial U_c}|_{U_c = U_{cQ}} < 0 \u63aa\u65bd\uff1a\u8c03\u8282\u9759\u6001\u5de5\u4f5c\u70b9\uff0c\u5373 A_0 A_0 \uff1b\u8c03\u8282F 2. \u76f8\u4f4d\u7a33\u5b9a\uff1a \\frac{\\partial \\phi_Z}{\\partial \\omega} < 0 \\frac{\\partial \\phi_Z}{\\partial \\omega} < 0 <span class=\"arithmatex\"><span class=\"MathJax_Preview\">\\frac{\\partial \\phi_Z}{\\partial \\omega} &lt; 0</span><script type=\"math/tex\">\\frac{\\partial \\phi_Z}{\\partial \\omega} < 0 \u6309\u53cd\u9988\u8026\u5408\u5143\u4ef6\u5206\uff1a\u4e92\u611f\u8026\u5408\u632f\u8361\u5668\uff0c\u7535\u5bb9\u53cd\u9988\u5f0f\u632f\u8361\u5668\uff0c\u7535\u611f\u53cd\u9988\u5f0f\u632f\u8361\u5668","title":"\u53cd\u9988\u578bLC\u632f\u8361"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_28","text":"\u5171\u3010\u3011\u8c03\u3010\u3011\u578b\uff0c\u77ac\u65f6\u6781\u6027\u6cd5\u5224\u65ad\uff0c f_0 = \\frac{1}{2\\pi\\sqrt{L_1 C}} f_0 = \\frac{1}{2\\pi\\sqrt{L_1 C}} \u4f18\u70b9\uff1a\u8c03\u6574\u53cd\u9988\u65f6\uff0c\u4e0d\u4f1a\u5f71\u54cd\u632f\u8361\u9891\u7387 \u7f3a\u70b9\uff1a\u9891\u7387\u4e0d\u5b9c\u8fc7\u9ad8","title":"\u4e92\u611f\u8026\u5408\u632f\u8361\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_29","text":"\u5171\u5c04\u65f6\uff1a A_0 = \\frac{|y_{fe}|}{g_\\Sigma} ,F = \\frac{c_1'}{c_2'} A_0 = \\frac{|y_{fe}|}{g_\\Sigma} ,F = \\frac{c_1'}{c_2'} \u5f0f\u4e2d g_\\Sigma = g_{oe}+g_0 p_1^2+g_{ie} p^2+g_L g_\\Sigma = g_{oe}+g_0 p_1^2+g_{ie} p^2+g_L \u8d77\u632f\u6761\u4ef6\uff1a\u4e09\u6781\u7ba1\u9009\u5b9a\u540e\uff0c\u66f4\u6539F\u548c g_L g_L \u7684\u503c \u8c10\u632f\u9891\u7387\uff1a \\omega_0 = 1/\\sqrt{C_\\Sigma L} \\omega_0 = 1/\\sqrt{C_\\Sigma L}","title":"\u8003\u6bd4\u5179\u632f\u8361\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_30","text":"\u5171\u5c04\uff1a F = \\frac{L_2+M}{L_1+M} F = \\frac{L_2+M}{L_1+M} \u8d77\u632f\u6761\u4ef6\u548c\u8003\u6bd4\u5179\u76f8\u540c\uff0c\u4f46 g_0' g_0' \u4e0d\u540c \u632f\u8361\u9891\u7387\uff1a \\omega_0 = \\frac{1}{\\sqrt{LC}} \\omega_0 = \\frac{1}{\\sqrt{LC}} \uff0c L = L_1+L_2+2M L = L_1+L_2+2M \u4e24\u79cd\u7535\u8def\u6bd4\u8f83\uff1a\u611f\u89c9\u7535\u5bb9\u4e09\u70b9\u5f0f\u597d\u70b9","title":"\u54c8\u83b1\u7279\u632f\u8361\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_31","text":"\u6ce8\u610f\uff1ac ,e ,b \u5bf9\u4e8e\u632f\u8361\u9891\u7387\uff1a X_{ce}+X_{eb}+X_{cb}=0 X_{ce}+X_{eb}+X_{cb}=0","title":"\u5224\u65ad\u51c6\u5219"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_32","text":"\u7edd\u5bf9\u9891\u7387\u504f\u5dee\uff0c\u76f8\u5bf9\u9891\u7387\u504f\u5dee \u7a33\u5b9a\u5ea6\uff1a\u4e00\u5b9a\u65f6\u95f4\u95f4\u9694\u5185\uff0c\u76f8\u5bf9\u9891\u7387\u504f\u5dee\u6700\u5927\u503c\uff0c\u957f\uff0c\u77ed\uff0c\u77ac\u65f6 \\omega_0 ,\\phi_{YF} ,Q_L \\omega_0 ,\\phi_{YF} ,Q_L \u53d8\u6362\uff0c\u4f1a\u5f15\u8d77\u7a33\u5b9a\u5ea6\u53d8\u5316 \u5916\u56e0\u4f1a\u5f15\u8d77\u8fd9\u4e09\u8005\u53d8\u5316 \u63aa\u65bd\uff1a\u51cf\u5c0f\u5916\u56e0\uff0c\u63d0\u9ad8\u53c2\u6570\u6297\u5916\u56e0\u80fd\u529b","title":"\u9891\u7387\u7a33\u5b9a\u539f\u7406"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#lc_2","text":"","title":"\u9ad8\u7a33\u5b9a\u5ea6LC\u632f\u8361\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_33","text":"\\triangle C_\\Sigma = p_1^2 \\triangle C_o+p_2^2 \\triangle C_i \\triangle C_\\Sigma = p_1^2 \\triangle C_o+p_2^2 \\triangle C_i p_1 ,p_2 p_1 ,p_2 \u4e0d\u53ef\u80fd\u540c\u65f6\u51cf\u5c0f\uff0c\u6545\u7a33\u5b9a\u5ea6\u4e0d\u9ad8","title":"\u4e00\u822c\u7684"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#clapp","text":"\u4e32\u4e00\u4e2a C_3 C_3 \uff0c\u6ee1\u8db3\u4e8e C_3 \\ll C_1 ,C_3 \\ll C_2 C_3 \\ll C_1 ,C_3 \\ll C_2 \uff0c \u5c31\u6709 C_\\Sigma \\approx C_3 C_\\Sigma \\approx C_3 p_1 \\approx \\frac{C_3}{C_1'} p_1 \\approx \\frac{C_3}{C_1'} \uff0c P_2 \\approx \\frac{C_3}{C_2'} P_2 \\approx \\frac{C_3}{C_2'} p_1 ,p_2 p_1 ,p_2 \u53ef\u4ee5\u540c\u65f6\u51cf\u5c0f\uff0c\u4f46\u53d7\u8d77\u632f\u6761\u4ef6\u7684\u9650\u5236\uff0c\u7528\u4f5c\u56fa\u5b9a\u9891\u7387\u632f\u8361\u5668","title":"Clapp"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#siler","text":"\u5728Clapp\u57fa\u7840\u4e0a\u5728L\u4e0a\u5e76\u4e00\u4e2a C_4 C_4 \uff0c\u548c C_3 C_3 \u4e00\u4e2a\u6570\u91cf\u7ea7 \u7528\u4f5c\u53d8\u9891\u632f\u8361\u5668","title":"Siler"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_34","text":"\u538b\u7535\u6548\u5e94 \u7b49\u6548\u4e3a L_q ,C_q ,r_q ,C_0 L_q ,C_q ,r_q ,C_0 \uff0c\u5176 Q_q Q_q \u5f88\u9ad8 \\omega_p - \\omega_q \\omega_p - \\omega_q \u5f88\u5c0f \u4e24\u79cd\u6a21\u5f0f\uff1a \\omega = \\omega_q \\omega = \\omega_q \uff0c\u77ed\u8def\u7ebf\uff0c \\omega_q < \\omega < \\omega_p \\omega_q < \\omega < \\omega_p \uff0c\u7535\u611f","title":"\u6676\u4f53\u632f\u8361\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_35","text":"","title":"\u632f\u5e45\u8c03\u5236\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#am","text":"u(t) = U_{cm}(1+m_a cos(\\Omega t))cos(\\omega_c t) u(t) = U_{cm}(1+m_a cos(\\Omega t))cos(\\omega_c t) \u5f0f\u4e2d m_a = \\frac{K_a U_{\\Omega m}}{U_{cm}} m_a = \\frac{K_a U_{\\Omega m}}{U_{cm}} \u4e3a\u8c03\u5e45\u6307\u6570 \u9891\u8c31\uff1a\u8fb9\u9891\u5e45\u5ea6\u4e3a \\frac{1}{2} m_a U_{cm} \\frac{1}{2} m_a U_{cm} \uff0c\u8f7d\u9891\u5e45\u5ea6\u4e3a U_{cm} U_{cm} \u52a0\u5728R\u4e24\u7aef\u529f\u7387\uff1a 1. \u8f7d\u6ce2\u529f\u7387 P_{OT} P_{OT} 2. \u8fb9\u9891\u529f\u7387 \\frac{1}{4} m_a^2 P_{OT} \\frac{1}{4} m_a^2 P_{OT}","title":"\u666e\u901a\u8c03\u5e45\u6ce2\uff08AM\uff09"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#dsb","text":"AM\u6ce2\u57fa\u7840\u4e0a\u53bb\u6389\u8f7d\u6ce2\u9891\u6bb5 \u5b9e\u8d28\u5c31\u662f\u8f7d\u6ce2\u632f\u8361\u4fe1\u53f7\u76f4\u63a5\u4e58\u4ee5\u8c03\u5236\u4fe1\u53f7 u(t) = \\frac{1}{2}U_{cm}U_{\\Omega m}(\\cdots) u(t) = \\frac{1}{2}U_{cm}U_{\\Omega m}(\\cdots) \u6ce8\u610f\u4e0b\uff1a\u8f7d\u6ce2\u76f8\u4f4d\u5728\u8c03\u5236\u7535\u538b\u96f6\u70b9\u7a81\u53d8180\u00b0","title":"DSB\u6ce2"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#ssb","text":"\u53bb\u6389DSB\u6ce2\u7684\u67d0\u4e00\u8fb9\u9891","title":"SSB\u6ce2"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_36","text":"\u5206\u7c7b\uff1a 1. \u4f4e\u7535\u9891\u8c03\u5236 \u91cd\u70b9\u662f\u63d0\u9ad8\u8c03\u5236\u7684\u7ebf\u6027 2. \u9ad8\u7535\u5e73\u8c03\u5236 \u8981\u517c\u987e\u8f93\u51fa\u529f\u7387\uff0c\u6548\u7387\u548c\u8c03\u5236\u7ebf\u6027 \u7ec4\u6210\uff1a\u8f93\u5165\u56de\u8def\uff0c\u975e\u7ebf\u6027\u5668\u4ef6\u548c\u5e26\u901a\u6ee4\u6ce2\u5668","title":"\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_37","text":"\u7b97\u51fa\u7ecf\u8fc7\u8d1f\u8f7d\u7684\u7535\u6d41\uff0c\u5e26\u901a\u6ee4\u6ce2\u53d6\u5176\u4e0a\u7684\u7535\u538b \u5f00\u5173\u51fd\u6570\u542b\u76f4\u6d41\u548c\u9891\u7387\u7684\u5947\u6570\u5206\u91cf\uff0c\u53bb\u6389\u76f4\u6d41\u5206\u91cf\uff0c\u5176\u5076\u6570\u9879\u4e3a\u8d1f \u5355\u4e8c\u6781\u7ba1\u5f00\u5173\u8c03\u5e45\u7535\u8def\uff1a U_{cm} \\gg U_{\\Omega m} U_{cm} \\gg U_{\\Omega m} \uff0c U_{cm} U_{cm} \u63a7\u5236\u4e8c\u6781\u7ba1\u7684\u5f00\u5173\u72b6\u6001 \u53ea\u80fd\u5b9e\u73b0AM\u6ce2 \u4e8c\u6781\u7ba1\u5e73\u8861\u8c03\u5e45\u7535\u8def \u6ce8\u610f\u4e0b\u531d\u6570\u6bd4\uff0c\u5373\u8d1f\u8f7d\u503c \u8ba1\u7b97\u5148\u5224\u65ad\u4e8c\u6781\u7ba1\u5728\u8f7d\u6ce2\u6b63\u8d1f\u5468\u671f\u7684\u5de5\u4f5c\u72b6\u6001\uff0c\u6b63\u8d1f\u5468\u671f\u7535\u6d41\u5206\u5f00\u8ba1\u7b97\uff0c\u6b64\u7535\u8def\u90fd\u662f\u6b63\u5468\u671f\u5bfc\u901a \u7136\u540e\u6839\u636e\u4e8c\u6781\u7ba1\u5bfc\u901a\u6807\u7535\u6d41\u65b9\u5411\uff0c\u6309\u7535\u6d41\u65b9\u5411\u786e\u5b9a\u7535\u538b\u6b63\u8d1f \u53ef\u4ee5DSB\u6ce2 \u4e8c\u6781\u7ba1\u73af\u5f62\u8c03\u5e45\u7535\u8def \u6ce8\u610f\u5224\u65ad\u4e8c\u6781\u7ba1\u5bfc\u901a\u53cd\u5411\uff0c\u6b64\u5916\u8f7d\u6ce2\u8d1f\u534a\u5468\u671f\u5f00\u5173\u51fd\u6570\u5947\u6570\u9879\u4e3a\u8d1f DSB\u6ce2\uff0c\u6bd4\u8d77\u5e73\u8861\u8c03\u5e45\uff0c\u8fdb\u4e00\u6b65\u6291\u5236\u4e86 \\Omega \\Omega \u5206\u91cf\uff0c\u4e14\u5e45\u5ea6\u662f\u5176\u4e8c\u500d \u6a21\u62df\u4e58\u6cd5\u5668\u8c03\u5e45\u7535\u8def\uff08\u53cc\u5dee\u5206\u5bf9\u7ba1\u632f\u5e45\u8c03\u5236\u7535\u8def\uff09 i = I_0 th(\\frac{qu_1}{2kT}) th(\\frac{qu_2}{2kT}) i = I_0 th(\\frac{qu_1}{2kT}) th(\\frac{qu_2}{2kT}) <span class=\"arithmatex\"><span class=\"MathJax_Preview\">i = I_0 th(\\frac{qu_1}{2kT}) th(\\frac{qu_2}{2kT})</span><script type=\"math/tex\">i = I_0 th(\\frac{qu_1}{2kT}) th(\\frac{qu_2}{2kT}) \u5c06\u6052\u6d41\u6e90\u5206\u4e3a\u4e24\u4e2a\u540e\uff0c\u63a5\u5165\u8d1f\u53cd\u9988\u7535\u963b\uff0c\u53d8\u4e3a\uff1a i = \\frac{2 u_2}{R_y} th(\\frac{qu_1}{2kT}) i = \\frac{2 u_2}{R_y} th(\\frac{qu_1}{2kT}) <span class=\"arithmatex\"><span class=\"MathJax_Preview\">i = \\frac{2 u_2}{R_y} th(\\frac{qu_1}{2kT})</span><script type=\"math/tex\">i = \\frac{2 u_2}{R_y} th(\\frac{qu_1}{2kT}) \u5f0f\u4e2d -I_0/2 \\le u_2/R_y \\le I_0/2 -I_0/2 \\le u_2/R_y \\le I_0/2","title":"\u4f4e\u7535\u5e73\u8c03\u5e45\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_38","text":"\u53ea\u80fd\u8c03AM\u6ce2","title":"\u9ad8\u7535\u5e73\u8c03\u5e45\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_39","text":"\u4e19\u7c7b\u529f\u653e\u8fc7\u538b\u533a\u5177\u6709\u8c03\u5e45\u7279\u6027\uff0c I_{c0} ,I_{c1m} I_{c0} ,I_{c1m} \u968f V_{cc} V_{cc} \u7ebf\u6027\u53d8\u5316 V_{cc} = V_{CT}(1+m_a cos(\\Omega t)) V_{cc} = V_{CT}(1+m_a cos(\\Omega t)) \u8c03\u5236\u4fe1\u53f7\u4e00\u5468\u5e73\u5747\u72b6\u6001\u4e0b\uff0c P_{= av} = P_{=} + P_{\\omega} = (1+(\\frac{m_a}{2})^2)P_{=T} P_{= av} = P_{=} + P_{\\omega} = (1+(\\frac{m_a}{2})^2)P_{=T} \\eta_c = constant \\eta_c = constant \u6ce8\u610f\uff1a\u9009\u62e9\u6676\u4f53\u7ba1\u662f P_{CM} > P_{=av} P_{CM} > P_{=av} \uff0c\u8c03\u5236\u4fe1\u53f7\u6e90\u5fc5\u987b\u662f\u529f\u7387\u6e90","title":"\u96c6\u7535\u6781\u8c03\u5e45\u7535\u8def\uff1a"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_40","text":"\u6b20\u538b\u533a\uff0c\u6548\u7387\u53d8\u5316\uff0c\u8f93\u51fa\u529f\u7387\u90fd\u662f\u76f4\u6d41\u7535\u6e90\u63d0\u4f9b\uff0c\u7ebf\u6027\u8303\u56f4\u5c0f","title":"\u57fa\u6781\u8c03\u5e45\u7535\u8def\uff1a"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_41","text":"\u6ee4\u6ce2\u6cd5\u548c\u79fb\u5411\u6cd5","title":"\u5355\u8fb9\u5e26\u4fe1\u53f7\u4ea7\u751f"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_42","text":"\u76f4\u63a5\u6ee4\u6ce2\u56f0\u96be\uff0c\u76f8\u5bf9\u5e26\u5bbd\u5f88\u5c0f\uff0c\u5b9e\u9645\u4e2d\u964d\u4f4e\u6bcf\u6b21\u7684\u8f7d\u6ce2\u9891\u7387\uff0c\u589e\u5927\u76f8\u5bf9\u5e26\u5bbd\uff0c\u8fdb\u884c\u591a\u6b21\u8c03\u5236","title":"\u6ee4\u6ce2\u6cd5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_43","text":"cos()cos()-sin()sin() cos()cos()-sin()sin() \u8981\u6c42\u51c6\u786e\u79fb90\u00b0","title":"\u79fb\u76f8\u6cd5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_44","text":"\u7ec4\u6210\uff1a\u8f93\u5165\u56de\u8def\uff0c\u975e\u7ebf\u6027\u5668\u4ef6\uff0c\u4f4e\u901a\u6ee4\u6ce2 \u5206\u7c7b\uff1a 1. \u5305\u7edc\u68c0\u6ce2\uff0c\u666e\u901a\u8c03\u5e45\u6ce2\u548c\u9ad8\u9891\u7b49\u5e45\u6ce2 2. \u540c\u6b65\u68c0\u6ce2\uff0c\u53cc\u8fb9\u5e26\u548c\u5355\u8fb9\u5e26\u68c0\u6ce2 \u6307\u6807\uff1a\u7535\u538b\u4f20\u8f93\u7cfb\u6570\uff0c\u7b49\u6548\u8f93\u5165\u7535\u963b\uff0c\u975e\u7ebf\u6027\u5931\u771f\u7cfb\u6570","title":"\u68c0\u6ce2\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_45","text":"\u8f93\u5165\u4fe1\u53f7\u5927\u4e8e0.5V\uff0c\u8c03\u597d\u53c2\u6570\uff0c\u4e8c\u6781\u7ba1\u5145\u653e\u7535\u66f2\u7ebf\u548c\u5305\u7edc\u76f8\u5339\u914d \u68c0\u6ce2\u4e8c\u6781\u7ba1\u5bfc\u901a\u89d2\uff1a U_{BZ} = 0 ,\\theta < \\pi/6 U_{BZ} = 0 ,\\theta < \\pi/6 \u4e0b\uff0c \\theta \\approx \\sqrt[3]{\\frac{3 \\pi r_d}{R}} \\theta \\approx \\sqrt[3]{\\frac{3 \\pi r_d}{R}} \u7ed9\u68c0\u6ce2\u7535\u8def\u52a0\u56fa\u5b9a\u504f\u538b\u53ef\u6ee1\u8db3 U_{BZ} = 0 U_{BZ} = 0 \uff0c R R \u5927\uff0c r_d r_d \u5c0f\u53ef\u6ee1\u8db3 \\theta < \\pi/6 \\theta < \\pi/6 \u6b64\u65f6 u_o u_o \u4e3a\u8f93\u5165\u7684\u9ad8\u9891\u632f\u5e45\u4e58\u4ee5 cos\\theta cos\\theta \uff0c\u5bf9\u4e8eAM\u6ce2\uff0c\u518d\u52a0\u4e00\u4e2a\u9694\u503c\u7535\u5bb9\u540e\uff0c\u53ef\u53d6\u51fa\u539f\u8c03\u5236\u4fe1\u53f7\uff0c\u7b49\u4e8e\u9ad8\u9891\u7b49\u5e45\u6ce2\u7684 K_d K_d \\theta \\theta \u5f88\u5c0f\u65f6\uff0c R_{id} \\approx \\frac{1}{2} R R_{id} \\approx \\frac{1}{2} R \u9891\u7387\u5931\u771f \\frac{1}{\\omega_i C} \\ll R ,\\frac{1}{\\Omega_{max} \\gg R} ,\\frac{1}{\\Omega_{min} C_c} \\ll R \\frac{1}{\\omega_i C} \\ll R ,\\frac{1}{\\Omega_{max} \\gg R} ,\\frac{1}{\\Omega_{min} C_c} \\ll R <span class=\"arithmatex\"><span class=\"MathJax_Preview\">\\frac{1}{\\omega_i C} \\ll R ,\\frac{1}{\\Omega_{max} \\gg R} ,\\frac{1}{\\Omega_{min} C_c} \\ll R</span><script type=\"math/tex\">\\frac{1}{\\omega_i C} \\ll R ,\\frac{1}{\\Omega_{max} \\gg R} ,\\frac{1}{\\Omega_{min} C_c} \\ll R \u975e\u7ebf\u6027\u5931\u771f\u5c0f \u60f0\u6027\u5931\u771f RC\u592a\u5927\uff0c\u653e\u7535\u8ddf\u4e0d\u4e0a\u5305\u7edc \u591a\u9891\u4e0d\u4ea7\u751f\u6761\u4ef6\uff1a RC\\Omega_{max} \\le \\frac{\\sqrt{1-m_a}}{m_a} RC\\Omega_{max} \\le \\frac{\\sqrt{1-m_a}}{m_a} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">RC\\Omega_{max} \\le \\frac{\\sqrt{1-m_a}}{m_a}</span><script type=\"math/tex\">RC\\Omega_{max} \\le \\frac{\\sqrt{1-m_a}}{m_a} \u8d1f\u5cf0\u5207\u5272\u5931\u771f \u4e0d\u4ea7\u751f\u6761\u4ef6\uff1a U_{im}(1-m_a) \\ge U_{im} \\frac{R}{R_L + R} U_{im}(1-m_a) \\ge U_{im} \\frac{R}{R_L + R} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">U_{im}(1-m_a) \\ge U_{im} \\frac{R}{R_L + R}</span><script type=\"math/tex\">U_{im}(1-m_a) \\ge U_{im} \\frac{R}{R_L + R} \u4ea4\u76f4\u6d41\u7535\u963b\u5dee\u503c\u8d8a\u5c0f\uff0c\u8d8a\u4e0d\u5bb9\u6613\u4ea7\u751f","title":"\u4e8c\u6781\u7ba1\u5927\u4fe1\u53f7\u68c0\u6ce2\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_46","text":"\u5c0f\u4e8e0.2V\uff0c\u5728\u5927\u4fe1\u53f7\u68c0\u6ce2\u57fa\u7840\u4e0a\u52a0\u4ee5\u504f\u7f6e\uff0c\u4f7f\u4e8c\u6781\u7ba1\u9759\u6001\u5de5\u4f5c\u70b9\u4f4d\u4e8e\u66f2\u7ebf\u7684\u5f2f\u66f2\u90e8\u5206","title":"\u5c0f\u4fe1\u53f7\u68c0\u6ce2"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_47","text":"\u7528\u672c\u5730\u8f7d\u9891\u4e58\u4ee5\u8c03\u5e45\u6ce2\uff0c\u518d\u901a\u8fc7\u4f4e\u901a\u6ee4\u6ce2 \u9891\u7387\uff0c\u76f8\u4f4d\u4e0d\u540c\u6b65\u65f6\uff0c\u4f1a\u5931\u771f","title":"\u540c\u6b65\u68c0\u6ce2\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_48","text":"\u5206\u7c7b\uff1a 1. \u76f8\u4f4d\u8c03\u5236\uff0c\u77ac\u65f6\u76f8\u4f4d\u968f u_\\omega (t) u_\\omega (t) \u7ebf\u6027\u53d8\u5316 2. \u9891\u7387\u8c03\u5236 \u4e00\u822c\u6570\u5b66\u8868\u8fbe\u5f0f\uff1a 1. \u8c03\u76f8\u6ce2\uff1a U_m cos(\\omega_c t+K_p u_\\Omega(t)) U_m cos(\\omega_c t+K_p u_\\Omega(t)) <span class=\"arithmatex\"><span class=\"MathJax_Preview\">U_m cos(\\omega_c t+K_p u_\\Omega(t))</span><script type=\"math/tex\">U_m cos(\\omega_c t+K_p u_\\Omega(t)) 2. \u8c03\u9891\u6ce2\uff1a U_m cos(\\omega_c t+k_f\\int_0^t u_\\Omega(t)) U_m cos(\\omega_c t+k_f\\int_0^t u_\\Omega(t)) <span class=\"arithmatex\"><span class=\"MathJax_Preview\">U_m cos(\\omega_c t+k_f\\int_0^t u_\\Omega(t))</span><script type=\"math/tex\">U_m cos(\\omega_c t+k_f\\int_0^t u_\\Omega(t)) \u8c03\u89d2\u6ce2\u7684\u8c03\u5236\u6307\u6570\u5b9a\u4e49\u4e3a\u6700\u5927\u76f8\u79fb\uff0c m_p = K_p U_{\\Omega m} \\qquad m_f = \\frac{K_f U_{\\Omega m}}{\\Omega} m_p = K_p U_{\\Omega m} \\qquad m_f = \\frac{K_f U_{\\Omega m}}{\\Omega} \u800c\u6700\u5927\u9891\u79fb\u7b49\u4e8e\u8c03\u5236\u6307\u6570\u4e0e\u8c03\u5236\u4fe1\u53f7\u9891\u7387\u7684\u4e58\u79ef \u4e09\u4e2a\u9891\u7387\u53c2\u6570 \u9891\u8c31\uff1a\u7531\u8f7d\u9891\u4e3a\u4e2d\u5fc3\uff0c\u65e0\u6570\u8fb9\u9891\u7ec4\u6210 \u4e2d\u7b49\u8d28\u91cf\u901a\u4fe1\u7cfb\u7edf\uff0c B_{CR} = 2(m+1)F B_{CR} = 2(m+1)F \uff0cm\u4e3a\u5c0f\u6570\u65f6\uff0c7\u820d8\u5165 \u8c03\u9891\u6ce2 B_{CR} B_{CR} \u57fa\u672c\u4e0d\u53d8\uff0c\u8c03\u76f8\u6ce2 B_{CR} B_{CR} \u53d8\u5316\u5927","title":"\u89d2\u5ea6\u8c03\u5236\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_49","text":"\u76f4\u63a5\u8c03\u5236\uff1a\u7528\u8c03\u5236\u4fe1\u53f7\u63a7\u5236\u51b3\u5b9a\u632f\u8361\u5668\u7684\u9891\u7387\u7684\u53ef\u53d8\u7535\u6297\u7684\u503c \u95f4\u63a5\u8c03\u5236\uff1a\u5148\u901a\u8fc7\u79ef\u5206\u7535\u8def\uff0c\u518d\u901a\u8fc7\u76f8\u4f4d\u8c03\u5236","title":"\u8c03\u9891\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_50","text":"\u53ea\u80fd\u52a0\u53cd\u5411\u7535\u538b\uff0c\u548cPN\u7ed3\u7ed3\u7535\u5bb9\u6709\u4e00\u5b9a\u5173\u7cfb C_j = \\frac{C_{j0}}{(1+\\frac{u_r}{U_D})^\\gamma} = \\frac{C_{jQ}}{(1+m cos(\\Omega t))^\\gamma} C_j = \\frac{C_{j0}}{(1+\\frac{u_r}{U_D})^\\gamma} = \\frac{C_{jQ}}{(1+m cos(\\Omega t))^\\gamma} \u5f0f\u4e2d m = U_{\\Omega m}/(V_Q+U_D) m = U_{\\Omega m}/(V_Q+U_D) \uff0c\u4e3a\u7535\u5bb9\u8c03\u5236\u5ea6 \u4f5c\u4e3a\u56de\u8def\u603b\u7535\u5bb9\u65f6\uff0c\u5b9e\u73b0\u7ebf\u6027\u8c03\u9891\u7684\u6761\u4ef6\u662f \\gamma = 2 \\gamma = 2 \uff0c\u6b64\u65f6 \\omega_c = \\omega_c + \\frac{\\omega_c}{U_D + V_Q} u_{\\Omega m}(t) \\omega_c = \\omega_c + \\frac{\\omega_c}{U_D + V_Q} u_{\\Omega m}(t) \u82e5 \\gamma \\neq 2 \\gamma \\neq 2 \uff0c\u5219\u4f1a\u4ea7\u751f\u4e2d\u5fc3\u9891\u7387\u504f\u79fb\u548c\u7ebf\u6027\u5931\u771f \u7279\u70b9\uff1a\u7075\u654f\u5ea6\u9ad8\uff0c\u9891\u504f\u5927\uff0c\u9891\u7387\u7a33\u5b9a\u5ea6\u4e0d\u597d","title":"\u53d8\u5bb9\u4e8c\u6781\u7ba1\u76f4\u63a5\u8c03\u9891\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_51","text":"","title":"\u6676\u4f53\u632f\u8361\u5668\u76f4\u63a5\u8c03\u9891"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_52","text":"","title":"\u8c03\u76f8\u7535\u8def"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_53","text":"\u53d8\u5bb9\u4e8c\u6781\u7ba1\u8c03\u76f8\u7f51\u7edc\uff1a\u5b9e\u8d28\u548c\u76f4\u63a5\u8c03\u9891\u4e00\u6837\uff0c\u90fd\u662f\u79fb\u52a8\u4e86\u4e2d\u5fc3\u9891\u7387\uff0c\u53ea\u4e0d\u8fc7\u5206\u6790\u65f6\u4f7f\u7528\u4e86\u8c10\u632f\u56de\u8def\u7684\u76f8\u9891\u7279\u6027\u66f2\u7ebf \u82e5\u8c03\u5236\u4fe1\u53f7\u7684\u9694\u76f4\u7535\u5bb9\u9009\u5927\u4e86\uff0c\u5c31\u53d8\u6210\u79ef\u5206\u7535\u8def\uff0c\u53ef\u5b9e\u73b0\u95f4\u63a5\u8c03\u9891","title":"\u53ef\u53d8\u79fb\u76f8\u6cd5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_54","text":"","title":"\u53ef\u53d8\u65f6\u5ef6\u6cd5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_55","text":"","title":"\u77e2\u91cf\u5408\u6210\u6cd5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_56","text":"\u6280\u672f\u6307\u6807\uff1a 1. \u9274\u76f8\u5668\uff1a\u9274\u76f8\u7279\u6027\u66f2\u7ebf\uff0c\u9274\u76f8\u8de8\u5bfc\uff0c\u9274\u76f8\u7ebf\u6027\u8303\u56f4\uff0c\u975e\u7ebf\u6027\u5931\u771f 2. \u9274\u9891\u5668\uff1a\u540c\u7406","title":"\u9274\u9891\u5668\u548c\u9274\u76f8\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_57","text":"\u5206\u7c7b\uff1a\u6a21\u62df\u7535\u8def\u578b\uff08\u4e58\u79ef\u578b\uff09\uff0c\u6570\u5b57\u7535\u8def\u578b\uff08\u95e8\u7535\u8def\uff09","title":"\u9274\u76f8\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_58","text":"\u6a21\u62df\u4e58\u6cd5\u5668\u76f8\u4e58\uff0c\u518d\u7531\u4f4e\u901a\u53d6\u51fa u_1 u_1 \u9700\u8981\u89e3\u8c03\u4fe1\u53f7\uff0c u_2 u_2 \u8981\u4e0e u_1 u_1 \u6b63\u4ea4\uff0c\u5206\u4e09\u79cd\u60c5\u51b5\u8ba8\u8bba\uff1a\u4e24\u4e2a\u90fd\u662f\u5c0f\u4fe1\u53f7\u6216\u5927\u4fe1\u53f7\u4ee5\u53ca u_1 u_1 \u5c0f\u4fe1\u53f7\uff0c u_2 u_2 \u5927\u4fe1\u53f7 \u9274\u76f8\u7279\u6027\uff1a\u6b63\u5f26\u5f62 \u8303\u56f4 \\phi_{emax} = \\pm \\frac{\\pi}{6} rad \\phi_{emax} = \\pm \\frac{\\pi}{6} rad \u4e09\u89d2\u6ce2\u5f62 \\phi_{emax} = \\pm \\frac{\\pi}{2} rad \\phi_{emax} = \\pm \\frac{\\pi}{2} rad \u6b63\u5f26\u5f62 \\phi_{emax} = \\pm \\frac{\\pi}{6} rad \\phi_{emax} = \\pm \\frac{\\pi}{6} rad","title":"\u4e58\u79ef\u578b"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_59","text":"\u5206\u7c7b\uff1a\u8c03\u9891-\u8c03\u5e45\u8c03\u9891\u53d8\u6362\u578b\uff0c\u76f8\u79fb\u4e58\u6cd5\u9274\u9891\u578b\uff0c\u8109\u51b2\u5747\u503c\u578b","title":"\u9274\u9891\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#-","text":"\u53cc\u5931\u8c10\u56de\u8def\u9274\u9891\u5668 \u5229\u7528\u4e24\u4e2a\u5931\u8c10\u56de\u8def\u548c\u4e24\u4e2a\u68c0\u6ce2\u5668 \u76f8\u4f4d\u9274\u9891\u5668 \u53cc\u8026\u5408\u56de\u8def\u548c\u4e24\u4e2a\u68c0\u6ce2\u5668 \u6ce8\u610f\uff1a\u521d\u7ea7\u56de\u8def\u8c10\u632f\u9891\u7387\u4e0e\u5bf9\u79f0\u6027\u6709\u5173\uff0c\u4e8c\u7ea7\u56de\u8def\u548c\u4e2d\u5fc3\u9891\u7387\u6709\u5173 \u9274\u9891\u7279\u6027\u66f2\u7ebf\u7531\u8026\u5408\u56e0\u6570 \\eta = kQ_L \\eta = kQ_L \u51b3\u5b9a\uff0c \\eta \\eta \u4e00\u5b9a\u65f6\uff0c\u5bbd\u5ea6\u7531\u8026\u5408\u7cfb\u6570 k = \\frac{M}{\\sqrt{L_1 L_2}} k = \\frac{M}{\\sqrt{L_1 L_2}} \u51b3\u5b9a \u6bd4\u4f8b\u9274\u9891\u5668 \u5728\u76f8\u4f4d\u9274\u9891\u5668\u5373\u57fa\u7840\u4e0a\u66f4\u6539\uff0c\u727a\u7272\u8f93\u51fa\u7535\u538b\u7684\u5e45\u5ea6\u6765\u6362\u53d6\u6291\u5236\u5bc4\u751f\u8c03\u5e45\u7684\u80fd\u529b\uff0c\u539f\u7406\u662f\u5e45\u5ea6\u53d8\u5316\u65f6\uff0c |U_{D1}| ,|U_{D2}| |U_{D1}| ,|U_{D2}| \u6bd4\u503c\u4e0d\u53d8\uff0c U_o U_o \u4e0d\u53d8","title":"\u8c03\u9891-\u8c03\u5e45\u8c03\u9891\u53d8\u6362\u578b"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_60","text":"","title":"\u6df7\u9891\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_61","text":"\u4fe1\u53f7\u4e0e\u672c\u632f\u9891\u7387\u5e72\u6270\uff08\u5e72\u6270\u54e8\u58f0\uff09 pf_L - qf_s = f_I \\pm F \\qquad qf_s - pf_L = f_I \\pm F pf_L - qf_s = f_I \\pm F \\qquad qf_s - pf_L = f_I \\pm F <span class=\"arithmatex\"><span class=\"MathJax_Preview\">pf_L - qf_s = f_I \\pm F \\qquad qf_s - pf_L = f_I \\pm F</span><script type=\"math/tex\">pf_L - qf_s = f_I \\pm F \\qquad qf_s - pf_L = f_I \\pm F \u5916\u6765\u5e72\u6270\u548c\u672c\u632f\u9891\u7387\uff08\u526f\u6ce2\u9053\u5e72\u6270\uff09 f_n = \\frac{p}{q}f_L \\pm \\frac{f_I}{q} f_n = \\frac{p}{q}f_L \\pm \\frac{f_I}{q} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">f_n = \\frac{p}{q}f_L \\pm \\frac{f_I}{q}</span><script type=\"math/tex\">f_n = \\frac{p}{q}f_L \\pm \\frac{f_I}{q} q = 1 ,p = 0 q = 1 ,p = 0 \u65f6\u79f0\u4e3a\u4e2d\u9891\u5e72\u6270 q = 1 ,p = 1 q = 1 ,p = 1 \u65f6\u79f0\u4e3a\u955c\u50cf\u9891\u7387\u5e72\u6270\uff0c\u5e38\u7528 f_n = 2f_I + f_s f_n = 2f_I + f_s \u8ba1\u7b97","title":"\u5e72\u6270\u4e0e\u5931\u771f"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/High%20Frency/#_62","text":"\u7ec4\u6210\uff1a\u9274\u76f8\u5668\uff0c\u73af\u8def\u6ee4\u6ce2\u5668\uff0c\u538b\u63a7\u632f\u8361\u5668 p\\theta_e + K_dK_p(p)K_v sin(\\theta_e) = p\\theta_1 p\\theta_e + K_dK_p(p)K_v sin(\\theta_e) = p\\theta_1","title":"\u53cd\u9988\u63a7\u5236\u7535\u8def\u4e0e\u9891\u7387\u5408\u6210"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/","text":"\u4fe1\u606f\u8bba \u7eea\u8bba \u4fe1\u606f\u7684\u57fa\u672c\u6982\u5ff5 \u4e09\u5927\u8981\u7d20\uff1a\u7269\u8d28\uff0c\u80fd\u91cf\uff0c\u4fe1\u606f \u901a\u4fe1\u7684\u57fa\u672c\u95ee\u9898\uff1a\u5728\u4e00\u70b9\u7cbe\u786e\u7684\u6216\u8fd1\u4f3c\u5730\u6062\u590d\u53e6\u4e00\u70b9\u7684\u4fe1\u606f \u901a\u4fe1\u7cfb\u7edf\u4e09\u9879\u6307\u6807\uff1a 1. \u6709\u6548\u6027\uff1a\u5feb 2. \u53ef\u9760\u6027\uff1a\u51c6\uff0c\u8bef\u7801\u7387\u4f4e 3. \u5b89\u5168\u6027 \u4e09\u9879\u6307\u6807\u5bf9\u5e94\u7684\u6280\u672f\uff1a 1. \u6570\u636e\u538b\u7f29 2. \u6570\u636e\u7ea0\u9519 3. \u6570\u636e\u52a0\u5bc6 \u7814\u7a76\u5185\u5bb9 \u901a\u4fe1\u7cfb\u7edf\u662f\u4ece\u7a7a\u95f4\u7684\u4e00\u70b9\u5230\u53e6\u4e00\u70b9\u4f20\u9001\u4fe1\u606f\u7684\uff0c \u800c\u5b58\u50a8\u7cfb\u7edf\u662f\u4ece\u65f6\u95f4\u7684\u4e00\u70b9\u5230\u53e6\u4e00\u70b9\u4f20\u9001\u4fe1\u606f\u7684 \u6a21\u578b\uff1a 1. \u4fe1\u6e90 1. \u79bb\u6563\u4fe1\u6e90 2. \u8fde\u7eed\u4fe1\u6e90 1. \u79bb\u6563\u65f6\u95f4\u8fde\u7eed\u4fe1\u6e90 2. \u6a21\u62df\u4fe1\u6e90 2. \u7f16\u7801\u5668 1. \u4fe1\u6e90\u7f16\u7801\u5668\uff1a\u63d0\u9ad8\u4f20\u8f93\u6709\u6548\u6027 2. \u4fe1\u9053\u7f16\u7801\u5668\uff1a\u63d0\u9ad8\u4f20\u8f93\u53ef\u9760\u6027 3. \u8c03\u5236\u5668\uff1a\u5c06\u7b26\u53f7\u53d8\u6210\u9002\u5408\u4fe1\u9053\u4f20\u8f93\u7684\u4fe1\u53f7 3. \u4fe1\u9053 1. \u65e0\u566a\u58f0 2. \u6709\u566a\u58f0 1. \u52a0\u6027 2. \u4e58\u6027 3. \u6309\u79bb\u6563\u8fd8\u662f\u8fde\u7eed\uff0c\u6309\u6709\u8bb0\u5fc6\u8fd8\u662f\u65e0\u8bb0\u5fc6 4. \u8bd1\u7801\u5668\uff1a\u89e3\u8c03\u5668\uff0c\u4fe1\u9053\u8bd1\u7801\u5668\uff0c\u4fe1\u6e90\u8bd1\u7801\u5668 5. \u4fe1\u5bbf \u6027\u80fd\u8bc4\u4ef7\uff1a 1. \u6709\u6548\u6027\uff1a\u9891\u8c31\u5229\u7528\u7387 2. \u53ef\u9760\u6027\uff1a\u4f20\u8f93\u9519\u8bef\u7387 3. \u5b89\u5168\u6027\uff1a\u52a0\u5bc6\u5f3a\u5ea6 shannong\u4fe1\u606f\u8bba \u4e00\u4e2a\u6982\u5ff5\uff0c\u4e09\u4e2a\u5b9a\u7406 \u4fe1\u606f\u71b5\u7684\u6982\u5ff5 \u5b9a\u7406\uff1a 1. \u65e0\u5931\u771f\u4fe1\u6e90\u7f16\u7801\u5b9a\u7406\uff1a R \\ge H R \\ge H 2. \u6709\u566a\u4fe1\u9053\u7f16\u7801\u5b9a\u7406\uff1a R \\le C R \\le C 3. \u9650\u5931\u771f\u4fe1\u6e90\u7f16\u7801\u5b9a\u7406\uff1a R \\ge R(D) \\Leftrightarrow R \\ge R(D) \\Leftrightarrow \u5b58\u5728\u5e73\u5747\u5931\u771f \\le D \\le D \u79bb\u6563\u4fe1\u606f\u7684\u5ea6\u91cf \u81ea\u4fe1\u606f\u548c\u4e92\u4fe1\u606f \u81ea\u4fe1\u606f I(x) = -log(p(x)) I(x) = -log(p(x)) \u610f\u4e49\uff1a\u4e8b\u4ef6\u53d1\u751f\u524d\uff1a\u4e8b\u4ef6\u53d1\u751f\u7684\u4e0d\u786e\u5b9a\u6027\uff0c\u4e8b\u4ef6\u53d1\u751f\u540e\uff1a\u4e8b\u4ef6\u5305\u542b\u7684\u4fe1\u606f\u91cf I(xy) = -log(p(xy)) I(xy) = -log(p(xy)) \u5728 y = b_i y = b_i \u7ed9\u5b9a\u4e0b\uff1a I(x|y) = -log(p(x|y)) = I(xy) - I(y) I(x|y) = -log(p(x|y)) = I(xy) - I(y) \u4e92\u4fe1\u606f I(x;y) = log\\frac{p(x|y)}{p(x)} = I(x) - I(x|y) = I(y;x) I(x;y) = log\\frac{p(x|y)}{p(x)} = I(x) - I(x|y) = I(y;x) \u8868\u793a\u5f53 y y \u53d1\u751f\u540e\uff0c x x \u4e0d\u786e\u5b9a\u6027\u7684\u53d8\u5316\uff0c\u53cd\u6620\u4e24\u4e2a\u968f\u673a\u4e8b\u4ef6 x,y x,y \u4e4b\u95f4\u7684\u7edf\u8ba1\u5173\u8054\u7a0b\u5ea6 I(x;y|z) = log(\\frac{p(x|yz)}{p(x|z)}) I(x;y|z) = log(\\frac{p(x|yz)}{p(x|z)}) \u4fe1\u606f\u71b5 H(X) = E[I(x)] = -\\sum_x p(x)logp(x) H(X) = E[I(x)] = -\\sum_x p(x)logp(x) \u4fe1\u6e90\u8f93\u51fa\u524d\uff1a\u4fe1\u6e90\u7684\u7684\u5e73\u5747\u4e0d\u7a33\u5b9a\u6027\uff0c\u8f93\u51fa\u540e\uff1a\u4e00\u4e2a\u4fe1\u6e90\u7b26\u53f7\u6240\u63d0\u4f9b\u7684\u5e73\u5747\u4fe1\u606f\u91cf \u6709\u6839\u6982\u7387\u6811\uff1a H(X) = \\sum_i q(u_i)H(u_i) H(X) = \\sum_i q(u_i)H(u_i) \u6761\u4ef6\u71b5\uff1a H(Y|X) = -\\sum_x p(x)H(Y|x) H(Y|X) = -\\sum_x p(x)H(Y|x) \u5f0f\u4e2d H(Y|x) H(Y|x) \u4e3a\u53d6\u67d0\u4e00\u503c\u662f Y Y \u7684\u71b5\uff0c H(Y|x) = -\\sum_y p(y|x)log p(y|x) H(Y|x) = -\\sum_y p(y|x)log p(y|x) \u8054\u5408\u71b5\uff1a H(XY) = -\\sum_x \\sum_y p(xy)log p(xy) H(XY) = -\\sum_x \\sum_y p(xy)log p(xy) \u6563\u5ea6\uff1a D(P//Q) = \\sum_x P(x)log \\frac{P(x)}{Q(x)} \\ge 0 D(P//Q) = \\sum_x P(x)log \\frac{P(x)}{Q(x)} \\ge 0 \u71b5\u7684\u57fa\u672c\u6027\u8d28\uff1a 1. \u5bf9\u79f0\uff0c\u975e\u8d1f\uff0c\u6269\u5c55\uff0c\u53ef\u52a0 2. \u6781\u503c\u6027\uff08\u79bb\u6563\u6700\u5927\u71b5\u5b9a\u7406\uff09\uff1a H(X) \\le log n H(X) \\le log n \uff0c\u6563\u5ea6\u5b9a\u7406\u53ef\u8bc1 3. \u4e0a\u51f8\u6027\uff0c\u786e\u5b9a\u6027 \u5404\u7c7b\u71b5\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a H(Y|X) \\le H(Y) H(Y|X) \\le H(Y) H(X_1 X_2 \\cdots X_N) \\le H(X_1)H(X_2)\\cdots H(X_N) H(X_1 X_2 \\cdots X_N) \\le H(X_1)H(X_2)\\cdots H(X_N) \u5e73\u5747\u4e92\u4fe1\u606f \u96c6\u5408\u4e0e\u4e8b\u4ef6\uff1a I(x;Y) = \\sum_y p(y|x) log \\frac{p(y|x)}{p(y)} I(x;Y) = \\sum_y p(y|x) log \\frac{p(y|x)}{p(y)} \u96c6\u5408\u4e8e\u96c6\u5408\uff1a I(X;Y) = \\sum_{x,y} p(xy) I(x;y) I(X;Y) = \\sum_{x,y} p(xy) I(x;y) \u5e73\u5747\u4e92\u4fe1\u606f\u4e0e\u71b5\u7684\u5173\u7cfb\uff1a I(X;Y) = H(X) - H(X|Y) = H(X)+H(Y)-H(XY) I(X;Y) = H(X) - H(X|Y) = H(X)+H(Y)-H(XY) \u6027\u8d28\uff1a 1. \u975e\u8d1f\uff0c\u5bf9\u79f0 2. \u6781\u503c\uff1a I(X;Y) \\le H(X) and H(Y) I(X;Y) \\le H(X) and H(Y) 3. \u4e3a p(x) p(x) \u7684\u4e0a\u51f8\u51fd\u6570\uff0c p(y|x) p(y|x) \u7684\u4e0b\u51f8\u51fd\u6570 \u79bb\u6563\u4fe1\u6e90 \u5206\u7c7b\u4e0e\u6a21\u578b \u5206\u7c7b\uff1a\u6309\u7b26\u53f7\u53d6\u503c\uff0c\u6309\u7b26\u53f7\u95f4\u4f9d\u8d56\u5173\u7cfb\uff0c\u72b6\u6001\u96c6\u5408\u662f\u5426\u6709\u9650\uff0c\u662f\u5426\u5e73\u7a33 \u79bb\u6563\u65e0\u8bb0\u5fc6\u4fe1\u6e90\u6570\u5b66\u6a21\u578b\uff1a \\begin{bmatrix} X \\\\ P \\\\ \\end{bmatrix} = \\begin{bmatrix} a_1 & a_2 & \\dotsb & a_n \\\\ p(a_1) & p(a_2) & \\dotsb & p(a_n)\\\\ \\end{bmatrix} \\begin{bmatrix} X \\\\ P \\\\ \\end{bmatrix} = \\begin{bmatrix} a_1 & a_2 & \\dotsb & a_n \\\\ p(a_1) & p(a_2) & \\dotsb & p(a_n)\\\\ \\end{bmatrix} \u591a\u7ef4\uff0cN\u6b21\u6269\u5c55\u6e90 \u79bb\u6563\u6709\u8bb0\u5fc6\u4fe1\u6e90\uff1a \u9a6c\u6c0f\u4fe1\u6e90 \u79bb\u6563\u65e0\u8bb0\u5fc6\u4fe1\u6e90\u7684\u71b5 \u5355\u7b26\u53f7\u6027\u8d28\uff1a 1. \u4e0a\u51f8\u51fd\u6570\uff1a p = 0.5 p = 0.5 \u65f6\uff0c\u6700\u5927 2. \u5177\u6709\u71b5\u7684\u4e00\u5207\u6027\u8d28 N\u6b21\u6269\u5c55\u71b5\uff1a H(X^N) = NX(X) H(X^N) = NX(X) \u79bb\u6563\u5e73\u7a33\u4fe1\u6e90\u7684\u71b5 \u7edf\u8ba1\u7279\u6027\uff0c\u6761\u4ef6\u6982\u7387\uff0c\u4fe1\u606f\u71b5\uff0c\u6761\u4ef6\u71b5\u4e0e\u65f6\u95f4\u7684\u63a8\u79fb\u65e0\u5173 \u79bb\u6563\u6709\u8bb0\u5fc6\u5e73\u7a33\u4fe1\u6e90\uff1a H(X^N) \\le NH(X_1) H(X^N) \\le NH(X_1) \u5e73\u5747\u7b26\u53f7\u71b5\uff1a H_N(X) = \\frac{1}{N} H(X^N) H_N(X) = \\frac{1}{N} H(X^N) <span class=\"arithmatex\"><span class=\"MathJax_Preview\">H_N(X) = \\frac{1}{N} H(X^N)</span><script type=\"math/tex\">H_N(X) = \\frac{1}{N} H(X^N) \u6781\u9650\u7b26\u53f7\u71b5\uff1a H_\\infty = \\lim_{N \\rightarrow \\infty}H_N(X) H_\\infty = \\lim_{N \\rightarrow \\infty}H_N(X) <span class=\"arithmatex\"><span class=\"MathJax_Preview\">H_\\infty = \\lim_{N \\rightarrow \\infty}H_N(X)</span><script type=\"math/tex\">H_\\infty = \\lim_{N \\rightarrow \\infty}H_N(X) \u6027\u8d28\uff1a 1. H(X_N|X_1X_2\\cdots X_{N-1}) \\ge H(X_{N+1}|X_1X_2\\cdots X_{N}) H(X_N|X_1X_2\\cdots X_{N-1}) \\ge H(X_{N+1}|X_1X_2\\cdots X_{N}) 2. H_N(X) \\ge H(X_N|X_1X_2\\cdots X_{N-1}) H_N(X) \\ge H(X_N|X_1X_2\\cdots X_{N-1}) 3. H_N(X) \\ge H_{N+1}(X) H_N(X) \\ge H_{N+1}(X) 4. H_\\infty(X) = H(X_N|X_1X_2\\cdots X_{N-1}) H_\\infty(X) = H(X_N|X_1X_2\\cdots X_{N-1}) \u6709\u9650\u72b6\u6001\u9a6c\u5c14\u53ef\u592b\u94fe \u65f6\u95f4\u79bb\u6563\uff0c\u72b6\u6001\u79bb\u6563\uff0cn\u9636\u9a6c\u6c0f\u94fe\u53ea\u4e0e\u524dn\u4e2a\u72b6\u6001\u6709\u5173 \u72b6\u6001\u8f6c\u79fb\u6982\u7387\uff1a p(x_n = j|x_m = i) = p_{ij}(m,n) p(x_n = j|x_m = i) = p_{ij}(m,n) \u9f50\u6b21\uff08\u5e73\u7a33\uff09k\u6b65\uff0c\u4e00\u6b65\u65f6\u7701\u7565k\uff1a p_{ij}^{(k)} p_{ij}^{(k)} \u8868\u793a\u65b9\u6cd5\uff1a\u8f6c\u79fb\u6982\u7387\u56fe\uff0c\u7f51\u683c\u56fe\uff0c\u72b6\u6001\u8f6c\u79fb\u56fe kolmogorov-chapman \u65b9\u7a0b\uff1a p^{(k)} = p^{(0)}P^k p^{(k)} = p^{(0)}P^k \u5206\u7c7b\uff1a\u5e38\u8fd4\u6001\uff0c\u8fc7\u6e21\u6001 \u82e5\u5e38\u8fd4\u6001 \\{n:n\\le 1 ,p_{ii}^{n} > 0\\} \\{n:n\\le 1 ,p_{ii}^{n} > 0\\} \u7684\u6700\u5927\u516c\u7ea6\u6570\u4e3a d_i d_i \uff0c d_i = 1 d_i = 1 \u904d\u5386\uff0c d_i > 1 d_i > 1 \u5468\u671f \u540c\u4e00\u7c7b\u6240\u6709\u5468\u671f\u76f8\u7b49 \u9a6c\u6c0f\u94fe\u7684\u5e73\u7a33\u5206\u5e03\uff1a \\pi^T = \\pi^T P \\pi^T = \\pi^T P \\lim_{k \\rightarrow \\infty} P^k = e\\pi^T \\lim_{k \\rightarrow \\infty} P^k = e\\pi^T \u5bf9\u4e8e\u6709\u9650\u72b6\u6001\u7684\u9a6c\u6c0f\u94fe\uff0c\u5e73\u7a33\u5206\u5e03\u6052\u5b58\u5728\uff0c\u6709\u51e0\u4e2a\u904d\u5386\u5e38\u8fd4\u7c7b\u5c31\u6709\u51e0\u4e2a\u89e3\uff0c\u5bf9\u4e8e\u53ea\u6709\u5468\u671f\u5e38\u8fd4\u7c7b\u7684\u9a6c\u6c0f\u94fe\uff0c\u4e0a\u5f0f\u4e0d\u6536\u655b \u9a6c\u5c14\u53ef\u592b\u4fe1\u6e90 \u5f53\u524d\u65f6\u523b\u8f93\u51fa\u7b26\u53f7\u53ea\u4e0e\u5f53\u524d\u65f6\u523b\u72b6\u6001\u6709\u5173 \u4ea7\u751f\u6a21\u578b \u9a6c\u6c0f\u94feN\u6b21\u6269\u5c55\u6e90\u7684\u8ba1\u7b97 \u5bf9\u4e8em\u9636\u7684\u8d77\u59cb\u72b6\u6001\u5e73\u7a33\u9a6c\u6c0f\u94fe\uff1a H(X_1X_2 \\cdots X_N) = H([\\pi]) + (N-m)[\\pi]^T[h] H(X_1X_2 \\cdots X_N) = H([\\pi]) + (N-m)[\\pi]^T[h] \u5f0f\u4e2d [h] [h] \u4e3a\u8f6c\u79fb\u6982\u7387\u6bcf\u884c\u7684\u71b5 \u82e5\u72b6\u6001\u4e0e\u7b26\u53f7\u4e00\u4e00\u5bf9\u5e94\uff1a H(X)_\\infty = [\\pi]^T[h] H(X)_\\infty = [\\pi]^T[h] \u5426\u5219\uff1a H(X)_\\infty = \\sum_{i=1}^J \\pi_iH(X|s=i) H(X)_\\infty = \\sum_{i=1}^J \\pi_iH(X|s=i) \u5f0f\u4e2d H(X|s=i) = -\\sum_{i=1}^n p_j(a_i)log p_j(a_i) H(X|s=i) = -\\sum_{i=1}^n p_j(a_i)log p_j(a_i) \u4fe1\u6e90\u76f8\u5173\u6027\u4e0e\u5269\u4f59\u5ea6 \u76f8\u5173\u6027\u5373\u4fe1\u6e90\u7b26\u53f7\u95f4\u7684\u4f9d\u8d56\u7a0b\u5ea6 \u4fe1\u6e90\u6548\u7387\uff1a \\eta = \\frac{H_\\infty}{H_0} \\eta = \\frac{H_\\infty}{H_0} \u5269\u4f59\u5ea6\uff1a \\gamma = 1-\\eta \\gamma = 1-\\eta \u5f0f\u4e2d H_0 = logq H_0 = logq \u4e3a\u7b26\u53f7\u72ec\u7acb\u7b49\u6982\u65f6\u7684\u4fe1\u6e90\u71b5 \u8fde\u7eed\u968f\u673a\u53d8\u91cf\u96c6\u5408\u71b5 \u8fde\u7eed\u4fe1\u6e90\u71b5\u4e24\u90e8\u5206\uff1a\u7edd\u5bf9\u71b5\u65e0\u9650\u5927\uff0c\u5dee\u71b5\u4e3a h(X) = -\\int p(x)log p(x) \\mathrm{d} x h(X) = -\\int p(x)log p(x) \\mathrm{d} x \uff0c\u5355\u4f4d\u4e3abit/\u81ea\u7531\u5ea6 \u6761\u4ef6\u71b5\uff1a h(X|Y) = -\\iint p(xy) log p(x|y) \\mathrm{d} x \\mathrm{d} y h(X|Y) = -\\iint p(xy) log p(x|y) \\mathrm{d} x \\mathrm{d} y \u8054\u5408\u71b5\uff1a h(\\boldsymbol{X}^N) = -\\int p(\\boldsymbol{x}) log p(\\boldsymbol{x}) h(\\boldsymbol{X}^N) = -\\int p(\\boldsymbol{x}) log p(\\boldsymbol{x}) \u71b5\u7387\uff08\u7c7b\u4f3c\u79bb\u6563\u4fe1\u6e90\u7684\u6781\u9650\u7b26\u53f7\u71b5\uff09\uff1a h(X) = \\lim_{N\\rightarrow \\infty} \\frac{h(X_1X_2\\cdots X_N)}{N} h(X) = \\lim_{N\\rightarrow \\infty} \\frac{h(X_1X_2\\cdots X_N)}{N} \u82e5 \\boldsymbol{y} = \\boldsymbol{A}\\boldsymbol{x} + \\boldsymbol{\\alpha} \\boldsymbol{y} = \\boldsymbol{A}\\boldsymbol{x} + \\boldsymbol{\\alpha} \uff1a h(\\boldsymbol{Y}^N) = h(\\boldsymbol{X}^N) + log (det|\\boldsymbol{A}|) h(\\boldsymbol{Y}^N) = h(\\boldsymbol{X}^N) + log (det|\\boldsymbol{A}|) \u5e73\u5747\u81ea\u4fe1\u606f\uff1a I([X]_P;[Y]_Q) = \\sum_{i,j} p(u_iv_j)log \\frac{p(u_iv_j)}{p(u_i)q(v_j)} I([X]_P;[Y]_Q) = \\sum_{i,j} p(u_iv_j)log \\frac{p(u_iv_j)}{p(u_i)q(v_j)} \\boldsymbol{U}^N \\boldsymbol{U}^N \uff0c \\boldsymbol{V}^N \\boldsymbol{V}^N \u5206\u522b\u4e3a \\boldsymbol{X}^N \\boldsymbol{X}^N \uff0c \\boldsymbol{Y}^N \\boldsymbol{Y}^N \u7684\u53ef\u9006\u7ebf\u6027\u53d8\u6362\uff0c\u5219 I(\\boldsymbol{U}^N;\\boldsymbol{V}^N) = I(\\boldsymbol{X}^N;\\boldsymbol{Y}^N) I(\\boldsymbol{U}^N;\\boldsymbol{V}^N) = I(\\boldsymbol{X}^N;\\boldsymbol{Y}^N) \u79bb\u6563\u65f6\u95f4\u9ad8\u65af\u4fe1\u6e90\u7684\u71b5 N\u7ef4\u72ec\u7acb\uff1a h(\\boldsymbol{X}) = \\frac{N}{2} log[2\\pi e (\\sigma_1^2 \\sigma_2^2\\cdots \\sigma_n^2)^{\\frac{1}{N}}] h(\\boldsymbol{X}) = \\frac{N}{2} log[2\\pi e (\\sigma_1^2 \\sigma_2^2\\cdots \\sigma_n^2)^{\\frac{1}{N}}] \u6700\u5927\u71b5\u5b9a\u7406 \u9650\u5cf0\u503c\uff1a\u6700\u5927\u4e3a\u5747\u5300\u5206\u5e03\u65f6\uff0c \\sum_{i = 1}^N log(b_i-a_i) \\sum_{i = 1}^N log(b_i-a_i) \u9650\u529f\u7387\uff1a\u6700\u5927\u4e3a\u9ad8\u65af\u5206\u5e03 \u65e0\u5931\u771f\u4fe1\u6e90\u7f16\u7801 \u4fe1\u6e90\u7f16\u7801\uff1a\u5c06\u4fe1\u6e90\u7b26\u53f7\u5e8f\u5217\u6309\u4e00\u5b9a\u7684\u6570\u5b66\u89c4\u5f8b\u6620\u5c04\u6210\u7531\u7801\u7b26\u53f7\u7ec4\u6210\u7684\u7801\u5e8f\u5217\u7684\u8fc7\u7a0b \u76ee\u7684\uff1a\u63d0\u9ad8\u4f20\u8f93\u6709\u6548\u6027 \u5206\u7c7b\uff1a 1. \u6982\u7387\u5339\u914d\u7f16\u7801\uff0c\u6309\u4fe1\u6e90\u5e8f\u5217\u548c\u7f16\u7801\u5668\u8f93\u51fa\u7684\u5173\u7cfb 1. \u5206\u7ec4\u7801\uff0c\u53d8/\u5b9a\u957f\uff0c\u5947\u5f02/\u975e\u5947\u5f02\uff0c\u5373\u65f6/\u975e\u5373\u65f6\uff0c\u5f02\u524d\u7f6e\u7801\uff0c\u9017\u53f7\u7801 2. \u975e\u5206\u7ec4\u7801 \u901a\u7528\u7f16\u7801 \u5b9a\u957f\u7801 \u65e0\u5931\u771f\u7f16\u7801\u6761\u4ef6: q^N \\le r^l q^N \\le r^l \u4fe1\u6e90\u5e8f\u5217\u5206\u7ec4\u5b9a\u7406\uff1a |\\frac{1}{N}log p(x) + H(X)| < \\delta |\\frac{1}{N}log p(x) + H(X)| < \\delta N \\ge N_0 = \\frac{\\sigma^2}{\\varepsilon \\delta^2} N \\ge N_0 = \\frac{\\sigma^2}{\\varepsilon \\delta^2} \uff0c\u4e14\u6ee1\u8db3\u4e0a\u5f0f\u7684\u5e8f\u5217\u79f0\u4e3a\u5178\u578b\u5e8f\u5217 \u5178\u578b\u5e8f\u5217\u6982\u7387\uff1a p(x) = 2^{-N(H(X)\\pm \\delta)} p(x) = 2^{-N(H(X)\\pm \\delta)} \u4e2a\u6570\uff1a (1-\\varepsilon)2^{N(H(X)-\\delta)} < N_G < 2^{N(H(X)+\\delta)} (1-\\varepsilon)2^{N(H(X)-\\delta)} < N_G < 2^{N(H(X)+\\delta)} \u6e10\u8fdb\u5747\u5206\u7279\u6027 \u5b9a\u957f\u7801\u4fe1\u6e90\u7f16\u7801\u5b9a\u7406 \u5b9a\u957f\u7801\u4fe1\u6e90\u7f16\u7801\u5b9a\u7406\uff08N\u8db3\u591f\u5927\u65f6\uff0c\u53ea\u4fdd\u8bc1\u5178\u578b\u5e8f\u5217\u4e0d\u5931\u771f\uff09\uff1a r^l \\ge 2^{N(H(X)+\\delta)} \\Rightarrow r\\frac{l}{N}log r \\ge H(X)+\\delta r^l \\ge 2^{N(H(X)+\\delta)} \\Rightarrow r\\frac{l}{N}log r \\ge H(X)+\\delta \u7f16\u7801\u901f\u7387\uff08\u7f16\u7801\u540e\u4e00\u4e2a\u4fe1\u6e90\u7b26\u53f7\u4ee3\u8868\u7684\u6700\u5927\u4fe1\u606f\u91cf\uff09\uff1a R' = \\frac{l logr}{N} R' = \\frac{l logr}{N} \uff0c\u5355\u4f4d\uff08\u6bd4\u7279/\u4fe1\u6e90\u7b26\u53f7\uff09 \u7f16\u7801\u6548\u7387\uff1a \\eta = \\frac{H(X)}{R'} = \\frac{NH((X))}{l logr} \\eta = \\frac{H(X)}{R'} = \\frac{NH((X))}{l logr} \u4fe1\u606f\u4f20\u8f93\u6548\u7387\uff1a R = \\frac{NH((X))}{l} R = \\frac{NH((X))}{l} \uff0c\u5f53 r = 2 r = 2 \u65f6\uff0c\u4e0e\u7f16\u7801\u6548\u7387\u6570\u503c\u76f8\u7b49\uff0c\u5355\u4f4d\uff08\u6bd4\u7279/\u7801\u7b26\u53f7\uff09 \u65e0\u5931\u771f\u7f16\u7801\uff1a R' > H(X) R' > H(X) \u7f16\u7801\u6548\u7387\u4e0e\u71b5\uff1a N \\ge \\frac{\\sigma^2}{\\varepsilon \\delta^2} N \\ge \\frac{\\sigma^2}{\\varepsilon \\delta^2} \uff0c\u5176\u4e2d \\delta = \\frac{1-\\eta}{\\eta}H(X) \\delta = \\frac{1-\\eta}{\\eta}H(X) \u53d8\u957f\u7801 \u5f02\u524d\u7f6e\u7801\u6027\u8d28\uff08\u7528\u7801\u6811\u63cf\u8ff0\u53ef\u63a8\uff09\uff1a Kraft \u5b9a\u7406 \\sum_{i = 1}^q r^{-l_i} \\le 1 \\sum_{i = 1}^q r^{-l_i} \\le 1 \u4e5f\u662f\u552f\u4e00\u53ef\u8bd1\u7801\u7684\u6761\u4ef6\uff0c\u4efb\u610f\u552f\u4e00\u53ef\u8bd1\u7801\u53ef\u8f6c\u5316\u4e3a\u5f02\u524d\u7f6e\u7801 \u5355\u4fe1\u6e90\u7b26\u53f7\u5e73\u5747\u7801\u957f\uff1a \\bar{l} = \\sum_{k = 1}^q p_k l_k \\bar{l} = \\sum_{k = 1}^q p_k l_k N\u6b21\u6269\u5c55\u6e90\uff1a \\bar{l} = \\frac{1}{N}\\sum_{k = 1}^q p_k l_k \\bar{l} = \\frac{1}{N}\\sum_{k = 1}^q p_k l_k \u53d8\u957f\u7801\u4fe1\u6e90\u7f16\u7801\u5b9a\u7406 \u5355\u4fe1\u6e90\u7b26\u53f7\uff1a \\frac{H(X)}{log r} \\le \\bar{l} < \\frac{H(X)}{log r}+1 \\frac{H(X)}{log r} \\le \\bar{l} < \\frac{H(X)}{log r}+1 shannong\u7b2c\u4e00\u5b9a\u7406\uff1a\u4efb\u610f\u4fe1\u6e90X\u7684\uff0cN\u6b21\u6269\u5c55\u6e90\u7f16\u7801\uff0cN\u8db3\u591f\u5927\u65f6\uff0c \\bar{l} \\bar{l} \u53ef\u4efb\u610f\u63a5\u8fd1 H_r(X) H_r(X) huffman\u7f16\u7801 \u5bf9\u4e8e\u5b58\u5728\u6700\u4f18\u7f16\u7801\u7684\u4fe1\u6e90\uff0c\u5176\u6700\u5c11\u6709\u4e24\u4e2a\u7801\u957f\u76f8\u540c\u7684\u7801\uff0c\u4ec5\u6700\u540e\u4e00\u4f4d\u4e0d\u540c \u5c3d\u91cf\u9ad8\u4f4d\u5408\u5e76\uff0c\u51cf\u5c11\u7801\u957f\u65b9\u5dee\uff0c\u51cf\u5c11\u7801\u957f\u7f13\u51b2\u5668\u5bb9\u91cf r r \u5143huffman\u7f16\u7801\u65f6\uff0c\u4ee5 s = r+(r-1)m s = r+(r-1)m \uff0c\u6765\u589e\u8865\u96f6\u6982\u7387\u7b26\u53f7 \u9a6c\u6c0f\u6e90\u7f16\u7801\uff1a\u4ee5\u8f6c\u79fb\u6982\u7387\u8fdb\u884c\u7f16\u7801\u6bd4\u5e73\u7a33\u5206\u5e03\u7f16\u7801\u6548\u7387\u9ad8 \u7b97\u672f\u7f16\u7801 \u79ef\u7d2f\u6982\u7387\uff1a 1. \u5355\u4fe1\u6e90\u7b26\u53f7\uff1a P(a_k) = \\sum_{i=1}^{k-1} p_i P(a_k) = \\sum_{i=1}^{k-1} p_i 2. \u4fe1\u6e90\u7b26\u53f7\u5e8f\u5217\uff1a\u5bf9\u540c\u957f\u5ea6\u7684\u5e8f\u5217\u5c0f\u7684\u6982\u7387\u6c42\u548c \u7f16\u7801\uff1a L_{j+1} = L_j + \\triangle_j P(j+1) L_{j+1} = L_j + \\triangle_j P(j+1) \u8bd1\u7801\uff1a (c-L_{j-1})/\\triangle_{j-1} ?> P(x=1) (c-L_{j-1})/\\triangle_{j-1} ?> P(x=1) \u79bb\u6563\u4fe1\u9053\u53ca\u5176\u5bb9\u91cf \u6982\u8ff0 \u5206\u7c7b\uff1a 1. \u6309\u8f93\u5165\uff0c\u8f93\u51fa\u53d6\u503c\u5206\u7c7b\uff1a\u79bb\u6563\uff0c\u8fde\u7eed\uff0c\u534a\u79bb\u6563\uff0c\u65f6\u95f4\u79bb\u6563\u8fde\u7eed 2. \u6309\u8f93\u5165\uff0c\u8f93\u51fa\u4e2a\u6570\uff1a\u5355\u7528\u6237\uff0c\u591a\u7528\u6237 3. \u6309\u8f6c\u79fb\u6982\u7387\u6027\u8d28\u5206\uff1a 1. \u65e0\u566a\u58f0\u4fe1\u9053\uff1a\u65e0\u635f\u4fe1\u9053\uff08\u4e00\u5bf9\u591a\uff09\uff0c\u786e\u5b9a\u4fe1\u9053\uff08\u591a\u5bf9\u4e00\uff09\uff0c\u65e0\u6270\u4fe1\u9053\uff08\u4e00\u5bf9\u4e00\uff09 2. \u6709\u566a\u58f0\u4fe1\u9053\uff1a\u65e0\u8bb0\u5fc6\u4fe1\u9053\uff0c\u6709\u8bb0\u5fc6\u4fe1\u9053 \u6309\u4fe1\u9053\u7edf\u8ba1\u7279\u6027\u5206\uff1a\u6052\u53c2\u4fe1\u9053\uff0c\u53d8\u53c2\u4fe1\u9053 \u6309\u4fe1\u9053\u566a\u58f0\u6027\u8d28\u5206\uff1a\u9ad8\u65af\u566a\u58f0\u4fe1\u9053\uff0c\u975e\u9ad8\u65af\u566a\u58f0\u4fe1\u9053 \u6570\u5b66\u6a21\u578b\uff1a\u79bb\u6563\u65e0\u8bb0\u5fc6\u4fe1\u9053\uff0c\u5e73\u7a33\u4fe1\u9053\uff0c\u5355\u7b26\u53f7\u79bb\u6563\u4fe1\u9053 \u4fe1\u9053\u5bb9\u91cf\uff1a 1. \u5355\u7b26\u53f7\u79bb\u6563\u4fe1\u9053\uff1a C = max_{p(x)}I(X;Y) C = max_{p(x)}I(X;Y) 2. \u591a\u7ef4\u77e2\u91cf\u4fe1\u9053\uff1a C = max_{p(x_1x_2\\cdots x_N)}I(X^N;Y^N) C = max_{p(x_1x_2\\cdots x_N)}I(X^N;Y^N) \u5355\u7b26\u53f7\u79bb\u6563\u4fe1\u9053\u53ca\u5176\u5bb9\u91cf \u79bb\u6563\u65e0\u566a\u58f0\u4fe1\u9053\uff1a r r \u4e3a\u8f93\u5165\u7b26\u53f7\u96c6\u7684\u5927\u5c0f\uff0c s s \u4e3a\u8f93\u51fa\u7b26\u53f7\u96c6\u7684\u5927\u5c0f 1. \u65e0\u635f\u4fe1\u9053\uff1a C = log r C = log r 2. \u786e\u5b9a\u4fe1\u9053\uff1a C = log s C = log s 3. \u65e0\u6270\u4fe1\u9053\uff1a C = log r = log s C = log r = log s \u79bb\u6563\u5bf9\u79f0\u4fe1\u9053\uff1a\u8f93\u5165\u7b49\u6982\u7387\u65f6\u8fbe\u5230\u4fe1\u9053\u5bb9\u91cf C = H(Y) - H(p_{11},p_{12},\\cdots ,p_{1s}) C = H(Y) - H(p_{11},p_{12},\\cdots ,p_{1s}) \u5bf9\u4e8e\u5f3a\u5bf9\u79f0\u4fe1\u9053\uff1a C = log s - H(p_{11},p_{12},\\cdots ,p_{1s}) C = log s - H(p_{11},p_{12},\\cdots ,p_{1s}) \u4e00\u822c\u79bb\u6563\u4fe1\u9053\uff1a 1. \u8f6c\u79fb\u6982\u7387\u77e9\u9635\u9006 P^{-1} P^{-1} \u5b58\u5728\u65f6\uff1a C = log_2 \\sum_{k = 1}^r 2^{\\beta_k} C = log_2 \\sum_{k = 1}^r 2^{\\beta_k} \u5f0f\u4e2d \\beta = -P^{-1}h \\beta = -P^{-1}h \u79bb\u6563\u65e0\u8bb0\u5fc6\u4fe1\u9053\uff1a I(a_i;Y) = C \\qquad ,p_i > 0 I(a_i;Y) = C \\qquad ,p_i > 0 I(a_i;Y) \\le C \\qquad ,p_i = 0 I(a_i;Y) \\le C \\qquad ,p_i = 0 \u4fe1\u9053\u7ea7\u8054\uff1a\u4fe1\u606f\u4e22\u5931 \u79bb\u6563\u65e0\u8bb0\u5fc6\u4fe1\u9053\uff1a I(\\boldsymbol{X}^N;\\boldsymbol{Y}^N) \\le \\sum_{i = 1}^N (\\boldsymbol{X_i};\\boldsymbol{Y_i}) I(\\boldsymbol{X}^N;\\boldsymbol{Y}^N) \\le \\sum_{i = 1}^N (\\boldsymbol{X_i};\\boldsymbol{Y_i}) \u65e0\u8bb0\u5fc6\u4fe1\u6e90\uff1a I(\\boldsymbol{X}^N;\\boldsymbol{Y}^N) \\le \\sum_{i = 1}^N (\\boldsymbol{X_i};\\boldsymbol{Y_i}) I(\\boldsymbol{X}^N;\\boldsymbol{Y}^N) \\le \\sum_{i = 1}^N (\\boldsymbol{X_i};\\boldsymbol{Y_i}) 1. \u4fe1\u606f\u8bba\u57fa\u672c\u6982\u5ff5 2. \u4fe1\u6e90\u4e0e\u4fe1\u6e90\u65e0\u5931\u771f\u7f16\u7801 3. \u4fe1\u9053\u53ca\u5176\u5bb9\u91cf","title":"\u4fe1\u606f\u8bba"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_1","text":"","title":"\u4fe1\u606f\u8bba"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_2","text":"","title":"\u7eea\u8bba"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_3","text":"\u4e09\u5927\u8981\u7d20\uff1a\u7269\u8d28\uff0c\u80fd\u91cf\uff0c\u4fe1\u606f \u901a\u4fe1\u7684\u57fa\u672c\u95ee\u9898\uff1a\u5728\u4e00\u70b9\u7cbe\u786e\u7684\u6216\u8fd1\u4f3c\u5730\u6062\u590d\u53e6\u4e00\u70b9\u7684\u4fe1\u606f \u901a\u4fe1\u7cfb\u7edf\u4e09\u9879\u6307\u6807\uff1a 1. \u6709\u6548\u6027\uff1a\u5feb 2. \u53ef\u9760\u6027\uff1a\u51c6\uff0c\u8bef\u7801\u7387\u4f4e 3. \u5b89\u5168\u6027 \u4e09\u9879\u6307\u6807\u5bf9\u5e94\u7684\u6280\u672f\uff1a 1. \u6570\u636e\u538b\u7f29 2. \u6570\u636e\u7ea0\u9519 3. \u6570\u636e\u52a0\u5bc6","title":"\u4fe1\u606f\u7684\u57fa\u672c\u6982\u5ff5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_4","text":"\u901a\u4fe1\u7cfb\u7edf\u662f\u4ece\u7a7a\u95f4\u7684\u4e00\u70b9\u5230\u53e6\u4e00\u70b9\u4f20\u9001\u4fe1\u606f\u7684\uff0c \u800c\u5b58\u50a8\u7cfb\u7edf\u662f\u4ece\u65f6\u95f4\u7684\u4e00\u70b9\u5230\u53e6\u4e00\u70b9\u4f20\u9001\u4fe1\u606f\u7684 \u6a21\u578b\uff1a 1. \u4fe1\u6e90 1. \u79bb\u6563\u4fe1\u6e90 2. \u8fde\u7eed\u4fe1\u6e90 1. \u79bb\u6563\u65f6\u95f4\u8fde\u7eed\u4fe1\u6e90 2. \u6a21\u62df\u4fe1\u6e90 2. \u7f16\u7801\u5668 1. \u4fe1\u6e90\u7f16\u7801\u5668\uff1a\u63d0\u9ad8\u4f20\u8f93\u6709\u6548\u6027 2. \u4fe1\u9053\u7f16\u7801\u5668\uff1a\u63d0\u9ad8\u4f20\u8f93\u53ef\u9760\u6027 3. \u8c03\u5236\u5668\uff1a\u5c06\u7b26\u53f7\u53d8\u6210\u9002\u5408\u4fe1\u9053\u4f20\u8f93\u7684\u4fe1\u53f7 3. \u4fe1\u9053 1. \u65e0\u566a\u58f0 2. \u6709\u566a\u58f0 1. \u52a0\u6027 2. \u4e58\u6027 3. \u6309\u79bb\u6563\u8fd8\u662f\u8fde\u7eed\uff0c\u6309\u6709\u8bb0\u5fc6\u8fd8\u662f\u65e0\u8bb0\u5fc6 4. \u8bd1\u7801\u5668\uff1a\u89e3\u8c03\u5668\uff0c\u4fe1\u9053\u8bd1\u7801\u5668\uff0c\u4fe1\u6e90\u8bd1\u7801\u5668 5. \u4fe1\u5bbf \u6027\u80fd\u8bc4\u4ef7\uff1a 1. \u6709\u6548\u6027\uff1a\u9891\u8c31\u5229\u7528\u7387 2. \u53ef\u9760\u6027\uff1a\u4f20\u8f93\u9519\u8bef\u7387 3. \u5b89\u5168\u6027\uff1a\u52a0\u5bc6\u5f3a\u5ea6","title":"\u7814\u7a76\u5185\u5bb9"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#shannong","text":"\u4e00\u4e2a\u6982\u5ff5\uff0c\u4e09\u4e2a\u5b9a\u7406 \u4fe1\u606f\u71b5\u7684\u6982\u5ff5 \u5b9a\u7406\uff1a 1. \u65e0\u5931\u771f\u4fe1\u6e90\u7f16\u7801\u5b9a\u7406\uff1a R \\ge H R \\ge H 2. \u6709\u566a\u4fe1\u9053\u7f16\u7801\u5b9a\u7406\uff1a R \\le C R \\le C 3. \u9650\u5931\u771f\u4fe1\u6e90\u7f16\u7801\u5b9a\u7406\uff1a R \\ge R(D) \\Leftrightarrow R \\ge R(D) \\Leftrightarrow \u5b58\u5728\u5e73\u5747\u5931\u771f \\le D \\le D","title":"shannong\u4fe1\u606f\u8bba"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_5","text":"","title":"\u79bb\u6563\u4fe1\u606f\u7684\u5ea6\u91cf"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_6","text":"","title":"\u81ea\u4fe1\u606f\u548c\u4e92\u4fe1\u606f"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_7","text":"I(x) = -log(p(x)) I(x) = -log(p(x)) \u610f\u4e49\uff1a\u4e8b\u4ef6\u53d1\u751f\u524d\uff1a\u4e8b\u4ef6\u53d1\u751f\u7684\u4e0d\u786e\u5b9a\u6027\uff0c\u4e8b\u4ef6\u53d1\u751f\u540e\uff1a\u4e8b\u4ef6\u5305\u542b\u7684\u4fe1\u606f\u91cf I(xy) = -log(p(xy)) I(xy) = -log(p(xy)) \u5728 y = b_i y = b_i \u7ed9\u5b9a\u4e0b\uff1a I(x|y) = -log(p(x|y)) = I(xy) - I(y) I(x|y) = -log(p(x|y)) = I(xy) - I(y)","title":"\u81ea\u4fe1\u606f"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_8","text":"I(x;y) = log\\frac{p(x|y)}{p(x)} = I(x) - I(x|y) = I(y;x) I(x;y) = log\\frac{p(x|y)}{p(x)} = I(x) - I(x|y) = I(y;x) \u8868\u793a\u5f53 y y \u53d1\u751f\u540e\uff0c x x \u4e0d\u786e\u5b9a\u6027\u7684\u53d8\u5316\uff0c\u53cd\u6620\u4e24\u4e2a\u968f\u673a\u4e8b\u4ef6 x,y x,y \u4e4b\u95f4\u7684\u7edf\u8ba1\u5173\u8054\u7a0b\u5ea6 I(x;y|z) = log(\\frac{p(x|yz)}{p(x|z)}) I(x;y|z) = log(\\frac{p(x|yz)}{p(x|z)})","title":"\u4e92\u4fe1\u606f"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_9","text":"H(X) = E[I(x)] = -\\sum_x p(x)logp(x) H(X) = E[I(x)] = -\\sum_x p(x)logp(x) \u4fe1\u6e90\u8f93\u51fa\u524d\uff1a\u4fe1\u6e90\u7684\u7684\u5e73\u5747\u4e0d\u7a33\u5b9a\u6027\uff0c\u8f93\u51fa\u540e\uff1a\u4e00\u4e2a\u4fe1\u6e90\u7b26\u53f7\u6240\u63d0\u4f9b\u7684\u5e73\u5747\u4fe1\u606f\u91cf \u6709\u6839\u6982\u7387\u6811\uff1a H(X) = \\sum_i q(u_i)H(u_i) H(X) = \\sum_i q(u_i)H(u_i) \u6761\u4ef6\u71b5\uff1a H(Y|X) = -\\sum_x p(x)H(Y|x) H(Y|X) = -\\sum_x p(x)H(Y|x) \u5f0f\u4e2d H(Y|x) H(Y|x) \u4e3a\u53d6\u67d0\u4e00\u503c\u662f Y Y \u7684\u71b5\uff0c H(Y|x) = -\\sum_y p(y|x)log p(y|x) H(Y|x) = -\\sum_y p(y|x)log p(y|x) \u8054\u5408\u71b5\uff1a H(XY) = -\\sum_x \\sum_y p(xy)log p(xy) H(XY) = -\\sum_x \\sum_y p(xy)log p(xy) \u6563\u5ea6\uff1a D(P//Q) = \\sum_x P(x)log \\frac{P(x)}{Q(x)} \\ge 0 D(P//Q) = \\sum_x P(x)log \\frac{P(x)}{Q(x)} \\ge 0 \u71b5\u7684\u57fa\u672c\u6027\u8d28\uff1a 1. \u5bf9\u79f0\uff0c\u975e\u8d1f\uff0c\u6269\u5c55\uff0c\u53ef\u52a0 2. \u6781\u503c\u6027\uff08\u79bb\u6563\u6700\u5927\u71b5\u5b9a\u7406\uff09\uff1a H(X) \\le log n H(X) \\le log n \uff0c\u6563\u5ea6\u5b9a\u7406\u53ef\u8bc1 3. \u4e0a\u51f8\u6027\uff0c\u786e\u5b9a\u6027 \u5404\u7c7b\u71b5\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a H(Y|X) \\le H(Y) H(Y|X) \\le H(Y) H(X_1 X_2 \\cdots X_N) \\le H(X_1)H(X_2)\\cdots H(X_N) H(X_1 X_2 \\cdots X_N) \\le H(X_1)H(X_2)\\cdots H(X_N)","title":"\u4fe1\u606f\u71b5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_10","text":"\u96c6\u5408\u4e0e\u4e8b\u4ef6\uff1a I(x;Y) = \\sum_y p(y|x) log \\frac{p(y|x)}{p(y)} I(x;Y) = \\sum_y p(y|x) log \\frac{p(y|x)}{p(y)} \u96c6\u5408\u4e8e\u96c6\u5408\uff1a I(X;Y) = \\sum_{x,y} p(xy) I(x;y) I(X;Y) = \\sum_{x,y} p(xy) I(x;y) \u5e73\u5747\u4e92\u4fe1\u606f\u4e0e\u71b5\u7684\u5173\u7cfb\uff1a I(X;Y) = H(X) - H(X|Y) = H(X)+H(Y)-H(XY) I(X;Y) = H(X) - H(X|Y) = H(X)+H(Y)-H(XY) \u6027\u8d28\uff1a 1. \u975e\u8d1f\uff0c\u5bf9\u79f0 2. \u6781\u503c\uff1a I(X;Y) \\le H(X) and H(Y) I(X;Y) \\le H(X) and H(Y) 3. \u4e3a p(x) p(x) \u7684\u4e0a\u51f8\u51fd\u6570\uff0c p(y|x) p(y|x) \u7684\u4e0b\u51f8\u51fd\u6570","title":"\u5e73\u5747\u4e92\u4fe1\u606f"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_11","text":"","title":"\u79bb\u6563\u4fe1\u6e90"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_12","text":"\u5206\u7c7b\uff1a\u6309\u7b26\u53f7\u53d6\u503c\uff0c\u6309\u7b26\u53f7\u95f4\u4f9d\u8d56\u5173\u7cfb\uff0c\u72b6\u6001\u96c6\u5408\u662f\u5426\u6709\u9650\uff0c\u662f\u5426\u5e73\u7a33 \u79bb\u6563\u65e0\u8bb0\u5fc6\u4fe1\u6e90\u6570\u5b66\u6a21\u578b\uff1a \\begin{bmatrix} X \\\\ P \\\\ \\end{bmatrix} = \\begin{bmatrix} a_1 & a_2 & \\dotsb & a_n \\\\ p(a_1) & p(a_2) & \\dotsb & p(a_n)\\\\ \\end{bmatrix} \\begin{bmatrix} X \\\\ P \\\\ \\end{bmatrix} = \\begin{bmatrix} a_1 & a_2 & \\dotsb & a_n \\\\ p(a_1) & p(a_2) & \\dotsb & p(a_n)\\\\ \\end{bmatrix} \u591a\u7ef4\uff0cN\u6b21\u6269\u5c55\u6e90 \u79bb\u6563\u6709\u8bb0\u5fc6\u4fe1\u6e90\uff1a \u9a6c\u6c0f\u4fe1\u6e90","title":"\u5206\u7c7b\u4e0e\u6a21\u578b"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_13","text":"\u5355\u7b26\u53f7\u6027\u8d28\uff1a 1. \u4e0a\u51f8\u51fd\u6570\uff1a p = 0.5 p = 0.5 \u65f6\uff0c\u6700\u5927 2. \u5177\u6709\u71b5\u7684\u4e00\u5207\u6027\u8d28 N\u6b21\u6269\u5c55\u71b5\uff1a H(X^N) = NX(X) H(X^N) = NX(X)","title":"\u79bb\u6563\u65e0\u8bb0\u5fc6\u4fe1\u6e90\u7684\u71b5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_14","text":"\u7edf\u8ba1\u7279\u6027\uff0c\u6761\u4ef6\u6982\u7387\uff0c\u4fe1\u606f\u71b5\uff0c\u6761\u4ef6\u71b5\u4e0e\u65f6\u95f4\u7684\u63a8\u79fb\u65e0\u5173","title":"\u79bb\u6563\u5e73\u7a33\u4fe1\u6e90\u7684\u71b5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_15","text":"H(X^N) \\le NH(X_1) H(X^N) \\le NH(X_1) \u5e73\u5747\u7b26\u53f7\u71b5\uff1a H_N(X) = \\frac{1}{N} H(X^N) H_N(X) = \\frac{1}{N} H(X^N) <span class=\"arithmatex\"><span class=\"MathJax_Preview\">H_N(X) = \\frac{1}{N} H(X^N)</span><script type=\"math/tex\">H_N(X) = \\frac{1}{N} H(X^N) \u6781\u9650\u7b26\u53f7\u71b5\uff1a H_\\infty = \\lim_{N \\rightarrow \\infty}H_N(X) H_\\infty = \\lim_{N \\rightarrow \\infty}H_N(X) <span class=\"arithmatex\"><span class=\"MathJax_Preview\">H_\\infty = \\lim_{N \\rightarrow \\infty}H_N(X)</span><script type=\"math/tex\">H_\\infty = \\lim_{N \\rightarrow \\infty}H_N(X) \u6027\u8d28\uff1a 1. H(X_N|X_1X_2\\cdots X_{N-1}) \\ge H(X_{N+1}|X_1X_2\\cdots X_{N}) H(X_N|X_1X_2\\cdots X_{N-1}) \\ge H(X_{N+1}|X_1X_2\\cdots X_{N}) 2. H_N(X) \\ge H(X_N|X_1X_2\\cdots X_{N-1}) H_N(X) \\ge H(X_N|X_1X_2\\cdots X_{N-1}) 3. H_N(X) \\ge H_{N+1}(X) H_N(X) \\ge H_{N+1}(X) 4. H_\\infty(X) = H(X_N|X_1X_2\\cdots X_{N-1}) H_\\infty(X) = H(X_N|X_1X_2\\cdots X_{N-1})","title":"\u79bb\u6563\u6709\u8bb0\u5fc6\u5e73\u7a33\u4fe1\u6e90\uff1a"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_16","text":"\u65f6\u95f4\u79bb\u6563\uff0c\u72b6\u6001\u79bb\u6563\uff0cn\u9636\u9a6c\u6c0f\u94fe\u53ea\u4e0e\u524dn\u4e2a\u72b6\u6001\u6709\u5173 \u72b6\u6001\u8f6c\u79fb\u6982\u7387\uff1a p(x_n = j|x_m = i) = p_{ij}(m,n) p(x_n = j|x_m = i) = p_{ij}(m,n) \u9f50\u6b21\uff08\u5e73\u7a33\uff09k\u6b65\uff0c\u4e00\u6b65\u65f6\u7701\u7565k\uff1a p_{ij}^{(k)} p_{ij}^{(k)} \u8868\u793a\u65b9\u6cd5\uff1a\u8f6c\u79fb\u6982\u7387\u56fe\uff0c\u7f51\u683c\u56fe\uff0c\u72b6\u6001\u8f6c\u79fb\u56fe kolmogorov-chapman \u65b9\u7a0b\uff1a p^{(k)} = p^{(0)}P^k p^{(k)} = p^{(0)}P^k \u5206\u7c7b\uff1a\u5e38\u8fd4\u6001\uff0c\u8fc7\u6e21\u6001 \u82e5\u5e38\u8fd4\u6001 \\{n:n\\le 1 ,p_{ii}^{n} > 0\\} \\{n:n\\le 1 ,p_{ii}^{n} > 0\\} \u7684\u6700\u5927\u516c\u7ea6\u6570\u4e3a d_i d_i \uff0c d_i = 1 d_i = 1 \u904d\u5386\uff0c d_i > 1 d_i > 1 \u5468\u671f \u540c\u4e00\u7c7b\u6240\u6709\u5468\u671f\u76f8\u7b49 \u9a6c\u6c0f\u94fe\u7684\u5e73\u7a33\u5206\u5e03\uff1a \\pi^T = \\pi^T P \\pi^T = \\pi^T P \\lim_{k \\rightarrow \\infty} P^k = e\\pi^T \\lim_{k \\rightarrow \\infty} P^k = e\\pi^T \u5bf9\u4e8e\u6709\u9650\u72b6\u6001\u7684\u9a6c\u6c0f\u94fe\uff0c\u5e73\u7a33\u5206\u5e03\u6052\u5b58\u5728\uff0c\u6709\u51e0\u4e2a\u904d\u5386\u5e38\u8fd4\u7c7b\u5c31\u6709\u51e0\u4e2a\u89e3\uff0c\u5bf9\u4e8e\u53ea\u6709\u5468\u671f\u5e38\u8fd4\u7c7b\u7684\u9a6c\u6c0f\u94fe\uff0c\u4e0a\u5f0f\u4e0d\u6536\u655b","title":"\u6709\u9650\u72b6\u6001\u9a6c\u5c14\u53ef\u592b\u94fe"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_17","text":"\u5f53\u524d\u65f6\u523b\u8f93\u51fa\u7b26\u53f7\u53ea\u4e0e\u5f53\u524d\u65f6\u523b\u72b6\u6001\u6709\u5173 \u4ea7\u751f\u6a21\u578b","title":"\u9a6c\u5c14\u53ef\u592b\u4fe1\u6e90"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#n","text":"\u5bf9\u4e8em\u9636\u7684\u8d77\u59cb\u72b6\u6001\u5e73\u7a33\u9a6c\u6c0f\u94fe\uff1a H(X_1X_2 \\cdots X_N) = H([\\pi]) + (N-m)[\\pi]^T[h] H(X_1X_2 \\cdots X_N) = H([\\pi]) + (N-m)[\\pi]^T[h] \u5f0f\u4e2d [h] [h] \u4e3a\u8f6c\u79fb\u6982\u7387\u6bcf\u884c\u7684\u71b5 \u82e5\u72b6\u6001\u4e0e\u7b26\u53f7\u4e00\u4e00\u5bf9\u5e94\uff1a H(X)_\\infty = [\\pi]^T[h] H(X)_\\infty = [\\pi]^T[h] \u5426\u5219\uff1a H(X)_\\infty = \\sum_{i=1}^J \\pi_iH(X|s=i) H(X)_\\infty = \\sum_{i=1}^J \\pi_iH(X|s=i) \u5f0f\u4e2d H(X|s=i) = -\\sum_{i=1}^n p_j(a_i)log p_j(a_i) H(X|s=i) = -\\sum_{i=1}^n p_j(a_i)log p_j(a_i)","title":"\u9a6c\u6c0f\u94feN\u6b21\u6269\u5c55\u6e90\u7684\u8ba1\u7b97"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_18","text":"\u76f8\u5173\u6027\u5373\u4fe1\u6e90\u7b26\u53f7\u95f4\u7684\u4f9d\u8d56\u7a0b\u5ea6 \u4fe1\u6e90\u6548\u7387\uff1a \\eta = \\frac{H_\\infty}{H_0} \\eta = \\frac{H_\\infty}{H_0} \u5269\u4f59\u5ea6\uff1a \\gamma = 1-\\eta \\gamma = 1-\\eta \u5f0f\u4e2d H_0 = logq H_0 = logq \u4e3a\u7b26\u53f7\u72ec\u7acb\u7b49\u6982\u65f6\u7684\u4fe1\u6e90\u71b5","title":"\u4fe1\u6e90\u76f8\u5173\u6027\u4e0e\u5269\u4f59\u5ea6"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_19","text":"\u8fde\u7eed\u4fe1\u6e90\u71b5\u4e24\u90e8\u5206\uff1a\u7edd\u5bf9\u71b5\u65e0\u9650\u5927\uff0c\u5dee\u71b5\u4e3a h(X) = -\\int p(x)log p(x) \\mathrm{d} x h(X) = -\\int p(x)log p(x) \\mathrm{d} x \uff0c\u5355\u4f4d\u4e3abit/\u81ea\u7531\u5ea6 \u6761\u4ef6\u71b5\uff1a h(X|Y) = -\\iint p(xy) log p(x|y) \\mathrm{d} x \\mathrm{d} y h(X|Y) = -\\iint p(xy) log p(x|y) \\mathrm{d} x \\mathrm{d} y \u8054\u5408\u71b5\uff1a h(\\boldsymbol{X}^N) = -\\int p(\\boldsymbol{x}) log p(\\boldsymbol{x}) h(\\boldsymbol{X}^N) = -\\int p(\\boldsymbol{x}) log p(\\boldsymbol{x}) \u71b5\u7387\uff08\u7c7b\u4f3c\u79bb\u6563\u4fe1\u6e90\u7684\u6781\u9650\u7b26\u53f7\u71b5\uff09\uff1a h(X) = \\lim_{N\\rightarrow \\infty} \\frac{h(X_1X_2\\cdots X_N)}{N} h(X) = \\lim_{N\\rightarrow \\infty} \\frac{h(X_1X_2\\cdots X_N)}{N} \u82e5 \\boldsymbol{y} = \\boldsymbol{A}\\boldsymbol{x} + \\boldsymbol{\\alpha} \\boldsymbol{y} = \\boldsymbol{A}\\boldsymbol{x} + \\boldsymbol{\\alpha} \uff1a h(\\boldsymbol{Y}^N) = h(\\boldsymbol{X}^N) + log (det|\\boldsymbol{A}|) h(\\boldsymbol{Y}^N) = h(\\boldsymbol{X}^N) + log (det|\\boldsymbol{A}|) \u5e73\u5747\u81ea\u4fe1\u606f\uff1a I([X]_P;[Y]_Q) = \\sum_{i,j} p(u_iv_j)log \\frac{p(u_iv_j)}{p(u_i)q(v_j)} I([X]_P;[Y]_Q) = \\sum_{i,j} p(u_iv_j)log \\frac{p(u_iv_j)}{p(u_i)q(v_j)} \\boldsymbol{U}^N \\boldsymbol{U}^N \uff0c \\boldsymbol{V}^N \\boldsymbol{V}^N \u5206\u522b\u4e3a \\boldsymbol{X}^N \\boldsymbol{X}^N \uff0c \\boldsymbol{Y}^N \\boldsymbol{Y}^N \u7684\u53ef\u9006\u7ebf\u6027\u53d8\u6362\uff0c\u5219 I(\\boldsymbol{U}^N;\\boldsymbol{V}^N) = I(\\boldsymbol{X}^N;\\boldsymbol{Y}^N) I(\\boldsymbol{U}^N;\\boldsymbol{V}^N) = I(\\boldsymbol{X}^N;\\boldsymbol{Y}^N)","title":"\u8fde\u7eed\u968f\u673a\u53d8\u91cf\u96c6\u5408\u71b5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_20","text":"N\u7ef4\u72ec\u7acb\uff1a h(\\boldsymbol{X}) = \\frac{N}{2} log[2\\pi e (\\sigma_1^2 \\sigma_2^2\\cdots \\sigma_n^2)^{\\frac{1}{N}}] h(\\boldsymbol{X}) = \\frac{N}{2} log[2\\pi e (\\sigma_1^2 \\sigma_2^2\\cdots \\sigma_n^2)^{\\frac{1}{N}}]","title":"\u79bb\u6563\u65f6\u95f4\u9ad8\u65af\u4fe1\u6e90\u7684\u71b5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_21","text":"\u9650\u5cf0\u503c\uff1a\u6700\u5927\u4e3a\u5747\u5300\u5206\u5e03\u65f6\uff0c \\sum_{i = 1}^N log(b_i-a_i) \\sum_{i = 1}^N log(b_i-a_i) \u9650\u529f\u7387\uff1a\u6700\u5927\u4e3a\u9ad8\u65af\u5206\u5e03","title":"\u6700\u5927\u71b5\u5b9a\u7406"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_22","text":"\u4fe1\u6e90\u7f16\u7801\uff1a\u5c06\u4fe1\u6e90\u7b26\u53f7\u5e8f\u5217\u6309\u4e00\u5b9a\u7684\u6570\u5b66\u89c4\u5f8b\u6620\u5c04\u6210\u7531\u7801\u7b26\u53f7\u7ec4\u6210\u7684\u7801\u5e8f\u5217\u7684\u8fc7\u7a0b \u76ee\u7684\uff1a\u63d0\u9ad8\u4f20\u8f93\u6709\u6548\u6027 \u5206\u7c7b\uff1a 1. \u6982\u7387\u5339\u914d\u7f16\u7801\uff0c\u6309\u4fe1\u6e90\u5e8f\u5217\u548c\u7f16\u7801\u5668\u8f93\u51fa\u7684\u5173\u7cfb 1. \u5206\u7ec4\u7801\uff0c\u53d8/\u5b9a\u957f\uff0c\u5947\u5f02/\u975e\u5947\u5f02\uff0c\u5373\u65f6/\u975e\u5373\u65f6\uff0c\u5f02\u524d\u7f6e\u7801\uff0c\u9017\u53f7\u7801 2. \u975e\u5206\u7ec4\u7801 \u901a\u7528\u7f16\u7801","title":"\u65e0\u5931\u771f\u4fe1\u6e90\u7f16\u7801"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_23","text":"\u65e0\u5931\u771f\u7f16\u7801\u6761\u4ef6: q^N \\le r^l q^N \\le r^l","title":"\u5b9a\u957f\u7801"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_24","text":"|\\frac{1}{N}log p(x) + H(X)| < \\delta |\\frac{1}{N}log p(x) + H(X)| < \\delta N \\ge N_0 = \\frac{\\sigma^2}{\\varepsilon \\delta^2} N \\ge N_0 = \\frac{\\sigma^2}{\\varepsilon \\delta^2} \uff0c\u4e14\u6ee1\u8db3\u4e0a\u5f0f\u7684\u5e8f\u5217\u79f0\u4e3a\u5178\u578b\u5e8f\u5217 \u5178\u578b\u5e8f\u5217\u6982\u7387\uff1a p(x) = 2^{-N(H(X)\\pm \\delta)} p(x) = 2^{-N(H(X)\\pm \\delta)} \u4e2a\u6570\uff1a (1-\\varepsilon)2^{N(H(X)-\\delta)} < N_G < 2^{N(H(X)+\\delta)} (1-\\varepsilon)2^{N(H(X)-\\delta)} < N_G < 2^{N(H(X)+\\delta)} \u6e10\u8fdb\u5747\u5206\u7279\u6027","title":"\u4fe1\u6e90\u5e8f\u5217\u5206\u7ec4\u5b9a\u7406\uff1a"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_25","text":"\u5b9a\u957f\u7801\u4fe1\u6e90\u7f16\u7801\u5b9a\u7406\uff08N\u8db3\u591f\u5927\u65f6\uff0c\u53ea\u4fdd\u8bc1\u5178\u578b\u5e8f\u5217\u4e0d\u5931\u771f\uff09\uff1a r^l \\ge 2^{N(H(X)+\\delta)} \\Rightarrow r\\frac{l}{N}log r \\ge H(X)+\\delta r^l \\ge 2^{N(H(X)+\\delta)} \\Rightarrow r\\frac{l}{N}log r \\ge H(X)+\\delta \u7f16\u7801\u901f\u7387\uff08\u7f16\u7801\u540e\u4e00\u4e2a\u4fe1\u6e90\u7b26\u53f7\u4ee3\u8868\u7684\u6700\u5927\u4fe1\u606f\u91cf\uff09\uff1a R' = \\frac{l logr}{N} R' = \\frac{l logr}{N} \uff0c\u5355\u4f4d\uff08\u6bd4\u7279/\u4fe1\u6e90\u7b26\u53f7\uff09 \u7f16\u7801\u6548\u7387\uff1a \\eta = \\frac{H(X)}{R'} = \\frac{NH((X))}{l logr} \\eta = \\frac{H(X)}{R'} = \\frac{NH((X))}{l logr} \u4fe1\u606f\u4f20\u8f93\u6548\u7387\uff1a R = \\frac{NH((X))}{l} R = \\frac{NH((X))}{l} \uff0c\u5f53 r = 2 r = 2 \u65f6\uff0c\u4e0e\u7f16\u7801\u6548\u7387\u6570\u503c\u76f8\u7b49\uff0c\u5355\u4f4d\uff08\u6bd4\u7279/\u7801\u7b26\u53f7\uff09 \u65e0\u5931\u771f\u7f16\u7801\uff1a R' > H(X) R' > H(X) \u7f16\u7801\u6548\u7387\u4e0e\u71b5\uff1a N \\ge \\frac{\\sigma^2}{\\varepsilon \\delta^2} N \\ge \\frac{\\sigma^2}{\\varepsilon \\delta^2} \uff0c\u5176\u4e2d \\delta = \\frac{1-\\eta}{\\eta}H(X) \\delta = \\frac{1-\\eta}{\\eta}H(X)","title":"\u5b9a\u957f\u7801\u4fe1\u6e90\u7f16\u7801\u5b9a\u7406"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_26","text":"\u5f02\u524d\u7f6e\u7801\u6027\u8d28\uff08\u7528\u7801\u6811\u63cf\u8ff0\u53ef\u63a8\uff09\uff1a Kraft \u5b9a\u7406 \\sum_{i = 1}^q r^{-l_i} \\le 1 \\sum_{i = 1}^q r^{-l_i} \\le 1 \u4e5f\u662f\u552f\u4e00\u53ef\u8bd1\u7801\u7684\u6761\u4ef6\uff0c\u4efb\u610f\u552f\u4e00\u53ef\u8bd1\u7801\u53ef\u8f6c\u5316\u4e3a\u5f02\u524d\u7f6e\u7801 \u5355\u4fe1\u6e90\u7b26\u53f7\u5e73\u5747\u7801\u957f\uff1a \\bar{l} = \\sum_{k = 1}^q p_k l_k \\bar{l} = \\sum_{k = 1}^q p_k l_k N\u6b21\u6269\u5c55\u6e90\uff1a \\bar{l} = \\frac{1}{N}\\sum_{k = 1}^q p_k l_k \\bar{l} = \\frac{1}{N}\\sum_{k = 1}^q p_k l_k","title":"\u53d8\u957f\u7801"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_27","text":"\u5355\u4fe1\u6e90\u7b26\u53f7\uff1a \\frac{H(X)}{log r} \\le \\bar{l} < \\frac{H(X)}{log r}+1 \\frac{H(X)}{log r} \\le \\bar{l} < \\frac{H(X)}{log r}+1 shannong\u7b2c\u4e00\u5b9a\u7406\uff1a\u4efb\u610f\u4fe1\u6e90X\u7684\uff0cN\u6b21\u6269\u5c55\u6e90\u7f16\u7801\uff0cN\u8db3\u591f\u5927\u65f6\uff0c \\bar{l} \\bar{l} \u53ef\u4efb\u610f\u63a5\u8fd1 H_r(X) H_r(X)","title":"\u53d8\u957f\u7801\u4fe1\u6e90\u7f16\u7801\u5b9a\u7406"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#huffman","text":"\u5bf9\u4e8e\u5b58\u5728\u6700\u4f18\u7f16\u7801\u7684\u4fe1\u6e90\uff0c\u5176\u6700\u5c11\u6709\u4e24\u4e2a\u7801\u957f\u76f8\u540c\u7684\u7801\uff0c\u4ec5\u6700\u540e\u4e00\u4f4d\u4e0d\u540c \u5c3d\u91cf\u9ad8\u4f4d\u5408\u5e76\uff0c\u51cf\u5c11\u7801\u957f\u65b9\u5dee\uff0c\u51cf\u5c11\u7801\u957f\u7f13\u51b2\u5668\u5bb9\u91cf r r \u5143huffman\u7f16\u7801\u65f6\uff0c\u4ee5 s = r+(r-1)m s = r+(r-1)m \uff0c\u6765\u589e\u8865\u96f6\u6982\u7387\u7b26\u53f7 \u9a6c\u6c0f\u6e90\u7f16\u7801\uff1a\u4ee5\u8f6c\u79fb\u6982\u7387\u8fdb\u884c\u7f16\u7801\u6bd4\u5e73\u7a33\u5206\u5e03\u7f16\u7801\u6548\u7387\u9ad8","title":"huffman\u7f16\u7801"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_28","text":"\u79ef\u7d2f\u6982\u7387\uff1a 1. \u5355\u4fe1\u6e90\u7b26\u53f7\uff1a P(a_k) = \\sum_{i=1}^{k-1} p_i P(a_k) = \\sum_{i=1}^{k-1} p_i 2. \u4fe1\u6e90\u7b26\u53f7\u5e8f\u5217\uff1a\u5bf9\u540c\u957f\u5ea6\u7684\u5e8f\u5217\u5c0f\u7684\u6982\u7387\u6c42\u548c \u7f16\u7801\uff1a L_{j+1} = L_j + \\triangle_j P(j+1) L_{j+1} = L_j + \\triangle_j P(j+1) \u8bd1\u7801\uff1a (c-L_{j-1})/\\triangle_{j-1} ?> P(x=1) (c-L_{j-1})/\\triangle_{j-1} ?> P(x=1)","title":"\u7b97\u672f\u7f16\u7801"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_29","text":"","title":"\u79bb\u6563\u4fe1\u9053\u53ca\u5176\u5bb9\u91cf"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_30","text":"\u5206\u7c7b\uff1a 1. \u6309\u8f93\u5165\uff0c\u8f93\u51fa\u53d6\u503c\u5206\u7c7b\uff1a\u79bb\u6563\uff0c\u8fde\u7eed\uff0c\u534a\u79bb\u6563\uff0c\u65f6\u95f4\u79bb\u6563\u8fde\u7eed 2. \u6309\u8f93\u5165\uff0c\u8f93\u51fa\u4e2a\u6570\uff1a\u5355\u7528\u6237\uff0c\u591a\u7528\u6237 3. \u6309\u8f6c\u79fb\u6982\u7387\u6027\u8d28\u5206\uff1a 1. \u65e0\u566a\u58f0\u4fe1\u9053\uff1a\u65e0\u635f\u4fe1\u9053\uff08\u4e00\u5bf9\u591a\uff09\uff0c\u786e\u5b9a\u4fe1\u9053\uff08\u591a\u5bf9\u4e00\uff09\uff0c\u65e0\u6270\u4fe1\u9053\uff08\u4e00\u5bf9\u4e00\uff09 2. \u6709\u566a\u58f0\u4fe1\u9053\uff1a\u65e0\u8bb0\u5fc6\u4fe1\u9053\uff0c\u6709\u8bb0\u5fc6\u4fe1\u9053 \u6309\u4fe1\u9053\u7edf\u8ba1\u7279\u6027\u5206\uff1a\u6052\u53c2\u4fe1\u9053\uff0c\u53d8\u53c2\u4fe1\u9053 \u6309\u4fe1\u9053\u566a\u58f0\u6027\u8d28\u5206\uff1a\u9ad8\u65af\u566a\u58f0\u4fe1\u9053\uff0c\u975e\u9ad8\u65af\u566a\u58f0\u4fe1\u9053 \u6570\u5b66\u6a21\u578b\uff1a\u79bb\u6563\u65e0\u8bb0\u5fc6\u4fe1\u9053\uff0c\u5e73\u7a33\u4fe1\u9053\uff0c\u5355\u7b26\u53f7\u79bb\u6563\u4fe1\u9053 \u4fe1\u9053\u5bb9\u91cf\uff1a 1. \u5355\u7b26\u53f7\u79bb\u6563\u4fe1\u9053\uff1a C = max_{p(x)}I(X;Y) C = max_{p(x)}I(X;Y) 2. \u591a\u7ef4\u77e2\u91cf\u4fe1\u9053\uff1a C = max_{p(x_1x_2\\cdots x_N)}I(X^N;Y^N) C = max_{p(x_1x_2\\cdots x_N)}I(X^N;Y^N)","title":"\u6982\u8ff0"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#_31","text":"\u79bb\u6563\u65e0\u566a\u58f0\u4fe1\u9053\uff1a r r \u4e3a\u8f93\u5165\u7b26\u53f7\u96c6\u7684\u5927\u5c0f\uff0c s s \u4e3a\u8f93\u51fa\u7b26\u53f7\u96c6\u7684\u5927\u5c0f 1. \u65e0\u635f\u4fe1\u9053\uff1a C = log r C = log r 2. \u786e\u5b9a\u4fe1\u9053\uff1a C = log s C = log s 3. \u65e0\u6270\u4fe1\u9053\uff1a C = log r = log s C = log r = log s \u79bb\u6563\u5bf9\u79f0\u4fe1\u9053\uff1a\u8f93\u5165\u7b49\u6982\u7387\u65f6\u8fbe\u5230\u4fe1\u9053\u5bb9\u91cf C = H(Y) - H(p_{11},p_{12},\\cdots ,p_{1s}) C = H(Y) - H(p_{11},p_{12},\\cdots ,p_{1s}) \u5bf9\u4e8e\u5f3a\u5bf9\u79f0\u4fe1\u9053\uff1a C = log s - H(p_{11},p_{12},\\cdots ,p_{1s}) C = log s - H(p_{11},p_{12},\\cdots ,p_{1s}) \u4e00\u822c\u79bb\u6563\u4fe1\u9053\uff1a 1. \u8f6c\u79fb\u6982\u7387\u77e9\u9635\u9006 P^{-1} P^{-1} \u5b58\u5728\u65f6\uff1a C = log_2 \\sum_{k = 1}^r 2^{\\beta_k} C = log_2 \\sum_{k = 1}^r 2^{\\beta_k} \u5f0f\u4e2d \\beta = -P^{-1}h \\beta = -P^{-1}h \u79bb\u6563\u65e0\u8bb0\u5fc6\u4fe1\u9053\uff1a I(a_i;Y) = C \\qquad ,p_i > 0 I(a_i;Y) = C \\qquad ,p_i > 0 I(a_i;Y) \\le C \\qquad ,p_i = 0 I(a_i;Y) \\le C \\qquad ,p_i = 0 \u4fe1\u9053\u7ea7\u8054\uff1a\u4fe1\u606f\u4e22\u5931 \u79bb\u6563\u65e0\u8bb0\u5fc6\u4fe1\u9053\uff1a I(\\boldsymbol{X}^N;\\boldsymbol{Y}^N) \\le \\sum_{i = 1}^N (\\boldsymbol{X_i};\\boldsymbol{Y_i}) I(\\boldsymbol{X}^N;\\boldsymbol{Y}^N) \\le \\sum_{i = 1}^N (\\boldsymbol{X_i};\\boldsymbol{Y_i}) \u65e0\u8bb0\u5fc6\u4fe1\u6e90\uff1a I(\\boldsymbol{X}^N;\\boldsymbol{Y}^N) \\le \\sum_{i = 1}^N (\\boldsymbol{X_i};\\boldsymbol{Y_i}) I(\\boldsymbol{X}^N;\\boldsymbol{Y}^N) \\le \\sum_{i = 1}^N (\\boldsymbol{X_i};\\boldsymbol{Y_i})","title":"\u5355\u7b26\u53f7\u79bb\u6563\u4fe1\u9053\u53ca\u5176\u5bb9\u91cf"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#1","text":"","title":"1. \u4fe1\u606f\u8bba\u57fa\u672c\u6982\u5ff5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#2","text":"","title":"2. \u4fe1\u6e90\u4e0e\u4fe1\u6e90\u65e0\u5931\u771f\u7f16\u7801"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Information%20Theory/#3","text":"","title":"3. \u4fe1\u9053\u53ca\u5176\u5bb9\u91cf"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/","text":"\u57fa\u4e8e51\u7684\u5b9a\u65f6\u95f9\u949f \u300a\u5355\u7247\u673a\u5e94\u7528\u8bbe\u8ba1\u300b\u8bfe\u7a0b\u8bbe\u8ba1\u603b\u7ed3\u62a5\u544a \u8bfe\u7a0b\u8bbe\u8ba1\u540d\u79f0 \uff1a\u5b9a\u65f6\u95f9\u949f \u5b66\u751f\u59d3\u540d \uff1a \u73ed\u7ea7 \uff1a \u5b66\u53f7 \uff1a \u7814\u7a76\u610f\u4e49\u548c\u5b9e\u73b0\u529f\u80fd\u6307\u6807 \u7814\u7a76\u610f\u4e49 \u968f\u7740\u4eba\u4eec\u7269\u8d28\u751f\u6d3b\u6c34\u5e73\u7684\u63d0\u9ad8\uff0c\u5404\u79cd\u667a\u80fd\u5bb6\u5c45\u8fdb\u5165\u4eba\u4eec\u7684\u65e5\u5e38\u751f\u6d3b\u5f53\u4e2d\u3002\u5728\u65e5\u5e38\u751f\u6d3b\u5f53\u4e2d\uff0c\u6211\u4eec\u4e0d\u4ec5\u9700\u8981\u95f9\u949f\u7ed9\u6211\u4eec\u5b9a\u65f6\u63d0\u9192\uff0c\u8fd8\u9700\u8981\u4f7f\u7528\u4f5c\u4e3a\u5b9a\u65f6\u5668\u63a7\u5236\u4e00\u4e9b\u4e0d\u5177\u5907\u5b9a\u65f6\u529f\u80fd\u7684\u5bb6\u7535\u7684\u4f7f\u7528\uff0c\u4ece\u800c\u63d0\u9ad8\u751f\u6d3b\u7684\u4fbf\u5229\u6027\uff0c\u8fd9\u6837\u7684\u7814\u7a76\u662f\u5177\u6709\u610f\u4e49\u7684\u3002 \u8bfe\u7a0b\u8bbe\u8ba1\u8981\u6c42 \u5229\u75283\u4e2a\u6309\u952e\u8c03\u6574\u73b0\u5728\u65f6\u95f4\uff0c\u95f9\u94c3\u65f6\u95f4\u4ee5\u53ca\u95f9\u949f\u7684\u5f00\u5173\u3002 \u4f7f\u7528LCD12864\u663e\u793a\u73b0\u5728\u65f6\u95f4\uff0c\u95f9\u94c3\u65f6\u95f4\u4ee5\u53ca\u95f9\u949f\u7684\u72b6\u6001\u3002 \u5587\u53ed\u64ad\u653e\u95f9\u94c3\u97f3\u4e50\uff0c\u7ee7\u7535\u5668\u5b9a\u65f6\u63a7\u5236\u5bb6\u7535\u7684\u5f00\u5173\u3002 \u8bbe\u8ba1\u7279\u8272\u5206\u6790 \u7075\u6d3b\u6027\u597d\uff0c\u53ef\u79fb\u690d\u6027\u9ad8\uff0c\u53ea\u9700\u8981\u7ecf\u8fc7\u6781\u5c11\u91cf\u7684\u6539\u52a8\uff0c\u53ef\u9002\u5e94\u5927\u591a\u6570\u4f20\u7edf\u5bb6\u7535\u7684\u667a\u80fd\u5316\u4f7f\u7528\u3002 \u5177\u6709\u5b9e\u65f6\u663e\u793a\uff0c\u591c\u95f4\u4f7f\u7528\u7684\u80fd\u529b\u3002 \u5587\u53ed\u53ef\u81ea\u5b9a\u4e49\u97f3\u4e50\u64ad\u653e\u3002 \u6210\u672c\u6781\u4f4e\u3002 \u4f7f\u7528\u65b9\u6cd5 \u7a0b\u5e8f\u6267\u884c\u540e\u5de5\u4f5c\u6307\u793a\u706fLED\u95ea\u52a8\uff0c\u8868\u793a\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\uff0c\u73b0\u5728\u548c\u95f9\u94c3\u65f6\u95f4\u90fd\u663e\u793a\u4e3a\u201c00\uff1a00\u201d\uff0c\u6309\u4e0b\u64cd\u4f5c\u952eK1-K3\u52a8\u4f5c\u5982\u4e0b\uff1a 1. K1\u2014\u8bbe\u7f6e\u73b0\u5728\u7684\u65f6\u95f4\u3002 2. K2\u2014\u8bbe\u7f6e\u95f9\u94c3\u7684\u65f6\u95f4\u3002 3. K3\u2014\u95f9\u94c3ON/OFF\u7684\u72b6\u6001\u8bbe\u7f6e\uff0c\u95f9\u949f\u54cd\u94c3\u65f6\uff0c\u53ef\u901a\u8fc7\u6b64\u6309\u952e\u5173\u95ed\u3002 \u5f53\u8bbe\u7f6e\u65f6\u95f4\u65f6\uff0c\u95f9\u949f\u6682\u505c\u8ba1\u65f6\uff0c\u8bbe\u7f6e\u5f53\u524d\u65f6\u95f4\u6216\u95f9\u94c3\u65f6\u95f4\u5982\u4e0b\u3002 1. K1\u2014\u65f6\u8c03\u6574\u3002 2. K2\u2014\u5206\u8c03\u6574\u3002 3. K3\u2014\u8bbe\u7f6e\u5b8c\u6210 \u6280\u672f\u6307\u6807 \u65f6\u95f4\u51c6\u786e\u5ea6 \u7535\u8def\u529f\u8017\uff0c\u7535\u6c60\u7eed\u822a\u80fd\u529b \u603b\u8bbe\u8ba1\u6846\u56fe \u6309\u7167\u7cfb\u7edf\u8bbe\u8ba1\u529f\u80fd\u7684\u8981\u6c42\uff0c\u786e\u5b9a\u7cfb\u7edf\u75316\u4e2a\u6a21\u5757\u7ec4\u6210\uff1a\u4e3b\u63a7\u5236\u5668\u3001\u95f9\u94c3\u7535\u8def\u3001\u7535\u6e90\u7535\u8def\u3001\u6309\u952e\u7535\u8def\u3001\u663e\u793a\u7535\u8def\u548c\u7ee7\u7535\u5668\u5f00\u5173\u7535\u8def\uff0c\u7ed3\u6784\u6846\u56fe\u5982\u56fe\u6240\u793a\u3002 LCD1264\u8bf4\u660e \u5176\u4e2dLCD12864\u4f7f\u7528ST7920\u63a7\u5236\u5668\uff0c\u81ea\u5e26\u4e2d\u6587\u5b57\u5e93\uff0c\u53ef\u663e\u793a\u6c49\u5b57\u53ca\u56fe\u5f62\uff0c\u5185\u7f6e8192\u4e2a\u4e2d\u6587\u6c49\u5b57\uff0816X16\u70b9\u9635\uff09\u3001128\u4e2a\u5b57\u7b26\uff088X16\u70b9\u9635\uff09\u53ca64X256\u70b9\u9635\u663e\u793aRAM\uff08GDRAM\uff09\u3002 \u4e3b\u8981\u6280\u672f\u53c2\u6570\u548c\u663e\u793a\u7279\u6027: \u7535\u6e90\uff1aVDD 3.3V~+5V(\u5185\u7f6e\u5347\u538b\u7535\u8def\uff0c\u65e0\u9700\u8d1f\u538b)\uff1b \u663e\u793a\u5185\u5bb9\uff1a128\u5217\u00d7 64\u884c \u663e\u793a\u989c\u8272\uff1a\u9ec4\u7eff LCD\u7c7b\u578b\uff1aSTN \u4e0eMCU\u63a5\u53e3\uff1a8\u4f4d\u62164\u4f4d\u5e76\u884c/3\u4f4d\u4e32\u884c \u914d\u7f6eLED\u80cc\u5149 \u591a\u79cd\u8f6f\u4ef6\u529f\u80fd\uff1a\u5149\u6807\u663e\u793a\u3001\u753b\u9762\u79fb\u4f4d\u3001\u81ea\u5b9a\u4e49\u5b57\u7b26\u3001\u7761\u7720\u6a21\u5f0f\u7b49 \u5e76\u884c\u5199\u65f6\u5e8f \u5e76\u884c\u8bfb\u65f6\u5e8f GDRAM\u5730\u5740 \u786c\u4ef6\u7535\u8def\u8bbe\u8ba1\u5b9e\u73b0 \u539f\u7406\u56fe \u6a21\u5757\u8bf4\u660e \u6309\u952e\u6a21\u5757 \u6309\u952eK1-K3\u5206\u522b\u8fde\u63a5\u81f3P3.0-P3.2\u53e3\uff0c\u7136\u540e\u5e76\u8054\u63a5\u5730\uff0c\u6bcf\u5f53\u76f8\u5e94\u6309\u952e\u6309\u4e0b\u65f6\uff0c\u5bf9\u5e94I/O\u53e3\u63a5\u53d7\u5230\u4f4e\u7535\u5e73\uff0c\u5b8c\u6210\u76f8\u5e94\u529f\u80fd\u3002 \u95f9\u94c3\uff0c\u7ee7\u7535\u5668\u6a21\u5757 \u5355\u7247\u673a\u4e0a\u7535I/O\u53e3\u4e3a\u9ad8\u7535\u5e73\uff0c\u5176\u76f8\u5e94\u7684PNP\u7ba1\u5de5\u4f5c\u5728\u622a\u6b62\u72b6\u6001\uff0c\u95f9\u94c3\u89e6\u53d1\u540e\uff0cI/O\u53e3\u62c9\u4f4ePNP\u7ba1\u5de5\u4f5c\u5728\u653e\u5927\u72b6\u6001\uff0c\u5587\u53ed\u548c\u7ee7\u7535\u5668\u5c31\u5f00\u59cb\u5de5\u4f5c\u3002 \u8f6f\u4ef6\u8bbe\u8ba1 \u4e3b\u8981\u6570\u636e\u7ed3\u6784 \u51fd\u6570\u8c03\u7528\u5173\u7cfb\u56fe \u5176\u4e2d init \u4e3a\u521d\u59cb\u5316\u51fd\u6570\uff0c keyscan \u4e3a\u6309\u952e\u626b\u63cf\u51fd\u6570\uff0c play_song \u4e3a\u97f3\u4e50\u64ad\u653e\u51fd\u6570\uff0c clock_cmp \u4e3a\u65f6\u95f4\u5bf9\u6bd4\u51fd\u6570\uff0c time_adjust \u4e3a\u65f6\u95f4\u8c03\u6574\u51fd\u6570\uff0c clock_display \u4e3a\u65f6\u949f\u663e\u793a\u51fd\u6570\u3002 \u4e3b\u8981\u51fd\u6570\u7684\u63a7\u5236\u6d41\u7a0b\u56fe main \u51fd\u6570 init \u51fd\u6570 \u5bf9LCD12864\uff0c\u5b9a\u65f6\u56680\uff0c1\uff0c\u5587\u53ed\u4ee5\u53ca\u7ee7\u7535\u5668I/O\u53e3\u7684\u521d\u59cb\u5316\uff0c wela \u548c dula \u4ec5\u5728\u8c03\u8bd5\u4e2d\u4f7f\u7528\u3002 keyscan \u51fd\u6570 \u6309\u987a\u5e8f\u5bf9\u4e09\u4e2a\u6309\u952e\u8fdb\u884c\u626b\u63cf\u3002 play_song \u51fd\u6570 song[] \u4e3a\u6b4c\u66f2\u5b58\u653e\u7684\u6570\u7ec4\uff0c\u5176\u5076\u6570\u4f4d\u4e3a\u95f9\u94c3\u9891\u7387\uff0c\u5947\u6570\u4f4d\u4e3a\u5bf9\u5e94\u9891\u7387\u7684\u64ad\u653e\u65f6\u95f4\u3002 clock_cmp \u51fd\u6570 time_adjust \u51fd\u6570 clock_display \u51fd\u6570 \u8c03\u8bd5\u8fc7\u7a0b\u548c\u8bbe\u8ba1\u6548\u679c \u8c03\u8bd5\u8fc7\u7a0b \u5728 protues \u4e2d\u5b8c\u6210\u7535\u8def\u539f\u7406\u56fe\u7684\u7ed8\u5236 \u5199\u597d\u4e3b\u8981\u4ee3\u7801\u6846\u67b6 \u5728 protues \u5b8c\u6210\u4e3b\u8981\u529f\u80fd\u7684\u4eff\u771f \u5b8c\u6210\u5355\u7247\u673a\u6700\u5c0f\u7cfb\u7edf\uff0c\u6309\u952e\u548c lcd \u63a5\u53e3\u7684\u710a\u63a5 \u7528 led \u706f\u6d4b\u8bd5 STC89C52 \u662f\u5426\u5de5\u4f5c \u68c0\u9a8c lcd12864 \u663e\u793a\u65e0\u8bef \u68c0\u9a8c3\u4e2a\u6309\u952e\u63a7\u5236\u65e0\u8bef \u710a\u63a5\u4e09\u6781\u7ba1\u4e0e\u5587\u53ed \u68c0\u9a8c\u95f9\u94c3\u529f\u80fd\u5b9e\u73b0 \u710a\u63a5\u4e09\u6781\u7ba1\u4e0e\u7ee7\u7535\u5668 \u68c0\u9a8c\u7ee7\u7535\u5668\u63a7\u5236\u529f\u80fd\u7684\u5b9e\u73b0 \u6574\u4f53\u68c0\u9a8c\u65e0\u8bef \u8bbe\u8ba1\u6548\u679c lcd12864 \u663e\u793a\u6548\u679c\uff1a \u7b2c\u4e00\u884c\u4e3a\u95f9\u94c3\u65f6\u95f4\uff0c\u7b2c\u4e8c\u884c\u4e3a\u73b0\u5728\u65f6\u95f4\uff0c\u53f3\u4e0b\u89d2\u4e3a\u95f9\u949f\u72b6\u6001 \u6309\u952e1,2\u8c03\u6574\u95f9\u94c3\u65f6\u95f4\uff0c\u6309\u952e3\u5f00\u542f\u95f9\u94c3\uff1a \u95f9\u94c3\u65f6\u95f4\u548c\u73b0\u5728\u65f6\u95f4\u76f8\u7b49\u4e14\u95f9\u949f\u4e3a\u5f00\u542f\u72b6\u6001\u65f6\uff0c\u7ee7\u7535\u5668\u5207\u6362\u72b6\u6001\uff0c\u7eff\u706f\u4eae\uff0c\u5587\u53ed\u64ad\u653e\u4e00\u6bb5\u97f3\u4e50\uff1a \u518d\u6309\u6309\u952e3\uff0c\u95f9\u949f\u5173\u95ed\uff0c\u5587\u53ed\u505c\u6b62\u64ad\u653e\uff0c\u4f46\u7ee7\u7535\u5668\u7ee7\u7eed\u5de5\u4f5c\u76f4\u5230\u4e0b\u6b21\u95f9\u94c3\uff1a \u4f5c\u8005\u4e0e\u4f5c\u54c1 \u5143\u5668\u4ef6\u8868\u548c\u6210\u672c\u6838\u7b97 \u5e8f\u53f7 \u5668\u4ef6\u540d\u79f0 \u578b\u53f7\u89c4\u683c \u6570\u91cf \u4ef7\u683c 1 STC89C52 40\u811a\u76f4\u63d2 1\u4e2a 3.13*1\u5143 2 \u6676\u632f 11.0592MHz 1\u4e2a 0.225*1\u5143 3 \u7535\u5bb9 33pf 2\u4e2a 0.024*2\u5143 4 \u7535\u5bb9 10uf 1\u4e2a 0.261*1\u5143 5 \u7535\u963b 200 1K 510K 10K 4\u4e2a 0.12*5\u5143 6 S9012 \u76f4\u63d2 2\u4e2a 0.0402*2\u5143 7 \u7ee7\u7535\u5668 5\u811a\u76f4\u63d2 1\u4e2a 2.00*1\u5143 8 \u5587\u53ed 8\u6b270.5w 1\u4e2a 1.21*1\u5143 9 \u8f7b\u89e6\u5f00\u5173 6*6*5 4\u4e2a 0.042*4\u5143 10 led 5mm\u7ea2\uff0c\u7eff\u76f4\u63d2 3\u4e2a 0.0364*3\u5143 11 \u4e07\u7528\u677f 10*10cm 1\u4e2a 2.28*1\u5143 12 LCD12864 \u84dd\u5c4f 1\u4e2a 25.8*1\u5143 13 \u675c\u90a6\u7ebf 10cm 12\u6839 0.01*12\u5143 14 \u6392\u9488 \u76f4\u63d2 2\u6392 0.20*2\u5143 15 \u5355\u7247\u673a\u6d4b\u8bd5\u6d3b\u52a8\u5e95\u5ea7 40\u811a 1\u4e2a 3.03*1\u5143 \u603b\u8ba1 39.642\u5143 \u4f5c\u54c1\u6210\u672c\u6838\u7b97\uff1a \u672c\u7cfb\u7edf\u7684\u8bbe\u8ba1\u6210\u672c\u662f39.642\u5143\uff0c\u4ef7\u683c\u8f83\u4f4e\uff0c\u5176\u4e2dLCD12864\u7684\u6210\u672c\u4e3a25.8\u5143\uff0c\u5360\u4e00\u534a\u4ee5\u4e0a\uff0c\u53ef\u4ee5\u4f7f\u7528\u8f83\u4e3a\u4fbf\u5b9c\u7684LCD1608\uff0c\u82e5\u518d\u8ffd\u6c42\u6027\u4ef7\u6bd4\uff0c\u53ef\u5c06LCD\u66f4\u6362\u4e3a\u6570\u7801\u7ba1\u663e\u793a\uff0c\u518d\u53bb\u6389\u4e00\u4e9b\u8c03\u8bd5\u7528\u7684\u6392\u9488\uff0c\u5e95\u5ea7\uff0c\u675c\u90a6\u7ebf\uff0c\u53ef\u5c06\u6210\u672c\u63a7\u5236\u518d15\u5143\u4ee5\u4e0b\u3002 \u540c\u7c7b\u578b\u4ea7\u54c1\u6210\u672c\u6bd4\u8f83 \u76f8\u6bd4\u4e8e\u540c\u7c7b\u4ea7\u54c1\uff0c\u6bd4\u8d77\u771f\u6b63\u5546\u4e1a\u5316\u7684\u6210\u54c1\u663e\u7136\u6ca1\u6709\u4f18\u52bf\uff08\u90fd\u662f\u4f7f\u7528\u4e13\u7528\u82af\u7247\uff0c\u6210\u672c\u53ea\u6709\u51e0\u5143\uff09\uff0c\u4f46\u6dd8\u5b9d\u4e0a51\u5355\u7247\u673a\u7684\u6210\u54c1\u90fd\u572860\u5143\u4ee5\u4e0a\uff0c\u800c\u672c\u7cfb\u7edf\u7684\u6210\u672c\u4ec5\u4ec5\u670939.522\u5143\uff0c\u5982\u53bb\u9664\u4e0d\u5fc5\u8981\u7684\u5143\u4ef6\uff0c\u53ef\u5c06\u6210\u672c\u63a7\u5236\u518d15\u5143\u4ee5\u4e0b\uff0c\u56e0\u6b64\u5728\u4ef7\u683c\u4e0a\u66f4\u52a0\u5177\u6709\u5e02\u573a\u7ade\u4e89\u529b\uff1b\u540c\u65f6\uff0c\u672c\u7cfb\u7edf\u5177\u6709\u66f4\u591a\u7684\u529f\u80fd\u9009\u62e9\uff0c\u6bd4\u5982\u7ee7\u7535\u5668\u63a7\u5236\u5bb6\u7535\u7684\u4f5c\u7528\uff0c\u4f46\u5728\u6027\u80fd\u65b9\u9762\uff0c\u7531\u4e8e\u5b9a\u65f6\u5668\u4f7f\u7528\u5355\u7247\u673a\u5185\u90e8\u5b9a\u65f6\u5668\uff0c\u800c\u5e02\u573a\u4e0a\u7684\u5927\u591a\u7531DS12C887\u5b8c\u6210\u5b9a\u65f6\uff0c\u6240\u4ee5\u65f6\u95f4\u51c6\u786e\u5ea6\u5ea6\u4e0d\u5982\u5e02\u573a\u4e0a\u7684\u3002","title":"\u57fa\u4e8e51\u7684\u5b9a\u65f6\u95f9\u949f"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#51","text":"","title":"\u57fa\u4e8e51\u7684\u5b9a\u65f6\u95f9\u949f"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_1","text":"\u8bfe\u7a0b\u8bbe\u8ba1\u540d\u79f0 \uff1a\u5b9a\u65f6\u95f9\u949f \u5b66\u751f\u59d3\u540d \uff1a \u73ed\u7ea7 \uff1a \u5b66\u53f7 \uff1a","title":"\u300a\u5355\u7247\u673a\u5e94\u7528\u8bbe\u8ba1\u300b\u8bfe\u7a0b\u8bbe\u8ba1\u603b\u7ed3\u62a5\u544a"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_2","text":"","title":"\u7814\u7a76\u610f\u4e49\u548c\u5b9e\u73b0\u529f\u80fd\u6307\u6807"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_3","text":"\u968f\u7740\u4eba\u4eec\u7269\u8d28\u751f\u6d3b\u6c34\u5e73\u7684\u63d0\u9ad8\uff0c\u5404\u79cd\u667a\u80fd\u5bb6\u5c45\u8fdb\u5165\u4eba\u4eec\u7684\u65e5\u5e38\u751f\u6d3b\u5f53\u4e2d\u3002\u5728\u65e5\u5e38\u751f\u6d3b\u5f53\u4e2d\uff0c\u6211\u4eec\u4e0d\u4ec5\u9700\u8981\u95f9\u949f\u7ed9\u6211\u4eec\u5b9a\u65f6\u63d0\u9192\uff0c\u8fd8\u9700\u8981\u4f7f\u7528\u4f5c\u4e3a\u5b9a\u65f6\u5668\u63a7\u5236\u4e00\u4e9b\u4e0d\u5177\u5907\u5b9a\u65f6\u529f\u80fd\u7684\u5bb6\u7535\u7684\u4f7f\u7528\uff0c\u4ece\u800c\u63d0\u9ad8\u751f\u6d3b\u7684\u4fbf\u5229\u6027\uff0c\u8fd9\u6837\u7684\u7814\u7a76\u662f\u5177\u6709\u610f\u4e49\u7684\u3002","title":"\u7814\u7a76\u610f\u4e49"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_4","text":"\u5229\u75283\u4e2a\u6309\u952e\u8c03\u6574\u73b0\u5728\u65f6\u95f4\uff0c\u95f9\u94c3\u65f6\u95f4\u4ee5\u53ca\u95f9\u949f\u7684\u5f00\u5173\u3002 \u4f7f\u7528LCD12864\u663e\u793a\u73b0\u5728\u65f6\u95f4\uff0c\u95f9\u94c3\u65f6\u95f4\u4ee5\u53ca\u95f9\u949f\u7684\u72b6\u6001\u3002 \u5587\u53ed\u64ad\u653e\u95f9\u94c3\u97f3\u4e50\uff0c\u7ee7\u7535\u5668\u5b9a\u65f6\u63a7\u5236\u5bb6\u7535\u7684\u5f00\u5173\u3002","title":"\u8bfe\u7a0b\u8bbe\u8ba1\u8981\u6c42"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_5","text":"\u7075\u6d3b\u6027\u597d\uff0c\u53ef\u79fb\u690d\u6027\u9ad8\uff0c\u53ea\u9700\u8981\u7ecf\u8fc7\u6781\u5c11\u91cf\u7684\u6539\u52a8\uff0c\u53ef\u9002\u5e94\u5927\u591a\u6570\u4f20\u7edf\u5bb6\u7535\u7684\u667a\u80fd\u5316\u4f7f\u7528\u3002 \u5177\u6709\u5b9e\u65f6\u663e\u793a\uff0c\u591c\u95f4\u4f7f\u7528\u7684\u80fd\u529b\u3002 \u5587\u53ed\u53ef\u81ea\u5b9a\u4e49\u97f3\u4e50\u64ad\u653e\u3002 \u6210\u672c\u6781\u4f4e\u3002","title":"\u8bbe\u8ba1\u7279\u8272\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_6","text":"\u7a0b\u5e8f\u6267\u884c\u540e\u5de5\u4f5c\u6307\u793a\u706fLED\u95ea\u52a8\uff0c\u8868\u793a\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\uff0c\u73b0\u5728\u548c\u95f9\u94c3\u65f6\u95f4\u90fd\u663e\u793a\u4e3a\u201c00\uff1a00\u201d\uff0c\u6309\u4e0b\u64cd\u4f5c\u952eK1-K3\u52a8\u4f5c\u5982\u4e0b\uff1a 1. K1\u2014\u8bbe\u7f6e\u73b0\u5728\u7684\u65f6\u95f4\u3002 2. K2\u2014\u8bbe\u7f6e\u95f9\u94c3\u7684\u65f6\u95f4\u3002 3. K3\u2014\u95f9\u94c3ON/OFF\u7684\u72b6\u6001\u8bbe\u7f6e\uff0c\u95f9\u949f\u54cd\u94c3\u65f6\uff0c\u53ef\u901a\u8fc7\u6b64\u6309\u952e\u5173\u95ed\u3002 \u5f53\u8bbe\u7f6e\u65f6\u95f4\u65f6\uff0c\u95f9\u949f\u6682\u505c\u8ba1\u65f6\uff0c\u8bbe\u7f6e\u5f53\u524d\u65f6\u95f4\u6216\u95f9\u94c3\u65f6\u95f4\u5982\u4e0b\u3002 1. K1\u2014\u65f6\u8c03\u6574\u3002 2. K2\u2014\u5206\u8c03\u6574\u3002 3. K3\u2014\u8bbe\u7f6e\u5b8c\u6210","title":"\u4f7f\u7528\u65b9\u6cd5"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_7","text":"\u65f6\u95f4\u51c6\u786e\u5ea6 \u7535\u8def\u529f\u8017\uff0c\u7535\u6c60\u7eed\u822a\u80fd\u529b","title":"\u6280\u672f\u6307\u6807"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_8","text":"\u6309\u7167\u7cfb\u7edf\u8bbe\u8ba1\u529f\u80fd\u7684\u8981\u6c42\uff0c\u786e\u5b9a\u7cfb\u7edf\u75316\u4e2a\u6a21\u5757\u7ec4\u6210\uff1a\u4e3b\u63a7\u5236\u5668\u3001\u95f9\u94c3\u7535\u8def\u3001\u7535\u6e90\u7535\u8def\u3001\u6309\u952e\u7535\u8def\u3001\u663e\u793a\u7535\u8def\u548c\u7ee7\u7535\u5668\u5f00\u5173\u7535\u8def\uff0c\u7ed3\u6784\u6846\u56fe\u5982\u56fe\u6240\u793a\u3002","title":"\u603b\u8bbe\u8ba1\u6846\u56fe"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#lcd1264","text":"\u5176\u4e2dLCD12864\u4f7f\u7528ST7920\u63a7\u5236\u5668\uff0c\u81ea\u5e26\u4e2d\u6587\u5b57\u5e93\uff0c\u53ef\u663e\u793a\u6c49\u5b57\u53ca\u56fe\u5f62\uff0c\u5185\u7f6e8192\u4e2a\u4e2d\u6587\u6c49\u5b57\uff0816X16\u70b9\u9635\uff09\u3001128\u4e2a\u5b57\u7b26\uff088X16\u70b9\u9635\uff09\u53ca64X256\u70b9\u9635\u663e\u793aRAM\uff08GDRAM\uff09\u3002 \u4e3b\u8981\u6280\u672f\u53c2\u6570\u548c\u663e\u793a\u7279\u6027: \u7535\u6e90\uff1aVDD 3.3V~+5V(\u5185\u7f6e\u5347\u538b\u7535\u8def\uff0c\u65e0\u9700\u8d1f\u538b)\uff1b \u663e\u793a\u5185\u5bb9\uff1a128\u5217\u00d7 64\u884c \u663e\u793a\u989c\u8272\uff1a\u9ec4\u7eff LCD\u7c7b\u578b\uff1aSTN \u4e0eMCU\u63a5\u53e3\uff1a8\u4f4d\u62164\u4f4d\u5e76\u884c/3\u4f4d\u4e32\u884c \u914d\u7f6eLED\u80cc\u5149 \u591a\u79cd\u8f6f\u4ef6\u529f\u80fd\uff1a\u5149\u6807\u663e\u793a\u3001\u753b\u9762\u79fb\u4f4d\u3001\u81ea\u5b9a\u4e49\u5b57\u7b26\u3001\u7761\u7720\u6a21\u5f0f\u7b49","title":"LCD1264\u8bf4\u660e"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_9","text":"","title":"\u5e76\u884c\u5199\u65f6\u5e8f"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_10","text":"","title":"\u5e76\u884c\u8bfb\u65f6\u5e8f"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#gdram","text":"","title":"GDRAM\u5730\u5740"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_11","text":"","title":"\u786c\u4ef6\u7535\u8def\u8bbe\u8ba1\u5b9e\u73b0"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_12","text":"","title":"\u539f\u7406\u56fe"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_13","text":"","title":"\u6a21\u5757\u8bf4\u660e"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_14","text":"\u6309\u952eK1-K3\u5206\u522b\u8fde\u63a5\u81f3P3.0-P3.2\u53e3\uff0c\u7136\u540e\u5e76\u8054\u63a5\u5730\uff0c\u6bcf\u5f53\u76f8\u5e94\u6309\u952e\u6309\u4e0b\u65f6\uff0c\u5bf9\u5e94I/O\u53e3\u63a5\u53d7\u5230\u4f4e\u7535\u5e73\uff0c\u5b8c\u6210\u76f8\u5e94\u529f\u80fd\u3002","title":"\u6309\u952e\u6a21\u5757"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_15","text":"\u5355\u7247\u673a\u4e0a\u7535I/O\u53e3\u4e3a\u9ad8\u7535\u5e73\uff0c\u5176\u76f8\u5e94\u7684PNP\u7ba1\u5de5\u4f5c\u5728\u622a\u6b62\u72b6\u6001\uff0c\u95f9\u94c3\u89e6\u53d1\u540e\uff0cI/O\u53e3\u62c9\u4f4ePNP\u7ba1\u5de5\u4f5c\u5728\u653e\u5927\u72b6\u6001\uff0c\u5587\u53ed\u548c\u7ee7\u7535\u5668\u5c31\u5f00\u59cb\u5de5\u4f5c\u3002","title":"\u95f9\u94c3\uff0c\u7ee7\u7535\u5668\u6a21\u5757"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_16","text":"","title":"\u8f6f\u4ef6\u8bbe\u8ba1"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_17","text":"","title":"\u4e3b\u8981\u6570\u636e\u7ed3\u6784"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_18","text":"\u5176\u4e2d init \u4e3a\u521d\u59cb\u5316\u51fd\u6570\uff0c keyscan \u4e3a\u6309\u952e\u626b\u63cf\u51fd\u6570\uff0c play_song \u4e3a\u97f3\u4e50\u64ad\u653e\u51fd\u6570\uff0c clock_cmp \u4e3a\u65f6\u95f4\u5bf9\u6bd4\u51fd\u6570\uff0c time_adjust \u4e3a\u65f6\u95f4\u8c03\u6574\u51fd\u6570\uff0c clock_display \u4e3a\u65f6\u949f\u663e\u793a\u51fd\u6570\u3002","title":"\u51fd\u6570\u8c03\u7528\u5173\u7cfb\u56fe"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_19","text":"","title":"\u4e3b\u8981\u51fd\u6570\u7684\u63a7\u5236\u6d41\u7a0b\u56fe"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#main","text":"","title":"main\u51fd\u6570"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#init","text":"\u5bf9LCD12864\uff0c\u5b9a\u65f6\u56680\uff0c1\uff0c\u5587\u53ed\u4ee5\u53ca\u7ee7\u7535\u5668I/O\u53e3\u7684\u521d\u59cb\u5316\uff0c wela \u548c dula \u4ec5\u5728\u8c03\u8bd5\u4e2d\u4f7f\u7528\u3002","title":"init\u51fd\u6570"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#keyscan","text":"\u6309\u987a\u5e8f\u5bf9\u4e09\u4e2a\u6309\u952e\u8fdb\u884c\u626b\u63cf\u3002","title":"keyscan\u51fd\u6570"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#play_song","text":"song[] \u4e3a\u6b4c\u66f2\u5b58\u653e\u7684\u6570\u7ec4\uff0c\u5176\u5076\u6570\u4f4d\u4e3a\u95f9\u94c3\u9891\u7387\uff0c\u5947\u6570\u4f4d\u4e3a\u5bf9\u5e94\u9891\u7387\u7684\u64ad\u653e\u65f6\u95f4\u3002","title":"play_song\u51fd\u6570"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#clock_cmp","text":"","title":"clock_cmp\u51fd\u6570"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#time_adjust","text":"","title":"time_adjust\u51fd\u6570"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#clock_display","text":"","title":"clock_display\u51fd\u6570"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_20","text":"","title":"\u8c03\u8bd5\u8fc7\u7a0b\u548c\u8bbe\u8ba1\u6548\u679c"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_21","text":"\u5728 protues \u4e2d\u5b8c\u6210\u7535\u8def\u539f\u7406\u56fe\u7684\u7ed8\u5236 \u5199\u597d\u4e3b\u8981\u4ee3\u7801\u6846\u67b6 \u5728 protues \u5b8c\u6210\u4e3b\u8981\u529f\u80fd\u7684\u4eff\u771f \u5b8c\u6210\u5355\u7247\u673a\u6700\u5c0f\u7cfb\u7edf\uff0c\u6309\u952e\u548c lcd \u63a5\u53e3\u7684\u710a\u63a5 \u7528 led \u706f\u6d4b\u8bd5 STC89C52 \u662f\u5426\u5de5\u4f5c \u68c0\u9a8c lcd12864 \u663e\u793a\u65e0\u8bef \u68c0\u9a8c3\u4e2a\u6309\u952e\u63a7\u5236\u65e0\u8bef \u710a\u63a5\u4e09\u6781\u7ba1\u4e0e\u5587\u53ed \u68c0\u9a8c\u95f9\u94c3\u529f\u80fd\u5b9e\u73b0 \u710a\u63a5\u4e09\u6781\u7ba1\u4e0e\u7ee7\u7535\u5668 \u68c0\u9a8c\u7ee7\u7535\u5668\u63a7\u5236\u529f\u80fd\u7684\u5b9e\u73b0 \u6574\u4f53\u68c0\u9a8c\u65e0\u8bef","title":"\u8c03\u8bd5\u8fc7\u7a0b"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_22","text":"lcd12864 \u663e\u793a\u6548\u679c\uff1a \u7b2c\u4e00\u884c\u4e3a\u95f9\u94c3\u65f6\u95f4\uff0c\u7b2c\u4e8c\u884c\u4e3a\u73b0\u5728\u65f6\u95f4\uff0c\u53f3\u4e0b\u89d2\u4e3a\u95f9\u949f\u72b6\u6001 \u6309\u952e1,2\u8c03\u6574\u95f9\u94c3\u65f6\u95f4\uff0c\u6309\u952e3\u5f00\u542f\u95f9\u94c3\uff1a \u95f9\u94c3\u65f6\u95f4\u548c\u73b0\u5728\u65f6\u95f4\u76f8\u7b49\u4e14\u95f9\u949f\u4e3a\u5f00\u542f\u72b6\u6001\u65f6\uff0c\u7ee7\u7535\u5668\u5207\u6362\u72b6\u6001\uff0c\u7eff\u706f\u4eae\uff0c\u5587\u53ed\u64ad\u653e\u4e00\u6bb5\u97f3\u4e50\uff1a \u518d\u6309\u6309\u952e3\uff0c\u95f9\u949f\u5173\u95ed\uff0c\u5587\u53ed\u505c\u6b62\u64ad\u653e\uff0c\u4f46\u7ee7\u7535\u5668\u7ee7\u7eed\u5de5\u4f5c\u76f4\u5230\u4e0b\u6b21\u95f9\u94c3\uff1a \u4f5c\u8005\u4e0e\u4f5c\u54c1","title":"\u8bbe\u8ba1\u6548\u679c"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_23","text":"\u5e8f\u53f7 \u5668\u4ef6\u540d\u79f0 \u578b\u53f7\u89c4\u683c \u6570\u91cf \u4ef7\u683c 1 STC89C52 40\u811a\u76f4\u63d2 1\u4e2a 3.13*1\u5143 2 \u6676\u632f 11.0592MHz 1\u4e2a 0.225*1\u5143 3 \u7535\u5bb9 33pf 2\u4e2a 0.024*2\u5143 4 \u7535\u5bb9 10uf 1\u4e2a 0.261*1\u5143 5 \u7535\u963b 200 1K 510K 10K 4\u4e2a 0.12*5\u5143 6 S9012 \u76f4\u63d2 2\u4e2a 0.0402*2\u5143 7 \u7ee7\u7535\u5668 5\u811a\u76f4\u63d2 1\u4e2a 2.00*1\u5143 8 \u5587\u53ed 8\u6b270.5w 1\u4e2a 1.21*1\u5143 9 \u8f7b\u89e6\u5f00\u5173 6*6*5 4\u4e2a 0.042*4\u5143 10 led 5mm\u7ea2\uff0c\u7eff\u76f4\u63d2 3\u4e2a 0.0364*3\u5143 11 \u4e07\u7528\u677f 10*10cm 1\u4e2a 2.28*1\u5143 12 LCD12864 \u84dd\u5c4f 1\u4e2a 25.8*1\u5143 13 \u675c\u90a6\u7ebf 10cm 12\u6839 0.01*12\u5143 14 \u6392\u9488 \u76f4\u63d2 2\u6392 0.20*2\u5143 15 \u5355\u7247\u673a\u6d4b\u8bd5\u6d3b\u52a8\u5e95\u5ea7 40\u811a 1\u4e2a 3.03*1\u5143 \u603b\u8ba1 39.642\u5143","title":"\u5143\u5668\u4ef6\u8868\u548c\u6210\u672c\u6838\u7b97"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_24","text":"\u672c\u7cfb\u7edf\u7684\u8bbe\u8ba1\u6210\u672c\u662f39.642\u5143\uff0c\u4ef7\u683c\u8f83\u4f4e\uff0c\u5176\u4e2dLCD12864\u7684\u6210\u672c\u4e3a25.8\u5143\uff0c\u5360\u4e00\u534a\u4ee5\u4e0a\uff0c\u53ef\u4ee5\u4f7f\u7528\u8f83\u4e3a\u4fbf\u5b9c\u7684LCD1608\uff0c\u82e5\u518d\u8ffd\u6c42\u6027\u4ef7\u6bd4\uff0c\u53ef\u5c06LCD\u66f4\u6362\u4e3a\u6570\u7801\u7ba1\u663e\u793a\uff0c\u518d\u53bb\u6389\u4e00\u4e9b\u8c03\u8bd5\u7528\u7684\u6392\u9488\uff0c\u5e95\u5ea7\uff0c\u675c\u90a6\u7ebf\uff0c\u53ef\u5c06\u6210\u672c\u63a7\u5236\u518d15\u5143\u4ee5\u4e0b\u3002","title":"\u4f5c\u54c1\u6210\u672c\u6838\u7b97\uff1a"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/QuickAlarm/#_25","text":"\u76f8\u6bd4\u4e8e\u540c\u7c7b\u4ea7\u54c1\uff0c\u6bd4\u8d77\u771f\u6b63\u5546\u4e1a\u5316\u7684\u6210\u54c1\u663e\u7136\u6ca1\u6709\u4f18\u52bf\uff08\u90fd\u662f\u4f7f\u7528\u4e13\u7528\u82af\u7247\uff0c\u6210\u672c\u53ea\u6709\u51e0\u5143\uff09\uff0c\u4f46\u6dd8\u5b9d\u4e0a51\u5355\u7247\u673a\u7684\u6210\u54c1\u90fd\u572860\u5143\u4ee5\u4e0a\uff0c\u800c\u672c\u7cfb\u7edf\u7684\u6210\u672c\u4ec5\u4ec5\u670939.522\u5143\uff0c\u5982\u53bb\u9664\u4e0d\u5fc5\u8981\u7684\u5143\u4ef6\uff0c\u53ef\u5c06\u6210\u672c\u63a7\u5236\u518d15\u5143\u4ee5\u4e0b\uff0c\u56e0\u6b64\u5728\u4ef7\u683c\u4e0a\u66f4\u52a0\u5177\u6709\u5e02\u573a\u7ade\u4e89\u529b\uff1b\u540c\u65f6\uff0c\u672c\u7cfb\u7edf\u5177\u6709\u66f4\u591a\u7684\u529f\u80fd\u9009\u62e9\uff0c\u6bd4\u5982\u7ee7\u7535\u5668\u63a7\u5236\u5bb6\u7535\u7684\u4f5c\u7528\uff0c\u4f46\u5728\u6027\u80fd\u65b9\u9762\uff0c\u7531\u4e8e\u5b9a\u65f6\u5668\u4f7f\u7528\u5355\u7247\u673a\u5185\u90e8\u5b9a\u65f6\u5668\uff0c\u800c\u5e02\u573a\u4e0a\u7684\u5927\u591a\u7531DS12C887\u5b8c\u6210\u5b9a\u65f6\uff0c\u6240\u4ee5\u65f6\u95f4\u51c6\u786e\u5ea6\u5ea6\u4e0d\u5982\u5e02\u573a\u4e0a\u7684\u3002","title":"\u540c\u7c7b\u578b\u4ea7\u54c1\u6210\u672c\u6bd4\u8f83"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/","text":"\u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362 1. \u5b9e\u9a8c\u9879\u76ee\u540d\u79f0 \u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362 2.\u5b9e\u9a8c\u76ee\u7684 \u52a0\u6df1\u5bf9DFT\u6027\u8d28\u7684\u7406\u89e3\uff0c\u62d3\u5c55\u5b83\u4eec\u5728DSP\u4e2d\u7684\u4f7f\u7528\uff0c\u8981\u6c421\u4eba1\u7ec4\uff0c2\u5b66\u65f6\u3002 3. \u5b9e\u9a8c\u5185\u5bb9\u4e0e\u6b65\u9aa4 \u5b9e\u9a8c\u5185\u5bb9\uff1a 1. \u7531DFT\u5b9a\u4e49\u5f0f\uff1a X(k)=DFT[x(t)]=\\sum_{n=0}^{N-1}x(n)W_N^{kn} X(k)=DFT[x(t)]=\\sum_{n=0}^{N-1}x(n)W_N^{kn} \u5c06\u5176\u5199\u6210\u77e9\u9635\u65b9\u7a0b\u8868\u793a\u4e3a\uff1a X=W_Nx X=W_Nx \u5176\u4e2d\uff0c x=\\begin{bmatrix} x(0)\\\\ x(1)\\\\ \\vdots\\\\ x(N-1) \\end{bmatrix}\\ X=\\begin{bmatrix} X(0)\\\\ X(1)\\\\ \\vdots\\\\ X(N-1) \\end{bmatrix} x=\\begin{bmatrix} x(0)\\\\ x(1)\\\\ \\vdots\\\\ x(N-1) \\end{bmatrix}\\ X=\\begin{bmatrix} X(0)\\\\ X(1)\\\\ \\vdots\\\\ X(N-1) \\end{bmatrix} W_N=\\begin{bmatrix} 1 & 1 & 1 & \\dotsb & 1\\\\ 1 & W_N^1 & W_N^2 & \\dotsb & W_N^{N-1}\\\\ 1 & W_N^2 & W_N^4 & \\dotsb & W_N^{2(N-1)}\\\\ \\vdots & \\vdots & \\vdots & \\ddots & \\vdots\\\\ 1 & W_N^{(N-1)} & W_N^{2(N-1)} & \\dotsb & W_N^{(N-1)\\times(N-1)} \\end{bmatrix} W_N=\\begin{bmatrix} 1 & 1 & 1 & \\dotsb & 1\\\\ 1 & W_N^1 & W_N^2 & \\dotsb & W_N^{N-1}\\\\ 1 & W_N^2 & W_N^4 & \\dotsb & W_N^{2(N-1)}\\\\ \\vdots & \\vdots & \\vdots & \\ddots & \\vdots\\\\ 1 & W_N^{(N-1)} & W_N^{2(N-1)} & \\dotsb & W_N^{(N-1)\\times(N-1)} \\end{bmatrix} \u5229\u7528Matlab\u7684\u77e9\u9635\u8fd0\u7b97\u529f\u80fd\uff0c\u53ef\u7f16\u5199\u51fa\u8ba1\u7b97DFT\u7684\u51fd\u6570\u6587\u4ef6\u3002 function [ Xk ] = dft( xn,N ) %DFT Xk = dft(xn,N) %Xk = \u57280<=k<=N-1 \u95f4\u7684DFT\u7cfb\u6570\u6570\u7ec4 %xn = N\u70b9\u6709\u9650\u957f\u5ea6\u5e8f\u5217 %N = DFT\u7684\u957f\u5ea6 n = [0:1:N-1]; k = [0:1:N-1]; WN = exp(-j*2*pi/N); nk = n'*k; WNnk = WN.^nk; Xk = xn * WNnk; \u8bf7\u7f16\u5199\u8ba1\u7b97\u79bb\u6563\u5085\u91cc\u53f6\u53cd\u53d8\u6362\u7684\u51fd\u6570\u6587\u4ef6\u3002 \u5229\u7528DFT\u505a\u8fde\u7eed\u4fe1\u53f7\u7684\u9891\u8c31\u5206\u6790 DFT(\u5b9e\u9645\u4e2d\u7528FFT\u8ba1\u7b97)\u53ef\u7528\u6765\u5bf9\u8fde\u7eed\u4fe1\u53f7\u548c\u6570\u5b57\u4fe1\u53f7\u8fdb\u884c\u8c31\u5206\u6790\u3002\u5728\u5b9e\u9645\u5206\u6790\u8fc7\u7a0b\u4e2d\uff0c\u8981\u5bf9\u8fde\u7eed\u4fe1\u53f7\u91c7\u6837\u548c\u622a\u65ad\uff0c\u7531\u6b64\u53ef\u80fd\u5f15\u8d77\u5206\u6790\u8bef\u5dee\u3002 \u6df7\u53e0\u6548\u5e94 \u5bf9\u8fde\u7eed\u4fe1\u53f7\u8fdb\u884c\u9891\u8c31\u5206\u6790\u65f6\uff0c\u9996\u5148\u8981\u5bf9\u5176\u91c7\u6837\uff0c\u53d8\u6210\u65f6\u57df\u79bb\u6563\u4fe1\u53f7\u540e\u624d\u80fd\u7528DFT\uff08FFT\uff09\u8fdb\u884c\u8c31\u5206\u6790\u3002\u91c7\u6837\u901f\u7387fs\u5fc5\u987b\u6ee1\u8db3\u91c7\u6837\u5b9a\u7406\uff0c\u5426\u5219\u4f1a\u5728w= \\pi \\pi \uff08\u5bf9\u5e94\u6a21\u62df\u9891\u7387f=fs/2\uff09\u9644\u8fd1\u53d1\u751f\u9891\u8c31\u6df7\u53e0\u73b0\u8c61\u3002 \u622a\u65ad\u6548\u5e94 \u5904\u7406\u5b9e\u9645\u4fe1\u53f7\u5e8f\u5217x(n)\u65f6\uff0c\u4e00\u822c\u603b\u8981\u5c06\u5b83\u622a\u65ad\u4e3a\u4e00\u6709\u9650\u957f\u5e8f\u5217\uff0c\u957f\u4e3aN\u70b9\uff0c\u76f8\u5f53\u4e8e\u4e58\u4ee5\u4e00\u4e2a\u77e9\u5f62\u7a97\u5f62\u6210\u6709\u9650\u957f\u5e8f\u5217y(n)=x(n)w(n)\u3002\u77e9\u5f62\u7a97\u51fd\u6570\u5176\u9891\u8c31\u6709\u4e3b\u74e3\uff0c\u4e5f\u8bb8\u8bb8\u591a\u526f\u74e3\uff0c\u7a97\u53e3\u8d8a\u5927\uff0c\u4e3b\u74e3\u8d8a\u7a84\uff0c\u5f53\u7a97\u53e3\u8d8b\u4e8e\u65e0\u7a77\u5927\u65f6\uff0c\u5c31\u662f\u4e00\u4e2a\u51b2\u51fb\u51fd\u6570\u3002\u65f6\u57df\u7684\u4e58\u79ef\u5bf9\u5e94\u4e8e\u9891\u57df\u7684\u5377\u79ef\uff0c\u6240\u4ee5\uff0c\u52a0\u7a97\u540e\u7684\u9891\u57df\u5b9e\u9645\u662f\u539f\u4fe1\u53f7\u9891\u8c31\u4e0e\u77e9\u5f62\u7a97\u51fd\u6570\u9891\u8c31\u7684\u5377\u79ef\uff0c\u5377\u79ef\u7684\u7ed3\u679c\u4f7f\u9891\u8c31\u5ef6\u4f38\u5230\u4e86\u4e3b\u74e3\u4ee5\u5916\uff0c\u4e14\u4e00\u76f4\u5ef6\u65f6\u5230\u65e0\u7a77\u3002\u5f53\u7a97\u53e3\u65e0\u7a77\u5927\u65f6\uff0c\u4e0e\u51b2\u51fb\u51fd\u6570\u7684\u5377\u79ef\u624d\u662f\u5176\u672c\u8eab\uff0c\u8fd9\u65f6\u65e0\u7578\u53d8\u3002\u8fd9\u79cd\u5dee\u522b\u8868\u73b0\u5bf9\u9891\u8c31\u5206\u6790\u7684\u5f71\u54cd\u4e3b\u8981\u8868\u73b0\u5728\u5982\u4e0b\u4e24\u4e2a\u65b9\u9762\uff1a \u9891\u8c31\u6cc4\u9732:\u539f\u6765\u5e8f\u5217x(n)\u7684\u9891\u8c31\u662f\u79bb\u6563\u8c31\u7ebf\uff0c\u7ecf\u622a\u65ad\u540e\uff0c\u539f\u6765\u79bb\u6563\u8c31\u7ebf\u5411\u9644\u8fd1\u5c55\u5bbd\u6cc4\u9732\u3002\u663e\u7136\uff0c\u6cc4\u9732\u4f7f\u9891\u8c31\u53d8\u6a21\u7cca\uff0c\u4f7f\u8c31\u5206\u8fa8\u7387\u964d\u4f4e\u3002 \u8c31\u95f4\u5e72\u6270:\u4e3b\u8c31\u7ebf\u4e24\u8fb9\u53c8\u5f88\u591a\u65c1\u8c31\uff0c\u5f15\u8d77\u4e0d\u540c\u9891\u7387\u5206\u91cf\u95f4\u5e72\u6270\uff0c\u8fd9\u4f7f\u8c31\u5206\u6790\u4ea7\u751f\u8f83\u5927\u504f\u5dee\u3002\u7a0b\u5ea6\u4e0e\u7a97\u51fd\u6570\u5e45\u5ea6\u8c31\u4e3b\u74e3\u5bbd\u5ea6\u76f4\u63a5\u76f8\u5173\u3002 \u6805\u680f\u6548\u5e94 \u6211\u4eec\u77e5\u9053\uff0cN\u70b9DFT\u662f\u9891\u7387\u533a\u95f4[0,2\u03c0]\u4e0a\u5bf9\u65f6\u57df\u79bb\u6563\u4fe1\u53f7\u7684\u9891\u8c31\u8fdb\u884cN\u70b9\u7b49\u95f4\u9694\u91c7\u6837\uff0c\u800c\u91c7\u6837\u70b9\u4e4b\u95f4\u7684\u9891\u8c31\u51fd\u6570\u662f\u770b\u4e0d\u89c1\u7684\u3002 4. \u5b9e\u9a8c\u73af\u5883 MATLAB R2019b 5. \u5b9e\u9a8c\u8fc7\u7a0b\u4e0e\u5206\u6790\u7a0b\u5e8f\u6587\u672c 1. IDFT\u51fd\u6570 function [ xn ] = idft( Xk,N ) %xn = N\u70b9\u6709\u9650\u957f\u5ea6\u5e8f\u5217 %N = DFT\u7684\u957f\u5ea6 n = [0:1:N-1]; %n\u7684\u884c\u5411\u91cf k = [0:1:N-1]; %k\u7684\u884c\u5411\u91cf WN = exp(j*2*pi/N); %Wn\u56e0\u5b50 nk = n'*k; %\u4ea7\u751f\u4e00\u4e2a\u542bnk\u503c\u7684N\u4e58N\u7ef4\u77e9\u9635 WNnk = WN.^nk; %IDFT\u77e9\u9635 xn = 1/N*Xk * WNnk; 2. \u5229\u7528DFT\u505a\u8fde\u7eed\u4fe1\u53f7\u7684\u9891\u8c31\u5206\u6790 \u5df2\u77e5\u8fde\u7eed\u5468\u671f\u4fe1\u53f7 x(t)=cos(10\\pi t)+2sin(18\\pi t) x(t)=cos(10\\pi t)+2sin(18\\pi t) \u786e\u5b9a\u4fe1\u53f7\u7684\u57fa\u9891 \\Omega \\Omega \u548c\u57fa\u672c\u5468\u671f \u57fa\u9891\u4e3a \\Omega=2\\pi \\Omega=2\\pi rad/s\uff0c\u57fa\u672c\u5468\u671f\u4e3a 2\\pi/2\\pi = 1 2\\pi/2\\pi = 1 s \u5206\u6790\u957f\u5ea6\u5206\u522b\u53d6 0.5T_p,1.5T_p,2T_p 0.5T_p,1.5T_p,2T_p \u65f6\uff0c\u5229\u7528FFT\u8ba1\u7b97\u5176\u5e45\u5ea6\u8c31\uff1a\u5bf9\u6240\u5f97\u7ed3\u679c\u8fdb\u884c\u6bd4\u8f83\uff0c\u603b\u7ed3\u5e94\u5982\u4f55\u9009\u53d6\u5206\u6790\u957f\u5ea6\u3002 matlab f1 = 5;%cos\u51fd\u6570\u7684\u9891\u7387 f2 = 9;%sin\u51fd\u6570\u7684\u9891\u7387 dt=1/100; t=[0:dt:1]; x1=cos(2*pi*f1*t)+2*sin(2*pi*f2*t); figure(1) subplot(211); plot(t,x1);%\u6837\u672c\u4fe1\u53f7\u7684\u5468\u671f\u4e3a1 title('\u56fe1.1\uff1a\u5b9e\u9a8c\u6837\u672c\u4fe1\u53f7'); xlabel('\u65f6\u95f4\uff08\u5355\u4f4d\uff1a\u79d2\uff09'),ylabel('\u5e45\u5ea6'); subplot(212); xk1 = fft(x1); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 stem(2*t,abs(xk1)); title('1Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684FFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); fs=10*f2;%\u4ee5\u6700\u5927\u9891\u7387\u768410\u500d\u4f5c\u4e3a\u91c7\u6837\u9891\u7387 n0=0.5,n1=1.5,n2=2;%\u8bbe\u5b9a\u5206\u6790\u957f\u5ea6 figure(2); L = fs*n0; n = 0:L-1; x = cos(2*pi*n*f1/fs)+2*sin(2*pi*n*f2/fs); xk1 = fft(x); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 subplot(211); stem(n/fs,x); title('\u56fe1.2\uff1a0.5Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684\u91c7\u6837\u7ed3\u679c'),xlabel('\u65f6\u95f4\uff08\u5355\u4f4d\uff1a\u79d2\uff09'); subplot(212); stem(2*n/L,abs(xk1)); title('0.5Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684FFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); figure(3); L = fs*n1; n = 0:L-1; x = cos(2*pi*n*f1/fs)+2*sin(2*pi*n*f2/fs); xk1 = fft(x); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 subplot(211); stem(n/fs,x); title('\u56fe1.3\uff1a1.5Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684\u91c7\u6837\u7ed3\u679c'),xlabel('\u65f6\u95f4\uff08\u5355\u4f4d\uff1a\u79d2\uff09'); subplot(212); stem(2*n/L,abs(xk1)); title('1.5Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684FFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); figure(4); L = fs*n2; n = 0:L-1; x = cos(2*pi*n*f1/fs)+2*sin(2*pi*n*f2/fs); xk1 = fft(x); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 subplot(211); stem(n/fs,x); title('\u56fe1.4\uff1a2Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684\u91c7\u6837\u7ed3\u679c'),xlabel('\u65f6\u95f4\uff08\u5355\u4f4d\uff1a\u79d2\uff09'); subplot(212); stem(2*n/L,abs(xk1)); title('2Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684FFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); \u7ed3\u679c\u5982\u56fe1.1-1.4. \u5bf9\u6a21\u62df\u4fe1\u53f7 x_a(t)=2sin(4\\pi t)+5cos(8\\pi t) x_a(t)=2sin(4\\pi t)+5cos(8\\pi t) ,\u4ee5\u91c7\u6837T=0.01\u79d2\u91c7\u6837\uff0c\u5206\u522b\u9009\u53d6N=40\uff0cN=50\uff0cN=60\u5f97\u5230x(n),\u7528N\u70b9DFT\u5f97\u5230\u5bf9 x_a(t) x_a(t) \u5e45\u5ea6\u8c31\u7684\u4f30\u8ba1\u5e76\u6bd4\u8f83\u7ed3\u679c\u3002 dt=1/100; t=[0:dt:0.5];%\u6837\u672c\u4fe1\u53f7\u7684\u5468\u671f\u4e3a1 f1=2; f2=4; xt=2*sin(2*pi*f1*t)+5*cos(2*pi*f2*t); %\u753b\u5e03\u5206\u5272 figure(1); stem(t,xt) title('\u56fe2.1\uff1a\u91c7\u6837\u4fe1\u53f7\u4fe1\u53f7'); xlabel('\u65f6\u95f4\uff08\u5355\u4f4d\uff1a\u79d2\uff09'),ylabel('\u5e45\u5ea6'); %\u753b\u5e03\u5206\u5272 figure(2); subplot(311); xk1 = fft(xt,40); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 n=[0:1:40-1] L=length(n); stem(n/L,abs(xk1)); title('\u56fe2.2.1\uff1a40\u4e2a\u91c7\u6837\u70b9\u7684DFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); subplot(312); xk1 = fft(xt,50); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 n=[0:1:50-1] L=length(n); stem(n/L,abs(xk1)); title('\u56fe2.2.2\uff1a50\u4e2a\u91c7\u6837\u70b9\u7684DFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); subplot(313); xk1 = fft(xt,60); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 n=[0:1:60-1] L=length(n); stem(n/L,abs(xk1)); title('\u56fe2.2.3\uff1a60\u4e2a\u91c7\u6837\u70b9\u7684DFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); \u7ed3\u679c\u5982\u56fe2.1-2.2 6. \u5b9e\u9a8c\u7ed3\u679c\u603b\u7ed3 7. \u7ed3\u679c\u5206\u6790 1. IDFT\u51fd\u6570 \u53ea\u9700\u8981\u5728DFT\u51fd\u6570\u57fa\u7840\u4e0a\u628a\u5355\u4f4d\u590d\u6570\u6839\u6539\u4e3a wN=exp(1j*2*pi/N) \uff0c\u6700\u540e\u7ed3\u679c\u518d\u4e581/N\u3002 2. \u5229\u7528DFT\u505a\u8fde\u7eed\u4fe1\u53f7\u7684\u9891\u8c31\u5206\u6790 \u5f53\u622a\u53d6\u957f\u5ea6\u4e3a 1T_p 1T_p \u4e0e 2T_p 2T_p \u65f6\uff0c\u53ef\u5f97\u5230\u5355\u4e00\u8c31\u7ebf\u7684\u9891\u8c31\uff0c\u800c\u957f\u5ea6\u4e3a 0.5T_p 0.5T_p \u548c 1.5T_p 1.5T_p \u65f6\u51fa\u73b0\u4e86\u9891\u8c31\u6cc4\u6f0f\u73b0\u8c61\u3002\u56e0\u800c\u5f53\u5206\u6790\u957f\u5ea6\u4e0d\u4e3a\u6837\u672c\u5468\u671f\u7684\u6574\u6570\u500d\u65f6\uff0c\u5c06\u4f1a\u51fa\u73b0\u9891\u7387\u6cc4\u9732\u73b0\u8c61\uff0c\u65e0\u6cd5\u5f97\u5230\u5355\u4e00\u8c31\u7ebf\u7684\u9891\u8c31\u3002 \u53ea\u6709\u5f53\u622a\u65ad\u70b9\u6570\u4e3a\u6837\u672c\u4fe1\u53f7\u5b8c\u6574\u5468\u671f\u7684\u91c7\u6837\u70b9\u6570\u7684\u6574\u6570\u500d\u65f6\uff0c\u624d\u4e0d\u4f1a\u53d1\u751f\u9891\u7387\u6cc4\u9732\u73b0\u8c61\uff0c\u800c\u672c\u9898\u7684\u57fa\u672c\u5468\u671f\u4e3a T=0.5s T=0.5s \uff0c\u6240\u4ee5\u53ea\u6709\u5f53 N=50 N=50 \u65f6\uff0c\u6240\u5f97\u9891\u8c31\u56fe\u50cf\u4e3a\u5355\u4e00\u7684\u8c31\u7ebf\u3002 8.\u5fc3\u5f97\u4f53\u4f1a \u52a8\u624b\u5b9e\u73b0\u4e86IDFT\uff0c\u5bf9\u5176\u8bb0\u5fc6\u52a0\u6df1\u3002 \u4e86\u89e3\u5230\u4e86\u9891\u8c31\u6cc4\u9732\u73b0\u8c61\uff0c\u4ee5\u53ca\u907f\u514d\u5176\u53d1\u751f\u7684\u65b9\u6cd5\u3002","title":"\u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/#_1","text":"","title":"\u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/#1","text":"\u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362","title":"1. \u5b9e\u9a8c\u9879\u76ee\u540d\u79f0"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/#2","text":"\u52a0\u6df1\u5bf9DFT\u6027\u8d28\u7684\u7406\u89e3\uff0c\u62d3\u5c55\u5b83\u4eec\u5728DSP\u4e2d\u7684\u4f7f\u7528\uff0c\u8981\u6c421\u4eba1\u7ec4\uff0c2\u5b66\u65f6\u3002","title":"2.\u5b9e\u9a8c\u76ee\u7684"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/#3","text":"\u5b9e\u9a8c\u5185\u5bb9\uff1a 1. \u7531DFT\u5b9a\u4e49\u5f0f\uff1a X(k)=DFT[x(t)]=\\sum_{n=0}^{N-1}x(n)W_N^{kn} X(k)=DFT[x(t)]=\\sum_{n=0}^{N-1}x(n)W_N^{kn} \u5c06\u5176\u5199\u6210\u77e9\u9635\u65b9\u7a0b\u8868\u793a\u4e3a\uff1a X=W_Nx X=W_Nx \u5176\u4e2d\uff0c x=\\begin{bmatrix} x(0)\\\\ x(1)\\\\ \\vdots\\\\ x(N-1) \\end{bmatrix}\\ X=\\begin{bmatrix} X(0)\\\\ X(1)\\\\ \\vdots\\\\ X(N-1) \\end{bmatrix} x=\\begin{bmatrix} x(0)\\\\ x(1)\\\\ \\vdots\\\\ x(N-1) \\end{bmatrix}\\ X=\\begin{bmatrix} X(0)\\\\ X(1)\\\\ \\vdots\\\\ X(N-1) \\end{bmatrix} W_N=\\begin{bmatrix} 1 & 1 & 1 & \\dotsb & 1\\\\ 1 & W_N^1 & W_N^2 & \\dotsb & W_N^{N-1}\\\\ 1 & W_N^2 & W_N^4 & \\dotsb & W_N^{2(N-1)}\\\\ \\vdots & \\vdots & \\vdots & \\ddots & \\vdots\\\\ 1 & W_N^{(N-1)} & W_N^{2(N-1)} & \\dotsb & W_N^{(N-1)\\times(N-1)} \\end{bmatrix} W_N=\\begin{bmatrix} 1 & 1 & 1 & \\dotsb & 1\\\\ 1 & W_N^1 & W_N^2 & \\dotsb & W_N^{N-1}\\\\ 1 & W_N^2 & W_N^4 & \\dotsb & W_N^{2(N-1)}\\\\ \\vdots & \\vdots & \\vdots & \\ddots & \\vdots\\\\ 1 & W_N^{(N-1)} & W_N^{2(N-1)} & \\dotsb & W_N^{(N-1)\\times(N-1)} \\end{bmatrix} \u5229\u7528Matlab\u7684\u77e9\u9635\u8fd0\u7b97\u529f\u80fd\uff0c\u53ef\u7f16\u5199\u51fa\u8ba1\u7b97DFT\u7684\u51fd\u6570\u6587\u4ef6\u3002 function [ Xk ] = dft( xn,N ) %DFT Xk = dft(xn,N) %Xk = \u57280<=k<=N-1 \u95f4\u7684DFT\u7cfb\u6570\u6570\u7ec4 %xn = N\u70b9\u6709\u9650\u957f\u5ea6\u5e8f\u5217 %N = DFT\u7684\u957f\u5ea6 n = [0:1:N-1]; k = [0:1:N-1]; WN = exp(-j*2*pi/N); nk = n'*k; WNnk = WN.^nk; Xk = xn * WNnk; \u8bf7\u7f16\u5199\u8ba1\u7b97\u79bb\u6563\u5085\u91cc\u53f6\u53cd\u53d8\u6362\u7684\u51fd\u6570\u6587\u4ef6\u3002 \u5229\u7528DFT\u505a\u8fde\u7eed\u4fe1\u53f7\u7684\u9891\u8c31\u5206\u6790 DFT(\u5b9e\u9645\u4e2d\u7528FFT\u8ba1\u7b97)\u53ef\u7528\u6765\u5bf9\u8fde\u7eed\u4fe1\u53f7\u548c\u6570\u5b57\u4fe1\u53f7\u8fdb\u884c\u8c31\u5206\u6790\u3002\u5728\u5b9e\u9645\u5206\u6790\u8fc7\u7a0b\u4e2d\uff0c\u8981\u5bf9\u8fde\u7eed\u4fe1\u53f7\u91c7\u6837\u548c\u622a\u65ad\uff0c\u7531\u6b64\u53ef\u80fd\u5f15\u8d77\u5206\u6790\u8bef\u5dee\u3002 \u6df7\u53e0\u6548\u5e94 \u5bf9\u8fde\u7eed\u4fe1\u53f7\u8fdb\u884c\u9891\u8c31\u5206\u6790\u65f6\uff0c\u9996\u5148\u8981\u5bf9\u5176\u91c7\u6837\uff0c\u53d8\u6210\u65f6\u57df\u79bb\u6563\u4fe1\u53f7\u540e\u624d\u80fd\u7528DFT\uff08FFT\uff09\u8fdb\u884c\u8c31\u5206\u6790\u3002\u91c7\u6837\u901f\u7387fs\u5fc5\u987b\u6ee1\u8db3\u91c7\u6837\u5b9a\u7406\uff0c\u5426\u5219\u4f1a\u5728w= \\pi \\pi \uff08\u5bf9\u5e94\u6a21\u62df\u9891\u7387f=fs/2\uff09\u9644\u8fd1\u53d1\u751f\u9891\u8c31\u6df7\u53e0\u73b0\u8c61\u3002 \u622a\u65ad\u6548\u5e94 \u5904\u7406\u5b9e\u9645\u4fe1\u53f7\u5e8f\u5217x(n)\u65f6\uff0c\u4e00\u822c\u603b\u8981\u5c06\u5b83\u622a\u65ad\u4e3a\u4e00\u6709\u9650\u957f\u5e8f\u5217\uff0c\u957f\u4e3aN\u70b9\uff0c\u76f8\u5f53\u4e8e\u4e58\u4ee5\u4e00\u4e2a\u77e9\u5f62\u7a97\u5f62\u6210\u6709\u9650\u957f\u5e8f\u5217y(n)=x(n)w(n)\u3002\u77e9\u5f62\u7a97\u51fd\u6570\u5176\u9891\u8c31\u6709\u4e3b\u74e3\uff0c\u4e5f\u8bb8\u8bb8\u591a\u526f\u74e3\uff0c\u7a97\u53e3\u8d8a\u5927\uff0c\u4e3b\u74e3\u8d8a\u7a84\uff0c\u5f53\u7a97\u53e3\u8d8b\u4e8e\u65e0\u7a77\u5927\u65f6\uff0c\u5c31\u662f\u4e00\u4e2a\u51b2\u51fb\u51fd\u6570\u3002\u65f6\u57df\u7684\u4e58\u79ef\u5bf9\u5e94\u4e8e\u9891\u57df\u7684\u5377\u79ef\uff0c\u6240\u4ee5\uff0c\u52a0\u7a97\u540e\u7684\u9891\u57df\u5b9e\u9645\u662f\u539f\u4fe1\u53f7\u9891\u8c31\u4e0e\u77e9\u5f62\u7a97\u51fd\u6570\u9891\u8c31\u7684\u5377\u79ef\uff0c\u5377\u79ef\u7684\u7ed3\u679c\u4f7f\u9891\u8c31\u5ef6\u4f38\u5230\u4e86\u4e3b\u74e3\u4ee5\u5916\uff0c\u4e14\u4e00\u76f4\u5ef6\u65f6\u5230\u65e0\u7a77\u3002\u5f53\u7a97\u53e3\u65e0\u7a77\u5927\u65f6\uff0c\u4e0e\u51b2\u51fb\u51fd\u6570\u7684\u5377\u79ef\u624d\u662f\u5176\u672c\u8eab\uff0c\u8fd9\u65f6\u65e0\u7578\u53d8\u3002\u8fd9\u79cd\u5dee\u522b\u8868\u73b0\u5bf9\u9891\u8c31\u5206\u6790\u7684\u5f71\u54cd\u4e3b\u8981\u8868\u73b0\u5728\u5982\u4e0b\u4e24\u4e2a\u65b9\u9762\uff1a \u9891\u8c31\u6cc4\u9732:\u539f\u6765\u5e8f\u5217x(n)\u7684\u9891\u8c31\u662f\u79bb\u6563\u8c31\u7ebf\uff0c\u7ecf\u622a\u65ad\u540e\uff0c\u539f\u6765\u79bb\u6563\u8c31\u7ebf\u5411\u9644\u8fd1\u5c55\u5bbd\u6cc4\u9732\u3002\u663e\u7136\uff0c\u6cc4\u9732\u4f7f\u9891\u8c31\u53d8\u6a21\u7cca\uff0c\u4f7f\u8c31\u5206\u8fa8\u7387\u964d\u4f4e\u3002 \u8c31\u95f4\u5e72\u6270:\u4e3b\u8c31\u7ebf\u4e24\u8fb9\u53c8\u5f88\u591a\u65c1\u8c31\uff0c\u5f15\u8d77\u4e0d\u540c\u9891\u7387\u5206\u91cf\u95f4\u5e72\u6270\uff0c\u8fd9\u4f7f\u8c31\u5206\u6790\u4ea7\u751f\u8f83\u5927\u504f\u5dee\u3002\u7a0b\u5ea6\u4e0e\u7a97\u51fd\u6570\u5e45\u5ea6\u8c31\u4e3b\u74e3\u5bbd\u5ea6\u76f4\u63a5\u76f8\u5173\u3002 \u6805\u680f\u6548\u5e94 \u6211\u4eec\u77e5\u9053\uff0cN\u70b9DFT\u662f\u9891\u7387\u533a\u95f4[0,2\u03c0]\u4e0a\u5bf9\u65f6\u57df\u79bb\u6563\u4fe1\u53f7\u7684\u9891\u8c31\u8fdb\u884cN\u70b9\u7b49\u95f4\u9694\u91c7\u6837\uff0c\u800c\u91c7\u6837\u70b9\u4e4b\u95f4\u7684\u9891\u8c31\u51fd\u6570\u662f\u770b\u4e0d\u89c1\u7684\u3002","title":"3. \u5b9e\u9a8c\u5185\u5bb9\u4e0e\u6b65\u9aa4"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/#4","text":"MATLAB R2019b","title":"4. \u5b9e\u9a8c\u73af\u5883"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/#5","text":"","title":"5. \u5b9e\u9a8c\u8fc7\u7a0b\u4e0e\u5206\u6790\u7a0b\u5e8f\u6587\u672c"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/#1-idft","text":"function [ xn ] = idft( Xk,N ) %xn = N\u70b9\u6709\u9650\u957f\u5ea6\u5e8f\u5217 %N = DFT\u7684\u957f\u5ea6 n = [0:1:N-1]; %n\u7684\u884c\u5411\u91cf k = [0:1:N-1]; %k\u7684\u884c\u5411\u91cf WN = exp(j*2*pi/N); %Wn\u56e0\u5b50 nk = n'*k; %\u4ea7\u751f\u4e00\u4e2a\u542bnk\u503c\u7684N\u4e58N\u7ef4\u77e9\u9635 WNnk = WN.^nk; %IDFT\u77e9\u9635 xn = 1/N*Xk * WNnk;","title":"1. IDFT\u51fd\u6570"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/#2-dft","text":"\u5df2\u77e5\u8fde\u7eed\u5468\u671f\u4fe1\u53f7 x(t)=cos(10\\pi t)+2sin(18\\pi t) x(t)=cos(10\\pi t)+2sin(18\\pi t) \u786e\u5b9a\u4fe1\u53f7\u7684\u57fa\u9891 \\Omega \\Omega \u548c\u57fa\u672c\u5468\u671f \u57fa\u9891\u4e3a \\Omega=2\\pi \\Omega=2\\pi rad/s\uff0c\u57fa\u672c\u5468\u671f\u4e3a 2\\pi/2\\pi = 1 2\\pi/2\\pi = 1 s \u5206\u6790\u957f\u5ea6\u5206\u522b\u53d6 0.5T_p,1.5T_p,2T_p 0.5T_p,1.5T_p,2T_p \u65f6\uff0c\u5229\u7528FFT\u8ba1\u7b97\u5176\u5e45\u5ea6\u8c31\uff1a\u5bf9\u6240\u5f97\u7ed3\u679c\u8fdb\u884c\u6bd4\u8f83\uff0c\u603b\u7ed3\u5e94\u5982\u4f55\u9009\u53d6\u5206\u6790\u957f\u5ea6\u3002 matlab f1 = 5;%cos\u51fd\u6570\u7684\u9891\u7387 f2 = 9;%sin\u51fd\u6570\u7684\u9891\u7387 dt=1/100; t=[0:dt:1]; x1=cos(2*pi*f1*t)+2*sin(2*pi*f2*t); figure(1) subplot(211); plot(t,x1);%\u6837\u672c\u4fe1\u53f7\u7684\u5468\u671f\u4e3a1 title('\u56fe1.1\uff1a\u5b9e\u9a8c\u6837\u672c\u4fe1\u53f7'); xlabel('\u65f6\u95f4\uff08\u5355\u4f4d\uff1a\u79d2\uff09'),ylabel('\u5e45\u5ea6'); subplot(212); xk1 = fft(x1); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 stem(2*t,abs(xk1)); title('1Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684FFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); fs=10*f2;%\u4ee5\u6700\u5927\u9891\u7387\u768410\u500d\u4f5c\u4e3a\u91c7\u6837\u9891\u7387 n0=0.5,n1=1.5,n2=2;%\u8bbe\u5b9a\u5206\u6790\u957f\u5ea6 figure(2); L = fs*n0; n = 0:L-1; x = cos(2*pi*n*f1/fs)+2*sin(2*pi*n*f2/fs); xk1 = fft(x); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 subplot(211); stem(n/fs,x); title('\u56fe1.2\uff1a0.5Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684\u91c7\u6837\u7ed3\u679c'),xlabel('\u65f6\u95f4\uff08\u5355\u4f4d\uff1a\u79d2\uff09'); subplot(212); stem(2*n/L,abs(xk1)); title('0.5Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684FFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); figure(3); L = fs*n1; n = 0:L-1; x = cos(2*pi*n*f1/fs)+2*sin(2*pi*n*f2/fs); xk1 = fft(x); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 subplot(211); stem(n/fs,x); title('\u56fe1.3\uff1a1.5Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684\u91c7\u6837\u7ed3\u679c'),xlabel('\u65f6\u95f4\uff08\u5355\u4f4d\uff1a\u79d2\uff09'); subplot(212); stem(2*n/L,abs(xk1)); title('1.5Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684FFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); figure(4); L = fs*n2; n = 0:L-1; x = cos(2*pi*n*f1/fs)+2*sin(2*pi*n*f2/fs); xk1 = fft(x); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 subplot(211); stem(n/fs,x); title('\u56fe1.4\uff1a2Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684\u91c7\u6837\u7ed3\u679c'),xlabel('\u65f6\u95f4\uff08\u5355\u4f4d\uff1a\u79d2\uff09'); subplot(212); stem(2*n/L,abs(xk1)); title('2Tp\u5206\u6790\u957f\u5ea6\u65f6\u7684FFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); \u7ed3\u679c\u5982\u56fe1.1-1.4. \u5bf9\u6a21\u62df\u4fe1\u53f7 x_a(t)=2sin(4\\pi t)+5cos(8\\pi t) x_a(t)=2sin(4\\pi t)+5cos(8\\pi t) ,\u4ee5\u91c7\u6837T=0.01\u79d2\u91c7\u6837\uff0c\u5206\u522b\u9009\u53d6N=40\uff0cN=50\uff0cN=60\u5f97\u5230x(n),\u7528N\u70b9DFT\u5f97\u5230\u5bf9 x_a(t) x_a(t) \u5e45\u5ea6\u8c31\u7684\u4f30\u8ba1\u5e76\u6bd4\u8f83\u7ed3\u679c\u3002 dt=1/100; t=[0:dt:0.5];%\u6837\u672c\u4fe1\u53f7\u7684\u5468\u671f\u4e3a1 f1=2; f2=4; xt=2*sin(2*pi*f1*t)+5*cos(2*pi*f2*t); %\u753b\u5e03\u5206\u5272 figure(1); stem(t,xt) title('\u56fe2.1\uff1a\u91c7\u6837\u4fe1\u53f7\u4fe1\u53f7'); xlabel('\u65f6\u95f4\uff08\u5355\u4f4d\uff1a\u79d2\uff09'),ylabel('\u5e45\u5ea6'); %\u753b\u5e03\u5206\u5272 figure(2); subplot(311); xk1 = fft(xt,40); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 n=[0:1:40-1] L=length(n); stem(n/L,abs(xk1)); title('\u56fe2.2.1\uff1a40\u4e2a\u91c7\u6837\u70b9\u7684DFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); subplot(312); xk1 = fft(xt,50); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 n=[0:1:50-1] L=length(n); stem(n/L,abs(xk1)); title('\u56fe2.2.2\uff1a50\u4e2a\u91c7\u6837\u70b9\u7684DFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); subplot(313); xk1 = fft(xt,60); %FFT\u7b97\u6cd5\u6c42\u5f97\u89e3 n=[0:1:60-1] L=length(n); stem(n/L,abs(xk1)); title('\u56fe2.2.3\uff1a60\u4e2a\u91c7\u6837\u70b9\u7684DFT\u5e45\u5ea6\u8c31'); xlabel('\u9891\u7387(\u5355\u4f4d\uff1api)');ylabel('\u5e45\u5ea6'); \u7ed3\u679c\u5982\u56fe2.1-2.2","title":"2. \u5229\u7528DFT\u505a\u8fde\u7eed\u4fe1\u53f7\u7684\u9891\u8c31\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/#6","text":"","title":"6. \u5b9e\u9a8c\u7ed3\u679c\u603b\u7ed3"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/#7","text":"","title":"7. \u7ed3\u679c\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/#1-idft_1","text":"\u53ea\u9700\u8981\u5728DFT\u51fd\u6570\u57fa\u7840\u4e0a\u628a\u5355\u4f4d\u590d\u6570\u6839\u6539\u4e3a wN=exp(1j*2*pi/N) \uff0c\u6700\u540e\u7ed3\u679c\u518d\u4e581/N\u3002","title":"1. IDFT\u51fd\u6570"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/#2-dft_1","text":"\u5f53\u622a\u53d6\u957f\u5ea6\u4e3a 1T_p 1T_p \u4e0e 2T_p 2T_p \u65f6\uff0c\u53ef\u5f97\u5230\u5355\u4e00\u8c31\u7ebf\u7684\u9891\u8c31\uff0c\u800c\u957f\u5ea6\u4e3a 0.5T_p 0.5T_p \u548c 1.5T_p 1.5T_p \u65f6\u51fa\u73b0\u4e86\u9891\u8c31\u6cc4\u6f0f\u73b0\u8c61\u3002\u56e0\u800c\u5f53\u5206\u6790\u957f\u5ea6\u4e0d\u4e3a\u6837\u672c\u5468\u671f\u7684\u6574\u6570\u500d\u65f6\uff0c\u5c06\u4f1a\u51fa\u73b0\u9891\u7387\u6cc4\u9732\u73b0\u8c61\uff0c\u65e0\u6cd5\u5f97\u5230\u5355\u4e00\u8c31\u7ebf\u7684\u9891\u8c31\u3002 \u53ea\u6709\u5f53\u622a\u65ad\u70b9\u6570\u4e3a\u6837\u672c\u4fe1\u53f7\u5b8c\u6574\u5468\u671f\u7684\u91c7\u6837\u70b9\u6570\u7684\u6574\u6570\u500d\u65f6\uff0c\u624d\u4e0d\u4f1a\u53d1\u751f\u9891\u7387\u6cc4\u9732\u73b0\u8c61\uff0c\u800c\u672c\u9898\u7684\u57fa\u672c\u5468\u671f\u4e3a T=0.5s T=0.5s \uff0c\u6240\u4ee5\u53ea\u6709\u5f53 N=50 N=50 \u65f6\uff0c\u6240\u5f97\u9891\u8c31\u56fe\u50cf\u4e3a\u5355\u4e00\u7684\u8c31\u7ebf\u3002","title":"2. \u5229\u7528DFT\u505a\u8fde\u7eed\u4fe1\u53f7\u7684\u9891\u8c31\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/DFT/#8","text":"\u52a8\u624b\u5b9e\u73b0\u4e86IDFT\uff0c\u5bf9\u5176\u8bb0\u5fc6\u52a0\u6df1\u3002 \u4e86\u89e3\u5230\u4e86\u9891\u8c31\u6cc4\u9732\u73b0\u8c61\uff0c\u4ee5\u53ca\u907f\u514d\u5176\u53d1\u751f\u7684\u65b9\u6cd5\u3002","title":"8.\u5fc3\u5f97\u4f53\u4f1a"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/","text":"\u97f3\u9891\u9891\u8c31\u5206\u6790\u4eea\u8bbe\u8ba1\u4e0e\u5b9e\u73b0 1. \u5b9e\u9a8c\u9879\u76ee\u540d\u79f0 \u97f3\u9891\u9891\u8c31\u5206\u6790\u4eea\u8bbe\u8ba1\u4e0e\u5b9e\u73b0\u3002 2. \u5b9e\u9a8c\u76ee\u7684 \u6784\u5efa\u4ea4\u4e92\u754c\u9762\uff0c\u5177\u6709\u64ad\u653e\u58f0\u97f3\u6587\u4ef6\uff0c\u663e\u793a\u6ce2\u5f62\u4e0e\u9891\u8c31\uff0c\u5e76\u53ef\u6d4b\u91cf\u58f0\u97f3\u65f6\u57df\u53c2\u6570\u3002 3. \u5b9e\u9a8c\u5185\u5bb9\u4e0e\u6b65\u9aa4 \u5b9e\u9a8c\u5185\u5bb9\uff1a MATLAB\u662f\u4e00\u4e2a\u6570\u636e\u5206\u6790\u548c\u5904\u7406\u529f\u80fd\u5341\u5206\u5f3a\u5927\u7684\u5de5\u7a0b\u5b9e\u7528\u8f6f\u4ef6\uff0c\u5176\u6570\u636e\u91c7\u96c6\u5de5\u5177\u7bb1\u4e3a\u5b9e\u73b0\u6570\u636e\u7684\u8f93\u5165\u548c\u8f93\u51fa\u63d0\u4f9b\u4e86\u5341\u5206\u65b9\u4fbf\u7684\u51fd\u6570\u548c\u547d\u4ee4\u3002\u672c\u5b9e\u9a8c\u8981\u6c42\u57fa\u4e8e\u58f0\u5361\u4e0eMATLAB\u5b9e\u73b0\u97f3\u9891\u4fe1\u53f7\u9891\u8c31\u5206\u6790\u4eea\u7684\u8bbe\u8ba1\u539f\u7406\u4e0e\u5b9e\u73b0\uff0c\u529f\u80fd\u5305\u62ec\uff1a (1) \u97f3\u9891\u4fe1\u53f7\u8f93\u5165\uff0c\u4ece\u58f0\u5361\u8f93\u5165\u3001\u4eceWAV\u6587\u4ef6\u8f93\u5165\u3001\u4ece\u6807\u51c6\u4fe1\u53f7\u53d1\u751f\u5668\u8f93\u5165\u3002 (2) \u4fe1\u53f7\u6ce2\u5f62\u5206\u6790\uff0c\u5305\u62ec\u5e45\u503c\u3001\u9891\u7387\u3001\u5468\u671f\u3001\u76f8\u4f4d\u7684\u4f30\u8ba1\uff0c\u4ee5\u53ca\u7edf\u8ba1\u91cf\u5cf0\u503c\u3001\u5747\u503c\u3001\u5747\u65b9\u503c\u548c\u65b9\u5dee\u7684\u8ba1\u7b97\u3002 (3) \u4fe1\u53f7\u9891\u8c31\u5206\u6790\uff0c\u9891\u7387\u3001\u5468\u671f\u7684\u4f30\u8ba1\uff0c\u56fe\u5f62\u663e\u793a\u5e45\u503c\u8c31\u3001\u76f8\u4f4d\u8c31\u3001\u5b9e\u9891\u8c31\u3001\u865a\u9891\u8c31\u548c\u529f\u7387\u8c31\u7684\u66f2\u7ebf\u3002 \u9891\u7387\uff08\u5468\u671f\uff09\u68c0\u6d4b \u5bf9\u5468\u671f\u4fe1\u53f7\u6765\u8bf4\uff0c\u53ef\u4ee5\u7528\u65f6\u57df\u6ce2\u5f62\u5206\u6790\u6765\u786e\u5b9a\u4fe1\u53f7\u7684\u5468\u671f\uff0c\u4e5f\u5c31\u662f\u8ba1\u7b97\u76f8 \u90bb\u7684\u4e24\u4e2a\u4fe1\u53f7\u6ce2\u5cf0\u7684\u65f6\u95f4\u5dee\uff0c\u6216\u8fc7\u96f6\u70b9\u7684\u65f6\u95f4\u5dee\u3002\u8fd9\u91cc\u91c7\u7528\u8fc7\u96f6\u70b9( t_s t_s )\u7684\u65f6\u95f4\u5dee T T (\u5468\u671f)\u3002\u9891\u7387\u5373\u4e3a f = 1/T f = 1/T \uff0c\u7531\u4e8e\u80fd\u591f\u6c42\u5f97\u591a\u4e2a T T \u503c( t_i t_i \u6709\u591a\u4e2a)\uff0c\u6545\u91c7\u7528\u5b83\u4eec\u7684\u5e73\u5747\u503c\u4f5c\u4e3a\u5468\u671f\u7684\u4f30\u8ba1\u503c\u3002 \u5e45\u503c\u68c0\u6d4b \u5728\u4e00\u4e2a\u5468\u671f\u5185\uff0c\u6c42\u51fa\u4fe1\u53f7\u6700\u5927\u503c y_{max} y_{max} \u4e0e\u6700\u5c0f\u503c y_{min} y_{min} \u7684\u5dee\u7684\u4e00\u534a\uff0c\u5373 A = (y_{max}-y_{min})/2 A = (y_{max}-y_{min})/2 ,\u540c\u6837\uff0c\u4e5f\u4f1a\u6c42\u51fa\u591a\u4e2a A A \u503c\uff0c\u4f46\u7b2c\u4e00\u4e2a A A \u503c\u5bf9\u5e94\u7684 y_{max} y_{max} \u548c y_{min} y_{min} \u4e0d\u662f\u5728\u4e00\u4e2a\u5468\u671f\u5185\u641c\u7d22\u5f97\u5230\u7684\uff0c\u6545\u4ee5\u9664\u7b2c\u4e00\u4e2a\u4ee5\u5916\u7684 A A \u503c\u7684\u5e73\u5747\u503c\u4f5c\u4e3a\u5e45\u503c\u7684\u4f30\u8ba1\u503c\u3002 \u76f8\u4f4d\u68c0\u6d4b \u91c7\u7528\u8fc7\u96f6\u6cd5\uff0c\u5373\u901a\u8fc7\u5224\u65ad\u4e0e\u540c\u9891\u7387\u96f6\u76f8\u4f4d\u4fe1\u53f7\u8fc7\u96f6\u70b9\u65f6\u523b\uff0c\u8ba1\u7b97\u5176\u65f6\u95f4\u5dee\uff0c\u7136\u540e\u6362\u6210\u76f8\u5e94\u7684\u76f8\u4f4d\u5dee\u3002 \\phi = 2\\pi(1-t_i/T) \\phi = 2\\pi(1-t_i/T) \uff0c\u540c\u6837\uff0c\u4ee5 \\phi \\phi \u7684\u5e73\u5747\u503c\u4f5c\u4e3a\u76f8\u4f4d\u7684\u4f30\u8ba1\u503c\u3002 \u6570\u5b57\u4fe1\u53f7\u7edf\u8ba1\u91cf\u4f30\u8ba1 \u5cf0\u503cP\u7684\u4f30\u8ba1\uff1a\u5728\u6837\u672c\u6570\u636ex\u4e2d\u627e\u51fa\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\uff0c\u5176\u5dee\u503c\u4e3a\u53cc\u5cf0\u503c\uff0c\u53cc\u5cf0\u503c\u7684\u4e00\u534a\u5373\u4e3a\u5cf0\u503c\u3002 P = 0.5[max(y_i)-min(y_i)] P = 0.5[max(y_i)-min(y_i)] \u5747\u503c\u4f30\u8ba1\uff1a $$ E(y) = \\frac{1}{N}\\sum_{i=0}^N y_i $$ \u5f0f\u4e2d\uff0cN\u4e3a\u6837\u672c\u5bb9\u91cf\uff0c\u4e0b\u540c\u3002 \u5747\u65b9\u503c\u4f30\u8ba1 E(y^2) = \\frac{1}{N}\\sum_{i=0}^N y_i^2 E(y^2) = \\frac{1}{N}\\sum_{i=0}^N y_i^2 \u65b9\u5dee\u4f30\u8ba1 D(y) = \\frac{1}{N}\\sum_{i=0}^N [y_i-E(y)]^2 D(y) = \\frac{1}{N}\\sum_{i=0}^N [y_i-E(y)]^2 \u9891\u8c31\u5206\u6790\u539f\u7406 \u65f6\u57df\u5206\u6790\u53ea\u80fd\u53cd\u6620\u4fe1\u53f7\u7684\u5e45\u503c\u968f\u65f6\u95f4\u7684\u53d8\u5316\u60c5\u51b5\uff0c\u9664\u5355\u9891\u7387\u5206\u91cf\u7684\u7b80\u5355\u6ce2 \u5f62\u5916\uff0c\u5f88\u96be\u660e\u786e\u63d0\u793a\u4fe1\u53f7\u7684\u9891\u7387\u7ec4\u6210\u548c\u5404\u9891\u7387\u5206\u91cf\u5927\u5c0f\uff0c\u800c\u9891\u8c31\u5206\u6790\u80fd\u5f88\u597d\u7684\u89e3\u51b3\u6b64\u95ee\u9898\u3002 DFT\u4e0eFFT \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u65f6\u57df\u4fe1\u53f7 y y \uff0c\u53ef\u4ee5\u901a\u8fc7 Fourier \u53d8\u6362\u5f97\u5230\u9891\u57df\u4fe1\u606f Y Y \u3002 \u91c7\u6837\u4fe1\u53f7\u7684\u9891\u8c31\u662f\u4e00\u4e2a\u8fde\u7eed\u7684\u9891\u8c31\uff0c\u4e0d\u53ef\u80fd\u8ba1\u7b97\u51fa\u6240\u6709\u7684\u70b9\u7684\u503c\uff0c\u6545\u91c7\u7528\u79bb\u6563 Fourier \u53d8\u6362(DFT)\u3002\u4f46\u8ba1\u7b97\u6548\u7387\u5f88\u4f4e\uff0c\u56e0\u4e3a\u6709\u5927\u91cf\u7684\u6307\u6570(\u7b49\u4ef7\u4e8e\u4e09\u89d2\u51fd\u6570)\u8fd0\u7b97\uff0c\u6545\u5b9e\u9645\u4e2d\u591a\u91c7\u7528\u5feb\u901f Fourier \u53d8\u6362(FFT)\u3002\u5176\u539f\u7406\u5373\u662f\u5c06\u91cd\u590d\u7684\u4e09\u89d2\u51fd\u6570\u7b97\u8ba1\u7684\u4e2d\u95f4\u7ed3\u679c\u4fdd\u5b58\u8d77\u6765\uff0c\u4ee5\u51cf\u5c11\u91cd\u590d\u4e09\u89d2\u51fd\u6570\u8ba1\u7b97\u5e26\u6765\u7684\u65f6\u95f4\u6d6a\u8d39\u3002\u7531\u4e8e\u4e09\u89d2\u51fd\u6570\u8ba1\u7b97\u7684\u91cd\u590d\u91cf\u76f8\u5f53\u5927\uff0c\u6545FFT\u80fd\u6781\u5927\u5730\u63d0\u9ad8\u8fd0\u7b97\u6548\u7387\u3002 \u9891\u7387\u3001\u5468\u671f\u7684\u4f30\u8ba1 \u5bf9\u4e8e Y(k\\triangle f) Y(k\\triangle f) \uff0c\u5982\u679c\u5f53 \\triangle f = \\tilde{f} \\triangle f = \\tilde{f} \u65f6\uff0c Y(k\\triangle f) Y(k\\triangle f) \u53d6\u6700\u5927\u503c\uff0c\u5219 \\tilde{f} \\tilde{f} \u4e3a\u9891\u7387\u7684\u4f30\u8ba1\u503c\uff0c\u7531\u4e8e\u91c7\u6837\u95f4\u9694\u7684\u8bef\u5dee\uff0c \\tilde{f} \\tilde{f} \u4e5f\u5b58\u5728\u8bef\u5dee\uff0c\u5176\u8bef\u5dee\u6700\u5927\u4e3a \\triangle f/2 \\triangle f/2 \u3002 \u5468\u671f T=1/f T=1/f \u3002 \u4ece\u539f\u7406\u4e0a\u53ef\u4ee5\u770b\u51fa\uff0c\u5982\u679c\u5728\u6807\u51c6\u4fe1\u53f7\u4e2d\u6df7\u6709\u566a\u58f0\uff0c\u7528\u4e0a\u8ff0\u65b9\u6cd5\u4ecd\u80fd\u591f\u7cbe\u786e\u5730\u4f30\u8ba1\u51fa\u539f\u6807\u51c6\u4fe1\u53f7\u7684\u9891\u7387\u548c\u5468\u671f\u3002 \u9891\u8c31\u56fe \u4e3a\u4e86\u76f4\u89c2\u5730\u8868\u793a\u4fe1\u53f7\u7684\u9891\u7387\u7279\u6027\uff0c\u5de5\u7a0b\u4e0a\u5e38\u5e38\u5c06Fourier\u53d8\u6362\u7684\u7ed3\u679c\u7528\u56fe\u5f62\u7684\u65b9\u5f0f\u8868\u793a\uff0c\u5373\u9891\u8c31\u56fe\u3002 \u4ee5\u9891\u7387 f f \u4e3a\u6a2a\u5750\u6807\uff0c |Y(f)| |Y(f)| \u4e3a\u7eb5\u5750\u6807\uff0c\u53ef\u4ee5\u5f97\u5230\u5e45\u503c\u8c31\uff1b \u4ee5\u9891\u7387 f f \u4e3a\u6a2a\u5750\u6807\uff0c arg Y(f) arg Y(f) \u4e3a\u7eb5\u5750\u6807\uff0c\u53ef\u4ee5\u5f97\u5230\u76f8\u4f4d\u8c31\uff1b \u4ee5\u9891\u7387 f f \u4e3a\u6a2a\u5750\u6807\uff0c Re Y(f) Re Y(f) \u4e3a\u7eb5\u5750\u6807\uff0c\u53ef\u4ee5\u5f97\u5230\u5b9e\u9891\u8c31\uff1b \u4ee5\u9891\u7387 f f \u4e3a\u6a2a\u5750\u6807\uff0c Im Y(f) Im Y(f) \u4e3a\u7eb5\u5750\u6807\uff0c\u53ef\u4ee5\u5f97\u5230\u865a\u9891\u8c31\u3002 \u6839\u636e\u91c7\u6837\u5b9a\u7406\uff0c\u53ea\u6709\u9891\u7387\u4e0d\u8d85\u8fc7 F_s/2 F_s/2 \u7684\u4fe1\u53f7\u624d\u80fd\u88ab\u6b63\u786e\u91c7\u96c6\uff0c\u5373 Fourier \u53d8\u6362\u7684\u7ed3\u679c\u4e2d\u9891\u7387\u5927\u4e8e F_s/2 F_s/2 \u7684\u90e8\u5206\u662f\u4e0d\u6b63\u786e\u7684\u90e8\u5206\uff0c\u6545\u4e0d\u5728\u9891\u8c31\u56fe\u4e2d\u663e\u793a\u3002\u5373\u6a2a\u5750\u6807 f \\in [0 ,F_s/2] f \\in [0 ,F_s/2] \u3002 \u6a21\u5757\u5212\u5206 \u6a21\u5757\u5316\u5c31\u662f\u628a\u7a0b\u5e8f\u5212\u5206\u6210\u72ec\u7acb\u547d\u540d\u4e14\u53ef\u72ec\u7acb\u8bbf\u95ee\u7684\u6a21\u5757\uff0c\u6bcf\u4e2a\u6a21\u5757\u5b8c\u6210\u4e00\u4e2a\u5b50\u529f\u80fd\uff0c\u628a\u8fd9\u4e9b\u6a21\u5757\u96c6\u6210\u8d77\u6765\u6784\u6210\u4e00\u4e2a\u6574\u4f53\uff0c\u53ef\u4ee5\u5b8c\u6210\u6307\u5b9a\u7684\u529f\u80fd\u6ee1\u8db3\u7528\u6237\u9700\u6c42\u3002\u6839\u636e\u4eba\u7c7b\u89e3\u51b3\u4e00\u822c\u95ee\u9898\u7684\u7ecf\u9a8c\uff0c\u5982\u679c\u4e00\u4e2a\u95ee\u9898\u7531\u4e24\u4e2a\u95ee\u9898\u7ec4\u5408\u800c\u6210\uff0c\u90a3\u4e48\u5b83\u7684\u590d\u6742\u7a0b\u5ea6\u5927\u4e8e\u5206\u522b\u8003\u8651\u6bcf\u4e2a\u95ee\u9898\u65f6\u7684\u590d\u6742\u7a0b\u5ea6\u4e4b\u548c\uff0c\u4e5f\u5c31\u662f\u8bf4\u628a\u590d\u6742\u7684\u95ee\u9898\u5206\u89e3\u6210\u8bb8\u591a\u5bb9\u6613\u89e3\u51b3\u7684\u5c0f\u95ee\u9898\uff0c\u539f\u6765\u7684\u95ee\u9898\u4e5f\u5c31\u5bb9\u6613\u89e3\u51b3\u4e86\u3002\u8fd9\u5c31\u662f\u6a21\u5757\u5316\u7684\u6839\u636e\u3002 \u5728\u6a21\u5757\u5212\u5206\u65f6\u5e94\u9075\u5faa\u5982\u4e0b\u89c4\u5219\uff1a\u6539\u8fdb\u8f6f\u4ef6\u7ed3\u6784\u63d0\u9ad8\u6a21\u5757\u72ec\u7acb\u6027\uff1b\u6a21\u5757\u89c4\u6a21\u5e94\u8be5\u9002\u4e2d\uff1b\u6df1\u5ea6\u3001\u5bbd\u5ea6\u3001\u6247\u51fa\u548c\u6247\u5165\u90fd\u5e94\u9002\u5f53\uff1b\u6a21\u5757\u7684\u4f5c\u7528\u57df\u5e94\u8be5\u5728\u63a7\u5236\u57df\u4e4b\u5185\uff1b\u529b\u4e89\u964d\u4f4e\u6a21\u5757\u63a5\u53e3\u7684\u590d\u6742\u7a0b\u5ea6\uff1b\u8bbe\u8ba1\u5355\u5165\u53e3\u5355\u51fa\u53e3\u7684\u6a21\u5757\uff1b\u6a21\u5757\u529f\u80fd\u5e94\u8be5\u53ef\u4ee5\u9884\u6d4b\u3002 4. \u5b9e\u9a8c\u73af\u5883 MATLAB R2019b 5. \u5b9e\u9a8c\u8fc7\u7a0b\u4e0e\u5206\u6790\u7a0b\u5e8f\u6587\u672c \u97f3\u9891\u4fe1\u53f7\u8f93\u5165 \u58f0\u5361\u8f93\u5165 function button_recording_Callback(hObject, eventdata, handles)%\u5f00\u59cb\u5f55\u97f3\u6309\u94ae if (get(handles.radio_audio,'Value')==1)%\u5f53\u9009\u62e9\u58f0\u5361\u65f6\uff0c\u624d\u80fd\u8fdb\u884c\u76f8\u5e94\u64cd\u4f5c\uff0c\u5426\u5219\u63d0\u793a\u9519\u8bef\u4fe1\u606f if(isempty(get(handles.input_fs_fre,'String'))==0)%\u5224\u65ad\u8bbe\u5b9a\u7684\u91c7\u6837\u9891\u7387\u662f\u5426\u4e3a\u7a7a recordtime=str2double(get(handles.recording_time,'String'));%\u8bfb\u53d6\u5f55\u97f3\u65f6\u95f4\u6570\u636e if(recordtime>0) handles.fs=str2double(get(handles.input_fs_fre,'String'));%\u83b7\u53d6\u8bbe\u5b9a\u7684\u91c7\u6837\u9891\u7387\uff0c\u8f6c\u4e3a\u6570\u5b57\u683c\u5f0f sound_length=round(recordtime*handles.fs);%\u5f55\u97f3\u70b9\u6570 record=audiorecorder(handles.fs,24,1);%\u4f9d\u636e\u91c7\u6837\u9891\u7387\u521b\u5efa\u5f55\u97f3\u5e8f\u5217\uff0c\u4f4d\u6570\u4e3a24\uff0c\u5355\u58f0\u9053 recordblocking(record,recordtime);%\u8f93\u5165\u5f55\u97f3\u5e8f\u5217\uff0c\u957f\u5ea6\u4fe1\u606f=\u65f6\u95f4 msgbox('Recording complete','Tip'); handles.sound=getaudiodata(record);%\u521b\u5efa\u83b7\u53d6\u5f55\u97f3\u6570\u636e\u7684\u6570\u7ec4 n=0:1:sound_length-1; time=n/handles.fs;%\u521b\u5efa\u663e\u793a\u7528\u7684\u65f6\u95f4\u5e8f\u5217 plot(handles.axes_analysis,time,handles.sound);%\u5728\u5206\u6790\u5bf9\u8c61\u533a\u57df\u6253\u5370\u51fa\u91c7\u96c6\u5230\u7684\u4fe1\u53f7\u7ed3\u679c title('Waveform of the Acquisition Signal'); set(handles.input_fs_num,'String',num2str(sound_length));%\u5728\u91c7\u6837\u70b9\u6570\u91cf\u7684\u6846\u5185\u663e\u793a\u5f53\u524d\u91c7\u6837\u9891\u7387\u4e0b\u5bf9\u6837\u672c\u4fe1\u53f7\u7684\u91c7\u6837\u70b9\u6570 handles.complete=1;%\u8868\u660e\u4e3a\u58f0\u5361\u91c7\u96c6\u5b8c\u6210 guidata(handles.button_recording,handles);%\u50a8\u5b58handles\u7ed3\u6784\u4f53\uff0c\u50a8\u5b58sound\u4fe1\u53f7,fs\u6570\u503c else errordlg('No recording time set','Enter error');%\u63d0\u793a\u672a\u8bbe\u5b9a\u5f55\u97f3\u65f6\u95f4 end else errordlg('Sample frequency not set','Enter error');%\u63d0\u793a\u672a\u8bbe\u5b9a\u91c7\u6837\u9891\u7387 end else errordlg('Sound card button not enabled','Choose error');%\u63d0\u793a\u672a\u9009\u62e9\u58f0\u5361 end end \u7ed3\u679c\u5982\u56fe1.1 WAV\u6587\u4ef6\u8f93\u5165 function choice_files_Callback(hObject, eventdata, handles)%\u624b\u52a8\u9009\u62e9\u6587\u4ef6\u6309\u94ae [filename, pathname] = uigetfile('*', '\u8bfb\u53d6\u97f3\u9891\u6587\u4ef6') if([pathname,filename]~=0) set(handles.filename,'String',[pathname,filename]); end end function button_open_file_Callback(hObject, eventdata, handles)%\u6253\u5f00\u6587\u4ef6\u6309\u94ae if (get(handles.radio_wav,'Value')==1)%\u5f53\u9009\u62e9\u6587\u4ef6\u8bfb\u53d6\u65f6\uff0c\u624d\u80fd\u8fdb\u884c\u76f8\u5e94\u64cd\u4f5c\uff0c\u5426\u5219\u63d0\u793a\u9519\u8bef\u4fe1\u606f if((isempty(get(handles.filename,'String'))==0))%\u5224\u65ad\u6587\u4ef6\u540d\u8f93\u5165\u662f\u5426\u4e3a\u7a7a [y,Fs] =audioread(get(handles.filename,'String'));%\u83b7\u53d6\u6240\u9009\u6587\u4ef6\u7684\u58f0\u97f3\u4fe1\u53f7\uff0c\u5f97\u5230\u4fe1\u53f7\u77e9\u9635\u548c\u4fe1\u53f7\u9891\u7387 [leng,channel]=size(y);%\u5bf9y\u8fdb\u884c\u5217\u6570\u5224\u65ad\uff0c\u6c42\u5f97\u58f0\u9053\u6570\u76ee,\u4ee5\u53ca\u6240\u5f97\u5230\u7684\u6570\u636e\u70b9\u7684\u6570\u76ee set(handles.input_fs_fre,'String',num2str(Fs)); set(handles.input_fs_num,'String',num2str(leng));%\u8bbe\u7f6e\u91c7\u6837\u9891\u7387\u548c\u70b9\u6570 switch (channel) case 1%\u5355\u58f0\u9053 set(handles.sound_channel,'Value',1); set(handles.sound_channel,'Enable','off'); msgbox('\u8f93\u5165\u7684\u662f\u5355\u58f0\u9053\u6587\u4ef6','Tip'); handles.fs=Fs; handles.sound=y(:,channel);%\u77e9\u9635\u7ef4\u5ea6\u4e00\u81f4\uff0c\u5747\u4e3a\u591a\u884c\u5355\u5217 guidata(handles.button_open_file,handles);%\u50a8\u5b58sound\u4fe1\u606f time=0:1/handles.fs:(leng-1)/handles.fs; plot(handles.axes_analysis,time,handles.sound);%\u5728\u5206\u6790\u5bf9\u8c61\u533a\u57df\u6253\u5370\u51fa\u91c7\u96c6\u5230\u7684\u4fe1\u53f7\u7ed3\u679c title('\u97f3\u9891\u4fe1\u53f7\u7684\u6ce2\u5f62'); otherwise set(handles.sound_channel,'Value',2); msgbox('\u58f0\u9053\u6570\u76ee\u8d85\u8fc7\u4e00\u4e2a\uff0c\u8bf7\u9009\u62e9\u6240\u9009\u53d6\u7684\u58f0\u9053\uff0c\u9ed8\u8ba4\u9009\u53d6\u5de6\u58f0\u9053','Tip'); handles.fs=Fs; handles.sound=y(:,:); guidata(handles.button_open_file,handles); set(handles.filename,'Enable','off'); set(handles.choice_files,'Enable','off'); set(handles.button_open_file,'Enable','off'); end else errordlg('\u672a\u8bbe\u7f6e\u6587\u4ef6\u76ee\u5f55','Enter error');%\u63d0\u793a\u672a\u8bbe\u7f6e\u6587\u4ef6\u76ee\u5f55 end else errordlg('\u672a\u542f\u7528\u6587\u4ef6\u8bfb\u53d6\u6309\u94ae','Choose error');%\u63d0\u793a\u672a\u9009\u62e9\u6587\u4ef6\u8bfb\u53d6 end end function sound_channel_Callback(hObject, eventdata, handles) choice_channel=get(handles.sound_channel,'Value'); if(choice_channel>1) choice_channel=choice_channel-1; end handles.sound=handles.sound(:,choice_channel); leng=length(handles.sound); guidata(handles.button_open_file,handles);%\u50a8\u5b58sound\u4fe1\u606f time=0:1/handles.fs:(leng-1)/handles.fs; plot(handles.axes_analysis,time,handles.sound);%\u5728\u5206\u6790\u5bf9\u8c61\u533a\u57df\u6253\u5370\u51fa\u91c7\u96c6\u5230\u7684\u4fe1\u53f7\u7ed3\u679c title('\u97f3\u9891\u4fe1\u53f7\u7684\u6ce2\u5f62'); set(handles.filename,'Enable','on'); set(handles.choice_files,'Enable','on'); set(handles.button_open_file,'Enable','on'); end function sound_channel_CreateFcn(hObject, eventdata, handles) if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor')) set(hObject,'BackgroundColor','white'); end end \u7ed3\u679c\u5982\u56fe1.2 \u4fe1\u53f7\u53d1\u751f\u5668\u8f93\u5165 function button_signal_Callback(hObject, eventdata, handles) %\u751f\u6210\u6ce2\u5f62\u6309\u94ae if ((get(handles.radio_signal,'Value')+get(handles.check_mixing,'Value'))==1) if(isempty(get(handles.input_fs_fre,'String'))==0)%\u5224\u65ad\u8bbe\u5b9a\u7684\u91c7\u6837\u9891\u7387\u662f\u5426\u4e3a\u7a7a if((isempty(get(handles.input_am,'String'))==0)&&(isempty(get(handles.input_vlotage,'String'))==0)&&(isempty(get(handles.input_phase,'String'))==0)) handles.fs=str2double(get(handles.input_fs_fre,'String'));%\u83b7\u53d6\u8bbe\u5b9a\u7684\u91c7\u6837\u9891\u7387\uff0c\u8f6c\u4e3a\u6570\u5b57\u683c\u5f0f signal_soundtype=get(handles.signal_choice,'Value');%\u83b7\u53d6\u4fe1\u53f7\u53d1\u751f\u5668\u533a\u57df\u7684\u6570\u636e signal_fre=str2double(get(handles.input_am,'String'));%\u83b7\u53d6\u4fe1\u53f7\u53d1\u751f\u5668\u7684\u4e09\u4e2a\u6d6e\u70b9\u6570\u6570\u636e\uff0c\u7528\u4e8e\u4ea7\u751f\u4fe1\u53f7\u4f7f\u7528 signal_vlotage=str2double(get(handles.input_vlotage,'String')); signal_phase=str2double(get(handles.input_phase,'String'))/180*pi;%\u8f6c\u6362\u4e3api if (get(handles.radio_signal,'Value')==1)%\u5982\u679c\u4e0d\u9009\u62e9\u6df7\u53e0\uff0c\u6309\u7167\u9891\u7387\u8fdb\u884c\u91c7\u6837\u64cd\u4f5c signal_time=str2double(get(handles.signal_nmix_time,'String'));%\u83b7\u53d6\u975e\u6df7\u53e0\u60c5\u51b5\u4e0b\u751f\u6210\u4fe1\u53f7\u7684\u65f6\u95f4 if(signal_time==0) errordlg('\u975e\u6df7\u53e0\u60c5\u51b5\u4e0b\u9700\u8bbe\u7f6e\u53d1\u751f\u5668\u65f6\u95f4','error'); return; end number=round(handles.fs*signal_time); t=(0:1.0/handles.fs:(number-1)/handles.fs);%\u91c7\u6837\u65f6\u95f4\u5e8f\u5217 else%\u5982\u679c\u4ea7\u751f\u6df7\u53e0\uff0c\u5219\u8bfb\u53d6\u5df2\u7ecf\u6709\u7684\u6570\u636e\u7684\u91c7\u6837\u70b9\u6570 number=str2double(get(handles.input_fs_num,'String'));%\u83b7\u53d6\u91c7\u6837\u70b9\u6570 t=(0:1.0/handles.fs:(number-1)/handles.fs);%\u91c7\u6837\u65f6\u95f4\u5e8f\u5217 end%\u521b\u5efa\u65f6\u95f4\u5e8f\u5217 switch signal_soundtype%\u4e0d\u9700\u8981\u52a0\u5165break case 1%\u6807\u51c6\u6b63\u5f26\u6ce2 y=signal_vlotage*sin(2*pi*t*signal_fre+signal_phase); case 2%\u65b9\u6ce2 y=signal_vlotage*sign(sin(2*pi*t*signal_fre+signal_phase)); case 3%\u4e09\u89d2\u6ce2 y=signal_vlotage*sawtooth(2*pi*t*signal_fre+signal_phase,0.5); case 4%\u952f\u9f7f\u6ce2 y=signal_vlotage*sawtooth(2*pi*t*signal_fre+signal_phase); case 5%\u767d\u566a\u58f0 y=signal_vlotage*sin(2*rand(size(t))-1); otherwise%\u4e0d\u6ee1\u8db3\u5219\u62a5\u9519 errordlg('\u6ce2\u5f62\u7c7b\u578b\u9009\u62e9\u51fa\u9519','Choose error'); end if (get(handles.radio_signal,'Value')==1)%\u5982\u679c\u6ca1\u6709\u9009\u62e9\u6df7\u53e0\u6309\u94ae\uff0c\u5219\u4e0d\u4e0e\u53e6\u5916\u4e24\u4e2a\u4fe1\u53f7\u76f8\u53e0\u52a0 handles.sound=y'; else%sound\u4e0ey\u957f\u5ea6\u76f8\u540c\uff0c\u4f46\u77e9\u9635\u7ef4\u5ea6\u4e0d\u540c size(y'); handles.sound=handles.sound+y'; size(handles.sound); end n=0:1:number-1; time=n/handles.fs;%\u521b\u5efa\u663e\u793a\u7528\u7684\u65f6\u95f4\u5e8f\u5217 plot(handles.axes_analysis,time,handles.sound);%\u5728\u5206\u6790\u5bf9\u8c61\u533a\u57df\u6253\u5370\u51fa\u91c7\u96c6\u5230\u7684\u4fe1\u53f7\u7ed3\u679c title('\u91c7\u96c6\u4fe1\u53f7\u7684\u6ce2\u5f62'); set(handles.input_fs_num,'String',num2str(number));%\u5728\u91c7\u6837\u70b9\u6570\u91cf\u7684\u6846\u5185\u663e\u793a\u5f53\u524d\u91c7\u6837\u9891\u7387\u4e0b\u5bf9\u6837\u672c\u4fe1\u53f7\u7684\u91c7\u6837\u70b9\u6570 guidata(handles.button_signal,handles);%\u50a8\u5b58\u6570\u636e else errordlg('\u672a\u8bbe\u5b9a\u53d1\u751f\u5668\u914d\u7f6e','Enter error');%\u63d0\u793a\u672a\u8bbe\u5b9a\u53d1\u751f\u5668\u914d\u7f6e\u4fe1\u606f end else errordlg('\u672a\u8bbe\u5b9a\u91c7\u6837\u9891\u7387','Enter error');%\u63d0\u793a\u672a\u8bbe\u5b9a\u91c7\u6837\u9891\u7387 end else errordlg('\u5fc5\u987b\u9009\u62e9\u4fe1\u53f7\u53d1\u751f\u5668\u548c\u6df7\u53e0\u6309\u94ae\u4e4b\u4e2d\u7684\u4e00\u4e2a','Choose error'); end end \u7ed3\u679c\u5982\u56fe1.3.1-1.3.4\uff0c\u5176\u4e2d\u59821.3.4\u4e3a\u5e45\u503c\u4e3a1\uff0c\u9891\u7387\u5206\u522b\u4e3a1Hz\u548c2Hz\u6b63\u5f26\u7684\u6df7\u53e0 \u65f6\u57df\u5206\u6790 function button_time_Callback(hObject, eventdata, handles)%\u65f6\u57df\u5206\u6790\u6309\u94ae n=1; ymax=0;ymin=0; i=3;%\u521d\u59cb\u5316\u76f8\u5e94\u53d8\u91cf N=length(handles.sound);%\u83b7\u53d6\u58f0\u97f3\u4fe1\u53f7\u7684\u957f\u5ea6 ti=0; while(1) if((handles.sound(i-1)<0)&&(handles.sound(i-2)<0)&&(handles.sound(i)>=0)&&(handles.sound(i+1)>0)) if(handles.sound(i)>0) ti(n)=i/handles.fs; else ti(n)=(i-handles.sound(i)/(handles.sound(i)-handles.sound(i-1)))/handles.fs; end A(n)=(ymax-ymin)/2; ymax=0;ymin=0; n=n+1; else if(ymax<handles.sound(i)) ymax=handles.sound(i); end if(ymin>handles.sound(i)) ymin=handles.sound(i); end end i=i+1; if(i>N-1) break; end end len_ti=length(ti); if(len_ti<2) errordlg('\u8fc7\u96f6\u70b9\u4e2a\u6570\u4e0d\u8db3\uff0c\u65e0\u6cd5\u8fdb\u884c\u5206\u6790','error');%\u63d0\u793a\u672a\u9009\u62e9\u58f0\u5361 return; end for temp=2:1:len_ti T(temp-1)=(ti(temp)-ti(temp-1)); end freq=1/mean(T)%\u8ba1\u7b97\u9891\u7387 set(handles.analysis_cycle,'String',num2str(1/freq)); set(handles.analysis_fre,'String',num2str(freq));%\u8f93\u51fa\u9891\u7387\u4f30\u8ba1\u503c set(handles.analysis_vlotage,'String',num2str(mean(A(2:n-1)))); if (get(handles.check_point,'Value')==1) from=1; to=str2double(get(handles.input_fs_num,'String')); else from=str2num(get(handles.first_point,'String')); to=str2num(get(handles.last_point,'String')); end phase=2*180*(1-(ti(2:n-1)-1)./T+floor((ti(2:n-1)-1)./T)); set(handles.analysis_phase,'String',num2str(mean(phase)));%\u76f8\u4f4d set(handles.analysis_high,'String',(max(handles.sound(from:to))-min(handles.sound(from:to)))/2);%\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u7684\u4e00\u534a\u5373\u4e3a\u5cf0\u503c set(handles.analysis_mean,'String',mean(handles.sound(from:to)));%\u5747\u503c set(handles.analysis_square,'String',mean(handles.sound(from:to).^2));%\u5747\u65b9\u503c set(handles.analysis_variance,'String',std(handles.sound(from:to))^2);%\u8f93\u51fa\u65b9\u5dee end \u7ed3\u679c\u5982\u56fe2 \u9891\u57df\u5206\u6790 function button_fre_Callback(hObject, eventdata, handles)%\u9891\u57df\u5206\u6790\u6309\u94ae if (get(handles.check_point,'Value')==1) from=1; to=str2double(get(handles.input_fs_num,'String')); else from=str2num(get(handles.first_point,'String')); to=str2num(get(handles.last_point,'String')); end sample=handles.sound(from:to);%\u53d6\u51fasound\u4fe1\u53f7\u7684\u6570\u636e\uff0c\u5b58\u653e\u5230\u4e34\u65f6\u7a7a\u95f4\u4e2d f=linspace(0,handles.fs/2,(to-from+1)/2);%\u751f\u6210\u79bb\u6563\u5316\u7684\u9891\u7387\u70b9\uff0c\u4ee5\u91c7\u6837\u9891\u7387\u4f5c\u4e3a\u79bb\u6563\u5316\u65f6\u95f4\u95f4\u9694 Y=fft(sample,to-from+1);%\u5bf9\u79bb\u6563\u4fe1\u53f7\u8fdb\u884c\u5085\u91cc\u53f6\u53d8\u6362 [C,I]=max(abs(Y));%\u6c42\u7684\u5e45\u503c\u6700\u5927\u7684\u70b9\u53ca\u5176\u4e0b\u6807 set(handles.fre_cycle,'String',1/f(I));%\u8ba1\u7b97\u5e76\u8f93\u51fa\u5468\u671f set(handles.fre_fre,'String',f(I));%\u8f93\u51fa\u9891\u7387 Y=Y(1:(to-from+1)/2); plot(handles.axes_fre,f,2*sqrt(Y.*conj(Y))); plot(handles.axes_time,f,angle(Y)); plot(handles.axes_real,f,real(Y)); plot(handles.axes_img,f,imag(Y)); plot(handles.axes_power,f,abs(Y)); end \u7ed3\u679c\u5982\u56fe3 6. \u5b9e\u9a8c\u7ed3\u679c\u603b\u7ed3 \u56fe1.1 \u56fe1.2 \u56fe1.3.1 \u56fe1.3.2 \u56fe1.3.3 \u56fe1.3.4 \u56fe2 \u56fe3 7. \u7ed3\u679c\u5206\u6790 \u97f3\u9891\u4fe1\u53f7\u8f93\u5165 \u5b9e\u73b0\u5f55\u97f3\uff0c\u6587\u4ef6\uff0c\u4ee5\u53ca\u76f4\u63a5\u751f\u6210\u6b63\u5f26\u6ce2\u3001\u65b9\u6ce2\u3001\u4e09\u89d2\u6ce2\u3001\u952f\u9f7f\u6ce2\u3001\u767d\u566a\u58f0\u7684\u65b9\u5f0f\u8f93\u5165\u3002 \u65f6\u57df\u5206\u6790 \u7ed3\u679c\u5927\u81f4\u51c6\u786e\uff0c\u4f46\u5b58\u5728\u4e9b\u8bb8\u8bef\u5dee\u3002\u8fd9\u662f\u7531\u4e8e\u8fc7\u96f6\u68c0\u6d4b\u65e0\u6cd5\u5305\u62ec\u6240\u6709\u70b9\u3002 \u9891\u57df\u5206\u6790 \u7ed3\u679c\u5927\u81f4\u6b63\u786e\uff0c\u7a97\u51fd\u6570\u7684\u9009\u53d6\u8bef\u5dee\u5bfc\u81f4\u6709\u9891\u8c31\u6cc4\u9732\u7684\u73b0\u8c61\u53d1\u751f\u3002 8.\u5fc3\u5f97\u4f53\u4f1a \u5b66\u4f1a\u4e86guide\u5de5\u5177\u7bb1\u7684\u4f7f\u7528\uff0c\u5b66\u4f1a\u4e86\u7f16\u5199\u7b80\u5355\u4ea4\u4e92\u5f0f\u754c\u9762\u3002 \u5b66\u4f1a\u4e86\u6a21\u5757\u5316\u8bbe\u8ba1\u3002 \u7531matlab\u9762\u5411\u8fc7\u7a0b\u7f16\u7a0b\u8f6c\u53d8\u4e3a\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u3002","title":"\u97f3\u9891\u9891\u8c31\u5206\u6790\u4eea\u8bbe\u8ba1\u4e0e\u5b9e\u73b0"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#_1","text":"","title":"\u97f3\u9891\u9891\u8c31\u5206\u6790\u4eea\u8bbe\u8ba1\u4e0e\u5b9e\u73b0"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#1","text":"\u97f3\u9891\u9891\u8c31\u5206\u6790\u4eea\u8bbe\u8ba1\u4e0e\u5b9e\u73b0\u3002","title":"1. \u5b9e\u9a8c\u9879\u76ee\u540d\u79f0"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#2","text":"\u6784\u5efa\u4ea4\u4e92\u754c\u9762\uff0c\u5177\u6709\u64ad\u653e\u58f0\u97f3\u6587\u4ef6\uff0c\u663e\u793a\u6ce2\u5f62\u4e0e\u9891\u8c31\uff0c\u5e76\u53ef\u6d4b\u91cf\u58f0\u97f3\u65f6\u57df\u53c2\u6570\u3002","title":"2. \u5b9e\u9a8c\u76ee\u7684"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#3","text":"\u5b9e\u9a8c\u5185\u5bb9\uff1a MATLAB\u662f\u4e00\u4e2a\u6570\u636e\u5206\u6790\u548c\u5904\u7406\u529f\u80fd\u5341\u5206\u5f3a\u5927\u7684\u5de5\u7a0b\u5b9e\u7528\u8f6f\u4ef6\uff0c\u5176\u6570\u636e\u91c7\u96c6\u5de5\u5177\u7bb1\u4e3a\u5b9e\u73b0\u6570\u636e\u7684\u8f93\u5165\u548c\u8f93\u51fa\u63d0\u4f9b\u4e86\u5341\u5206\u65b9\u4fbf\u7684\u51fd\u6570\u548c\u547d\u4ee4\u3002\u672c\u5b9e\u9a8c\u8981\u6c42\u57fa\u4e8e\u58f0\u5361\u4e0eMATLAB\u5b9e\u73b0\u97f3\u9891\u4fe1\u53f7\u9891\u8c31\u5206\u6790\u4eea\u7684\u8bbe\u8ba1\u539f\u7406\u4e0e\u5b9e\u73b0\uff0c\u529f\u80fd\u5305\u62ec\uff1a (1) \u97f3\u9891\u4fe1\u53f7\u8f93\u5165\uff0c\u4ece\u58f0\u5361\u8f93\u5165\u3001\u4eceWAV\u6587\u4ef6\u8f93\u5165\u3001\u4ece\u6807\u51c6\u4fe1\u53f7\u53d1\u751f\u5668\u8f93\u5165\u3002 (2) \u4fe1\u53f7\u6ce2\u5f62\u5206\u6790\uff0c\u5305\u62ec\u5e45\u503c\u3001\u9891\u7387\u3001\u5468\u671f\u3001\u76f8\u4f4d\u7684\u4f30\u8ba1\uff0c\u4ee5\u53ca\u7edf\u8ba1\u91cf\u5cf0\u503c\u3001\u5747\u503c\u3001\u5747\u65b9\u503c\u548c\u65b9\u5dee\u7684\u8ba1\u7b97\u3002 (3) \u4fe1\u53f7\u9891\u8c31\u5206\u6790\uff0c\u9891\u7387\u3001\u5468\u671f\u7684\u4f30\u8ba1\uff0c\u56fe\u5f62\u663e\u793a\u5e45\u503c\u8c31\u3001\u76f8\u4f4d\u8c31\u3001\u5b9e\u9891\u8c31\u3001\u865a\u9891\u8c31\u548c\u529f\u7387\u8c31\u7684\u66f2\u7ebf\u3002 \u9891\u7387\uff08\u5468\u671f\uff09\u68c0\u6d4b \u5bf9\u5468\u671f\u4fe1\u53f7\u6765\u8bf4\uff0c\u53ef\u4ee5\u7528\u65f6\u57df\u6ce2\u5f62\u5206\u6790\u6765\u786e\u5b9a\u4fe1\u53f7\u7684\u5468\u671f\uff0c\u4e5f\u5c31\u662f\u8ba1\u7b97\u76f8 \u90bb\u7684\u4e24\u4e2a\u4fe1\u53f7\u6ce2\u5cf0\u7684\u65f6\u95f4\u5dee\uff0c\u6216\u8fc7\u96f6\u70b9\u7684\u65f6\u95f4\u5dee\u3002\u8fd9\u91cc\u91c7\u7528\u8fc7\u96f6\u70b9( t_s t_s )\u7684\u65f6\u95f4\u5dee T T (\u5468\u671f)\u3002\u9891\u7387\u5373\u4e3a f = 1/T f = 1/T \uff0c\u7531\u4e8e\u80fd\u591f\u6c42\u5f97\u591a\u4e2a T T \u503c( t_i t_i \u6709\u591a\u4e2a)\uff0c\u6545\u91c7\u7528\u5b83\u4eec\u7684\u5e73\u5747\u503c\u4f5c\u4e3a\u5468\u671f\u7684\u4f30\u8ba1\u503c\u3002 \u5e45\u503c\u68c0\u6d4b \u5728\u4e00\u4e2a\u5468\u671f\u5185\uff0c\u6c42\u51fa\u4fe1\u53f7\u6700\u5927\u503c y_{max} y_{max} \u4e0e\u6700\u5c0f\u503c y_{min} y_{min} \u7684\u5dee\u7684\u4e00\u534a\uff0c\u5373 A = (y_{max}-y_{min})/2 A = (y_{max}-y_{min})/2 ,\u540c\u6837\uff0c\u4e5f\u4f1a\u6c42\u51fa\u591a\u4e2a A A \u503c\uff0c\u4f46\u7b2c\u4e00\u4e2a A A \u503c\u5bf9\u5e94\u7684 y_{max} y_{max} \u548c y_{min} y_{min} \u4e0d\u662f\u5728\u4e00\u4e2a\u5468\u671f\u5185\u641c\u7d22\u5f97\u5230\u7684\uff0c\u6545\u4ee5\u9664\u7b2c\u4e00\u4e2a\u4ee5\u5916\u7684 A A \u503c\u7684\u5e73\u5747\u503c\u4f5c\u4e3a\u5e45\u503c\u7684\u4f30\u8ba1\u503c\u3002 \u76f8\u4f4d\u68c0\u6d4b \u91c7\u7528\u8fc7\u96f6\u6cd5\uff0c\u5373\u901a\u8fc7\u5224\u65ad\u4e0e\u540c\u9891\u7387\u96f6\u76f8\u4f4d\u4fe1\u53f7\u8fc7\u96f6\u70b9\u65f6\u523b\uff0c\u8ba1\u7b97\u5176\u65f6\u95f4\u5dee\uff0c\u7136\u540e\u6362\u6210\u76f8\u5e94\u7684\u76f8\u4f4d\u5dee\u3002 \\phi = 2\\pi(1-t_i/T) \\phi = 2\\pi(1-t_i/T) \uff0c\u540c\u6837\uff0c\u4ee5 \\phi \\phi \u7684\u5e73\u5747\u503c\u4f5c\u4e3a\u76f8\u4f4d\u7684\u4f30\u8ba1\u503c\u3002 \u6570\u5b57\u4fe1\u53f7\u7edf\u8ba1\u91cf\u4f30\u8ba1 \u5cf0\u503cP\u7684\u4f30\u8ba1\uff1a\u5728\u6837\u672c\u6570\u636ex\u4e2d\u627e\u51fa\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\uff0c\u5176\u5dee\u503c\u4e3a\u53cc\u5cf0\u503c\uff0c\u53cc\u5cf0\u503c\u7684\u4e00\u534a\u5373\u4e3a\u5cf0\u503c\u3002 P = 0.5[max(y_i)-min(y_i)] P = 0.5[max(y_i)-min(y_i)] \u5747\u503c\u4f30\u8ba1\uff1a $$ E(y) = \\frac{1}{N}\\sum_{i=0}^N y_i $$ \u5f0f\u4e2d\uff0cN\u4e3a\u6837\u672c\u5bb9\u91cf\uff0c\u4e0b\u540c\u3002 \u5747\u65b9\u503c\u4f30\u8ba1 E(y^2) = \\frac{1}{N}\\sum_{i=0}^N y_i^2 E(y^2) = \\frac{1}{N}\\sum_{i=0}^N y_i^2 \u65b9\u5dee\u4f30\u8ba1 D(y) = \\frac{1}{N}\\sum_{i=0}^N [y_i-E(y)]^2 D(y) = \\frac{1}{N}\\sum_{i=0}^N [y_i-E(y)]^2 \u9891\u8c31\u5206\u6790\u539f\u7406 \u65f6\u57df\u5206\u6790\u53ea\u80fd\u53cd\u6620\u4fe1\u53f7\u7684\u5e45\u503c\u968f\u65f6\u95f4\u7684\u53d8\u5316\u60c5\u51b5\uff0c\u9664\u5355\u9891\u7387\u5206\u91cf\u7684\u7b80\u5355\u6ce2 \u5f62\u5916\uff0c\u5f88\u96be\u660e\u786e\u63d0\u793a\u4fe1\u53f7\u7684\u9891\u7387\u7ec4\u6210\u548c\u5404\u9891\u7387\u5206\u91cf\u5927\u5c0f\uff0c\u800c\u9891\u8c31\u5206\u6790\u80fd\u5f88\u597d\u7684\u89e3\u51b3\u6b64\u95ee\u9898\u3002 DFT\u4e0eFFT \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u65f6\u57df\u4fe1\u53f7 y y \uff0c\u53ef\u4ee5\u901a\u8fc7 Fourier \u53d8\u6362\u5f97\u5230\u9891\u57df\u4fe1\u606f Y Y \u3002 \u91c7\u6837\u4fe1\u53f7\u7684\u9891\u8c31\u662f\u4e00\u4e2a\u8fde\u7eed\u7684\u9891\u8c31\uff0c\u4e0d\u53ef\u80fd\u8ba1\u7b97\u51fa\u6240\u6709\u7684\u70b9\u7684\u503c\uff0c\u6545\u91c7\u7528\u79bb\u6563 Fourier \u53d8\u6362(DFT)\u3002\u4f46\u8ba1\u7b97\u6548\u7387\u5f88\u4f4e\uff0c\u56e0\u4e3a\u6709\u5927\u91cf\u7684\u6307\u6570(\u7b49\u4ef7\u4e8e\u4e09\u89d2\u51fd\u6570)\u8fd0\u7b97\uff0c\u6545\u5b9e\u9645\u4e2d\u591a\u91c7\u7528\u5feb\u901f Fourier \u53d8\u6362(FFT)\u3002\u5176\u539f\u7406\u5373\u662f\u5c06\u91cd\u590d\u7684\u4e09\u89d2\u51fd\u6570\u7b97\u8ba1\u7684\u4e2d\u95f4\u7ed3\u679c\u4fdd\u5b58\u8d77\u6765\uff0c\u4ee5\u51cf\u5c11\u91cd\u590d\u4e09\u89d2\u51fd\u6570\u8ba1\u7b97\u5e26\u6765\u7684\u65f6\u95f4\u6d6a\u8d39\u3002\u7531\u4e8e\u4e09\u89d2\u51fd\u6570\u8ba1\u7b97\u7684\u91cd\u590d\u91cf\u76f8\u5f53\u5927\uff0c\u6545FFT\u80fd\u6781\u5927\u5730\u63d0\u9ad8\u8fd0\u7b97\u6548\u7387\u3002 \u9891\u7387\u3001\u5468\u671f\u7684\u4f30\u8ba1 \u5bf9\u4e8e Y(k\\triangle f) Y(k\\triangle f) \uff0c\u5982\u679c\u5f53 \\triangle f = \\tilde{f} \\triangle f = \\tilde{f} \u65f6\uff0c Y(k\\triangle f) Y(k\\triangle f) \u53d6\u6700\u5927\u503c\uff0c\u5219 \\tilde{f} \\tilde{f} \u4e3a\u9891\u7387\u7684\u4f30\u8ba1\u503c\uff0c\u7531\u4e8e\u91c7\u6837\u95f4\u9694\u7684\u8bef\u5dee\uff0c \\tilde{f} \\tilde{f} \u4e5f\u5b58\u5728\u8bef\u5dee\uff0c\u5176\u8bef\u5dee\u6700\u5927\u4e3a \\triangle f/2 \\triangle f/2 \u3002 \u5468\u671f T=1/f T=1/f \u3002 \u4ece\u539f\u7406\u4e0a\u53ef\u4ee5\u770b\u51fa\uff0c\u5982\u679c\u5728\u6807\u51c6\u4fe1\u53f7\u4e2d\u6df7\u6709\u566a\u58f0\uff0c\u7528\u4e0a\u8ff0\u65b9\u6cd5\u4ecd\u80fd\u591f\u7cbe\u786e\u5730\u4f30\u8ba1\u51fa\u539f\u6807\u51c6\u4fe1\u53f7\u7684\u9891\u7387\u548c\u5468\u671f\u3002 \u9891\u8c31\u56fe \u4e3a\u4e86\u76f4\u89c2\u5730\u8868\u793a\u4fe1\u53f7\u7684\u9891\u7387\u7279\u6027\uff0c\u5de5\u7a0b\u4e0a\u5e38\u5e38\u5c06Fourier\u53d8\u6362\u7684\u7ed3\u679c\u7528\u56fe\u5f62\u7684\u65b9\u5f0f\u8868\u793a\uff0c\u5373\u9891\u8c31\u56fe\u3002 \u4ee5\u9891\u7387 f f \u4e3a\u6a2a\u5750\u6807\uff0c |Y(f)| |Y(f)| \u4e3a\u7eb5\u5750\u6807\uff0c\u53ef\u4ee5\u5f97\u5230\u5e45\u503c\u8c31\uff1b \u4ee5\u9891\u7387 f f \u4e3a\u6a2a\u5750\u6807\uff0c arg Y(f) arg Y(f) \u4e3a\u7eb5\u5750\u6807\uff0c\u53ef\u4ee5\u5f97\u5230\u76f8\u4f4d\u8c31\uff1b \u4ee5\u9891\u7387 f f \u4e3a\u6a2a\u5750\u6807\uff0c Re Y(f) Re Y(f) \u4e3a\u7eb5\u5750\u6807\uff0c\u53ef\u4ee5\u5f97\u5230\u5b9e\u9891\u8c31\uff1b \u4ee5\u9891\u7387 f f \u4e3a\u6a2a\u5750\u6807\uff0c Im Y(f) Im Y(f) \u4e3a\u7eb5\u5750\u6807\uff0c\u53ef\u4ee5\u5f97\u5230\u865a\u9891\u8c31\u3002 \u6839\u636e\u91c7\u6837\u5b9a\u7406\uff0c\u53ea\u6709\u9891\u7387\u4e0d\u8d85\u8fc7 F_s/2 F_s/2 \u7684\u4fe1\u53f7\u624d\u80fd\u88ab\u6b63\u786e\u91c7\u96c6\uff0c\u5373 Fourier \u53d8\u6362\u7684\u7ed3\u679c\u4e2d\u9891\u7387\u5927\u4e8e F_s/2 F_s/2 \u7684\u90e8\u5206\u662f\u4e0d\u6b63\u786e\u7684\u90e8\u5206\uff0c\u6545\u4e0d\u5728\u9891\u8c31\u56fe\u4e2d\u663e\u793a\u3002\u5373\u6a2a\u5750\u6807 f \\in [0 ,F_s/2] f \\in [0 ,F_s/2] \u3002 \u6a21\u5757\u5212\u5206 \u6a21\u5757\u5316\u5c31\u662f\u628a\u7a0b\u5e8f\u5212\u5206\u6210\u72ec\u7acb\u547d\u540d\u4e14\u53ef\u72ec\u7acb\u8bbf\u95ee\u7684\u6a21\u5757\uff0c\u6bcf\u4e2a\u6a21\u5757\u5b8c\u6210\u4e00\u4e2a\u5b50\u529f\u80fd\uff0c\u628a\u8fd9\u4e9b\u6a21\u5757\u96c6\u6210\u8d77\u6765\u6784\u6210\u4e00\u4e2a\u6574\u4f53\uff0c\u53ef\u4ee5\u5b8c\u6210\u6307\u5b9a\u7684\u529f\u80fd\u6ee1\u8db3\u7528\u6237\u9700\u6c42\u3002\u6839\u636e\u4eba\u7c7b\u89e3\u51b3\u4e00\u822c\u95ee\u9898\u7684\u7ecf\u9a8c\uff0c\u5982\u679c\u4e00\u4e2a\u95ee\u9898\u7531\u4e24\u4e2a\u95ee\u9898\u7ec4\u5408\u800c\u6210\uff0c\u90a3\u4e48\u5b83\u7684\u590d\u6742\u7a0b\u5ea6\u5927\u4e8e\u5206\u522b\u8003\u8651\u6bcf\u4e2a\u95ee\u9898\u65f6\u7684\u590d\u6742\u7a0b\u5ea6\u4e4b\u548c\uff0c\u4e5f\u5c31\u662f\u8bf4\u628a\u590d\u6742\u7684\u95ee\u9898\u5206\u89e3\u6210\u8bb8\u591a\u5bb9\u6613\u89e3\u51b3\u7684\u5c0f\u95ee\u9898\uff0c\u539f\u6765\u7684\u95ee\u9898\u4e5f\u5c31\u5bb9\u6613\u89e3\u51b3\u4e86\u3002\u8fd9\u5c31\u662f\u6a21\u5757\u5316\u7684\u6839\u636e\u3002 \u5728\u6a21\u5757\u5212\u5206\u65f6\u5e94\u9075\u5faa\u5982\u4e0b\u89c4\u5219\uff1a\u6539\u8fdb\u8f6f\u4ef6\u7ed3\u6784\u63d0\u9ad8\u6a21\u5757\u72ec\u7acb\u6027\uff1b\u6a21\u5757\u89c4\u6a21\u5e94\u8be5\u9002\u4e2d\uff1b\u6df1\u5ea6\u3001\u5bbd\u5ea6\u3001\u6247\u51fa\u548c\u6247\u5165\u90fd\u5e94\u9002\u5f53\uff1b\u6a21\u5757\u7684\u4f5c\u7528\u57df\u5e94\u8be5\u5728\u63a7\u5236\u57df\u4e4b\u5185\uff1b\u529b\u4e89\u964d\u4f4e\u6a21\u5757\u63a5\u53e3\u7684\u590d\u6742\u7a0b\u5ea6\uff1b\u8bbe\u8ba1\u5355\u5165\u53e3\u5355\u51fa\u53e3\u7684\u6a21\u5757\uff1b\u6a21\u5757\u529f\u80fd\u5e94\u8be5\u53ef\u4ee5\u9884\u6d4b\u3002","title":"3. \u5b9e\u9a8c\u5185\u5bb9\u4e0e\u6b65\u9aa4"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#4","text":"MATLAB R2019b","title":"4. \u5b9e\u9a8c\u73af\u5883"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#5","text":"","title":"5. \u5b9e\u9a8c\u8fc7\u7a0b\u4e0e\u5206\u6790\u7a0b\u5e8f\u6587\u672c"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#_2","text":"","title":"\u97f3\u9891\u4fe1\u53f7\u8f93\u5165"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#_3","text":"function button_recording_Callback(hObject, eventdata, handles)%\u5f00\u59cb\u5f55\u97f3\u6309\u94ae if (get(handles.radio_audio,'Value')==1)%\u5f53\u9009\u62e9\u58f0\u5361\u65f6\uff0c\u624d\u80fd\u8fdb\u884c\u76f8\u5e94\u64cd\u4f5c\uff0c\u5426\u5219\u63d0\u793a\u9519\u8bef\u4fe1\u606f if(isempty(get(handles.input_fs_fre,'String'))==0)%\u5224\u65ad\u8bbe\u5b9a\u7684\u91c7\u6837\u9891\u7387\u662f\u5426\u4e3a\u7a7a recordtime=str2double(get(handles.recording_time,'String'));%\u8bfb\u53d6\u5f55\u97f3\u65f6\u95f4\u6570\u636e if(recordtime>0) handles.fs=str2double(get(handles.input_fs_fre,'String'));%\u83b7\u53d6\u8bbe\u5b9a\u7684\u91c7\u6837\u9891\u7387\uff0c\u8f6c\u4e3a\u6570\u5b57\u683c\u5f0f sound_length=round(recordtime*handles.fs);%\u5f55\u97f3\u70b9\u6570 record=audiorecorder(handles.fs,24,1);%\u4f9d\u636e\u91c7\u6837\u9891\u7387\u521b\u5efa\u5f55\u97f3\u5e8f\u5217\uff0c\u4f4d\u6570\u4e3a24\uff0c\u5355\u58f0\u9053 recordblocking(record,recordtime);%\u8f93\u5165\u5f55\u97f3\u5e8f\u5217\uff0c\u957f\u5ea6\u4fe1\u606f=\u65f6\u95f4 msgbox('Recording complete','Tip'); handles.sound=getaudiodata(record);%\u521b\u5efa\u83b7\u53d6\u5f55\u97f3\u6570\u636e\u7684\u6570\u7ec4 n=0:1:sound_length-1; time=n/handles.fs;%\u521b\u5efa\u663e\u793a\u7528\u7684\u65f6\u95f4\u5e8f\u5217 plot(handles.axes_analysis,time,handles.sound);%\u5728\u5206\u6790\u5bf9\u8c61\u533a\u57df\u6253\u5370\u51fa\u91c7\u96c6\u5230\u7684\u4fe1\u53f7\u7ed3\u679c title('Waveform of the Acquisition Signal'); set(handles.input_fs_num,'String',num2str(sound_length));%\u5728\u91c7\u6837\u70b9\u6570\u91cf\u7684\u6846\u5185\u663e\u793a\u5f53\u524d\u91c7\u6837\u9891\u7387\u4e0b\u5bf9\u6837\u672c\u4fe1\u53f7\u7684\u91c7\u6837\u70b9\u6570 handles.complete=1;%\u8868\u660e\u4e3a\u58f0\u5361\u91c7\u96c6\u5b8c\u6210 guidata(handles.button_recording,handles);%\u50a8\u5b58handles\u7ed3\u6784\u4f53\uff0c\u50a8\u5b58sound\u4fe1\u53f7,fs\u6570\u503c else errordlg('No recording time set','Enter error');%\u63d0\u793a\u672a\u8bbe\u5b9a\u5f55\u97f3\u65f6\u95f4 end else errordlg('Sample frequency not set','Enter error');%\u63d0\u793a\u672a\u8bbe\u5b9a\u91c7\u6837\u9891\u7387 end else errordlg('Sound card button not enabled','Choose error');%\u63d0\u793a\u672a\u9009\u62e9\u58f0\u5361 end end \u7ed3\u679c\u5982\u56fe1.1","title":"\u58f0\u5361\u8f93\u5165"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#wav","text":"function choice_files_Callback(hObject, eventdata, handles)%\u624b\u52a8\u9009\u62e9\u6587\u4ef6\u6309\u94ae [filename, pathname] = uigetfile('*', '\u8bfb\u53d6\u97f3\u9891\u6587\u4ef6') if([pathname,filename]~=0) set(handles.filename,'String',[pathname,filename]); end end function button_open_file_Callback(hObject, eventdata, handles)%\u6253\u5f00\u6587\u4ef6\u6309\u94ae if (get(handles.radio_wav,'Value')==1)%\u5f53\u9009\u62e9\u6587\u4ef6\u8bfb\u53d6\u65f6\uff0c\u624d\u80fd\u8fdb\u884c\u76f8\u5e94\u64cd\u4f5c\uff0c\u5426\u5219\u63d0\u793a\u9519\u8bef\u4fe1\u606f if((isempty(get(handles.filename,'String'))==0))%\u5224\u65ad\u6587\u4ef6\u540d\u8f93\u5165\u662f\u5426\u4e3a\u7a7a [y,Fs] =audioread(get(handles.filename,'String'));%\u83b7\u53d6\u6240\u9009\u6587\u4ef6\u7684\u58f0\u97f3\u4fe1\u53f7\uff0c\u5f97\u5230\u4fe1\u53f7\u77e9\u9635\u548c\u4fe1\u53f7\u9891\u7387 [leng,channel]=size(y);%\u5bf9y\u8fdb\u884c\u5217\u6570\u5224\u65ad\uff0c\u6c42\u5f97\u58f0\u9053\u6570\u76ee,\u4ee5\u53ca\u6240\u5f97\u5230\u7684\u6570\u636e\u70b9\u7684\u6570\u76ee set(handles.input_fs_fre,'String',num2str(Fs)); set(handles.input_fs_num,'String',num2str(leng));%\u8bbe\u7f6e\u91c7\u6837\u9891\u7387\u548c\u70b9\u6570 switch (channel) case 1%\u5355\u58f0\u9053 set(handles.sound_channel,'Value',1); set(handles.sound_channel,'Enable','off'); msgbox('\u8f93\u5165\u7684\u662f\u5355\u58f0\u9053\u6587\u4ef6','Tip'); handles.fs=Fs; handles.sound=y(:,channel);%\u77e9\u9635\u7ef4\u5ea6\u4e00\u81f4\uff0c\u5747\u4e3a\u591a\u884c\u5355\u5217 guidata(handles.button_open_file,handles);%\u50a8\u5b58sound\u4fe1\u606f time=0:1/handles.fs:(leng-1)/handles.fs; plot(handles.axes_analysis,time,handles.sound);%\u5728\u5206\u6790\u5bf9\u8c61\u533a\u57df\u6253\u5370\u51fa\u91c7\u96c6\u5230\u7684\u4fe1\u53f7\u7ed3\u679c title('\u97f3\u9891\u4fe1\u53f7\u7684\u6ce2\u5f62'); otherwise set(handles.sound_channel,'Value',2); msgbox('\u58f0\u9053\u6570\u76ee\u8d85\u8fc7\u4e00\u4e2a\uff0c\u8bf7\u9009\u62e9\u6240\u9009\u53d6\u7684\u58f0\u9053\uff0c\u9ed8\u8ba4\u9009\u53d6\u5de6\u58f0\u9053','Tip'); handles.fs=Fs; handles.sound=y(:,:); guidata(handles.button_open_file,handles); set(handles.filename,'Enable','off'); set(handles.choice_files,'Enable','off'); set(handles.button_open_file,'Enable','off'); end else errordlg('\u672a\u8bbe\u7f6e\u6587\u4ef6\u76ee\u5f55','Enter error');%\u63d0\u793a\u672a\u8bbe\u7f6e\u6587\u4ef6\u76ee\u5f55 end else errordlg('\u672a\u542f\u7528\u6587\u4ef6\u8bfb\u53d6\u6309\u94ae','Choose error');%\u63d0\u793a\u672a\u9009\u62e9\u6587\u4ef6\u8bfb\u53d6 end end function sound_channel_Callback(hObject, eventdata, handles) choice_channel=get(handles.sound_channel,'Value'); if(choice_channel>1) choice_channel=choice_channel-1; end handles.sound=handles.sound(:,choice_channel); leng=length(handles.sound); guidata(handles.button_open_file,handles);%\u50a8\u5b58sound\u4fe1\u606f time=0:1/handles.fs:(leng-1)/handles.fs; plot(handles.axes_analysis,time,handles.sound);%\u5728\u5206\u6790\u5bf9\u8c61\u533a\u57df\u6253\u5370\u51fa\u91c7\u96c6\u5230\u7684\u4fe1\u53f7\u7ed3\u679c title('\u97f3\u9891\u4fe1\u53f7\u7684\u6ce2\u5f62'); set(handles.filename,'Enable','on'); set(handles.choice_files,'Enable','on'); set(handles.button_open_file,'Enable','on'); end function sound_channel_CreateFcn(hObject, eventdata, handles) if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor')) set(hObject,'BackgroundColor','white'); end end \u7ed3\u679c\u5982\u56fe1.2","title":"WAV\u6587\u4ef6\u8f93\u5165"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#_4","text":"function button_signal_Callback(hObject, eventdata, handles) %\u751f\u6210\u6ce2\u5f62\u6309\u94ae if ((get(handles.radio_signal,'Value')+get(handles.check_mixing,'Value'))==1) if(isempty(get(handles.input_fs_fre,'String'))==0)%\u5224\u65ad\u8bbe\u5b9a\u7684\u91c7\u6837\u9891\u7387\u662f\u5426\u4e3a\u7a7a if((isempty(get(handles.input_am,'String'))==0)&&(isempty(get(handles.input_vlotage,'String'))==0)&&(isempty(get(handles.input_phase,'String'))==0)) handles.fs=str2double(get(handles.input_fs_fre,'String'));%\u83b7\u53d6\u8bbe\u5b9a\u7684\u91c7\u6837\u9891\u7387\uff0c\u8f6c\u4e3a\u6570\u5b57\u683c\u5f0f signal_soundtype=get(handles.signal_choice,'Value');%\u83b7\u53d6\u4fe1\u53f7\u53d1\u751f\u5668\u533a\u57df\u7684\u6570\u636e signal_fre=str2double(get(handles.input_am,'String'));%\u83b7\u53d6\u4fe1\u53f7\u53d1\u751f\u5668\u7684\u4e09\u4e2a\u6d6e\u70b9\u6570\u6570\u636e\uff0c\u7528\u4e8e\u4ea7\u751f\u4fe1\u53f7\u4f7f\u7528 signal_vlotage=str2double(get(handles.input_vlotage,'String')); signal_phase=str2double(get(handles.input_phase,'String'))/180*pi;%\u8f6c\u6362\u4e3api if (get(handles.radio_signal,'Value')==1)%\u5982\u679c\u4e0d\u9009\u62e9\u6df7\u53e0\uff0c\u6309\u7167\u9891\u7387\u8fdb\u884c\u91c7\u6837\u64cd\u4f5c signal_time=str2double(get(handles.signal_nmix_time,'String'));%\u83b7\u53d6\u975e\u6df7\u53e0\u60c5\u51b5\u4e0b\u751f\u6210\u4fe1\u53f7\u7684\u65f6\u95f4 if(signal_time==0) errordlg('\u975e\u6df7\u53e0\u60c5\u51b5\u4e0b\u9700\u8bbe\u7f6e\u53d1\u751f\u5668\u65f6\u95f4','error'); return; end number=round(handles.fs*signal_time); t=(0:1.0/handles.fs:(number-1)/handles.fs);%\u91c7\u6837\u65f6\u95f4\u5e8f\u5217 else%\u5982\u679c\u4ea7\u751f\u6df7\u53e0\uff0c\u5219\u8bfb\u53d6\u5df2\u7ecf\u6709\u7684\u6570\u636e\u7684\u91c7\u6837\u70b9\u6570 number=str2double(get(handles.input_fs_num,'String'));%\u83b7\u53d6\u91c7\u6837\u70b9\u6570 t=(0:1.0/handles.fs:(number-1)/handles.fs);%\u91c7\u6837\u65f6\u95f4\u5e8f\u5217 end%\u521b\u5efa\u65f6\u95f4\u5e8f\u5217 switch signal_soundtype%\u4e0d\u9700\u8981\u52a0\u5165break case 1%\u6807\u51c6\u6b63\u5f26\u6ce2 y=signal_vlotage*sin(2*pi*t*signal_fre+signal_phase); case 2%\u65b9\u6ce2 y=signal_vlotage*sign(sin(2*pi*t*signal_fre+signal_phase)); case 3%\u4e09\u89d2\u6ce2 y=signal_vlotage*sawtooth(2*pi*t*signal_fre+signal_phase,0.5); case 4%\u952f\u9f7f\u6ce2 y=signal_vlotage*sawtooth(2*pi*t*signal_fre+signal_phase); case 5%\u767d\u566a\u58f0 y=signal_vlotage*sin(2*rand(size(t))-1); otherwise%\u4e0d\u6ee1\u8db3\u5219\u62a5\u9519 errordlg('\u6ce2\u5f62\u7c7b\u578b\u9009\u62e9\u51fa\u9519','Choose error'); end if (get(handles.radio_signal,'Value')==1)%\u5982\u679c\u6ca1\u6709\u9009\u62e9\u6df7\u53e0\u6309\u94ae\uff0c\u5219\u4e0d\u4e0e\u53e6\u5916\u4e24\u4e2a\u4fe1\u53f7\u76f8\u53e0\u52a0 handles.sound=y'; else%sound\u4e0ey\u957f\u5ea6\u76f8\u540c\uff0c\u4f46\u77e9\u9635\u7ef4\u5ea6\u4e0d\u540c size(y'); handles.sound=handles.sound+y'; size(handles.sound); end n=0:1:number-1; time=n/handles.fs;%\u521b\u5efa\u663e\u793a\u7528\u7684\u65f6\u95f4\u5e8f\u5217 plot(handles.axes_analysis,time,handles.sound);%\u5728\u5206\u6790\u5bf9\u8c61\u533a\u57df\u6253\u5370\u51fa\u91c7\u96c6\u5230\u7684\u4fe1\u53f7\u7ed3\u679c title('\u91c7\u96c6\u4fe1\u53f7\u7684\u6ce2\u5f62'); set(handles.input_fs_num,'String',num2str(number));%\u5728\u91c7\u6837\u70b9\u6570\u91cf\u7684\u6846\u5185\u663e\u793a\u5f53\u524d\u91c7\u6837\u9891\u7387\u4e0b\u5bf9\u6837\u672c\u4fe1\u53f7\u7684\u91c7\u6837\u70b9\u6570 guidata(handles.button_signal,handles);%\u50a8\u5b58\u6570\u636e else errordlg('\u672a\u8bbe\u5b9a\u53d1\u751f\u5668\u914d\u7f6e','Enter error');%\u63d0\u793a\u672a\u8bbe\u5b9a\u53d1\u751f\u5668\u914d\u7f6e\u4fe1\u606f end else errordlg('\u672a\u8bbe\u5b9a\u91c7\u6837\u9891\u7387','Enter error');%\u63d0\u793a\u672a\u8bbe\u5b9a\u91c7\u6837\u9891\u7387 end else errordlg('\u5fc5\u987b\u9009\u62e9\u4fe1\u53f7\u53d1\u751f\u5668\u548c\u6df7\u53e0\u6309\u94ae\u4e4b\u4e2d\u7684\u4e00\u4e2a','Choose error'); end end \u7ed3\u679c\u5982\u56fe1.3.1-1.3.4\uff0c\u5176\u4e2d\u59821.3.4\u4e3a\u5e45\u503c\u4e3a1\uff0c\u9891\u7387\u5206\u522b\u4e3a1Hz\u548c2Hz\u6b63\u5f26\u7684\u6df7\u53e0","title":"\u4fe1\u53f7\u53d1\u751f\u5668\u8f93\u5165"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#_5","text":"function button_time_Callback(hObject, eventdata, handles)%\u65f6\u57df\u5206\u6790\u6309\u94ae n=1; ymax=0;ymin=0; i=3;%\u521d\u59cb\u5316\u76f8\u5e94\u53d8\u91cf N=length(handles.sound);%\u83b7\u53d6\u58f0\u97f3\u4fe1\u53f7\u7684\u957f\u5ea6 ti=0; while(1) if((handles.sound(i-1)<0)&&(handles.sound(i-2)<0)&&(handles.sound(i)>=0)&&(handles.sound(i+1)>0)) if(handles.sound(i)>0) ti(n)=i/handles.fs; else ti(n)=(i-handles.sound(i)/(handles.sound(i)-handles.sound(i-1)))/handles.fs; end A(n)=(ymax-ymin)/2; ymax=0;ymin=0; n=n+1; else if(ymax<handles.sound(i)) ymax=handles.sound(i); end if(ymin>handles.sound(i)) ymin=handles.sound(i); end end i=i+1; if(i>N-1) break; end end len_ti=length(ti); if(len_ti<2) errordlg('\u8fc7\u96f6\u70b9\u4e2a\u6570\u4e0d\u8db3\uff0c\u65e0\u6cd5\u8fdb\u884c\u5206\u6790','error');%\u63d0\u793a\u672a\u9009\u62e9\u58f0\u5361 return; end for temp=2:1:len_ti T(temp-1)=(ti(temp)-ti(temp-1)); end freq=1/mean(T)%\u8ba1\u7b97\u9891\u7387 set(handles.analysis_cycle,'String',num2str(1/freq)); set(handles.analysis_fre,'String',num2str(freq));%\u8f93\u51fa\u9891\u7387\u4f30\u8ba1\u503c set(handles.analysis_vlotage,'String',num2str(mean(A(2:n-1)))); if (get(handles.check_point,'Value')==1) from=1; to=str2double(get(handles.input_fs_num,'String')); else from=str2num(get(handles.first_point,'String')); to=str2num(get(handles.last_point,'String')); end phase=2*180*(1-(ti(2:n-1)-1)./T+floor((ti(2:n-1)-1)./T)); set(handles.analysis_phase,'String',num2str(mean(phase)));%\u76f8\u4f4d set(handles.analysis_high,'String',(max(handles.sound(from:to))-min(handles.sound(from:to)))/2);%\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u7684\u4e00\u534a\u5373\u4e3a\u5cf0\u503c set(handles.analysis_mean,'String',mean(handles.sound(from:to)));%\u5747\u503c set(handles.analysis_square,'String',mean(handles.sound(from:to).^2));%\u5747\u65b9\u503c set(handles.analysis_variance,'String',std(handles.sound(from:to))^2);%\u8f93\u51fa\u65b9\u5dee end \u7ed3\u679c\u5982\u56fe2","title":"\u65f6\u57df\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#_6","text":"function button_fre_Callback(hObject, eventdata, handles)%\u9891\u57df\u5206\u6790\u6309\u94ae if (get(handles.check_point,'Value')==1) from=1; to=str2double(get(handles.input_fs_num,'String')); else from=str2num(get(handles.first_point,'String')); to=str2num(get(handles.last_point,'String')); end sample=handles.sound(from:to);%\u53d6\u51fasound\u4fe1\u53f7\u7684\u6570\u636e\uff0c\u5b58\u653e\u5230\u4e34\u65f6\u7a7a\u95f4\u4e2d f=linspace(0,handles.fs/2,(to-from+1)/2);%\u751f\u6210\u79bb\u6563\u5316\u7684\u9891\u7387\u70b9\uff0c\u4ee5\u91c7\u6837\u9891\u7387\u4f5c\u4e3a\u79bb\u6563\u5316\u65f6\u95f4\u95f4\u9694 Y=fft(sample,to-from+1);%\u5bf9\u79bb\u6563\u4fe1\u53f7\u8fdb\u884c\u5085\u91cc\u53f6\u53d8\u6362 [C,I]=max(abs(Y));%\u6c42\u7684\u5e45\u503c\u6700\u5927\u7684\u70b9\u53ca\u5176\u4e0b\u6807 set(handles.fre_cycle,'String',1/f(I));%\u8ba1\u7b97\u5e76\u8f93\u51fa\u5468\u671f set(handles.fre_fre,'String',f(I));%\u8f93\u51fa\u9891\u7387 Y=Y(1:(to-from+1)/2); plot(handles.axes_fre,f,2*sqrt(Y.*conj(Y))); plot(handles.axes_time,f,angle(Y)); plot(handles.axes_real,f,real(Y)); plot(handles.axes_img,f,imag(Y)); plot(handles.axes_power,f,abs(Y)); end \u7ed3\u679c\u5982\u56fe3","title":"\u9891\u57df\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#6","text":"\u56fe1.1 \u56fe1.2 \u56fe1.3.1 \u56fe1.3.2 \u56fe1.3.3 \u56fe1.3.4 \u56fe2 \u56fe3","title":"6. \u5b9e\u9a8c\u7ed3\u679c\u603b\u7ed3"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#7","text":"","title":"7. \u7ed3\u679c\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#_7","text":"\u5b9e\u73b0\u5f55\u97f3\uff0c\u6587\u4ef6\uff0c\u4ee5\u53ca\u76f4\u63a5\u751f\u6210\u6b63\u5f26\u6ce2\u3001\u65b9\u6ce2\u3001\u4e09\u89d2\u6ce2\u3001\u952f\u9f7f\u6ce2\u3001\u767d\u566a\u58f0\u7684\u65b9\u5f0f\u8f93\u5165\u3002","title":"\u97f3\u9891\u4fe1\u53f7\u8f93\u5165"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#_8","text":"\u7ed3\u679c\u5927\u81f4\u51c6\u786e\uff0c\u4f46\u5b58\u5728\u4e9b\u8bb8\u8bef\u5dee\u3002\u8fd9\u662f\u7531\u4e8e\u8fc7\u96f6\u68c0\u6d4b\u65e0\u6cd5\u5305\u62ec\u6240\u6709\u70b9\u3002","title":"\u65f6\u57df\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#_9","text":"\u7ed3\u679c\u5927\u81f4\u6b63\u786e\uff0c\u7a97\u51fd\u6570\u7684\u9009\u53d6\u8bef\u5dee\u5bfc\u81f4\u6709\u9891\u8c31\u6cc4\u9732\u7684\u73b0\u8c61\u53d1\u751f\u3002","title":"\u9891\u57df\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/FrenquencySpectrumAnalyzer/#8","text":"\u5b66\u4f1a\u4e86guide\u5de5\u5177\u7bb1\u7684\u4f7f\u7528\uff0c\u5b66\u4f1a\u4e86\u7f16\u5199\u7b80\u5355\u4ea4\u4e92\u5f0f\u754c\u9762\u3002 \u5b66\u4f1a\u4e86\u6a21\u5757\u5316\u8bbe\u8ba1\u3002 \u7531matlab\u9762\u5411\u8fc7\u7a0b\u7f16\u7a0b\u8f6c\u53d8\u4e3a\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u3002","title":"8.\u5fc3\u5f97\u4f53\u4f1a"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/","text":"\u79bb\u6563\u65f6\u95f4\u6ee4\u6ce2\u5668\u8bbe\u8ba1 1. \u5b9e\u9a8c\u9879\u76ee\u540d\u79f0 \u79bb\u6563\u65f6\u95f4\u6ee4\u6ce2\u5668\u8bbe\u8ba1 2.\u5b9e\u9a8c\u76ee\u7684 \u8bbe\u8ba1\u548c\u5206\u6790\u4e00\u7ec4\u6ee4\u6ce2\u5668\uff0c\u83b7\u5f97\u5bf9\u8bbe\u8ba1\u8fc7\u7a0b\u7684\u6df1\u5165\u8ba4\u8bc6\uff0c\u5e76\u4e14\u638c\u63e1\u51e0\u79cd\u6807\u51c6\u8bbe\u8ba1\u65b9\u6cd5\u7684\u7279\u70b9\uff0c\u8981\u6c42\u5408\u7ec4\u8ba8\u8bba\uff0c\u5355\u72ec\u5b9e\u9a8c\uff0c2\u5b66\u65f6\u3002 3. \u5b9e\u9a8c\u5185\u5bb9\u4e0e\u6b65\u9aa4 IIR\u6570\u5b57\u6ee4\u6ce2\u5668\u7684\u8bbe\u8ba1 \u8109\u51b2\u54cd\u5e94\u4e0d\u53d8\u6cd5\u53d8\u6362\u539f\u7406\uff1a \u8109\u51b2\u76f8\u5e94\u4e0d\u53d8\u6cd5\u5c06\u6a21\u62df\u6ee4\u6ce2\u5668\u7684 s s \u5e73\u9762\u53d8\u6362\u6210\u6570\u5b57\u6ee4\u6ce2\u5668\u7684 z z \u5e73\u9762\uff0c\u4ece\u800c\u5c06\u6a21\u62df\u6ee4\u6ce2\u5668\u6620\u5c04\u6210\u6570\u5b57\u6ee4\u6ce2\u5668 IIR\u6570\u5b57\u6ee4\u6ce2\u5668\u8bbe\u8ba1\u7684\u91cd\u8981\u73af\u8282\u662f\u6a21\u62df\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684\u8bbe\u8ba1\uff0c\u5178\u578b\u7684\u6a21\u62df\u4f4e\u901a\u6ee4\u6ce2\u5668\u7531\u5df4\u7279\u6c83\u601d\u548c\u5207\u6bd4\u96ea\u592b(\u2160\u578b\u548c\u2161\u578b)\u7b49\u6ee4\u6ce2\u5668\u3002\u7531\u6a21\u62df\u4f4e\u901a\u6ee4\u6ce2\u5668\u7ecf\u8fc7\u76f8\u5e94\u7684\u590d\u9891\u7387\u8f6c\u6362\u4e3a H(s) H(s) \uff0c\u7531 H(s) H(s) \u7ecf\u8fc7\u8109\u51b2\u76f8\u5e94\u4e0d\u53d8\u6cd5\u5c31\u5f97\u5230\u4e86\u6240\u9700\u8981\u7684IIR\u6570\u5b57\u6ee4\u6ce2\u5668 H(z) H(z) \u3002 \u53cc\u7ebf\u6027\u53d8\u6362\u6cd5\u539f\u7406 \u4e3a\u514b\u670d\u8109\u51b2\u54cd\u5e94\u4e0d\u53d8\u6cd5\u4ea7\u751f\u9891\u7387\u76f8\u5e94\u7684\u6df7\u53e0\u5931\u771f\uff0c\u53ef\u4ee5\u91c7\u7528\u975e\u7ebf\u6027\u9891\u7387\u538b\u7f29\u65b9\u6cd5\uff0c\u4f7fs\u5e73\u9762\u4e0ez\u5e73\u9762\u5efa\u7acb\u4e86\u4e00\u4e00\u5bf9\u5e94\u7684\u5355\u503c\u5173\u7cfb\uff0c\u6d88\u9664\u4e86\u591a\u503c\u53d8\u6362\u6027\uff0c\u4e5f\u5c31\u6d88\u9664\u4e86\u9891\u8c31\u6df7\u53e0\u73b0\u8c61\uff0c\u8fd9\u5c31\u662f\u53cc\u7ebf\u6027\u53d8\u6362\u6cd5\u3002 \u5b9e\u9a8c\u5185\u5bb9\uff1a \u8981\u6c42\u901a\u5e26\u622a\u6b62\u9891\u7387 f_p = 3kHz f_p = 3kHz \uff0c\u901a\u5e26\u6700\u5927\u8870\u51cf a_p = 1dB a_p = 1dB \uff0c\u963b\u5e26\u622a\u6b62\u9891\u7387 f_s = 4.5kHz f_s = 4.5kHz \uff0c\u963b\u5e26\u6700\u5c0f\u8870\u51cf a_s = 15dB a_s = 15dB \uff0c\u91c7\u6837\u9891\u7387 f_c = 30kHz f_c = 30kHz \uff0c\u7528\u8109\u51b2\u54cd\u5e94\u4e0d\u53d8\u6cd5\u8bbe\u8ba1\u4e00\u4e2a\u5207\u6bd4\u96ea\u592b\u6570\u5b57\u4f4e\u901a\u6ee4\u6ce2\u5668\uff0c\u5e76\u56fe\u793a\u6ee4\u6ce2\u5668\u7684\u632f\u5e45\u7279\u6027\uff0c\u68c0\u9a8c \\omega_p \\omega_p \uff0c \\omega_s \\omega_s \u5bf9\u5e94\u7684\u8870\u51cf\u3002 \u7528\u53cc\u7ebf\u6027\u53d8\u6362\u6cd5\u8bbe\u8ba1\u4e00\u4e2a\u5207\u6bd4\u96ea\u592b\u2160\u578b\u6570\u5b57\u9ad8\u901a\u6ee4\u6ce2\u5668\u3002\u6280\u672f\u6307\u6807\u4e3a:\u91c7\u6837\u9891\u7387 f_c = 2kHz f_c = 2kHz \uff0c\u901a\u5e26\u622a\u6b62\u9891\u7387 f_p = 700Hz f_p = 700Hz \uff0c\u901a\u5e26\u6700\u5927\u8870\u51cf a_p \\le 1dB a_p \\le 1dB \uff1b\u963b\u5e26\u8fb9\u7f18\u9891\u7387 f_s = 500Hz f_s = 500Hz \uff0c\u6700\u5e26\u6700\u5c0f\u8870\u51cf a_s \\ge 32dB a_s \\ge 32dB \u3002 \u7a97\u51fd\u6570\u6cd5\u8bbe\u8ba1FIR\u6570\u5b57\u6ee4\u6ce2\u5668 \u8bbe\u8ba1\u539f\u7406 FIR\u6ee4\u6ce2\u5668\u7684\u8bbe\u8ba1\u95ee\u9898\uff0c\u5c31\u662f\u8981\u662f\u6240\u8bbe\u8ba1\u7684FIR\u6ee4\u6ce2\u5668\u7684\u9891\u7387\u54cd\u5e94 H(e^{j\\omega}) H(e^{j\\omega}) \u903c\u8fd1\u6240\u8981\u6c42\u7684\u7406\u60f3\u6ee4\u6ce2\u5668\u7684\u9891\u7387\u54cd\u5e94 H_d(e^{j\\omega}) H_d(e^{j\\omega}) \u3002\u903c\u8fd1\u53ef\u5728\u65f6\u57df\u8fdb\u884c\uff0c\u4e5f\u53ef\u5728\u9891\u57df\u8fdb\u884c\u3002\u7a97\u51fd\u6570\u6cd5\u8bbe\u8ba1FIR\u6570\u5b57\u6ee4\u6ce2\u5668\u5b9e\u5728\u65f6\u57df\u8fdb\u884c\u7684\uff0c\u7528\u7a97\u51fd\u6570\u622a\u53d6\u65e0\u9650\u957f\u7684 h_d(n) h_d(n) \uff0c\u8fd9\u6837\u5f97\u5230\u7684\u9891\u7387\u54cd\u5e94 H(e^{j\\omega}) H(e^{j\\omega}) \u903c\u8fd1\u4e8e\u7406\u60f3\u7684\u9891\u7387\u54cd\u5e94 H_d(e^{j\\omega}) H_d(e^{j\\omega}) \u3002 \u5b9e\u9a8c\u5185\u5bb9\uff1a \u6839\u636e\u4e0b\u5217\u6307\u6807\u91c7\u7528\u7a97\u51fd\u6570\u6cd5\u8bbe\u8ba1\u4f4e\u901a\u6570\u5b57\u6ee4\u6ce2\u5668\uff0c\u901a\u5e26\u622a\u6b62\u9891\u7387 \\omega_p = 0.2\\pi \\omega_p = 0.2\\pi \uff0c\u963b\u5e26\u622a\u81f3\u9891\u7387 \\omega_s = 0.3\\pi \\omega_s = 0.3\\pi \uff0c\u901a\u5e26\u6700\u5927\u8870\u51cf 0.25dB 0.25dB \uff0c\u963b\u5e26\u6700\u5c0f\u8870\u51cf 50dB 50dB \u3002 (1)\u5206\u522b\u5229\u7528\u6c49\u660e\u7a97\u3001\u5e03\u83b1\u514b\u66fc\u7a97\u548c\u51ef\u6cfd\u7a97\u8bbe\u8ba1\u8be5\u6ee4\u6ce2\u5668\uff0c\u4e14\u6ee4\u6ce2\u5668\u5177\u6709\u7ebf\u6027\u76f8\u4f4d\u3002\u6c47\u51fa\u8109\u51b2\u76f8\u5e94h(n)\u53ca\u6ee4\u6ce2\u5668\u7684\u9891\u7387\u54cd\u5e94\u3002 (2)\u589e\u52a0N\uff0c\u89c2\u5bdf\u8fc7\u6e21\u5e26\u548c\u6700\u5927\u80a9\u5cf0\u503c\u7684\u53d8\u5316\u3002 \u5229\u7528\u6c49\u660e\u7a97\u8bbe\u8ba1\u6570\u5b57\u5fae\u5206\u5668\uff0c H_d(\\omega) = \\begin{cases} j\\omega ,& 0 < \\omega \\le \\pi \\\\ -j\\omega ,& -\\pi < \\omega < 0 \\end{cases} H_d(\\omega) = \\begin{cases} j\\omega ,& 0 < \\omega \\le \\pi \\\\ -j\\omega ,& -\\pi < \\omega < 0 \\end{cases} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">H_d(\\omega) = \\begin{cases} j\\omega ,&amp; 0 &lt; \\omega \\le \\pi \\\\ -j\\omega ,&amp; -\\pi &lt; \\omega &lt; 0 \\end{cases}</span><script type=\"math/tex\">H_d(\\omega) = \\begin{cases} j\\omega ,& 0 < \\omega \\le \\pi \\\\ -j\\omega ,& -\\pi < \\omega < 0 \\end{cases} \u8981\u6c42N=21\uff0c\u4e14\u6ee4\u6ce2\u5668\u5177\u6709\u7ebf\u6027\u76f8\u4f4d\u3002 4. \u5b9e\u9a8c\u73af\u5883 MATLAB R2019b 5. \u5b9e\u9a8c\u8fc7\u7a0b\u4e0e\u5206\u6790\u7a0b\u5e8f\u6587\u672c IIR\u6570\u5b57\u6ee4\u6ce2\u5668\u7684\u8bbe\u8ba1 \u8981\u6c42\u901a\u5e26\u622a\u6b62\u9891\u7387 f_p = 3kHz f_p = 3kHz \uff0c\u901a\u5e26\u6700\u5927\u8870\u51cf a_p = 1dB a_p = 1dB \uff0c\u963b\u5e26\u622a\u6b62\u9891\u7387 f_s = 4.5kHz f_s = 4.5kHz \uff0c\u963b\u5e26\u6700\u5c0f\u8870\u51cf a_s = 15dB a_s = 15dB \uff0c\u91c7\u6837\u9891\u7387 f_c = 30kHz f_c = 30kHz \uff0c\u7528\u8109\u51b2\u54cd\u5e94\u4e0d\u53d8\u6cd5\u8bbe\u8ba1\u4e00\u4e2a\u5207\u6bd4\u96ea\u592b\u6570\u5b57\u4f4e\u901a\u6ee4\u6ce2\u5668\uff0c\u5e76\u56fe\u793a\u6ee4\u6ce2\u5668\u7684\u632f\u5e45\u7279\u6027\uff0c\u68c0\u9a8c \\omega_p \\omega_p \uff0c \\omega_s \\omega_s \u5bf9\u5e94\u7684\u8870\u51cf\u3002 clear; wp = 2*pi*3*10^3; ws = 2*pi*4.5*10^3; ap = 1; as = 15; Fs = 30*10^3; %\u91c7\u6837\u9891\u7387 wp1 = wp/Fs; ws1 = ws/Fs; %\u6570\u5b57\u9891\u7387 [N,WC] = cheb1ord(wp,ws,ap,as,'s'); %\u786e\u5207\u6bd4\u96ea\u592b\u4f4e\u901a\u9636\u6570\u622a\u6b62\u9891\u7387 [b,a] = cheby1(N,ap,WC,'low','s'); %\u8c03\u7528\u51fd\u6570\u8bbe\u8ba1\u591a\u9879\u5f0f\u7cfb\u6570 [bz,az] = impinvar(b,a,Fs); %\u8109\u51b2\u54cd\u5e94\u4e0d\u53d8\u6cd5\u5b9e\u73b0\u6570\u5b57\u4f4e\u901a w0 = [wp1,ws1]; Hx = freqz(bz,az,w0); %\u8fd4\u56de\u7279\u5b9a\u7684\u7684\u9891\u7387\u54cd\u5e94\u7279\u6027 [H,W] = freqz(bz,az); %\u5f97\u5230bz\u5230az\u5b8c\u6574\u7684\u9891\u7387\u54cd\u5e94\u7279\u6027 dbHx = -20*log10(abs(Hx)/max(abs(H))) %\u6c42wp,ws\u5bf9\u5e94\u7684\u8870\u51cf plot(W,abs(H)); title('\u56fe1.1\uff1a\u5207\u6bd4\u96ea\u592b\u6570\u5b57\u4f4e\u901a\u6ee4\u6ce2\u5668'); xlabel('\u76f8\u5bf9\u9891\u7387');ylabel('\u5e45\u9891'); grid on; \u8f93\u51fa\uff1a dbHx = 1.0005 21.5790 \u7ed3\u679c\u5982\u56fe1.1 \u7528\u53cc\u7ebf\u6027\u53d8\u6362\u6cd5\u8bbe\u8ba1\u4e00\u4e2a\u5207\u6bd4\u96ea\u592b\u2160\u578b\u6570\u5b57\u9ad8\u901a\u6ee4\u6ce2\u5668\u3002\u6280\u672f\u6307\u6807\u4e3a:\u91c7\u6837\u9891\u7387 f_c = 2kHz f_c = 2kHz \uff0c\u901a\u5e26\u622a\u6b62\u9891\u7387 f_p = 700Hz f_p = 700Hz \uff0c\u901a\u5e26\u6700\u5927\u8870\u51cf a_p \\le 1dB a_p \\le 1dB \uff1b\u963b\u5e26\u8fb9\u7f18\u9891\u7387 f_s = 500Hz f_s = 500Hz \uff0c\u6700\u5e26\u6700\u5c0f\u8870\u51cf a_s \\ge 32dB a_s \\ge 32dB \u3002 fp=700;fs=500;ap=1;as=32; wp=2*pi*fp; ws=2*pi*fs; Fc=2000; wp1=wp/Fc;ws1=ws/Fc; omp1=2*Fc*tan(wp1/2); omps=2*Fc*tan(ws1/2); [N,WC]=cheb1ord(omp1,omps,ap,as,'s'); [b,a]=cheby1(N,ap,WC,'high','s'); [bz,az]=bilinear(b,a,Fc); w0=[wp1,ws1]; Hx=freqz(bz,az,w0); [H,W]=freqz(bz,az); dbHx=-20*log10(abs(Hx)/max(abs(H))) plot(W,abs(H)); title('\u56fe1.2\uff1a\u5207\u6bd4\u96ea\u592b1\u578b\u9ad8\u901a\u6ee4\u6ce2\u5668') xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('\u5e45\u9891'); grid on; \u8f93\u51fa\uff1a dbHx = 1.0000 33.1098 \u7ed3\u679c\u5982\u56fe1.2 \u7a97\u51fd\u6570\u6cd5\u8bbe\u8ba1FIR\u6570\u5b57\u6ee4\u6ce2\u5668 \u6839\u636e\u4e0b\u5217\u6307\u6807\u91c7\u7528\u7a97\u51fd\u6570\u6cd5\u8bbe\u8ba1\u4f4e\u901a\u6570\u5b57\u6ee4\u6ce2\u5668\uff0c\u901a\u5e26\u622a\u6b62\u9891\u7387 \\omega_p = 0.2\\pi \\omega_p = 0.2\\pi \uff0c\u963b\u5e26\u622a\u81f3\u9891\u7387 \\omega_s = 0.3\\pi \\omega_s = 0.3\\pi \uff0c\u901a\u5e26\u6700\u5927\u8870\u51cf 0.25dB 0.25dB \uff0c\u963b\u5e26\u6700\u5c0f\u8870\u51cf 50dB 50dB \u3002 (1)\u5206\u522b\u5229\u7528\u6c49\u660e\u7a97\u3001\u5e03\u83b1\u514b\u66fc\u7a97\u548c\u51ef\u6cfd\u7a97\u8bbe\u8ba1\u8be5\u6ee4\u6ce2\u5668\uff0c\u4e14\u6ee4\u6ce2\u5668\u5177\u6709\u7ebf\u6027\u76f8\u4f4d\u3002\u6c47\u51fa\u8109\u51b2\u76f8\u5e94h(n)\u53ca\u6ee4\u6ce2\u5668\u7684\u9891\u7387\u54cd\u5e94\u3002 N = \\frac{4\\pi}{\\omega_s - \\omega_p} = 40 N = \\frac{4\\pi}{\\omega_s - \\omega_p} = 40 N=40; wc=0.3; figure(1) subplot(211); h=fir1(N-1,wc,'low',hamming(N)); stem(h); title('\u56fe2.1.1\uff1a\u6c49\u660e\u7a97\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684\u8109\u51b2\u54cd\u5e94'),grid; xlabel('n'),ylabel('\u5e45\u5ea6h(n)'); subplot(212); [H,W]=freqz(h,1); plot(W/pi,abs(H)); title('\u56fe2.1.2\uff1a\u6c49\u660e\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); figure(2) subplot(211); h=fir1(N-1,wc,'low',blackman(N)); stem(h); title('\u56fe2.1.3\uff1a\u5e03\u83b1\u514b\u66fc\u7a97\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684\u8109\u51b2\u54cd\u5e94'),grid; xlabel('n'),ylabel('\u5e45\u5ea6h(n)'); subplot(212); [H,W]=freqz(h,1); plot(W/pi,abs(H)); title('\u56fe2.1.4\uff1a\u5e03\u83b1\u514b\u66fc\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); figure(3) subplot(211); h=fir1(N-1,wc,'low',kaiser(N)); stem(h); title('\u56fe2.1.5\uff1a\u51ef\u6cfd\u7a97\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684\u8109\u51b2\u54cd\u5e94'),grid; xlabel('n'),ylabel('\u5e45\u5ea6h(n)'); subplot(212); [H,W]=freqz(h,1); plot(W/pi,abs(H)); title('\u56fe2.1.6\uff1a\u51ef\u6cfd\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); \u7ed3\u679c\u5982\u56fe2.1.1-2.1.6 (2)\u589e\u52a0N\uff0c\u89c2\u5bdf\u8fc7\u6e21\u5e26\u548c\u6700\u5927\u80a9\u5cf0\u503c\u7684\u53d8\u5316\u3002 N=51; wc=0.3; figure(1) h=fir1(N-1,wc,'low',hamming(N)); [H,W]=freqz(h,1); subplot(211); plot(W/pi,abs(H)); title('\u56fe2.2.1\uff1aN=51\u65f6\u6c49\u660e\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); N=101; h=fir1(N-1,wc,'low',hamming(N)); [H,W]=freqz(h,1); subplot(212); plot(W/pi,abs(H)); title('\u56fe2.2.2\uff1aN=101\u6c49\u660e\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); N=51; figure(2) h=fir1(N-1,wc,'low',blackman(N)); [H,W]=freqz(h,1); subplot(211); plot(W/pi,abs(H)); title('\u56fe2.2.3\uff1aN=51\u5e03\u83b1\u514b\u66fc\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); N=101; h=fir1(N-1,wc,'low',blackman(N)); [H,W]=freqz(h,1); subplot(212); plot(W/pi,abs(H)); title('\u56fe2.2.4\uff1aN=101\u5e03\u83b1\u514b\u66fc\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); N=51; figure(3) h=fir1(N-1,wc,'low',kaiser(N)); [H,W]=freqz(h,1); subplot(211); plot(W/pi,abs(H)); title('\u56fe2.2.5\uff1aN=51\u51ef\u6cfd\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); N=101; h=fir1(N-1,wc,'low',kaiser(N)); [H,W]=freqz(h,1); subplot(212); plot(W/pi,abs(H)); title('\u56fe2.2.6\uff1aN=101\u51ef\u6cfd\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); \u7ed3\u679c\u5982\u56fe2.2.1-2.1.6 \u5229\u7528\u6c49\u660e\u7a97\u8bbe\u8ba1\u6570\u5b57\u5fae\u5206\u5668\uff0c H_d(\\omega) = \\begin{cases} j\\omega ,& 0 < \\omega \\le \\pi \\\\ -j\\omega ,& -\\pi < \\omega < 0 \\end{cases} H_d(\\omega) = \\begin{cases} j\\omega ,& 0 < \\omega \\le \\pi \\\\ -j\\omega ,& -\\pi < \\omega < 0 \\end{cases} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">H_d(\\omega) = \\begin{cases} j\\omega ,&amp; 0 &lt; \\omega \\le \\pi \\\\ -j\\omega ,&amp; -\\pi &lt; \\omega &lt; 0 \\end{cases}</span><script type=\"math/tex\">H_d(\\omega) = \\begin{cases} j\\omega ,& 0 < \\omega \\le \\pi \\\\ -j\\omega ,& -\\pi < \\omega < 0 \\end{cases} \u8981\u6c42N=21\uff0c\u4e14\u6ee4\u6ce2\u5668\u5177\u6709\u7ebf\u6027\u76f8\u4f4d\u3002 clear; dt = 1; N = 21; x_t = 0:dt:N-dt; h1 = (-1+exp(1j.*pi.*x_t).*(1-1j.*pi.*x_t))./(x_t.^2)+(-1+exp(-1j.*pi.*x_t).*(1+1j.*pi.*x_t))./(x_t.^2); h1(1)=10; w=hamming(N/dt); h=h1.*w'; figure(1) subplot(311); stem(x_t,h); title('\u56fe2.3.1\u6c49\u5b81\u7a97\u5355\u4f4d\u8109\u51b2\u54cd\u5e94'); [H, W]=dtft(h,512);%DTFT subplot(312); plot(W/pi,abs(H)); title('\u56fe2.3.2\uff1a\u5e45\u9891\u7279\u6027'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(313); plot(W/pi,angle(H)); title('\u56fe2.3.3\uff1a\u5e45\u9891\u7279\u6027'); xlabel('w'),ylabel('\u5f27\u5ea6'); 6. \u5b9e\u9a8c\u7ed3\u679c\u603b\u7ed3 7. \u7ed3\u679c\u5206\u6790 IIR\u6570\u5b57\u6ee4\u6ce2\u5668\u7684\u8bbe\u8ba1 dbHx \u4e2d1.0005\u4e0e21.5790\u4e3a w_p w_p \uff0c w_s w_s \u5904\u7684\u8870\u51cf\u3002 a_p = 1.0005 a_p = 1.0005 \u8fd1\u4f3c\u7b49\u4e8e1\uff0c a_s = 21.5790 > 15 a_s = 21.5790 > 15 \u6545\u6ee1\u8db3\u8981\u6c42\u3002 \u53cc\u7ebf\u6027\u53d8\u6362\u6cd5\u8bbe\u8ba1\u4e00\u4e2a\u5207\u6bd4\u96ea\u592b\u2160\u578b\u6570\u5b57\u9ad8\u901a\u6ee4\u6ce2\u5668\uff0c dbHx \u4e2d1.0000\u4e0e33.1098\u4e3a w_p w_p \uff0c w_s w_s \u5904\u7684\u8870\u51cf\u3002 a_p = 1.0000 a_p = 1.0000 \u7b49\u4e8e1\uff0c as = 33.1098 > 32 as = 33.1098 > 32 \u6545\u6ee1\u8db3\u8981\u6c42\u3002 \u7a97\u51fd\u6570\u6cd5\u8bbe\u8ba1FIR\u6570\u5b57\u6ee4\u6ce2\u5668 \u5f53\u589e\u5927 N N \u503c\u65f6\uff0c\u632f\u5e45\u7279\u6027\u66f2\u7ebf\u8fc7\u6e21\u5e26\u7684\u8870\u51cf\u5c06\u4f1a\u53d8\u5927\uff0c\u800c\u6700\u5927\u80a9\u5cf0\u503c\u57fa\u672c\u4fdd\u6301\u4e0d\u53d8\u3002 \u7531 \\frac{1}{2\\pi}(\\int_{-\\pi}^{0} -j\\omega e^{j\\omega n} \\mathrm{d} \\omega + \\int_{0}^{\\pi} j\\omega e^{j\\omega n} \\mathrm{d} \\omega) = \\frac{-1 + e^{j\\pi n}(1 - j\\pi n)}{n^2} + \\frac{-1 + e^{-j\\pi n}(1 + j\\pi n)}{n^2} \\frac{1}{2\\pi}(\\int_{-\\pi}^{0} -j\\omega e^{j\\omega n} \\mathrm{d} \\omega + \\int_{0}^{\\pi} j\\omega e^{j\\omega n} \\mathrm{d} \\omega) = \\frac{-1 + e^{j\\pi n}(1 - j\\pi n)}{n^2} + \\frac{-1 + e^{-j\\pi n}(1 + j\\pi n)}{n^2} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">\\frac{1}{2\\pi}(\\int_{-\\pi}^{0} -j\\omega e^{j\\omega n} \\mathrm{d} \\omega + \\int_{0}^{\\pi} j\\omega e^{j\\omega n} \\mathrm{d} \\omega) = \\frac{-1 + e^{j\\pi n}(1 - j\\pi n)}{n^2} + \\frac{-1 + e^{-j\\pi n}(1 + j\\pi n)}{n^2}</span><script type=\"math/tex\">\\frac{1}{2\\pi}(\\int_{-\\pi}^{0} -j\\omega e^{j\\omega n} \\mathrm{d} \\omega + \\int_{0}^{\\pi} j\\omega e^{j\\omega n} \\mathrm{d} \\omega) = \\frac{-1 + e^{j\\pi n}(1 - j\\pi n)}{n^2} + \\frac{-1 + e^{-j\\pi n}(1 + j\\pi n)}{n^2} \u5f97\u5230 h(n) h(n) \uff0c\u518dDTFT\uff0c\u6700\u540e\u5f97\u5230\u56fe\u5f62\uff0c\u4f46\u5fae\u5206\u5668\u5e94\u8be5\u4e0d\u5177\u6709\u7ebf\u6027\u76f8\u4f4d\uff0c\u6240\u4ee5\u8fd9\u9053\u9898\u6ca1\u770b\u61c2\uff0c\u4ee5\u540e\u518d\u8bf4\u3002 8.\u5fc3\u5f97\u4f53\u4f1a \u5b66\u4f1a\u4e86\u7528matlab\u51fd\u6570\u8bbe\u8ba1\u6570\u5b57\u6ee4\u6ce2\u5668\u3002 \u5bf9IIR\u548cFIR\u6ee4\u6ce2\u5668\u539f\u7406\u6709\u66f4\u597d\u7684\u7406\u89e3\u3002","title":"\u79bb\u6563\u65f6\u95f4\u6ee4\u6ce2\u5668\u8bbe\u8ba1"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#_1","text":"","title":"\u79bb\u6563\u65f6\u95f4\u6ee4\u6ce2\u5668\u8bbe\u8ba1"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#1","text":"\u79bb\u6563\u65f6\u95f4\u6ee4\u6ce2\u5668\u8bbe\u8ba1","title":"1. \u5b9e\u9a8c\u9879\u76ee\u540d\u79f0"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#2","text":"\u8bbe\u8ba1\u548c\u5206\u6790\u4e00\u7ec4\u6ee4\u6ce2\u5668\uff0c\u83b7\u5f97\u5bf9\u8bbe\u8ba1\u8fc7\u7a0b\u7684\u6df1\u5165\u8ba4\u8bc6\uff0c\u5e76\u4e14\u638c\u63e1\u51e0\u79cd\u6807\u51c6\u8bbe\u8ba1\u65b9\u6cd5\u7684\u7279\u70b9\uff0c\u8981\u6c42\u5408\u7ec4\u8ba8\u8bba\uff0c\u5355\u72ec\u5b9e\u9a8c\uff0c2\u5b66\u65f6\u3002","title":"2.\u5b9e\u9a8c\u76ee\u7684"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#3","text":"","title":"3. \u5b9e\u9a8c\u5185\u5bb9\u4e0e\u6b65\u9aa4"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#iir","text":"\u8109\u51b2\u54cd\u5e94\u4e0d\u53d8\u6cd5\u53d8\u6362\u539f\u7406\uff1a \u8109\u51b2\u76f8\u5e94\u4e0d\u53d8\u6cd5\u5c06\u6a21\u62df\u6ee4\u6ce2\u5668\u7684 s s \u5e73\u9762\u53d8\u6362\u6210\u6570\u5b57\u6ee4\u6ce2\u5668\u7684 z z \u5e73\u9762\uff0c\u4ece\u800c\u5c06\u6a21\u62df\u6ee4\u6ce2\u5668\u6620\u5c04\u6210\u6570\u5b57\u6ee4\u6ce2\u5668 IIR\u6570\u5b57\u6ee4\u6ce2\u5668\u8bbe\u8ba1\u7684\u91cd\u8981\u73af\u8282\u662f\u6a21\u62df\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684\u8bbe\u8ba1\uff0c\u5178\u578b\u7684\u6a21\u62df\u4f4e\u901a\u6ee4\u6ce2\u5668\u7531\u5df4\u7279\u6c83\u601d\u548c\u5207\u6bd4\u96ea\u592b(\u2160\u578b\u548c\u2161\u578b)\u7b49\u6ee4\u6ce2\u5668\u3002\u7531\u6a21\u62df\u4f4e\u901a\u6ee4\u6ce2\u5668\u7ecf\u8fc7\u76f8\u5e94\u7684\u590d\u9891\u7387\u8f6c\u6362\u4e3a H(s) H(s) \uff0c\u7531 H(s) H(s) \u7ecf\u8fc7\u8109\u51b2\u76f8\u5e94\u4e0d\u53d8\u6cd5\u5c31\u5f97\u5230\u4e86\u6240\u9700\u8981\u7684IIR\u6570\u5b57\u6ee4\u6ce2\u5668 H(z) H(z) \u3002 \u53cc\u7ebf\u6027\u53d8\u6362\u6cd5\u539f\u7406 \u4e3a\u514b\u670d\u8109\u51b2\u54cd\u5e94\u4e0d\u53d8\u6cd5\u4ea7\u751f\u9891\u7387\u76f8\u5e94\u7684\u6df7\u53e0\u5931\u771f\uff0c\u53ef\u4ee5\u91c7\u7528\u975e\u7ebf\u6027\u9891\u7387\u538b\u7f29\u65b9\u6cd5\uff0c\u4f7fs\u5e73\u9762\u4e0ez\u5e73\u9762\u5efa\u7acb\u4e86\u4e00\u4e00\u5bf9\u5e94\u7684\u5355\u503c\u5173\u7cfb\uff0c\u6d88\u9664\u4e86\u591a\u503c\u53d8\u6362\u6027\uff0c\u4e5f\u5c31\u6d88\u9664\u4e86\u9891\u8c31\u6df7\u53e0\u73b0\u8c61\uff0c\u8fd9\u5c31\u662f\u53cc\u7ebf\u6027\u53d8\u6362\u6cd5\u3002 \u5b9e\u9a8c\u5185\u5bb9\uff1a \u8981\u6c42\u901a\u5e26\u622a\u6b62\u9891\u7387 f_p = 3kHz f_p = 3kHz \uff0c\u901a\u5e26\u6700\u5927\u8870\u51cf a_p = 1dB a_p = 1dB \uff0c\u963b\u5e26\u622a\u6b62\u9891\u7387 f_s = 4.5kHz f_s = 4.5kHz \uff0c\u963b\u5e26\u6700\u5c0f\u8870\u51cf a_s = 15dB a_s = 15dB \uff0c\u91c7\u6837\u9891\u7387 f_c = 30kHz f_c = 30kHz \uff0c\u7528\u8109\u51b2\u54cd\u5e94\u4e0d\u53d8\u6cd5\u8bbe\u8ba1\u4e00\u4e2a\u5207\u6bd4\u96ea\u592b\u6570\u5b57\u4f4e\u901a\u6ee4\u6ce2\u5668\uff0c\u5e76\u56fe\u793a\u6ee4\u6ce2\u5668\u7684\u632f\u5e45\u7279\u6027\uff0c\u68c0\u9a8c \\omega_p \\omega_p \uff0c \\omega_s \\omega_s \u5bf9\u5e94\u7684\u8870\u51cf\u3002 \u7528\u53cc\u7ebf\u6027\u53d8\u6362\u6cd5\u8bbe\u8ba1\u4e00\u4e2a\u5207\u6bd4\u96ea\u592b\u2160\u578b\u6570\u5b57\u9ad8\u901a\u6ee4\u6ce2\u5668\u3002\u6280\u672f\u6307\u6807\u4e3a:\u91c7\u6837\u9891\u7387 f_c = 2kHz f_c = 2kHz \uff0c\u901a\u5e26\u622a\u6b62\u9891\u7387 f_p = 700Hz f_p = 700Hz \uff0c\u901a\u5e26\u6700\u5927\u8870\u51cf a_p \\le 1dB a_p \\le 1dB \uff1b\u963b\u5e26\u8fb9\u7f18\u9891\u7387 f_s = 500Hz f_s = 500Hz \uff0c\u6700\u5e26\u6700\u5c0f\u8870\u51cf a_s \\ge 32dB a_s \\ge 32dB \u3002","title":"IIR\u6570\u5b57\u6ee4\u6ce2\u5668\u7684\u8bbe\u8ba1"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#fir","text":"\u8bbe\u8ba1\u539f\u7406 FIR\u6ee4\u6ce2\u5668\u7684\u8bbe\u8ba1\u95ee\u9898\uff0c\u5c31\u662f\u8981\u662f\u6240\u8bbe\u8ba1\u7684FIR\u6ee4\u6ce2\u5668\u7684\u9891\u7387\u54cd\u5e94 H(e^{j\\omega}) H(e^{j\\omega}) \u903c\u8fd1\u6240\u8981\u6c42\u7684\u7406\u60f3\u6ee4\u6ce2\u5668\u7684\u9891\u7387\u54cd\u5e94 H_d(e^{j\\omega}) H_d(e^{j\\omega}) \u3002\u903c\u8fd1\u53ef\u5728\u65f6\u57df\u8fdb\u884c\uff0c\u4e5f\u53ef\u5728\u9891\u57df\u8fdb\u884c\u3002\u7a97\u51fd\u6570\u6cd5\u8bbe\u8ba1FIR\u6570\u5b57\u6ee4\u6ce2\u5668\u5b9e\u5728\u65f6\u57df\u8fdb\u884c\u7684\uff0c\u7528\u7a97\u51fd\u6570\u622a\u53d6\u65e0\u9650\u957f\u7684 h_d(n) h_d(n) \uff0c\u8fd9\u6837\u5f97\u5230\u7684\u9891\u7387\u54cd\u5e94 H(e^{j\\omega}) H(e^{j\\omega}) \u903c\u8fd1\u4e8e\u7406\u60f3\u7684\u9891\u7387\u54cd\u5e94 H_d(e^{j\\omega}) H_d(e^{j\\omega}) \u3002 \u5b9e\u9a8c\u5185\u5bb9\uff1a \u6839\u636e\u4e0b\u5217\u6307\u6807\u91c7\u7528\u7a97\u51fd\u6570\u6cd5\u8bbe\u8ba1\u4f4e\u901a\u6570\u5b57\u6ee4\u6ce2\u5668\uff0c\u901a\u5e26\u622a\u6b62\u9891\u7387 \\omega_p = 0.2\\pi \\omega_p = 0.2\\pi \uff0c\u963b\u5e26\u622a\u81f3\u9891\u7387 \\omega_s = 0.3\\pi \\omega_s = 0.3\\pi \uff0c\u901a\u5e26\u6700\u5927\u8870\u51cf 0.25dB 0.25dB \uff0c\u963b\u5e26\u6700\u5c0f\u8870\u51cf 50dB 50dB \u3002 (1)\u5206\u522b\u5229\u7528\u6c49\u660e\u7a97\u3001\u5e03\u83b1\u514b\u66fc\u7a97\u548c\u51ef\u6cfd\u7a97\u8bbe\u8ba1\u8be5\u6ee4\u6ce2\u5668\uff0c\u4e14\u6ee4\u6ce2\u5668\u5177\u6709\u7ebf\u6027\u76f8\u4f4d\u3002\u6c47\u51fa\u8109\u51b2\u76f8\u5e94h(n)\u53ca\u6ee4\u6ce2\u5668\u7684\u9891\u7387\u54cd\u5e94\u3002 (2)\u589e\u52a0N\uff0c\u89c2\u5bdf\u8fc7\u6e21\u5e26\u548c\u6700\u5927\u80a9\u5cf0\u503c\u7684\u53d8\u5316\u3002 \u5229\u7528\u6c49\u660e\u7a97\u8bbe\u8ba1\u6570\u5b57\u5fae\u5206\u5668\uff0c H_d(\\omega) = \\begin{cases} j\\omega ,& 0 < \\omega \\le \\pi \\\\ -j\\omega ,& -\\pi < \\omega < 0 \\end{cases} H_d(\\omega) = \\begin{cases} j\\omega ,& 0 < \\omega \\le \\pi \\\\ -j\\omega ,& -\\pi < \\omega < 0 \\end{cases} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">H_d(\\omega) = \\begin{cases} j\\omega ,&amp; 0 &lt; \\omega \\le \\pi \\\\ -j\\omega ,&amp; -\\pi &lt; \\omega &lt; 0 \\end{cases}</span><script type=\"math/tex\">H_d(\\omega) = \\begin{cases} j\\omega ,& 0 < \\omega \\le \\pi \\\\ -j\\omega ,& -\\pi < \\omega < 0 \\end{cases} \u8981\u6c42N=21\uff0c\u4e14\u6ee4\u6ce2\u5668\u5177\u6709\u7ebf\u6027\u76f8\u4f4d\u3002","title":"\u7a97\u51fd\u6570\u6cd5\u8bbe\u8ba1FIR\u6570\u5b57\u6ee4\u6ce2\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#4","text":"MATLAB R2019b","title":"4. \u5b9e\u9a8c\u73af\u5883"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#5","text":"","title":"5. \u5b9e\u9a8c\u8fc7\u7a0b\u4e0e\u5206\u6790\u7a0b\u5e8f\u6587\u672c"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#iir_1","text":"\u8981\u6c42\u901a\u5e26\u622a\u6b62\u9891\u7387 f_p = 3kHz f_p = 3kHz \uff0c\u901a\u5e26\u6700\u5927\u8870\u51cf a_p = 1dB a_p = 1dB \uff0c\u963b\u5e26\u622a\u6b62\u9891\u7387 f_s = 4.5kHz f_s = 4.5kHz \uff0c\u963b\u5e26\u6700\u5c0f\u8870\u51cf a_s = 15dB a_s = 15dB \uff0c\u91c7\u6837\u9891\u7387 f_c = 30kHz f_c = 30kHz \uff0c\u7528\u8109\u51b2\u54cd\u5e94\u4e0d\u53d8\u6cd5\u8bbe\u8ba1\u4e00\u4e2a\u5207\u6bd4\u96ea\u592b\u6570\u5b57\u4f4e\u901a\u6ee4\u6ce2\u5668\uff0c\u5e76\u56fe\u793a\u6ee4\u6ce2\u5668\u7684\u632f\u5e45\u7279\u6027\uff0c\u68c0\u9a8c \\omega_p \\omega_p \uff0c \\omega_s \\omega_s \u5bf9\u5e94\u7684\u8870\u51cf\u3002 clear; wp = 2*pi*3*10^3; ws = 2*pi*4.5*10^3; ap = 1; as = 15; Fs = 30*10^3; %\u91c7\u6837\u9891\u7387 wp1 = wp/Fs; ws1 = ws/Fs; %\u6570\u5b57\u9891\u7387 [N,WC] = cheb1ord(wp,ws,ap,as,'s'); %\u786e\u5207\u6bd4\u96ea\u592b\u4f4e\u901a\u9636\u6570\u622a\u6b62\u9891\u7387 [b,a] = cheby1(N,ap,WC,'low','s'); %\u8c03\u7528\u51fd\u6570\u8bbe\u8ba1\u591a\u9879\u5f0f\u7cfb\u6570 [bz,az] = impinvar(b,a,Fs); %\u8109\u51b2\u54cd\u5e94\u4e0d\u53d8\u6cd5\u5b9e\u73b0\u6570\u5b57\u4f4e\u901a w0 = [wp1,ws1]; Hx = freqz(bz,az,w0); %\u8fd4\u56de\u7279\u5b9a\u7684\u7684\u9891\u7387\u54cd\u5e94\u7279\u6027 [H,W] = freqz(bz,az); %\u5f97\u5230bz\u5230az\u5b8c\u6574\u7684\u9891\u7387\u54cd\u5e94\u7279\u6027 dbHx = -20*log10(abs(Hx)/max(abs(H))) %\u6c42wp,ws\u5bf9\u5e94\u7684\u8870\u51cf plot(W,abs(H)); title('\u56fe1.1\uff1a\u5207\u6bd4\u96ea\u592b\u6570\u5b57\u4f4e\u901a\u6ee4\u6ce2\u5668'); xlabel('\u76f8\u5bf9\u9891\u7387');ylabel('\u5e45\u9891'); grid on; \u8f93\u51fa\uff1a dbHx = 1.0005 21.5790 \u7ed3\u679c\u5982\u56fe1.1 \u7528\u53cc\u7ebf\u6027\u53d8\u6362\u6cd5\u8bbe\u8ba1\u4e00\u4e2a\u5207\u6bd4\u96ea\u592b\u2160\u578b\u6570\u5b57\u9ad8\u901a\u6ee4\u6ce2\u5668\u3002\u6280\u672f\u6307\u6807\u4e3a:\u91c7\u6837\u9891\u7387 f_c = 2kHz f_c = 2kHz \uff0c\u901a\u5e26\u622a\u6b62\u9891\u7387 f_p = 700Hz f_p = 700Hz \uff0c\u901a\u5e26\u6700\u5927\u8870\u51cf a_p \\le 1dB a_p \\le 1dB \uff1b\u963b\u5e26\u8fb9\u7f18\u9891\u7387 f_s = 500Hz f_s = 500Hz \uff0c\u6700\u5e26\u6700\u5c0f\u8870\u51cf a_s \\ge 32dB a_s \\ge 32dB \u3002 fp=700;fs=500;ap=1;as=32; wp=2*pi*fp; ws=2*pi*fs; Fc=2000; wp1=wp/Fc;ws1=ws/Fc; omp1=2*Fc*tan(wp1/2); omps=2*Fc*tan(ws1/2); [N,WC]=cheb1ord(omp1,omps,ap,as,'s'); [b,a]=cheby1(N,ap,WC,'high','s'); [bz,az]=bilinear(b,a,Fc); w0=[wp1,ws1]; Hx=freqz(bz,az,w0); [H,W]=freqz(bz,az); dbHx=-20*log10(abs(Hx)/max(abs(H))) plot(W,abs(H)); title('\u56fe1.2\uff1a\u5207\u6bd4\u96ea\u592b1\u578b\u9ad8\u901a\u6ee4\u6ce2\u5668') xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('\u5e45\u9891'); grid on; \u8f93\u51fa\uff1a dbHx = 1.0000 33.1098 \u7ed3\u679c\u5982\u56fe1.2","title":"IIR\u6570\u5b57\u6ee4\u6ce2\u5668\u7684\u8bbe\u8ba1"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#fir_1","text":"\u6839\u636e\u4e0b\u5217\u6307\u6807\u91c7\u7528\u7a97\u51fd\u6570\u6cd5\u8bbe\u8ba1\u4f4e\u901a\u6570\u5b57\u6ee4\u6ce2\u5668\uff0c\u901a\u5e26\u622a\u6b62\u9891\u7387 \\omega_p = 0.2\\pi \\omega_p = 0.2\\pi \uff0c\u963b\u5e26\u622a\u81f3\u9891\u7387 \\omega_s = 0.3\\pi \\omega_s = 0.3\\pi \uff0c\u901a\u5e26\u6700\u5927\u8870\u51cf 0.25dB 0.25dB \uff0c\u963b\u5e26\u6700\u5c0f\u8870\u51cf 50dB 50dB \u3002 (1)\u5206\u522b\u5229\u7528\u6c49\u660e\u7a97\u3001\u5e03\u83b1\u514b\u66fc\u7a97\u548c\u51ef\u6cfd\u7a97\u8bbe\u8ba1\u8be5\u6ee4\u6ce2\u5668\uff0c\u4e14\u6ee4\u6ce2\u5668\u5177\u6709\u7ebf\u6027\u76f8\u4f4d\u3002\u6c47\u51fa\u8109\u51b2\u76f8\u5e94h(n)\u53ca\u6ee4\u6ce2\u5668\u7684\u9891\u7387\u54cd\u5e94\u3002 N = \\frac{4\\pi}{\\omega_s - \\omega_p} = 40 N = \\frac{4\\pi}{\\omega_s - \\omega_p} = 40 N=40; wc=0.3; figure(1) subplot(211); h=fir1(N-1,wc,'low',hamming(N)); stem(h); title('\u56fe2.1.1\uff1a\u6c49\u660e\u7a97\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684\u8109\u51b2\u54cd\u5e94'),grid; xlabel('n'),ylabel('\u5e45\u5ea6h(n)'); subplot(212); [H,W]=freqz(h,1); plot(W/pi,abs(H)); title('\u56fe2.1.2\uff1a\u6c49\u660e\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); figure(2) subplot(211); h=fir1(N-1,wc,'low',blackman(N)); stem(h); title('\u56fe2.1.3\uff1a\u5e03\u83b1\u514b\u66fc\u7a97\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684\u8109\u51b2\u54cd\u5e94'),grid; xlabel('n'),ylabel('\u5e45\u5ea6h(n)'); subplot(212); [H,W]=freqz(h,1); plot(W/pi,abs(H)); title('\u56fe2.1.4\uff1a\u5e03\u83b1\u514b\u66fc\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); figure(3) subplot(211); h=fir1(N-1,wc,'low',kaiser(N)); stem(h); title('\u56fe2.1.5\uff1a\u51ef\u6cfd\u7a97\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684\u8109\u51b2\u54cd\u5e94'),grid; xlabel('n'),ylabel('\u5e45\u5ea6h(n)'); subplot(212); [H,W]=freqz(h,1); plot(W/pi,abs(H)); title('\u56fe2.1.6\uff1a\u51ef\u6cfd\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); \u7ed3\u679c\u5982\u56fe2.1.1-2.1.6 (2)\u589e\u52a0N\uff0c\u89c2\u5bdf\u8fc7\u6e21\u5e26\u548c\u6700\u5927\u80a9\u5cf0\u503c\u7684\u53d8\u5316\u3002 N=51; wc=0.3; figure(1) h=fir1(N-1,wc,'low',hamming(N)); [H,W]=freqz(h,1); subplot(211); plot(W/pi,abs(H)); title('\u56fe2.2.1\uff1aN=51\u65f6\u6c49\u660e\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); N=101; h=fir1(N-1,wc,'low',hamming(N)); [H,W]=freqz(h,1); subplot(212); plot(W/pi,abs(H)); title('\u56fe2.2.2\uff1aN=101\u6c49\u660e\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); N=51; figure(2) h=fir1(N-1,wc,'low',blackman(N)); [H,W]=freqz(h,1); subplot(211); plot(W/pi,abs(H)); title('\u56fe2.2.3\uff1aN=51\u5e03\u83b1\u514b\u66fc\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); N=101; h=fir1(N-1,wc,'low',blackman(N)); [H,W]=freqz(h,1); subplot(212); plot(W/pi,abs(H)); title('\u56fe2.2.4\uff1aN=101\u5e03\u83b1\u514b\u66fc\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); N=51; figure(3) h=fir1(N-1,wc,'low',kaiser(N)); [H,W]=freqz(h,1); subplot(211); plot(W/pi,abs(H)); title('\u56fe2.2.5\uff1aN=51\u51ef\u6cfd\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); N=101; h=fir1(N-1,wc,'low',kaiser(N)); [H,W]=freqz(h,1); subplot(212); plot(W/pi,abs(H)); title('\u56fe2.2.6\uff1aN=101\u51ef\u6cfd\u7a97\u4f4e\u901a\u632f\u5e45\u7279\u6027'),grid; xlabel('\u76f8\u5bf9\u9891\u7387'),ylabel('H(w)'); \u7ed3\u679c\u5982\u56fe2.2.1-2.1.6 \u5229\u7528\u6c49\u660e\u7a97\u8bbe\u8ba1\u6570\u5b57\u5fae\u5206\u5668\uff0c H_d(\\omega) = \\begin{cases} j\\omega ,& 0 < \\omega \\le \\pi \\\\ -j\\omega ,& -\\pi < \\omega < 0 \\end{cases} H_d(\\omega) = \\begin{cases} j\\omega ,& 0 < \\omega \\le \\pi \\\\ -j\\omega ,& -\\pi < \\omega < 0 \\end{cases} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">H_d(\\omega) = \\begin{cases} j\\omega ,&amp; 0 &lt; \\omega \\le \\pi \\\\ -j\\omega ,&amp; -\\pi &lt; \\omega &lt; 0 \\end{cases}</span><script type=\"math/tex\">H_d(\\omega) = \\begin{cases} j\\omega ,& 0 < \\omega \\le \\pi \\\\ -j\\omega ,& -\\pi < \\omega < 0 \\end{cases} \u8981\u6c42N=21\uff0c\u4e14\u6ee4\u6ce2\u5668\u5177\u6709\u7ebf\u6027\u76f8\u4f4d\u3002 clear; dt = 1; N = 21; x_t = 0:dt:N-dt; h1 = (-1+exp(1j.*pi.*x_t).*(1-1j.*pi.*x_t))./(x_t.^2)+(-1+exp(-1j.*pi.*x_t).*(1+1j.*pi.*x_t))./(x_t.^2); h1(1)=10; w=hamming(N/dt); h=h1.*w'; figure(1) subplot(311); stem(x_t,h); title('\u56fe2.3.1\u6c49\u5b81\u7a97\u5355\u4f4d\u8109\u51b2\u54cd\u5e94'); [H, W]=dtft(h,512);%DTFT subplot(312); plot(W/pi,abs(H)); title('\u56fe2.3.2\uff1a\u5e45\u9891\u7279\u6027'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(313); plot(W/pi,angle(H)); title('\u56fe2.3.3\uff1a\u5e45\u9891\u7279\u6027'); xlabel('w'),ylabel('\u5f27\u5ea6');","title":"\u7a97\u51fd\u6570\u6cd5\u8bbe\u8ba1FIR\u6570\u5b57\u6ee4\u6ce2\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#6","text":"","title":"6. \u5b9e\u9a8c\u7ed3\u679c\u603b\u7ed3"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#7","text":"","title":"7. \u7ed3\u679c\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#iir_2","text":"dbHx \u4e2d1.0005\u4e0e21.5790\u4e3a w_p w_p \uff0c w_s w_s \u5904\u7684\u8870\u51cf\u3002 a_p = 1.0005 a_p = 1.0005 \u8fd1\u4f3c\u7b49\u4e8e1\uff0c a_s = 21.5790 > 15 a_s = 21.5790 > 15 \u6545\u6ee1\u8db3\u8981\u6c42\u3002 \u53cc\u7ebf\u6027\u53d8\u6362\u6cd5\u8bbe\u8ba1\u4e00\u4e2a\u5207\u6bd4\u96ea\u592b\u2160\u578b\u6570\u5b57\u9ad8\u901a\u6ee4\u6ce2\u5668\uff0c dbHx \u4e2d1.0000\u4e0e33.1098\u4e3a w_p w_p \uff0c w_s w_s \u5904\u7684\u8870\u51cf\u3002 a_p = 1.0000 a_p = 1.0000 \u7b49\u4e8e1\uff0c as = 33.1098 > 32 as = 33.1098 > 32 \u6545\u6ee1\u8db3\u8981\u6c42\u3002","title":"IIR\u6570\u5b57\u6ee4\u6ce2\u5668\u7684\u8bbe\u8ba1"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#fir_2","text":"\u5f53\u589e\u5927 N N \u503c\u65f6\uff0c\u632f\u5e45\u7279\u6027\u66f2\u7ebf\u8fc7\u6e21\u5e26\u7684\u8870\u51cf\u5c06\u4f1a\u53d8\u5927\uff0c\u800c\u6700\u5927\u80a9\u5cf0\u503c\u57fa\u672c\u4fdd\u6301\u4e0d\u53d8\u3002 \u7531 \\frac{1}{2\\pi}(\\int_{-\\pi}^{0} -j\\omega e^{j\\omega n} \\mathrm{d} \\omega + \\int_{0}^{\\pi} j\\omega e^{j\\omega n} \\mathrm{d} \\omega) = \\frac{-1 + e^{j\\pi n}(1 - j\\pi n)}{n^2} + \\frac{-1 + e^{-j\\pi n}(1 + j\\pi n)}{n^2} \\frac{1}{2\\pi}(\\int_{-\\pi}^{0} -j\\omega e^{j\\omega n} \\mathrm{d} \\omega + \\int_{0}^{\\pi} j\\omega e^{j\\omega n} \\mathrm{d} \\omega) = \\frac{-1 + e^{j\\pi n}(1 - j\\pi n)}{n^2} + \\frac{-1 + e^{-j\\pi n}(1 + j\\pi n)}{n^2} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">\\frac{1}{2\\pi}(\\int_{-\\pi}^{0} -j\\omega e^{j\\omega n} \\mathrm{d} \\omega + \\int_{0}^{\\pi} j\\omega e^{j\\omega n} \\mathrm{d} \\omega) = \\frac{-1 + e^{j\\pi n}(1 - j\\pi n)}{n^2} + \\frac{-1 + e^{-j\\pi n}(1 + j\\pi n)}{n^2}</span><script type=\"math/tex\">\\frac{1}{2\\pi}(\\int_{-\\pi}^{0} -j\\omega e^{j\\omega n} \\mathrm{d} \\omega + \\int_{0}^{\\pi} j\\omega e^{j\\omega n} \\mathrm{d} \\omega) = \\frac{-1 + e^{j\\pi n}(1 - j\\pi n)}{n^2} + \\frac{-1 + e^{-j\\pi n}(1 + j\\pi n)}{n^2} \u5f97\u5230 h(n) h(n) \uff0c\u518dDTFT\uff0c\u6700\u540e\u5f97\u5230\u56fe\u5f62\uff0c\u4f46\u5fae\u5206\u5668\u5e94\u8be5\u4e0d\u5177\u6709\u7ebf\u6027\u76f8\u4f4d\uff0c\u6240\u4ee5\u8fd9\u9053\u9898\u6ca1\u770b\u61c2\uff0c\u4ee5\u540e\u518d\u8bf4\u3002","title":"\u7a97\u51fd\u6570\u6cd5\u8bbe\u8ba1FIR\u6570\u5b57\u6ee4\u6ce2\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/IIR%26FIR/#8","text":"\u5b66\u4f1a\u4e86\u7528matlab\u51fd\u6570\u8bbe\u8ba1\u6570\u5b57\u6ee4\u6ce2\u5668\u3002 \u5bf9IIR\u548cFIR\u6ee4\u6ce2\u5668\u539f\u7406\u6709\u66f4\u597d\u7684\u7406\u89e3\u3002","title":"8.\u5fc3\u5f97\u4f53\u4f1a"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/","text":"\u62bd\u6837 1. \u5b9e\u9a8c\u9879\u76ee\u540d\u79f0 \u62bd\u6837 2. \u5b9e\u9a8c\u76ee\u7684 \u7814\u7a76\u62bd\u6837\u8fc7\u7a0b\uff0c\u5206\u6790\u4ea7\u751f\u6df7\u53e0\u6548\u5e94\u7684\u539f\u56e0\uff0c\u5b9e\u73b0\u4e0d\u540c\u91cd\u5efa\u65b9\u6848\uff0c\u8981\u6c421\u4eba1\u7ec4\uff0c2\u5b66\u65f6\u3002 3. \u5b9e\u9a8c\u5185\u5bb9\u4e0e\u6b65\u9aa4 \u62bd\u6837\u5f15\u8d77\u7684\u6df7\u53e0 \u5bf9\u8fde\u7eed\u6b63\u5f26\u4fe1\u53f7\u8003\u8651\u4e0b\u9762\u8868\u793a\u5f0f\uff1a x(t)=sin(2\\pi f_0+\\phi) x(t)=sin(2\\pi f_0+\\phi) \u53ef\u4ee5\u6309\u62bd\u6837\u9891\u7387 f_s=1/T_s f_s=1/T_s \u5bf9x(t)\u62bd\u6837\u6765\u83b7\u5f97\u79bb\u6563\u65f6\u95f4\u4fe1\u53f7 x[n]=x(t)|_{t=nT_s}=x(t)|_{t=n/f_s}=sin(2\\pi\\frac{f_0}{f_S}n+\\phi) x[n]=x(t)|_{t=nT_s}=x(t)|_{t=n/f_s}=sin(2\\pi\\frac{f_0}{f_S}n+\\phi) f_0 f_0 = 500Hz, \u5206\u522b\u53d6100Hz,1KHz,10KHz,\u7ed8\u51fax[n]\u53ca\u5176DTFT \u62bd\u6837\u7684\u9891\u57df\u89c6\u56fe a. x_a(t)=e^{-1000|t|} x_a(t)=e^{-1000|t|} , \u6c42\u51fa\u5e76\u7ed8\u5236\u5176\u5085\u91cc\u53f6\u53d8\u6362 b. \u4ee55000HZ\u548c1000HZ\u5206\u522b\u5bf9\u5176\u91c7\u6837\u5f97\u5230x1(n),x2(n);\u753b\u51fa\u4ed6\u4eec\u7684DTFT\u5e76\u4e0e x_a(j\\Omega) x_a(j\\Omega) \u6bd4\u8f83 \u4ece\u6837\u672c\u91cd\u5efa\u4fe1\u53f7 (1)\u62df\u5408\u4e3a\u6b63\u5f26\u6ce2 \u5047\u8bbe\u4e09\u4e2a\u62bd\u6837\u6837\u672c\u7b26\u5408\u4e0b\u5217\u5f62\u5f0f\u7684\u6b63\u5f26\u6ce2\u5f62\uff1a $$x(t)=Acos(\\omega t+\\phi)$$ \u5df2\u77e5x(0)\u3001x(1)\u548cx(2)\uff0c\u8fd9\u4e9b\u4fe1\u606f\u8db3\u4ee5\u786e\u5b9a$A,\\omega,\\phi$\u5417\uff1f\u80fd\u5efa\u7acb\u6709\u5173\u7684\u65b9\u7a0b\u5417\uff1f\u603b\u80fd\u89e3\u51fa\u8fd9\u4e9b\u65b9\u7a0b\u5417\uff1f\u5982\u679c\u4e0d\u80fd\uff0c\u7ed9\u51fa\u4e0d\u80fd\u6c42\u89e3\u5904\u7684\u5177\u4f53\u6570\u503c\u3002 (2)\u7ebf\u6027\u4e0e\u591a\u9879\u5f0f\u5185\u63d2 a\uff0e\u4f7f\u7528matlab,\u7528\u76f4\u7ebf\u6bb5\u8fde\u63a5\u6837\u672c\u3002\u5728\u95f4\u96940.01\u79d2\u7684\u7ec6\u5bc6\u7f51\u683c\u4e0a\u7ed8\u51fa\u7ed3\u679c\uff0c\u89e3\u91caplot\u6307\u4ee4\u5c06\u4f1a\u5982\u4f55\u81ea\u52a8\u7684\u7ed8\u51fa\u8fd9\u4e00\u7ed3\u679c\u3002 b\uff0e\u5c06\u4e09\u89d2\u5f62\u51b2\u6fc0\u54cd\u5e94\u4e0e\u4e09\u4e2a\u6837\u672c\u8fdb\u884c\u5377\u79ef\uff0c\u4f46\u9996\u5148\u8981\u5728\u6bcf\u4e24\u4e2a\u6837\u672c\u4e4b\u95f4\u63d2\u5165\u56db\u4e2a\u96f6\u70b9\uff0c\u5e76\u4ee4\u51b2\u6fc0\u54cd\u5e94\u4e3a0.2\uff0c0.4\uff0c0.6\uff0c0.8\uff0c1.0\uff0c0.8\uff0c0.6\uff0c0.4\uff0c0.2\u3002\u8bc1\u660e\u5982\u679c\u5047\u8bbe\u5728t=-1\u548ct=3\u7684\u6837\u672c\u4e3a\u96f6\uff0c\u4e0a\u9762\u7684\u7ed3\u679c\u4e0e\u7ebf\u6027\u63d2\u503c\u76f8\u540c\u3002 c. \u4f7f\u7528MATLAB,\u5c06\u8fd9\u4e09\u4e2a\u6570\u636e\u70b9\u62df\u5408\u4e3a\u4e8c\u9636\u591a\u9879\u5f0f(\u89c1polyfit\u4e0epolyval\u6307\u4ee4)\u3002\u4ee5\u7ec6\u5bc6\u7f51\u683c\u5bf9$-5\\le t\\le 5$\u7ed8\u51fa\u8fd9\u4e2a\u591a\u9879\u5f0f\u3002\u5728\u5b9e\u9645\u610f\u4e49\u4e0a\uff0c\u8fd9\u4e00\u66f2\u7ebf\u662f\u5426\u53ef\u5b9e\u73b0\uff1f\u5b83\u662f\u5426\u80fd\u5f88\u597d\u5730\u5728$0\\le t\\le 2$\u533a\u95f4\u4ee5\u5916\u6269\u5c55\u4fe1\u53f7\u503c\uff1f (3) \u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668 a.\u5047\u8bbe\u53ea\u6709\u6709\u9650\u6570\u91cf\u7684\u6837\u672c\u662f\u975e\u96f6\u503c\uff0c\u4e14\u53ea\u9700\u5728\u6709\u9650\u65f6\u95f4\u533a\u95f4\u4e0a\u8fdb\u884c\u4fe1\u53f7\u91cd\u5efa\uff0c\u5199\u51fasinc\u5185\u63d2\u8868\u8fbe\u5f0f\u3002 b.\u5bf9t=0\u5904\u7684\u6570\u503c\u4e3a1\u7684\u5355\u70b9\u6837\u672c\u8fdb\u884c\u63d2\u503c\uff0c\u7ed8\u51fa\u5927\u7ea6\u4ece-5\u5230+5\u7684\u7ed3\u679c\u3002\u5b83\u5e94\u8be5\u4e0esinc\u51fd\u6570\u5f62\u72b6\u4e00\u81f4\u3002 c.\u73b0\u5728\u5bf9sinc\u51fd\u6570\u5185\u63d2\u53ca\u5b9e\u9a8c\u5185\u5bb91\u4e2d\u7684\u4e09\u70b9\u60c5\u5f62\u8fdb\u884c\u63d2\u503c\uff0c\u5c06\u5176\u7ed3\u679c\u4e0e\u62df\u5408\u4e3a\u6b63\u5f26\u6ce2\u7684\u7ed3\u679c\u76f8\u6bd4\u8f83 \u8bbe\u5b9a\u5e26\u5bbd\u7684\u9009\u62e9 \u5e26\u9650\u4e8e\u67d0\u9891\u7387 f_B f_B \u7684\u4fe1\u53f7\u53ef\u4ee5\u7528 f_S=2f_B f_S=2f_B \u8fdb\u884c\u62bd\u6837\uff0c\u5e76\u53ef\u4ee5\u7531\u622a\u6b62\u9891\u7387\u4e3a f_B f_B \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u6062\u590d\uff0c\u6b64\u7ed3\u8bba\u5bf9\u4e8e\u5e26\u9650\u4e8e fb fb \u7684\u7b2c\u4e8c\u4e2a\u4fe1\u53f7\u540c\u6837\u6210\u7acb\uff0c\u5176\u4e2d f_b f_b \u5c0f\u4e8e f_B f_B ,\u8fd9\u662f\u56e0\u4e3a\u5e26\u9650\u4e8e f_b f_b \u7684\u4fe1\u53f7\u4e5f\u5e26\u9650\u4e8e f_B f_B \u3002\u540c\u6837\uff0c\u5e26\u9650\u4e8e f_b f_b \u7684\u4fe1\u53f7\u4e5f\u53ef\u4ee5\u7528 f_S f_S \u62bd\u6837\u5e76\u7531\u622a\u6b62\u9891\u7387\u4e3a f_b f_b \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u6062\u590d\uff0c\u8be5\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u51b2\u6fc0\u54cd\u5e94\uff08sinc\u51fd\u6570\uff09\u6bd4\u622a\u6b62\u9891\u7387\u4e3a f_B=f_S/2 f_B=f_S/2 \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u51b2\u6fc0\u54cd\u5e94\u66f4\u5bbd\u3002\u80fd\u5426\u4f7f\u7528\u622a\u6b62\u9891\u7387\u4e3a f_b < f_S/2 f_b < f_S/2 \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u91cd\u5efa\u54cd\u5e94\u5bf9\u5e26\u9650\u4e8e f_b f_b \u5e76\u4ee5 f_S f_S \u62bd\u6837\u5f97\u5230\u7684\u4fe1\u53f7\u6837\u672c\u8fdb\u884c\u63d2\u503c\uff1f 4. \u5b9e\u9a8c\u73af\u5883 MATLAB R2019b 5. \u5b9e\u9a8c\u8fc7\u7a0b\u4e0e\u5206\u6790\u7a0b\u5e8f\u6587\u672c 1. \u62bd\u6837\u5f15\u8d77\u7684\u6df7\u53e0 \u5b9e\u9a8c\u5185\u5bb9\uff1a f_0 f_0 =500Hz, f_s f_s \u5206\u522b\u53d6100Hz,1KHz,10KHz,\u7ed8\u51fax[n]\u53ca\u5176DTFT %100HZ\u62bd\u6837\u7ed3\u679c clear; fs=100;%\u91c7\u6837\u9891\u7387 f0=500; dt=1/fs; w0=0;%\u521d\u59cb\u76f8\u4f4d t=0:dt:15/500; xt=sin(2*pi*f0*t+w0);%\u51fd\u6570\u8868\u8fbe\u5f0f subplot(311); stem(t,xt); grid on; xlabel('\u65f6\u95f4/\u79d2'),ylabel(' \u5e45\u5ea6'); title('\u4ee5100HZ\u62bd\u6837\u6240\u5f97\u4fe1\u53f7'); [X,W]=dtft(xt,1000);%dtft\u53d8\u6362 subplot(312); plot(W/2/pi,abs(X)); grid,title('\u62bd\u6837\u4fe1\u53f7\u7684\u54cd\u5e94') xlabel('\u9891\u7387/2pi\uff09'),ylabel('\u5e45\u5ea6'); subplot(313); plot(W/2/pi,180/pi*angle(X)); grid,title('\u62bd\u6837\u4fe1\u53f7\u7684\u76f8\u4f4d') xlabel('\u9891\u7387/2pi\uff09'),ylabel('\u76f8\u4f4d/\u5ea6\uff09'); \u540c\u7406\uff0c\u5f53 f_s f_s \u5206\u522b\u53d61KHz,10KHz\u65f6\uff0c\u628a\u4ee3\u7801\u4e2d fs=100 \u5206\u522b\u6539\u4e3a fs=1000 \u548c fs=10000 \u5373\u53ef\u3002 \u7ed3\u679c\u5982\u56fe1.1.1 ,1.1.2 ,1.1.3\u6240\u793a\u3002 2. \u62bd\u6837\u7684\u9891\u57df\u89c6\u56fe a. x_a(t)=e^{-1000|t|} x_a(t)=e^{-1000|t|} , \u6c42\u51fa\u5e76\u7ed8\u5236\u5176\u5085\u91cc\u53f6\u53d8\u6362 dt=1/10000; t=-0.05:dt:0.05; xt=exp(-1000*abs(t)); figure(1); subplot(211); plot(t,xt),grid on; title('\u6837\u672c\u4fe1\u53f7'),xlabel('\u65f6\u95f4/\u79d2'),ylabel('\u5e45\u5ea6'); subplot(212); fmagplot(xt,dt); \u7ed3\u679c\u5982\u56fe2.1 b. \u4ee55000HZ\u548c1000HZ\u5206\u522b\u5bf9\u5176\u91c7\u6837\u5f97\u5230x1(n),x2(n);\u753b\u51fa\u4ed6\u4eec\u7684DTFT\u5e76\u4e0e x_a(j\\Omega) x_a(j\\Omega) \u6bd4\u8f83 %5khz\u62bd\u6837\u6240\u5f97\u7684\u4fe1\u53f7 figure(1); fs=5000; dt=1/fs; t=-0.05:dt:0.05;%5khz\u62bd\u6837\u7684\u65f6\u95f4\u8303\u56f4 xt=exp(-1000*abs(t)); subplot(311),stem(t,xt),grid on; xlabel('\u65f6\u95f4/\u79d2'),ylabel('\u5e45\u5ea6'); title('\u4ee55KHZ\u62bd\u6837\u7684\u4fe1\u53f7'); [X,W]=dtft(xt,10000); subplot(312); plot(W/2/pi,abs(X)); grid,title('\u5e45\u9891\u7279\u6027\u66f2\u7ebf') xlabel('\u9891\u7387/2pi'),ylabel('\u5e45\u5ea6'); subplot(313); plot(W/2/pi,180/pi*angle(X),'r'); grid,title('Xa\u7684\u76f8\u9891\u7279\u6027\u66f2\u7ebf') xlabel('\u9891\u7387/2pi'),ylabel('\u76f8\u4f4d/\u5ea6'); \u5bf9\u4e8e1Khz\u7684\u91c7\u6837\u628a fs=5000 \u6539\u4e3a fs=1000 \u5373\u53ef\u3002 \u7ed3\u679c\u5982\u56fe2.2.1 ,2.2.2 3. \u4ece\u6837\u672c\u91cd\u5efa\u4fe1\u53f7 1. \u62df\u5408\u4e3a\u6b63\u5f26\u6ce2 \u5047\u8bbe\u4e09\u4e2a\u62bd\u6837\u6837\u672c\u7b26\u5408\u4e0b\u5217\u5f62\u5f0f\u7684\u6b63\u5f26\u6ce2\u5f62\uff1a x(t)=Acos(\\omega t+\\phi) x(t)=Acos(\\omega t+\\phi) \u5df2\u77e5x(0)\u3001x(1)\u548cx(2)\uff0c\u8fd9\u4e9b\u4fe1\u606f\u8db3\u4ee5\u786e\u5b9a A,\\omega,\\phi A,\\omega,\\phi \u5417\uff1f\u80fd\u5efa\u7acb\u6709\u5173\u7684\u65b9\u7a0b\u5417\uff1f\u603b\u80fd\u89e3\u51fa\u8fd9\u4e9b\u65b9\u7a0b\u5417\uff1f\u5982\u679c\u4e0d\u80fd\uff0c\u7ed9\u51fa\u4e0d\u80fd\u6c42\u89e3\u5904\u7684\u5177\u4f53\u6570\u503c\u3002 \u80fd\uff0c\u76f4\u63a5\u89e3\u65b9\u7a0b\uff0c\u7136\u540e\u753b\u56fe\uff0c\u4f7f\u7528\u4e66\u4e2d\u7684\u60c5\u5f62\uff1a x(0)=2,x(1)=1,x(2)=-1 x(0)=2,x(1)=1,x(2)=-1 y = [2,1,-1]; xdata = [0,1,2]; syms A omega phi %\u4e09\u5143\u65b9\u7a0b\u7ec4 eq1 = A*cos(omega*xdata(1)+phi)-y(1); eq2 = A*cos(omega*xdata(2)+phi)-y(2); eq3 = A*cos(omega*xdata(3)+phi)-y(3); [A ,omega ,phi] = solve(eq1 ,eq2 ,eq3); dt = 1/1000; x = (xdata(1):dt:xdata(length(xdata))); %\u5faa\u73af\uff0c\u6709\u51e0\u4e2a\u89e3\u753b\u51e0\u5f20\u56fe for i = 1:length(A) figure(i); plot(x,A(i)*cos(omega(i).*x+phi(i))),grid on; %\u6dfb\u52a0\u6ce8\u91ca\uff0c\u663e\u793a\u4e09\u4e2a\u53c2\u6570\u503c text(0.05,0,'omega='); text(0.05,-0.15,'A='); text(0.05,-0.3,'phi='); text(0.3,0,char(omega(i))); text(0.3,-0.15,char(A(i))); text(0.3,-0.3,char(phi(i))); end \u5171\u67094\u7ec4\u89e3\uff0c\u7ed3\u679c\u5982\u56fe3.1.1 ,3.1.2 ,3.1.3 ,3.1.4 2. \u7ebf\u6027\u4e0e\u591a\u9879\u5f0f\u5185\u63d2 a\uff0e\u4f7f\u7528matlab,\u7528\u76f4\u7ebf\u6bb5\u8fde\u63a5\u6837\u672c\u3002\u5728\u95f4\u96940.01\u79d2\u7684\u7ec6\u5bc6\u7f51\u683c\u4e0a\u7ed8\u51fa\u7ed3\u679c\uff0c\u89e3\u91caplot\u6307\u4ee4\u5c06\u4f1a\u5982\u4f55\u81ea\u52a8\u7684\u7ed8\u51fa\u8fd9\u4e00\u7ed3\u679c\u3002 clear; x0=2,x1=1,x2=-1;%\u9898\u76ee\u63d0\u4f9b\u7684\u4e09\u4e2a\u6837\u672c\u70b9 y=zeros(1,201); y(1:101)=(x0:-0.01:x1); y(101:201)=(x1:-0.02:x2); t=(0:0.01:2); plot(t,y); grid on; xlabel('\u65f6\u95f4/\u79d2'),ylabel('\u5e45\u5ea6'),title('\u7ebf\u6027\u5185\u63d2'); \u7ed3\u679c\u5982\u56fe3.2.1 b\uff0e\u5c06\u4e09\u89d2\u5f62\u51b2\u6fc0\u54cd\u5e94\u4e0e\u4e09\u4e2a\u6837\u672c\u8fdb\u884c\u5377\u79ef\uff0c\u4f46\u9996\u5148\u8981\u5728\u6bcf\u4e24\u4e2a\u6837\u672c\u4e4b\u95f4\u63d2\u5165\u56db\u4e2a\u96f6\u70b9\uff0c\u5e76\u4ee4\u51b2\u6fc0\u54cd\u5e94\u4e3a0.2\uff0c0.4\uff0c0.6\uff0c0.8\uff0c1.0\uff0c0.8\uff0c0.6\uff0c0.4\uff0c0.2\u3002\u8bc1\u660e\u5982\u679c\u5047\u8bbe\u5728t=-1\u548ct=3\u7684\u6837\u672c\u4e3a\u96f6\uff0c\u4e0a\u9762\u7684\u7ed3\u679c\u4e0e\u7ebf\u6027\u63d2\u503c\u76f8\u540c\u3002 clear; dt=1/5;%\u6bcf\u4e94\u4e2a\u70b9\u4ee3\u8868\u957f\u5ea61 n=[0,0.2,0.4,0.6,0.8,1.0,0.8,0.6,0.4,0.2,0];%\u4e09\u89d2\u51b2\u6fc0\u54cd\u5e94 x=[2,0,0,0,0,1,0,0,0,0,-1]; y=conv(n,x);%\u5377\u79ef\u8fd0\u7b97 subplot(2,1,1) n=(-1:dt:3); stem(n,y),grid on; title('\u4e09\u89d2\u5f62\u51b2\u6fc0\u54cd\u5e94\u5377\u79ef\u5185\u63d2'); subplot(2,1,2) y2=[0,2,1,-1,0]; x2=(-1:3);%\u4f9d\u636e\u6837\u672c\u70b9\u521b\u5efa\u7684\u6a2a\u7eb5\u5e8f\u5217 plot(x2,y2); grid on; title('\u7ebf\u6027\u5185\u63d2'); \u7ed3\u679c\u5982\u56fe3.2.2 c. \u4f7f\u7528MATLAB,\u5c06\u8fd9\u4e09\u4e2a\u6570\u636e\u70b9\u62df\u5408\u4e3a\u4e8c\u9636\u591a\u9879\u5f0f(\u89c1polyfit\u4e0epolyval\u6307\u4ee4)\u3002\u4ee5\u7ec6\u5bc6\u7f51\u683c\u5bf9 -5\\le t\\le 5 -5\\le t\\le 5 \u7ed8\u51fa\u8fd9\u4e2a\u591a\u9879\u5f0f\u3002\u5728\u5b9e\u9645\u610f\u4e49\u4e0a\uff0c\u8fd9\u4e00\u66f2\u7ebf\u662f\u5426\u53ef\u5b9e\u73b0\uff1f\u5b83\u662f\u5426\u80fd\u5f88\u597d\u5730\u5728 0\\le t\\le 2 0\\le t\\le 2 \u533a\u95f4\u4ee5\u5916\u6269\u5c55\u4fe1\u53f7\u503c\uff1f x0=2,x1=1,x2=-1;%\u9898\u76ee\u6240\u63d0\u4f9b\u7684\u4e09\u4e2a\u6837\u672c\u70b9 y=[x0,x1,x2]; x=[0,1,2]; t=(-5:0.1:5); C=polyfit(x,y,2); Z=polyval(C,t); plot(x,y,'r*',t,Z,'b'),grid on; xlabel('\u65f6\u95f4/\u79d2'),ylabel('\u5e45\u5ea6'),title('\u4e8c\u9636\u591a\u9879\u5f0f\u62df\u5408\u5185\u63d2'); \u7ed3\u679c\u5982\u56fe3.2.3 3. \u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668 a.\u5047\u8bbe\u53ea\u6709\u6709\u9650\u6570\u91cf\u7684\u6837\u672c\u662f\u975e\u96f6\u503c\uff0c\u4e14\u53ea\u9700\u5728\u6709\u9650\u65f6\u95f4\u533a\u95f4\u4e0a\u8fdb\u884c\u4fe1\u53f7\u91cd\u5efa\uff0c\u5199\u51fasinc\u5185\u63d2\u8868\u8fbe\u5f0f\u3002 \u8bbe\u6709\u9650\u6837\u672c\u51fd\u6570\u957f\u5ea6\u4e3aN\uff0c x_a(t)=\\sum_{n=0}^{N-1}x_a(t)\\frac{sin(\\pi(t-nT_s/T_s))}{\\pi(t-nT_s/T_s)} x_a(t)=\\sum_{n=0}^{N-1}x_a(t)\\frac{sin(\\pi(t-nT_s/T_s))}{\\pi(t-nT_s/T_s)} b.\u5bf9t=0\u5904\u7684\u6570\u503c\u4e3a1\u7684\u5355\u70b9\u6837\u672c\u8fdb\u884c\u63d2\u503c\uff0c\u7ed8\u51fa\u5927\u7ea6\u4ece-5\u5230+5\u7684\u7ed3\u679c\u3002\u5b83\u5e94\u8be5\u4e0esinc\u51fd\u6570\u5f62\u72b6\u4e00\u81f4\u3002 clear; T=1; dt=0.01; t= (-5:dt:5); x=1; sinc = (sin(pi.*t./T))./(pi.*t./T);%sinc\u5185\u63d2\u8868\u793a\u5f0f x_a=conv(x,sinc); plot(t,x_a),grid on; title('\u63d2\u503c\u91cd\u5efa\u7ed3\u679c'),xlabel('x'),ylabel('y'); \u7ed3\u679c\u5982\u56fe3.3.1 c.\u73b0\u5728\u5bf9sinc\u51fd\u6570\u5185\u63d2\u53ca\u5b9e\u9a8c\u5185\u5bb91\u4e2d\u7684\u4e09\u70b9\u60c5\u5f62\u8fdb\u884c\u63d2\u503c\uff0c\u5c06\u5176\u7ed3\u679c\u4e0e\u62df\u5408\u4e3a\u6b63\u5f26\u6ce2\u7684\u7ed3\u679c\u76f8\u6bd4\u8f83 clear; x0=2;x1=1;x2=-1; x=[x0,x1,x2]; T=1; dt=0.01; t= (-5:dt:5); x_a=zeros(1,1201);%\u79fb\u4f4d\u76f8\u52a0\u51711201\u4e2a\u70b9 sinc = (sin(pi.*t./T))./(pi.*t./T); for n = 0:2%\u79fb\u4f4d\u76f8\u52a0 x_a((1+n*100):(1+n*100+1000))=\\ x_a((1+n*100):(1+n*100+1000))+x(n+1)*(sin(pi.*t./T))./(pi.*t./T); end x_a=x_a(501:701);%\u622a\u53d6t=0\u52302\u5bf9\u5e94\u7684\u503c t_a=(0:dt:2); plot(t_a,x_a),grid on; title('\u63d2\u503c\u91cd\u5efa\u7ed3\u679c'),xlabel('x'),ylabel('y'); \u7ed3\u679c\u5982\u56fe3.3.2 4. \u8bbe\u5b9a\u5e26\u5bbd\u7684\u9009\u62e9 \u89e3\u51b3\u4e0b\u9762\u7684\u95ee\u9898\uff1a\u5e26\u9650\u4e8e\u67d0\u9891\u7387 f_B f_B \u7684\u4fe1\u53f7\u53ef\u4ee5\u7528 f_S=2f_B f_S=2f_B \u8fdb\u884c\u62bd\u6837\uff0c\u5e76\u53ef\u4ee5\u7531\u622a\u6b62\u9891\u7387\u4e3a f_B f_B \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u6062\u590d\uff0c\u6b64\u7ed3\u8bba\u5bf9\u4e8e\u5e26\u9650\u4e8e fb fb \u7684\u7b2c\u4e8c\u4e2a\u4fe1\u53f7\u540c\u6837\u6210\u7acb\uff0c\u5176\u4e2d f_b f_b \u5c0f\u4e8e f_B f_B ,\u8fd9\u662f\u56e0\u4e3a\u5e26\u9650\u4e8e f_b f_b \u7684\u4fe1\u53f7\u4e5f\u5e26\u9650\u4e8e f_B f_B \u3002\u540c\u6837\uff0c\u5e26\u9650\u4e8e f_b f_b \u7684\u4fe1\u53f7\u4e5f\u53ef\u4ee5\u7528 f_S f_S \u62bd\u6837\u5e76\u7531\u622a\u6b62\u9891\u7387\u4e3a f_b f_b \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u6062\u590d\uff0c\u8be5\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u51b2\u6fc0\u54cd\u5e94\uff08sinc\u51fd\u6570\uff09\u6bd4\u622a\u6b62\u9891\u7387\u4e3a f_B=f_S/2 f_B=f_S/2 \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u51b2\u6fc0\u54cd\u5e94\u66f4\u5bbd\u3002\u80fd\u5426\u4f7f\u7528\u622a\u6b62\u9891\u7387\u4e3a f_b < f_S/2 f_b < f_S/2 \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u91cd\u5efa\u54cd\u5e94\u5bf9\u5e26\u9650\u4e8e f_b f_b \u5e76\u4ee5 f_S f_S \u62bd\u6837\u5f97\u5230\u7684\u4fe1\u53f7\u6837\u672c\u8fdb\u884c\u63d2\u503c\uff1f \u53ef\u4ee5\uff0c\u622a\u81f3\u9891\u7387fb \u5c0f\u4e8e\u91c7\u6837\u9891\u7387fS\u4e00\u534a\uff0c\u9891\u57df\u65e0\u6df7\u53e0\u73b0\u8c61\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u622a\u6b62\u9891\u7387\u4e3afb < fS /2\u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u91cd\u5efa\u54cd\u5e94\u5bf9\u5e26\u9650\u4e8efb \u5e76\u4ee5fS \u62bd\u6837\u5f97\u5230\u7684\u4fe1\u53f7\u6837\u672c\u8fdb\u884c\u63d2\u503c\u3002 6. \u5b9e\u9a8c\u7ed3\u679c\u603b\u7ed3 \u56fe1.1.1 \u56fe1.1.2 \u56fe1.1.3 \u56fe2.1 \u56fe2.2.1 \u56fe2.2.2 \u56fe3.1.1 \u56fe3.1.2] \u56fe3.1.3 \u56fe3.1.4 \u56fe3.2.1 \u56fe3.2.2 \u56fe3.2.3 \u56fe3.3.1 \u56fe3.3.2 7. \u7ed3\u679c\u5206\u6790 1. \u62bd\u6837\u5f15\u8d77\u7684\u6df7\u53e0 \u53ea\u6709\u5f53(\u91c7\u6837\u9891\u7387 \\ge \\ge \u6837\u672c\u9891\u7387\u76842\u500d)\u65f6\uff0c\u624d\u80fd\u8f83\u597d\u7684\u8fd8\u539f\u4fe1\u53f7\u3002100HZ\u65f6\u65e0\u6cd5\u91cd\u73b0\u4fe1\u53f7\uff0c1KHZ\u65f6\u80fd\u91cd\u73b0\u6837\u672c\u4fe1\u53f7\u7684\u5c40\u90e8\u5173\u7cfb\uff0c10KHZ\u65f6\u80fd\u8f83\u5b8c\u6574\u7684\u91cd\u73b0\u6837\u672c\u4fe1\u53f7\u3002 2. \u62bd\u6837\u7684\u9891\u57df\u89c6\u56fe a. \u5076\u51fd\u6570\uff0c\u5728 |\\Omega|>4000\\pi |\\Omega|>4000\\pi \u65f6\uff0c\u5e45\u503c\u51e0\u4e4e\u4e3a\u96f6\u3002 b. \u4e0d\u540c\u91c7\u6837\u9891\u7387\u7684DTFT\u4e0e X(j\\Omega) X(j\\Omega) \u6bd4\u8f83\uff0c\u5b83\u4eec\u4ec5\u5728\u5e45\u503c\u4e0a\u6709\u5dee\u5f02\uff0c\u8fd9\u662f\u56e0\u4e3a\u91c7\u6837\u70b9\u6570\u589e\u52a0\uff0c\u5e8f\u5217\u957f\u5ea6\u589e\u52a0\uff0c\u5e45\u503c\u589e\u52a0\u3002 3. \u4ece\u6837\u672c\u91cd\u5efa\u4fe1\u53f7 1. \u62df\u5408\u4e3a\u6b63\u5f26\u6ce2 \u80fd\u6c42\u51fa\u89e3\uff0c\u4e09\u4e2a\u672a\u77e5\u6570\uff0c\u4e09\u4e2a\u65b9\u7a0b\uff0c\u53ea\u4e0d\u8fc7\u67094\u7ec4\u89e3\uff0c\u5229\u7528matlab\u89e3\u65b9\u7a0b\u7ec4\uff0c\u7ed3\u679c\u5982\u56fe3.1.1 ,3.1.2 ,3.1.3 ,3.1.4 2. \u7ebf\u6027\u4e0e\u591a\u9879\u5f0f\u5185\u63d2 a. plot\u6307\u4ee4\u901a\u8fc7\u628a\u6bcf\u4e24\u4e2a\u70b9\u8fde\u6210\u4e00\u6761\u76f4\u7ebf\uff0c\u7ed8\u51fa\u7ed3\u679c\u3002 b. \u901a\u8fc7\u4e09\u89d2\u51b2\u6fc0\u540e\uff0c\u548c\u7ebf\u6027\u63d2\u503c\u7ed3\u679c\u76f8\u540c\u3002 c. \u4e09\u4e2a\u70b9\u521a\u597d\u80fd\u552f\u4e00\u786e\u5b9a\u4e00\u4e2a\u4e8c\u9636\u591a\u9879\u5f0f\uff0c\u5b9e\u9645\u4e2d\u4e0d\u80fd\u5b9e\u73b0\u8fd9\u79cd\u4fe1\u53f7\uff0c\u53ea\u80fd\u65e0\u9650\u63a5\u8fd1\uff0c\u4e14\u4e0d\u80fd\u5f88\u597d\u5728 0\\le t\\le 2 0\\le t\\le 2 \u6269\u5c55\u4fe1\u53f7\u503c\uff0c\uff08\u8870\u51cf\u8fc5\u901f\uff09\u3002 3. \u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668 c. \u63d2\u503c\u7ed3\u679c\u63a5\u8fd1\u6b63\u5f26\u6ce2\u3002 4. \u8bbe\u5b9a\u5e26\u5bbd\u7684\u9009\u62e9 \u53ef\u4ee5\uff0c\u622a\u81f3\u9891\u7387fb \u5c0f\u4e8e\u91c7\u6837\u9891\u7387fS\u4e00\u534a\uff0c\u9891\u57df\u65e0\u6df7\u53e0\u73b0\u8c61\u3002 8.\u5fc3\u5f97\u4f53\u4f1a \u5bf9\u4e8e\u91c7\u6837\u9891\u7387\u589e\u52a0\uff0cDTFT\u7ed3\u679c\u5e45\u5ea6\u589e\u52a0\u7684\u73b0\u8c61\u6709\u4e86\u7406\u89e3\u3002 \u5bf9\u4e0d\u540c\u65b9\u5f0f\u7684\u63d2\u503c\u65b9\u6cd5\u91cd\u5efa\u4fe1\u53f7\u7ed3\u679c\u8fdb\u884c\u4e86\u5206\u6790\uff0c\u52a0\u6df1\u4e86\u7406\u89e3\u3002 \u76f4\u63a5\u7528for\u5faa\u73af\u5199\u4e86\u5377\u79ef\uff0c\u8ba4\u8bc6\u5230\u5176\u5b9e\u8d28\u4e3a\u79fb\u4f4d\u4e0d\u540c\u6743\u503c\u76f8\u52a0\u3002","title":"\u62bd\u6837"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#_1","text":"","title":"\u62bd\u6837"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#1","text":"\u62bd\u6837","title":"1. \u5b9e\u9a8c\u9879\u76ee\u540d\u79f0"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#2","text":"\u7814\u7a76\u62bd\u6837\u8fc7\u7a0b\uff0c\u5206\u6790\u4ea7\u751f\u6df7\u53e0\u6548\u5e94\u7684\u539f\u56e0\uff0c\u5b9e\u73b0\u4e0d\u540c\u91cd\u5efa\u65b9\u6848\uff0c\u8981\u6c421\u4eba1\u7ec4\uff0c2\u5b66\u65f6\u3002","title":"2. \u5b9e\u9a8c\u76ee\u7684"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#3","text":"\u62bd\u6837\u5f15\u8d77\u7684\u6df7\u53e0 \u5bf9\u8fde\u7eed\u6b63\u5f26\u4fe1\u53f7\u8003\u8651\u4e0b\u9762\u8868\u793a\u5f0f\uff1a x(t)=sin(2\\pi f_0+\\phi) x(t)=sin(2\\pi f_0+\\phi) \u53ef\u4ee5\u6309\u62bd\u6837\u9891\u7387 f_s=1/T_s f_s=1/T_s \u5bf9x(t)\u62bd\u6837\u6765\u83b7\u5f97\u79bb\u6563\u65f6\u95f4\u4fe1\u53f7 x[n]=x(t)|_{t=nT_s}=x(t)|_{t=n/f_s}=sin(2\\pi\\frac{f_0}{f_S}n+\\phi) x[n]=x(t)|_{t=nT_s}=x(t)|_{t=n/f_s}=sin(2\\pi\\frac{f_0}{f_S}n+\\phi) f_0 f_0 = 500Hz, \u5206\u522b\u53d6100Hz,1KHz,10KHz,\u7ed8\u51fax[n]\u53ca\u5176DTFT \u62bd\u6837\u7684\u9891\u57df\u89c6\u56fe a. x_a(t)=e^{-1000|t|} x_a(t)=e^{-1000|t|} , \u6c42\u51fa\u5e76\u7ed8\u5236\u5176\u5085\u91cc\u53f6\u53d8\u6362 b. \u4ee55000HZ\u548c1000HZ\u5206\u522b\u5bf9\u5176\u91c7\u6837\u5f97\u5230x1(n),x2(n);\u753b\u51fa\u4ed6\u4eec\u7684DTFT\u5e76\u4e0e x_a(j\\Omega) x_a(j\\Omega) \u6bd4\u8f83 \u4ece\u6837\u672c\u91cd\u5efa\u4fe1\u53f7 (1)\u62df\u5408\u4e3a\u6b63\u5f26\u6ce2 \u5047\u8bbe\u4e09\u4e2a\u62bd\u6837\u6837\u672c\u7b26\u5408\u4e0b\u5217\u5f62\u5f0f\u7684\u6b63\u5f26\u6ce2\u5f62\uff1a $$x(t)=Acos(\\omega t+\\phi)$$ \u5df2\u77e5x(0)\u3001x(1)\u548cx(2)\uff0c\u8fd9\u4e9b\u4fe1\u606f\u8db3\u4ee5\u786e\u5b9a$A,\\omega,\\phi$\u5417\uff1f\u80fd\u5efa\u7acb\u6709\u5173\u7684\u65b9\u7a0b\u5417\uff1f\u603b\u80fd\u89e3\u51fa\u8fd9\u4e9b\u65b9\u7a0b\u5417\uff1f\u5982\u679c\u4e0d\u80fd\uff0c\u7ed9\u51fa\u4e0d\u80fd\u6c42\u89e3\u5904\u7684\u5177\u4f53\u6570\u503c\u3002 (2)\u7ebf\u6027\u4e0e\u591a\u9879\u5f0f\u5185\u63d2 a\uff0e\u4f7f\u7528matlab,\u7528\u76f4\u7ebf\u6bb5\u8fde\u63a5\u6837\u672c\u3002\u5728\u95f4\u96940.01\u79d2\u7684\u7ec6\u5bc6\u7f51\u683c\u4e0a\u7ed8\u51fa\u7ed3\u679c\uff0c\u89e3\u91caplot\u6307\u4ee4\u5c06\u4f1a\u5982\u4f55\u81ea\u52a8\u7684\u7ed8\u51fa\u8fd9\u4e00\u7ed3\u679c\u3002 b\uff0e\u5c06\u4e09\u89d2\u5f62\u51b2\u6fc0\u54cd\u5e94\u4e0e\u4e09\u4e2a\u6837\u672c\u8fdb\u884c\u5377\u79ef\uff0c\u4f46\u9996\u5148\u8981\u5728\u6bcf\u4e24\u4e2a\u6837\u672c\u4e4b\u95f4\u63d2\u5165\u56db\u4e2a\u96f6\u70b9\uff0c\u5e76\u4ee4\u51b2\u6fc0\u54cd\u5e94\u4e3a0.2\uff0c0.4\uff0c0.6\uff0c0.8\uff0c1.0\uff0c0.8\uff0c0.6\uff0c0.4\uff0c0.2\u3002\u8bc1\u660e\u5982\u679c\u5047\u8bbe\u5728t=-1\u548ct=3\u7684\u6837\u672c\u4e3a\u96f6\uff0c\u4e0a\u9762\u7684\u7ed3\u679c\u4e0e\u7ebf\u6027\u63d2\u503c\u76f8\u540c\u3002 c. \u4f7f\u7528MATLAB,\u5c06\u8fd9\u4e09\u4e2a\u6570\u636e\u70b9\u62df\u5408\u4e3a\u4e8c\u9636\u591a\u9879\u5f0f(\u89c1polyfit\u4e0epolyval\u6307\u4ee4)\u3002\u4ee5\u7ec6\u5bc6\u7f51\u683c\u5bf9$-5\\le t\\le 5$\u7ed8\u51fa\u8fd9\u4e2a\u591a\u9879\u5f0f\u3002\u5728\u5b9e\u9645\u610f\u4e49\u4e0a\uff0c\u8fd9\u4e00\u66f2\u7ebf\u662f\u5426\u53ef\u5b9e\u73b0\uff1f\u5b83\u662f\u5426\u80fd\u5f88\u597d\u5730\u5728$0\\le t\\le 2$\u533a\u95f4\u4ee5\u5916\u6269\u5c55\u4fe1\u53f7\u503c\uff1f (3) \u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668 a.\u5047\u8bbe\u53ea\u6709\u6709\u9650\u6570\u91cf\u7684\u6837\u672c\u662f\u975e\u96f6\u503c\uff0c\u4e14\u53ea\u9700\u5728\u6709\u9650\u65f6\u95f4\u533a\u95f4\u4e0a\u8fdb\u884c\u4fe1\u53f7\u91cd\u5efa\uff0c\u5199\u51fasinc\u5185\u63d2\u8868\u8fbe\u5f0f\u3002 b.\u5bf9t=0\u5904\u7684\u6570\u503c\u4e3a1\u7684\u5355\u70b9\u6837\u672c\u8fdb\u884c\u63d2\u503c\uff0c\u7ed8\u51fa\u5927\u7ea6\u4ece-5\u5230+5\u7684\u7ed3\u679c\u3002\u5b83\u5e94\u8be5\u4e0esinc\u51fd\u6570\u5f62\u72b6\u4e00\u81f4\u3002 c.\u73b0\u5728\u5bf9sinc\u51fd\u6570\u5185\u63d2\u53ca\u5b9e\u9a8c\u5185\u5bb91\u4e2d\u7684\u4e09\u70b9\u60c5\u5f62\u8fdb\u884c\u63d2\u503c\uff0c\u5c06\u5176\u7ed3\u679c\u4e0e\u62df\u5408\u4e3a\u6b63\u5f26\u6ce2\u7684\u7ed3\u679c\u76f8\u6bd4\u8f83 \u8bbe\u5b9a\u5e26\u5bbd\u7684\u9009\u62e9 \u5e26\u9650\u4e8e\u67d0\u9891\u7387 f_B f_B \u7684\u4fe1\u53f7\u53ef\u4ee5\u7528 f_S=2f_B f_S=2f_B \u8fdb\u884c\u62bd\u6837\uff0c\u5e76\u53ef\u4ee5\u7531\u622a\u6b62\u9891\u7387\u4e3a f_B f_B \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u6062\u590d\uff0c\u6b64\u7ed3\u8bba\u5bf9\u4e8e\u5e26\u9650\u4e8e fb fb \u7684\u7b2c\u4e8c\u4e2a\u4fe1\u53f7\u540c\u6837\u6210\u7acb\uff0c\u5176\u4e2d f_b f_b \u5c0f\u4e8e f_B f_B ,\u8fd9\u662f\u56e0\u4e3a\u5e26\u9650\u4e8e f_b f_b \u7684\u4fe1\u53f7\u4e5f\u5e26\u9650\u4e8e f_B f_B \u3002\u540c\u6837\uff0c\u5e26\u9650\u4e8e f_b f_b \u7684\u4fe1\u53f7\u4e5f\u53ef\u4ee5\u7528 f_S f_S \u62bd\u6837\u5e76\u7531\u622a\u6b62\u9891\u7387\u4e3a f_b f_b \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u6062\u590d\uff0c\u8be5\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u51b2\u6fc0\u54cd\u5e94\uff08sinc\u51fd\u6570\uff09\u6bd4\u622a\u6b62\u9891\u7387\u4e3a f_B=f_S/2 f_B=f_S/2 \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u51b2\u6fc0\u54cd\u5e94\u66f4\u5bbd\u3002\u80fd\u5426\u4f7f\u7528\u622a\u6b62\u9891\u7387\u4e3a f_b < f_S/2 f_b < f_S/2 \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u91cd\u5efa\u54cd\u5e94\u5bf9\u5e26\u9650\u4e8e f_b f_b \u5e76\u4ee5 f_S f_S \u62bd\u6837\u5f97\u5230\u7684\u4fe1\u53f7\u6837\u672c\u8fdb\u884c\u63d2\u503c\uff1f","title":"3. \u5b9e\u9a8c\u5185\u5bb9\u4e0e\u6b65\u9aa4"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#4","text":"MATLAB R2019b","title":"4. \u5b9e\u9a8c\u73af\u5883"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#5","text":"","title":"5. \u5b9e\u9a8c\u8fc7\u7a0b\u4e0e\u5206\u6790\u7a0b\u5e8f\u6587\u672c"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#1_1","text":"\u5b9e\u9a8c\u5185\u5bb9\uff1a f_0 f_0 =500Hz, f_s f_s \u5206\u522b\u53d6100Hz,1KHz,10KHz,\u7ed8\u51fax[n]\u53ca\u5176DTFT %100HZ\u62bd\u6837\u7ed3\u679c clear; fs=100;%\u91c7\u6837\u9891\u7387 f0=500; dt=1/fs; w0=0;%\u521d\u59cb\u76f8\u4f4d t=0:dt:15/500; xt=sin(2*pi*f0*t+w0);%\u51fd\u6570\u8868\u8fbe\u5f0f subplot(311); stem(t,xt); grid on; xlabel('\u65f6\u95f4/\u79d2'),ylabel(' \u5e45\u5ea6'); title('\u4ee5100HZ\u62bd\u6837\u6240\u5f97\u4fe1\u53f7'); [X,W]=dtft(xt,1000);%dtft\u53d8\u6362 subplot(312); plot(W/2/pi,abs(X)); grid,title('\u62bd\u6837\u4fe1\u53f7\u7684\u54cd\u5e94') xlabel('\u9891\u7387/2pi\uff09'),ylabel('\u5e45\u5ea6'); subplot(313); plot(W/2/pi,180/pi*angle(X)); grid,title('\u62bd\u6837\u4fe1\u53f7\u7684\u76f8\u4f4d') xlabel('\u9891\u7387/2pi\uff09'),ylabel('\u76f8\u4f4d/\u5ea6\uff09'); \u540c\u7406\uff0c\u5f53 f_s f_s \u5206\u522b\u53d61KHz,10KHz\u65f6\uff0c\u628a\u4ee3\u7801\u4e2d fs=100 \u5206\u522b\u6539\u4e3a fs=1000 \u548c fs=10000 \u5373\u53ef\u3002 \u7ed3\u679c\u5982\u56fe1.1.1 ,1.1.2 ,1.1.3\u6240\u793a\u3002","title":"1. \u62bd\u6837\u5f15\u8d77\u7684\u6df7\u53e0"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#2_1","text":"a. x_a(t)=e^{-1000|t|} x_a(t)=e^{-1000|t|} , \u6c42\u51fa\u5e76\u7ed8\u5236\u5176\u5085\u91cc\u53f6\u53d8\u6362 dt=1/10000; t=-0.05:dt:0.05; xt=exp(-1000*abs(t)); figure(1); subplot(211); plot(t,xt),grid on; title('\u6837\u672c\u4fe1\u53f7'),xlabel('\u65f6\u95f4/\u79d2'),ylabel('\u5e45\u5ea6'); subplot(212); fmagplot(xt,dt); \u7ed3\u679c\u5982\u56fe2.1 b. \u4ee55000HZ\u548c1000HZ\u5206\u522b\u5bf9\u5176\u91c7\u6837\u5f97\u5230x1(n),x2(n);\u753b\u51fa\u4ed6\u4eec\u7684DTFT\u5e76\u4e0e x_a(j\\Omega) x_a(j\\Omega) \u6bd4\u8f83 %5khz\u62bd\u6837\u6240\u5f97\u7684\u4fe1\u53f7 figure(1); fs=5000; dt=1/fs; t=-0.05:dt:0.05;%5khz\u62bd\u6837\u7684\u65f6\u95f4\u8303\u56f4 xt=exp(-1000*abs(t)); subplot(311),stem(t,xt),grid on; xlabel('\u65f6\u95f4/\u79d2'),ylabel('\u5e45\u5ea6'); title('\u4ee55KHZ\u62bd\u6837\u7684\u4fe1\u53f7'); [X,W]=dtft(xt,10000); subplot(312); plot(W/2/pi,abs(X)); grid,title('\u5e45\u9891\u7279\u6027\u66f2\u7ebf') xlabel('\u9891\u7387/2pi'),ylabel('\u5e45\u5ea6'); subplot(313); plot(W/2/pi,180/pi*angle(X),'r'); grid,title('Xa\u7684\u76f8\u9891\u7279\u6027\u66f2\u7ebf') xlabel('\u9891\u7387/2pi'),ylabel('\u76f8\u4f4d/\u5ea6'); \u5bf9\u4e8e1Khz\u7684\u91c7\u6837\u628a fs=5000 \u6539\u4e3a fs=1000 \u5373\u53ef\u3002 \u7ed3\u679c\u5982\u56fe2.2.1 ,2.2.2","title":"2. \u62bd\u6837\u7684\u9891\u57df\u89c6\u56fe"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#3_1","text":"","title":"3. \u4ece\u6837\u672c\u91cd\u5efa\u4fe1\u53f7"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#1_2","text":"\u5047\u8bbe\u4e09\u4e2a\u62bd\u6837\u6837\u672c\u7b26\u5408\u4e0b\u5217\u5f62\u5f0f\u7684\u6b63\u5f26\u6ce2\u5f62\uff1a x(t)=Acos(\\omega t+\\phi) x(t)=Acos(\\omega t+\\phi) \u5df2\u77e5x(0)\u3001x(1)\u548cx(2)\uff0c\u8fd9\u4e9b\u4fe1\u606f\u8db3\u4ee5\u786e\u5b9a A,\\omega,\\phi A,\\omega,\\phi \u5417\uff1f\u80fd\u5efa\u7acb\u6709\u5173\u7684\u65b9\u7a0b\u5417\uff1f\u603b\u80fd\u89e3\u51fa\u8fd9\u4e9b\u65b9\u7a0b\u5417\uff1f\u5982\u679c\u4e0d\u80fd\uff0c\u7ed9\u51fa\u4e0d\u80fd\u6c42\u89e3\u5904\u7684\u5177\u4f53\u6570\u503c\u3002 \u80fd\uff0c\u76f4\u63a5\u89e3\u65b9\u7a0b\uff0c\u7136\u540e\u753b\u56fe\uff0c\u4f7f\u7528\u4e66\u4e2d\u7684\u60c5\u5f62\uff1a x(0)=2,x(1)=1,x(2)=-1 x(0)=2,x(1)=1,x(2)=-1 y = [2,1,-1]; xdata = [0,1,2]; syms A omega phi %\u4e09\u5143\u65b9\u7a0b\u7ec4 eq1 = A*cos(omega*xdata(1)+phi)-y(1); eq2 = A*cos(omega*xdata(2)+phi)-y(2); eq3 = A*cos(omega*xdata(3)+phi)-y(3); [A ,omega ,phi] = solve(eq1 ,eq2 ,eq3); dt = 1/1000; x = (xdata(1):dt:xdata(length(xdata))); %\u5faa\u73af\uff0c\u6709\u51e0\u4e2a\u89e3\u753b\u51e0\u5f20\u56fe for i = 1:length(A) figure(i); plot(x,A(i)*cos(omega(i).*x+phi(i))),grid on; %\u6dfb\u52a0\u6ce8\u91ca\uff0c\u663e\u793a\u4e09\u4e2a\u53c2\u6570\u503c text(0.05,0,'omega='); text(0.05,-0.15,'A='); text(0.05,-0.3,'phi='); text(0.3,0,char(omega(i))); text(0.3,-0.15,char(A(i))); text(0.3,-0.3,char(phi(i))); end \u5171\u67094\u7ec4\u89e3\uff0c\u7ed3\u679c\u5982\u56fe3.1.1 ,3.1.2 ,3.1.3 ,3.1.4","title":"1. \u62df\u5408\u4e3a\u6b63\u5f26\u6ce2"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#2_2","text":"a\uff0e\u4f7f\u7528matlab,\u7528\u76f4\u7ebf\u6bb5\u8fde\u63a5\u6837\u672c\u3002\u5728\u95f4\u96940.01\u79d2\u7684\u7ec6\u5bc6\u7f51\u683c\u4e0a\u7ed8\u51fa\u7ed3\u679c\uff0c\u89e3\u91caplot\u6307\u4ee4\u5c06\u4f1a\u5982\u4f55\u81ea\u52a8\u7684\u7ed8\u51fa\u8fd9\u4e00\u7ed3\u679c\u3002 clear; x0=2,x1=1,x2=-1;%\u9898\u76ee\u63d0\u4f9b\u7684\u4e09\u4e2a\u6837\u672c\u70b9 y=zeros(1,201); y(1:101)=(x0:-0.01:x1); y(101:201)=(x1:-0.02:x2); t=(0:0.01:2); plot(t,y); grid on; xlabel('\u65f6\u95f4/\u79d2'),ylabel('\u5e45\u5ea6'),title('\u7ebf\u6027\u5185\u63d2'); \u7ed3\u679c\u5982\u56fe3.2.1 b\uff0e\u5c06\u4e09\u89d2\u5f62\u51b2\u6fc0\u54cd\u5e94\u4e0e\u4e09\u4e2a\u6837\u672c\u8fdb\u884c\u5377\u79ef\uff0c\u4f46\u9996\u5148\u8981\u5728\u6bcf\u4e24\u4e2a\u6837\u672c\u4e4b\u95f4\u63d2\u5165\u56db\u4e2a\u96f6\u70b9\uff0c\u5e76\u4ee4\u51b2\u6fc0\u54cd\u5e94\u4e3a0.2\uff0c0.4\uff0c0.6\uff0c0.8\uff0c1.0\uff0c0.8\uff0c0.6\uff0c0.4\uff0c0.2\u3002\u8bc1\u660e\u5982\u679c\u5047\u8bbe\u5728t=-1\u548ct=3\u7684\u6837\u672c\u4e3a\u96f6\uff0c\u4e0a\u9762\u7684\u7ed3\u679c\u4e0e\u7ebf\u6027\u63d2\u503c\u76f8\u540c\u3002 clear; dt=1/5;%\u6bcf\u4e94\u4e2a\u70b9\u4ee3\u8868\u957f\u5ea61 n=[0,0.2,0.4,0.6,0.8,1.0,0.8,0.6,0.4,0.2,0];%\u4e09\u89d2\u51b2\u6fc0\u54cd\u5e94 x=[2,0,0,0,0,1,0,0,0,0,-1]; y=conv(n,x);%\u5377\u79ef\u8fd0\u7b97 subplot(2,1,1) n=(-1:dt:3); stem(n,y),grid on; title('\u4e09\u89d2\u5f62\u51b2\u6fc0\u54cd\u5e94\u5377\u79ef\u5185\u63d2'); subplot(2,1,2) y2=[0,2,1,-1,0]; x2=(-1:3);%\u4f9d\u636e\u6837\u672c\u70b9\u521b\u5efa\u7684\u6a2a\u7eb5\u5e8f\u5217 plot(x2,y2); grid on; title('\u7ebf\u6027\u5185\u63d2'); \u7ed3\u679c\u5982\u56fe3.2.2 c. \u4f7f\u7528MATLAB,\u5c06\u8fd9\u4e09\u4e2a\u6570\u636e\u70b9\u62df\u5408\u4e3a\u4e8c\u9636\u591a\u9879\u5f0f(\u89c1polyfit\u4e0epolyval\u6307\u4ee4)\u3002\u4ee5\u7ec6\u5bc6\u7f51\u683c\u5bf9 -5\\le t\\le 5 -5\\le t\\le 5 \u7ed8\u51fa\u8fd9\u4e2a\u591a\u9879\u5f0f\u3002\u5728\u5b9e\u9645\u610f\u4e49\u4e0a\uff0c\u8fd9\u4e00\u66f2\u7ebf\u662f\u5426\u53ef\u5b9e\u73b0\uff1f\u5b83\u662f\u5426\u80fd\u5f88\u597d\u5730\u5728 0\\le t\\le 2 0\\le t\\le 2 \u533a\u95f4\u4ee5\u5916\u6269\u5c55\u4fe1\u53f7\u503c\uff1f x0=2,x1=1,x2=-1;%\u9898\u76ee\u6240\u63d0\u4f9b\u7684\u4e09\u4e2a\u6837\u672c\u70b9 y=[x0,x1,x2]; x=[0,1,2]; t=(-5:0.1:5); C=polyfit(x,y,2); Z=polyval(C,t); plot(x,y,'r*',t,Z,'b'),grid on; xlabel('\u65f6\u95f4/\u79d2'),ylabel('\u5e45\u5ea6'),title('\u4e8c\u9636\u591a\u9879\u5f0f\u62df\u5408\u5185\u63d2'); \u7ed3\u679c\u5982\u56fe3.2.3","title":"2. \u7ebf\u6027\u4e0e\u591a\u9879\u5f0f\u5185\u63d2"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#3_2","text":"a.\u5047\u8bbe\u53ea\u6709\u6709\u9650\u6570\u91cf\u7684\u6837\u672c\u662f\u975e\u96f6\u503c\uff0c\u4e14\u53ea\u9700\u5728\u6709\u9650\u65f6\u95f4\u533a\u95f4\u4e0a\u8fdb\u884c\u4fe1\u53f7\u91cd\u5efa\uff0c\u5199\u51fasinc\u5185\u63d2\u8868\u8fbe\u5f0f\u3002 \u8bbe\u6709\u9650\u6837\u672c\u51fd\u6570\u957f\u5ea6\u4e3aN\uff0c x_a(t)=\\sum_{n=0}^{N-1}x_a(t)\\frac{sin(\\pi(t-nT_s/T_s))}{\\pi(t-nT_s/T_s)} x_a(t)=\\sum_{n=0}^{N-1}x_a(t)\\frac{sin(\\pi(t-nT_s/T_s))}{\\pi(t-nT_s/T_s)} b.\u5bf9t=0\u5904\u7684\u6570\u503c\u4e3a1\u7684\u5355\u70b9\u6837\u672c\u8fdb\u884c\u63d2\u503c\uff0c\u7ed8\u51fa\u5927\u7ea6\u4ece-5\u5230+5\u7684\u7ed3\u679c\u3002\u5b83\u5e94\u8be5\u4e0esinc\u51fd\u6570\u5f62\u72b6\u4e00\u81f4\u3002 clear; T=1; dt=0.01; t= (-5:dt:5); x=1; sinc = (sin(pi.*t./T))./(pi.*t./T);%sinc\u5185\u63d2\u8868\u793a\u5f0f x_a=conv(x,sinc); plot(t,x_a),grid on; title('\u63d2\u503c\u91cd\u5efa\u7ed3\u679c'),xlabel('x'),ylabel('y'); \u7ed3\u679c\u5982\u56fe3.3.1 c.\u73b0\u5728\u5bf9sinc\u51fd\u6570\u5185\u63d2\u53ca\u5b9e\u9a8c\u5185\u5bb91\u4e2d\u7684\u4e09\u70b9\u60c5\u5f62\u8fdb\u884c\u63d2\u503c\uff0c\u5c06\u5176\u7ed3\u679c\u4e0e\u62df\u5408\u4e3a\u6b63\u5f26\u6ce2\u7684\u7ed3\u679c\u76f8\u6bd4\u8f83 clear; x0=2;x1=1;x2=-1; x=[x0,x1,x2]; T=1; dt=0.01; t= (-5:dt:5); x_a=zeros(1,1201);%\u79fb\u4f4d\u76f8\u52a0\u51711201\u4e2a\u70b9 sinc = (sin(pi.*t./T))./(pi.*t./T); for n = 0:2%\u79fb\u4f4d\u76f8\u52a0 x_a((1+n*100):(1+n*100+1000))=\\ x_a((1+n*100):(1+n*100+1000))+x(n+1)*(sin(pi.*t./T))./(pi.*t./T); end x_a=x_a(501:701);%\u622a\u53d6t=0\u52302\u5bf9\u5e94\u7684\u503c t_a=(0:dt:2); plot(t_a,x_a),grid on; title('\u63d2\u503c\u91cd\u5efa\u7ed3\u679c'),xlabel('x'),ylabel('y'); \u7ed3\u679c\u5982\u56fe3.3.2","title":"3. \u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#4_1","text":"\u89e3\u51b3\u4e0b\u9762\u7684\u95ee\u9898\uff1a\u5e26\u9650\u4e8e\u67d0\u9891\u7387 f_B f_B \u7684\u4fe1\u53f7\u53ef\u4ee5\u7528 f_S=2f_B f_S=2f_B \u8fdb\u884c\u62bd\u6837\uff0c\u5e76\u53ef\u4ee5\u7531\u622a\u6b62\u9891\u7387\u4e3a f_B f_B \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u6062\u590d\uff0c\u6b64\u7ed3\u8bba\u5bf9\u4e8e\u5e26\u9650\u4e8e fb fb \u7684\u7b2c\u4e8c\u4e2a\u4fe1\u53f7\u540c\u6837\u6210\u7acb\uff0c\u5176\u4e2d f_b f_b \u5c0f\u4e8e f_B f_B ,\u8fd9\u662f\u56e0\u4e3a\u5e26\u9650\u4e8e f_b f_b \u7684\u4fe1\u53f7\u4e5f\u5e26\u9650\u4e8e f_B f_B \u3002\u540c\u6837\uff0c\u5e26\u9650\u4e8e f_b f_b \u7684\u4fe1\u53f7\u4e5f\u53ef\u4ee5\u7528 f_S f_S \u62bd\u6837\u5e76\u7531\u622a\u6b62\u9891\u7387\u4e3a f_b f_b \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u6062\u590d\uff0c\u8be5\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u51b2\u6fc0\u54cd\u5e94\uff08sinc\u51fd\u6570\uff09\u6bd4\u622a\u6b62\u9891\u7387\u4e3a f_B=f_S/2 f_B=f_S/2 \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u51b2\u6fc0\u54cd\u5e94\u66f4\u5bbd\u3002\u80fd\u5426\u4f7f\u7528\u622a\u6b62\u9891\u7387\u4e3a f_b < f_S/2 f_b < f_S/2 \u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u91cd\u5efa\u54cd\u5e94\u5bf9\u5e26\u9650\u4e8e f_b f_b \u5e76\u4ee5 f_S f_S \u62bd\u6837\u5f97\u5230\u7684\u4fe1\u53f7\u6837\u672c\u8fdb\u884c\u63d2\u503c\uff1f \u53ef\u4ee5\uff0c\u622a\u81f3\u9891\u7387fb \u5c0f\u4e8e\u91c7\u6837\u9891\u7387fS\u4e00\u534a\uff0c\u9891\u57df\u65e0\u6df7\u53e0\u73b0\u8c61\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u622a\u6b62\u9891\u7387\u4e3afb < fS /2\u7684\u7406\u60f3\u4f4e\u901a\u91cd\u5efa\u6ee4\u6ce2\u5668\u7684\u91cd\u5efa\u54cd\u5e94\u5bf9\u5e26\u9650\u4e8efb \u5e76\u4ee5fS \u62bd\u6837\u5f97\u5230\u7684\u4fe1\u53f7\u6837\u672c\u8fdb\u884c\u63d2\u503c\u3002","title":"4. \u8bbe\u5b9a\u5e26\u5bbd\u7684\u9009\u62e9"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#6","text":"\u56fe1.1.1 \u56fe1.1.2 \u56fe1.1.3 \u56fe2.1 \u56fe2.2.1 \u56fe2.2.2 \u56fe3.1.1 \u56fe3.1.2] \u56fe3.1.3 \u56fe3.1.4 \u56fe3.2.1 \u56fe3.2.2 \u56fe3.2.3 \u56fe3.3.1 \u56fe3.3.2","title":"6. \u5b9e\u9a8c\u7ed3\u679c\u603b\u7ed3"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#7","text":"","title":"7. \u7ed3\u679c\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#1_3","text":"\u53ea\u6709\u5f53(\u91c7\u6837\u9891\u7387 \\ge \\ge \u6837\u672c\u9891\u7387\u76842\u500d)\u65f6\uff0c\u624d\u80fd\u8f83\u597d\u7684\u8fd8\u539f\u4fe1\u53f7\u3002100HZ\u65f6\u65e0\u6cd5\u91cd\u73b0\u4fe1\u53f7\uff0c1KHZ\u65f6\u80fd\u91cd\u73b0\u6837\u672c\u4fe1\u53f7\u7684\u5c40\u90e8\u5173\u7cfb\uff0c10KHZ\u65f6\u80fd\u8f83\u5b8c\u6574\u7684\u91cd\u73b0\u6837\u672c\u4fe1\u53f7\u3002","title":"1. \u62bd\u6837\u5f15\u8d77\u7684\u6df7\u53e0"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#2_3","text":"a. \u5076\u51fd\u6570\uff0c\u5728 |\\Omega|>4000\\pi |\\Omega|>4000\\pi \u65f6\uff0c\u5e45\u503c\u51e0\u4e4e\u4e3a\u96f6\u3002 b. \u4e0d\u540c\u91c7\u6837\u9891\u7387\u7684DTFT\u4e0e X(j\\Omega) X(j\\Omega) \u6bd4\u8f83\uff0c\u5b83\u4eec\u4ec5\u5728\u5e45\u503c\u4e0a\u6709\u5dee\u5f02\uff0c\u8fd9\u662f\u56e0\u4e3a\u91c7\u6837\u70b9\u6570\u589e\u52a0\uff0c\u5e8f\u5217\u957f\u5ea6\u589e\u52a0\uff0c\u5e45\u503c\u589e\u52a0\u3002","title":"2. \u62bd\u6837\u7684\u9891\u57df\u89c6\u56fe"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#3_3","text":"","title":"3. \u4ece\u6837\u672c\u91cd\u5efa\u4fe1\u53f7"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#1_4","text":"\u80fd\u6c42\u51fa\u89e3\uff0c\u4e09\u4e2a\u672a\u77e5\u6570\uff0c\u4e09\u4e2a\u65b9\u7a0b\uff0c\u53ea\u4e0d\u8fc7\u67094\u7ec4\u89e3\uff0c\u5229\u7528matlab\u89e3\u65b9\u7a0b\u7ec4\uff0c\u7ed3\u679c\u5982\u56fe3.1.1 ,3.1.2 ,3.1.3 ,3.1.4","title":"1. \u62df\u5408\u4e3a\u6b63\u5f26\u6ce2"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#2_4","text":"a. plot\u6307\u4ee4\u901a\u8fc7\u628a\u6bcf\u4e24\u4e2a\u70b9\u8fde\u6210\u4e00\u6761\u76f4\u7ebf\uff0c\u7ed8\u51fa\u7ed3\u679c\u3002 b. \u901a\u8fc7\u4e09\u89d2\u51b2\u6fc0\u540e\uff0c\u548c\u7ebf\u6027\u63d2\u503c\u7ed3\u679c\u76f8\u540c\u3002 c. \u4e09\u4e2a\u70b9\u521a\u597d\u80fd\u552f\u4e00\u786e\u5b9a\u4e00\u4e2a\u4e8c\u9636\u591a\u9879\u5f0f\uff0c\u5b9e\u9645\u4e2d\u4e0d\u80fd\u5b9e\u73b0\u8fd9\u79cd\u4fe1\u53f7\uff0c\u53ea\u80fd\u65e0\u9650\u63a5\u8fd1\uff0c\u4e14\u4e0d\u80fd\u5f88\u597d\u5728 0\\le t\\le 2 0\\le t\\le 2 \u6269\u5c55\u4fe1\u53f7\u503c\uff0c\uff08\u8870\u51cf\u8fc5\u901f\uff09\u3002","title":"2. \u7ebf\u6027\u4e0e\u591a\u9879\u5f0f\u5185\u63d2"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#3_4","text":"c. \u63d2\u503c\u7ed3\u679c\u63a5\u8fd1\u6b63\u5f26\u6ce2\u3002","title":"3. \u7406\u60f3\u4f4e\u901a\u6ee4\u6ce2\u5668"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#4_2","text":"\u53ef\u4ee5\uff0c\u622a\u81f3\u9891\u7387fb \u5c0f\u4e8e\u91c7\u6837\u9891\u7387fS\u4e00\u534a\uff0c\u9891\u57df\u65e0\u6df7\u53e0\u73b0\u8c61\u3002","title":"4. \u8bbe\u5b9a\u5e26\u5bbd\u7684\u9009\u62e9"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/Sample/#8","text":"\u5bf9\u4e8e\u91c7\u6837\u9891\u7387\u589e\u52a0\uff0cDTFT\u7ed3\u679c\u5e45\u5ea6\u589e\u52a0\u7684\u73b0\u8c61\u6709\u4e86\u7406\u89e3\u3002 \u5bf9\u4e0d\u540c\u65b9\u5f0f\u7684\u63d2\u503c\u65b9\u6cd5\u91cd\u5efa\u4fe1\u53f7\u7ed3\u679c\u8fdb\u884c\u4e86\u5206\u6790\uff0c\u52a0\u6df1\u4e86\u7406\u89e3\u3002 \u76f4\u63a5\u7528for\u5faa\u73af\u5199\u4e86\u5377\u79ef\uff0c\u8ba4\u8bc6\u5230\u5176\u5b9e\u8d28\u4e3a\u79fb\u4f4d\u4e0d\u540c\u6743\u503c\u76f8\u52a0\u3002","title":"8.\u5fc3\u5f97\u4f53\u4f1a"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/SpectrumAnalysis/","text":"\u8c31\u5206\u6790 1. \u5b9e\u9a8c\u9879\u76ee\u540d\u79f0 \u8c31\u5206\u6790 2.\u5b9e\u9a8c\u76ee\u7684 \u7814\u7a76\u4e0d\u540c\u7c7b\u578b\u7684\u7a97\u51fd\u6570\uff0c\u7814\u7a76\u4e00\u4e9b\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u6d4b\u8bd5\u7a97\u7684\u6027\u80fd\uff1b\u4e13\u6ce8\u4e8e\u6709\u5173\u7a84\u5e26\u4fe1\u53f7\u7684\u51e0\u4e2a\u4e0d\u540c\u7684\u60c5\u5f62\uff0c\u8981\u6c42\u5408\u7ec4\u8ba8\u8bba\u3001\u5355\u72ec\u5b9e\u9a8c\uff0c2\u5b66\u65f6\u3002 3. \u5b9e\u9a8c\u5185\u5bb9\u4e0e\u6b65\u9aa4 \u5b9e\u9a8c\u5185\u5bb9\uff1a \u4fe1\u53f7\u662f\u65e0\u9650\u957f\u7684\uff0c\u800c\u5728\u8fdb\u884c\u4fe1\u53f7\u5904\u7406\u65f6\u53ea\u80fd\u91c7\u7528\u6709\u9650\u957f\u4fe1\u53f7\uff0c\u6240\u4ee5\u9700\u8981\u5c06\u4fe1\u53f7\u201c\u622a\u65ad\u201d\u3002\u5728\u4fe1\u53f7\u5904\u7406\u4e2d\uff0c\u201c\u622a\u65ad\u201d\u88ab\u770b\u6210\u662f\u7528\u4e00\u4e2a\u6709\u9650\u957f\u7684\u201c\u7a97\u53e3\u201d\u770b\u65e0\u9650\u957f\u7684\u4fe1\u53f7\uff0c\u6216\u8005\u4ece\u5206\u6790\u7684\u89d2\u5ea6\u662f\u65e0\u9650\u957f\u7684\u4fe1\u53f7x(t)\u4e58\u4ee5\u4e00\u4e2a\u6709\u9650\u957f\u7684\u7a97\u51fd\u6570w(t)\uff0c\u7531\u5085\u91cc\u53f6\u53d8\u6362\u6027\u8d28\u53ef\u77e5 x(t)\\Leftrightarrow \\frac{1}{2\\pi}X(j\\omega)W(j\\omega) x(t)\\Leftrightarrow \\frac{1}{2\\pi}X(j\\omega)W(j\\omega) \u5982\u679c\u662fx(t)\u662f\u9891\u5bbd\u6709\u9650\u4fe1\u53f7\uff0c\u800cw(t)\u662f\u9891\u5bbd\u65e0\u9650\u51fd\u6570\uff0c\u622a\u65ad\u540e\u7684\u4fe1\u53f7\u4e5f\u5fc5\u662f\u9891\u5bbd\u65e0\u9650\u4fe1\u53f7\uff0c\u4ece\u800c\u4ea7\u751f\u6240\u8c13\u7684\u9891\u8c31\u6cc4\u9732\u3002\u9891\u8c31\u6cc4\u9732\u662f\u4e0d\u53ef\u907f\u514d\u7684\uff0c\u4f46\u8981\u5c3d\u91cf\u51cf\u5c0f\uff0c\u56e0\u6b64\u8bbe\u8ba1\u4e86\u4e0d\u540c\u7684\u7a97\u51fd\u6570\u6ee1\u8db3\u4e0d\u540c\u7528\u9014\u7684\u8981\u6c42\u3002\u4ece\u80fd\u91cf\u7684\u89d2\u5ea6\uff0c\u9891\u8c31\u6cc4\u9732\u4e5f\u662f\u80fd\u91cf\u6cc4\u9732\uff0c\u56e0\u4e3a\u52a0\u7a97\u540e\uff0c\u4f7f\u539f\u6765\u7684\u4fe1\u53f7\u96c6\u4e2d\u5728\u7a84\u5e26\u5185\u7684\u80fd\u91cf\u5206\u6563\u5230\u65e0\u9650\u7684\u9891\u5bbd\u8303\u56f4\u3002 Matlab\u4e2d\u63d0\u4f9b\u4e868\u79cd\u7a97\u51fd\u6570\uff1a\u77e9\u5f62\u7a97\u3001\u6c49\u5b81\u7a97\u3001\u6c49\u660e\u7a97\u3001\u5df4\u7279\u5229\u7279\u7a97\u3001\u5e03\u83b1\u514b\u66fc\u3001triang\u7a97\u3001kaiser\u7a97\u3001\u5207\u6bd4\u96ea\u592b\u7a97 \u5404\u79cd\u7a97\u51fd\u6570\u7684\u5e45\u9891\u54cd\u5e94\u90fd\u5b58\u5728\u660e\u663e\u7684\u4e3b\u74e3\u548c\u65c1\u74e3\uff0c\u4e3b\u74e3\u9891\u5bbd\u4e0e\u65c1\u74e3\u9891\u5bbd\u7684\u7279\u6027\u51b3\u5b9a\u7a97\u51fd \u6570\u7684\u5e94\u7528\u3002\u4e0d\u540c\u7684\u7a97\u51fd\u6570\u5728\u8fd9\u4e24\u65b9\u9762\u7684\u7279\u70b9\u662f\u4e0d\u76f8\u540c\u7684\u3002\u5982blcakman\u7a97\u5177\u6709\u6700\u5bbd\u7684\u4e3b\u74e3\uff0c\u800cchebyshev\u7a97\u5177\u6709\u6700\u7a84\u7684\u4e3b\u74e3\u7b49\u3002 \u4e3b\u74e3\u7684\u9891\u5bbd\u8fd8\u4e0e\u7a97\u7684\u957f\u5ea6N\u6709\u5173\uff0c\u589e\u52a0\u7a97\u957f\u5ea6N\u5c06\u7f29\u5c0f\u7a97\u51fd\u6570\u4e3b\u74e3\u5bbd\u5ea6\uff0c\u4f46\u4e0d\u80fd\u51cf\u5c0f\u65c1\u74e3\u5e45\u503c\u8870\u51cf\u76f8\u5bf9\u503c\uff08\u5206\u8d1d\u6570\uff09\uff0c\u8fd9\u4e2a\u503c\u662f\u7531\u7a97\u51fd\u6570\u51b3\u5b9a\u7684\u3002 1. \u7528Matlab\u7f16\u7a0b\u7ed8\u5236\u5404\u79cd\u7a97\u51fd\u6570\u7684\u5f62\u72b6\u3002 2. \u7528Matlab\u7f16\u7a0b\u7ed8\u5236\u5404\u79cd\u7a97\u51fd\u6570\u7684\u5e45\u9891\u54cd\u5e94\u3002 3. \u7ed8\u5236\u77e9\u5f62\u7a97\u7684\u5e45\u9891\u76f8\u5e94\uff0c\u7a97\u957f\u5ea6\u5206\u522b\u4e3a\uff1aN=10\uff0cN=20\uff0cN=50\uff0cN=100\u3002 4. \u5df2\u77e5\u5468\u671f\u4fe1\u53f7 x(t)=0.75+3.4cos(2\\pi ft)+2.7cos(4\\pi ft)+1.5sin(3.5\\pi ft)+2.5sin(7\\pi ft) x(t)=0.75+3.4cos(2\\pi ft)+2.7cos(4\\pi ft)+1.5sin(3.5\\pi ft)+2.5sin(7\\pi ft) \u5176\u4e2d\uff0c f=\\frac{25}{16} f=\\frac{25}{16} Hz\uff0c\u82e5\u622a\u65ad\u7684\u65f6\u95f4\u957f\u5ea6\u5206\u522b\u4e3a\u4fe1\u53f7\u5468\u671f\u76840.9\u500d\u548c1.1\u500d\uff0c\u8bd5\u7ed8\u5236\u548c\u6bd4 \u8f83\u91c7\u7528\u4e0b\u9762\u7a97\u51fd\u6570\u63d0\u53d6\u7684x(t)\u7684\u9891\u8c31\u3002 (1)\u77e9\u5f62\u7a97 (2)\u6c49\u5b81\u7a97 (3)\u6c49\u660e\u7a97 (4)\u5df4\u7279\u5229\u7279\u7a97 (5)\u5e03\u83b1\u514b\u66fc\u7a97 (6)triang\u7a97 (7)kaiser\u7a97 (8)\u5207\u6bd4\u96ea\u592b\u7a97 4. \u5b9e\u9a8c\u73af\u5883 MATLAB R2019b 5. \u5b9e\u9a8c\u8fc7\u7a0b\u4e0e\u5206\u6790\u7a0b\u5e8f\u6587\u672c 1. \u7528Matlab\u7f16\u7a0b\u7ed8\u5236\u5404\u79cd\u7a97\u51fd\u6570\u7684\u5f62\u72b6 N=100; w1=boxcar(N); figure(1); stem(w1); title('\u56fe1.1\uff1a\u77e9\u5f62\u7a97boxcar'); xlabel('n'),ylabel('w1'); w2=hanning(N); figure(2); stem(w2); title('\u56fe1.2\uff1a\u6c49\u5b81\u7a97Hanning'); xlabel('n'),ylabel('w2'); w3=hamming(N); figure(3); stem(w3); title('\u56fe1.3\uff1a\u6c49\u660e\u7a97Hamming'); xlabel('n'),ylabel('w3'); w4=bartlett(N); figure(4); stem(w4); title('\u56fe1.4\uff1a\u5df4\u7279\u5229\u7279\u7a97bartlett'); xlabel('n'),ylabel('w4'); w5=blackman(N); figure(5); stem(w5); title('\u56fe1.5\uff1a\u5e03\u83b1\u514b\u66fc\u7a97blackman'); xlabel('n'),ylabel('w5'); w6=triang(N); figure(6); stem(w6); title('\u56fe1.6\uff1atriang\u7a97'); xlabel('n'),ylabel('w6'); w7=kaiser(N); figure(7); stem(w7); title('\u56fe1.7\uff1akaiser\u7a97'); xlabel('n'),ylabel('w7'); w8=chebwin(N); figure(8); stem(w8); title('\u56fe1.8\uff1a\u5207\u6bd4\u96ea\u592b\u7a97chebwin'); xlabel('n'),ylabel('w8'); \u7ed3\u679c\u5982\u56fe1.1-1.8 2. \u7528Matlab\u7f16\u7a0b\u7ed8\u5236\u5404\u79cd\u7a97\u51fd\u6570\u7684\u5e45\u9891\u54cd\u5e94 clear; N=100;%\u9009\u62e9\u7a97\u51fd\u6570\u7684\u957f\u5ea6 subplot(421); [H W]=dtft(boxcar(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.1\uff1aboxcar\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(422); [H W]=dtft(hanning(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.2\uff1aHanning\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(423); [H W]=dtft(hamming(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.3\uff1aHamming\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(424); [H W]=dtft(bartlett(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.4\uff1abartlett\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(425); [H W]=dtft(blackman(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.5\uff1ablackman\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(426); [H W]=dtft(triang(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.6\uff1atriang\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(427); [H W]=dtft(kaiser(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.7\uff1akaiser\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(428); [H W]=dtft(chebwin(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.8\uff1ahebwin\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); \u7ed3\u679c\u5982\u56fe2.1-2.8 3. \u7ed8\u5236\u77e9\u5f62\u7a97\u7684\u5e45\u9891\u76f8\u5e94 clear; N=[10,20,50,100]; w1=boxcar(N(1)); subplot(411); [H,W]=dtft(w1,1024); plot(W/pi,abs(H)); title('\u56fe3.1\uff1a\u957f\u5ea6\u4e3a10\u7684\u77e9\u5f62\u7a97\u5e45\u9891\u7279\u54cd\u5e94'); xlabel('\u9891\u7387\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); w2=boxcar(N(2)); subplot(412); [H,W]=dtft(w2,1024); plot(W/pi,abs(H)); title('\u56fe3.2\uff1a\u957f\u5ea6\u4e3a20\u7684\u77e9\u5f62\u7a97\u5e45\u9891\u7279\u54cd\u5e94'); xlabel('\u9891\u7387\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); w3=boxcar(N(3)); subplot(413); [H,W]=dtft(w3,1024); plot(W/pi,abs(H)); title('\u56fe3.3\uff1a\u957f\u5ea6\u4e3a50\u7684\u77e9\u5f62\u7a97\u5e45\u9891\u7279\u54cd\u5e94'); xlabel('\u9891\u7387\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); w4=boxcar(N(4)); subplot(414); [H,W]=dtft(w4,1024); plot(W/pi,abs(H)); title('\u56fe3.4\uff1a\u957f\u5ea6\u4e3a100\u7684\u77e9\u5f62\u7a97\u5e45\u9891\u7279\u54cd\u5e94'); xlabel('\u9891\u7387\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); \u56db\u79cd\u957f\u5ea6\u5206\u522b\u5bf9\u5e94\u56fe3.1-3.4 4. \u7ed8\u5236\u548c\u6bd4\u8f83\u91c7\u7528\u5404\u79cd\u7a97\u51fd\u6570\u63d0\u53d6\u7684x(t)\u7684\u9891\u8c31 \u4ee41/f=T,\u52194\u4e2a\u6b63\u5f26\u5206\u91cf\u7684\u5468\u671f\u5206\u522b\u4e3aT\uff0c1/2T\uff0c4/7T\u548c2/7T\uff0c \u5219x\uff08t\uff09\u7684\u57fa\u672c\u5468\u671f\u4e3a14T\uff0c clear; f=25/16; %\u5b9e\u9a8c\u4fe1\u53f7\u7684\u5468\u671f\u4e3a25/16 T=14*(1/f); fs=100; %\u91c7\u6837\u9891\u7387 f1=round(0.9*T*fs); f2=round(1.1*T*fs); t1=0:f1-1; t2=0:f2-1; xt1=0.75+3.4*cos(2*pi*f.*t1/fs)+2.7*cos(4*pi*f.*t1/fs)+1.5*sin(3.5*pi*f.*t1/fs)+2.5*sin(7*pi.*t1/fs); xt2=0.75+3.4*cos(2*pi*f.*t2/fs)+2.7*cos(4*pi*f.*t2/fs)+1.5*sin(3.5*pi*f.*t2/fs)+2.5*sin(7*pi.*t2/fs); figure(1); subplot(211),grid; w11=boxcar(f1); x1=w11.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.1.1\uff1a0.9T0\u77e9\u5f62\u7a97boxcar\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; w12=boxcar(f2); x2=w12.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.1.2\uff1a1.1T0\u77e9\u5f62\u7a97boxcar\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(2); w21=hanning(f1); w22=hanning(f2); subplot(211),grid; x1=w21.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.2.1\uff1a0.9T0\u6c49\u5b81\u7a97Hanning\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w22.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.2.2\uff1a1.1T0\u6c49\u5b81\u7a97Hanning\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(3); w31=hamming(f1); w32=hamming(f2); subplot(211),grid; x1=w31.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.3.1\uff1a0.9T0\u6c49\u660e\u7a97Hamming\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w32.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.3.2\uff1a1.1T0\u6c49\u660e\u7a97Hamming\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(4); w41=bartlett(f1); w42=bartlett(f2); subplot(211),grid; x1=w41.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.4.1\uff1a0.9T0\u5df4\u7279\u5229\u7279\u7a97bartlett\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w42.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.4.2\uff1a1.1T0\u5df4\u7279\u5229\u7279\u7a97bartlett\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(5); w51=blackman(f1); w52=blackman(f2); subplot(211),grid; x1=w51.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.5.1\uff1a0.9T0\u5e03\u83b1\u514b\u66fc\u7a97blackman\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w52.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.5.2\uff1a1.1T0\u5e03\u83b1\u514b\u66fc\u7a97blackman\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(6); w61=triang(f1); w62=triang(f2); subplot(211),grid; x1=w61.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.6.1\uff1a0.9T0\u7684triang\u7a97\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w62.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.6.2\uff1a1.1T0\u7684triang\u7a97\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(7); w71=kaiser(f1); w72=kaiser(f2); subplot(211),grid; x1=w71.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.7.1\uff1a10.9T0\u7684kaiser\u7a97\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w72.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.7.2\uff1a1.1T0\u7684kaiser\u7a97\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(8); w81=chebwin(f1); w82=chebwin(f2); subplot(211),grid; x1=w81.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.8.1\uff1a0.9T0\u5207\u6bd4\u96ea\u592b\u7a97chebwin\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w82.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.8.2\uff1a1.1T0\u5207\u6bd4\u96ea\u592b\u7a97chebwin\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); \u7ed3\u679c\u5982\u56fe4.1.1-4.8.2 7. \u7ed3\u679c\u5206\u6790 \u7ed8\u5236\u4e868\u79cd\u7a97\u51fd\u6570\u7684\u5f62\u72b6\uff0c\u5728\u7ed8\u5236\u5468\u671f\u51fd\u6570\u65f6\uff0c\u65e0\u8bba0.9\u8fd8\u662f1.1T\u90fd\u53d1\u751f\u4e86\u9891\u8c31\u6cc4\u9732\u73b0\u8c61\uff0c\u63a8\u6d4b\u53ea\u8981\u4e0d\u662f\u6574\u6570\u500d\u90fd\u4f1a\u6709\u9891\u8c31\u6cc4\u9732\u73b0\u8c61\u7684\u53d1\u751f 8.\u5fc3\u5f97\u4f53\u4f1a \u52a8\u624b\u5b9e\u73b0\u4e868\u79cd\u7a97\u51fd\u6570\u7684\u5f62\u72b6\uff0c\u5bf9\u5176\u5f62\u72b6\u52a0\u6df1\u4e86\u5370\u8c61\u3002 \u4e86\u89e3\u5230\u4e86\u7a97\u51fd\u6570\u4f1a\u5bfc\u81f4\u9891\u8c31\u6cc4\u9732\u73b0\u8c61\u3002","title":"\u8c31\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/SpectrumAnalysis/#_1","text":"","title":"\u8c31\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/SpectrumAnalysis/#1","text":"\u8c31\u5206\u6790","title":"1. \u5b9e\u9a8c\u9879\u76ee\u540d\u79f0"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/SpectrumAnalysis/#2","text":"\u7814\u7a76\u4e0d\u540c\u7c7b\u578b\u7684\u7a97\u51fd\u6570\uff0c\u7814\u7a76\u4e00\u4e9b\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u6d4b\u8bd5\u7a97\u7684\u6027\u80fd\uff1b\u4e13\u6ce8\u4e8e\u6709\u5173\u7a84\u5e26\u4fe1\u53f7\u7684\u51e0\u4e2a\u4e0d\u540c\u7684\u60c5\u5f62\uff0c\u8981\u6c42\u5408\u7ec4\u8ba8\u8bba\u3001\u5355\u72ec\u5b9e\u9a8c\uff0c2\u5b66\u65f6\u3002","title":"2.\u5b9e\u9a8c\u76ee\u7684"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/SpectrumAnalysis/#3","text":"\u5b9e\u9a8c\u5185\u5bb9\uff1a \u4fe1\u53f7\u662f\u65e0\u9650\u957f\u7684\uff0c\u800c\u5728\u8fdb\u884c\u4fe1\u53f7\u5904\u7406\u65f6\u53ea\u80fd\u91c7\u7528\u6709\u9650\u957f\u4fe1\u53f7\uff0c\u6240\u4ee5\u9700\u8981\u5c06\u4fe1\u53f7\u201c\u622a\u65ad\u201d\u3002\u5728\u4fe1\u53f7\u5904\u7406\u4e2d\uff0c\u201c\u622a\u65ad\u201d\u88ab\u770b\u6210\u662f\u7528\u4e00\u4e2a\u6709\u9650\u957f\u7684\u201c\u7a97\u53e3\u201d\u770b\u65e0\u9650\u957f\u7684\u4fe1\u53f7\uff0c\u6216\u8005\u4ece\u5206\u6790\u7684\u89d2\u5ea6\u662f\u65e0\u9650\u957f\u7684\u4fe1\u53f7x(t)\u4e58\u4ee5\u4e00\u4e2a\u6709\u9650\u957f\u7684\u7a97\u51fd\u6570w(t)\uff0c\u7531\u5085\u91cc\u53f6\u53d8\u6362\u6027\u8d28\u53ef\u77e5 x(t)\\Leftrightarrow \\frac{1}{2\\pi}X(j\\omega)W(j\\omega) x(t)\\Leftrightarrow \\frac{1}{2\\pi}X(j\\omega)W(j\\omega) \u5982\u679c\u662fx(t)\u662f\u9891\u5bbd\u6709\u9650\u4fe1\u53f7\uff0c\u800cw(t)\u662f\u9891\u5bbd\u65e0\u9650\u51fd\u6570\uff0c\u622a\u65ad\u540e\u7684\u4fe1\u53f7\u4e5f\u5fc5\u662f\u9891\u5bbd\u65e0\u9650\u4fe1\u53f7\uff0c\u4ece\u800c\u4ea7\u751f\u6240\u8c13\u7684\u9891\u8c31\u6cc4\u9732\u3002\u9891\u8c31\u6cc4\u9732\u662f\u4e0d\u53ef\u907f\u514d\u7684\uff0c\u4f46\u8981\u5c3d\u91cf\u51cf\u5c0f\uff0c\u56e0\u6b64\u8bbe\u8ba1\u4e86\u4e0d\u540c\u7684\u7a97\u51fd\u6570\u6ee1\u8db3\u4e0d\u540c\u7528\u9014\u7684\u8981\u6c42\u3002\u4ece\u80fd\u91cf\u7684\u89d2\u5ea6\uff0c\u9891\u8c31\u6cc4\u9732\u4e5f\u662f\u80fd\u91cf\u6cc4\u9732\uff0c\u56e0\u4e3a\u52a0\u7a97\u540e\uff0c\u4f7f\u539f\u6765\u7684\u4fe1\u53f7\u96c6\u4e2d\u5728\u7a84\u5e26\u5185\u7684\u80fd\u91cf\u5206\u6563\u5230\u65e0\u9650\u7684\u9891\u5bbd\u8303\u56f4\u3002 Matlab\u4e2d\u63d0\u4f9b\u4e868\u79cd\u7a97\u51fd\u6570\uff1a\u77e9\u5f62\u7a97\u3001\u6c49\u5b81\u7a97\u3001\u6c49\u660e\u7a97\u3001\u5df4\u7279\u5229\u7279\u7a97\u3001\u5e03\u83b1\u514b\u66fc\u3001triang\u7a97\u3001kaiser\u7a97\u3001\u5207\u6bd4\u96ea\u592b\u7a97 \u5404\u79cd\u7a97\u51fd\u6570\u7684\u5e45\u9891\u54cd\u5e94\u90fd\u5b58\u5728\u660e\u663e\u7684\u4e3b\u74e3\u548c\u65c1\u74e3\uff0c\u4e3b\u74e3\u9891\u5bbd\u4e0e\u65c1\u74e3\u9891\u5bbd\u7684\u7279\u6027\u51b3\u5b9a\u7a97\u51fd \u6570\u7684\u5e94\u7528\u3002\u4e0d\u540c\u7684\u7a97\u51fd\u6570\u5728\u8fd9\u4e24\u65b9\u9762\u7684\u7279\u70b9\u662f\u4e0d\u76f8\u540c\u7684\u3002\u5982blcakman\u7a97\u5177\u6709\u6700\u5bbd\u7684\u4e3b\u74e3\uff0c\u800cchebyshev\u7a97\u5177\u6709\u6700\u7a84\u7684\u4e3b\u74e3\u7b49\u3002 \u4e3b\u74e3\u7684\u9891\u5bbd\u8fd8\u4e0e\u7a97\u7684\u957f\u5ea6N\u6709\u5173\uff0c\u589e\u52a0\u7a97\u957f\u5ea6N\u5c06\u7f29\u5c0f\u7a97\u51fd\u6570\u4e3b\u74e3\u5bbd\u5ea6\uff0c\u4f46\u4e0d\u80fd\u51cf\u5c0f\u65c1\u74e3\u5e45\u503c\u8870\u51cf\u76f8\u5bf9\u503c\uff08\u5206\u8d1d\u6570\uff09\uff0c\u8fd9\u4e2a\u503c\u662f\u7531\u7a97\u51fd\u6570\u51b3\u5b9a\u7684\u3002 1. \u7528Matlab\u7f16\u7a0b\u7ed8\u5236\u5404\u79cd\u7a97\u51fd\u6570\u7684\u5f62\u72b6\u3002 2. \u7528Matlab\u7f16\u7a0b\u7ed8\u5236\u5404\u79cd\u7a97\u51fd\u6570\u7684\u5e45\u9891\u54cd\u5e94\u3002 3. \u7ed8\u5236\u77e9\u5f62\u7a97\u7684\u5e45\u9891\u76f8\u5e94\uff0c\u7a97\u957f\u5ea6\u5206\u522b\u4e3a\uff1aN=10\uff0cN=20\uff0cN=50\uff0cN=100\u3002 4. \u5df2\u77e5\u5468\u671f\u4fe1\u53f7 x(t)=0.75+3.4cos(2\\pi ft)+2.7cos(4\\pi ft)+1.5sin(3.5\\pi ft)+2.5sin(7\\pi ft) x(t)=0.75+3.4cos(2\\pi ft)+2.7cos(4\\pi ft)+1.5sin(3.5\\pi ft)+2.5sin(7\\pi ft) \u5176\u4e2d\uff0c f=\\frac{25}{16} f=\\frac{25}{16} Hz\uff0c\u82e5\u622a\u65ad\u7684\u65f6\u95f4\u957f\u5ea6\u5206\u522b\u4e3a\u4fe1\u53f7\u5468\u671f\u76840.9\u500d\u548c1.1\u500d\uff0c\u8bd5\u7ed8\u5236\u548c\u6bd4 \u8f83\u91c7\u7528\u4e0b\u9762\u7a97\u51fd\u6570\u63d0\u53d6\u7684x(t)\u7684\u9891\u8c31\u3002 (1)\u77e9\u5f62\u7a97 (2)\u6c49\u5b81\u7a97 (3)\u6c49\u660e\u7a97 (4)\u5df4\u7279\u5229\u7279\u7a97 (5)\u5e03\u83b1\u514b\u66fc\u7a97 (6)triang\u7a97 (7)kaiser\u7a97 (8)\u5207\u6bd4\u96ea\u592b\u7a97","title":"3. \u5b9e\u9a8c\u5185\u5bb9\u4e0e\u6b65\u9aa4"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/SpectrumAnalysis/#4","text":"MATLAB R2019b","title":"4. \u5b9e\u9a8c\u73af\u5883"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/SpectrumAnalysis/#5","text":"","title":"5. \u5b9e\u9a8c\u8fc7\u7a0b\u4e0e\u5206\u6790\u7a0b\u5e8f\u6587\u672c"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/SpectrumAnalysis/#1-matlab","text":"N=100; w1=boxcar(N); figure(1); stem(w1); title('\u56fe1.1\uff1a\u77e9\u5f62\u7a97boxcar'); xlabel('n'),ylabel('w1'); w2=hanning(N); figure(2); stem(w2); title('\u56fe1.2\uff1a\u6c49\u5b81\u7a97Hanning'); xlabel('n'),ylabel('w2'); w3=hamming(N); figure(3); stem(w3); title('\u56fe1.3\uff1a\u6c49\u660e\u7a97Hamming'); xlabel('n'),ylabel('w3'); w4=bartlett(N); figure(4); stem(w4); title('\u56fe1.4\uff1a\u5df4\u7279\u5229\u7279\u7a97bartlett'); xlabel('n'),ylabel('w4'); w5=blackman(N); figure(5); stem(w5); title('\u56fe1.5\uff1a\u5e03\u83b1\u514b\u66fc\u7a97blackman'); xlabel('n'),ylabel('w5'); w6=triang(N); figure(6); stem(w6); title('\u56fe1.6\uff1atriang\u7a97'); xlabel('n'),ylabel('w6'); w7=kaiser(N); figure(7); stem(w7); title('\u56fe1.7\uff1akaiser\u7a97'); xlabel('n'),ylabel('w7'); w8=chebwin(N); figure(8); stem(w8); title('\u56fe1.8\uff1a\u5207\u6bd4\u96ea\u592b\u7a97chebwin'); xlabel('n'),ylabel('w8'); \u7ed3\u679c\u5982\u56fe1.1-1.8","title":"1. \u7528Matlab\u7f16\u7a0b\u7ed8\u5236\u5404\u79cd\u7a97\u51fd\u6570\u7684\u5f62\u72b6"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/SpectrumAnalysis/#2-matlab","text":"clear; N=100;%\u9009\u62e9\u7a97\u51fd\u6570\u7684\u957f\u5ea6 subplot(421); [H W]=dtft(boxcar(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.1\uff1aboxcar\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(422); [H W]=dtft(hanning(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.2\uff1aHanning\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(423); [H W]=dtft(hamming(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.3\uff1aHamming\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(424); [H W]=dtft(bartlett(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.4\uff1abartlett\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(425); [H W]=dtft(blackman(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.5\uff1ablackman\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(426); [H W]=dtft(triang(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.6\uff1atriang\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(427); [H W]=dtft(kaiser(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.7\uff1akaiser\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); subplot(428); [H W]=dtft(chebwin(N),1024);%DTFT plot(W/pi,abs(H)); title('\u56fe2.8\uff1ahebwin\u7684\u5e45\u9891\u54cd\u5e94'); xlabel('w'),ylabel('\u5e45\u5ea6'); \u7ed3\u679c\u5982\u56fe2.1-2.8","title":"2. \u7528Matlab\u7f16\u7a0b\u7ed8\u5236\u5404\u79cd\u7a97\u51fd\u6570\u7684\u5e45\u9891\u54cd\u5e94"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/SpectrumAnalysis/#3_1","text":"clear; N=[10,20,50,100]; w1=boxcar(N(1)); subplot(411); [H,W]=dtft(w1,1024); plot(W/pi,abs(H)); title('\u56fe3.1\uff1a\u957f\u5ea6\u4e3a10\u7684\u77e9\u5f62\u7a97\u5e45\u9891\u7279\u54cd\u5e94'); xlabel('\u9891\u7387\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); w2=boxcar(N(2)); subplot(412); [H,W]=dtft(w2,1024); plot(W/pi,abs(H)); title('\u56fe3.2\uff1a\u957f\u5ea6\u4e3a20\u7684\u77e9\u5f62\u7a97\u5e45\u9891\u7279\u54cd\u5e94'); xlabel('\u9891\u7387\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); w3=boxcar(N(3)); subplot(413); [H,W]=dtft(w3,1024); plot(W/pi,abs(H)); title('\u56fe3.3\uff1a\u957f\u5ea6\u4e3a50\u7684\u77e9\u5f62\u7a97\u5e45\u9891\u7279\u54cd\u5e94'); xlabel('\u9891\u7387\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); w4=boxcar(N(4)); subplot(414); [H,W]=dtft(w4,1024); plot(W/pi,abs(H)); title('\u56fe3.4\uff1a\u957f\u5ea6\u4e3a100\u7684\u77e9\u5f62\u7a97\u5e45\u9891\u7279\u54cd\u5e94'); xlabel('\u9891\u7387\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); \u56db\u79cd\u957f\u5ea6\u5206\u522b\u5bf9\u5e94\u56fe3.1-3.4","title":"3. \u7ed8\u5236\u77e9\u5f62\u7a97\u7684\u5e45\u9891\u76f8\u5e94"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/SpectrumAnalysis/#4-xt","text":"\u4ee41/f=T,\u52194\u4e2a\u6b63\u5f26\u5206\u91cf\u7684\u5468\u671f\u5206\u522b\u4e3aT\uff0c1/2T\uff0c4/7T\u548c2/7T\uff0c \u5219x\uff08t\uff09\u7684\u57fa\u672c\u5468\u671f\u4e3a14T\uff0c clear; f=25/16; %\u5b9e\u9a8c\u4fe1\u53f7\u7684\u5468\u671f\u4e3a25/16 T=14*(1/f); fs=100; %\u91c7\u6837\u9891\u7387 f1=round(0.9*T*fs); f2=round(1.1*T*fs); t1=0:f1-1; t2=0:f2-1; xt1=0.75+3.4*cos(2*pi*f.*t1/fs)+2.7*cos(4*pi*f.*t1/fs)+1.5*sin(3.5*pi*f.*t1/fs)+2.5*sin(7*pi.*t1/fs); xt2=0.75+3.4*cos(2*pi*f.*t2/fs)+2.7*cos(4*pi*f.*t2/fs)+1.5*sin(3.5*pi*f.*t2/fs)+2.5*sin(7*pi.*t2/fs); figure(1); subplot(211),grid; w11=boxcar(f1); x1=w11.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.1.1\uff1a0.9T0\u77e9\u5f62\u7a97boxcar\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; w12=boxcar(f2); x2=w12.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.1.2\uff1a1.1T0\u77e9\u5f62\u7a97boxcar\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(2); w21=hanning(f1); w22=hanning(f2); subplot(211),grid; x1=w21.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.2.1\uff1a0.9T0\u6c49\u5b81\u7a97Hanning\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w22.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.2.2\uff1a1.1T0\u6c49\u5b81\u7a97Hanning\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(3); w31=hamming(f1); w32=hamming(f2); subplot(211),grid; x1=w31.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.3.1\uff1a0.9T0\u6c49\u660e\u7a97Hamming\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w32.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.3.2\uff1a1.1T0\u6c49\u660e\u7a97Hamming\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(4); w41=bartlett(f1); w42=bartlett(f2); subplot(211),grid; x1=w41.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.4.1\uff1a0.9T0\u5df4\u7279\u5229\u7279\u7a97bartlett\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w42.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.4.2\uff1a1.1T0\u5df4\u7279\u5229\u7279\u7a97bartlett\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(5); w51=blackman(f1); w52=blackman(f2); subplot(211),grid; x1=w51.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.5.1\uff1a0.9T0\u5e03\u83b1\u514b\u66fc\u7a97blackman\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w52.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.5.2\uff1a1.1T0\u5e03\u83b1\u514b\u66fc\u7a97blackman\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(6); w61=triang(f1); w62=triang(f2); subplot(211),grid; x1=w61.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.6.1\uff1a0.9T0\u7684triang\u7a97\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w62.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.6.2\uff1a1.1T0\u7684triang\u7a97\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(7); w71=kaiser(f1); w72=kaiser(f2); subplot(211),grid; x1=w71.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.7.1\uff1a10.9T0\u7684kaiser\u7a97\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w72.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.7.2\uff1a1.1T0\u7684kaiser\u7a97\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); figure(8); w81=chebwin(f1); w82=chebwin(f2); subplot(211),grid; x1=w81.*xt1'; [H,W]=dtft(x1,1024); plot(W/pi,abs(H)); title('\u56fe4.8.1\uff1a0.9T0\u5207\u6bd4\u96ea\u592b\u7a97chebwin\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); subplot(212),grid; x2=w82.*xt2'; [H,W]=dtft(x2,1024); plot(W/pi,abs(H)); title('\u56fe4.8.2\uff1a1.1T0\u5207\u6bd4\u96ea\u592b\u7a97chebwin\u7684\u9891\u8c31'),xlabel('\u9891\u7387\uff1a\uff08\u5355\u4f4d\uff1api\uff09'),ylabel('\u5e45\u5ea6'); \u7ed3\u679c\u5982\u56fe4.1.1-4.8.2","title":"4. \u7ed8\u5236\u548c\u6bd4\u8f83\u91c7\u7528\u5404\u79cd\u7a97\u51fd\u6570\u63d0\u53d6\u7684x(t)\u7684\u9891\u8c31"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/SpectrumAnalysis/#7","text":"\u7ed8\u5236\u4e868\u79cd\u7a97\u51fd\u6570\u7684\u5f62\u72b6\uff0c\u5728\u7ed8\u5236\u5468\u671f\u51fd\u6570\u65f6\uff0c\u65e0\u8bba0.9\u8fd8\u662f1.1T\u90fd\u53d1\u751f\u4e86\u9891\u8c31\u6cc4\u9732\u73b0\u8c61\uff0c\u63a8\u6d4b\u53ea\u8981\u4e0d\u662f\u6574\u6570\u500d\u90fd\u4f1a\u6709\u9891\u8c31\u6cc4\u9732\u73b0\u8c61\u7684\u53d1\u751f","title":"7. \u7ed3\u679c\u5206\u6790"},{"location":"%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/Experiment/Digital%20Signal%20Processing%20Experiment/SpectrumAnalysis/#8","text":"\u52a8\u624b\u5b9e\u73b0\u4e868\u79cd\u7a97\u51fd\u6570\u7684\u5f62\u72b6\uff0c\u5bf9\u5176\u5f62\u72b6\u52a0\u6df1\u4e86\u5370\u8c61\u3002 \u4e86\u89e3\u5230\u4e86\u7a97\u51fd\u6570\u4f1a\u5bfc\u81f4\u9891\u8c31\u6cc4\u9732\u73b0\u8c61\u3002","title":"8.\u5fc3\u5f97\u4f53\u4f1a"},{"location":"%E9%85%8D%E7%BD%AE/Linux%20latex/","text":"Linux latex \u914d\u7f6e \u5b89\u88c5texlive \u6e05\u534e\u5927\u5b66\u5f00\u6e90\u8f6f\u4ef6\u955c\u50cf\u7ad9 sudo apt-get install perl-tk sudo mount -o loop texlive* /mnt cd /mnt ./install-tl -gui echo \"# TeXLive2019-path export PATH=/usr/local/texlive/2019/bin/x86_64-linux:$PATH export MANPATH=/usr/local/texlive/2019/texmf-dist/doc/man:$MANPATH export INFOPATH=/usr/local/texlive/2019/texmf-dist/doc/info:$INFOPATH\" >> ~/.bashrc cd .. sudo umount /mnt \u914d\u7f6evscode \u5b89\u88c5LaTeX Workshop\u63d2\u4ef6 { \"latex-workshop.latex.recipes\": [{ \"name\": \"xelatex\", \"tools\": [ \"xelatex\" ] }, { \"name\": \"latexmk\", \"tools\": [ \"latexmk\" ] }, { \"name\": \"pdflatex -> bibtex -> pdflatex*2\", \"tools\": [ \"pdflatex\", \"bibtex\", \"pdflatex\", \"pdflatex\" ] } ], \"latex-workshop.latex.tools\": [{ \"name\": \"latexmk\", \"command\": \"latexmk\", \"args\": [ \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"-pdf\", \"%DOC%\" ] }, { \"name\": \"xelatex\", \"command\": \"xelatex\", \"args\": [ \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"%DOC%\" ] }, { \"name\": \"pdflatex\", \"command\": \"pdflatex\", \"args\": [ \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"%DOC%\" ] }, { \"name\": \"bibtex\", \"command\": \"bibtex\", \"args\": [ \"%DOCFILE%\" ] }], \"latex-workshop.view.pdf.viewer\": \"tab\", \"latex-workshop.latex.clean.fileTypes\": [ \"*.aux\", \"*.bbl\", \"*.blg\", \"*.idx\", \"*.ind\", \"*.lof\", \"*.lot\", \"*.out\", \"*.toc\", \"*.acn\", \"*.acr\", \"*.alg\", \"*.glg\", \"*.glo\", \"*.gls\", \"*.ist\", \"*.fls\", \"*.log\", \"*.fdb_latexmk\" ], } \u5b57\u4f53 \u4e2d\u6587\u53ef\u76f4\u63a5\u4f7f\u7528\uff0c\u9ed8\u8ba4\u662ffandol\uff0c\u4f46\u4f1a\u6709wannring\uff0c\u53ef\u4ee5\u5ffd\u7565\u3002 \u5b9e\u5728\u4e0d\u60f3\u6709wannring\uff0c\u53ef\u5b89\u88c5windows\u5b57\u4f53\uff0c \u53c2\u80031 \uff0c\u518d\u4f7f\u7528: \\documentclass[fontset=windows]{ctexart}","title":"Linux latex \u914d\u7f6e"},{"location":"%E9%85%8D%E7%BD%AE/Linux%20latex/#linux-latex","text":"","title":"Linux latex \u914d\u7f6e"},{"location":"%E9%85%8D%E7%BD%AE/Linux%20latex/#texlive","text":"\u6e05\u534e\u5927\u5b66\u5f00\u6e90\u8f6f\u4ef6\u955c\u50cf\u7ad9 sudo apt-get install perl-tk sudo mount -o loop texlive* /mnt cd /mnt ./install-tl -gui echo \"# TeXLive2019-path export PATH=/usr/local/texlive/2019/bin/x86_64-linux:$PATH export MANPATH=/usr/local/texlive/2019/texmf-dist/doc/man:$MANPATH export INFOPATH=/usr/local/texlive/2019/texmf-dist/doc/info:$INFOPATH\" >> ~/.bashrc cd .. sudo umount /mnt","title":"\u5b89\u88c5texlive"},{"location":"%E9%85%8D%E7%BD%AE/Linux%20latex/#vscode","text":"\u5b89\u88c5LaTeX Workshop\u63d2\u4ef6 { \"latex-workshop.latex.recipes\": [{ \"name\": \"xelatex\", \"tools\": [ \"xelatex\" ] }, { \"name\": \"latexmk\", \"tools\": [ \"latexmk\" ] }, { \"name\": \"pdflatex -> bibtex -> pdflatex*2\", \"tools\": [ \"pdflatex\", \"bibtex\", \"pdflatex\", \"pdflatex\" ] } ], \"latex-workshop.latex.tools\": [{ \"name\": \"latexmk\", \"command\": \"latexmk\", \"args\": [ \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"-pdf\", \"%DOC%\" ] }, { \"name\": \"xelatex\", \"command\": \"xelatex\", \"args\": [ \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"%DOC%\" ] }, { \"name\": \"pdflatex\", \"command\": \"pdflatex\", \"args\": [ \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"%DOC%\" ] }, { \"name\": \"bibtex\", \"command\": \"bibtex\", \"args\": [ \"%DOCFILE%\" ] }], \"latex-workshop.view.pdf.viewer\": \"tab\", \"latex-workshop.latex.clean.fileTypes\": [ \"*.aux\", \"*.bbl\", \"*.blg\", \"*.idx\", \"*.ind\", \"*.lof\", \"*.lot\", \"*.out\", \"*.toc\", \"*.acn\", \"*.acr\", \"*.alg\", \"*.glg\", \"*.glo\", \"*.gls\", \"*.ist\", \"*.fls\", \"*.log\", \"*.fdb_latexmk\" ], }","title":"\u914d\u7f6evscode"},{"location":"%E9%85%8D%E7%BD%AE/Linux%20latex/#_1","text":"\u4e2d\u6587\u53ef\u76f4\u63a5\u4f7f\u7528\uff0c\u9ed8\u8ba4\u662ffandol\uff0c\u4f46\u4f1a\u6709wannring\uff0c\u53ef\u4ee5\u5ffd\u7565\u3002 \u5b9e\u5728\u4e0d\u60f3\u6709wannring\uff0c\u53ef\u5b89\u88c5windows\u5b57\u4f53\uff0c \u53c2\u80031 \uff0c\u518d\u4f7f\u7528: \\documentclass[fontset=windows]{ctexart}","title":"\u5b57\u4f53"},{"location":"%E9%85%8D%E7%BD%AE/LinuxIcon/","text":"Linux \u65e5\u5e38 \u5e94\u7528\u56fe\u6807 \u684c\u9762\u5feb\u6377\u65b9\u5f0f\u5b58\u653e\u4f4d\u7f6e\uff1a /usr/share/applications/ Format: #\u6587\u4ef6\u5934 [Desktop Entry] #\u7f16\u7801\u65b9\u5f0f Encoding=UTF-8 #\u5e94\u7528\u7a0b\u5e8f\u540d\u79f0\uff0c\u6839\u636e\u5f53\u524d\u7cfb\u7edf\u8bed\u8a00\u5339\u914d\u663e\u793a\uff0c\u4f18\u5148\u5339\u914d\u66f4\u7ec6\u5316\u7684\u8bed\u8a00\u6807\u8bc6\u540d\u79f0 Name=aMule Name[en]=en_name Name[en_US]=US_name #\u9f20\u6807\u7ecf\u8fc7\u4e0a\u9762\u65f6\u7684\u63d0\u793a\u540d\u79f0\uff0c\u4e5f\u53ef\u56fd\u9645\u5316 Comment=comment #\u83dc\u5355\u6267\u884c\u7684\u547d\u4ee4\u6216\u7a0b\u5e8f Exec=command #\u663e\u793a\u5728\u83dc\u5355\u9879\u4e2d\u7684\u56fe\u6807\uff0c\u53ef\u4ee5\u4e3a\u7a7a Icon=iconpath #\u662f\u5426\u4f7f\u7528\u7ec8\u7aef Terminal=false #\u5206\u7c7b Type=Application #\u83dc\u5355\u662f\u5426\u9690\u85cf\uff0c\u7c7b\u4f3cNoDisplay\u5c5e\u6027 Hidden=false #\u83dc\u5355\u6240\u5c5e\u7c7b\u522b\uff0c\u53ef\u4ee5\u786e\u5b9a\u8be5\u83dc\u5355\u7684\u4f4d\u7f6e Categories=Application;Network; vim \u6280\u5de7 \u8f93\u51fa vim \u4e2d\u5185\u5bb9\u5230\u7cfb\u7edf\u6587\u4ef6\u4e2d: `:w !sudo tee PATH","title":"Linux \u65e5\u5e38"},{"location":"%E9%85%8D%E7%BD%AE/LinuxIcon/#linux","text":"","title":"Linux \u65e5\u5e38"},{"location":"%E9%85%8D%E7%BD%AE/LinuxIcon/#_1","text":"\u684c\u9762\u5feb\u6377\u65b9\u5f0f\u5b58\u653e\u4f4d\u7f6e\uff1a /usr/share/applications/ Format: #\u6587\u4ef6\u5934 [Desktop Entry] #\u7f16\u7801\u65b9\u5f0f Encoding=UTF-8 #\u5e94\u7528\u7a0b\u5e8f\u540d\u79f0\uff0c\u6839\u636e\u5f53\u524d\u7cfb\u7edf\u8bed\u8a00\u5339\u914d\u663e\u793a\uff0c\u4f18\u5148\u5339\u914d\u66f4\u7ec6\u5316\u7684\u8bed\u8a00\u6807\u8bc6\u540d\u79f0 Name=aMule Name[en]=en_name Name[en_US]=US_name #\u9f20\u6807\u7ecf\u8fc7\u4e0a\u9762\u65f6\u7684\u63d0\u793a\u540d\u79f0\uff0c\u4e5f\u53ef\u56fd\u9645\u5316 Comment=comment #\u83dc\u5355\u6267\u884c\u7684\u547d\u4ee4\u6216\u7a0b\u5e8f Exec=command #\u663e\u793a\u5728\u83dc\u5355\u9879\u4e2d\u7684\u56fe\u6807\uff0c\u53ef\u4ee5\u4e3a\u7a7a Icon=iconpath #\u662f\u5426\u4f7f\u7528\u7ec8\u7aef Terminal=false #\u5206\u7c7b Type=Application #\u83dc\u5355\u662f\u5426\u9690\u85cf\uff0c\u7c7b\u4f3cNoDisplay\u5c5e\u6027 Hidden=false #\u83dc\u5355\u6240\u5c5e\u7c7b\u522b\uff0c\u53ef\u4ee5\u786e\u5b9a\u8be5\u83dc\u5355\u7684\u4f4d\u7f6e Categories=Application;Network;","title":"\u5e94\u7528\u56fe\u6807"},{"location":"%E9%85%8D%E7%BD%AE/LinuxIcon/#vim","text":"\u8f93\u51fa vim \u4e2d\u5185\u5bb9\u5230\u7cfb\u7edf\u6587\u4ef6\u4e2d: `:w !sudo tee PATH","title":"vim \u6280\u5de7"},{"location":"%E9%85%8D%E7%BD%AE/Windows10%20Config/","text":"Regedit Close Cortana\uff1a Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Windows Search New DWORD named AllowCortana , and it't value is 0 . Set Key Map Computer\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout Swap Esc with Caps : New Binaray Value named Scancode Map , and value like this Install App Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh') scoop install aria2 scoop intall 7zip scoop install python3 scoop install git scoop install github scoop install vscode","title":"Windows10 Config"},{"location":"%E9%85%8D%E7%BD%AE/Windows10%20Config/#regedit","text":"","title":"Regedit"},{"location":"%E9%85%8D%E7%BD%AE/Windows10%20Config/#close-cortana","text":"Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Windows Search New DWORD named AllowCortana , and it't value is 0 .","title":"Close Cortana\uff1a"},{"location":"%E9%85%8D%E7%BD%AE/Windows10%20Config/#set-key-map","text":"Computer\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout Swap Esc with Caps : New Binaray Value named Scancode Map , and value like this","title":"Set Key Map"},{"location":"%E9%85%8D%E7%BD%AE/Windows10%20Config/#install-app","text":"Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh') scoop install aria2 scoop intall 7zip scoop install python3 scoop install git scoop install github scoop install vscode","title":"Install App"}]}